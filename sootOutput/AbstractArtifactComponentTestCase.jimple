public abstract class AbstractArtifactComponentTestCase extends java.lang.Object
{
    protected org.apache.maven.artifact.factory.ArtifactFactory artifactFactory;
    protected org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory artifactRepositoryFactory;
    org.apache.maven.plugin.LegacySupport legacySupport;
    org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repoLayout;
    org.codehaus.plexus.PlexusContainer container;
    private static final char[] hexCode;

    public void <init>()
    {
        AbstractArtifactComponentTestCase this;

        this := @this: AbstractArtifactComponentTestCase;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.plexus.PlexusContainer getContainer()
    {
        AbstractArtifactComponentTestCase this;
        org.codehaus.plexus.PlexusContainer $stack1;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack1 = $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.codehaus.plexus.PlexusContainer container>;

        return $stack1;
    }

    public void setUp() throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.eclipse.aether.RepositorySystemSession repoSession;
        org.codehaus.plexus.PlexusContainer $stack5;
        org.apache.maven.plugin.LegacySupport $stack8;
        org.apache.maven.execution.DefaultMavenExecutionRequest $u0;
        org.apache.maven.execution.DefaultMavenExecutionResult $u1;
        org.apache.maven.execution.MavenSession $u2;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1, $r4;
        org.apache.maven.execution.MavenExecutionRequest $r2;
        org.apache.maven.execution.MavenExecutionResult $r3;

        this := @this: AbstractArtifactComponentTestCase;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        repoSession = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.eclipse.aether.RepositorySystemSession initRepoSession()>();

        $u2 = new org.apache.maven.execution.MavenSession;

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack5 = virtualinvoke $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.codehaus.plexus.PlexusContainer getContainer()>();

        $u0 = new org.apache.maven.execution.DefaultMavenExecutionRequest;

        specialinvoke $u0.<org.apache.maven.execution.DefaultMavenExecutionRequest: void <init>()>();

        $u1 = new org.apache.maven.execution.DefaultMavenExecutionResult;

        specialinvoke $u1.<org.apache.maven.execution.DefaultMavenExecutionResult: void <init>()>();

        $r2 = (org.apache.maven.execution.MavenExecutionRequest) $u0;

        $r3 = (org.apache.maven.execution.MavenExecutionResult) $u1;

        specialinvoke $u2.<org.apache.maven.execution.MavenSession: void <init>(org.codehaus.plexus.PlexusContainer,org.eclipse.aether.RepositorySystemSession,org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.execution.MavenExecutionResult)>($stack5, repoSession, $r2, $r3);

        $r4 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack8 = $r4.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.plugin.LegacySupport legacySupport>;

        interfaceinvoke $stack8.<org.apache.maven.plugin.LegacySupport: void setSession(org.apache.maven.execution.MavenSession)>($u2);

        return;
    }

    protected abstract java.lang.String component();

    protected org.apache.maven.artifact.repository.ArtifactRepository badLocalRepository() throws java.lang.Exception
    {
        java.lang.StringBuilder $stack4, $stack6, $stack7, $stack15, $stack17, $u0, $u2;
        AbstractArtifactComponentTestCase this;
        java.lang.String $stack5, path, $stack10, $stack16, $stack18;
        org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory $stack13;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack19;
        org.apache.maven.artifact.repository.ArtifactRepository $stack20;
        java.io.File $u1;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1, $r2;

        this := @this: AbstractArtifactComponentTestCase;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/test-repositories/");

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: java.lang.String component()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/bad-local-repository");

        path = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new java.io.File;

        $stack10 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack10, path);

        virtualinvoke $u1.<java.io.File: boolean createNewFile()>();

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack13 = $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory artifactRepositoryFactory>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack16 = virtualinvoke $u1.<java.io.File: java.lang.String getPath()>();

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack19 = $r2.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repoLayout>;

        $stack20 = interfaceinvoke $stack13.<org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("test", $stack18, $stack19, null, null);

        return $stack20;
    }

    protected java.lang.String getRepositoryLayout()
    {
        AbstractArtifactComponentTestCase this;

        this := @this: AbstractArtifactComponentTestCase;

        return "default";
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository localRepository() throws java.lang.Exception
    {
        java.lang.StringBuilder $stack4, $stack6, $stack7, $stack14, $stack16, $u0, $u2;
        AbstractArtifactComponentTestCase this;
        java.lang.String $stack5, path, $stack10, $stack15, $stack17;
        org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory $stack12;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack18;
        org.apache.maven.artifact.repository.ArtifactRepository $stack19;
        java.io.File $u1;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1, $r2;

        this := @this: AbstractArtifactComponentTestCase;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/test-repositories/");

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: java.lang.String component()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/local-repository");

        path = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new java.io.File;

        $stack10 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack10, path);

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack12 = $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory artifactRepositoryFactory>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack15 = virtualinvoke $u1.<java.io.File: java.lang.String getPath()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack18 = $r2.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repoLayout>;

        $stack19 = interfaceinvoke $stack12.<org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("local", $stack17, $stack18, null, null);

        return $stack19;
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository remoteRepository() throws java.lang.Exception
    {
        java.lang.StringBuilder $stack4, $stack6, $stack7, $stack14, $stack16, $u0, $u2;
        AbstractArtifactComponentTestCase this;
        java.lang.String $stack5, path, $stack10, $stack15, $stack17;
        org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory $stack12;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack19;
        org.apache.maven.artifact.repository.ArtifactRepository $stack21;
        java.io.File $u1;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $u3, $u4;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1, $r2;

        this := @this: AbstractArtifactComponentTestCase;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/test-repositories/");

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: java.lang.String component()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/remote-repository");

        path = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new java.io.File;

        $stack10 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack10, path);

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack12 = $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory artifactRepositoryFactory>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack15 = virtualinvoke $u1.<java.io.File: java.lang.String getPath()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack19 = $r2.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repoLayout>;

        $u3 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u3.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $u4 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u4.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $stack21 = interfaceinvoke $stack12.<org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("test", $stack17, $stack19, $u3, $u4);

        return $stack21;
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository badRemoteRepository() throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack1;
        org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository $stack3;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1;

        this := @this: AbstractArtifactComponentTestCase;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack2 = $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory artifactRepositoryFactory>;

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack1 = $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repoLayout>;

        $stack3 = interfaceinvoke $stack2.<org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("test", "http://foo.bar/repository", $stack1, null, null);

        return $stack3;
    }

    protected void assertRemoteArtifactPresent(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository remoteRepo;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String path, $stack8, $stack14;
        boolean $stack9;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $u1;
        java.io.File $u0;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        remoteRepo = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository remoteRepository()>();

        path = interfaceinvoke remoteRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $u0 = new java.io.File;

        $stack8 = interfaceinvoke remoteRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack8, path);

        $stack9 = virtualinvoke $u0.<java.io.File: boolean exists()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote artifact ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u0);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be present.");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack9, $stack14);

        return;
    }

    protected void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository localRepo;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String path, $stack8, $stack14;
        boolean $stack9;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $u1;
        java.io.File $u0;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        localRepo = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        path = interfaceinvoke localRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $u0 = new java.io.File;

        $stack8 = interfaceinvoke localRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack8, path);

        $stack9 = virtualinvoke $u0.<java.io.File: boolean exists()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local artifact ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u0);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be present.");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack9, $stack14);

        return;
    }

    protected void assertRemoteArtifactNotPresent(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository remoteRepo;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String path, $stack8, $stack14;
        boolean $stack9;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $u1;
        java.io.File $u0;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        remoteRepo = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository remoteRepository()>();

        path = interfaceinvoke remoteRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $u0 = new java.io.File;

        $stack8 = interfaceinvoke remoteRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack8, path);

        $stack9 = virtualinvoke $u0.<java.io.File: boolean exists()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote artifact ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u0);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not be present.");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack9, $stack14);

        return;
    }

    protected void assertLocalArtifactNotPresent(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository localRepo;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String path, $stack8, $stack14;
        boolean $stack9;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $u1;
        java.io.File $u0;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        localRepo = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        path = interfaceinvoke localRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $u0 = new java.io.File;

        $stack8 = interfaceinvoke localRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack8, path);

        $stack9 = virtualinvoke $u0.<java.io.File: boolean exists()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local artifact ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u0);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not be present.");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack9, $stack14);

        return;
    }

    protected java.util.List remoteRepositories() throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack3;
        java.util.ArrayList $u0;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository remoteRepository()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack3);

        return $u0;
    }

    protected org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        java.lang.String artifactId, version;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.repository.ArtifactRepository $stack5;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1, $r2;

        this := @this: AbstractArtifactComponentTestCase;

        artifactId := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        artifact = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String)>(artifactId, version);

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack5 = virtualinvoke $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        $r2 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        virtualinvoke $r2.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void createArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>(artifact, $stack5);

        return artifact;
    }

    protected org.apache.maven.artifact.Artifact createRemoteArtifact(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        java.lang.String artifactId, version;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.repository.ArtifactRepository $stack5;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1, $r2;

        this := @this: AbstractArtifactComponentTestCase;

        artifactId := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        artifact = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String)>(artifactId, version);

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack5 = virtualinvoke $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository remoteRepository()>();

        $r2 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        virtualinvoke $r2.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void createArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>(artifact, $stack5);

        return artifact;
    }

    protected void createLocalArtifact(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.repository.ArtifactRepository $stack2;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        virtualinvoke $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void createArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>(artifact, $stack2);

        return;
    }

    protected void createRemoteArtifact(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.repository.ArtifactRepository $stack2;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository remoteRepository()>();

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        virtualinvoke $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void createArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>(artifact, $stack2);

        return;
    }

    protected void createArtifact(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.ArtifactRepository) throws java.lang.Exception
    {
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String path, $stack14, $stack20, $stack22, $stack26, $stack31, $stack35, md5path#6;
        java.io.File $stack13, $stack15, $stack30, $stack37;
        boolean $stack16;
        java.io.OutputStreamWriter $stack17, $stack32;
        java.io.FileOutputStream $stack18, $stack33;
        java.nio.charset.Charset $stack19, $stack34;
        byte[] $stack23, digest#5;
        java.lang.StringBuilder $stack25, $stack27, $stack28;
        java.lang.Throwable $stack43, $stack44, $stack46, $stack47;
        AbstractArtifactComponentTestCase this;
        java.security.MessageDigest writer;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        repository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        path = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $stack13 = new java.io.File;

        $stack14 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $stack13.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack14, path);

        $stack15 = virtualinvoke $stack13.<java.io.File: java.io.File getParentFile()>();

        $stack16 = virtualinvoke $stack15.<java.io.File: boolean exists()>();

        if $stack16 != 0 goto label01;

        $stack37 = virtualinvoke $stack13.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $stack37.<java.io.File: boolean mkdirs()>();

     label01:
        $stack17 = new java.io.OutputStreamWriter;

        $stack18 = new java.io.FileOutputStream;

        specialinvoke $stack18.<java.io.FileOutputStream: void <init>(java.io.File)>($stack13);

        $stack19 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $stack17.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($stack18, $stack19);

     label02:
        $stack20 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        virtualinvoke $stack17.<java.io.Writer: void write(java.lang.String)>($stack20);

     label03:
        virtualinvoke $stack17.<java.io.Writer: void close()>();

        goto label09;

     label04:
        $stack47 := @caughtexception;

     label05:
        virtualinvoke $stack17.<java.io.Writer: void close()>();

     label06:
        goto label08;

     label07:
        $stack46 := @caughtexception;

        virtualinvoke $stack47.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack46);

     label08:
        throw $stack47;

     label09:
        writer = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $stack22 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        $stack23 = virtualinvoke $stack22.<java.lang.String: byte[] getBytes()>();

        virtualinvoke writer.<java.security.MessageDigest: void update(byte[])>($stack23);

        digest#5 = virtualinvoke writer.<java.security.MessageDigest: byte[] digest()>();

        $stack25 = new java.lang.StringBuilder;

        specialinvoke $stack25.<java.lang.StringBuilder: void <init>()>();

        $stack26 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $stack27 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".md5");

        md5path#6 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack30 = new java.io.File;

        $stack31 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $stack30.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack31, md5path#6);

        $stack32 = new java.io.OutputStreamWriter;

        $stack33 = new java.io.FileOutputStream;

        specialinvoke $stack33.<java.io.FileOutputStream: void <init>(java.io.File)>($stack30);

        $stack34 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $stack32.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($stack33, $stack34);

     label10:
        $stack35 = staticinvoke <org.apache.maven.artifact.AbstractArtifactComponentTestCase: java.lang.String printHexBinary(byte[])>(digest#5);

        virtualinvoke $stack32.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($stack35);

     label11:
        virtualinvoke $stack32.<java.io.Writer: void close()>();

        goto label17;

     label12:
        $stack44 := @caughtexception;

     label13:
        virtualinvoke $stack32.<java.io.Writer: void close()>();

     label14:
        goto label16;

     label15:
        $stack43 := @caughtexception;

        virtualinvoke $stack44.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack43);

     label16:
        throw $stack44;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        java.lang.String artifactId, version;
        org.apache.maven.artifact.Artifact $stack3;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        artifactId := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String)>(artifactId, version, "jar");

        return $stack3;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        java.lang.String artifactId, version, type;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        artifactId := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        type := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("org.apache.maven", artifactId, version, type);

        return $stack4;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        java.lang.String groupId, artifactId, version, type;
        org.apache.maven.artifact.factory.ArtifactFactory $stack6;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0;

        this := @this: AbstractArtifactComponentTestCase;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        type := @parameter3: java.lang.String;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack6 = $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.factory.ArtifactFactory artifactFactory>;

        a = interfaceinvoke $stack6.<org.apache.maven.artifact.factory.ArtifactFactory: org.apache.maven.artifact.Artifact createBuildArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, type);

        return a;
    }

    protected void deleteLocalArtifact(org.apache.maven.artifact.Artifact) throws java.lang.Exception
    {
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.repository.ArtifactRepository $stack2;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r0, $r1;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        $r1 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        virtualinvoke $r1.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void deleteArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>(artifact, $stack2);

        return;
    }

    protected void deleteArtifact(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.ArtifactRepository) throws java.lang.Exception
    {
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String path, $stack7, $stack14;
        java.io.File $stack6;
        boolean $stack8, $stack9;
        java.io.IOException $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack13;
        AbstractArtifactComponentTestCase this;

        this := @this: AbstractArtifactComponentTestCase;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        repository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        path = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        $stack6 = new java.io.File;

        $stack7 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $stack6.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack7, path);

        $stack8 = virtualinvoke $stack6.<java.io.File: boolean exists()>();

        if $stack8 == 0 goto label1;

        $stack9 = virtualinvoke $stack6.<java.io.File: boolean delete()>();

        if $stack9 != 0 goto label1;

        $stack10 = new java.io.IOException;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure while attempting to delete artifact ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack6);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack10.<java.io.IOException: void <init>(java.lang.String)>($stack14);

        throw $stack10;

     label1:
        return;
    }

    protected org.eclipse.aether.RepositorySystemSession initRepoSession() throws java.lang.Exception
    {
        java.lang.Object[] $stack15, $stack30;
        java.lang.String[] $stack17;
        AbstractArtifactComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack35;
        java.lang.String $stack36;
        org.eclipse.aether.repository.LocalRepositoryManager $stack38;
        org.eclipse.aether.DefaultRepositorySystemSession $u0;
        org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy $u1;
        org.eclipse.aether.util.graph.traverser.FatArtifactTraverser $u2;
        org.eclipse.aether.util.graph.manager.ClassicDependencyManager $u3;
        org.eclipse.aether.util.graph.selector.ScopeDependencySelector $u4;
        org.eclipse.aether.util.graph.selector.OptionalDependencySelector $u5;
        org.eclipse.aether.util.graph.selector.ExclusionDependencySelector $u6;
        org.eclipse.aether.util.graph.selector.AndDependencySelector $u7;
        org.eclipse.aether.util.graph.transformer.NearestVersionSelector $u8;
        org.eclipse.aether.util.graph.transformer.JavaScopeSelector $u9;
        org.eclipse.aether.util.graph.transformer.SimpleOptionalitySelector $u10;
        org.eclipse.aether.util.graph.transformer.JavaScopeDeriver $u11;
        org.eclipse.aether.util.graph.transformer.ConflictResolver $u12;
        org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner $u13;
        org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer $u14;
        org.eclipse.aether.repository.LocalRepository $u15;
        org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory $u16;
        org.eclipse.aether.resolution.ArtifactDescriptorPolicy $r0;
        org.eclipse.aether.collection.DependencyTraverser $r1;
        org.eclipse.aether.collection.DependencyManager $r2;
        org.eclipse.aether.collection.DependencySelector[] $r3;
        org.eclipse.aether.collection.DependencySelector $r4;
        org.eclipse.aether.util.graph.transformer.ConflictResolver$VersionSelector $r5;
        org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeSelector $r6;
        org.eclipse.aether.util.graph.transformer.ConflictResolver$OptionalitySelector $r7;
        org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeDeriver $r8;
        org.eclipse.aether.collection.DependencyGraphTransformer[] $r9;
        org.eclipse.aether.collection.DependencyGraphTransformer $r10;
        org.apache.maven.artifact.AbstractArtifactComponentTestCase $r11;
        org.eclipse.aether.RepositorySystemSession $r12, $r13;

        this := @this: AbstractArtifactComponentTestCase;

        $u0 = new org.eclipse.aether.DefaultRepositorySystemSession;

        specialinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: void <init>()>();

        $u1 = new org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy;

        specialinvoke $u1.<org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy: void <init>(boolean,boolean)>(1, 1);

        $r0 = (org.eclipse.aether.resolution.ArtifactDescriptorPolicy) $u1;

        virtualinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setArtifactDescriptorPolicy(org.eclipse.aether.resolution.ArtifactDescriptorPolicy)>($r0);

        $u2 = new org.eclipse.aether.util.graph.traverser.FatArtifactTraverser;

        specialinvoke $u2.<org.eclipse.aether.util.graph.traverser.FatArtifactTraverser: void <init>()>();

        $r1 = (org.eclipse.aether.collection.DependencyTraverser) $u2;

        virtualinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setDependencyTraverser(org.eclipse.aether.collection.DependencyTraverser)>($r1);

        $u3 = new org.eclipse.aether.util.graph.manager.ClassicDependencyManager;

        specialinvoke $u3.<org.eclipse.aether.util.graph.manager.ClassicDependencyManager: void <init>()>();

        $r2 = (org.eclipse.aether.collection.DependencyManager) $u3;

        virtualinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setDependencyManager(org.eclipse.aether.collection.DependencyManager)>($r2);

        $u7 = new org.eclipse.aether.util.graph.selector.AndDependencySelector;

        $stack15 = newarray (org.eclipse.aether.collection.DependencySelector)[3];

        $u4 = new org.eclipse.aether.util.graph.selector.ScopeDependencySelector;

        $stack17 = newarray (java.lang.String)[2];

        $stack17[0] = "test";

        $stack17[1] = "provided";

        specialinvoke $u4.<org.eclipse.aether.util.graph.selector.ScopeDependencySelector: void <init>(java.lang.String[])>($stack17);

        $stack15[0] = $u4;

        $u5 = new org.eclipse.aether.util.graph.selector.OptionalDependencySelector;

        specialinvoke $u5.<org.eclipse.aether.util.graph.selector.OptionalDependencySelector: void <init>()>();

        $stack15[1] = $u5;

        $u6 = new org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;

        specialinvoke $u6.<org.eclipse.aether.util.graph.selector.ExclusionDependencySelector: void <init>()>();

        $stack15[2] = $u6;

        $r3 = (org.eclipse.aether.collection.DependencySelector[]) $stack15;

        specialinvoke $u7.<org.eclipse.aether.util.graph.selector.AndDependencySelector: void <init>(org.eclipse.aether.collection.DependencySelector[])>($r3);

        $r4 = (org.eclipse.aether.collection.DependencySelector) $u7;

        virtualinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setDependencySelector(org.eclipse.aether.collection.DependencySelector)>($r4);

        $u12 = new org.eclipse.aether.util.graph.transformer.ConflictResolver;

        $u8 = new org.eclipse.aether.util.graph.transformer.NearestVersionSelector;

        specialinvoke $u8.<org.eclipse.aether.util.graph.transformer.NearestVersionSelector: void <init>()>();

        $u9 = new org.eclipse.aether.util.graph.transformer.JavaScopeSelector;

        specialinvoke $u9.<org.eclipse.aether.util.graph.transformer.JavaScopeSelector: void <init>()>();

        $u10 = new org.eclipse.aether.util.graph.transformer.SimpleOptionalitySelector;

        specialinvoke $u10.<org.eclipse.aether.util.graph.transformer.SimpleOptionalitySelector: void <init>()>();

        $u11 = new org.eclipse.aether.util.graph.transformer.JavaScopeDeriver;

        specialinvoke $u11.<org.eclipse.aether.util.graph.transformer.JavaScopeDeriver: void <init>()>();

        $r5 = (org.eclipse.aether.util.graph.transformer.ConflictResolver$VersionSelector) $u8;

        $r6 = (org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeSelector) $u9;

        $r7 = (org.eclipse.aether.util.graph.transformer.ConflictResolver$OptionalitySelector) $u10;

        $r8 = (org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeDeriver) $u11;

        specialinvoke $u12.<org.eclipse.aether.util.graph.transformer.ConflictResolver: void <init>(org.eclipse.aether.util.graph.transformer.ConflictResolver$VersionSelector,org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeSelector,org.eclipse.aether.util.graph.transformer.ConflictResolver$OptionalitySelector,org.eclipse.aether.util.graph.transformer.ConflictResolver$ScopeDeriver)>($r5, $r6, $r7, $r8);

        $u14 = new org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;

        $stack30 = newarray (org.eclipse.aether.collection.DependencyGraphTransformer)[2];

        $stack30[0] = $u12;

        $u13 = new org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;

        specialinvoke $u13.<org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner: void <init>()>();

        $stack30[1] = $u13;

        $r9 = (org.eclipse.aether.collection.DependencyGraphTransformer[]) $stack30;

        specialinvoke $u14.<org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer: void <init>(org.eclipse.aether.collection.DependencyGraphTransformer[])>($r9);

        $r10 = (org.eclipse.aether.collection.DependencyGraphTransformer) $u14;

        virtualinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setDependencyGraphTransformer(org.eclipse.aether.collection.DependencyGraphTransformer)>($r10);

        $u15 = new org.eclipse.aether.repository.LocalRepository;

        $r11 = (org.apache.maven.artifact.AbstractArtifactComponentTestCase) this;

        $stack35 = virtualinvoke $r11.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        $stack36 = interfaceinvoke $stack35.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u15.<org.eclipse.aether.repository.LocalRepository: void <init>(java.lang.String)>($stack36);

        $u16 = new org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory;

        specialinvoke $u16.<org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory: void <init>()>();

        $r12 = (org.eclipse.aether.RepositorySystemSession) $u0;

        $stack38 = virtualinvoke $u16.<org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory: org.eclipse.aether.repository.LocalRepositoryManager newInstance(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.LocalRepository)>($r12, $u15);

        virtualinvoke $u0.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)>($stack38);

        $r13 = (org.eclipse.aether.RepositorySystemSession) $u0;

        return $r13;
    }

    private static final java.lang.String printHexBinary(byte[])
    {
        java.lang.StringBuilder $stack6;
        byte[] data;
        int $stack7, $stack8, l3, $stack10, $stack11, $stack15, l4;
        java.lang.String $stack9;
        byte b;
        char[] $stack12, $stack16;
        char $stack13, $stack17;

        data := @parameter0: byte[];

        $stack6 = new java.lang.StringBuilder;

        $stack7 = lengthof data;

        $stack8 = $stack7 * 2;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>(int)>($stack8);

        l3 = lengthof data;

        l4 = 0;

     label1:
        if l4 >= l3 goto label2;

        b = data[l4];

        $stack12 = <org.apache.maven.artifact.AbstractArtifactComponentTestCase: char[] hexCode>;

        $stack10 = b >> 4;

        $stack11 = $stack10 & 15;

        $stack13 = $stack12[$stack11];

        virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack13);

        $stack16 = <org.apache.maven.artifact.AbstractArtifactComponentTestCase: char[] hexCode>;

        $stack15 = b & 15;

        $stack17 = $stack16[$stack15];

        virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack17);

        l4 = l4 + 1;

        goto label1;

     label2:
        $stack9 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    static void <clinit>()
    {
        java.lang.String $stack0;
        char[] $stack1;

        $stack0 = "0123456789ABCDEF";

        $stack1 = virtualinvoke $stack0.<java.lang.String: char[] toCharArray()>();

        <org.apache.maven.artifact.AbstractArtifactComponentTestCase: char[] hexCode> = $stack1;

        return;
    }
}
