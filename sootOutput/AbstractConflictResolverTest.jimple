public abstract class AbstractConflictResolverTest extends java.lang.Object
{
    private static final java.lang.String GROUP_ID;
    protected org.apache.maven.artifact.Artifact a1;
    protected org.apache.maven.artifact.Artifact a2;
    protected org.apache.maven.artifact.Artifact b1;
    private final java.lang.String roleHint;
    private org.apache.maven.artifact.factory.ArtifactFactory artifactFactory;
    private org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver conflictResolver;
    protected org.codehaus.plexus.PlexusContainer container;

    public void <init>(java.lang.String) throws java.lang.Exception
    {
        AbstractConflictResolverTest this;
        java.lang.String roleHint;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0;

        this := @this: AbstractConflictResolverTest;

        roleHint := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: java.lang.String roleHint> = roleHint;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        AbstractConflictResolverTest this;
        java.lang.String $stack1, $stack2;
        org.codehaus.plexus.PlexusContainer $stack3;
        java.lang.Object $stack4;
        org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver $stack5;
        org.apache.maven.artifact.Artifact $stack6, $stack7, $stack8;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: AbstractConflictResolverTest;

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack3 = $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.codehaus.plexus.PlexusContainer container>;

        $stack2 = <org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver: java.lang.String ROLE>;

        $r1 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack1 = $r1.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: java.lang.String roleHint>;

        $stack4 = interfaceinvoke $stack3.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.String,java.lang.String)>($stack2, $stack1);

        $stack5 = (org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver) $stack4;

        $r2 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $r2.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver conflictResolver> = $stack5;

        $r3 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack6 = virtualinvoke $r3.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String)>("a", "1.0");

        $r4 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $r4.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact a1> = $stack6;

        $r5 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack7 = virtualinvoke $r5.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String)>("a", "2.0");

        $r6 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $r6.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact a2> = $stack7;

        $r7 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack8 = virtualinvoke $r7.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String)>("b", "1.0");

        $r8 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $r8.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact b1> = $stack8;

        return;
    }

    protected org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver getConflictResolver()
    {
        AbstractConflictResolverTest this;
        org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver $stack1;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0;

        this := @this: AbstractConflictResolverTest;

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack1 = $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver conflictResolver>;

        return $stack1;
    }

    protected void assertResolveConflict(org.apache.maven.artifact.resolver.ResolutionNode, org.apache.maven.artifact.resolver.ResolutionNode, org.apache.maven.artifact.resolver.ResolutionNode)
    {
        AbstractConflictResolverTest this;
        org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver $stack5;
        org.apache.maven.artifact.resolver.ResolutionNode actualNode1, actualNode2, resolvedNode, expectedNode;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0;

        this := @this: AbstractConflictResolverTest;

        expectedNode := @parameter0: org.apache.maven.artifact.resolver.ResolutionNode;

        actualNode1 := @parameter1: org.apache.maven.artifact.resolver.ResolutionNode;

        actualNode2 := @parameter2: org.apache.maven.artifact.resolver.ResolutionNode;

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver getConflictResolver()>();

        resolvedNode = interfaceinvoke $stack5.<org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver: org.apache.maven.artifact.resolver.ResolutionNode resolveConflict(org.apache.maven.artifact.resolver.ResolutionNode,org.apache.maven.artifact.resolver.ResolutionNode)>(actualNode1, actualNode2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(resolvedNode, "Expected resolvable");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(expectedNode, resolvedNode, "Resolution node");

        return;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String) throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        AbstractConflictResolverTest this;
        java.lang.String id, version;
        org.apache.maven.artifact.Artifact $stack3;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0;

        this := @this: AbstractConflictResolverTest;

        id := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String)>(id, version, "compile");

        return $stack3;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String) throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        AbstractConflictResolverTest this;
        java.lang.String id, version, scope;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0;

        this := @this: AbstractConflictResolverTest;

        id := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        scope := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(id, version, scope, null, 0);

        return $stack4;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        java.lang.String version, id, scope, inheritedScope;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        AbstractConflictResolverTest this;
        boolean optional;
        org.apache.maven.artifact.factory.ArtifactFactory $stack8;
        org.apache.maven.artifact.Artifact $stack9;
        org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest $r0;

        this := @this: AbstractConflictResolverTest;

        id := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        scope := @parameter2: java.lang.String;

        inheritedScope := @parameter3: java.lang.String;

        optional := @parameter4: boolean;

        versionRange = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(version);

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest) this;

        $stack8 = $r0.<org.apache.maven.repository.legacy.resolver.conflict.AbstractConflictResolverTest: org.apache.maven.artifact.factory.ArtifactFactory artifactFactory>;

        $stack9 = interfaceinvoke $stack8.<org.apache.maven.artifact.factory.ArtifactFactory: org.apache.maven.artifact.Artifact createDependencyArtifact(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>("test", id, versionRange, "jar", null, scope, inheritedScope, optional);

        return $stack9;
    }

    protected org.apache.maven.artifact.resolver.ResolutionNode createResolutionNode(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.resolver.ResolutionNode $stack2;
        org.apache.maven.artifact.Artifact Artifact;
        java.util.List $stack3;
        AbstractConflictResolverTest this;

        this := @this: AbstractConflictResolverTest;

        Artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $stack2 = new org.apache.maven.artifact.resolver.ResolutionNode;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $stack2.<org.apache.maven.artifact.resolver.ResolutionNode: void <init>(org.apache.maven.artifact.Artifact,java.util.List)>(Artifact, $stack3);

        return $stack2;
    }

    protected org.apache.maven.artifact.resolver.ResolutionNode createResolutionNode(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.resolver.ResolutionNode)
    {
        org.apache.maven.artifact.resolver.ResolutionNode $stack3, parent;
        org.apache.maven.artifact.Artifact Artifact;
        java.util.List $stack4;
        AbstractConflictResolverTest this;

        this := @this: AbstractConflictResolverTest;

        Artifact := @parameter0: org.apache.maven.artifact.Artifact;

        parent := @parameter1: org.apache.maven.artifact.resolver.ResolutionNode;

        $stack3 = new org.apache.maven.artifact.resolver.ResolutionNode;

        $stack4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $stack3.<org.apache.maven.artifact.resolver.ResolutionNode: void <init>(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.resolver.ResolutionNode)>(Artifact, $stack4, parent);

        return $stack3;
    }

    public static void <clinit>()
    {
        <AbstractConflictResolverTest: java.lang.String GROUP_ID> = "test";

        return;
    }
}
