public abstract class AbstractCoreMavenComponentTestCase extends java.lang.Object
{
    protected org.codehaus.plexus.PlexusContainer container;
    protected org.apache.maven.repository.RepositorySystem repositorySystem;
    protected org.apache.maven.project.ProjectBuilder projectBuilder;

    public void <init>()
    {
        AbstractCoreMavenComponentTestCase this;

        this := @this: AbstractCoreMavenComponentTestCase;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract java.lang.String getProjectsDirectory();

    protected org.codehaus.plexus.PlexusContainer getContainer()
    {
        AbstractCoreMavenComponentTestCase this;
        org.codehaus.plexus.PlexusContainer $stack1;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack1 = $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.codehaus.plexus.PlexusContainer container>;

        return $stack1;
    }

    protected java.io.File getProject(java.lang.String) throws java.lang.Exception
    {
        java.lang.String $stack6, $stack7, name, $stack10;
        AbstractCoreMavenComponentTestCase this;
        java.io.File $u0, $u1, $u2, $u3, $u4;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        name := @parameter0: java.lang.String;

        $u1 = new java.io.File;

        $u0 = new java.io.File;

        $stack6 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack7 = virtualinvoke $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: java.lang.String getProjectsDirectory()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack6, $stack7);

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($u0, name);

        $u3 = new java.io.File;

        $u2 = new java.io.File;

        $stack10 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u2.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack10, "target");

        specialinvoke $u3.<java.io.File: void <init>(java.io.File,java.lang.String)>($u2, name);

        staticinvoke <org.codehaus.plexus.util.FileUtils: void copyDirectoryStructureIfModified(java.io.File,java.io.File)>($u1, $u3);

        $u4 = new java.io.File;

        specialinvoke $u4.<java.io.File: void <init>(java.io.File,java.lang.String)>($u3, "pom.xml");

        return $u4;
    }

    protected org.apache.maven.execution.MavenExecutionRequest createMavenExecutionRequest(java.io.File) throws java.lang.Exception
    {
        java.io.File pom, $stack19;
        org.apache.maven.execution.MavenExecutionRequest $stack4, $stack5, $stack6, $stack9, $stack11, $stack13, $stack15, request;
        java.lang.String[] $stack7, $stack16;
        java.util.List $stack8, $stack12, $stack14, $stack17;
        AbstractCoreMavenComponentTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack10;
        org.apache.maven.execution.DefaultMavenExecutionRequest $u0;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0, $r1, $r2;

        this := @this: AbstractCoreMavenComponentTestCase;

        pom := @parameter0: java.io.File;

        $u0 = new org.apache.maven.execution.DefaultMavenExecutionRequest;

        specialinvoke $u0.<org.apache.maven.execution.DefaultMavenExecutionRequest: void <init>()>();

        $stack4 = virtualinvoke $u0.<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setPom(java.io.File)>(pom);

        $stack5 = interfaceinvoke $stack4.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setProjectPresent(boolean)>(1);

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setShowErrors(boolean)>(1);

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "org.apache.maven.plugins";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        $stack9 = interfaceinvoke $stack6.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setPluginGroups(java.util.List)>($stack8);

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack10 = virtualinvoke $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack11 = interfaceinvoke $stack9.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack10);

        $r1 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack12 = virtualinvoke $r1.<org.apache.maven.AbstractCoreMavenComponentTestCase: java.util.List getRemoteRepositories()>();

        $stack13 = interfaceinvoke $stack11.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setRemoteRepositories(java.util.List)>($stack12);

        $r2 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack14 = virtualinvoke $r2.<org.apache.maven.AbstractCoreMavenComponentTestCase: java.util.List getPluginArtifactRepositories()>();

        $stack15 = interfaceinvoke $stack13.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setPluginArtifactRepositories(java.util.List)>($stack14);

        $stack16 = newarray (java.lang.String)[1];

        $stack16[0] = "package";

        $stack17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack16);

        request = interfaceinvoke $stack15.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGoals(java.util.List)>($stack17);

        if pom == null goto label1;

        $stack19 = virtualinvoke pom.<java.io.File: java.io.File getParentFile()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: void setMultiModuleProjectDirectory(java.io.File)>($stack19);

     label1:
        return request;
    }

    protected org.apache.maven.execution.MavenSession createMavenSession(java.io.File) throws java.lang.Exception
    {
        AbstractCoreMavenComponentTestCase this;
        java.io.File pom;
        org.apache.maven.execution.MavenSession $stack3;
        java.util.Properties $u0;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        pom := @parameter0: java.io.File;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.execution.MavenSession createMavenSession(java.io.File,java.util.Properties)>(pom, $u0);

        return $stack3;
    }

    protected org.apache.maven.execution.MavenSession createMavenSession(java.io.File, java.util.Properties) throws java.lang.Exception
    {
        AbstractCoreMavenComponentTestCase this;
        java.io.File pom;
        java.util.Properties executionProperties;
        org.apache.maven.execution.MavenSession $stack3;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        pom := @parameter0: java.io.File;

        executionProperties := @parameter1: java.util.Properties;

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.execution.MavenSession createMavenSession(java.io.File,java.util.Properties,boolean)>(pom, executionProperties, 0);

        return $stack3;
    }

    protected org.apache.maven.execution.MavenSession createMavenSession(java.io.File, java.util.Properties, boolean) throws java.lang.Exception
    {
        AbstractCoreMavenComponentTestCase this;
        java.io.File pom, $stack49, modulePom, $u2, $u3;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.artifact.repository.ArtifactRepository $stack13;
        org.apache.maven.project.ProjectBuildingRequest $stack14, $stack16, $stack18, configuration;
        java.util.List $stack15, $stack17, $stack22, $stack23, $stack29, $stack44;
        java.util.Properties executionProperties;
        org.codehaus.plexus.PlexusContainer $stack26;
        org.eclipse.aether.RepositorySystemSession $stack27;
        org.apache.maven.project.ProjectBuilder $stack30, $stack51;
        org.apache.maven.project.ProjectBuildingResult $stack31, $stack52;
        boolean includeModules, $stack46, $stack50;
        java.util.Iterator l8;
        java.lang.Object $stack47;
        java.lang.String module;
        org.apache.maven.project.MavenProject $stack53, project;
        org.apache.maven.project.DefaultProjectBuildingRequest $u0;
        java.util.ArrayList $u1;
        org.apache.maven.execution.DefaultMavenExecutionResult $u4;
        org.apache.maven.execution.MavenSession $u5;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0, $r1, $r2, $r3, $r4, $r5;
        org.apache.maven.execution.MavenExecutionResult $r6;

        this := @this: AbstractCoreMavenComponentTestCase;

        pom := @parameter0: java.io.File;

        executionProperties := @parameter1: java.util.Properties;

        includeModules := @parameter2: boolean;

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        request = virtualinvoke $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.execution.MavenExecutionRequest createMavenExecutionRequest(java.io.File)>(pom);

        $u0 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u0.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack13 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack14 = virtualinvoke $u0.<org.apache.maven.project.DefaultProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack13);

        $stack15 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getRemoteRepositories()>();

        $stack16 = interfaceinvoke $stack14.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRemoteRepositories(java.util.List)>($stack15);

        $stack17 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getPluginArtifactRepositories()>();

        $stack18 = interfaceinvoke $stack16.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setPluginArtifactRepositories(java.util.List)>($stack17);

        configuration = interfaceinvoke $stack18.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setSystemProperties(java.util.Properties)>(executionProperties);

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        if pom == null goto label4;

        $r1 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack30 = $r1.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $stack31 = interfaceinvoke $stack30.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pom, configuration);

        project = interfaceinvoke $stack31.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>(project);

        if includeModules == 0 goto label3;

        $stack44 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getModules()>();

        l8 = interfaceinvoke $stack44.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack46 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack46 == 0 goto label3;

        $stack47 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        module = (java.lang.String) $stack47;

        $u2 = new java.io.File;

        $stack49 = virtualinvoke pom.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $u2.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack49, module);

        modulePom = $u2;

        $stack50 = virtualinvoke $u2.<java.io.File: boolean isDirectory()>();

        if $stack50 == 0 goto label2;

        $u3 = new java.io.File;

        specialinvoke $u3.<java.io.File: void <init>(java.io.File,java.lang.String)>($u2, "pom.xml");

        modulePom = $u3;

     label2:
        $r2 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack51 = $r2.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $stack52 = interfaceinvoke $stack51.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(modulePom, configuration);

        $stack53 = interfaceinvoke $stack52.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>($stack53);

        goto label1;

     label3:
        goto label5;

     label4:
        $r3 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        project = virtualinvoke $r3.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.project.MavenProject createStubMavenProject()>();

        $stack22 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getRemoteRepositories()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setRemoteArtifactRepositories(java.util.List)>($stack22);

        $stack23 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getPluginArtifactRepositories()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setPluginArtifactRepositories(java.util.List)>($stack23);

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>(project);

     label5:
        $r4 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        virtualinvoke $r4.<org.apache.maven.AbstractCoreMavenComponentTestCase: void initRepoSession(org.apache.maven.project.ProjectBuildingRequest)>(configuration);

        $u5 = new org.apache.maven.execution.MavenSession;

        $r5 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack26 = virtualinvoke $r5.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack27 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $u4 = new org.apache.maven.execution.DefaultMavenExecutionResult;

        specialinvoke $u4.<org.apache.maven.execution.DefaultMavenExecutionResult: void <init>()>();

        $r6 = (org.apache.maven.execution.MavenExecutionResult) $u4;

        specialinvoke $u5.<org.apache.maven.execution.MavenSession: void <init>(org.codehaus.plexus.PlexusContainer,org.eclipse.aether.RepositorySystemSession,org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.execution.MavenExecutionResult)>($stack26, $stack27, request, $r6);

        virtualinvoke $u5.<org.apache.maven.execution.MavenSession: void setProjects(java.util.List)>($u1);

        $stack29 = virtualinvoke $u5.<org.apache.maven.execution.MavenSession: java.util.List getProjects()>();

        virtualinvoke $u5.<org.apache.maven.execution.MavenSession: void setAllProjects(java.util.List)>($stack29);

        return $u5;
    }

    protected void initRepoSession(org.apache.maven.project.ProjectBuildingRequest) throws java.lang.Exception
    {
        org.apache.maven.project.ProjectBuildingRequest request;
        org.apache.maven.artifact.repository.ArtifactRepository $stack6;
        java.lang.String $stack7;
        org.eclipse.aether.DefaultRepositorySystemSession session;
        org.eclipse.aether.repository.LocalRepositoryManager $stack11;
        AbstractCoreMavenComponentTestCase this;
        java.io.File $u0;
        org.eclipse.aether.repository.LocalRepository $u1;
        org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory $u2;
        org.eclipse.aether.RepositorySystemSession $r0, $r1;

        this := @this: AbstractCoreMavenComponentTestCase;

        request := @parameter0: org.apache.maven.project.ProjectBuildingRequest;

        $u0 = new java.io.File;

        $stack6 = interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack7 = interfaceinvoke $stack6.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack7);

        $u1 = new org.eclipse.aether.repository.LocalRepository;

        specialinvoke $u1.<org.eclipse.aether.repository.LocalRepository: void <init>(java.io.File)>($u0);

        session = staticinvoke <org.apache.maven.repository.internal.MavenRepositorySystemUtils: org.eclipse.aether.DefaultRepositorySystemSession newSession()>();

        $u2 = new org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory;

        specialinvoke $u2.<org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory: void <init>()>();

        $r0 = (org.eclipse.aether.RepositorySystemSession) session;

        $stack11 = virtualinvoke $u2.<org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory: org.eclipse.aether.repository.LocalRepositoryManager newInstance(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.LocalRepository)>($r0, $u1);

        virtualinvoke session.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)>($stack11);

        $r1 = (org.eclipse.aether.RepositorySystemSession) session;

        interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($r1);

        return;
    }

    protected org.apache.maven.project.MavenProject createStubMavenProject()
    {
        org.apache.maven.model.Model $stack2;
        org.apache.maven.project.MavenProject $stack3;
        AbstractCoreMavenComponentTestCase this;

        this := @this: AbstractCoreMavenComponentTestCase;

        $stack2 = new org.apache.maven.model.Model;

        specialinvoke $stack2.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>("org.apache.maven.test");

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("maven-test");

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setVersion(java.lang.String)>("1.0");

        $stack3 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack3.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack2);

        return $stack3;
    }

    protected java.util.List getRemoteRepositories() throws org.apache.maven.artifact.InvalidRepositoryException
    {
        java.lang.String $stack5, $stack12, $stack14;
        java.io.File repoDir, $u0;
        java.lang.StringBuilder $stack10, $stack13, $u3;
        java.net.URI $stack11;
        org.apache.maven.artifact.repository.ArtifactRepository[] $stack15;
        AbstractCoreMavenComponentTestCase this;
        org.apache.maven.repository.RepositorySystem $stack16;
        org.apache.maven.artifact.repository.ArtifactRepository $stack18;
        java.util.List $stack19;
        org.apache.maven.model.RepositoryPolicy $u1;
        org.apache.maven.model.Repository $u2;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        $u0 = new java.io.File;

        $stack5 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack5, "src/test/remote-repo");

        repoDir = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        $u1 = new org.apache.maven.model.RepositoryPolicy;

        specialinvoke $u1.<org.apache.maven.model.RepositoryPolicy: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.RepositoryPolicy: void setEnabled(boolean)>(1);

        virtualinvoke $u1.<org.apache.maven.model.RepositoryPolicy: void setChecksumPolicy(java.lang.String)>("ignore");

        virtualinvoke $u1.<org.apache.maven.model.RepositoryPolicy: void setUpdatePolicy(java.lang.String)>("always");

        $u2 = new org.apache.maven.model.Repository;

        specialinvoke $u2.<org.apache.maven.model.Repository: void <init>()>();

        virtualinvoke $u2.<org.apache.maven.model.Repository: void setId(java.lang.String)>("central");

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack11 = virtualinvoke repoDir.<java.io.File: java.net.URI toURI()>();

        $stack12 = virtualinvoke $stack11.<java.net.URI: java.lang.String getPath()>();

        $stack13 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $u2.<org.apache.maven.model.Repository: void setUrl(java.lang.String)>($stack14);

        virtualinvoke $u2.<org.apache.maven.model.Repository: void setReleases(org.apache.maven.model.RepositoryPolicy)>($u1);

        virtualinvoke $u2.<org.apache.maven.model.Repository: void setSnapshots(org.apache.maven.model.RepositoryPolicy)>($u1);

        $stack15 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[1];

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack16 = $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.repository.RepositorySystem repositorySystem>;

        $stack18 = interfaceinvoke $stack16.<org.apache.maven.repository.RepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository)>($u2);

        $stack15[0] = $stack18;

        $stack19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack15);

        return $stack19;
    }

    protected java.util.List getPluginArtifactRepositories() throws org.apache.maven.artifact.InvalidRepositoryException
    {
        AbstractCoreMavenComponentTestCase this;
        java.util.List $stack1;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: java.util.List getRemoteRepositories()>();

        return $stack1;
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository() throws org.apache.maven.artifact.InvalidRepositoryException
    {
        java.lang.String $stack3;
        java.io.File repoDir, $u0;
        AbstractCoreMavenComponentTestCase this;
        org.apache.maven.repository.RepositorySystem $stack5;
        org.apache.maven.artifact.repository.ArtifactRepository $stack6;
        org.apache.maven.AbstractCoreMavenComponentTestCase $r0;

        this := @this: AbstractCoreMavenComponentTestCase;

        $u0 = new java.io.File;

        $stack3 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack3, "target/local-repo");

        repoDir = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r0 = (org.apache.maven.AbstractCoreMavenComponentTestCase) this;

        $stack5 = $r0.<org.apache.maven.AbstractCoreMavenComponentTestCase: org.apache.maven.repository.RepositorySystem repositorySystem>;

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.repository.RepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(java.io.File)>(repoDir);

        return $stack6;
    }
}
