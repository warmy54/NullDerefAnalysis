public abstract class AbstractMavenProjectTestCase extends java.lang.Object
{
    protected org.apache.maven.project.ProjectBuilder projectBuilder;
    protected org.apache.maven.repository.RepositorySystem repositorySystem;
    protected org.codehaus.plexus.PlexusContainer container;

    public void <init>()
    {
        AbstractMavenProjectTestCase this;

        this := @this: AbstractMavenProjectTestCase;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.plexus.PlexusContainer getContainer()
    {
        AbstractMavenProjectTestCase this;
        org.codehaus.plexus.PlexusContainer $stack1;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0;

        this := @this: AbstractMavenProjectTestCase;

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack1 = $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.codehaus.plexus.PlexusContainer container>;

        return $stack1;
    }

    public void setUp() throws java.lang.Exception
    {
        AbstractMavenProjectTestCase this;
        org.codehaus.plexus.PlexusContainer $stack1, $stack3, $stack6;
        boolean $stack2;
        java.lang.Object $stack4, $stack7;
        org.apache.maven.project.ProjectBuilder $stack5, $stack8;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0, $r1, $r2, $r3, $r4;

        this := @this: AbstractMavenProjectTestCase;

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack2 = interfaceinvoke $stack1.<org.codehaus.plexus.PlexusContainer: boolean hasComponent(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuilder;", "test");

        if $stack2 == 0 goto label1;

        $r1 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack6 = virtualinvoke $r1.<org.apache.maven.project.AbstractMavenProjectTestCase: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack7 = interfaceinvoke $stack6.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuilder;", "test");

        $stack8 = (org.apache.maven.project.ProjectBuilder) $stack7;

        $r2 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $r2.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuilder projectBuilder> = $stack8;

        goto label2;

     label1:
        $r3 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack3 = virtualinvoke $r3.<org.apache.maven.project.AbstractMavenProjectTestCase: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack4 = interfaceinvoke $stack3.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack5 = (org.apache.maven.project.ProjectBuilder) $stack4;

        $r4 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $r4.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuilder projectBuilder> = $stack5;

     label2:
        return;
    }

    protected org.apache.maven.project.ProjectBuilder getProjectBuilder()
    {
        AbstractMavenProjectTestCase this;
        org.apache.maven.project.ProjectBuilder $stack1;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0;

        this := @this: AbstractMavenProjectTestCase;

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack1 = $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuilder projectBuilder>;

        return $stack1;
    }

    protected java.io.File getLocalRepositoryPath() throws java.io.FileNotFoundException, java.net.URISyntaxException
    {
        java.io.File markerFile, $stack3, $stack4;
        AbstractMavenProjectTestCase this;

        this := @this: AbstractMavenProjectTestCase;

        markerFile = staticinvoke <org.apache.maven.project.AbstractMavenProjectTestCase: java.io.File getFileForClasspathResource(java.lang.String)>("local-repo/marker.txt");

        $stack3 = virtualinvoke markerFile.<java.io.File: java.io.File getAbsoluteFile()>();

        $stack4 = virtualinvoke $stack3.<java.io.File: java.io.File getParentFile()>();

        return $stack4;
    }

    protected static java.io.File getFileForClasspathResource(java.lang.String) throws java.io.FileNotFoundException
    {
        java.lang.Thread $stack3;
        java.lang.ClassLoader cloader;
        java.lang.String resource, $stack7, $stack8, $stack14;
        java.net.URL resourceUrl;
        java.io.File $stack6;
        java.net.URI $stack9;
        java.io.FileNotFoundException $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack13;

        resource := @parameter0: java.lang.String;

        $stack3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        cloader = virtualinvoke $stack3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        resourceUrl = virtualinvoke cloader.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(resource);

        if resourceUrl != null goto label1;

        $stack10 = new java.io.FileNotFoundException;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find: ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resource);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack10.<java.io.FileNotFoundException: void <init>(java.lang.String)>($stack14);

        throw $stack10;

     label1:
        $stack6 = new java.io.File;

        $stack7 = virtualinvoke resourceUrl.<java.net.URL: java.lang.String toString()>();

        $stack8 = virtualinvoke $stack7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "%20");

        $stack9 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($stack8);

        specialinvoke $stack6.<java.io.File: void <init>(java.net.URI)>($stack9);

        return $stack6;
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository() throws java.lang.Exception
    {
        AbstractMavenProjectTestCase this;
        org.apache.maven.repository.RepositorySystem $stack1;
        java.io.File $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository $stack3;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0, $r1;

        this := @this: AbstractMavenProjectTestCase;

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack1 = $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.repository.RepositorySystem repositorySystem>;

        $r1 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack2 = virtualinvoke $r1.<org.apache.maven.project.AbstractMavenProjectTestCase: java.io.File getLocalRepositoryPath()>();

        $stack3 = interfaceinvoke $stack1.<org.apache.maven.repository.RepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(java.io.File)>($stack2);

        return $stack3;
    }

    protected org.apache.maven.project.MavenProject getProjectWithDependencies(java.io.File) throws java.lang.Exception
    {
        AbstractMavenProjectTestCase this;
        org.apache.maven.project.ProjectBuildingRequest configuration;
        org.apache.maven.artifact.repository.ArtifactRepository[] $stack9;
        java.util.List $stack10, $stack26;
        java.io.File pom;
        org.apache.maven.project.ProjectBuilder $stack14;
        org.apache.maven.project.ProjectBuildingResult $stack15;
        org.apache.maven.project.MavenProject $stack16;
        java.lang.Exception $stack17;
        java.lang.Throwable cause;
        boolean $stack19, $stack28;
        java.lang.StringBuilder $stack21, $stack22, $stack23, $stack33, $stack34, $stack35, $u0, $u1;
        org.apache.maven.model.building.ModelBuildingException $stack25;
        java.util.Iterator l6;
        java.io.PrintStream $stack29;
        java.lang.Object $stack31;
        org.apache.maven.model.building.ModelProblem problem;
        java.lang.String message;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0, $r1;

        this := @this: AbstractMavenProjectTestCase;

        pom := @parameter0: java.io.File;

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        configuration = virtualinvoke $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuildingRequest newBuildingRequest()>();

        $stack9 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[0];

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRemoteRepositories(java.util.List)>($stack10);

        interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setProcessPlugins(boolean)>(0);

        interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setResolveDependencies(boolean)>(1);

     label1:
        $r1 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack14 = $r1.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $stack15 = interfaceinvoke $stack14.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pom, configuration);

        $stack16 = interfaceinvoke $stack15.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

     label2:
        return $stack16;

     label3:
        $stack17 := @caughtexception;

        cause = virtualinvoke $stack17.<java.lang.Exception: java.lang.Throwable getCause()>();

        $stack19 = cause instanceof org.apache.maven.model.building.ModelBuildingException;

        if $stack19 == 0 goto label6;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack21 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In: ");

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pom);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        message = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack25 = (org.apache.maven.model.building.ModelBuildingException) cause;

        $stack26 = virtualinvoke $stack25.<org.apache.maven.model.building.ModelBuildingException: java.util.List getProblems()>();

        l6 = interfaceinvoke $stack26.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack28 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label5;

        $stack31 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        problem = (org.apache.maven.model.building.ModelProblem) $stack31;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack33 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(problem);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        message = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label5:
        $stack29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack29.<java.io.PrintStream: void println(java.lang.String)>(message);

     label6:
        throw $stack17;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected org.apache.maven.project.MavenProject getProject(java.io.File) throws java.lang.Exception
    {
        AbstractMavenProjectTestCase this;
        org.apache.maven.project.ProjectBuildingRequest configuration;
        java.io.File pom;
        org.apache.maven.project.ProjectBuilder $stack4;
        org.apache.maven.project.ProjectBuildingResult $stack5;
        org.apache.maven.project.MavenProject $stack6;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0, $r1;

        this := @this: AbstractMavenProjectTestCase;

        pom := @parameter0: java.io.File;

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        configuration = virtualinvoke $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuildingRequest newBuildingRequest()>();

        $r1 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack4 = $r1.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $stack5 = interfaceinvoke $stack4.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pom, configuration);

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        return $stack6;
    }

    protected org.apache.maven.project.MavenProject getProjectFromRemoteRepository(java.io.File) throws java.lang.Exception
    {
        AbstractMavenProjectTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack4, $stack9;
        org.apache.maven.artifact.repository.ArtifactRepository[] $stack6;
        org.apache.maven.repository.RepositorySystem $stack7;
        java.util.List $stack10;
        java.io.File pom;
        org.apache.maven.project.ProjectBuilder $stack12;
        org.apache.maven.project.ProjectBuildingResult $stack13;
        org.apache.maven.project.MavenProject $stack14;
        org.apache.maven.project.DefaultProjectBuildingRequest $u0;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0, $r2, $r4, $r6;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r3, $r5, $r7;

        this := @this: AbstractMavenProjectTestCase;

        pom := @parameter0: java.io.File;

        $u0 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u0.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack4);

        $stack6 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[1];

        $r2 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack7 = $r2.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.repository.RepositorySystem repositorySystem>;

        $stack9 = interfaceinvoke $stack7.<org.apache.maven.repository.RepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createDefaultRemoteRepository()>();

        $stack6[0] = $stack9;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        interfaceinvoke $r3.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRemoteRepositories(java.util.List)>($stack10);

        $r4 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $r5 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        virtualinvoke $r4.<org.apache.maven.project.AbstractMavenProjectTestCase: void initRepoSession(org.apache.maven.project.ProjectBuildingRequest)>($r5);

        $r6 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack12 = $r6.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $r7 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        $stack13 = interfaceinvoke $stack12.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pom, $r7);

        $stack14 = interfaceinvoke $stack13.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        return $stack14;
    }

    protected org.apache.maven.project.ProjectBuildingRequest newBuildingRequest() throws java.lang.Exception
    {
        AbstractMavenProjectTestCase this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack3;
        org.apache.maven.project.DefaultProjectBuildingRequest $u0;
        org.apache.maven.project.AbstractMavenProjectTestCase $r0, $r2;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r3, $r4;

        this := @this: AbstractMavenProjectTestCase;

        $u0 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u0.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $r0 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.project.AbstractMavenProjectTestCase: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack3);

        $r2 = (org.apache.maven.project.AbstractMavenProjectTestCase) this;

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        virtualinvoke $r2.<org.apache.maven.project.AbstractMavenProjectTestCase: void initRepoSession(org.apache.maven.project.ProjectBuildingRequest)>($r3);

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u0;

        return $r4;
    }

    protected void initRepoSession(org.apache.maven.project.ProjectBuildingRequest)
    {
        org.apache.maven.project.ProjectBuildingRequest request;
        org.apache.maven.artifact.repository.ArtifactRepository $stack5;
        java.lang.String $stack6;
        org.eclipse.aether.DefaultRepositorySystemSession repoSession;
        AbstractMavenProjectTestCase this;
        java.io.File $u0;
        org.eclipse.aether.DefaultRepositoryCache $u1;
        org.apache.maven.project.LegacyLocalRepositoryManager $u2;
        org.eclipse.aether.RepositoryCache $r0;
        org.eclipse.aether.repository.LocalRepositoryManager $r1;
        org.eclipse.aether.RepositorySystemSession $r2;

        this := @this: AbstractMavenProjectTestCase;

        request := @parameter0: org.apache.maven.project.ProjectBuildingRequest;

        $u0 = new java.io.File;

        $stack5 = interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack6);

        repoSession = staticinvoke <org.apache.maven.repository.internal.MavenRepositorySystemUtils: org.eclipse.aether.DefaultRepositorySystemSession newSession()>();

        $u1 = new org.eclipse.aether.DefaultRepositoryCache;

        specialinvoke $u1.<org.eclipse.aether.DefaultRepositoryCache: void <init>()>();

        $r0 = (org.eclipse.aether.RepositoryCache) $u1;

        virtualinvoke repoSession.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setCache(org.eclipse.aether.RepositoryCache)>($r0);

        $u2 = new org.apache.maven.project.LegacyLocalRepositoryManager;

        specialinvoke $u2.<org.apache.maven.project.LegacyLocalRepositoryManager: void <init>(java.io.File)>($u0);

        $r1 = (org.eclipse.aether.repository.LocalRepositoryManager) $u2;

        virtualinvoke repoSession.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)>($r1);

        $r2 = (org.eclipse.aether.RepositorySystemSession) repoSession;

        interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($r2);

        return;
    }
}
