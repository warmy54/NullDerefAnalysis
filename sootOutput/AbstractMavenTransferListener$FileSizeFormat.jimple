class AbstractMavenTransferListener$FileSizeFormat extends java.lang.Object
{
    private java.text.DecimalFormat smallFormat;
    private java.text.DecimalFormat largeFormat;

    void <init>(java.util.Locale)
    {
        AbstractMavenTransferListener$FileSizeFormat this;
        java.util.Locale locale;
        java.text.DecimalFormatSymbols $u0, $u2;
        java.text.DecimalFormat $u1, $u3;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat $r0, $r1;

        this := @this: AbstractMavenTransferListener$FileSizeFormat;

        locale := @parameter0: java.util.Locale;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u1 = new java.text.DecimalFormat;

        $u0 = new java.text.DecimalFormatSymbols;

        specialinvoke $u0.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(locale);

        specialinvoke $u1.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("#0.0", $u0);

        $r0 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $r0.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.text.DecimalFormat smallFormat> = $u1;

        $u3 = new java.text.DecimalFormat;

        $u2 = new java.text.DecimalFormatSymbols;

        specialinvoke $u2.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(locale);

        specialinvoke $u3.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("###0", $u2);

        $r1 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $r1.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.text.DecimalFormat largeFormat> = $u3;

        return;
    }

    public java.lang.String format(long)
    {
        AbstractMavenTransferListener$FileSizeFormat this;
        long size;
        java.lang.String $stack3;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat $r0;

        this := @this: AbstractMavenTransferListener$FileSizeFormat;

        size := @parameter0: long;

        $r0 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String format(long,org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit)>(size, null);

        return $stack3;
    }

    public java.lang.String format(long, org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit)
    {
        AbstractMavenTransferListener$FileSizeFormat this;
        long size;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit unit;
        java.lang.String $stack4;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat $r0;

        this := @this: AbstractMavenTransferListener$FileSizeFormat;

        size := @parameter0: long;

        unit := @parameter1: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit;

        $r0 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String format(long,org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit,boolean)>(size, unit, 0);

        return $stack4;
    }

    public java.lang.String format(long, org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit, boolean)
    {
        long size, $stack10;
        byte $stack8, $stack18, $stack25;
        double $stack9, $stack11, scaledSize;
        java.lang.StringBuilder $stack13, $stack15, $stack22, $stack23, $stack29, $stack30, $stack38, $stack39, $u0, $u1, $u2, $u3;
        java.lang.String $stack14, $stack21, $stack24, $stack28, $stack31, $stack37, $stack40, scaledSymbol;
        boolean omitSymbol, $stack49;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit $stack17, unit;
        AbstractMavenTransferListener$FileSizeFormat this;
        java.text.DecimalFormat $stack20, $stack27, $stack36;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat $r0, $r1, $r2;

        this := @this: AbstractMavenTransferListener$FileSizeFormat;

        size := @parameter0: long;

        unit := @parameter1: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit;

        omitSymbol := @parameter2: boolean;

        $stack8 = size cmp 0L;

        if $stack8 < 0 goto label1;

        $stack49 = 1;

        goto label2;

     label1:
        $stack49 = 0;

     label2:
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,long)>($stack49, "file size cannot be negative: %s", size);

        if unit != null goto label3;

        unit = staticinvoke <org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit getScaleUnit(long)>(size);

     label3:
        $stack9 = (double) size;

        $stack10 = virtualinvoke unit.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: long bytes()>();

        $stack11 = (double) $stack10;

        scaledSize = $stack9 / $stack11;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack14 = virtualinvoke unit.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: java.lang.String symbol()>();

        $stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        scaledSymbol = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        if omitSymbol == 0 goto label4;

        scaledSymbol = "";

     label4:
        $stack17 = <org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit BYTE>;

        if unit != $stack17 goto label5;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $r0 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $stack36 = $r0.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.text.DecimalFormat largeFormat>;

        $stack37 = virtualinvoke $stack36.<java.text.DecimalFormat: java.lang.String format(long)>(size);

        $stack38 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack37);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scaledSymbol);

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack40;

     label5:
        $stack18 = scaledSize cmpg 0.05;

        if $stack18 < 0 goto label6;

        $stack25 = scaledSize cmpl 10.0;

        if $stack25 < 0 goto label7;

     label6:
        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $r1 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $stack20 = $r1.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.text.DecimalFormat largeFormat>;

        $stack21 = virtualinvoke $stack20.<java.text.DecimalFormat: java.lang.String format(double)>(scaledSize);

        $stack22 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scaledSymbol);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack24;

     label7:
        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $r2 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $stack27 = $r2.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.text.DecimalFormat smallFormat>;

        $stack28 = virtualinvoke $stack27.<java.text.DecimalFormat: java.lang.String format(double)>(scaledSize);

        $stack29 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack28);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scaledSymbol);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack31;
    }

    public java.lang.String formatProgress(long, long)
    {
        long progressedSize, size;
        byte $stack8, $stack9, $stack17, $stack19, $stack30;
        java.lang.Object[] $stack10;
        java.lang.Long $stack14, $stack16;
        AbstractMavenTransferListener$FileSizeFormat this;
        java.lang.String $stack18, formattedProgressedSize, formattedSize, $stack29;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit unit;
        java.lang.StringBuilder $stack26, $stack27, $stack28, $u0;
        boolean $stack37, $stack11;
        org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat $r0, $r1, $r2;

        this := @this: AbstractMavenTransferListener$FileSizeFormat;

        progressedSize := @parameter0: long;

        size := @parameter1: long;

        $stack8 = progressedSize cmp 0L;

        if $stack8 < 0 goto label1;

        $stack37 = 1;

        goto label2;

     label1:
        $stack37 = 0;

     label2:
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,long)>($stack37, "progressed file size cannot be negative: %s", progressedSize);

        $stack9 = size cmp 0L;

        if $stack9 < 0 goto label3;

        $stack30 = progressedSize cmp size;

        if $stack30 > 0 goto label4;

     label3:
        $stack11 = 1;

        goto label5;

     label4:
        $stack11 = 0;

     label5:
        $stack10 = newarray (java.lang.Object)[2];

        $stack14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(progressedSize);

        $stack10[0] = $stack14;

        $stack16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(size);

        $stack10[1] = $stack16;

        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>($stack11, "progressed file size cannot be greater than size: %s > %s", $stack10);

        $stack17 = size cmp 0L;

        if $stack17 < 0 goto label6;

        $stack19 = progressedSize cmp size;

        if $stack19 == 0 goto label6;

        unit = staticinvoke <org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit getScaleUnit(long)>(size);

        $r0 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        formattedProgressedSize = virtualinvoke $r0.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String format(long,org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit,boolean)>(progressedSize, unit, 1);

        $r1 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        formattedSize = virtualinvoke $r1.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String format(long,org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit)>(size, unit);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack26 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(formattedProgressedSize);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(formattedSize);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack29;

     label6:
        $r2 = (org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat) this;

        $stack18 = virtualinvoke $r2.<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String format(long)>(progressedSize);

        return $stack18;
    }
}
