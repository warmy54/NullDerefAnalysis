class AbstractModelSourceTransformer$IOExceptionHandler extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler, java.lang.AutoCloseable
{
    private volatile java.lang.Throwable cause;

    private void <init>()
    {
        AbstractModelSourceTransformer$IOExceptionHandler this;

        this := @this: AbstractModelSourceTransformer$IOExceptionHandler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        java.lang.Throwable e, $stack4, $stack6;
        AbstractModelSourceTransformer$IOExceptionHandler this;
        java.lang.Thread t;
        java.lang.AssertionError $u0;
        org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler $r0;

        this := @this: AbstractModelSourceTransformer$IOExceptionHandler;

        t := @parameter0: java.lang.Thread;

        e := @parameter1: java.lang.Throwable;

     label1:
        throw e;

     label2:
        $stack6 := @caughtexception;

        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler) this;

        $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler: java.lang.Throwable cause> = e;

        goto label4;

     label3:
        $stack4 := @caughtexception;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception", e);

        throw $u0;

     label4:
        return;

        catch javax.xml.transform.TransformerException from label1 to label2 with label2;
        catch java.io.IOException from label1 to label2 with label2;
        catch java.lang.RuntimeException from label1 to label2 with label2;
        catch java.lang.Error from label1 to label2 with label2;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        AbstractModelSourceTransformer$IOExceptionHandler this;
        java.lang.Throwable $stack2, $stack3, $stack4, $stack6;
        java.lang.RuntimeException $u0;
        org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler $r0, $r1;

        this := @this: AbstractModelSourceTransformer$IOExceptionHandler;

        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler) this;

        $stack2 = $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler: java.lang.Throwable cause>;

        if $stack2 == null goto label4;

     label1:
        $r1 = (org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler) this;

        $stack3 = $r1.<org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler: java.lang.Throwable cause>;

        throw $stack3;

     label2:
        $stack6 := @caughtexception;

        throw $stack6;

     label3:
        $stack4 := @caughtexception;

        $u0 = new java.lang.RuntimeException;

        specialinvoke $u0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to transform pom", $stack4);

        throw $u0;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label2;
        catch java.lang.RuntimeException from label1 to label2 with label2;
        catch java.lang.Error from label1 to label2 with label2;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void <init>(org.apache.maven.model.building.AbstractModelSourceTransformer$1)
    {
        AbstractModelSourceTransformer$IOExceptionHandler this;
        org.apache.maven.model.building.AbstractModelSourceTransformer$1 x0;
        org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler $r0;

        this := @this: AbstractModelSourceTransformer$IOExceptionHandler;

        x0 := @parameter0: org.apache.maven.model.building.AbstractModelSourceTransformer$1;

        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler) this;

        specialinvoke $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler: void <init>()>();

        return;
    }
}
