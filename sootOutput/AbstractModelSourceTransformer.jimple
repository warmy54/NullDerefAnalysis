public abstract class AbstractModelSourceTransformer extends java.lang.Object implements org.apache.maven.model.building.ModelSourceTransformer
{
    private static final java.util.concurrent.atomic.AtomicInteger TRANSFORM_THREAD_COUNTER;
    private final javax.xml.transform.TransformerFactory transformerFactory;

    public void <init>()
    {
        AbstractModelSourceTransformer this;
        javax.xml.transform.TransformerFactory $stack1;
        org.apache.maven.model.building.AbstractModelSourceTransformer $r0;

        this := @this: AbstractModelSourceTransformer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <org.apache.maven.model.transform.sax.Factories: javax.xml.transform.TransformerFactory newTransformerFactory()>();

        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer: javax.xml.transform.TransformerFactory transformerFactory> = $stack1;

        return;
    }

    protected abstract org.apache.maven.model.transform.sax.AbstractSAXFilter getSAXFilter(java.nio.file.Path, org.apache.maven.model.building.TransformerContext, java.util.function.Consumer) throws javax.xml.transform.TransformerConfigurationException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException;

    protected java.io.OutputStream filterOutputStream(java.io.OutputStream, java.nio.file.Path)
    {
        java.io.OutputStream outputStream;
        AbstractModelSourceTransformer this;
        java.nio.file.Path pomFile;

        this := @this: AbstractModelSourceTransformer;

        outputStream := @parameter0: java.io.OutputStream;

        pomFile := @parameter1: java.nio.file.Path;

        return outputStream;
    }

    public javax.xml.transform.sax.SAXTransformerFactory getTransformerFactory()
    {
        AbstractModelSourceTransformer this;
        javax.xml.transform.TransformerFactory $stack1;
        javax.xml.transform.sax.SAXTransformerFactory $stack2;
        org.apache.maven.model.building.AbstractModelSourceTransformer $r0;

        this := @this: AbstractModelSourceTransformer;

        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        $stack1 = $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer: javax.xml.transform.TransformerFactory transformerFactory>;

        $stack2 = (javax.xml.transform.sax.SAXTransformerFactory) $stack1;

        return $stack2;
    }

    protected javax.xml.transform.sax.TransformerHandler getTransformerHandler(java.nio.file.Path) throws java.io.IOException, org.apache.maven.model.building.TransformerException
    {
        AbstractModelSourceTransformer this;
        java.nio.file.Path pomFile;

        this := @this: AbstractModelSourceTransformer;

        pomFile := @parameter0: java.nio.file.Path;

        return null;
    }

    public final java.io.InputStream transform(java.nio.file.Path, org.apache.maven.model.building.TransformerContext) throws java.io.IOException, org.apache.maven.model.building.TransformerException
    {
        AbstractModelSourceTransformer this;
        java.nio.file.Path pomFile;
        javax.xml.transform.sax.TransformerHandler transformerHandler;
        java.io.OutputStream out;
        org.apache.maven.model.building.TransformerContext context;
        org.apache.maven.model.transform.sax.AbstractSAXFilter filter;
        java.nio.file.OpenOption[] $stack23;
        java.io.InputStream $stack24, $r10;
        java.lang.Runnable $stack28;
        java.lang.StringBuilder $stack30, $stack33, $u10;
        java.util.concurrent.atomic.AtomicInteger $stack31;
        int $stack32;
        java.lang.String $stack34;
        java.lang.Exception $stack45;
        javax.xml.transform.Result result;
        java.util.function.Consumer lexConsumer;
        java.io.PipedOutputStream $u0;
        javax.xml.transform.stream.StreamResult $u1, $u3;
        javax.xml.transform.sax.SAXResult $u2;
        org.apache.maven.model.building.AbstractModelSourceTransformer$1 $u4;
        org.apache.maven.model.building.TransformerException $u5;
        org.xml.sax.InputSource $u6;
        javax.xml.transform.sax.SAXSource $u7;
        org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler $u8;
        java.io.PipedInputStream $u9;
        java.lang.Thread $u11;
        org.apache.maven.model.building.AbstractModelSourceTransformer$ThreadAwareInputStream $u12;
        org.apache.maven.model.building.AbstractModelSourceTransformer $r0, $r1, $r2, $r3, $r7, $r9;
        org.xml.sax.ErrorHandler $r4;
        java.lang.Throwable $r5;
        org.xml.sax.XMLReader $r6;
        java.lang.Thread$UncaughtExceptionHandler $r8;

        this := @this: AbstractModelSourceTransformer;

        pomFile := @parameter0: java.nio.file.Path;

        context := @parameter1: org.apache.maven.model.building.TransformerContext;

        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        transformerHandler = virtualinvoke $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer: javax.xml.transform.sax.TransformerHandler getTransformerHandler(java.nio.file.Path)>(pomFile);

        $u0 = new java.io.PipedOutputStream;

        specialinvoke $u0.<java.io.PipedOutputStream: void <init>()>();

        $r1 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        out = virtualinvoke $r1.<org.apache.maven.model.building.AbstractModelSourceTransformer: java.io.OutputStream filterOutputStream(java.io.OutputStream,java.nio.file.Path)>($u0, pomFile);

        if transformerHandler != null goto label1;

        $u1 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $u1.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(out);

        result = $u1;

        lexConsumer = null;

        goto label2;

     label1:
        $u2 = new javax.xml.transform.sax.SAXResult;

        specialinvoke $u2.<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>(transformerHandler);

        result = $u2;

        lexConsumer = staticinvoke <AbstractModelSourceTransformer$lambda_transform_0__355: java.util.function.Consumer bootstrap$(javax.xml.transform.Result)>($u2);

        $u3 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $u3.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(out);

        interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: void setResult(javax.xml.transform.Result)>($u3);

     label2:
        $r2 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        filter = virtualinvoke $r2.<org.apache.maven.model.building.AbstractModelSourceTransformer: org.apache.maven.model.transform.sax.AbstractSAXFilter getSAXFilter(java.nio.file.Path,org.apache.maven.model.building.TransformerContext,java.util.function.Consumer)>(pomFile, context, lexConsumer);

        virtualinvoke filter.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(transformerHandler);

        $u4 = new org.apache.maven.model.building.AbstractModelSourceTransformer$1;

        $r3 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        specialinvoke $u4.<org.apache.maven.model.building.AbstractModelSourceTransformer$1: void <init>(org.apache.maven.model.building.AbstractModelSourceTransformer)>($r3);

        $r4 = (org.xml.sax.ErrorHandler) $u4;

        virtualinvoke filter.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setErrorHandler(org.xml.sax.ErrorHandler)>($r4);

     label3:
        goto label5;

     label4:
        $stack45 := @caughtexception;

        $u5 = new org.apache.maven.model.building.TransformerException;

        specialinvoke $u5.<org.apache.maven.model.building.TransformerException: void <init>(java.lang.Exception)>($stack45);

        $r5 = (java.lang.Throwable) $u5;

        throw $r5;

     label5:
        $u7 = new javax.xml.transform.sax.SAXSource;

        $u6 = new org.xml.sax.InputSource;

        $stack23 = newarray (java.nio.file.OpenOption)[0];

        $stack24 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(pomFile, $stack23);

        specialinvoke $u6.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($stack24);

        $r6 = (org.xml.sax.XMLReader) filter;

        specialinvoke $u7.<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.XMLReader,org.xml.sax.InputSource)>($r6, $u6);

        $u8 = new org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler;

        specialinvoke $u8.<org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler: void <init>(org.apache.maven.model.building.AbstractModelSourceTransformer$1)>(null);

        $u9 = new java.io.PipedInputStream;

        specialinvoke $u9.<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>($u0);

        $u11 = new java.lang.Thread;

        $r7 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        $stack28 = staticinvoke <AbstractModelSourceTransformer$lambda_transform_1__356: java.lang.Runnable bootstrap$(org.apache.maven.model.building.AbstractModelSourceTransformer,java.io.PipedOutputStream,javax.xml.transform.sax.SAXSource,javax.xml.transform.Result,org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler)>($r7, $u0, $u7, result, $u8);

        $u10 = new java.lang.StringBuilder;

        specialinvoke $u10.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $u10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransformThread-");

        $stack31 = <org.apache.maven.model.building.AbstractModelSourceTransformer: java.util.concurrent.atomic.AtomicInteger TRANSFORM_THREAD_COUNTER>;

        $stack32 = virtualinvoke $stack31.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $stack33 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack32);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u11.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($stack28, $stack34);

        $r8 = (java.lang.Thread$UncaughtExceptionHandler) $u8;

        virtualinvoke $u11.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r8);

        virtualinvoke $u11.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $u11.<java.lang.Thread: void start()>();

        $u12 = new org.apache.maven.model.building.AbstractModelSourceTransformer$ThreadAwareInputStream;

        $r9 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        specialinvoke $u12.<org.apache.maven.model.building.AbstractModelSourceTransformer$ThreadAwareInputStream: void <init>(org.apache.maven.model.building.AbstractModelSourceTransformer,java.io.InputStream,org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler)>($r9, $u9, $u8);

        $r10 = (java.io.InputStream) $u12;

        return $r10;

        catch javax.xml.transform.TransformerConfigurationException from label2 to label3 with label4;
        catch org.xml.sax.SAXException from label2 to label3 with label4;
        catch javax.xml.parsers.ParserConfigurationException from label2 to label3 with label4;
    }

    private void lambda$transform$1(java.io.PipedOutputStream, javax.xml.transform.sax.SAXSource, javax.xml.transform.Result, org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler)
    {
        java.io.PipedOutputStream pout;
        AbstractModelSourceTransformer this;
        javax.xml.transform.TransformerFactory $stack8;
        javax.xml.transform.Transformer $stack9;
        javax.xml.transform.sax.SAXSource transformSource;
        javax.xml.transform.Result result;
        java.lang.Exception $stack10;
        org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler eh;
        java.lang.Thread $stack11;
        java.lang.Throwable $stack12, $stack13;
        org.apache.maven.model.building.AbstractModelSourceTransformer $r0;

        this := @this: AbstractModelSourceTransformer;

        pout := @parameter0: java.io.PipedOutputStream;

        transformSource := @parameter1: javax.xml.transform.sax.SAXSource;

        result := @parameter2: javax.xml.transform.Result;

        eh := @parameter3: org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler;

     label01:
        $r0 = (org.apache.maven.model.building.AbstractModelSourceTransformer) this;

        $stack8 = $r0.<org.apache.maven.model.building.AbstractModelSourceTransformer: javax.xml.transform.TransformerFactory transformerFactory>;

        $stack9 = virtualinvoke $stack8.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $stack9.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(transformSource, result);

     label02:
        if pout == null goto label08;

        virtualinvoke pout.<java.io.PipedOutputStream: void close()>();

        goto label08;

     label03:
        $stack13 := @caughtexception;

        if pout == null goto label07;

     label04:
        virtualinvoke pout.<java.io.PipedOutputStream: void close()>();

     label05:
        goto label07;

     label06:
        $stack12 := @caughtexception;

        virtualinvoke $stack13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack12);

     label07:
        throw $stack13;

     label08:
        goto label10;

     label09:
        $stack10 := @caughtexception;

        $stack11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke eh.<org.apache.maven.model.building.AbstractModelSourceTransformer$IOExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($stack11, $stack10);

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch javax.xml.transform.TransformerException from label01 to label08 with label09;
        catch java.io.IOException from label01 to label08 with label09;
    }

    private static void lambda$transform$0(javax.xml.transform.Result, org.xml.sax.ext.LexicalHandler)
    {
        javax.xml.transform.Result result;
        org.xml.sax.ext.LexicalHandler l, $r0;
        javax.xml.transform.sax.SAXResult $stack3;
        org.apache.maven.model.transform.sax.CommentRenormalizer $u0;

        result := @parameter0: javax.xml.transform.Result;

        l := @parameter1: org.xml.sax.ext.LexicalHandler;

        $stack3 = (javax.xml.transform.sax.SAXResult) result;

        $u0 = new org.apache.maven.model.transform.sax.CommentRenormalizer;

        specialinvoke $u0.<org.apache.maven.model.transform.sax.CommentRenormalizer: void <init>(org.xml.sax.ext.LexicalHandler)>(l);

        $r0 = (org.xml.sax.ext.LexicalHandler) $u0;

        virtualinvoke $stack3.<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>($r0);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $stack0;

        $stack0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $stack0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <org.apache.maven.model.building.AbstractModelSourceTransformer: java.util.concurrent.atomic.AtomicInteger TRANSFORM_THREAD_COUNTER> = $stack0;

        return;
    }
}
