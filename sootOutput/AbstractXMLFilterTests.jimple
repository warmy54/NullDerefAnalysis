public abstract class AbstractXMLFilterTests extends java.lang.Object
{

    public void <init>()
    {
        AbstractXMLFilterTests this;

        this := @this: AbstractXMLFilterTests;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    protected org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter() throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        java.lang.UnsupportedOperationException $stack1;
        AbstractXMLFilterTests this;

        this := @this: AbstractXMLFilterTests;

        $stack1 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Override one of the getFilter() methods");

        throw $stack1;
    }

    protected org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter(java.util.function.Consumer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        AbstractXMLFilterTests this;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $stack2;
        java.util.function.Consumer result;
        org.apache.maven.model.transform.AbstractXMLFilterTests $r0;

        this := @this: AbstractXMLFilterTests;

        result := @parameter0: java.util.function.Consumer;

        $r0 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.model.transform.AbstractXMLFilterTests: org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter()>();

        return $stack2;
    }

    protected java.lang.String omitXmlDeclaration()
    {
        AbstractXMLFilterTests this;

        this := @this: AbstractXMLFilterTests;

        return "yes";
    }

    protected java.lang.String indentAmount()
    {
        AbstractXMLFilterTests this;

        this := @this: AbstractXMLFilterTests;

        return null;
    }

    protected java.lang.String transform(java.lang.String) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        AbstractXMLFilterTests this;
        java.lang.String input, $stack3;
        java.io.StringReader $u0;
        org.apache.maven.model.transform.AbstractXMLFilterTests $r0;

        this := @this: AbstractXMLFilterTests;

        input := @parameter0: java.lang.String;

        $u0 = new java.io.StringReader;

        specialinvoke $u0.<java.io.StringReader: void <init>(java.lang.String)>(input);

        $r0 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String transform(java.io.Reader)>($u0);

        return $stack3;
    }

    protected java.lang.String transform(java.lang.String, org.apache.maven.model.transform.sax.AbstractSAXFilter) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        AbstractXMLFilterTests this;
        org.apache.maven.model.transform.sax.AbstractSAXFilter filter;
        javax.xml.transform.TransformerFactory $stack10;
        javax.xml.transform.sax.SAXTransformerFactory transformerFactory;
        javax.xml.transform.sax.TransformerHandler transformerHandler;
        javax.xml.transform.Transformer $stack12, transformer, $stack24, $stack25;
        java.lang.String $stack14, $stack15, input, $stack23, $stack27;
        java.io.StringWriter $u0;
        javax.xml.transform.stream.StreamResult $u1;
        javax.xml.transform.sax.SAXResult $u2;
        java.io.StringReader $u3;
        org.xml.sax.InputSource $u4;
        javax.xml.transform.sax.SAXSource $u5;
        org.apache.maven.model.transform.AbstractXMLFilterTests $r0, $r1, $r2, $r3;
        org.xml.sax.XMLReader $r4;
        org.xml.sax.ext.LexicalHandler $r5;

        this := @this: AbstractXMLFilterTests;

        input := @parameter0: java.lang.String;

        filter := @parameter1: org.apache.maven.model.transform.sax.AbstractSAXFilter;

        $r0 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        specialinvoke $r0.<org.apache.maven.model.transform.AbstractXMLFilterTests: void setParent(org.apache.maven.model.transform.sax.AbstractSAXFilter)>(filter);

        $stack10 = staticinvoke <org.apache.maven.model.transform.sax.Factories: javax.xml.transform.TransformerFactory newTransformerFactory()>();

        transformerFactory = (javax.xml.transform.sax.SAXTransformerFactory) $stack10;

        transformerHandler = virtualinvoke transformerFactory.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler()>();

        $stack12 = interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: javax.xml.transform.Transformer getTransformer()>();

        $r1 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack14 = virtualinvoke $r1.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String omitXmlDeclaration()>();

        virtualinvoke $stack12.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("omit-xml-declaration", $stack14);

        $r2 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack15 = virtualinvoke $r2.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String indentAmount()>();

        if $stack15 == null goto label1;

        $stack24 = interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: javax.xml.transform.Transformer getTransformer()>();

        virtualinvoke $stack24.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $stack25 = interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: javax.xml.transform.Transformer getTransformer()>();

        $r3 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack27 = virtualinvoke $r3.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String indentAmount()>();

        virtualinvoke $stack25.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", $stack27);

     label1:
        transformer = virtualinvoke transformerFactory.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        $u0 = new java.io.StringWriter;

        specialinvoke $u0.<java.io.StringWriter: void <init>()>();

        $u1 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $u1.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($u0);

        interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: void setResult(javax.xml.transform.Result)>($u1);

        $u2 = new javax.xml.transform.sax.SAXResult;

        specialinvoke $u2.<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>(transformerHandler);

        $u5 = new javax.xml.transform.sax.SAXSource;

        $u4 = new org.xml.sax.InputSource;

        $u3 = new java.io.StringReader;

        specialinvoke $u3.<java.io.StringReader: void <init>(java.lang.String)>(input);

        specialinvoke $u4.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($u3);

        $r4 = (org.xml.sax.XMLReader) filter;

        specialinvoke $u5.<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.XMLReader,org.xml.sax.InputSource)>($r4, $u4);

        $r5 = (org.xml.sax.ext.LexicalHandler) filter;

        virtualinvoke $u2.<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>($r5);

        virtualinvoke transformer.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($u5, $u2);

        $stack23 = virtualinvoke $u0.<java.lang.Object: java.lang.String toString()>();

        return $stack23;
    }

    protected java.lang.String transform(java.io.Reader) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        javax.xml.transform.TransformerFactory $stack10;
        javax.xml.transform.sax.SAXTransformerFactory transformerFactory;
        javax.xml.transform.sax.TransformerHandler transformerHandler;
        javax.xml.transform.Transformer $stack12, transformer, $stack26, $stack27;
        AbstractXMLFilterTests this;
        java.lang.String $stack14, $stack15, $stack25, $stack29;
        java.util.function.Consumer $stack20;
        java.io.Reader input;
        org.apache.maven.model.transform.sax.AbstractSAXFilter filter, $r6;
        java.io.StringWriter $u0;
        javax.xml.transform.stream.StreamResult $u1;
        javax.xml.transform.sax.SAXResult $u2;
        org.apache.maven.model.transform.AbstractXMLFilterTests$PerCharXMLFilter $u3;
        org.xml.sax.InputSource $u4;
        javax.xml.transform.sax.SAXSource $u5;
        org.apache.maven.model.transform.AbstractXMLFilterTests $r0, $r1, $r2, $r3, $r4, $r5;
        org.xml.sax.XMLReader $r7;

        this := @this: AbstractXMLFilterTests;

        input := @parameter0: java.io.Reader;

        $stack10 = staticinvoke <org.apache.maven.model.transform.sax.Factories: javax.xml.transform.TransformerFactory newTransformerFactory()>();

        transformerFactory = (javax.xml.transform.sax.SAXTransformerFactory) $stack10;

        transformerHandler = virtualinvoke transformerFactory.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler()>();

        $stack12 = interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: javax.xml.transform.Transformer getTransformer()>();

        $r0 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack14 = virtualinvoke $r0.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String omitXmlDeclaration()>();

        virtualinvoke $stack12.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("omit-xml-declaration", $stack14);

        $r1 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack15 = virtualinvoke $r1.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String indentAmount()>();

        if $stack15 == null goto label1;

        $stack26 = interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: javax.xml.transform.Transformer getTransformer()>();

        virtualinvoke $stack26.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $stack27 = interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: javax.xml.transform.Transformer getTransformer()>();

        $r2 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        $stack29 = virtualinvoke $r2.<org.apache.maven.model.transform.AbstractXMLFilterTests: java.lang.String indentAmount()>();

        virtualinvoke $stack27.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", $stack29);

     label1:
        transformer = virtualinvoke transformerFactory.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        $u0 = new java.io.StringWriter;

        specialinvoke $u0.<java.io.StringWriter: void <init>()>();

        $u1 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $u1.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($u0);

        interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: void setResult(javax.xml.transform.Result)>($u1);

        $u2 = new javax.xml.transform.sax.SAXResult;

        specialinvoke $u2.<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>(transformerHandler);

        $stack20 = staticinvoke <AbstractXMLFilterTests$lambda_transform_0__355: java.util.function.Consumer bootstrap$(javax.xml.transform.sax.SAXResult)>($u2);

        $r3 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        filter = virtualinvoke $r3.<org.apache.maven.model.transform.AbstractXMLFilterTests: org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter(java.util.function.Consumer)>($stack20);

        $r4 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        specialinvoke $r4.<org.apache.maven.model.transform.AbstractXMLFilterTests: void setParent(org.apache.maven.model.transform.sax.AbstractSAXFilter)>(filter);

        $u3 = new org.apache.maven.model.transform.AbstractXMLFilterTests$PerCharXMLFilter;

        $r5 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        specialinvoke $u3.<org.apache.maven.model.transform.AbstractXMLFilterTests$PerCharXMLFilter: void <init>(org.apache.maven.model.transform.AbstractXMLFilterTests,org.apache.maven.model.transform.sax.AbstractSAXFilter)>($r5, filter);

        $r6 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u3;

        virtualinvoke $r6.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(transformerHandler);

        $u5 = new javax.xml.transform.sax.SAXSource;

        $u4 = new org.xml.sax.InputSource;

        specialinvoke $u4.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(input);

        $r7 = (org.xml.sax.XMLReader) $u3;

        specialinvoke $u5.<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.XMLReader,org.xml.sax.InputSource)>($r7, $u4);

        virtualinvoke transformer.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($u5, $u2);

        $stack25 = virtualinvoke $u0.<java.lang.Object: java.lang.String toString()>();

        return $stack25;
    }

    private void setParent(org.apache.maven.model.transform.sax.AbstractSAXFilter) throws org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        org.apache.maven.model.transform.sax.AbstractSAXFilter filter, $r1;
        org.xml.sax.XMLReader $stack4, r, $r2;
        AbstractXMLFilterTests this;
        org.apache.maven.model.transform.AbstractXMLFilterTests$PerCharXMLFilter $u0;
        org.apache.maven.model.transform.AbstractXMLFilterTests $r0;

        this := @this: AbstractXMLFilterTests;

        filter := @parameter0: org.apache.maven.model.transform.sax.AbstractSAXFilter;

        $stack4 = virtualinvoke filter.<org.apache.maven.model.transform.sax.AbstractSAXFilter: org.xml.sax.XMLReader getParent()>();

        if $stack4 != null goto label1;

        r = staticinvoke <org.apache.maven.model.transform.sax.Factories: org.xml.sax.XMLReader newXMLReader()>();

        $u0 = new org.apache.maven.model.transform.AbstractXMLFilterTests$PerCharXMLFilter;

        $r0 = (org.apache.maven.model.transform.AbstractXMLFilterTests) this;

        specialinvoke $u0.<org.apache.maven.model.transform.AbstractXMLFilterTests$PerCharXMLFilter: void <init>(org.apache.maven.model.transform.AbstractXMLFilterTests)>($r0);

        $r1 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u0;

        virtualinvoke $r1.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setParent(org.xml.sax.XMLReader)>(r);

        $r2 = (org.xml.sax.XMLReader) $u0;

        virtualinvoke filter.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setParent(org.xml.sax.XMLReader)>($r2);

        virtualinvoke filter.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespaces", 1);

     label1:
        return;
    }

    private static void lambda$transform$0(javax.xml.transform.sax.SAXResult, org.xml.sax.ext.LexicalHandler)
    {
        javax.xml.transform.sax.SAXResult transformResult;
        org.xml.sax.ext.LexicalHandler l;

        transformResult := @parameter0: javax.xml.transform.sax.SAXResult;

        l := @parameter1: org.xml.sax.ext.LexicalHandler;

        virtualinvoke transformResult.<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(l);

        return;
    }
}
