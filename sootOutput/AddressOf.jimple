public class AddressOf extends org.ooc.frontend.model.Access implements org.ooc.frontend.model.interfaces.MustBeResolved
{
    org.ooc.frontend.model.Type type;
    org.ooc.frontend.model.Expression expression;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        AddressOf this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.AddressOf $r0;

        this := @this: AddressOf;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Access: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        virtualinvoke $r0.<org.ooc.frontend.model.AddressOf: void setExpression(org.ooc.frontend.model.Expression)>(expression);

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        AddressOf this;
        org.ooc.frontend.model.Node oldie, kiddo;
        org.ooc.frontend.model.Expression $stack3, $stack4;
        org.ooc.frontend.model.AddressOf $r0, $r1;

        this := @this: AddressOf;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack3 = $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        if $stack3 != oldie goto label1;

        $stack4 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.AddressOf) this;

        $r1.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression> = $stack4;

        return 1;

     label1:
        return 0;
    }

    public org.ooc.frontend.model.Type getType()
    {
        AddressOf this;
        org.ooc.frontend.model.Type $stack2, exprType, $stack13, $stack3, $u0;
        org.ooc.frontend.model.Expression $stack4;
        boolean $stack7;
        java.lang.String $stack9;
        int $stack10, $stack12;
        org.ooc.frontend.model.tokens.Token $stack11;
        org.ooc.frontend.model.Declaration $stack14;
        org.ooc.frontend.model.AddressOf $r0, $r1, $r2, $r3, $r4;

        this := @this: AddressOf;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack2 = $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Type type>;

        if $stack2 != null goto label1;

        $r1 = (org.ooc.frontend.model.AddressOf) this;

        $stack4 = $r1.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        exprType = virtualinvoke $stack4.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if exprType == null goto label1;

        $stack7 = virtualinvoke exprType.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack7 == 0 goto label1;

        $u0 = new org.ooc.frontend.model.Type;

        $stack9 = virtualinvoke exprType.<org.ooc.frontend.model.Type: java.lang.String getName()>();

        $stack10 = virtualinvoke exprType.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        $stack12 = $stack10 + 1;

        $stack11 = exprType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.Type: void <init>(java.lang.String,int,org.ooc.frontend.model.tokens.Token)>($stack9, $stack12, $stack11);

        $r2 = (org.ooc.frontend.model.AddressOf) this;

        $r2.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Type type> = $u0;

        $r3 = (org.ooc.frontend.model.AddressOf) this;

        $stack13 = $r3.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Type type>;

        $stack14 = virtualinvoke exprType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Declaration getRef()>();

        virtualinvoke $stack13.<org.ooc.frontend.model.Type: void setRef(org.ooc.frontend.model.Declaration)>($stack14);

     label1:
        $r4 = (org.ooc.frontend.model.AddressOf) this;

        $stack3 = $r4.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Type type>;

        return $stack3;
    }

    public org.ooc.frontend.model.Expression getExpression()
    {
        AddressOf this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.AddressOf $r0;

        this := @this: AddressOf;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack1 = $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        return $stack1;
    }

    public void setExpression(org.ooc.frontend.model.Expression)
    {
        AddressOf this;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.AddressOf $r0;

        this := @this: AddressOf;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression> = expression;

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        AddressOf this;
        org.ooc.frontend.model.AddressOf $r0;

        this := @this: AddressOf;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.AddressOf)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        AddressOf this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2;
        org.ooc.frontend.model.AddressOf $r0;

        this := @this: AddressOf;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack2 = $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        AddressOf this;

        this := @this: AddressOf;

        return 1;
    }

    public java.lang.String toString()
    {
        AddressOf this;
        org.ooc.frontend.model.Expression $stack1;
        java.lang.String $stack2;
        org.ooc.frontend.model.AddressOf $r0;

        this := @this: AddressOf;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack1 = $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression)>($stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("&(\u0001)");

        return $stack2;
    }

    public boolean isResolved()
    {
        AddressOf this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.Expression $stack2;
        boolean $stack3, $stack4;
        org.ooc.frontend.model.AddressOf $r0, $r1;

        this := @this: AddressOf;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack1 = $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Type type>;

        if $stack1 == null goto label1;

        $r1 = (org.ooc.frontend.model.AddressOf) this;

        $stack2 = $r1.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        $stack3 = virtualinvoke $stack2.<org.ooc.frontend.model.Expression: boolean canBeReferenced()>();

        if $stack3 == 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        AddressOf this;
        org.ooc.frontend.model.Type $stack5;
        org.ooc.frontend.model.Expression $stack6, $stack12, $stack14, $r9;
        boolean $stack7, fatal;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack8, $stack16, $stack17;
        org.ooc.frontend.model.NodeList stack;
        java.lang.String $stack11, $stack19;
        org.ooc.frontend.model.tokens.Token $stack13;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.middle.OocCompilationError $u0;
        org.ooc.frontend.model.VariableDecl $u1;
        org.ooc.frontend.model.AddressOf $r0, $r1, $r4, $r5, $r6, $r7, $r8;
        org.ooc.frontend.model.Node $r2, $r10, $r11;
        java.lang.Throwable $r3;

        this := @this: AddressOf;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $r0 = (org.ooc.frontend.model.AddressOf) this;

        $stack5 = virtualinvoke $r0.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Type getType()>();

        if $stack5 != null goto label2;

        if fatal == 0 goto label1;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r1 = (org.ooc.frontend.model.AddressOf) this;

        $stack19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.AddressOf)>($r1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Couldn\'t resolve type of AddressOf \u0001");

        $r2 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r2, stack, $stack19);

        $r3 = (java.lang.Throwable) $u0;

        throw $r3;

     label1:
        $stack17 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack17;

     label2:
        $r4 = (org.ooc.frontend.model.AddressOf) this;

        $stack6 = $r4.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        $stack7 = virtualinvoke $stack6.<org.ooc.frontend.model.Expression: boolean canBeReferenced()>();

        if $stack7 != 0 goto label3;

        $u1 = new org.ooc.frontend.model.VariableDecl;

        $r5 = (org.ooc.frontend.model.AddressOf) this;

        $stack11 = virtualinvoke $r5.<org.ooc.frontend.model.AddressOf: java.lang.String generateTempName(java.lang.String,org.ooc.frontend.model.NodeList)>("overzealous", stack);

        $r6 = (org.ooc.frontend.model.AddressOf) this;

        $stack14 = $r6.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        $r7 = (org.ooc.frontend.model.AddressOf) this;

        $stack12 = $r7.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression>;

        $stack13 = $stack12.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u1.<org.ooc.frontend.model.VariableDecl: void <init>(org.ooc.frontend.model.Type,java.lang.String,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token,org.ooc.frontend.model.Module)>(null, $stack11, $stack14, $stack13, null);

        $r8 = (org.ooc.frontend.model.AddressOf) this;

        $r9 = (org.ooc.frontend.model.Expression) $u1;

        $r8.<org.ooc.frontend.model.AddressOf: org.ooc.frontend.model.Expression expression> = $r9;

        $r10 = (org.ooc.frontend.model.Node) this;

        virtualinvoke stack.<org.ooc.frontend.model.NodeList: void push(org.ooc.frontend.model.Node)>($r10);

        virtualinvoke $u1.<org.ooc.frontend.model.VariableDecl: boolean unwrap(org.ooc.frontend.model.NodeList)>(stack);

        $r11 = (org.ooc.frontend.model.Node) this;

        virtualinvoke stack.<org.ooc.frontend.model.NodeList: void pop(org.ooc.frontend.model.Node)>($r11);

        $stack16 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response RESTART>;

        return $stack16;

     label3:
        $stack8 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack8;
    }
}
