public class AndArtifactFilterTest extends java.lang.Object
{

    public void <init>()
    {
        AndArtifactFilterTest this;

        this := @this: AndArtifactFilterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private org.apache.maven.artifact.resolver.filter.ArtifactFilter newSubFilter()
    {
        org.apache.maven.artifact.resolver.filter.ArtifactFilter $stack1;
        AndArtifactFilterTest this;

        this := @this: AndArtifactFilterTest;

        $stack1 = staticinvoke <AndArtifactFilterTest$lambda_newSubFilter_0__309: org.apache.maven.artifact.resolver.filter.ArtifactFilter bootstrap$()>();

        return $stack1;
    }

    public void testEquals()
    {
        org.apache.maven.artifact.resolver.filter.ArtifactFilter[] $stack5;
        AndArtifactFilterTest this;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter $stack7;
        java.util.List $stack8;
        boolean $stack9, $stack10, $stack13, $stack14;
        int $stack11, $stack12;
        org.apache.maven.artifact.resolver.filter.AndArtifactFilter $u0, $u1;
        org.apache.maven.artifact.resolver.filter.AndArtifactFilterTest $r0;

        this := @this: AndArtifactFilterTest;

        $u0 = new org.apache.maven.artifact.resolver.filter.AndArtifactFilter;

        specialinvoke $u0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: void <init>()>();

        $u1 = new org.apache.maven.artifact.resolver.filter.AndArtifactFilter;

        $stack5 = newarray (org.apache.maven.artifact.resolver.filter.ArtifactFilter)[1];

        $r0 = (org.apache.maven.artifact.resolver.filter.AndArtifactFilterTest) this;

        $stack7 = specialinvoke $r0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilterTest: org.apache.maven.artifact.resolver.filter.ArtifactFilter newSubFilter()>();

        $stack5[0] = $stack7;

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack5);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: void <init>(java.util.List)>($stack8);

        $stack9 = virtualinvoke $u0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack9);

        $stack10 = virtualinvoke $u0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: boolean equals(java.lang.Object)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $u0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: int hashCode()>();

        $stack12 = virtualinvoke $u0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: int hashCode()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack11, $stack12);

        $stack13 = virtualinvoke $u0.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: boolean equals(java.lang.Object)>($u1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack13);

        $stack14 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: boolean equals(java.lang.Object)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack14);

        return;
    }

    private static boolean lambda$newSubFilter$0(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        return 0;
    }
}
