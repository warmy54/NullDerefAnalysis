public class ArrayAccess extends org.ooc.frontend.model.Access implements org.ooc.frontend.model.interfaces.MustBeResolved
{
    org.ooc.frontend.model.Type type;
    protected org.ooc.frontend.model.Expression variable;
    protected org.ooc.frontend.model.NodeList indices;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        ArrayAccess this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression variable;
        org.ooc.frontend.model.NodeList $u0;
        org.ooc.frontend.model.ArrayAccess $r0, $r1;

        this := @this: ArrayAccess;

        variable := @parameter0: org.ooc.frontend.model.Expression;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Access: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable> = variable;

        $u0 = new org.ooc.frontend.model.NodeList;

        specialinvoke $u0.<org.ooc.frontend.model.NodeList: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices> = $u0;

        return;
    }

    public org.ooc.frontend.model.Expression getGenericOperand()
    {
        ArrayAccess this;
        org.ooc.frontend.model.Type $stack3, $stack6, $stack11;
        boolean $stack4;
        org.ooc.frontend.model.Expression $stack5, $stack17, $stack23, $r5, $r9, $r11, $r12;
        int $stack7;
        java.lang.String $stack12;
        org.ooc.frontend.model.tokens.Token $stack13, $stack14, $stack16, $stack22, $stack26;
        org.ooc.frontend.model.NodeList $stack19, $stack20;
        org.ooc.frontend.model.Node $stack21, $r10;
        org.ooc.frontend.model.VariableAccess $u0;
        org.ooc.frontend.model.MemberAccess $u1;
        org.ooc.frontend.model.ArrayAccess $u2, $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        org.ooc.frontend.model.Mul $u3;
        org.ooc.frontend.model.AddressOf $u4;

        this := @this: ArrayAccess;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack3 = virtualinvoke $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type getType()>();

        $stack4 = virtualinvoke $stack3.<org.ooc.frontend.model.Type: boolean isGeneric()>();

        if $stack4 == 0 goto label1;

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack6 = virtualinvoke $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type getType()>();

        $stack7 = virtualinvoke $stack6.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        if $stack7 != 0 goto label1;

        $u1 = new org.ooc.frontend.model.MemberAccess;

        $u0 = new org.ooc.frontend.model.VariableAccess;

        $r2 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack11 = virtualinvoke $r2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type getType()>();

        $stack12 = virtualinvoke $stack11.<org.ooc.frontend.model.Type: java.lang.String getName()>();

        $r3 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack13 = $r3.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.VariableAccess: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>($stack12, $stack13);

        $r4 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack14 = $r4.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        $r5 = (org.ooc.frontend.model.Expression) $u0;

        specialinvoke $u1.<org.ooc.frontend.model.MemberAccess: void <init>(org.ooc.frontend.model.Expression,java.lang.String,org.ooc.frontend.model.tokens.Token)>($r5, "size", $stack14);

        $u2 = new org.ooc.frontend.model.ArrayAccess;

        $r6 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack17 = $r6.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $r7 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack16 = $r7.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u2.<org.ooc.frontend.model.ArrayAccess: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($stack17, $stack16);

        $stack20 = $u2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        $u3 = new org.ooc.frontend.model.Mul;

        $r8 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack19 = $r8.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        $stack21 = virtualinvoke $stack19.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(0);

        $stack23 = (org.ooc.frontend.model.Expression) $stack21;

        $stack22 = $u2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        $r9 = (org.ooc.frontend.model.Expression) $u1;

        specialinvoke $u3.<org.ooc.frontend.model.Mul: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($stack23, $r9, $stack22);

        $r10 = (org.ooc.frontend.model.Node) $u3;

        virtualinvoke $stack20.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r10);

        $u4 = new org.ooc.frontend.model.AddressOf;

        $stack26 = $u2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        $r11 = (org.ooc.frontend.model.Expression) $u2;

        specialinvoke $u4.<org.ooc.frontend.model.AddressOf: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($r11, $stack26);

        $r12 = (org.ooc.frontend.model.Expression) $u4;

        return $r12;

     label1:
        $stack5 = specialinvoke this.<org.ooc.frontend.model.Access: org.ooc.frontend.model.Expression getGenericOperand()>();

        return $stack5;
    }

    public org.ooc.frontend.model.Expression getVariable()
    {
        ArrayAccess this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.ArrayAccess $r0;

        this := @this: ArrayAccess;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        return $stack1;
    }

    public void setVariable(org.ooc.frontend.model.Expression)
    {
        ArrayAccess this;
        org.ooc.frontend.model.Expression variable;
        org.ooc.frontend.model.ArrayAccess $r0;

        this := @this: ArrayAccess;

        variable := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable> = variable;

        return;
    }

    public org.ooc.frontend.model.NodeList getIndices()
    {
        ArrayAccess this;
        org.ooc.frontend.model.NodeList $stack1;
        org.ooc.frontend.model.ArrayAccess $r0;

        this := @this: ArrayAccess;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        return $stack1;
    }

    public org.ooc.frontend.model.Type getType()
    {
        ArrayAccess this;
        org.ooc.frontend.model.Type $stack5, fromType, clone, exprType, $stack17, $stack6, $u0;
        org.ooc.frontend.model.Expression $stack7;
        org.ooc.frontend.model.Declaration ref, $stack28, $stack18;
        boolean $stack11, $stack29;
        org.ooc.frontend.model.CoverDecl $stack19;
        int $stack31, $stack32, $stack33, $stack14, $stack16;
        java.lang.String $stack13;
        org.ooc.frontend.model.tokens.Token $stack15;
        org.ooc.frontend.model.ArrayAccess $r0, $r1, $r2, $r3, $r4;

        this := @this: ArrayAccess;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack5 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type type>;

        if $stack5 != null goto label2;

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack7 = $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        exprType = virtualinvoke $stack7.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if exprType == null goto label2;

        ref = virtualinvoke exprType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Declaration getRef()>();

        $stack11 = ref instanceof org.ooc.frontend.model.CoverDecl;

        if $stack11 == 0 goto label1;

        $stack19 = (org.ooc.frontend.model.CoverDecl) ref;

        fromType = virtualinvoke $stack19.<org.ooc.frontend.model.CoverDecl: org.ooc.frontend.model.Type getFromType()>();

        if fromType == null goto label1;

        $stack28 = virtualinvoke fromType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Declaration getRef()>();

        $stack29 = $stack28 instanceof org.ooc.frontend.model.CoverDecl;

        if $stack29 == 0 goto label1;

        clone = virtualinvoke fromType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Type clone()>();

        $stack31 = virtualinvoke exprType.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        $stack32 = virtualinvoke fromType.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        $stack33 = $stack31 + $stack32;

        virtualinvoke clone.<org.ooc.frontend.model.Type: void setPointerLevel(int)>($stack33);

        exprType = clone;

     label1:
        $u0 = new org.ooc.frontend.model.Type;

        $stack13 = virtualinvoke exprType.<org.ooc.frontend.model.Type: java.lang.String getName()>();

        $stack14 = virtualinvoke exprType.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        $stack16 = $stack14 - 1;

        $stack15 = exprType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.Type: void <init>(java.lang.String,int,org.ooc.frontend.model.tokens.Token)>($stack13, $stack16, $stack15);

        $r2 = (org.ooc.frontend.model.ArrayAccess) this;

        $r2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type type> = $u0;

        $r3 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack17 = $r3.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type type>;

        $stack18 = virtualinvoke exprType.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Declaration getRef()>();

        virtualinvoke $stack17.<org.ooc.frontend.model.Type: void setRef(org.ooc.frontend.model.Declaration)>($stack18);

     label2:
        $r4 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack6 = $r4.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Type type>;

        return $stack6;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        ArrayAccess this;
        org.ooc.frontend.model.ArrayAccess $r0;

        this := @this: ArrayAccess;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.ArrayAccess)>($r0);

        return;
    }

    public boolean hasChildren()
    {
        ArrayAccess this;

        this := @this: ArrayAccess;

        return 1;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        ArrayAccess this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2;
        org.ooc.frontend.model.NodeList $stack3;
        org.ooc.frontend.model.ArrayAccess $r0, $r1;

        this := @this: ArrayAccess;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack2 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack3 = $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        virtualinvoke $stack3.<org.ooc.frontend.model.NodeList: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        ArrayAccess this;
        org.ooc.frontend.model.Expression $stack3, $stack6;
        org.ooc.frontend.model.NodeList $stack4, $stack5;
        org.ooc.frontend.model.ArrayAccess $r0, $r1, $r2, $r3;

        this := @this: ArrayAccess;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack3 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        if oldie != $stack3 goto label1;

        $stack6 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable> = $stack6;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack4 = $r2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        if oldie != $stack4 goto label2;

        $stack5 = (org.ooc.frontend.model.NodeList) kiddo;

        $r3 = (org.ooc.frontend.model.ArrayAccess) this;

        $r3.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices> = $stack5;

        return 1;

     label2:
        return 0;
    }

    public boolean isResolved()
    {
        ArrayAccess this;

        this := @this: ArrayAccess;

        return 0;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        org.ooc.frontend.model.NodeList stack, $stack19, $stack35, $stack38, $stack39, $stack44, $stack65, $stack15, response#33, $u0;
        org.ooc.frontend.model.Node $stack12, $stack28, $stack40, $stack43, $stack48, $stack75, $r9, $r11, $r12, $r13, $r14, $r16, $r17;
        boolean $stack13, $stack21, $stack49, $stack67, fatal, $stack17;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.Module $stack18, $stack64, $stack14;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack22, $stack42, $stack79, $stack85, response;
        org.ooc.frontend.model.FunctionDecl $stack23, $stack26;
        ArrayAccess this;
        org.ooc.frontend.model.tokens.Token $stack27, $stack55;
        org.ooc.frontend.model.Type $stack29, $stack32;
        int $stack30, $stack33, $stack34, $stack47, score, $stack83, assignIndex, copy#10;
        org.ooc.frontend.model.Expression $stack31, $stack36, $stack45, $stack56, $stack76, $r7;
        java.io.PrintStream $stack50;
        java.lang.String $stack51, $stack52;
        java.lang.Object $stack63, $stack69, $stack72;
        java.lang.Throwable $stack84, $r15;
        org.ooc.frontend.model.Assignment ass, op#36;
        org.ooc.frontend.model.OpDecl ass#7, op;
        java.util.Iterator response#19, score;
        org.ooc.frontend.model.Import op#29;
        org.ooc.frontend.model.Argument score#35;
        org.ooc.frontend.model.FunctionCall $u1;
        org.ooc.frontend.model.AddressOf $u2;
        org.ooc.middle.OocCompilationError $u3;
        org.ooc.frontend.model.ArrayAccess $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r10;

        this := @this: ArrayAccess;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        assignIndex = -1;

        $stack12 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $stack13 = $stack12 instanceof org.ooc.frontend.model.Assignment;

        if $stack13 == 0 goto label02;

        $stack75 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        ass = (org.ooc.frontend.model.Assignment) $stack75;

        $stack76 = virtualinvoke ass.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.Expression getLeft()>();

        if $stack76 != this goto label01;

        $stack83 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int size()>();

        assignIndex = $stack83 - 1;

        goto label02;

     label01:
        $u0 = new org.ooc.frontend.model.NodeList;

        specialinvoke $u0.<org.ooc.frontend.model.NodeList: void <init>()>();

        virtualinvoke $u0.<org.ooc.frontend.model.NodeList: void addAll(org.ooc.frontend.model.NodeList)>(stack);

        virtualinvoke $u0.<org.ooc.frontend.model.NodeList: void pop()>();

        response = virtualinvoke ass.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>($u0, res, fatal);

        $stack79 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        if response == $stack79 goto label02;

        return response;

     label02:
        ass#7 = null;

        copy#10 = 0;

     label03:
        $stack14 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack15 = virtualinvoke $stack14.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        response#19 = virtualinvoke $stack15.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label04:
        $stack17 = interfaceinvoke response#19.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label06;

        $stack72 = interfaceinvoke response#19.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack72;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        score = virtualinvoke $r0.<org.ooc.frontend.model.ArrayAccess: int getOpScore(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,int,org.ooc.frontend.model.OpDecl)>(stack, res, assignIndex, op);

        if copy#10 >= score goto label05;

        ass#7 = op;

        copy#10 = score;

     label05:
        goto label04;

     label06:
        $stack18 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack19 = virtualinvoke $stack18.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getAllImports()>();

        response#19 = virtualinvoke $stack19.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label07:
        $stack21 = interfaceinvoke response#19.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label11;

        $stack63 = interfaceinvoke response#19.<java.util.Iterator: java.lang.Object next()>();

        op#29 = (org.ooc.frontend.model.Import) $stack63;

        $stack64 = virtualinvoke op#29.<org.ooc.frontend.model.Import: org.ooc.frontend.model.Module getModule()>();

        $stack65 = virtualinvoke $stack64.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        score = virtualinvoke $stack65.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label08:
        $stack67 = interfaceinvoke score.<java.util.Iterator: boolean hasNext()>();

        if $stack67 == 0 goto label10;

        $stack69 = interfaceinvoke score.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack69;

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        score = virtualinvoke $r1.<org.ooc.frontend.model.ArrayAccess: int getOpScore(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,int,org.ooc.frontend.model.OpDecl)>(stack, res, assignIndex, op);

        if copy#10 >= score goto label09;

        ass#7 = op;

        copy#10 = score;

     label09:
        goto label08;

     label10:
        goto label07;

     label11:
        goto label14;

     label12:
        $stack84 := @caughtexception;

        if fatal == 0 goto label13;

        throw $stack84;

     label13:
        $stack85 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack85;

     label14:
        if ass#7 == null goto label19;

        $stack23 = virtualinvoke ass#7.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        response#33 = virtualinvoke $stack23.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $u1 = new org.ooc.frontend.model.FunctionCall;

        $stack26 = virtualinvoke ass#7.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $r2 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack27 = $r2.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u1.<org.ooc.frontend.model.FunctionCall: void <init>(org.ooc.frontend.model.FunctionDecl,org.ooc.frontend.model.tokens.Token)>($stack26, $stack27);

        $stack28 = virtualinvoke response#33.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        score#35 = (org.ooc.frontend.model.Argument) $stack28;

        $stack29 = virtualinvoke score#35.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack30 = virtualinvoke $stack29.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $r3 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack31 = $r3.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $stack32 = virtualinvoke $stack31.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack33 = virtualinvoke $stack32.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $stack34 = $stack33 + 1;

        if $stack30 != $stack34 goto label15;

        $u2 = new org.ooc.frontend.model.AddressOf;

        $r4 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack56 = $r4.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $r5 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack55 = $r5.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u2.<org.ooc.frontend.model.AddressOf: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($stack56, $stack55);

        $r6 = (org.ooc.frontend.model.ArrayAccess) this;

        $r7 = (org.ooc.frontend.model.Expression) $u2;

        $r6.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable> = $r7;

     label15:
        $stack35 = virtualinvoke $u1.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r8 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack36 = $r8.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $r9 = (org.ooc.frontend.model.Node) $stack36;

        virtualinvoke $stack35.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r9);

        $stack38 = virtualinvoke $u1.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r10 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack39 = $r10.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        virtualinvoke $stack38.<org.ooc.frontend.model.NodeList: void addAll(org.ooc.frontend.model.NodeList)>($stack39);

        if assignIndex == -1 goto label17;

        $stack43 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(assignIndex);

        op#36 = (org.ooc.frontend.model.Assignment) $stack43;

        $stack44 = virtualinvoke $u1.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $stack45 = virtualinvoke op#36.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.Expression getRight()>();

        $r11 = (org.ooc.frontend.model.Node) $stack45;

        virtualinvoke $stack44.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r11);

        $stack47 = assignIndex - 1;

        $stack48 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack47);

        $r12 = (org.ooc.frontend.model.Node) op#36;

        $r13 = (org.ooc.frontend.model.Node) $u1;

        $stack49 = virtualinvoke $stack48.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r12, $r13);

        if $stack49 != 0 goto label16;

        $stack50 = <java.lang.System: java.io.PrintStream out>;

        $stack51 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: java.lang.String toString(boolean)>(1);

        $stack52 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack51) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("stack = \u0001");

        virtualinvoke $stack50.<java.io.PrintStream: void println(java.lang.String)>($stack52);

        staticinvoke <java.lang.Thread: void dumpStack()>();

        $u3 = new org.ooc.middle.OocCompilationError;

        $r14 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u3.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r14, stack, "Couldn\'t replace array-access-assign with a function call");

        $r15 = (java.lang.Throwable) $u3;

        throw $r15;

     label16:
        goto label18;

     label17:
        $stack40 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r16 = (org.ooc.frontend.model.Node) this;

        $r17 = (org.ooc.frontend.model.Node) $u1;

        virtualinvoke $stack40.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r16, $r17);

     label18:
        $stack42 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack42;

     label19:
        $stack22 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack22;

        catch org.ooc.middle.OocCompilationError from label03 to label11 with label12;
    }

    private int getOpScore(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, int, org.ooc.frontend.model.OpDecl) throws org.ooc.middle.OocCompilationError
    {
        int assignIndex, $stack15, $stack17, numArgs, $stack21, $stack35, $stack37, $stack38, $stack58, $stack74, $stack81, score, idx, $stack40;
        org.ooc.frontend.model.OpDecl$OpType opType, $stack16, $stack20, $stack27, $stack28, $stack93;
        ArrayAccess this;
        org.ooc.frontend.model.NodeList $stack13, args, stack, $stack56, $stack39;
        org.ooc.frontend.model.OpDecl op;
        org.ooc.frontend.model.FunctionDecl $stack18, $stack78, $stack84;
        org.ooc.frontend.model.Node $stack22, $stack42, $stack43, $stack57, $stack59, $r2, $r4, $r10, $r12;
        org.ooc.frontend.model.Argument first, arg, idx#14;
        org.ooc.frontend.model.Type $stack23, $stack25, $stack29, $stack31, $stack34, $stack36, $stack45, $stack47, $stack48, $stack51, $stack52, $stack60, $stack61, $stack62, $stack66, $stack67;
        org.ooc.frontend.model.Expression $stack24, $stack30, $stack33, $stack44, $stack46, $stack50, $stack55, exp;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean $stack26, $stack32, $stack49, $stack53, $stack63, $stack68;
        java.lang.String $stack79, $stack80, $stack85, $stack86;
        byte $stack88;
        org.ooc.frontend.model.Assignment exp#15;
        org.ooc.middle.OocCompilationError $u0, $u1, $u2, $u3;
        org.ooc.frontend.model.ArrayAccess $r0, $r1, $r6, $r7, $r8, $r9;
        java.lang.Throwable $r3, $r5, $r11, $r13;

        this := @this: ArrayAccess;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        assignIndex := @parameter2: int;

        op := @parameter3: org.ooc.frontend.model.OpDecl;

        score = 0;

        if assignIndex != -1 goto label01;

        $stack93 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType IDX>;

        goto label02;

     label01:
        $stack93 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType IDX_ASS>;

     label02:
        opType = $stack93;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack13 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        $stack15 = virtualinvoke $stack13.<org.ooc.frontend.model.NodeList: int size()>();

        $stack17 = 1 + $stack15;

        $stack16 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType IDX>;

        if $stack93 != $stack16 goto label03;

        $stack88 = 0;

        goto label04;

     label03:
        $stack88 = 1;

     label04:
        numArgs = $stack17 + $stack88;

        $stack18 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        args = virtualinvoke $stack18.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $stack20 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.OpDecl$OpType getOpType()>();

        if $stack20 != opType goto label05;

        $stack21 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack21 == numArgs goto label06;

     label05:
        return 0;

     label06:
        $stack22 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        first = (org.ooc.frontend.model.Argument) $stack22;

        $stack23 = virtualinvoke first.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack24 = $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $stack25 = virtualinvoke $stack24.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack26 = virtualinvoke $stack23.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>($stack25, res);

        if $stack26 == 0 goto label16;

        $stack27 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType IDX>;

        if opType != $stack27 goto label07;

        $stack81 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack81 >= 2 goto label07;

        $u0 = new org.ooc.middle.OocCompilationError;

        $stack84 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack85 = virtualinvoke $stack84.<org.ooc.frontend.model.FunctionDecl: java.lang.String getArgsRepr()>();

        $stack86 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack85) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("To overload the indexing operator, you need at least two arguments, not \u0001");

        $r2 = (org.ooc.frontend.model.Node) op;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r2, stack, $stack86);

        $r3 = (java.lang.Throwable) $u0;

        throw $r3;

     label07:
        $stack28 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType IDX_ASS>;

        if opType != $stack28 goto label08;

        $stack74 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack74 >= 3 goto label08;

        $u1 = new org.ooc.middle.OocCompilationError;

        $stack78 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack79 = virtualinvoke $stack78.<org.ooc.frontend.model.FunctionDecl: java.lang.String getArgsRepr()>();

        $stack80 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack79) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("To overload the indexed assign operator, you need exactly three arguments, not \u0001");

        $r4 = (org.ooc.frontend.model.Node) op;

        specialinvoke $u1.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r4, stack, $stack80);

        $r5 = (java.lang.Throwable) $u1;

        throw $r5;

     label08:
        score = 0 + 10;

        $stack29 = virtualinvoke first.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r6 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack30 = $r6.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $stack31 = virtualinvoke $stack30.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack32 = virtualinvoke $stack29.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>($stack31);

        if $stack32 == 0 goto label09;

        score = score + 20;

     label09:
        $r7 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack33 = $r7.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $stack34 = virtualinvoke $stack33.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack35 = virtualinvoke $stack34.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $stack36 = virtualinvoke first.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack37 = virtualinvoke $stack36.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $stack38 = $stack37 + 1;

        if $stack35 != $stack38 goto label10;

        score = score + 10;

     label10:
        idx = 0;

     label11:
        $r8 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack39 = $r8.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        $stack40 = virtualinvoke $stack39.<org.ooc.frontend.model.NodeList: int size()>();

        if idx >= $stack40 goto label14;

        $r9 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack56 = $r9.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        $stack57 = virtualinvoke $stack56.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(idx);

        exp = (org.ooc.frontend.model.Expression) $stack57;

        $stack58 = idx + 1;

        $stack59 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack58);

        arg = (org.ooc.frontend.model.Argument) $stack59;

        $stack60 = virtualinvoke exp.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack60 != null goto label12;

        $u2 = new org.ooc.middle.OocCompilationError;

        $r10 = (org.ooc.frontend.model.Node) exp;

        specialinvoke $u2.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r10, stack, "Unable to determine the type of the expression being used as an index");

        $r11 = (java.lang.Throwable) $u2;

        throw $r11;

     label12:
        $stack61 = virtualinvoke exp.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack62 = virtualinvoke arg.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack63 = virtualinvoke $stack61.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>($stack62, res);

        if $stack63 == 0 goto label13;

        score = score + 10;

        $stack66 = virtualinvoke exp.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack67 = virtualinvoke arg.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack68 = virtualinvoke $stack66.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>($stack67);

        if $stack68 == 0 goto label13;

        score = score + 10;

     label13:
        idx = idx + 1;

        goto label11;

     label14:
        if assignIndex == -1 goto label16;

        $stack42 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getLast()>();

        idx#14 = (org.ooc.frontend.model.Argument) $stack42;

        $stack43 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(assignIndex);

        exp#15 = (org.ooc.frontend.model.Assignment) $stack43;

        $stack44 = virtualinvoke exp#15.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.Expression getRight()>();

        $stack45 = virtualinvoke $stack44.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack45 != null goto label15;

        $u3 = new org.ooc.middle.OocCompilationError;

        $stack55 = virtualinvoke exp#15.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.Expression getRight()>();

        $r12 = (org.ooc.frontend.model.Node) $stack55;

        specialinvoke $u3.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r12, stack, "Unable to determine the type of the expression being assigned");

        $r13 = (java.lang.Throwable) $u3;

        throw $r13;

     label15:
        $stack46 = virtualinvoke exp#15.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.Expression getRight()>();

        $stack47 = virtualinvoke $stack46.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack48 = virtualinvoke idx#14.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack49 = virtualinvoke $stack47.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>($stack48, res);

        if $stack49 == 0 goto label16;

        score = score + 10;

        $stack50 = virtualinvoke exp#15.<org.ooc.frontend.model.Assignment: org.ooc.frontend.model.Expression getRight()>();

        $stack51 = virtualinvoke $stack50.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack52 = virtualinvoke idx#14.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack53 = virtualinvoke $stack51.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>($stack52);

        if $stack53 == 0 goto label16;

        score = score + 20;

     label16:
        return score;
    }

    public java.lang.String toString()
    {
        ArrayAccess this;
        org.ooc.frontend.model.Expression $stack1;
        java.lang.String $stack2, $stack4;
        org.ooc.frontend.model.NodeList $stack3;
        org.ooc.frontend.model.ArrayAccess $r0, $r1;

        this := @this: ArrayAccess;

        $r0 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.Expression variable>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: java.lang.String toString()>();

        $r1 = (org.ooc.frontend.model.ArrayAccess) this;

        $stack3 = $r1.<org.ooc.frontend.model.ArrayAccess: org.ooc.frontend.model.NodeList indices>;

        $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,org.ooc.frontend.model.NodeList)>($stack2, $stack3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");

        return $stack4;
    }

    public boolean canBeReferenced()
    {
        ArrayAccess this;

        this := @this: ArrayAccess;

        return 1;
    }
}
