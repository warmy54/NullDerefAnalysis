public class ArrayLiteral extends org.ooc.frontend.model.Literal implements org.ooc.frontend.model.interfaces.MustBeUnwrapped
{
    private org.ooc.frontend.model.FunctionCall outerCall;
    private int outerArgIndex;
    private static org.ooc.frontend.model.Type defaultType;
    private org.ooc.frontend.model.Type innerType;
    private org.ooc.frontend.model.Type type;
    protected org.ooc.frontend.model.NodeList elements;

    public void <init>(org.ooc.frontend.model.tokens.Token)
    {
        ArrayLiteral this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Type $stack2;
        org.ooc.frontend.model.NodeList $u0;
        org.ooc.frontend.model.ArrayLiteral $r0, $r1, $r2, $r3, $r4;

        this := @this: ArrayLiteral;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Literal: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.FunctionCall outerCall> = null;

        $r1 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r1.<org.ooc.frontend.model.ArrayLiteral: int outerArgIndex> = -1;

        $r2 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r2.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType> = null;

        $stack2 = <org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type defaultType>;

        $r3 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r3.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type> = $stack2;

        $u0 = new org.ooc.frontend.model.NodeList;

        specialinvoke $u0.<org.ooc.frontend.model.NodeList: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r4 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r4.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements> = $u0;

        return;
    }

    public org.ooc.frontend.model.Expression getGenericOperand()
    {
        ArrayLiteral this;
        java.io.PrintStream $stack1;
        java.lang.String $stack2;
        org.ooc.frontend.model.Expression $stack3;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        $stack1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.ArrayLiteral)>($r0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should get genericOperand of arrlit \u0001");

        virtualinvoke $stack1.<java.io.PrintStream: void println(java.lang.String)>($stack2);

        $stack3 = specialinvoke this.<org.ooc.frontend.model.Literal: org.ooc.frontend.model.Expression getGenericOperand()>();

        return $stack3;
    }

    public int getDepth()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.NodeList $stack1, $stack3, $stack6;
        boolean $stack2, $stack5;
        org.ooc.frontend.model.Node $stack4, $stack8;
        org.ooc.frontend.model.ArrayLiteral $stack9, $r0, $r1, $r2;
        int $stack10, $stack11;

        this := @this: ArrayLiteral;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack2 != 0 goto label1;

        $r1 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack3 = $r1.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        $stack4 = virtualinvoke $stack3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        $stack5 = $stack4 instanceof org.ooc.frontend.model.ArrayLiteral;

        if $stack5 != 0 goto label2;

     label1:
        return 1;

     label2:
        $r2 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack6 = $r2.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        $stack8 = virtualinvoke $stack6.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        $stack9 = (org.ooc.frontend.model.ArrayLiteral) $stack8;

        $stack10 = virtualinvoke $stack9.<org.ooc.frontend.model.ArrayLiteral: int getDepth()>();

        $stack11 = 1 + $stack10;

        return $stack11;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        ArrayLiteral this;
        org.ooc.frontend.model.Type $stack3, $stack4, $stack5, $stack6;
        org.ooc.frontend.model.ArrayLiteral $r0, $r1, $r2, $r3;

        this := @this: ArrayLiteral;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack3 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        if oldie != $stack3 goto label1;

        $stack6 = (org.ooc.frontend.model.Type) kiddo;

        $r1 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r1.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type> = $stack6;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack4 = $r2.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        if oldie != $stack4 goto label2;

        $stack5 = (org.ooc.frontend.model.Type) kiddo;

        $r3 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r3.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType> = $stack5;

        return 1;

     label2:
        return 0;
    }

    public org.ooc.frontend.model.Type getType()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        return $stack1;
    }

    public org.ooc.frontend.model.Type getInnerType()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        return $stack1;
    }

    public org.ooc.frontend.model.NodeList getElements()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.NodeList $stack1;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        return $stack1;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        ArrayLiteral this;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.ArrayLiteral)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        ArrayLiteral this;
        org.ooc.frontend.model.Type $stack2, $stack4;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.NodeList $stack3;
        org.ooc.frontend.model.ArrayLiteral $r0, $r1, $r2;

        this := @this: ArrayLiteral;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack2 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        if $stack2 == null goto label1;

        $r1 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack4 = $r1.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        virtualinvoke $stack4.<org.ooc.frontend.model.Type: void accept(org.ooc.frontend.Visitor)>(visitor);

     label1:
        $r2 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack3 = $r2.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        virtualinvoke $stack3.<org.ooc.frontend.model.NodeList: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        ArrayLiteral this;

        this := @this: ArrayLiteral;

        return 1;
    }

    public boolean isResolved()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.Type $stack1, $stack2;
        boolean $stack3, $stack4;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack2 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        $stack1 = <org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type defaultType>;

        if $stack2 == $stack1 goto label1;

        $stack3 = specialinvoke this.<org.ooc.frontend.model.Literal: boolean isResolved()>();

        if $stack3 == 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        ArrayLiteral this;
        org.ooc.frontend.model.Type $stack10, $stack11, $stack16, $stack17, $stack27, $stack30, $stack33, $stack34, $stack39, $stack41, $stack43, $stack44, $stack46, $stack70, $stack71, $stack72, $stack76, $stack77, $stack81, $stack86, $stack96, $stack98, $stack100, $stack26, $stack15, $stack14, $u1, $u5;
        org.ooc.frontend.model.NodeList $stack12, stack, $stack21, $stack23, $stack40, $stack42, $stack92, $stack101;
        boolean $stack13, fatal, $stack28, $stack32, $stack73, $stack103;
        org.ooc.middle.hobgoblins.Resolver res;
        java.lang.String $stack22, $stack31, $stack78, $stack82, $stack97, $stack38;
        java.util.Iterator iter;
        org.ooc.frontend.model.FunctionCall $stack25, $stack90;
        int $stack35, $stack37, $stack88, $stack93, pointerLevel;
        org.ooc.frontend.model.tokens.Token $stack36, $stack99;
        java.lang.Object $stack69, $stack85, lit;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack79, $stack83, $stack105, $stack107, $stack18;
        org.ooc.frontend.model.Node $stack94, first, $r6, $r15, $r18, $r22, $r32, $r35, $r38;
        org.ooc.frontend.model.Argument arg;
        org.ooc.frontend.model.FunctionDecl impl;
        org.ooc.frontend.model.Expression impl#8;
        org.ooc.middle.OocCompilationError $u0, $u2, $u3, $u4, $u6;
        org.ooc.frontend.model.ArrayLiteral $r0, $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r20, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r36, $r37, $r40;
        java.lang.Throwable $r7, $r16, $r19, $r23, $r39;

        this := @this: ArrayLiteral;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack11 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        $stack10 = <org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type defaultType>;

        if $stack11 == $stack10 goto label01;

        $stack107 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack107;

     label01:
        $r1 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack12 = $r1.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        $stack13 = virtualinvoke $stack12.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack13 != 0 goto label18;

        $r2 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack23 = $r2.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        iter = virtualinvoke $stack23.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

        $r3 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack25 = $r3.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.FunctionCall outerCall>;

        if $stack25 == null goto label08;

        $r4 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack88 = $r4.<org.ooc.frontend.model.ArrayLiteral: int outerArgIndex>;

        if $stack88 == -1 goto label08;

        $r5 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack90 = $r5.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.FunctionCall outerCall>;

        impl = virtualinvoke $stack90.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.FunctionDecl getImpl()>();

        if impl != null goto label03;

        if fatal == 0 goto label02;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r6 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r6, stack, "Couldn\'t resolve type of an array literal because the function call it\'s in hasn\'t been resolved.");

        $r7 = (java.lang.Throwable) $u0;

        throw $r7;

     label02:
        $stack105 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack105;

     label03:
        $stack92 = virtualinvoke impl.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $r8 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack93 = $r8.<org.ooc.frontend.model.ArrayLiteral: int outerArgIndex>;

        $stack94 = virtualinvoke $stack92.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack93);

        arg = (org.ooc.frontend.model.Argument) $stack94;

        lit = this;

        pointerLevel = 0;

     label04:
        if lit == null goto label07;

        $r9 = (org.ooc.frontend.model.ArrayLiteral) lit;

        $stack101 = virtualinvoke $r9.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList getElements()>();

        first = virtualinvoke $stack101.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        $stack103 = first instanceof org.ooc.frontend.model.ArrayLiteral;

        if $stack103 == 0 goto label05;

        lit = (org.ooc.frontend.model.ArrayLiteral) first;

        pointerLevel = pointerLevel + 1;

        goto label06;

     label05:
        lit = null;

     label06:
        goto label04;

     label07:
        $u1 = new org.ooc.frontend.model.Type;

        $stack96 = virtualinvoke arg.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack97 = virtualinvoke $stack96.<org.ooc.frontend.model.Type: java.lang.String getName()>();

        $stack98 = virtualinvoke arg.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack99 = $stack98.<org.ooc.frontend.model.Type: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u1.<org.ooc.frontend.model.Type: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>($stack97, $stack99);

        $r10 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r10.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType> = $u1;

        $r11 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack100 = $r11.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        virtualinvoke $stack100.<org.ooc.frontend.model.Type: void setPointerLevel(int)>(pointerLevel);

     label08:
        $r12 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack26 = $r12.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        if $stack26 != null goto label09;

        $stack85 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        impl#8 = (org.ooc.frontend.model.Expression) $stack85;

        $stack86 = virtualinvoke impl#8.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r13 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r13.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType> = $stack86;

     label09:
        $r14 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack27 = $r14.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        if $stack27 != null goto label11;

        if fatal == 0 goto label10;

        $u2 = new org.ooc.middle.OocCompilationError;

        $r15 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u2.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r15, stack, "Couldn\'t resolve type of an array literal");

        $r16 = (java.lang.Throwable) $u2;

        throw $r16;

     label10:
        $stack83 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack83;

     label11:
        $stack28 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label15;

        $stack69 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        impl#8 = (org.ooc.frontend.model.Expression) $stack69;

        $stack70 = virtualinvoke impl#8.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack70 != null goto label13;

        if fatal == 0 goto label12;

        $u3 = new org.ooc.middle.OocCompilationError;

        $r17 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack81 = $r17.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack82 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression,org.ooc.frontend.model.Type)>(impl#8, $stack81) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Couldn\'t resolve type of \u0001 in an \u0001 array literal");

        $r18 = (org.ooc.frontend.model.Node) impl#8;

        specialinvoke $u3.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r18, stack, $stack82);

        $r19 = (java.lang.Throwable) $u3;

        throw $r19;

     label12:
        $stack79 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack79;

     label13:
        $stack71 = virtualinvoke impl#8.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r20 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack72 = $r20.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack73 = virtualinvoke $stack71.<org.ooc.frontend.model.Type: boolean fitsIn(org.ooc.frontend.model.Type)>($stack72);

        if $stack73 != 0 goto label14;

        $u4 = new org.ooc.middle.OocCompilationError;

        $stack76 = virtualinvoke impl#8.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r21 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack77 = $r21.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack78 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Type,org.ooc.frontend.model.Type)>($stack76, $stack77) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Encountered a \u0001 in a \u0001[] array literal.");

        $r22 = (org.ooc.frontend.model.Node) impl#8;

        specialinvoke $u4.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r22, stack, $stack78);

        $r23 = (java.lang.Throwable) $u4;

        throw $r23;

     label14:
        goto label11;

     label15:
        $u5 = new org.ooc.frontend.model.Type;

        $r24 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack30 = $r24.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack31 = $stack30.<org.ooc.frontend.model.Type: java.lang.String name>;

        $stack32 = virtualinvoke $stack31.<java.lang.String: boolean equals(java.lang.Object)>("Func");

        if $stack32 == 0 goto label16;

        $stack38 = "Pointer";

        goto label17;

     label16:
        $r25 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack33 = $r25.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack38 = $stack33.<org.ooc.frontend.model.Type: java.lang.String name>;

     label17:
        $r26 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack34 = $r26.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack35 = $stack34.<org.ooc.frontend.model.Type: int pointerLevel>;

        $stack37 = $stack35 + 1;

        $r27 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack36 = $r27.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u5.<org.ooc.frontend.model.Type: void <init>(java.lang.String,int,org.ooc.frontend.model.tokens.Token)>($stack38, $stack37, $stack36);

        $r28 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r28.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type> = $u5;

        $r29 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack39 = $r29.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        $stack40 = virtualinvoke $stack39.<org.ooc.frontend.model.Type: org.ooc.frontend.model.NodeList getTypeParams()>();

        $r30 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack41 = $r30.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        $stack42 = virtualinvoke $stack41.<org.ooc.frontend.model.Type: org.ooc.frontend.model.NodeList getTypeParams()>();

        virtualinvoke $stack40.<org.ooc.frontend.model.NodeList: void addAll(org.ooc.frontend.model.NodeList)>($stack42);

        $r31 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack43 = $r31.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        virtualinvoke $stack43.<org.ooc.frontend.model.Type: void setArray(boolean)>(1);

        $r32 = (org.ooc.frontend.model.Node) this;

        virtualinvoke stack.<org.ooc.frontend.model.NodeList: void push(org.ooc.frontend.model.Node)>($r32);

        $r33 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack44 = $r33.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        virtualinvoke $stack44.<org.ooc.frontend.model.Type: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

        $r34 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack46 = $r34.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type innerType>;

        virtualinvoke $stack46.<org.ooc.frontend.model.Type: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

        $r35 = (org.ooc.frontend.model.Node) this;

        virtualinvoke stack.<org.ooc.frontend.model.NodeList: void pop(org.ooc.frontend.model.Node)>($r35);

     label18:
        $r36 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack15 = $r36.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        $stack14 = <org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type defaultType>;

        if $stack15 != $stack14 goto label19;

        if fatal == 0 goto label19;

        $u6 = new org.ooc.middle.OocCompilationError;

        $r37 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack21 = $r37.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        $stack22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.NodeList)>($stack21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Couldn\'t figure out type of ArrayLiteral with elements \u0001");

        $r38 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u6.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r38, stack, $stack22);

        $r39 = (java.lang.Throwable) $u6;

        throw $r39;

     label19:
        $r40 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack17 = $r40.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type type>;

        $stack16 = <org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type defaultType>;

        if $stack17 != $stack16 goto label20;

        $stack18 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        goto label21;

     label20:
        $stack18 = specialinvoke this.<org.ooc.frontend.model.Literal: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

     label21:
        return $stack18;
    }

    public boolean unwrap(org.ooc.frontend.model.NodeList) throws java.io.IOException
    {
        ArrayLiteral this;
        org.ooc.frontend.model.FunctionCall $stack5, $stack35;
        org.ooc.frontend.model.NodeList stack, $stack38;
        int litIndex, callIndex, $stack22, $stack23, $stack50, $stack36, $stack39, lit#42;
        org.ooc.frontend.model.Node $stack10, $stack12, $stack15, $stack49, $stack34, $stack37, $stack8, $r3, $r8, $r9;
        boolean $stack11, $stack13, $stack9;
        java.lang.String $stack18;
        org.ooc.frontend.model.tokens.Token $stack19;
        org.ooc.frontend.model.Module $stack20;
        java.lang.Object lit;
        org.ooc.frontend.model.VariableDecl $u0;
        org.ooc.frontend.model.ArrayLiteral $r0, $r1, $r2, $r4, $r5, $r6;
        org.ooc.frontend.model.Expression $r7;

        this := @this: ArrayLiteral;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack5 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.FunctionCall outerCall>;

        if $stack5 == null goto label1;

        $r1 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack50 = $r1.<org.ooc.frontend.model.ArrayLiteral: int outerArgIndex>;

        if $stack50 != -1 goto label3;

     label1:
        lit = this;

        litIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/ArrayLiteral;");

        callIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/FunctionCall;");

        if callIndex == -1 goto label3;

        if litIndex == -1 goto label2;

        if litIndex <= callIndex goto label2;

        $stack49 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(litIndex);

        lit = (org.ooc.frontend.model.ArrayLiteral) $stack49;

     label2:
        $stack34 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(callIndex);

        $stack35 = (org.ooc.frontend.model.FunctionCall) $stack34;

        $r2 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r2.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.FunctionCall outerCall> = $stack35;

        $stack36 = callIndex + 1;

        $stack37 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack36);

        $stack38 = (org.ooc.frontend.model.NodeList) $stack37;

        $r3 = (org.ooc.frontend.model.Node) lit;

        $stack39 = virtualinvoke $stack38.<org.ooc.frontend.model.NodeList: int indexOf(org.ooc.frontend.model.Node)>($r3);

        $r4 = (org.ooc.frontend.model.ArrayLiteral) this;

        $r4.<org.ooc.frontend.model.ArrayLiteral: int outerArgIndex> = $stack39;

     label3:
        $stack8 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $stack9 = $stack8 instanceof org.ooc.frontend.model.Cast;

        if $stack9 != 0 goto label4;

        $stack10 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $stack11 = $stack10 instanceof org.ooc.frontend.model.Foreach;

        if $stack11 == 0 goto label5;

     label4:
        return 0;

     label5:
        $stack12 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek(int)>(2);

        $stack13 = $stack12 instanceof org.ooc.frontend.model.ArrayLiteral;

        if $stack13 == 0 goto label6;

        return 0;

     label6:
        lit#42 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/VariableDecl;");

        if lit#42 == -1 goto label7;

        $stack22 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int size()>();

        $stack23 = $stack22 - lit#42;

        if $stack23 <= 3 goto label8;

     label7:
        $stack15 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $u0 = new org.ooc.frontend.model.VariableDecl;

        $r5 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack18 = virtualinvoke $r5.<org.ooc.frontend.model.ArrayLiteral: java.lang.String generateTempName(java.lang.String,org.ooc.frontend.model.NodeList)>("array", stack);

        $r6 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack19 = $r6.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.tokens.Token startToken>;

        $stack20 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Module getModule()>();

        $r7 = (org.ooc.frontend.model.Expression) this;

        specialinvoke $u0.<org.ooc.frontend.model.VariableDecl: void <init>(org.ooc.frontend.model.Type,java.lang.String,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token,org.ooc.frontend.model.Module)>(null, $stack18, $r7, $stack19, $stack20);

        $r8 = (org.ooc.frontend.model.Node) this;

        $r9 = (org.ooc.frontend.model.Node) $u0;

        virtualinvoke $stack15.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r8, $r9);

        return 1;

     label8:
        return 0;
    }

    public java.lang.String toString()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.NodeList $stack7;
        java.util.Iterator l3;
        boolean $stack9, isFirst;
        java.lang.String $stack11, $stack14;
        java.lang.Object $stack12;
        org.ooc.frontend.model.Statement element;
        java.lang.StringBuilder $u0;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        isFirst = 1;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack7 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        l3 = virtualinvoke $stack7.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        element = (org.ooc.frontend.model.Statement) $stack12;

        if isFirst == 0 goto label2;

        isFirst = 0;

        goto label3;

     label2:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $stack14 = virtualinvoke element.<org.ooc.frontend.model.Statement: java.lang.String toString()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        goto label1;

     label4:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack11;
    }

    public boolean isConstant()
    {
        ArrayLiteral this;
        org.ooc.frontend.model.NodeList $stack4;
        java.util.Iterator l2;
        boolean $stack6, $stack8, isConstant;
        java.lang.Object $stack7;
        org.ooc.frontend.model.Expression element;
        org.ooc.frontend.model.ArrayLiteral $r0;

        this := @this: ArrayLiteral;

        isConstant = 1;

        $r0 = (org.ooc.frontend.model.ArrayLiteral) this;

        $stack4 = $r0.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList elements>;

        l2 = virtualinvoke $stack4.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        element = (org.ooc.frontend.model.Expression) $stack7;

        $stack8 = virtualinvoke element.<org.ooc.frontend.model.Expression: boolean isConstant()>();

        if $stack8 != 0 goto label2;

        isConstant = 0;

        goto label3;

     label2:
        goto label1;

     label3:
        return isConstant;
    }

    static void <clinit>()
    {
        <org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type defaultType> = null;

        return;
    }
}
