public class ArtifactDescriptorReaderDelegate extends java.lang.Object
{

    public void <init>()
    {
        ArtifactDescriptorReaderDelegate this;

        this := @this: ArtifactDescriptorReaderDelegate;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void populateResult(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.ArtifactDescriptorResult, org.apache.maven.model.Model)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.artifact.ArtifactTypeRegistry stereotypes;
        org.apache.maven.model.Model model;
        java.util.List $stack12, $stack15, licenses, $stack66;
        boolean $stack14, $stack17, $stack68;
        int $stack23, i, $stack26;
        java.lang.Integer $stack24;
        org.eclipse.aether.resolution.ArtifactDescriptorResult result;
        ArtifactDescriptorReaderDelegate this;
        java.lang.Object $stack28, $stack71, $stack75, $stack79;
        org.apache.maven.model.License license;
        java.lang.StringBuilder $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack44, $stack45, $stack46, $stack51, $stack52, $stack53, $u1, $u2, $u3, $u4;
        java.lang.String $stack33, $stack34, $stack40, $stack41, $stack47, $stack48, $stack54, $stack55, $stack60;
        org.eclipse.aether.graph.Dependency $stack72, $stack76;
        org.eclipse.aether.repository.RemoteRepository $stack80;
        java.util.Iterator mgmt, r#6;
        org.apache.maven.model.Repository r;
        org.apache.maven.model.Dependency r#4, dependency;
        org.apache.maven.model.DependencyManagement mgmt#5;
        org.apache.maven.model.Prerequisites dependency#9;
        java.util.LinkedHashMap $u0;
        org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate $r0, $r1, $r2;

        this := @this: ArtifactDescriptorReaderDelegate;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        result := @parameter1: org.eclipse.aether.resolution.ArtifactDescriptorResult;

        model := @parameter2: org.apache.maven.model.Model;

        stereotypes = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.artifact.ArtifactTypeRegistry getArtifactTypeRegistry()>();

        $stack12 = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getRepositories()>();

        mgmt = interfaceinvoke $stack12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke mgmt.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label2;

        $stack79 = interfaceinvoke mgmt.<java.util.Iterator: java.lang.Object next()>();

        r = (org.apache.maven.model.Repository) $stack79;

        $stack80 = staticinvoke <org.apache.maven.repository.internal.ArtifactDescriptorUtils: org.eclipse.aether.repository.RemoteRepository toRemoteRepository(org.apache.maven.model.Repository)>(r);

        virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: org.eclipse.aether.resolution.ArtifactDescriptorResult addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack80);

        goto label1;

     label2:
        $stack15 = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getDependencies()>();

        mgmt = interfaceinvoke $stack15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack17 = interfaceinvoke mgmt.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label4;

        $stack75 = interfaceinvoke mgmt.<java.util.Iterator: java.lang.Object next()>();

        r#4 = (org.apache.maven.model.Dependency) $stack75;

        $r0 = (org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate) this;

        $stack76 = specialinvoke $r0.<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: org.eclipse.aether.graph.Dependency convert(org.apache.maven.model.Dependency,org.eclipse.aether.artifact.ArtifactTypeRegistry)>(r#4, stereotypes);

        virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: org.eclipse.aether.resolution.ArtifactDescriptorResult addDependency(org.eclipse.aether.graph.Dependency)>($stack76);

        goto label3;

     label4:
        mgmt#5 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.DependencyManagement getDependencyManagement()>();

        if mgmt#5 == null goto label6;

        $stack66 = virtualinvoke mgmt#5.<org.apache.maven.model.DependencyManagement: java.util.List getDependencies()>();

        r#6 = interfaceinvoke $stack66.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack68 = interfaceinvoke r#6.<java.util.Iterator: boolean hasNext()>();

        if $stack68 == 0 goto label6;

        $stack71 = interfaceinvoke r#6.<java.util.Iterator: java.lang.Object next()>();

        dependency = (org.apache.maven.model.Dependency) $stack71;

        $r1 = (org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate) this;

        $stack72 = specialinvoke $r1.<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: org.eclipse.aether.graph.Dependency convert(org.apache.maven.model.Dependency,org.eclipse.aether.artifact.ArtifactTypeRegistry)>(dependency, stereotypes);

        virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: org.eclipse.aether.resolution.ArtifactDescriptorResult addManagedDependency(org.eclipse.aether.graph.Dependency)>($stack72);

        goto label5;

     label6:
        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        dependency#9 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Prerequisites getPrerequisites()>();

        if dependency#9 == null goto label7;

        $stack60 = virtualinvoke dependency#9.<org.apache.maven.model.Prerequisites: java.lang.String getMaven()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("prerequisites.maven", $stack60);

     label7:
        licenses = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getLicenses()>();

        $stack23 = interfaceinvoke licenses.<java.util.List: int size()>();

        $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23);

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("license.count", $stack24);

        i = 0;

     label8:
        $stack26 = interfaceinvoke licenses.<java.util.List: int size()>();

        if i >= $stack26 goto label9;

        $stack28 = interfaceinvoke licenses.<java.util.List: java.lang.Object get(int)>(i);

        license = (org.apache.maven.model.License) $stack28;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("license.");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".name");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = virtualinvoke license.<org.apache.maven.model.License: java.lang.String getName()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack33, $stack34);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("license.");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".url");

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack41 = virtualinvoke license.<org.apache.maven.model.License: java.lang.String getUrl()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack40, $stack41);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("license.");

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".comments");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack48 = virtualinvoke license.<org.apache.maven.model.License: java.lang.String getComments()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack47, $stack48);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack51 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("license.");

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".distribution");

        $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack55 = virtualinvoke license.<org.apache.maven.model.License: java.lang.String getDistribution()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack54, $stack55);

        i = i + 1;

        goto label8;

     label9:
        virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: org.eclipse.aether.resolution.ArtifactDescriptorResult setProperties(java.util.Map)>($u0);

        $r2 = (org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate) this;

        specialinvoke $r2.<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: void setArtifactProperties(org.eclipse.aether.resolution.ArtifactDescriptorResult,org.apache.maven.model.Model)>(result, model);

        return;
    }

    private org.eclipse.aether.graph.Dependency convert(org.apache.maven.model.Dependency, org.eclipse.aether.artifact.ArtifactTypeRegistry)
    {
        org.eclipse.aether.artifact.ArtifactTypeRegistry stereotypes;
        org.apache.maven.model.Dependency dependency;
        java.lang.String $stack10, $stack12, $stack14, $stack15, $stack16, $stack18, $stack26, $stack27, $stack38, $stack48, $stack54;
        java.util.List $stack20, $stack22;
        int $stack21, $stack49;
        boolean $stack28, $stack50, $stack24;
        java.lang.Object $stack33, stereotype;
        org.apache.maven.model.Exclusion exclusion;
        ArtifactDescriptorReaderDelegate this;
        org.eclipse.aether.graph.Exclusion $stack34;
        java.util.Map props;
        java.util.Iterator result;
        java.lang.Boolean $stack29;
        org.eclipse.aether.artifact.DefaultArtifactType $u0;
        org.eclipse.aether.artifact.DefaultArtifact $u1;
        java.util.ArrayList $u2;
        org.eclipse.aether.graph.Dependency $u3;
        org.eclipse.aether.artifact.ArtifactType $r0;
        org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate $r1;
        org.eclipse.aether.artifact.Artifact $r2;

        this := @this: ArtifactDescriptorReaderDelegate;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        stereotypes := @parameter1: org.eclipse.aether.artifact.ArtifactTypeRegistry;

        $stack10 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        stereotype = interfaceinvoke stereotypes.<org.eclipse.aether.artifact.ArtifactTypeRegistry: org.eclipse.aether.artifact.ArtifactType get(java.lang.String)>($stack10);

        if stereotype != null goto label1;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifactType;

        $stack54 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifactType: void <init>(java.lang.String)>($stack54);

        stereotype = $u0;

     label1:
        $stack12 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        if $stack12 == null goto label2;

        $stack48 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        $stack49 = virtualinvoke $stack48.<java.lang.String: int length()>();

        if $stack49 <= 0 goto label2;

        $stack50 = 1;

        goto label3;

     label2:
        $stack50 = 0;

     label3:
        props = null;

        if $stack50 == 0 goto label4;

        $stack38 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        props = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("localPath", $stack38);

     label4:
        $u1 = new org.eclipse.aether.artifact.DefaultArtifact;

        $stack14 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack15 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack16 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getClassifier()>();

        $stack18 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        $r0 = (org.eclipse.aether.artifact.ArtifactType) stereotype;

        specialinvoke $u1.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.eclipse.aether.artifact.ArtifactType)>($stack14, $stack15, $stack16, null, $stack18, props, $r0);

        $u2 = new java.util.ArrayList;

        $stack20 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        $stack21 = interfaceinvoke $stack20.<java.util.List: int size()>();

        specialinvoke $u2.<java.util.ArrayList: void <init>(int)>($stack21);

        $stack22 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        result = interfaceinvoke $stack22.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack24 = interfaceinvoke result.<java.util.Iterator: boolean hasNext()>();

        if $stack24 == 0 goto label6;

        $stack33 = interfaceinvoke result.<java.util.Iterator: java.lang.Object next()>();

        exclusion = (org.apache.maven.model.Exclusion) $stack33;

        $r1 = (org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate) this;

        $stack34 = specialinvoke $r1.<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: org.eclipse.aether.graph.Exclusion convert(org.apache.maven.model.Exclusion)>(exclusion);

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>($stack34);

        goto label5;

     label6:
        $u3 = new org.eclipse.aether.graph.Dependency;

        $stack26 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack27 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getOptional()>();

        if $stack27 == null goto label7;

        $stack28 = virtualinvoke dependency.<org.apache.maven.model.Dependency: boolean isOptional()>();

        $stack29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack28);

        goto label8;

     label7:
        $stack29 = null;

     label8:
        $r2 = (org.eclipse.aether.artifact.Artifact) $u1;

        specialinvoke $u3.<org.eclipse.aether.graph.Dependency: void <init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean,java.util.Collection)>($r2, $stack26, $stack29, $u2);

        return $u3;
    }

    private org.eclipse.aether.graph.Exclusion convert(org.apache.maven.model.Exclusion)
    {
        org.eclipse.aether.graph.Exclusion $stack2;
        org.apache.maven.model.Exclusion exclusion;
        java.lang.String $stack3, $stack4;
        ArtifactDescriptorReaderDelegate this;

        this := @this: ArtifactDescriptorReaderDelegate;

        exclusion := @parameter0: org.apache.maven.model.Exclusion;

        $stack2 = new org.eclipse.aether.graph.Exclusion;

        $stack3 = virtualinvoke exclusion.<org.apache.maven.model.Exclusion: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke exclusion.<org.apache.maven.model.Exclusion: java.lang.String getArtifactId()>();

        specialinvoke $stack2.<org.eclipse.aether.graph.Exclusion: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($stack3, $stack4, "*", "*");

        return $stack2;
    }

    private void setArtifactProperties(org.eclipse.aether.resolution.ArtifactDescriptorResult, org.apache.maven.model.Model)
    {
        org.apache.maven.model.Model model;
        org.apache.maven.model.DistributionManagement distMgmt;
        int $stack8;
        org.eclipse.aether.resolution.ArtifactDescriptorResult result;
        org.eclipse.aether.artifact.Artifact artifact, $stack13;
        java.util.HashMap $stack10;
        java.util.Map $stack11;
        ArtifactDescriptorReaderDelegate this;
        java.lang.String downloadUrl;

        this := @this: ArtifactDescriptorReaderDelegate;

        result := @parameter0: org.eclipse.aether.resolution.ArtifactDescriptorResult;

        model := @parameter1: org.apache.maven.model.Model;

        downloadUrl = null;

        distMgmt = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        if distMgmt == null goto label1;

        downloadUrl = virtualinvoke distMgmt.<org.apache.maven.model.DistributionManagement: java.lang.String getDownloadUrl()>();

     label1:
        if downloadUrl == null goto label2;

        $stack8 = virtualinvoke downloadUrl.<java.lang.String: int length()>();

        if $stack8 <= 0 goto label2;

        artifact = virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack10 = new java.util.HashMap;

        $stack11 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.util.Map getProperties()>();

        specialinvoke $stack10.<java.util.HashMap: void <init>(java.util.Map)>($stack11);

        interfaceinvoke $stack10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("downloadUrl", downloadUrl);

        $stack13 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: org.eclipse.aether.artifact.Artifact setProperties(java.util.Map)>($stack10);

        virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: org.eclipse.aether.resolution.ArtifactDescriptorResult setArtifact(org.eclipse.aether.artifact.Artifact)>($stack13);

     label2:
        return;
    }
}
