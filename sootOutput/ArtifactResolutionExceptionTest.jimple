public class ArtifactResolutionExceptionTest extends java.lang.Object
{
    private static final java.lang.String LS;

    public void <init>()
    {
        ArtifactResolutionExceptionTest this;

        this := @this: ArtifactResolutionExceptionTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testMissingArtifactMessageFormat()
    {
        java.lang.String[] $stack12;
        java.util.List path;
        java.lang.StringBuilder $stack14, $stack15, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack27, $stack28, $stack30, $stack31, $stack33, $stack35, $stack36, $stack38, $stack39, $stack41, $stack43, $stack44, $stack46, $stack47, $stack49, $stack50, $stack52, $stack54;
        java.lang.String $stack16, $stack18, $stack21, $stack24, $stack26, $stack29, $stack32, $stack34, $stack37, $stack40, $stack42, $stack45, $stack48, $stack51, $stack53, expected, actual;
        ArtifactResolutionExceptionTest this;

        this := @this: ArtifactResolutionExceptionTest;

        $stack12 = newarray (java.lang.String)[2];

        $stack12[0] = "dependency1";

        $stack12[1] = "dependency2";

        path = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack12);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing artifact");

        $stack16 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Try downloading the file manually from: ");

        $stack21 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      http://somewhere.com/download");

        $stack24 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack27 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Then, install it using the command: ");

        $stack29 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack30 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      mvn install:install-file -DgroupId=aGroupId -DartifactId=anArtifactId -Dversion=aVersion -Dclassifier=aClassifier -Dpackaging=jar -Dfile=/path/to/file");

        $stack32 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack33 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack32);

        $stack34 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack35 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Alternatively, if you host your own repository you can deploy the file there: ");

        $stack37 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack38 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack37);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      mvn deploy:deploy-file -DgroupId=aGroupId -DartifactId=anArtifactId -Dversion=aVersion -Dclassifier=aClassifier -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]");

        $stack40 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack41 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40);

        $stack42 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack43 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Path to dependency: ");

        $stack45 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack46 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack45);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  \t1) dependency1");

        $stack48 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack49 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack48);

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  \t2) dependency2");

        $stack51 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack52 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack51);

        $stack53 = <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS>;

        $stack54 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack53);

        expected = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.String toString()>();

        actual = staticinvoke <org.apache.maven.artifact.resolver.AbstractArtifactResolutionException: java.lang.String constructMissingArtifactMessage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>("Missing artifact", "  ", "aGroupId", "anArtifactId", "aVersion", "jar", "aClassifier", "http://somewhere.com/download", path);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expected, actual);

        return;
    }

    static void <clinit>()
    {
        java.lang.String $stack0;

        $stack0 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        <org.apache.maven.artifact.resolver.ArtifactResolutionExceptionTest: java.lang.String LS> = $stack0;

        return;
    }
}
