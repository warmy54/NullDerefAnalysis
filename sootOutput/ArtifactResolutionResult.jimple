public class ArtifactResolutionResult extends java.lang.Object
{
    private static final java.lang.String LS;
    private org.apache.maven.artifact.Artifact originatingArtifact;
    private java.util.List missingArtifacts;
    private java.util.List exceptions;
    private java.util.List versionRangeViolations;
    private java.util.List metadataResolutionExceptions;
    private java.util.List circularDependencyExceptions;
    private java.util.List errorArtifactExceptions;
    private java.util.List repositories;
    private java.util.Set artifacts;
    private java.util.Set resolutionNodes;

    public void <init>()
    {
        ArtifactResolutionResult this;

        this := @this: ArtifactResolutionResult;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.artifact.Artifact getOriginatingArtifact()
    {
        ArtifactResolutionResult this;
        org.apache.maven.artifact.Artifact $stack1;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.Artifact originatingArtifact>;

        return $stack1;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult setOriginatingArtifact(org.apache.maven.artifact.Artifact)
    {
        ArtifactResolutionResult this;
        org.apache.maven.artifact.Artifact originatingArtifact;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        originatingArtifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.Artifact originatingArtifact> = originatingArtifact;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r1;
    }

    public void addArtifact(org.apache.maven.artifact.Artifact)
    {
        ArtifactResolutionResult this;
        java.util.Set $stack2, $stack3;
        org.apache.maven.artifact.Artifact artifact;
        java.util.LinkedHashSet $u0;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2;

        this := @this: ArtifactResolutionResult;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        if $stack2 != null goto label1;

        $u0 = new java.util.LinkedHashSet;

        specialinvoke $u0.<java.util.LinkedHashSet: void <init>()>();

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts> = $u0;

     label1:
        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack3 = $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        interfaceinvoke $stack3.<java.util.Set: boolean add(java.lang.Object)>(artifact);

        return;
    }

    public java.util.Set getArtifacts()
    {
        ArtifactResolutionResult this;
        java.util.Set $stack1, $stack2;
        java.util.LinkedHashSet $u0;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        if $stack1 != null goto label1;

        $u0 = new java.util.LinkedHashSet;

        specialinvoke $u0.<java.util.LinkedHashSet: void <init>()>();

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts> = $u0;

     label1:
        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        return $stack2;
    }

    public void setArtifacts(java.util.Set)
    {
        ArtifactResolutionResult this;
        java.util.Set artifacts;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        artifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts> = artifacts;

        return;
    }

    public java.util.Set getArtifactResolutionNodes()
    {
        ArtifactResolutionResult this;
        java.util.Set $stack1, $stack2;
        java.util.LinkedHashSet $u0;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set resolutionNodes>;

        if $stack1 != null goto label1;

        $u0 = new java.util.LinkedHashSet;

        specialinvoke $u0.<java.util.LinkedHashSet: void <init>()>();

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set resolutionNodes> = $u0;

     label1:
        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set resolutionNodes>;

        return $stack2;
    }

    public void setArtifactResolutionNodes(java.util.Set)
    {
        ArtifactResolutionResult this;
        java.util.Set resolutionNodes;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        resolutionNodes := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set resolutionNodes> = resolutionNodes;

        return;
    }

    public boolean hasMissingArtifacts()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2;
        boolean $stack3, $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public java.util.List getMissingArtifacts()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts>;

        if $stack1 != null goto label1;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

     label2:
        return $stack3;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult addMissingArtifact(org.apache.maven.artifact.Artifact)
    {
        ArtifactResolutionResult this;
        java.util.List $stack2, $stack3, $stack4;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2, $r3, $r4;

        this := @this: ArtifactResolutionResult;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts>;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack2);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts> = $stack3;

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack4 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts>;

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(artifact);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r4;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult setUnresolvedArtifacts(java.util.List)
    {
        ArtifactResolutionResult this;
        java.util.List unresolvedArtifacts;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        unresolvedArtifacts := @parameter0: java.util.List;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List missingArtifacts> = unresolvedArtifacts;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r1;
    }

    public boolean isSuccess()
    {
        ArtifactResolutionResult this;
        boolean $stack1, $stack2, $stack3;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasMissingArtifacts()>();

        if $stack1 != 0 goto label1;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasExceptions()>();

        if $stack2 != 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public boolean hasExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2;
        boolean $stack3, $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public java.util.List getExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        if $stack1 != null goto label1;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

     label2:
        return $stack3;
    }

    public boolean hasVersionRangeViolations()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1;
        boolean $stack2;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult addVersionRangeViolation(java.lang.Exception)
    {
        ArtifactResolutionResult this;
        java.util.List $stack2, $stack3, $stack4, $stack6, $stack7, $stack8;
        java.lang.Exception e;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: ArtifactResolutionResult;

        e := @parameter0: java.lang.Exception;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations>;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack2);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations> = $stack3;

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack4 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations>;

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(e);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack6 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack7 = specialinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack6);

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r6.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions> = $stack7;

        $r7 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack8 = $r7.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(e);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r8;
    }

    public org.apache.maven.artifact.versioning.OverConstrainedVersionException getVersionRangeViolation(int)
    {
        ArtifactResolutionResult this;
        int i;
        java.util.List $stack2;
        java.lang.Object $stack3;
        org.apache.maven.artifact.versioning.OverConstrainedVersionException $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        i := @parameter0: int;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(i);

        $stack4 = (org.apache.maven.artifact.versioning.OverConstrainedVersionException) $stack3;

        return $stack4;
    }

    public java.util.List getVersionRangeViolations()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations>;

        if $stack1 != null goto label1;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List versionRangeViolations>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

     label2:
        return $stack3;
    }

    public boolean hasMetadataResolutionExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1;
        boolean $stack2;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult addMetadataResolutionException(org.apache.maven.artifact.resolver.ArtifactResolutionException)
    {
        ArtifactResolutionResult this;
        java.util.List $stack2, $stack3, $stack4, $stack6, $stack7, $stack8;
        org.apache.maven.artifact.resolver.ArtifactResolutionException e;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: ArtifactResolutionResult;

        e := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionException;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions>;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack2);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions> = $stack3;

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack4 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions>;

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(e);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack6 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack7 = specialinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack6);

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r6.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions> = $stack7;

        $r7 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack8 = $r7.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(e);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r8;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionException getMetadataResolutionException(int)
    {
        ArtifactResolutionResult this;
        int i;
        java.util.List $stack2;
        java.lang.Object $stack3;
        org.apache.maven.artifact.resolver.ArtifactResolutionException $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        i := @parameter0: int;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(i);

        $stack4 = (org.apache.maven.artifact.resolver.ArtifactResolutionException) $stack3;

        return $stack4;
    }

    public java.util.List getMetadataResolutionExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions>;

        if $stack1 != null goto label1;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List metadataResolutionExceptions>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

     label2:
        return $stack3;
    }

    public boolean hasErrorArtifactExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1;
        boolean $stack2;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List errorArtifactExceptions>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult addErrorArtifactException(org.apache.maven.artifact.resolver.ArtifactResolutionException)
    {
        ArtifactResolutionResult this;
        java.util.List $stack2, $stack3, $stack4, $stack6, $stack7, $stack8;
        org.apache.maven.artifact.resolver.ArtifactResolutionException e;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: ArtifactResolutionResult;

        e := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionException;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List errorArtifactExceptions>;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack2);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List errorArtifactExceptions> = $stack3;

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack4 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List errorArtifactExceptions>;

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(e);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack6 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack7 = specialinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack6);

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r6.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions> = $stack7;

        $r7 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack8 = $r7.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(e);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r8;
    }

    public java.util.List getErrorArtifactExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3, $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List errorArtifactExceptions>;

        if $stack1 != null goto label1;

        $stack4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack4;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List errorArtifactExceptions>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

        return $stack3;
    }

    public boolean hasCircularDependencyExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1;
        boolean $stack2;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult addCircularDependencyException(org.apache.maven.artifact.resolver.CyclicDependencyException)
    {
        ArtifactResolutionResult this;
        java.util.List $stack2, $stack3, $stack4, $stack6, $stack7, $stack8;
        org.apache.maven.artifact.resolver.CyclicDependencyException e;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: ArtifactResolutionResult;

        e := @parameter0: org.apache.maven.artifact.resolver.CyclicDependencyException;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions>;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack2);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions> = $stack3;

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack4 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions>;

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(e);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack6 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack7 = specialinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List initList(java.util.List)>($stack6);

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r6.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions> = $stack7;

        $r7 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack8 = $r7.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List exceptions>;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(e);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r8;
    }

    public org.apache.maven.artifact.resolver.CyclicDependencyException getCircularDependencyException(int)
    {
        ArtifactResolutionResult this;
        int i;
        java.util.List $stack2;
        java.lang.Object $stack3;
        org.apache.maven.artifact.resolver.CyclicDependencyException $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0;

        this := @this: ArtifactResolutionResult;

        i := @parameter0: int;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(i);

        $stack4 = (org.apache.maven.artifact.resolver.CyclicDependencyException) $stack3;

        return $stack4;
    }

    public java.util.List getCircularDependencyExceptions()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3, $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions>;

        if $stack1 != null goto label1;

        $stack4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack4;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List circularDependencyExceptions>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

        return $stack3;
    }

    public java.util.List getRepositories()
    {
        ArtifactResolutionResult this;
        java.util.List $stack1, $stack2, $stack3, $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List repositories>;

        if $stack1 != null goto label1;

        $stack4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack4;

     label1:
        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List repositories>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

        return $stack3;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult setRepositories(java.util.List)
    {
        ArtifactResolutionResult this;
        java.util.List repositories;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1;

        this := @this: ArtifactResolutionResult;

        repositories := @parameter0: java.util.List;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List repositories> = repositories;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        return $r1;
    }

    private java.util.List initList(java.util.List)
    {
        java.util.List l;
        java.util.ArrayList $stack2;
        ArtifactResolutionResult this;

        this := @this: ArtifactResolutionResult;

        l := @parameter0: java.util.List;

        if l != null goto label1;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        return $stack2;

     label1:
        return l;
    }

    public java.lang.String toString()
    {
        ArtifactResolutionResult this;
        java.util.Set $stack6, $stack11, $stack16;
        java.lang.String $stack7, $stack9, $stack14, $stack25;
        java.lang.StringBuilder $stack8, $stack13, $stack22, $stack23, $stack24, $u0;
        int $stack12, i;
        java.util.Iterator l3;
        boolean $stack18;
        java.lang.Object $stack21;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $r0, $r1, $r2;

        this := @this: ArtifactResolutionResult;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        if $stack6 == null goto label3;

        i = 1;

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---------");

        $stack9 = <org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.lang.String LS>;

        virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack11 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        $stack12 = interfaceinvoke $stack11.<java.util.Set: int size()>();

        $stack13 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack12);

        $stack14 = <org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.lang.String LS>;

        virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolutionResult) this;

        $stack16 = $r2.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set artifacts>;

        l3 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack18 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label2;

        $stack21 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack21;

        $stack22 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(a);

        $stack25 = <org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.lang.String LS>;

        virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---------");

     label3:
        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    static void <clinit>()
    {
        java.lang.String $stack0;

        $stack0 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        <org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.lang.String LS> = $stack0;

        return;
    }
}
