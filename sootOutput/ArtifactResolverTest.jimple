public class ArtifactResolverTest extends org.apache.maven.artifact.AbstractArtifactComponentTestCase
{
    private org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver;
    private org.apache.maven.artifact.Artifact projectArtifact;

    public void <init>()
    {
        ArtifactResolverTest this;

        this := @this: ArtifactResolverTest;

        specialinvoke this.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact $stack1;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1;

        this := @this: ArtifactResolverTest;

        specialinvoke this.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: void setUp()>();

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String,java.lang.String)>("project", "3.0");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact projectArtifact> = $stack1;

        return;
    }

    protected java.lang.String component()
    {
        ArtifactResolverTest this;

        this := @this: ArtifactResolverTest;

        return "resolver";
    }

    public void testResolutionOfASingleArtifactWhereTheArtifactIsPresentInTheLocalRepository() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack3;
        java.util.List $stack4;
        org.apache.maven.artifact.repository.ArtifactRepository $stack5;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2, $r3, $r4;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        a = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String,java.lang.String)>("a", "1.0");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack3 = $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack4 = virtualinvoke $r2.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack5 = virtualinvoke $r3.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        interfaceinvoke $stack3.<org.apache.maven.artifact.resolver.ArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository)>(a, $stack4, $stack5);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r4.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(a);

        return;
    }

    public void testResolutionOfASingleArtifactWhereTheArtifactIsNotPresentLocallyAndMustBeRetrievedFromTheRemoteRepository() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact b;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack3;
        java.util.List $stack4;
        org.apache.maven.artifact.repository.ArtifactRepository $stack5;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        b = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createRemoteArtifact(java.lang.String,java.lang.String)>("b", "1.0-SNAPSHOT");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void deleteLocalArtifact(org.apache.maven.artifact.Artifact)>(b);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack3 = $r2.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack4 = virtualinvoke $r3.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack5 = virtualinvoke $r4.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        interfaceinvoke $stack3.<org.apache.maven.artifact.resolver.ArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository)>(b, $stack4, $stack5);

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(b);

        return;
    }

    protected org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        ArtifactResolverTest this;
        java.lang.String groupId, artifactId, version, type;
        org.apache.maven.artifact.Artifact $stack5;

        this := @this: ArtifactResolverTest;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        type := @parameter3: java.lang.String;

        $stack5 = specialinvoke this.<org.apache.maven.artifact.AbstractArtifactComponentTestCase: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, type);

        return $stack5;
    }

    public void testTransitiveResolutionWhereAllArtifactsArePresentInTheLocalRepository() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact g, h, $stack8;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack6;
        java.util.Set $stack7, $stack13, $stack15, $stack17;
        java.util.List $stack9;
        org.apache.maven.artifact.repository.ArtifactRepository $stack10;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult result;
        int $stack14;
        boolean $stack16, $stack18;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        g = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String,java.lang.String)>("g", "1.0");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        h = virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String,java.lang.String)>("h", "1.0");

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack6 = $r2.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $stack7 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(g);

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack8 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact projectArtifact>;

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack9 = virtualinvoke $r4.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack10 = virtualinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        result = interfaceinvoke $stack6.<org.apache.maven.artifact.resolver.ArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.metadata.ArtifactMetadataSource)>($stack7, $stack8, $stack9, $stack10, null);

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        specialinvoke $r6.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void printErrors(org.apache.maven.artifact.resolver.ArtifactResolutionResult)>(result);

        $stack13 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        $stack14 = interfaceinvoke $stack13.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack14);

        $stack15 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        $stack16 = interfaceinvoke $stack15.<java.util.Set: boolean contains(java.lang.Object)>(g);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack16);

        $stack17 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        $stack18 = interfaceinvoke $stack17.<java.util.Set: boolean contains(java.lang.Object)>(h);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack18);

        $r7 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r7.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(g);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r8.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(h);

        return;
    }

    public void testTransitiveResolutionWhereAllArtifactsAreNotPresentInTheLocalRepositoryAndMustBeRetrievedFromTheRemoteRepository() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact i, j, $stack8;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack6;
        java.util.Set $stack7, $stack13, $stack15, $stack17;
        java.util.List $stack9;
        org.apache.maven.artifact.repository.ArtifactRepository $stack10;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult result;
        int $stack14;
        boolean $stack16, $stack18;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        i = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createRemoteArtifact(java.lang.String,java.lang.String)>("i", "1.0-SNAPSHOT");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void deleteLocalArtifact(org.apache.maven.artifact.Artifact)>(i);

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        j = virtualinvoke $r2.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createRemoteArtifact(java.lang.String,java.lang.String)>("j", "1.0-SNAPSHOT");

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r3.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void deleteLocalArtifact(org.apache.maven.artifact.Artifact)>(j);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack6 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $stack7 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(i);

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack8 = $r5.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact projectArtifact>;

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack9 = virtualinvoke $r6.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r7 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack10 = virtualinvoke $r7.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        result = interfaceinvoke $stack6.<org.apache.maven.artifact.resolver.ArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.metadata.ArtifactMetadataSource)>($stack7, $stack8, $stack9, $stack10, null);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        specialinvoke $r8.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void printErrors(org.apache.maven.artifact.resolver.ArtifactResolutionResult)>(result);

        $stack13 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        $stack14 = interfaceinvoke $stack13.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack14);

        $stack15 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        $stack16 = interfaceinvoke $stack15.<java.util.Set: boolean contains(java.lang.Object)>(i);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack16);

        $stack17 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        $stack18 = interfaceinvoke $stack17.<java.util.Set: boolean contains(java.lang.Object)>(j);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack18);

        $r9 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r9.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(i);

        $r10 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r10.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(j);

        return;
    }

    public void testResolutionFailureWhenArtifactNotPresentInRemoteRepository() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact k;
        org.junit.jupiter.api.function.Executable $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        k = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String)>("k", "1.0");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack4 = staticinvoke <ArtifactResolverTest$lambda_testResolutionFailureWhenArtifactNotPresentInRemoteRepository_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.artifact.resolver.ArtifactResolverTest,org.apache.maven.artifact.Artifact)>($r1, k);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/artifact/resolver/ArtifactNotFoundException;", $stack4, "Resolution succeeded when it should have failed");

        return;
    }

    public void testResolutionOfAnArtifactWhereOneRemoteRepositoryIsBadButOneIsGood() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact l;
        org.apache.maven.artifact.repository.ArtifactRepository $stack5, $stack7, $stack10;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack9;
        java.util.ArrayList $u0;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        l = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createRemoteArtifact(java.lang.String,java.lang.String)>("l", "1.0-SNAPSHOT");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void deleteLocalArtifact(org.apache.maven.artifact.Artifact)>(l);

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack5 = virtualinvoke $r2.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository remoteRepository()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack5);

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack7 = virtualinvoke $r3.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository badRemoteRepository()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack7);

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack9 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack10 = virtualinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        interfaceinvoke $stack9.<org.apache.maven.artifact.resolver.ArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository)>(l, $u0, $stack10);

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        virtualinvoke $r6.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void assertLocalArtifactPresent(org.apache.maven.artifact.Artifact)>(l);

        return;
    }

    public void testTransitiveResolutionOrder() throws java.lang.Exception
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact m, n, $stack14, $stack26;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack13, $stack25;
        java.util.List $stack15, $stack27;
        org.apache.maven.artifact.repository.ArtifactRepository $stack16, $stack28;
        java.util.Set $stack18, $stack30;
        java.lang.Object $stack20, $stack21, $stack32, $stack33;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult result#3;
        java.util.Iterator i;
        org.apache.maven.artifact.resolver.ArtifactResolverTest$1 $u0;
        java.util.LinkedHashSet $u1, $u2;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource $r7, $r13;

        this := @this: ArtifactResolverTest;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        m = virtualinvoke $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String,java.lang.String)>("m", "1.0");

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        n = virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact createLocalArtifact(java.lang.String,java.lang.String)>("n", "1.0");

        $u0 = new org.apache.maven.artifact.resolver.ArtifactResolverTest$1;

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        specialinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolverTest$1: void <init>(org.apache.maven.artifact.resolver.ArtifactResolverTest)>($r2);

        $u1 = new java.util.LinkedHashSet;

        specialinvoke $u1.<java.util.LinkedHashSet: void <init>()>();

        interfaceinvoke $u1.<java.util.Set: boolean add(java.lang.Object)>(n);

        interfaceinvoke $u1.<java.util.Set: boolean add(java.lang.Object)>(m);

        $r3 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack13 = $r3.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $r4 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack14 = $r4.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact projectArtifact>;

        $r5 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack15 = virtualinvoke $r5.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r6 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack16 = virtualinvoke $r6.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        $r7 = (org.apache.maven.artifact.metadata.ArtifactMetadataSource) $u0;

        result#3 = interfaceinvoke $stack13.<org.apache.maven.artifact.resolver.ArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.metadata.ArtifactMetadataSource)>($u1, $stack14, $stack15, $stack16, $r7);

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        specialinvoke $r8.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void printErrors(org.apache.maven.artifact.resolver.ArtifactResolutionResult)>(result#3);

        $stack18 = virtualinvoke result#3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        i = interfaceinvoke $stack18.<java.util.Set: java.util.Iterator iterator()>();

        $stack20 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(n, $stack20, "n should be first");

        $stack21 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(m, $stack21, "m should be second");

        $u2 = new java.util.LinkedHashSet;

        specialinvoke $u2.<java.util.LinkedHashSet: void <init>()>();

        interfaceinvoke $u2.<java.util.Set: boolean add(java.lang.Object)>(m);

        interfaceinvoke $u2.<java.util.Set: boolean add(java.lang.Object)>(n);

        $r9 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack25 = $r9.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $r10 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack26 = $r10.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.Artifact projectArtifact>;

        $r11 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack27 = virtualinvoke $r11.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r12 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack28 = virtualinvoke $r12.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        $r13 = (org.apache.maven.artifact.metadata.ArtifactMetadataSource) $u0;

        result#3 = interfaceinvoke $stack25.<org.apache.maven.artifact.resolver.ArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.metadata.ArtifactMetadataSource)>($u2, $stack26, $stack27, $stack28, $r13);

        $r14 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        specialinvoke $r14.<org.apache.maven.artifact.resolver.ArtifactResolverTest: void printErrors(org.apache.maven.artifact.resolver.ArtifactResolutionResult)>(result#3);

        $stack30 = virtualinvoke result#3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        i = interfaceinvoke $stack30.<java.util.Set: java.util.Iterator iterator()>();

        $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(m, $stack32, "m should be first");

        $stack33 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(n, $stack33, "n should be second");

        return;
    }

    private void printErrors(org.apache.maven.artifact.resolver.ArtifactResolutionResult)
    {
        org.apache.maven.artifact.resolver.ArtifactResolutionResult result;
        boolean $stack4, $stack5, $stack8, $stack13;
        java.util.List $stack6, $stack11;
        java.lang.Object $stack9, $stack15;
        java.lang.StringBuilder $stack16, $stack18, $stack19;
        java.io.PrintStream $stack17;
        java.lang.String $stack20;
        ArtifactResolverTest this;
        java.util.Iterator l2;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.Exception artifact#4;

        this := @this: ArtifactResolverTest;

        result := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionResult;

        $stack4 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasMissingArtifacts()>();

        if $stack4 == 0 goto label2;

        $stack11 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List getMissingArtifacts()>();

        l2 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack13 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label2;

        $stack15 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack15;

        $stack17 = <java.lang.System: java.io.PrintStream err>;

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing: ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(artifact);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack17.<java.io.PrintStream: void println(java.lang.String)>($stack20);

        goto label1;

     label2:
        $stack5 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasExceptions()>();

        if $stack5 == 0 goto label4;

        $stack6 = virtualinvoke result.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.List getExceptions()>();

        l2 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack8 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label4;

        $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        artifact#4 = (java.lang.Exception) $stack9;

        virtualinvoke artifact#4.<java.lang.Exception: void printStackTrace()>();

        goto label3;

     label4:
        return;
    }

    private void lambda$testResolutionFailureWhenArtifactNotPresentInRemoteRepository$0(org.apache.maven.artifact.Artifact) throws java.lang.Throwable
    {
        ArtifactResolverTest this;
        org.apache.maven.artifact.Artifact k;
        org.apache.maven.artifact.resolver.ArtifactResolver $stack2;
        java.util.List $stack3;
        org.apache.maven.artifact.repository.ArtifactRepository $stack4;
        org.apache.maven.artifact.resolver.ArtifactResolverTest $r0, $r1, $r2;

        this := @this: ArtifactResolverTest;

        k := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.resolver.ArtifactResolver artifactResolver>;

        $r1 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.artifact.resolver.ArtifactResolverTest: java.util.List remoteRepositories()>();

        $r2 = (org.apache.maven.artifact.resolver.ArtifactResolverTest) this;

        $stack4 = virtualinvoke $r2.<org.apache.maven.artifact.resolver.ArtifactResolverTest: org.apache.maven.artifact.repository.ArtifactRepository localRepository()>();

        interfaceinvoke $stack2.<org.apache.maven.artifact.resolver.ArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository)>(k, $stack3, $stack4);

        return;
    }
}
