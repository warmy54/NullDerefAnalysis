public final class ArtifactUtils extends java.lang.Object
{

    public void <init>()
    {
        ArtifactUtils this;

        this := @this: ArtifactUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isSnapshot(java.lang.String)
    {
        java.lang.String version, $stack3, $stack5;
        int $stack2, $stack4, $stack6, $stack9;
        boolean $stack10, $stack13;
        java.util.regex.Pattern $stack11;
        java.util.regex.Matcher $stack12;

        version := @parameter0: java.lang.String;

        if version == null goto label2;

        $stack2 = virtualinvoke version.<java.lang.String: int length()>();

        $stack3 = "SNAPSHOT";

        $stack4 = virtualinvoke $stack3.<java.lang.String: int length()>();

        $stack6 = $stack2 - $stack4;

        $stack5 = "SNAPSHOT";

        $stack9 = virtualinvoke $stack5.<java.lang.String: int length()>();

        $stack10 = virtualinvoke version.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $stack6, "SNAPSHOT", 0, $stack9);

        if $stack10 == 0 goto label1;

        return 1;

     label1:
        $stack11 = <org.apache.maven.artifact.Artifact: java.util.regex.Pattern VERSION_FILE_PATTERN>;

        $stack12 = virtualinvoke $stack11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(version);

        $stack13 = virtualinvoke $stack12.<java.util.regex.Matcher: boolean matches()>();

        if $stack13 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static java.lang.String toSnapshotVersion(java.lang.String)
    {
        java.lang.String version, $stack12, $stack16;
        int lastHyphen, $stack5, prevHyphen;
        java.util.regex.Pattern $stack8;
        java.util.regex.Matcher m;
        boolean $stack10;
        java.lang.StringBuilder $stack11, $stack13, $stack14, $stack15;

        version := @parameter0: java.lang.String;

        staticinvoke <org.apache.maven.artifact.ArtifactUtils: void notBlank(java.lang.String,java.lang.String)>(version, "version can neither be null, empty nor blank");

        lastHyphen = virtualinvoke version.<java.lang.String: int lastIndexOf(int)>(45);

        if lastHyphen <= 0 goto label1;

        $stack5 = lastHyphen - 1;

        prevHyphen = virtualinvoke version.<java.lang.String: int lastIndexOf(int,int)>(45, $stack5);

        if prevHyphen <= 0 goto label1;

        $stack8 = <org.apache.maven.artifact.Artifact: java.util.regex.Pattern VERSION_FILE_PATTERN>;

        m = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(version);

        $stack10 = virtualinvoke m.<java.util.regex.Matcher: boolean matches()>();

        if $stack10 == 0 goto label1;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SNAPSHOT");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack16;

     label1:
        return version;
    }

    public static java.lang.String versionlessKey(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack1, $stack2, $stack3;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $stack1 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack2 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack3 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>($stack1, $stack2);

        return $stack3;
    }

    public static java.lang.String versionlessKey(java.lang.String, java.lang.String)
    {
        java.lang.String groupId, artifactId, $stack6;
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        staticinvoke <org.apache.maven.artifact.ArtifactUtils: void notBlank(java.lang.String,java.lang.String)>(groupId, "groupId can neither be null, empty nor blank");

        staticinvoke <org.apache.maven.artifact.ArtifactUtils: void notBlank(java.lang.String,java.lang.String)>(artifactId, "artifactId can neither be null, empty nor blank");

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(groupId);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(artifactId);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack6;
    }

    public static java.lang.String key(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack1, $stack2, $stack3, $stack4;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $stack1 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack2 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack3 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        $stack4 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String key(java.lang.String,java.lang.String,java.lang.String)>($stack1, $stack2, $stack3);

        return $stack4;
    }

    public static java.lang.String key(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String groupId, artifactId, version, $stack9;
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        staticinvoke <org.apache.maven.artifact.ArtifactUtils: void notBlank(java.lang.String,java.lang.String)>(groupId, "groupId can neither be null, empty nor blank");

        staticinvoke <org.apache.maven.artifact.ArtifactUtils: void notBlank(java.lang.String,java.lang.String)>(artifactId, "artifactId can neither be null, empty nor blank");

        staticinvoke <org.apache.maven.artifact.ArtifactUtils: void notBlank(java.lang.String,java.lang.String)>(version, "version can neither be null, empty nor blank");

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(groupId);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(artifactId);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    private static void notBlank(java.lang.String, java.lang.String)
    {
        java.lang.String str, message;
        char c, $stack11;
        java.lang.Object[] $stack3;
        int $stack10;

        str := @parameter0: java.lang.String;

        message := @parameter1: java.lang.String;

        if str == null goto label1;

        $stack10 = virtualinvoke str.<java.lang.String: int length()>();

        if $stack10 <= 0 goto label1;

        $stack11 = virtualinvoke str.<java.lang.String: char charAt(int)>(0);

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        c = $stack11;

        if $stack11 < 48 goto label3;

        if $stack11 <= 57 goto label5;

     label3:
        if c < 97 goto label4;

        if c <= 122 goto label5;

     label4:
        $stack3 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])>(str, message, $stack3);

     label5:
        return;
    }

    public static java.util.Map artifactMapByVersionlessId(java.util.Collection)
    {
        java.util.LinkedHashMap $stack4;
        java.util.Collection artifacts;
        java.util.Iterator l2;
        boolean $stack6;
        java.lang.Object $stack8;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack9;

        artifacts := @parameter0: java.util.Collection;

        $stack4 = new java.util.LinkedHashMap;

        specialinvoke $stack4.<java.util.LinkedHashMap: void <init>()>();

        if artifacts == null goto label2;

        l2 = interfaceinvoke artifacts.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack8;

        $stack9 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(org.apache.maven.artifact.Artifact)>(artifact);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, artifact);

        goto label1;

     label2:
        return $stack4;
    }

    public static org.apache.maven.artifact.Artifact copyArtifactSafe(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact, $stack1;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        if artifact == null goto label1;

        $stack1 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: org.apache.maven.artifact.Artifact copyArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        goto label2;

     label1:
        $stack1 = null;

     label2:
        return $stack1;
    }

    public static org.apache.maven.artifact.Artifact copyArtifact(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact, $r0;
        java.lang.String $stack5, $stack6, $stack7, $stack8, $stack9, $stack13, $stack18, $stack22, $stack24, $stack34;
        org.apache.maven.artifact.handler.ArtifactHandler $stack10;
        boolean $stack11, $stack12, $stack14;
        java.io.File $stack15;
        java.util.List $stack16, $stack17, $stack20, $stack21;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter $stack19;
        org.apache.maven.artifact.repository.ArtifactRepository $stack23;
        org.apache.maven.artifact.versioning.VersionRange range;
        org.apache.maven.artifact.DefaultArtifact $u0;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        range = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.versioning.VersionRange getVersionRange()>();

        if range != null goto label1;

        $stack34 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersion(java.lang.String)>($stack34);

     label1:
        $u0 = new org.apache.maven.artifact.DefaultArtifact;

        $stack5 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack6 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack7 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack8 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        $stack9 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getClassifier()>();

        $stack10 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack11 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isOptional()>();

        specialinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler,boolean)>($stack5, $stack6, range, $stack7, $stack8, $stack9, $stack10, $stack11);

        $stack12 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isRelease()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setRelease(boolean)>($stack12);

        $stack13 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setResolvedVersion(java.lang.String)>($stack13);

        $stack14 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isResolved()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setResolved(boolean)>($stack14);

        $stack15 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setFile(java.io.File)>($stack15);

        $stack16 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.util.List getAvailableVersions()>();

        $stack17 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.List copyList(java.util.List)>($stack16);

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setAvailableVersions(java.util.List)>($stack17);

        $stack18 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        if $stack18 == null goto label2;

        $stack24 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getBaseVersion()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setBaseVersion(java.lang.String)>($stack24);

     label2:
        $stack19 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.resolver.filter.ArtifactFilter getDependencyFilter()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setDependencyFilter(org.apache.maven.artifact.resolver.filter.ArtifactFilter)>($stack19);

        $stack20 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.util.List getDependencyTrail()>();

        $stack21 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.List copyList(java.util.List)>($stack20);

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setDependencyTrail(java.util.List)>($stack21);

        $stack22 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getDownloadUrl()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setDownloadUrl(java.lang.String)>($stack22);

        $stack23 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.repository.ArtifactRepository getRepository()>();

        virtualinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void setRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack23);

        $r0 = (org.apache.maven.artifact.Artifact) $u0;

        return $r0;
    }

    public static java.util.Collection copyArtifacts(java.util.Collection, java.util.Collection)
    {
        java.util.Collection 'from', 'to';
        java.util.Iterator l2;
        boolean $stack5;
        java.lang.Object $stack6;
        org.apache.maven.artifact.Artifact artifact, $stack7;

        'from' := @parameter0: java.util.Collection;

        'to' := @parameter1: java.util.Collection;

        l2 = interfaceinvoke 'from'.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack6;

        $stack7 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: org.apache.maven.artifact.Artifact copyArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        interfaceinvoke 'to'.<java.util.Collection: boolean add(java.lang.Object)>($stack7);

        goto label1;

     label2:
        return 'to';
    }

    public static java.util.Map copyArtifacts(java.util.Map, java.util.Map)
    {
        java.util.Map 'from', 'to';
        java.util.Set $stack4;
        java.util.Iterator l2;
        boolean $stack6;
        java.lang.Object $stack8, $stack9, $stack10;
        java.util.Map$Entry entry;
        org.apache.maven.artifact.Artifact $stack11, $stack12;

        'from' := @parameter0: java.util.Map;

        'to' := @parameter1: java.util.Map;

        if 'from' == null goto label2;

        $stack4 = interfaceinvoke 'from'.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack10 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack11 = (org.apache.maven.artifact.Artifact) $stack10;

        $stack12 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: org.apache.maven.artifact.Artifact copyArtifact(org.apache.maven.artifact.Artifact)>($stack11);

        interfaceinvoke 'to'.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, $stack12);

        goto label1;

     label2:
        return 'to';
    }

    private static java.util.List copyList(java.util.List)
    {
        java.util.List original;
        java.util.ArrayList $stack2, copy;
        boolean $stack3;

        original := @parameter0: java.util.List;

        copy = null;

        if original == null goto label1;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        copy = $stack2;

        $stack3 = interfaceinvoke original.<java.util.List: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        interfaceinvoke $stack2.<java.util.List: boolean addAll(java.util.Collection)>(original);

     label1:
        return copy;
    }
}
