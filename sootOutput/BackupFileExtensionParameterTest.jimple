class BackupFileExtensionParameterTest extends java.lang.Object
{

    void <init>()
    {
        BackupFileExtensionParameterTest this;

        this := @this: BackupFileExtensionParameterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void emptyBackupFileExtensionShouldNotWork()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        BackupFileExtensionParameterTest this;

        this := @this: BackupFileExtensionParameterTest;

        testMethod = staticinvoke <BackupFileExtensionParameterTest$lambda_emptyBackupFileExtensionShouldNotWork_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack4;

        $stack5 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Could not create backup file, extension name was empty");

        $stack7 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    private static void lambda$emptyBackupFileExtensionShouldNotWork$0() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2, $stack3;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil backupFileExtension(java.lang.String)>("");

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/differentOrder.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_differentOrder.xml");

        return;
    }
}
