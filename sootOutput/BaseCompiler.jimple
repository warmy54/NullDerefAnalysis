public abstract class BaseCompiler extends java.lang.Object implements org.ooc.frontend.compilers.AbstractCompiler
{
    protected java.util.List command;
    protected java.lang.String executablePath;

    public void <init>(java.lang.String)
    {
        BaseCompiler this;
        java.lang.String executableName;
        java.util.ArrayList $u0;
        org.ooc.frontend.compilers.BaseCompiler $r0, $r1, $r2;

        this := @this: BaseCompiler;

        executableName := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $r0.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command> = $u0;

        $r1 = (org.ooc.frontend.compilers.BaseCompiler) this;

        virtualinvoke $r1.<org.ooc.frontend.compilers.BaseCompiler: void setExecutable(java.lang.String)>(executableName);

        $r2 = (org.ooc.frontend.compilers.BaseCompiler) this;

        virtualinvoke $r2.<org.ooc.frontend.compilers.BaseCompiler: void reset()>();

        return;
    }

    public void setExecutable(java.lang.String)
    {
        java.lang.String executableName, $stack8, $stack11, $stack18, $stack5;
        boolean $stack4;
        BaseCompiler this;
        java.util.List $stack9, $stack12, $stack6;
        java.io.File execFile, $u0;
        int $stack7;
        org.ooc.frontend.compilers.BaseCompiler $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: BaseCompiler;

        executableName := @parameter0: java.lang.String;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>(executableName);

        execFile = $u0;

        $stack4 = virtualinvoke $u0.<java.io.File: boolean exists()>();

        if $stack4 != 0 goto label1;

        execFile = staticinvoke <org.ooc.utils.ShellUtils: java.io.File findExecutable(java.lang.String)>(executableName);

        if execFile != null goto label1;

        $stack18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(executableName) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.exe");

        execFile = staticinvoke <org.ooc.utils.ShellUtils: java.io.File findExecutable(java.lang.String)>($stack18);

        if execFile != null goto label1;

        staticinvoke <org.ooc.utils.ShellUtils: java.io.File findExecutable(java.lang.String,boolean)>(executableName, 1);

     label1:
        $stack5 = virtualinvoke execFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $r0.<org.ooc.frontend.compilers.BaseCompiler: java.lang.String executablePath> = $stack5;

        $r1 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack6 = $r1.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        if $stack7 != 0 goto label2;

        $r2 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack12 = $r2.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        $r3 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack11 = $r3.<org.ooc.frontend.compilers.BaseCompiler: java.lang.String executablePath>;

        interfaceinvoke $stack12.<java.util.List: boolean add(java.lang.Object)>($stack11);

        goto label3;

     label2:
        $r4 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack9 = $r4.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        $r5 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack8 = $r5.<org.ooc.frontend.compilers.BaseCompiler: java.lang.String executablePath>;

        interfaceinvoke $stack9.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $stack8);

     label3:
        return;
    }

    public int launch() throws java.io.IOException, java.lang.InterruptedException
    {
        java.lang.String[] $stack4;
        BaseCompiler this;
        java.util.List $stack5;
        java.lang.Process process;
        int $stack8;
        java.lang.ProcessBuilder $u0;
        org.ooc.frontend.compilers.BaseCompiler $r0;

        this := @this: BaseCompiler;

        $u0 = new java.lang.ProcessBuilder;

        $stack4 = newarray (java.lang.String)[0];

        specialinvoke $u0.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($stack4);

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack5 = $r0.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        virtualinvoke $u0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>($stack5);

        process = virtualinvoke $u0.<java.lang.ProcessBuilder: java.lang.Process start()>();

        staticinvoke <org.ooc.utils.ProcessUtils: void redirectIO(java.lang.Process)>(process);

        $stack8 = virtualinvoke process.<java.lang.Process: int waitFor()>();

        return $stack8;
    }

    public java.lang.String getCommandLine()
    {
        BaseCompiler this;
        java.util.List $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.String $stack8, arg;
        java.lang.Object $stack9;
        java.lang.StringBuilder $u0;
        org.ooc.frontend.compilers.BaseCompiler $r0;

        this := @this: BaseCompiler;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack5 = $r0.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        l2 = interfaceinvoke $stack5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        arg = (java.lang.String) $stack9;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(arg);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label2:
        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack8;
    }

    public void reset()
    {
        BaseCompiler this;
        java.util.List $stack1, $stack3;
        java.lang.String $stack2;
        org.ooc.frontend.compilers.BaseCompiler $r0, $r1, $r2;

        this := @this: BaseCompiler;

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack1 = $r0.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        interfaceinvoke $stack1.<java.util.List: void clear()>();

        $r1 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack3 = $r1.<org.ooc.frontend.compilers.BaseCompiler: java.util.List command>;

        $r2 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack2 = $r2.<org.ooc.frontend.compilers.BaseCompiler: java.lang.String executablePath>;

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>($stack2);

        return;
    }

    public abstract org.ooc.frontend.compilers.BaseCompiler clone();

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        BaseCompiler this;
        org.ooc.frontend.compilers.BaseCompiler $stack1, $r0;

        this := @this: BaseCompiler;

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.compilers.BaseCompiler: org.ooc.frontend.compilers.BaseCompiler clone()>();

        return $stack1;
    }

    public volatile org.ooc.frontend.compilers.AbstractCompiler clone()
    {
        BaseCompiler this;
        org.ooc.frontend.compilers.BaseCompiler $stack1, $r0;
        org.ooc.frontend.compilers.AbstractCompiler $r1;

        this := @this: BaseCompiler;

        $r0 = (org.ooc.frontend.compilers.BaseCompiler) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.compilers.BaseCompiler: org.ooc.frontend.compilers.BaseCompiler clone()>();

        $r1 = (org.ooc.frontend.compilers.AbstractCompiler) $stack1;

        return $r1;
    }
}
