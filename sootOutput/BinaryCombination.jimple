public class BinaryCombination extends org.ooc.frontend.model.BinaryOperation
{
    protected org.ooc.frontend.model.BinaryCombination$BinaryComp comp;

    public void <init>(org.ooc.frontend.model.BinaryCombination$BinaryComp, org.ooc.frontend.model.Expression, org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        BinaryCombination this;
        org.ooc.frontend.model.Expression left, right;
        org.ooc.frontend.model.tokens.Token token;
        org.ooc.frontend.model.BinaryCombination$BinaryComp comp;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        comp := @parameter0: org.ooc.frontend.model.BinaryCombination$BinaryComp;

        left := @parameter1: org.ooc.frontend.model.Expression;

        right := @parameter2: org.ooc.frontend.model.Expression;

        token := @parameter3: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.BinaryOperation: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>(left, right, token);

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp> = comp;

        return;
    }

    public org.ooc.frontend.model.Type getType()
    {
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination$BinaryComp $stack1, $stack2, $stack4, $stack5;
        org.ooc.frontend.model.Type $stack3, $stack7;
        org.ooc.frontend.model.Expression $stack6;
        org.ooc.frontend.model.BinaryCombination $r0, $r1, $r2;

        this := @this: BinaryCombination;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack2 = $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp>;

        $stack1 = <org.ooc.frontend.model.BinaryCombination$BinaryComp: org.ooc.frontend.model.BinaryCombination$BinaryComp LOGICAL_OR>;

        if $stack2 == $stack1 goto label1;

        $r1 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack5 = $r1.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp>;

        $stack4 = <org.ooc.frontend.model.BinaryCombination$BinaryComp: org.ooc.frontend.model.BinaryCombination$BinaryComp LOGICAL_AND>;

        if $stack5 != $stack4 goto label2;

     label1:
        $stack3 = <org.ooc.frontend.model.BoolLiteral: org.ooc.frontend.model.Type type>;

        return $stack3;

     label2:
        $r2 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack6 = $r2.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.Expression left>;

        $stack7 = virtualinvoke $stack6.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        return $stack7;
    }

    public org.ooc.frontend.model.BinaryCombination$BinaryComp getComp()
    {
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination$BinaryComp $stack1;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp>;

        return $stack1;
    }

    public void setComp(org.ooc.frontend.model.BinaryCombination$BinaryComp)
    {
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination$BinaryComp comp;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        comp := @parameter0: org.ooc.frontend.model.BinaryCombination$BinaryComp;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp> = comp;

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.BinaryCombination)>($r0);

        return;
    }

    public java.lang.String getOpString()
    {
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination$BinaryComp $stack1;
        int[] $stack2;
        int $stack3, $stack4;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        $stack2 = <org.ooc.frontend.model.BinaryCombination$1: int[] $SwitchMap$org$ooc$frontend$model$BinaryCombination$BinaryComp>;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp>;

        $stack3 = virtualinvoke $stack1.<org.ooc.frontend.model.BinaryCombination$BinaryComp: int ordinal()>();

        $stack4 = $stack2[$stack3];

        tableswitch($stack4)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        return "||";

     label2:
        return "&&";

     label3:
        return "^";

     label4:
        return "|";

     label5:
        return "&";

     label6:
        return "<<";

     label7:
        return ">>";

     label8:
        return "<op>";
    }

    public org.ooc.frontend.model.OpDecl$OpType getOpType()
    {
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination$BinaryComp $stack1;
        int[] $stack2;
        int $stack3, $stack4;
        org.ooc.frontend.model.OpDecl$OpType $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        $stack2 = <org.ooc.frontend.model.BinaryCombination$1: int[] $SwitchMap$org$ooc$frontend$model$BinaryCombination$BinaryComp>;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp>;

        $stack3 = virtualinvoke $stack1.<org.ooc.frontend.model.BinaryCombination$BinaryComp: int ordinal()>();

        $stack4 = $stack2[$stack3];

        tableswitch($stack4)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        $stack11 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType L_OR>;

        return $stack11;

     label2:
        $stack10 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType L_AND>;

        return $stack10;

     label3:
        $stack9 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType B_XOR>;

        return $stack9;

     label4:
        $stack8 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType B_OR>;

        return $stack8;

     label5:
        $stack7 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType B_AND>;

        return $stack7;

     label6:
        $stack6 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType LSHIFT>;

        return $stack6;

     label7:
        $stack5 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType RSHIFT>;

        return $stack5;

     label8:
        return null;
    }

    public int getPriority()
    {
        BinaryCombination this;
        org.ooc.frontend.model.BinaryCombination$BinaryComp $stack1;
        int[] $stack2;
        int $stack3, $stack4;
        org.ooc.frontend.model.BinaryCombination $r0;

        this := @this: BinaryCombination;

        $stack2 = <org.ooc.frontend.model.BinaryCombination$1: int[] $SwitchMap$org$ooc$frontend$model$BinaryCombination$BinaryComp>;

        $r0 = (org.ooc.frontend.model.BinaryCombination) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryCombination: org.ooc.frontend.model.BinaryCombination$BinaryComp comp>;

        $stack3 = virtualinvoke $stack1.<org.ooc.frontend.model.BinaryCombination$BinaryComp: int ordinal()>();

        $stack4 = $stack2[$stack3];

        tableswitch($stack4)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label2;
            case 6: goto label1;
            case 7: goto label1;
            default: goto label7;
        };

     label1:
        return 30;

     label2:
        return 60;

     label3:
        return 70;

     label4:
        return 80;

     label5:
        return 90;

     label6:
        return 100;

     label7:
        return 0;
    }
}
