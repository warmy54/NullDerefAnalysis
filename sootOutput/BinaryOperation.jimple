public abstract class BinaryOperation extends org.ooc.frontend.model.Expression implements org.ooc.frontend.model.interfaces.MustBeUnwrapped, org.ooc.frontend.model.interfaces.MustBeResolved
{
    protected org.ooc.frontend.model.Expression left;
    protected org.ooc.frontend.model.Expression right;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        BinaryOperation this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression left, right;
        org.ooc.frontend.model.BinaryOperation $r0, $r1;

        this := @this: BinaryOperation;

        left := @parameter0: org.ooc.frontend.model.Expression;

        right := @parameter1: org.ooc.frontend.model.Expression;

        startToken := @parameter2: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left> = left;

        $r1 = (org.ooc.frontend.model.BinaryOperation) this;

        $r1.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right> = right;

        return;
    }

    public org.ooc.frontend.model.Expression getLeft()
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.BinaryOperation $r0;

        this := @this: BinaryOperation;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        return $stack1;
    }

    public void setLeft(org.ooc.frontend.model.Expression)
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression left;
        org.ooc.frontend.model.BinaryOperation $r0;

        this := @this: BinaryOperation;

        left := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left> = left;

        return;
    }

    public org.ooc.frontend.model.Expression getRight()
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.BinaryOperation $r0;

        this := @this: BinaryOperation;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        return $stack1;
    }

    public void setRight(org.ooc.frontend.model.Expression)
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression right;
        org.ooc.frontend.model.BinaryOperation $r0;

        this := @this: BinaryOperation;

        right := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right> = right;

        return;
    }

    public org.ooc.frontend.model.Type getType()
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Type $stack2;
        org.ooc.frontend.model.BinaryOperation $r0;

        this := @this: BinaryOperation;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression getLeft()>();

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        return $stack2;
    }

    public boolean hasChildren()
    {
        BinaryOperation this;

        this := @this: BinaryOperation;

        return 1;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        BinaryOperation this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2, $stack3;
        org.ooc.frontend.model.BinaryOperation $r0, $r1;

        this := @this: BinaryOperation;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack2 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack3 = $r1.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        virtualinvoke $stack3.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean isResolved()
    {
        BinaryOperation this;

        this := @this: BinaryOperation;

        return 0;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack12, $stack14, $stack27, $stack31, $stack37, $stack39, $stack46, $stack64, $stack83, $stack85, $stack98, $stack102, $stack104, $stack108, $stack115, $stack117, $stack53, $stack56, $r20;
        org.ooc.frontend.model.Type $stack13, $stack15, $stack28, $stack32, $stack38, $stack40, $stack45, $stack47, $stack62, $stack65;
        org.ooc.frontend.model.OpDecl$OpType opType;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.Module $stack17, $stack21, $stack87;
        org.ooc.frontend.model.NodeList $stack18, $stack22, stack, $stack88, args#10, $stack52, $stack55;
        boolean $stack20, $stack24, $stack25, $stack30, $stack48, $stack90, $stack99, fatal, $stack109;
        org.ooc.frontend.model.Declaration $stack29;
        int $stack33, $stack63, $stack66, $stack67, score, bestScore;
        java.lang.String $stack35, $stack36, $stack41, $stack103, $stack112, $stack113, $stack116;
        org.ooc.frontend.model.FunctionDecl $stack42, $stack50;
        org.ooc.frontend.model.Node $stack44, op#44, $r4, $r10, $r23, $r25, $r26, $r27, $r32;
        org.ooc.frontend.model.tokens.Token $stack84, $stack51;
        java.lang.Object $stack86, $stack92, $stack95;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack100, $stack110, $stack61, $stack26;
        org.ooc.frontend.model.interfaces.MustBeResolved $stack105, $stack118;
        java.io.PrintStream $stack111;
        org.ooc.frontend.model.OpDecl bestOp, op;
        java.util.Iterator args, score;
        org.ooc.frontend.model.Import op#7;
        org.ooc.frontend.model.Argument op#11;
        org.ooc.middle.OocCompilationError $u0, $u1, $u4;
        org.ooc.frontend.model.AddressOf $u2;
        org.ooc.frontend.model.FunctionCall $u3;
        org.ooc.frontend.model.BinaryOperation $r0, $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r24, $r28, $r29, $r30, $r31;
        java.lang.Throwable $r5, $r11, $r33;

        this := @this: BinaryOperation;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack12 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack13 = virtualinvoke $stack12.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack13 != null goto label03;

        $r1 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack108 = $r1.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack109 = $stack108 instanceof org.ooc.frontend.model.interfaces.MustBeResolved;

        if $stack109 == 0 goto label01;

        $r2 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack117 = $r2.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack118 = (org.ooc.frontend.model.interfaces.MustBeResolved) $stack117;

        interfaceinvoke $stack118.<org.ooc.frontend.model.interfaces.MustBeResolved: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

     label01:
        if fatal == 0 goto label02;

        $stack111 = <java.lang.System: java.io.PrintStream out>;

        $stack112 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: java.lang.String toString(boolean)>(1);

        $stack113 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack112) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("stack = \u0001");

        virtualinvoke $stack111.<java.io.PrintStream: void println(java.lang.String)>($stack113);

        $u0 = new org.ooc.middle.OocCompilationError;

        $r3 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack115 = $r3.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack116 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression)>($stack115) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t resolve type of left \u0001 operand. Wtf?");

        $r4 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r4, stack, $stack116);

        $r5 = (java.lang.Throwable) $u0;

        throw $r5;

     label02:
        $stack110 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack110;

     label03:
        $r6 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack14 = $r6.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack15 = virtualinvoke $stack14.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack15 != null goto label06;

        $r7 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack98 = $r7.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack99 = $stack98 instanceof org.ooc.frontend.model.interfaces.MustBeResolved;

        if $stack99 == 0 goto label04;

        $r8 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack104 = $r8.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack105 = (org.ooc.frontend.model.interfaces.MustBeResolved) $stack104;

        interfaceinvoke $stack105.<org.ooc.frontend.model.interfaces.MustBeResolved: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

     label04:
        if fatal == 0 goto label05;

        $u1 = new org.ooc.middle.OocCompilationError;

        $r9 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack102 = $r9.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack103 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression)>($stack102) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t resolve type of right \u0001 operand. Seriously.");

        $r10 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u1.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r10, stack, $stack103);

        $r11 = (java.lang.Throwable) $u1;

        throw $r11;

     label05:
        $stack100 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack100;

     label06:
        $r12 = (org.ooc.frontend.model.BinaryOperation) this;

        opType = virtualinvoke $r12.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.OpDecl$OpType getOpType()>();

        bestOp = null;

        bestScore = 0;

        $stack17 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack18 = virtualinvoke $stack17.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        args = virtualinvoke $stack18.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label07:
        $stack20 = interfaceinvoke args.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label09;

        $stack95 = interfaceinvoke args.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack95;

        $r13 = (org.ooc.frontend.model.BinaryOperation) this;

        score = virtualinvoke $r13.<org.ooc.frontend.model.BinaryOperation: int getOpScore(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.OpDecl$OpType,org.ooc.frontend.model.OpDecl,org.ooc.middle.hobgoblins.Resolver)>(stack, opType, op, res);

        if score <= bestScore goto label08;

        bestScore = score;

        bestOp = op;

     label08:
        goto label07;

     label09:
        $stack21 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack22 = virtualinvoke $stack21.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getAllImports()>();

        args = virtualinvoke $stack22.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label10:
        $stack24 = interfaceinvoke args.<java.util.Iterator: boolean hasNext()>();

        if $stack24 == 0 goto label14;

        $stack86 = interfaceinvoke args.<java.util.Iterator: java.lang.Object next()>();

        op#7 = (org.ooc.frontend.model.Import) $stack86;

        $stack87 = virtualinvoke op#7.<org.ooc.frontend.model.Import: org.ooc.frontend.model.Module getModule()>();

        $stack88 = virtualinvoke $stack87.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        score = virtualinvoke $stack88.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label11:
        $stack90 = interfaceinvoke score.<java.util.Iterator: boolean hasNext()>();

        if $stack90 == 0 goto label13;

        $stack92 = interfaceinvoke score.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack92;

        $r14 = (org.ooc.frontend.model.BinaryOperation) this;

        score = virtualinvoke $r14.<org.ooc.frontend.model.BinaryOperation: int getOpScore(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.OpDecl$OpType,org.ooc.frontend.model.OpDecl,org.ooc.middle.hobgoblins.Resolver)>(stack, opType, op, res);

        if score <= bestScore goto label12;

        bestScore = score;

        bestOp = op;

     label12:
        goto label11;

     label13:
        goto label10;

     label14:
        if bestOp == null goto label16;

        $stack42 = virtualinvoke bestOp.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        args#10 = virtualinvoke $stack42.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $stack44 = virtualinvoke args#10.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(0);

        op#11 = (org.ooc.frontend.model.Argument) $stack44;

        $stack45 = virtualinvoke op#11.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r15 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack46 = $r15.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack47 = virtualinvoke $stack46.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack48 = virtualinvoke $stack45.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>($stack47, res);

        if $stack48 == 0 goto label15;

        $stack62 = virtualinvoke op#11.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack63 = virtualinvoke $stack62.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $r16 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack64 = $r16.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack65 = virtualinvoke $stack64.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack66 = virtualinvoke $stack65.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $stack67 = $stack66 + 1;

        if $stack63 != $stack67 goto label15;

        $u2 = new org.ooc.frontend.model.AddressOf;

        $r17 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack85 = $r17.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $r18 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack83 = $r18.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack84 = $stack83.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u2.<org.ooc.frontend.model.AddressOf: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($stack85, $stack84);

        $r19 = (org.ooc.frontend.model.BinaryOperation) this;

        $r20 = (org.ooc.frontend.model.Expression) $u2;

        $r19.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left> = $r20;

     label15:
        $u3 = new org.ooc.frontend.model.FunctionCall;

        $stack50 = virtualinvoke bestOp.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $r21 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack51 = $r21.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u3.<org.ooc.frontend.model.FunctionCall: void <init>(org.ooc.frontend.model.FunctionDecl,org.ooc.frontend.model.tokens.Token)>($stack50, $stack51);

        $stack52 = virtualinvoke $u3.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r22 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack53 = $r22.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $r23 = (org.ooc.frontend.model.Node) $stack53;

        virtualinvoke $stack52.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r23);

        $stack55 = virtualinvoke $u3.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r24 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack56 = $r24.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $r25 = (org.ooc.frontend.model.Node) $stack56;

        virtualinvoke $stack55.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r25);

        op#44 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r26 = (org.ooc.frontend.model.Node) this;

        $r27 = (org.ooc.frontend.model.Node) $u3;

        virtualinvoke op#44.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r26, $r27);

        virtualinvoke $u3.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, 1);

        $stack61 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack61;

     label16:
        $stack25 = virtualinvoke opType.<org.ooc.frontend.model.OpDecl$OpType: boolean isNumeric()>();

        if $stack25 == 0 goto label17;

        $r28 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack27 = $r28.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack28 = virtualinvoke $stack27.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack29 = virtualinvoke $stack28.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Declaration getRef()>();

        $stack30 = $stack29 instanceof org.ooc.frontend.model.ClassDecl;

        if $stack30 == 0 goto label17;

        $r29 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack31 = $r29.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack32 = virtualinvoke $stack31.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack33 = virtualinvoke $stack32.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        if $stack33 != 0 goto label17;

        $u4 = new org.ooc.middle.OocCompilationError;

        $stack35 = virtualinvoke opType.<org.ooc.frontend.model.OpDecl$OpType: java.lang.String toPrettyString()>();

        $stack36 = virtualinvoke opType.<org.ooc.frontend.model.OpDecl$OpType: java.lang.String toPrettyString()>();

        $r30 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack37 = $r30.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack38 = virtualinvoke $stack37.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r31 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack39 = $r31.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack40 = virtualinvoke $stack39.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,org.ooc.frontend.model.Type,org.ooc.frontend.model.Type)>($stack35, $stack36, $stack38, $stack40) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Using operator \u0001 between non-numeric types. Maybe you want to overload it? Do it like this: operator \u0001 (left: \u0001, right: \u0001) { ... }");

        $r32 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u4.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r32, stack, $stack41);

        $r33 = (java.lang.Throwable) $u4;

        throw $r33;

     label17:
        $stack26 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack26;
    }

    private int getOpScore(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.OpDecl$OpType, org.ooc.frontend.model.OpDecl, org.ooc.middle.hobgoblins.Resolver)
    {
        org.ooc.frontend.model.OpDecl op;
        org.ooc.frontend.model.OpDecl$OpType $stack9, opType;
        org.ooc.frontend.model.FunctionDecl $stack10, $stack13, $stack43, $stack50;
        org.ooc.frontend.model.NodeList $stack11, args, stack;
        int $stack12, $stack35, $stack38, $stack39, score;
        org.ooc.frontend.model.Node $stack15, $stack16, $r0;
        org.ooc.frontend.model.Argument first, second;
        org.ooc.frontend.model.Type $stack17, $stack19, $stack22, $stack24, $stack26, $stack28, $stack34, $stack37, $stack42, $stack30, $stack32;
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack18, $stack23, $stack27, $stack36, $stack31;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean $stack20, $stack25, $stack29, $stack45, $stack33;
        java.util.LinkedHashMap $stack44;
        java.lang.String $stack49, $stack51, $stack52;
        org.ooc.middle.OocCompilationError $u0;
        java.lang.Throwable $r1;
        org.ooc.frontend.model.BinaryOperation $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: BinaryOperation;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        opType := @parameter1: org.ooc.frontend.model.OpDecl$OpType;

        op := @parameter2: org.ooc.frontend.model.OpDecl;

        res := @parameter3: org.ooc.middle.hobgoblins.Resolver;

        score = 0;

        $stack9 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.OpDecl$OpType getOpType()>();

        if $stack9 != opType goto label5;

        $stack10 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack11 = virtualinvoke $stack10.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $stack12 = virtualinvoke $stack11.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack12 == 2 goto label1;

        $u0 = new org.ooc.middle.OocCompilationError;

        $stack49 = virtualinvoke opType.<org.ooc.frontend.model.OpDecl$OpType: java.lang.String toPrettyString()>();

        $stack50 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack51 = virtualinvoke $stack50.<org.ooc.frontend.model.FunctionDecl: java.lang.String getArgsRepr()>();

        $stack52 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack49, $stack51) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("To overload the \u0001 operator, you need exactly two arguments, not \u0001");

        $r0 = (org.ooc.frontend.model.Node) op;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r0, stack, $stack52);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label1:
        $stack13 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        args = virtualinvoke $stack13.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $stack15 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(0);

        first = (org.ooc.frontend.model.Argument) $stack15;

        $stack16 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(1);

        second = (org.ooc.frontend.model.Argument) $stack16;

        $stack17 = virtualinvoke first.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r2 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack18 = $r2.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack19 = virtualinvoke $stack18.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack20 = virtualinvoke $stack17.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>($stack19, res);

        if $stack20 == 0 goto label5;

        $stack22 = virtualinvoke second.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r3 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack23 = $r3.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack24 = virtualinvoke $stack23.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack25 = virtualinvoke $stack22.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>($stack24, res);

        if $stack25 != 0 goto label2;

        $stack42 = virtualinvoke second.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack43 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack44 = virtualinvoke $stack43.<org.ooc.frontend.model.FunctionDecl: java.util.LinkedHashMap getTypeParams()>();

        $r4 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack45 = virtualinvoke $r4.<org.ooc.frontend.model.BinaryOperation: boolean isGeneric(org.ooc.frontend.model.Type,java.util.LinkedHashMap)>($stack42, $stack44);

        if $stack45 == 0 goto label5;

     label2:
        score = 0 + 10;

        $stack26 = virtualinvoke first.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r5 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack27 = $r5.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack28 = virtualinvoke $stack27.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack29 = virtualinvoke $stack26.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>($stack28);

        if $stack29 == 0 goto label4;

        $stack34 = virtualinvoke first.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack35 = virtualinvoke $stack34.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $r6 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack36 = $r6.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $stack37 = virtualinvoke $stack36.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack38 = virtualinvoke $stack37.<org.ooc.frontend.model.Type: int getReferenceLevel()>();

        $stack39 = $stack38 + 1;

        if $stack35 != $stack39 goto label3;

        score = score + 10;

     label3:
        score = score + 20;

     label4:
        $stack30 = virtualinvoke second.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $r7 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack31 = $r7.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack32 = virtualinvoke $stack31.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack33 = virtualinvoke $stack30.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>($stack32);

        if $stack33 == 0 goto label5;

        score = score + 20;

     label5:
        return score;
    }

    private boolean isGeneric(org.ooc.frontend.model.Type, java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap linkedHashMap;
        org.ooc.frontend.model.Type type;
        java.lang.String $stack3;
        boolean $stack4;
        BinaryOperation this;

        this := @this: BinaryOperation;

        type := @parameter0: org.ooc.frontend.model.Type;

        linkedHashMap := @parameter1: java.util.LinkedHashMap;

        $stack3 = virtualinvoke type.<org.ooc.frontend.model.Type: java.lang.String getName()>();

        $stack4 = virtualinvoke linkedHashMap.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($stack3);

        return $stack4;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack3, $stack4, $stack5, $stack6;
        org.ooc.frontend.model.BinaryOperation $r0, $r1, $r2, $r3;

        this := @this: BinaryOperation;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack3 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        if oldie != $stack3 goto label1;

        $stack6 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.BinaryOperation) this;

        $r1.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left> = $stack6;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack4 = $r2.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        if oldie != $stack4 goto label2;

        $stack5 = (org.ooc.frontend.model.Expression) kiddo;

        $r3 = (org.ooc.frontend.model.BinaryOperation) this;

        $r3.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right> = $stack5;

        return 1;

     label2:
        return 0;
    }

    public boolean unwrap(org.ooc.frontend.model.NodeList) throws java.io.IOException
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack4, $stack6, tmp;
        boolean $stack5;
        org.ooc.frontend.model.BinaryOperation opRight, $r0, $r1, $r2, $r3;
        int $stack7, $stack8;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.Node $stack11, $r4, $r5;

        this := @this: BinaryOperation;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack4 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack5 = $stack4 instanceof org.ooc.frontend.model.BinaryOperation;

        if $stack5 == 0 goto label1;

        $r1 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack6 = $r1.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        opRight = (org.ooc.frontend.model.BinaryOperation) $stack6;

        $r2 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack7 = virtualinvoke $r2.<org.ooc.frontend.model.BinaryOperation: int getPriority()>();

        $stack8 = virtualinvoke opRight.<org.ooc.frontend.model.BinaryOperation: int getPriority()>();

        if $stack7 >= $stack8 goto label1;

        tmp = virtualinvoke opRight.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression getLeft()>();

        virtualinvoke opRight.<org.ooc.frontend.model.BinaryOperation: void setLeft(org.ooc.frontend.model.Expression)>(this);

        $r3 = (org.ooc.frontend.model.BinaryOperation) this;

        virtualinvoke $r3.<org.ooc.frontend.model.BinaryOperation: void setRight(org.ooc.frontend.model.Expression)>(tmp);

        $stack11 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r4 = (org.ooc.frontend.model.Node) this;

        $r5 = (org.ooc.frontend.model.Node) opRight;

        virtualinvoke $stack11.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r4, $r5);

        return 1;

     label1:
        return 0;
    }

    public abstract org.ooc.frontend.model.OpDecl$OpType getOpType();

    public abstract int getPriority();

    public java.lang.String toString()
    {
        BinaryOperation this;
        org.ooc.frontend.model.Expression $stack1, $stack4;
        org.ooc.frontend.model.OpDecl$OpType $stack2;
        java.lang.String $stack3, $stack5;
        org.ooc.frontend.model.BinaryOperation $r0, $r1, $r2;

        this := @this: BinaryOperation;

        $r0 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack1 = $r0.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression left>;

        $r1 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack2 = virtualinvoke $r1.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.OpDecl$OpType getOpType()>();

        $stack3 = virtualinvoke $stack2.<org.ooc.frontend.model.OpDecl$OpType: java.lang.String toPrettyString()>();

        $r2 = (org.ooc.frontend.model.BinaryOperation) this;

        $stack4 = $r2.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.Expression right>;

        $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression,java.lang.String,org.ooc.frontend.model.Expression)>($stack1, $stack3, $stack4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001 \u0001 \u0001)");

        return $stack5;
    }
}
