public class Blobs extends java.lang.Object
{
    static int BLOBROWCOUNT;
    static int BLOBCOLCOUNT;
    static int BLOBTOTALCOUNT;
    public static int BLOBLABEL;
    public static int BLOBPARENT;
    public static int BLOBCOLOR;
    public static int BLOBAREA;
    public static int BLOBPERIMETER;
    public static int BLOBSUMX;
    public static int BLOBSUMY;
    public static int BLOBSUMXX;
    public static int BLOBSUMYY;
    public static int BLOBSUMXY;
    public static int BLOBMINX;
    public static int BLOBMAXX;
    public static int BLOBMINY;
    public static int BLOBMAXY;
    public static int BLOBDATACOUNT;
    public static int[][] LabelMat;
    public static double[][] RegionData;
    public static int MaxLabel;
    public int LabelA;
    public int LabelB;
    public int LabelC;
    public int LabelD;
    public int ColorA;
    public int ColorB;
    public int ColorC;
    public int ColorD;
    public int jrow;
    public int jcol;
    public static int[] SubsumedLabel;
    public static int[] CondensationMap;
    static double iField;
    static double jField;
    static double[] iProperty;
    static double[] jProperty;

    public void <init>()
    {
        Blobs this;

        this := @this: Blobs;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void PrintRegionData()
    {
        Blobs this;
        int $stack1;
        org.bytedeco.javacv.Blobs $r0;

        this := @this: Blobs;

        $stack1 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        $r0 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r0.<org.bytedeco.javacv.Blobs: void PrintRegionData(int,int)>(0, $stack1);

        return;
    }

    public void PrintRegionData(int, int)
    {
        int $stack31, $stack34, ThisLabel, $stack36, ThisParent, $stack38, ThisColor, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, ThisMinX, $stack49, ThisMaxX, $stack51, ThisMinY, $stack53, ThisMaxY, Label0, Label1, Label;
        java.io.PrintStream $stack32, $stack103;
        double[][] $stack33;
        double[] Property;
        double $stack35, $stack37, $stack39, ThisArea, ThisPerimeter, ThisSumX, ThisSumY, ThisSumXX, ThisSumYY, ThisSumXY, $stack48, $stack50, $stack52, $stack54;
        java.lang.StringBuilder $stack55, $stack56, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack66, $stack67, $stack68, $stack69, $stack70, $stack71, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack86, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, $stack93, $stack94, $stack95, $stack97, $stack98, $stack99, $stack100, $stack101;
        java.lang.String Str1, Str2, Str3, Str4, Str;
        Blobs this;

        this := @this: Blobs;

        Label0 := @parameter0: int;

        Label1 := @parameter1: int;

        if Label0 >= 0 goto label1;

        Label0 = 0;

     label1:
        $stack31 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Label1 <= $stack31 goto label2;

        Label1 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

     label2:
        if Label1 >= Label0 goto label3;

        return;

     label3:
        Label = Label0;

     label4:
        if Label > Label1 goto label5;

        $stack33 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        Property = $stack33[Label];

        $stack34 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $stack35 = Property[$stack34];

        ThisLabel = (int) $stack35;

        $stack36 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack37 = Property[$stack36];

        ThisParent = (int) $stack37;

        $stack38 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $stack39 = Property[$stack38];

        ThisColor = (int) $stack39;

        $stack40 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        ThisArea = Property[$stack40];

        $stack41 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        ThisPerimeter = Property[$stack41];

        $stack42 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        ThisSumX = Property[$stack42];

        $stack43 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        ThisSumY = Property[$stack43];

        $stack44 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        ThisSumXX = Property[$stack44];

        $stack45 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        ThisSumYY = Property[$stack45];

        $stack46 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        ThisSumXY = Property[$stack46];

        $stack47 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack48 = Property[$stack47];

        ThisMinX = (int) $stack48;

        $stack49 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack50 = Property[$stack49];

        ThisMaxX = (int) $stack50;

        $stack51 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack52 = Property[$stack51];

        ThisMinY = (int) $stack52;

        $stack53 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack54 = Property[$stack53];

        ThisMaxY = (int) $stack54;

        $stack55 = new java.lang.StringBuilder;

        specialinvoke $stack55.<java.lang.StringBuilder: void <init>()>();

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(Label);

        $stack58 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": L[");

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisLabel);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] P[");

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisParent);

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] C[");

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisColor);

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        Str1 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack66 = new java.lang.StringBuilder;

        specialinvoke $stack66.<java.lang.StringBuilder: void <init>()>();

        $stack67 = virtualinvoke $stack66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AP[");

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisArea);

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisPerimeter);

        $stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        Str2 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack73 = new java.lang.StringBuilder;

        specialinvoke $stack73.<java.lang.StringBuilder: void <init>()>();

        $stack74 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" M1[");

        $stack75 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisSumX);

        $stack76 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack77 = virtualinvoke $stack76.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisSumY);

        $stack78 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] M2[");

        $stack79 = virtualinvoke $stack78.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisSumXX);

        $stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisSumYY);

        $stack82 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(ThisSumXY);

        $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        Str3 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack86 = new java.lang.StringBuilder;

        specialinvoke $stack86.<java.lang.StringBuilder: void <init>()>();

        $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MINMAX[");

        $stack88 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisMinX);

        $stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack90 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisMaxX);

        $stack91 = virtualinvoke $stack90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisMinY);

        $stack93 = virtualinvoke $stack92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack94 = virtualinvoke $stack93.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ThisMaxY);

        $stack95 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        Str4 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack97 = new java.lang.StringBuilder;

        specialinvoke $stack97.<java.lang.StringBuilder: void <init>()>();

        $stack98 = virtualinvoke $stack97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Str1);

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Str2);

        $stack100 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Str3);

        $stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Str4);

        Str = virtualinvoke $stack101.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack103 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack103.<java.io.PrintStream: void println(java.lang.String)>(Str);

        Label = Label + 1;

        goto label4;

     label5:
        $stack32 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack32.<java.io.PrintStream: void println()>();

        return;
    }

    public static int NextRegion(int, int, double, double, int)
    {
        int Parent, Color, Label, $stack19, $stack22, $stack23, $stack26, $stack30, i, $stack18;
        double DParent, ThisParent, ThisColor, MinArea, $stack27, MaxArea, $stack31, DColor;
        byte $stack17, $stack24, $stack25, $stack28, $stack32, $stack34, $stack37;
        double[][] $stack21;
        double[] Region;

        Parent := @parameter0: int;

        Color := @parameter1: int;

        MinArea := @parameter2: double;

        MaxArea := @parameter3: double;

        Label := @parameter4: int;

        DParent = (double) Parent;

        DColor = (double) Color;

        $stack17 = DColor cmpl 0.0;

        if $stack17 <= 0 goto label1;

        DColor = 1.0;

     label1:
        i = Label;

     label2:
        $stack18 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if i > $stack18 goto label6;

        $stack21 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        Region = $stack21[i];

        $stack22 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        ThisParent = Region[$stack22];

        $stack23 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        ThisColor = Region[$stack23];

        $stack24 = DParent cmpl 0.0;

        if $stack24 < 0 goto label3;

        $stack37 = DParent cmpl ThisParent;

        if $stack37 == 0 goto label3;

        goto label5;

     label3:
        $stack25 = DColor cmpl 0.0;

        if $stack25 < 0 goto label4;

        $stack34 = DColor cmpl ThisColor;

        if $stack34 == 0 goto label4;

        goto label5;

     label4:
        $stack26 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack27 = Region[$stack26];

        $stack28 = $stack27 cmpg MinArea;

        if $stack28 < 0 goto label5;

        $stack30 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack31 = Region[$stack30];

        $stack32 = $stack31 cmpl MaxArea;

        if $stack32 <= 0 goto label6;

        goto label5;

     label5:
        i = i + 1;

        goto label2;

     label6:
        $stack19 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if i <= $stack19 goto label7;

        i = -1;

     label7:
        return i;
    }

    public static int PriorRegion(int, int, double, double, int)
    {
        int Parent, Color, Label, $stack20, $stack21, $stack24, $stack28, i;
        double DParent, ThisParent, ThisColor, MinArea, $stack25, MaxArea, $stack29, DColor;
        byte $stack17, $stack22, $stack23, $stack26, $stack30, $stack32, $stack35;
        double[][] $stack19;
        double[] Region;

        Parent := @parameter0: int;

        Color := @parameter1: int;

        MinArea := @parameter2: double;

        MaxArea := @parameter3: double;

        Label := @parameter4: int;

        DParent = (double) Parent;

        DColor = (double) Color;

        $stack17 = DColor cmpl 0.0;

        if $stack17 <= 0 goto label1;

        DColor = 1.0;

     label1:
        i = Label;

     label2:
        if i < 0 goto label6;

        $stack19 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        Region = $stack19[i];

        $stack20 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        ThisParent = Region[$stack20];

        $stack21 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        ThisColor = Region[$stack21];

        $stack22 = DParent cmpl 0.0;

        if $stack22 < 0 goto label3;

        $stack35 = DParent cmpl ThisParent;

        if $stack35 == 0 goto label3;

        goto label5;

     label3:
        $stack23 = DColor cmpl 0.0;

        if $stack23 < 0 goto label4;

        $stack32 = DColor cmpl ThisColor;

        if $stack32 == 0 goto label4;

        goto label5;

     label4:
        $stack24 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack25 = Region[$stack24];

        $stack26 = $stack25 cmpg MinArea;

        if $stack26 < 0 goto label5;

        $stack28 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack29 = Region[$stack28];

        $stack30 = $stack29 cmpl MaxArea;

        if $stack30 <= 0 goto label6;

        goto label5;

     label5:
        i = i + -1;

        goto label2;

     label6:
        if i >= 0 goto label7;

        i = -1;

     label7:
        return i;
    }

    public void ResetRegion(int)
    {
        int Label, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack19;
        double[][] $stack3, $stack18;
        double[] RegionD, $stack20;
        Blobs this;

        this := @this: Blobs;

        Label := @parameter0: int;

        $stack3 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        RegionD = $stack3[Label];

        $stack17 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $stack16 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack15 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $stack14 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack13 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack12 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        $stack11 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        $stack10 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        $stack9 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        $stack8 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        $stack7 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack6 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack5 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack4 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        RegionD[$stack4] = 0.0;

        RegionD[$stack5] = 0.0;

        RegionD[$stack6] = 0.0;

        RegionD[$stack7] = 0.0;

        RegionD[$stack8] = 0.0;

        RegionD[$stack9] = 0.0;

        RegionD[$stack10] = 0.0;

        RegionD[$stack11] = 0.0;

        RegionD[$stack12] = 0.0;

        RegionD[$stack13] = 0.0;

        RegionD[$stack14] = 0.0;

        RegionD[$stack15] = 0.0;

        RegionD[$stack16] = 0.0;

        RegionD[$stack17] = 0.0;

        $stack18 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack20 = $stack18[Label];

        $stack19 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(RegionD, 0, $stack20, 0, $stack19);

        return;
    }

    public void OldRegion(int, int, int)
    {
        int Label1, Label2, NewLabelD, $stack127, $stack131, $stack135, $stack139, DeltaPerimeter, $stack6, $stack10, $stack8, $stack11, $stack14, $stack17, $stack20, $stack24, $stack25, $stack29, $stack30, $stack34, $stack36, $stack35, $stack37, $stack41, $stack43, $stack42, $stack44, $stack48, $stack50, $stack49, $stack51, $stack59, $stack55, $stack56, $stack65, $stack61, $stack62, $stack71, $stack67, $stack68, $stack77, $stack73, $stack74, $stack79, $stack81;
        Blobs this;
        double[][] $stack126, $stack130, $stack134, $stack138, $stack7, $stack80;
        double $stack128, $stack129, $stack136, $stack137, $stack9, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack21, $stack23, $stack27, $stack26, $stack28, $stack32, $stack31, $stack33, $stack39, $stack38, $stack40, $stack46, $stack45, $stack47, $stack53, $stack52, $stack54, $stack58, $stack57, $stack60, $stack64, $stack63, $stack66, $stack70, $stack69, $stack72, $stack76, $stack75, $stack78;
        double[] $stack132, $stack140, Region1, $stack82;
        org.bytedeco.javacv.Blobs $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: Blobs;

        NewLabelD := @parameter0: int;

        Label1 := @parameter1: int;

        Label2 := @parameter2: int;

        DeltaPerimeter = 0;

        if Label1 < 0 goto label1;

        if Label1 == NewLabelD goto label1;

        DeltaPerimeter = 0 + 1;

        $stack134 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        Region1 = $stack134[Label1];

        $stack135 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack136 = Region1[$stack135];

        $stack137 = $stack136 + 1.0;

        Region1[$stack135] = $stack137;

        $stack138 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack140 = $stack138[Label1];

        $stack139 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(Region1, 0, $stack140, 0, $stack139);

     label1:
        if Label2 < 0 goto label2;

        if Label2 == NewLabelD goto label2;

        DeltaPerimeter = DeltaPerimeter + 1;

        $stack126 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        Region1 = $stack126[Label2];

        $stack127 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack128 = Region1[$stack127];

        $stack129 = $stack128 + 1.0;

        Region1[$stack127] = $stack129;

        $stack130 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack132 = $stack130[Label2];

        $stack131 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(Region1, 0, $stack132, 0, $stack131);

     label2:
        $r0 = (org.bytedeco.javacv.Blobs) this;

        $r0.<org.bytedeco.javacv.Blobs: int LabelD> = NewLabelD;

        $stack7 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r1 = (org.bytedeco.javacv.Blobs) this;

        $stack6 = $r1.<org.bytedeco.javacv.Blobs: int LabelD>;

        Region1 = $stack7[$stack6];

        $stack10 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $r2 = (org.bytedeco.javacv.Blobs) this;

        $stack8 = $r2.<org.bytedeco.javacv.Blobs: int LabelD>;

        $stack9 = (double) $stack8;

        Region1[$stack10] = $stack9;

        $stack11 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack12 = Region1[$stack11];

        $stack13 = $stack12 + 0.0;

        Region1[$stack11] = $stack13;

        $stack14 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $stack15 = Region1[$stack14];

        $stack16 = $stack15 + 0.0;

        Region1[$stack14] = $stack16;

        $stack17 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack18 = Region1[$stack17];

        $stack19 = $stack18 + 1.0;

        Region1[$stack17] = $stack19;

        $stack20 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack22 = Region1[$stack20];

        $stack21 = (double) DeltaPerimeter;

        $stack23 = $stack22 + $stack21;

        Region1[$stack20] = $stack23;

        $stack24 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        $stack27 = Region1[$stack24];

        $r3 = (org.bytedeco.javacv.Blobs) this;

        $stack25 = $r3.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack26 = (double) $stack25;

        $stack28 = $stack27 + $stack26;

        Region1[$stack24] = $stack28;

        $stack29 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        $stack32 = Region1[$stack29];

        $r4 = (org.bytedeco.javacv.Blobs) this;

        $stack30 = $r4.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack31 = (double) $stack30;

        $stack33 = $stack32 + $stack31;

        Region1[$stack29] = $stack33;

        $stack34 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        $stack39 = Region1[$stack34];

        $r5 = (org.bytedeco.javacv.Blobs) this;

        $stack36 = $r5.<org.bytedeco.javacv.Blobs: int jcol>;

        $r6 = (org.bytedeco.javacv.Blobs) this;

        $stack35 = $r6.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack37 = $stack36 * $stack35;

        $stack38 = (double) $stack37;

        $stack40 = $stack39 + $stack38;

        Region1[$stack34] = $stack40;

        $stack41 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        $stack46 = Region1[$stack41];

        $r7 = (org.bytedeco.javacv.Blobs) this;

        $stack43 = $r7.<org.bytedeco.javacv.Blobs: int jrow>;

        $r8 = (org.bytedeco.javacv.Blobs) this;

        $stack42 = $r8.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack44 = $stack43 * $stack42;

        $stack45 = (double) $stack44;

        $stack47 = $stack46 + $stack45;

        Region1[$stack41] = $stack47;

        $stack48 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        $stack53 = Region1[$stack48];

        $r9 = (org.bytedeco.javacv.Blobs) this;

        $stack50 = $r9.<org.bytedeco.javacv.Blobs: int jcol>;

        $r10 = (org.bytedeco.javacv.Blobs) this;

        $stack49 = $r10.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack51 = $stack50 * $stack49;

        $stack52 = (double) $stack51;

        $stack54 = $stack53 + $stack52;

        Region1[$stack48] = $stack54;

        $stack59 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack55 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack58 = Region1[$stack55];

        $r11 = (org.bytedeco.javacv.Blobs) this;

        $stack56 = $r11.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack57 = (double) $stack56;

        $stack60 = staticinvoke <java.lang.Math: double min(double,double)>($stack58, $stack57);

        Region1[$stack59] = $stack60;

        $stack65 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack61 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack64 = Region1[$stack61];

        $r12 = (org.bytedeco.javacv.Blobs) this;

        $stack62 = $r12.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack63 = (double) $stack62;

        $stack66 = staticinvoke <java.lang.Math: double max(double,double)>($stack64, $stack63);

        Region1[$stack65] = $stack66;

        $stack71 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack67 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack70 = Region1[$stack67];

        $r13 = (org.bytedeco.javacv.Blobs) this;

        $stack68 = $r13.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack69 = (double) $stack68;

        $stack72 = staticinvoke <java.lang.Math: double min(double,double)>($stack70, $stack69);

        Region1[$stack71] = $stack72;

        $stack77 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack73 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack76 = Region1[$stack73];

        $r14 = (org.bytedeco.javacv.Blobs) this;

        $stack74 = $r14.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack75 = (double) $stack74;

        $stack78 = staticinvoke <java.lang.Math: double max(double,double)>($stack76, $stack75);

        Region1[$stack77] = $stack78;

        $stack80 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r15 = (org.bytedeco.javacv.Blobs) this;

        $stack79 = $r15.<org.bytedeco.javacv.Blobs: int LabelD>;

        $stack82 = $stack80[$stack79];

        $stack81 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(Region1, 0, $stack82, 0, $stack81);

        return;
    }

    public void NewRegion(int)
    {
        Blobs this;
        int $stack5, $stack6, $stack7, $stack9, $stack11, ParentLabel, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack26, $stack27, $stack29, $stack30, $stack31, $stack32, $stack34, $stack35, $stack36, $stack37, $stack39, $stack40, $stack42, $stack43, $stack45, $stack46, $stack48, $stack49, $stack51, $stack52, $stack54, $stack56, $stack58, $stack60, $stack63, $stack65, $stack67, $stack69, $stack72, $stack74;
        double[][] $stack8, $stack53, $stack59, $stack64, $stack68, $stack73;
        double[] RegionD, $stack55, RegionB, $stack66, RegionC, $stack75;
        double $stack10, $stack12, $stack15, $stack20, $stack23, $stack28, $stack33, $stack38, $stack41, $stack44, $stack47, $stack50, $stack61, $stack62, $stack70, $stack71;
        int[] $stack57;
        org.bytedeco.javacv.Blobs $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        this := @this: Blobs;

        ParentLabel := @parameter0: int;

        $stack5 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        $stack6 = $stack5 + 1;

        <org.bytedeco.javacv.Blobs: int MaxLabel> = $stack6;

        $r0 = (org.bytedeco.javacv.Blobs) this;

        $r0.<org.bytedeco.javacv.Blobs: int LabelD> = $stack6;

        $stack8 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r1 = (org.bytedeco.javacv.Blobs) this;

        $stack7 = $r1.<org.bytedeco.javacv.Blobs: int LabelD>;

        RegionD = $stack8[$stack7];

        $stack11 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $r2 = (org.bytedeco.javacv.Blobs) this;

        $stack9 = $r2.<org.bytedeco.javacv.Blobs: int LabelD>;

        $stack10 = (double) $stack9;

        RegionD[$stack11] = $stack10;

        $stack13 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack12 = (double) ParentLabel;

        RegionD[$stack13] = $stack12;

        $stack16 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $r3 = (org.bytedeco.javacv.Blobs) this;

        $stack14 = $r3.<org.bytedeco.javacv.Blobs: int ColorD>;

        $stack15 = (double) $stack14;

        RegionD[$stack16] = $stack15;

        $stack17 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        RegionD[$stack17] = 1.0;

        $stack18 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        RegionD[$stack18] = 2.0;

        $stack21 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        $r4 = (org.bytedeco.javacv.Blobs) this;

        $stack19 = $r4.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack20 = (double) $stack19;

        RegionD[$stack21] = $stack20;

        $stack24 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        $r5 = (org.bytedeco.javacv.Blobs) this;

        $stack22 = $r5.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack23 = (double) $stack22;

        RegionD[$stack24] = $stack23;

        $stack29 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        $r6 = (org.bytedeco.javacv.Blobs) this;

        $stack26 = $r6.<org.bytedeco.javacv.Blobs: int jcol>;

        $r7 = (org.bytedeco.javacv.Blobs) this;

        $stack25 = $r7.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack27 = $stack26 * $stack25;

        $stack28 = (double) $stack27;

        RegionD[$stack29] = $stack28;

        $stack34 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        $r8 = (org.bytedeco.javacv.Blobs) this;

        $stack31 = $r8.<org.bytedeco.javacv.Blobs: int jrow>;

        $r9 = (org.bytedeco.javacv.Blobs) this;

        $stack30 = $r9.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack32 = $stack31 * $stack30;

        $stack33 = (double) $stack32;

        RegionD[$stack34] = $stack33;

        $stack39 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        $r10 = (org.bytedeco.javacv.Blobs) this;

        $stack36 = $r10.<org.bytedeco.javacv.Blobs: int jcol>;

        $r11 = (org.bytedeco.javacv.Blobs) this;

        $stack35 = $r11.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack37 = $stack36 * $stack35;

        $stack38 = (double) $stack37;

        RegionD[$stack39] = $stack38;

        $stack42 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $r12 = (org.bytedeco.javacv.Blobs) this;

        $stack40 = $r12.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack41 = (double) $stack40;

        RegionD[$stack42] = $stack41;

        $stack45 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $r13 = (org.bytedeco.javacv.Blobs) this;

        $stack43 = $r13.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack44 = (double) $stack43;

        RegionD[$stack45] = $stack44;

        $stack48 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $r14 = (org.bytedeco.javacv.Blobs) this;

        $stack46 = $r14.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack47 = (double) $stack46;

        RegionD[$stack48] = $stack47;

        $stack51 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $r15 = (org.bytedeco.javacv.Blobs) this;

        $stack49 = $r15.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack50 = (double) $stack49;

        RegionD[$stack51] = $stack50;

        $stack53 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r16 = (org.bytedeco.javacv.Blobs) this;

        $stack52 = $r16.<org.bytedeco.javacv.Blobs: int LabelD>;

        $stack55 = $stack53[$stack52];

        $stack54 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(RegionD, 0, $stack55, 0, $stack54);

        $stack57 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $r17 = (org.bytedeco.javacv.Blobs) this;

        $stack56 = $r17.<org.bytedeco.javacv.Blobs: int LabelD>;

        $stack57[$stack56] = -1;

        $stack59 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r18 = (org.bytedeco.javacv.Blobs) this;

        $stack58 = $r18.<org.bytedeco.javacv.Blobs: int LabelB>;

        RegionB = $stack59[$stack58];

        $stack60 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack61 = RegionB[$stack60];

        $stack62 = $stack61 + 1.0;

        RegionB[$stack60] = $stack62;

        $stack64 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r19 = (org.bytedeco.javacv.Blobs) this;

        $stack63 = $r19.<org.bytedeco.javacv.Blobs: int LabelB>;

        $stack66 = $stack64[$stack63];

        $stack65 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(RegionB, 0, $stack66, 0, $stack65);

        $stack68 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r20 = (org.bytedeco.javacv.Blobs) this;

        $stack67 = $r20.<org.bytedeco.javacv.Blobs: int LabelC>;

        RegionC = $stack68[$stack67];

        $stack69 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack70 = RegionC[$stack69];

        $stack71 = $stack70 + 1.0;

        RegionC[$stack69] = $stack71;

        $stack73 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $r21 = (org.bytedeco.javacv.Blobs) this;

        $stack72 = $r21.<org.bytedeco.javacv.Blobs: int LabelC>;

        $stack75 = $stack73[$stack72];

        $stack74 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(RegionC, 0, $stack75, 0, $stack74);

        return;
    }

    public void Subsume(int, int, int)
    {
        Blobs this;
        int GoodLabel, BadLabel, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack18, $stack22, $stack23, PSign, $stack29, $stack30, $stack34, $stack35, $stack39, $stack40, $stack44, $stack45, $stack49, $stack50, $stack54, $stack55, $stack58, $stack60, $stack61, $stack64, $stack66, $stack67, $stack70, $stack72, $stack73, $stack76, $stack79;
        double[][] $stack6, $stack7, $stack78;
        double[] GoodRegion, BadRegion, $stack80;
        double $stack9, $stack12, $stack15, $stack19, $stack20, $stack21, $stack24, $stack25, $stack26, $stack27, $stack28, $stack31, $stack32, $stack33, $stack36, $stack37, $stack38, $stack41, $stack42, $stack43, $stack46, $stack47, $stack48, $stack51, $stack52, $stack53, $stack56, $stack57, $stack59, $stack62, $stack63, $stack65, $stack68, $stack69, $stack71, $stack74, $stack75, $stack77;
        org.bytedeco.javacv.Blobs $r0;

        this := @this: Blobs;

        GoodLabel := @parameter0: int;

        BadLabel := @parameter1: int;

        PSign := @parameter2: int;

        $r0 = (org.bytedeco.javacv.Blobs) this;

        $r0.<org.bytedeco.javacv.Blobs: int LabelD> = GoodLabel;

        $stack6 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        GoodRegion = $stack6[GoodLabel];

        $stack7 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        BadRegion = $stack7[BadLabel];

        $stack10 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $stack8 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $stack9 = GoodRegion[$stack8];

        GoodRegion[$stack10] = $stack9;

        $stack13 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack11 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack12 = GoodRegion[$stack11];

        GoodRegion[$stack13] = $stack12;

        $stack16 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $stack14 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $stack15 = GoodRegion[$stack14];

        GoodRegion[$stack16] = $stack15;

        $stack17 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack20 = GoodRegion[$stack17];

        $stack18 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack19 = BadRegion[$stack18];

        $stack21 = $stack20 + $stack19;

        GoodRegion[$stack17] = $stack21;

        $stack22 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack27 = GoodRegion[$stack22];

        $stack23 = <org.bytedeco.javacv.Blobs: int BLOBPERIMETER>;

        $stack25 = BadRegion[$stack23];

        $stack24 = (double) PSign;

        $stack26 = $stack25 * $stack24;

        $stack28 = $stack27 + $stack26;

        GoodRegion[$stack22] = $stack28;

        $stack29 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        $stack32 = GoodRegion[$stack29];

        $stack30 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        $stack31 = BadRegion[$stack30];

        $stack33 = $stack32 + $stack31;

        GoodRegion[$stack29] = $stack33;

        $stack34 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        $stack37 = GoodRegion[$stack34];

        $stack35 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        $stack36 = BadRegion[$stack35];

        $stack38 = $stack37 + $stack36;

        GoodRegion[$stack34] = $stack38;

        $stack39 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        $stack42 = GoodRegion[$stack39];

        $stack40 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        $stack41 = BadRegion[$stack40];

        $stack43 = $stack42 + $stack41;

        GoodRegion[$stack39] = $stack43;

        $stack44 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        $stack47 = GoodRegion[$stack44];

        $stack45 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        $stack46 = BadRegion[$stack45];

        $stack48 = $stack47 + $stack46;

        GoodRegion[$stack44] = $stack48;

        $stack49 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        $stack52 = GoodRegion[$stack49];

        $stack50 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        $stack51 = BadRegion[$stack50];

        $stack53 = $stack52 + $stack51;

        GoodRegion[$stack49] = $stack53;

        $stack58 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack54 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack57 = GoodRegion[$stack54];

        $stack55 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        $stack56 = BadRegion[$stack55];

        $stack59 = staticinvoke <java.lang.Math: double min(double,double)>($stack57, $stack56);

        GoodRegion[$stack58] = $stack59;

        $stack64 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack60 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack63 = GoodRegion[$stack60];

        $stack61 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack62 = BadRegion[$stack61];

        $stack65 = staticinvoke <java.lang.Math: double max(double,double)>($stack63, $stack62);

        GoodRegion[$stack64] = $stack65;

        $stack70 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack66 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack69 = GoodRegion[$stack66];

        $stack67 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        $stack68 = BadRegion[$stack67];

        $stack71 = staticinvoke <java.lang.Math: double min(double,double)>($stack69, $stack68);

        GoodRegion[$stack70] = $stack71;

        $stack76 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack72 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack75 = GoodRegion[$stack72];

        $stack73 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack74 = BadRegion[$stack73];

        $stack77 = staticinvoke <java.lang.Math: double max(double,double)>($stack75, $stack74);

        GoodRegion[$stack76] = $stack77;

        $stack78 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack80 = $stack78[GoodLabel];

        $stack79 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(GoodRegion, 0, $stack80, 0, $stack79);

        return;
    }

    public static int SubsumptionChain(int)
    {
        int x, $stack1;

        x := @parameter0: int;

        $stack1 = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int,int)>(x, 0);

        return $stack1;
    }

    public static int SubsumptionChain(int, int)
    {
        int Print, x, Lastx;
        java.io.PrintStream $stack4;
        int[] $stack6;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack13, $stack16, $stack17, $stack18, $stack19;
        java.lang.String Str;

        x := @parameter0: int;

        Print := @parameter1: int;

        Str = "";

        if Print <= 0 goto label1;

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subsumption chain for ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(x);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        Str = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        Lastx = x;

     label2:
        if x <= -1 goto label5;

        Lastx = x;

        if Print <= 0 goto label3;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Str);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(x);

        Str = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        if x != 0 goto label4;

        goto label5;

     label4:
        $stack6 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        x = $stack6[x];

        goto label2;

     label5:
        if Print <= 0 goto label6;

        $stack4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack4.<java.io.PrintStream: void println(java.lang.String)>(Str);

     label6:
        return Lastx;
    }

    public int BlobAnalysis(org.bytedeco.opencv.opencv_core.IplImage, int, int, int, int, int, int)
    {
        org.bytedeco.opencv.opencv_core.IplImage Src;
        org.bytedeco.opencv.opencv_core.CvMat SrcMat;
        int SrcCols, SrcRows, $stack33, $stack34, $stack35, $stack37, Border, $stack41, $stack42, $stack43, $stack44, $stack46, $stack48, $stack58, $stack68, $stack69, $stack70, $stack73, $stack76, $stack78, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, $stack86, $stack87, $stack88, $stack89, $stack91, $stack92, $stack93, $stack95, $stack97, $stack99, $stack100, $stack101, $stack102, $stack103, $stack104, $stack135, $stack138, $stack144, $stack146, $stack148, $stack153, $stack154, $stack161, MinArea, $stack165, $stack170, $stack173, $stack179, $stack181, $stack183, $stack188, $stack189, $stack195, $stack196, $stack200, $stack202, $stack203, $stack205, $stack206, $stack207, $stack208, $stack210, $stack211, $stack212, $stack213, $stack214, $stack215, $stack216, $stack217, $stack218, $stack219, $stack220, $stack221, $stack223, $stack232, $stack233, $stack237, $stack242, $stack245, $stack246, $stack249, $stack252, $stack253, $stack254, $stack257, $stack262, $stack263, $stack264, $stack265, $stack267, $stack270, $stack275, $stack287, $stack290, $stack291, $stack292, $stack293, $stack294, $stack295, $stack296, $stack297, $stack304, $stack305, $stack306, $stack308, $stack309, $stack310, $stack312, $stack314, $stack316, $stack317, $stack318, $stack320, $stack321, $stack323, $stack324, $stack326, $stack328, $stack329, $stack330, $stack331, $stack332, $stack334, $stack335, $stack336, $stack337, $stack338, $stack340, $stack341, $stack342, $stack343, $stack344, $stack346, $stack347, $stack348, $stack349, $stack351, $stack352, $stack354, $stack355, $stack356, $stack358, $stack360, $stack361, $stack363, $stack364, $stack366, Col0, Row0, Cols, Rows, k, $stack39, irow, icol, $stack209, LabelBRoot, LabelCRoot, LabelRoot, LabelX, NextLabelX, $stack222, $stack224, $stack227, $stack226, Case#130, $stack109, $stack110, $stack111, $stack112, $stack113, $stack115;
        java.io.PrintStream $stack36;
        Blobs this;
        double[][] $stack40, $stack77, $stack90, $stack94, $stack98, $stack137, $stack147, $stack160, $stack172, $stack182, $stack114;
        double $stack45, $stack47, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack71, $stack72, $stack74, $stack75, $stack105, $stack106, $stack107, $stack139, $stack143, $stack145, $stack162, $stack166, $stack174, $stack178, $stack180, $stack204, $stack307, $stack319, $stack333, $stack339, $stack345, LabelCRoot#156, LabelX#157, SumY, SumXX, SumYY, SumXY;
        double[] $stack79, $stack96, $stack149, $stack184, k#11, LabelBRoot#133, $stack116;
        byte $stack108, $stack118, FillColor, Case#21;
        int[] $stack134, $stack140, $stack142, $stack152, $stack155, $stack163, $stack167, $stack169, $stack175, $stack177, $stack187, $stack190, $stack244, $stack248, $stack271, $stack272, $stack313, $stack325, $stack353, $stack359, $stack365, $stack393, $stack228;
        int[][] $stack311, $stack322, $stack350, $stack357, $stack362, $stack225;
        org.bytedeco.javacv.Blobs $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122;

        this := @this: Blobs;

        Src := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        Col0 := @parameter1: int;

        Row0 := @parameter2: int;

        Cols := @parameter3: int;

        Rows := @parameter4: int;

        Border := @parameter5: int;

        MinArea := @parameter6: int;

        SrcMat = virtualinvoke Src.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.CvMat asCvMat()>();

        SrcCols = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        SrcRows = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        if Col0 >= 0 goto label01;

        Col0 = 0;

     label01:
        if Row0 >= 0 goto label02;

        Row0 = 0;

     label02:
        if Cols >= 0 goto label03;

        Cols = SrcCols;

     label03:
        if Rows >= 0 goto label04;

        Rows = SrcRows;

     label04:
        $stack33 = Col0 + Cols;

        if $stack33 <= SrcCols goto label05;

        Cols = SrcCols - Col0;

     label05:
        $stack34 = Row0 + Rows;

        if $stack34 <= SrcRows goto label06;

        Rows = SrcRows - Row0;

     label06:
        $stack35 = <org.bytedeco.javacv.Blobs: int BLOBCOLCOUNT>;

        if Cols > $stack35 goto label07;

        $stack37 = <org.bytedeco.javacv.Blobs: int BLOBROWCOUNT>;

        if Rows <= $stack37 goto label08;

     label07:
        $stack36 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack36.<java.io.PrintStream: void println(java.lang.String)>("Error in Class Blobs: Image too large: Edit Blobs.java");

        staticinvoke <java.lang.System: void exit(int)>(666);

        return 0;

     label08:
        FillColor = 0;

        if Border <= 0 goto label09;

        FillColor = 1;

     label09:
        $r0 = (org.bytedeco.javacv.Blobs) this;

        $r0.<org.bytedeco.javacv.Blobs: int LabelD> = 0;

        $r1 = (org.bytedeco.javacv.Blobs) this;

        $r1.<org.bytedeco.javacv.Blobs: int LabelC> = 0;

        $r2 = (org.bytedeco.javacv.Blobs) this;

        $r2.<org.bytedeco.javacv.Blobs: int LabelB> = 0;

        $r3 = (org.bytedeco.javacv.Blobs) this;

        $r3.<org.bytedeco.javacv.Blobs: int LabelA> = 0;

        $r4 = (org.bytedeco.javacv.Blobs) this;

        $r4.<org.bytedeco.javacv.Blobs: int ColorD> = FillColor;

        $r5 = (org.bytedeco.javacv.Blobs) this;

        $r5.<org.bytedeco.javacv.Blobs: int ColorC> = FillColor;

        $r6 = (org.bytedeco.javacv.Blobs) this;

        $r6.<org.bytedeco.javacv.Blobs: int ColorB> = FillColor;

        $r7 = (org.bytedeco.javacv.Blobs) this;

        $r7.<org.bytedeco.javacv.Blobs: int ColorA> = FillColor;

        k = 0;

     label10:
        $stack39 = <org.bytedeco.javacv.Blobs: int BLOBTOTALCOUNT>;

        if k >= $stack39 goto label11;

        $stack393 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack393[k] = -1;

        k = k + 1;

        goto label10;

     label11:
        <org.bytedeco.javacv.Blobs: int MaxLabel> = 0;

        $stack40 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        k#11 = $stack40[0];

        $stack41 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        k#11[$stack41] = 0.0;

        $stack42 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        k#11[$stack42] = -1.0;

        $stack46 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack43 = Rows + Cols;

        $stack44 = $stack43 + 4;

        $stack45 = (double) $stack44;

        k#11[$stack46] = $stack45;

        $stack48 = <org.bytedeco.javacv.Blobs: int BLOBCOLOR>;

        $stack47 = (double) FillColor;

        k#11[$stack48] = $stack47;

        $stack58 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        $stack49 = (double) Cols;

        $stack52 = 2.0 + $stack49;

        $stack50 = (double) Cols;

        $stack51 = $stack50 - 1.0;

        $stack53 = $stack52 * $stack51;

        $stack55 = 0.5 * $stack53;

        $stack54 = (double) Rows;

        $stack56 = $stack55 - $stack54;

        $stack57 = $stack56 - 1.0;

        k#11[$stack58] = $stack57;

        $stack68 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        $stack59 = (double) Rows;

        $stack62 = 2.0 + $stack59;

        $stack60 = (double) Rows;

        $stack61 = $stack60 - 1.0;

        $stack63 = $stack62 * $stack61;

        $stack65 = 0.5 * $stack63;

        $stack64 = (double) Cols;

        $stack66 = $stack65 - $stack64;

        $stack67 = $stack66 - 1.0;

        k#11[$stack68] = $stack67;

        $stack69 = <org.bytedeco.javacv.Blobs: int BLOBMINX>;

        k#11[$stack69] = -1.0;

        $stack70 = <org.bytedeco.javacv.Blobs: int BLOBMINY>;

        k#11[$stack70] = -1.0;

        $stack73 = <org.bytedeco.javacv.Blobs: int BLOBMAXX>;

        $stack71 = (double) Cols;

        $stack72 = $stack71 + 1.0;

        k#11[$stack73] = $stack72;

        $stack76 = <org.bytedeco.javacv.Blobs: int BLOBMAXY>;

        $stack74 = (double) Rows;

        $stack75 = $stack74 + 1.0;

        k#11[$stack76] = $stack75;

        $stack77 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack79 = $stack77[0];

        $stack78 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(k#11, 0, $stack79, 0, $stack78);

        irow = Row0;

     label12:
        $stack80 = Row0 + Rows;

        if irow >= $stack80 goto label50;

        $stack195 = irow - Row0;

        $r8 = (org.bytedeco.javacv.Blobs) this;

        $r8.<org.bytedeco.javacv.Blobs: int jrow> = $stack195;

        icol = Col0;

     label13:
        $stack196 = Col0 + Cols;

        if icol >= $stack196 goto label49;

        $stack200 = icol - Col0;

        $r9 = (org.bytedeco.javacv.Blobs) this;

        $r9.<org.bytedeco.javacv.Blobs: int jcol> = $stack200;

        $r10 = (org.bytedeco.javacv.Blobs) this;

        $r10.<org.bytedeco.javacv.Blobs: int ColorC> = FillColor;

        $r11 = (org.bytedeco.javacv.Blobs) this;

        $r11.<org.bytedeco.javacv.Blobs: int ColorB> = FillColor;

        $r12 = (org.bytedeco.javacv.Blobs) this;

        $r12.<org.bytedeco.javacv.Blobs: int ColorA> = FillColor;

        $r13 = (org.bytedeco.javacv.Blobs) this;

        $r13.<org.bytedeco.javacv.Blobs: int LabelD> = 0;

        $r14 = (org.bytedeco.javacv.Blobs) this;

        $r14.<org.bytedeco.javacv.Blobs: int LabelC> = 0;

        $r15 = (org.bytedeco.javacv.Blobs) this;

        $r15.<org.bytedeco.javacv.Blobs: int LabelB> = 0;

        $r16 = (org.bytedeco.javacv.Blobs) this;

        $r16.<org.bytedeco.javacv.Blobs: int LabelA> = 0;

        $r17 = (org.bytedeco.javacv.Blobs) this;

        $stack203 = $r17.<org.bytedeco.javacv.Blobs: int jrow>;

        $r18 = (org.bytedeco.javacv.Blobs) this;

        $stack202 = $r18.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack204 = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>($stack203, $stack202);

        $stack205 = (int) $stack204;

        $r19 = (org.bytedeco.javacv.Blobs) this;

        $r19.<org.bytedeco.javacv.Blobs: int ColorD> = $stack205;

        $r20 = (org.bytedeco.javacv.Blobs) this;

        $stack206 = $r20.<org.bytedeco.javacv.Blobs: int jrow>;

        if $stack206 == 0 goto label14;

        $r21 = (org.bytedeco.javacv.Blobs) this;

        $stack328 = $r21.<org.bytedeco.javacv.Blobs: int jcol>;

        if $stack328 != 0 goto label16;

     label14:
        $r22 = (org.bytedeco.javacv.Blobs) this;

        $stack207 = $r22.<org.bytedeco.javacv.Blobs: int jcol>;

        if $stack207 <= 0 goto label15;

        $r23 = (org.bytedeco.javacv.Blobs) this;

        $stack318 = $r23.<org.bytedeco.javacv.Blobs: int jrow>;

        $r24 = (org.bytedeco.javacv.Blobs) this;

        $stack316 = $r24.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack317 = $stack316 - 1;

        $stack319 = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>($stack318, $stack317);

        $stack320 = (int) $stack319;

        $r25 = (org.bytedeco.javacv.Blobs) this;

        $r25.<org.bytedeco.javacv.Blobs: int ColorC> = $stack320;

        $stack322 = <org.bytedeco.javacv.Blobs: int[][] LabelMat>;

        $r26 = (org.bytedeco.javacv.Blobs) this;

        $stack321 = $r26.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack325 = $stack322[$stack321];

        $r27 = (org.bytedeco.javacv.Blobs) this;

        $stack323 = $r27.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack324 = $stack323 - 1;

        $stack326 = $stack325[$stack324];

        $r28 = (org.bytedeco.javacv.Blobs) this;

        $r28.<org.bytedeco.javacv.Blobs: int LabelC> = $stack326;

     label15:
        $r29 = (org.bytedeco.javacv.Blobs) this;

        $stack208 = $r29.<org.bytedeco.javacv.Blobs: int jrow>;

        if $stack208 <= 0 goto label20;

        $r30 = (org.bytedeco.javacv.Blobs) this;

        $stack304 = $r30.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack306 = $stack304 - 1;

        $r31 = (org.bytedeco.javacv.Blobs) this;

        $stack305 = $r31.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack307 = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>($stack306, $stack305);

        $stack308 = (int) $stack307;

        $r32 = (org.bytedeco.javacv.Blobs) this;

        $r32.<org.bytedeco.javacv.Blobs: int ColorB> = $stack308;

        $stack311 = <org.bytedeco.javacv.Blobs: int[][] LabelMat>;

        $r33 = (org.bytedeco.javacv.Blobs) this;

        $stack309 = $r33.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack310 = $stack309 - 1;

        $stack313 = $stack311[$stack310];

        $r34 = (org.bytedeco.javacv.Blobs) this;

        $stack312 = $r34.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack314 = $stack313[$stack312];

        $r35 = (org.bytedeco.javacv.Blobs) this;

        $r35.<org.bytedeco.javacv.Blobs: int LabelB> = $stack314;

        goto label20;

     label16:
        $r36 = (org.bytedeco.javacv.Blobs) this;

        $stack329 = $r36.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack332 = $stack329 - 1;

        $r37 = (org.bytedeco.javacv.Blobs) this;

        $stack330 = $r37.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack331 = $stack330 - 1;

        $stack333 = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>($stack332, $stack331);

        $stack334 = (int) $stack333;

        $r38 = (org.bytedeco.javacv.Blobs) this;

        $r38.<org.bytedeco.javacv.Blobs: int ColorA> = $stack334;

        $r39 = (org.bytedeco.javacv.Blobs) this;

        $stack335 = $r39.<org.bytedeco.javacv.Blobs: int ColorA>;

        if $stack335 <= 0 goto label17;

        $r40 = (org.bytedeco.javacv.Blobs) this;

        $r40.<org.bytedeco.javacv.Blobs: int ColorA> = 1;

     label17:
        $r41 = (org.bytedeco.javacv.Blobs) this;

        $stack336 = $r41.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack338 = $stack336 - 1;

        $r42 = (org.bytedeco.javacv.Blobs) this;

        $stack337 = $r42.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack339 = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>($stack338, $stack337);

        $stack340 = (int) $stack339;

        $r43 = (org.bytedeco.javacv.Blobs) this;

        $r43.<org.bytedeco.javacv.Blobs: int ColorB> = $stack340;

        $r44 = (org.bytedeco.javacv.Blobs) this;

        $stack341 = $r44.<org.bytedeco.javacv.Blobs: int ColorB>;

        if $stack341 <= 0 goto label18;

        $r45 = (org.bytedeco.javacv.Blobs) this;

        $r45.<org.bytedeco.javacv.Blobs: int ColorB> = 1;

     label18:
        $r46 = (org.bytedeco.javacv.Blobs) this;

        $stack344 = $r46.<org.bytedeco.javacv.Blobs: int jrow>;

        $r47 = (org.bytedeco.javacv.Blobs) this;

        $stack342 = $r47.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack343 = $stack342 - 1;

        $stack345 = virtualinvoke SrcMat.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>($stack344, $stack343);

        $stack346 = (int) $stack345;

        $r48 = (org.bytedeco.javacv.Blobs) this;

        $r48.<org.bytedeco.javacv.Blobs: int ColorC> = $stack346;

        $r49 = (org.bytedeco.javacv.Blobs) this;

        $stack347 = $r49.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack347 <= 0 goto label19;

        $r50 = (org.bytedeco.javacv.Blobs) this;

        $r50.<org.bytedeco.javacv.Blobs: int ColorC> = 1;

     label19:
        $stack350 = <org.bytedeco.javacv.Blobs: int[][] LabelMat>;

        $r51 = (org.bytedeco.javacv.Blobs) this;

        $stack348 = $r51.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack349 = $stack348 - 1;

        $stack353 = $stack350[$stack349];

        $r52 = (org.bytedeco.javacv.Blobs) this;

        $stack351 = $r52.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack352 = $stack351 - 1;

        $stack354 = $stack353[$stack352];

        $r53 = (org.bytedeco.javacv.Blobs) this;

        $r53.<org.bytedeco.javacv.Blobs: int LabelA> = $stack354;

        $stack357 = <org.bytedeco.javacv.Blobs: int[][] LabelMat>;

        $r54 = (org.bytedeco.javacv.Blobs) this;

        $stack355 = $r54.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack356 = $stack355 - 1;

        $stack359 = $stack357[$stack356];

        $r55 = (org.bytedeco.javacv.Blobs) this;

        $stack358 = $r55.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack360 = $stack359[$stack358];

        $r56 = (org.bytedeco.javacv.Blobs) this;

        $r56.<org.bytedeco.javacv.Blobs: int LabelB> = $stack360;

        $stack362 = <org.bytedeco.javacv.Blobs: int[][] LabelMat>;

        $r57 = (org.bytedeco.javacv.Blobs) this;

        $stack361 = $r57.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack365 = $stack362[$stack361];

        $r58 = (org.bytedeco.javacv.Blobs) this;

        $stack363 = $r58.<org.bytedeco.javacv.Blobs: int jcol>;

        $stack364 = $stack363 - 1;

        $stack366 = $stack365[$stack364];

        $r59 = (org.bytedeco.javacv.Blobs) this;

        $r59.<org.bytedeco.javacv.Blobs: int LabelC> = $stack366;

     label20:
        $r60 = (org.bytedeco.javacv.Blobs) this;

        $stack209 = $r60.<org.bytedeco.javacv.Blobs: int ColorA>;

        if $stack209 <= 0 goto label21;

        $r61 = (org.bytedeco.javacv.Blobs) this;

        $r61.<org.bytedeco.javacv.Blobs: int ColorA> = 1;

     label21:
        $r62 = (org.bytedeco.javacv.Blobs) this;

        $stack210 = $r62.<org.bytedeco.javacv.Blobs: int ColorB>;

        if $stack210 <= 0 goto label22;

        $r63 = (org.bytedeco.javacv.Blobs) this;

        $r63.<org.bytedeco.javacv.Blobs: int ColorB> = 1;

     label22:
        $r64 = (org.bytedeco.javacv.Blobs) this;

        $stack211 = $r64.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack211 <= 0 goto label23;

        $r65 = (org.bytedeco.javacv.Blobs) this;

        $r65.<org.bytedeco.javacv.Blobs: int ColorC> = 1;

     label23:
        $r66 = (org.bytedeco.javacv.Blobs) this;

        $stack212 = $r66.<org.bytedeco.javacv.Blobs: int ColorD>;

        if $stack212 <= 0 goto label24;

        $r67 = (org.bytedeco.javacv.Blobs) this;

        $r67.<org.bytedeco.javacv.Blobs: int ColorD> = 1;

     label24:
        $r68 = (org.bytedeco.javacv.Blobs) this;

        $stack214 = $r68.<org.bytedeco.javacv.Blobs: int ColorA>;

        $r69 = (org.bytedeco.javacv.Blobs) this;

        $stack213 = $r69.<org.bytedeco.javacv.Blobs: int ColorB>;

        if $stack214 != $stack213 goto label28;

        $r70 = (org.bytedeco.javacv.Blobs) this;

        $stack293 = $r70.<org.bytedeco.javacv.Blobs: int ColorC>;

        $r71 = (org.bytedeco.javacv.Blobs) this;

        $stack292 = $r71.<org.bytedeco.javacv.Blobs: int ColorD>;

        if $stack293 != $stack292 goto label26;

        $r72 = (org.bytedeco.javacv.Blobs) this;

        $stack297 = $r72.<org.bytedeco.javacv.Blobs: int ColorA>;

        $r73 = (org.bytedeco.javacv.Blobs) this;

        $stack296 = $r73.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack297 != $stack296 goto label25;

        Case#21 = 1;

        goto label32;

     label25:
        Case#21 = 2;

        goto label32;

     label26:
        $r74 = (org.bytedeco.javacv.Blobs) this;

        $stack295 = $r74.<org.bytedeco.javacv.Blobs: int ColorA>;

        $r75 = (org.bytedeco.javacv.Blobs) this;

        $stack294 = $r75.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack295 != $stack294 goto label27;

        Case#21 = 5;

        goto label32;

     label27:
        Case#21 = 6;

        goto label32;

     label28:
        $r76 = (org.bytedeco.javacv.Blobs) this;

        $stack216 = $r76.<org.bytedeco.javacv.Blobs: int ColorC>;

        $r77 = (org.bytedeco.javacv.Blobs) this;

        $stack215 = $r77.<org.bytedeco.javacv.Blobs: int ColorD>;

        if $stack216 != $stack215 goto label30;

        $r78 = (org.bytedeco.javacv.Blobs) this;

        $stack291 = $r78.<org.bytedeco.javacv.Blobs: int ColorA>;

        $r79 = (org.bytedeco.javacv.Blobs) this;

        $stack290 = $r79.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack291 != $stack290 goto label29;

        Case#21 = 3;

        goto label32;

     label29:
        Case#21 = 4;

        goto label32;

     label30:
        $r80 = (org.bytedeco.javacv.Blobs) this;

        $stack218 = $r80.<org.bytedeco.javacv.Blobs: int ColorA>;

        $r81 = (org.bytedeco.javacv.Blobs) this;

        $stack217 = $r81.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack218 != $stack217 goto label31;

        Case#21 = 7;

        goto label32;

     label31:
        Case#21 = 8;

     label32:
        if Case#21 != 1 goto label33;

        $r82 = (org.bytedeco.javacv.Blobs) this;

        $stack287 = $r82.<org.bytedeco.javacv.Blobs: int LabelC>;

        $r83 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r83.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>($stack287, -1, -1);

        goto label44;

     label33:
        if Case#21 == 2 goto label34;

        if Case#21 != 3 goto label35;

     label34:
        $r84 = (org.bytedeco.javacv.Blobs) this;

        $stack221 = $r84.<org.bytedeco.javacv.Blobs: int LabelC>;

        $r85 = (org.bytedeco.javacv.Blobs) this;

        $stack220 = $r85.<org.bytedeco.javacv.Blobs: int LabelB>;

        $r86 = (org.bytedeco.javacv.Blobs) this;

        $stack219 = $r86.<org.bytedeco.javacv.Blobs: int LabelC>;

        $r87 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r87.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>($stack221, $stack220, $stack219);

        goto label44;

     label35:
        if Case#21 == 5 goto label36;

        if Case#21 != 8 goto label39;

     label36:
        $r88 = (org.bytedeco.javacv.Blobs) this;

        $stack252 = $r88.<org.bytedeco.javacv.Blobs: int jrow>;

        if $stack252 == Rows goto label37;

        $r89 = (org.bytedeco.javacv.Blobs) this;

        $stack257 = $r89.<org.bytedeco.javacv.Blobs: int jcol>;

        if $stack257 != Cols goto label38;

     label37:
        $r90 = (org.bytedeco.javacv.Blobs) this;

        $stack253 = $r90.<org.bytedeco.javacv.Blobs: int ColorD>;

        if $stack253 != FillColor goto label38;

        $r91 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r91.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>(0, -1, -1);

        goto label44;

     label38:
        $r92 = (org.bytedeco.javacv.Blobs) this;

        $stack254 = $r92.<org.bytedeco.javacv.Blobs: int LabelB>;

        $r93 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r93.<org.bytedeco.javacv.Blobs: void NewRegion(int)>($stack254);

        goto label44;

     label39:
        if Case#21 == 6 goto label40;

        if Case#21 != 7 goto label41;

     label40:
        $r94 = (org.bytedeco.javacv.Blobs) this;

        $stack264 = $r94.<org.bytedeco.javacv.Blobs: int LabelB>;

        $r95 = (org.bytedeco.javacv.Blobs) this;

        $stack263 = $r95.<org.bytedeco.javacv.Blobs: int LabelB>;

        $r96 = (org.bytedeco.javacv.Blobs) this;

        $stack262 = $r96.<org.bytedeco.javacv.Blobs: int LabelC>;

        $r97 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r97.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>($stack264, $stack263, $stack262);

        goto label44;

     label41:
        $r98 = (org.bytedeco.javacv.Blobs) this;

        $stack265 = $r98.<org.bytedeco.javacv.Blobs: int LabelB>;

        LabelBRoot = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>($stack265);

        $r99 = (org.bytedeco.javacv.Blobs) this;

        $stack267 = $r99.<org.bytedeco.javacv.Blobs: int LabelC>;

        LabelCRoot = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>($stack267);

        LabelRoot = staticinvoke <java.lang.Math: int min(int,int)>(LabelBRoot, LabelCRoot);

        if LabelBRoot >= LabelCRoot goto label42;

        $r100 = (org.bytedeco.javacv.Blobs) this;

        $stack275 = $r100.<org.bytedeco.javacv.Blobs: int LabelB>;

        $r101 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r101.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>($stack275, -1, -1);

        $r102 = (org.bytedeco.javacv.Blobs) this;

        LabelX = $r102.<org.bytedeco.javacv.Blobs: int LabelC>;

        goto label43;

     label42:
        $r103 = (org.bytedeco.javacv.Blobs) this;

        $stack270 = $r103.<org.bytedeco.javacv.Blobs: int LabelC>;

        $r104 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r104.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>($stack270, -1, -1);

        $r105 = (org.bytedeco.javacv.Blobs) this;

        LabelX = $r105.<org.bytedeco.javacv.Blobs: int LabelB>;

     label43:
        if LabelRoot >= LabelX goto label44;

        $stack271 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        NextLabelX = $stack271[LabelX];

        $stack272 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack272[LabelX] = LabelRoot;

        LabelX = NextLabelX;

        goto label43;

     label44:
        $r106 = (org.bytedeco.javacv.Blobs) this;

        $stack222 = $r106.<org.bytedeco.javacv.Blobs: int jrow>;

        if $stack222 == Rows goto label45;

        $r107 = (org.bytedeco.javacv.Blobs) this;

        $stack249 = $r107.<org.bytedeco.javacv.Blobs: int jcol>;

        if $stack249 != Cols goto label48;

     label45:
        $r108 = (org.bytedeco.javacv.Blobs) this;

        $stack223 = $r108.<org.bytedeco.javacv.Blobs: int ColorD>;

        if $stack223 != FillColor goto label48;

        $r109 = (org.bytedeco.javacv.Blobs) this;

        $stack232 = $r109.<org.bytedeco.javacv.Blobs: int jcol>;

        if $stack232 >= Cols goto label46;

        $r110 = (org.bytedeco.javacv.Blobs) this;

        $stack245 = $r110.<org.bytedeco.javacv.Blobs: int ColorC>;

        if $stack245 == FillColor goto label47;

        $r111 = (org.bytedeco.javacv.Blobs) this;

        $stack246 = $r111.<org.bytedeco.javacv.Blobs: int LabelB>;

        LabelBRoot = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>($stack246);

        $stack248 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack248[LabelBRoot] = 0;

        goto label47;

     label46:
        $r112 = (org.bytedeco.javacv.Blobs) this;

        $stack233 = $r112.<org.bytedeco.javacv.Blobs: int jrow>;

        if $stack233 >= Rows goto label47;

        $r113 = (org.bytedeco.javacv.Blobs) this;

        $stack237 = $r113.<org.bytedeco.javacv.Blobs: int ColorB>;

        if $stack237 == FillColor goto label47;

        $r114 = (org.bytedeco.javacv.Blobs) this;

        $stack242 = $r114.<org.bytedeco.javacv.Blobs: int LabelC>;

        LabelBRoot = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>($stack242);

        $stack244 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack244[LabelBRoot] = 0;

     label47:
        $r115 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r115.<org.bytedeco.javacv.Blobs: void OldRegion(int,int,int)>(0, -1, -1);

     label48:
        $stack225 = <org.bytedeco.javacv.Blobs: int[][] LabelMat>;

        $r116 = (org.bytedeco.javacv.Blobs) this;

        $stack224 = $r116.<org.bytedeco.javacv.Blobs: int jrow>;

        $stack228 = $stack225[$stack224];

        $r117 = (org.bytedeco.javacv.Blobs) this;

        $stack227 = $r117.<org.bytedeco.javacv.Blobs: int jcol>;

        $r118 = (org.bytedeco.javacv.Blobs) this;

        $stack226 = $r118.<org.bytedeco.javacv.Blobs: int LabelD>;

        $stack228[$stack227] = $stack226;

        icol = icol + 1;

        goto label13;

     label49:
        irow = irow + 1;

        goto label12;

     label50:
        irow = 0;

        icol = 1;

     label51:
        $stack81 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if icol > $stack81 goto label53;

        $stack187 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack188 = $stack187[icol];

        if $stack188 <= -1 goto label52;

        irow = irow + 1;

     label52:
        $stack190 = <org.bytedeco.javacv.Blobs: int[] CondensationMap>;

        $stack189 = icol - irow;

        $stack190[icol] = $stack189;

        icol = icol + 1;

        goto label51;

     label53:
        icol = 1;

     label54:
        $stack82 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if icol > $stack82 goto label56;

        Case#130 = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>(icol);

        if Case#130 == icol goto label55;

        $r119 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r119.<org.bytedeco.javacv.Blobs: void Subsume(int,int,int)>(Case#130, icol, 1);

     label55:
        icol = icol + 1;

        goto label54;

     label56:
        icol = 0;

        Case#130 = 1;

     label57:
        $stack83 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack83 goto label59;

        $stack169 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack170 = $stack169[Case#130];

        if $stack170 >= 0 goto label58;

        $stack172 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        LabelBRoot#133 = $stack172[Case#130];

        $stack173 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack174 = LabelBRoot#133[$stack173];

        LabelCRoot = (int) $stack174;

        $stack175 = <org.bytedeco.javacv.Blobs: int[] CondensationMap>;

        LabelRoot = $stack175[Case#130];

        LabelX = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>(LabelCRoot);

        $stack177 = <org.bytedeco.javacv.Blobs: int[] CondensationMap>;

        LabelX = $stack177[LabelX];

        $stack179 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $stack178 = (double) LabelRoot;

        LabelBRoot#133[$stack179] = $stack178;

        $stack181 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack180 = (double) LabelX;

        LabelBRoot#133[$stack181] = $stack180;

        $stack182 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack184 = $stack182[LabelRoot];

        $stack183 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(LabelBRoot#133, 0, $stack184, 0, $stack183);

        icol = LabelRoot;

     label58:
        Case#130 = Case#130 + 1;

        goto label57;

     label59:
        Case#130 = icol + 1;

     label60:
        $stack84 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack84 goto label61;

        $r120 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r120.<org.bytedeco.javacv.Blobs: void ResetRegion(int)>(Case#130);

        Case#130 = Case#130 + 1;

        goto label60;

     label61:
        <org.bytedeco.javacv.Blobs: int MaxLabel> = icol;

        Case#130 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

     label62:
        if Case#130 <= 0 goto label65;

        $stack160 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        LabelBRoot#133 = $stack160[Case#130];

        $stack161 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        $stack162 = LabelBRoot#133[$stack161];

        LabelCRoot = (int) $stack162;

        if LabelCRoot >= MinArea goto label63;

        $stack165 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack166 = LabelBRoot#133[$stack165];

        LabelRoot = (int) $stack166;

        $stack167 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack167[Case#130] = LabelRoot;

        goto label64;

     label63:
        $stack163 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack163[Case#130] = -1;

     label64:
        Case#130 = Case#130 + -1;

        goto label62;

     label65:
        irow = 0;

        Case#130 = 1;

     label66:
        $stack85 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack85 goto label68;

        $stack152 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack153 = $stack152[Case#130];

        if $stack153 <= -1 goto label67;

        irow = irow + 1;

     label67:
        $stack155 = <org.bytedeco.javacv.Blobs: int[] CondensationMap>;

        $stack154 = Case#130 - irow;

        $stack155[Case#130] = $stack154;

        Case#130 = Case#130 + 1;

        goto label66;

     label68:
        Case#130 = 1;

     label69:
        $stack86 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack86 goto label71;

        LabelBRoot = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>(Case#130);

        if LabelBRoot == Case#130 goto label70;

        $r121 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r121.<org.bytedeco.javacv.Blobs: void Subsume(int,int,int)>(LabelBRoot, Case#130, -1);

     label70:
        Case#130 = Case#130 + 1;

        goto label69;

     label71:
        Case#130 = 1;

     label72:
        $stack87 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack87 goto label74;

        $stack134 = <org.bytedeco.javacv.Blobs: int[] SubsumedLabel>;

        $stack135 = $stack134[Case#130];

        if $stack135 >= 0 goto label73;

        $stack137 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        LabelBRoot#133 = $stack137[Case#130];

        $stack138 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack139 = LabelBRoot#133[$stack138];

        LabelCRoot = (int) $stack139;

        $stack140 = <org.bytedeco.javacv.Blobs: int[] CondensationMap>;

        LabelRoot = $stack140[Case#130];

        LabelX = staticinvoke <org.bytedeco.javacv.Blobs: int SubsumptionChain(int)>(LabelCRoot);

        $stack142 = <org.bytedeco.javacv.Blobs: int[] CondensationMap>;

        LabelX = $stack142[LabelX];

        $stack144 = <org.bytedeco.javacv.Blobs: int BLOBLABEL>;

        $stack143 = (double) LabelRoot;

        LabelBRoot#133[$stack144] = $stack143;

        $stack146 = <org.bytedeco.javacv.Blobs: int BLOBPARENT>;

        $stack145 = (double) LabelX;

        LabelBRoot#133[$stack146] = $stack145;

        $stack147 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack149 = $stack147[LabelRoot];

        $stack148 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(LabelBRoot#133, 0, $stack149, 0, $stack148);

        icol = LabelRoot;

     label73:
        Case#130 = Case#130 + 1;

        goto label72;

     label74:
        Case#130 = icol + 1;

     label75:
        $stack88 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack88 goto label76;

        $r122 = (org.bytedeco.javacv.Blobs) this;

        virtualinvoke $r122.<org.bytedeco.javacv.Blobs: void ResetRegion(int)>(Case#130);

        Case#130 = Case#130 + 1;

        goto label75;

     label76:
        <org.bytedeco.javacv.Blobs: int MaxLabel> = icol;

        Case#130 = 0;

     label77:
        $stack89 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if Case#130 > $stack89 goto label79;

        $stack98 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        LabelBRoot#133 = $stack98[Case#130];

        $stack99 = <org.bytedeco.javacv.Blobs: int BLOBAREA>;

        LabelCRoot#156 = LabelBRoot#133[$stack99];

        $stack100 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        LabelX#157 = LabelBRoot#133[$stack100];

        $stack101 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        SumY = LabelBRoot#133[$stack101];

        $stack102 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        SumXX = LabelBRoot#133[$stack102];

        $stack103 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        SumYY = LabelBRoot#133[$stack103];

        $stack104 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        SumXY = LabelBRoot#133[$stack104];

        LabelX#157 = LabelX#157 / LabelCRoot#156;

        SumY = SumY / LabelCRoot#156;

        SumXX = SumXX / LabelCRoot#156;

        SumYY = SumYY / LabelCRoot#156;

        SumXY = SumXY / LabelCRoot#156;

        $stack105 = LabelX#157 * LabelX#157;

        SumXX = SumXX - $stack105;

        $stack106 = SumY * SumY;

        SumYY = SumYY - $stack106;

        $stack107 = LabelX#157 * SumY;

        SumXY = SumXY - $stack107;

        $stack108 = SumXY cmpl -1.0E-14;

        if $stack108 <= 0 goto label78;

        $stack118 = SumXY cmpg 1.0E-14;

        if $stack118 >= 0 goto label78;

        SumXY = 0.0;

     label78:
        $stack109 = <org.bytedeco.javacv.Blobs: int BLOBSUMX>;

        LabelBRoot#133[$stack109] = LabelX#157;

        $stack110 = <org.bytedeco.javacv.Blobs: int BLOBSUMY>;

        LabelBRoot#133[$stack110] = SumY;

        $stack111 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        LabelBRoot#133[$stack111] = SumXX;

        $stack112 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        LabelBRoot#133[$stack112] = SumYY;

        $stack113 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        LabelBRoot#133[$stack113] = SumXY;

        $stack114 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack116 = $stack114[Case#130];

        $stack115 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(LabelBRoot#133, 0, $stack116, 0, $stack115);

        Case#130 = Case#130 + 1;

        goto label77;

     label79:
        $stack90 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        k#11 = $stack90[0];

        $stack93 = <org.bytedeco.javacv.Blobs: int BLOBSUMXX>;

        $stack92 = <org.bytedeco.javacv.Blobs: int BLOBSUMYY>;

        $stack91 = <org.bytedeco.javacv.Blobs: int BLOBSUMXY>;

        k#11[$stack91] = 0.0;

        k#11[$stack92] = 0.0;

        k#11[$stack93] = 0.0;

        $stack94 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack96 = $stack94[0];

        $stack95 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(k#11, 0, $stack96, 0, $stack95);

        $stack97 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        return $stack97;
    }

    public static void SortRegions(int)
    {
        int $stack3, $stack4, Col, i, j;
        double[][] $stack6, $stack8, $stack19, $stack21;
        double[] $stack7, $stack9, $stack10, $stack12, $stack18, $stack20;
        double $stack11, $stack13, $stack14, $stack15;
        byte $stack16;

        Col := @parameter0: int;

        i = 0;

     label1:
        $stack3 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if i >= $stack3 goto label5;

        j = i + 1;

     label2:
        $stack4 = <org.bytedeco.javacv.Blobs: int MaxLabel>;

        if j > $stack4 goto label4;

        $stack6 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack7 = $stack6[i];

        <org.bytedeco.javacv.Blobs: double[] iProperty> = $stack7;

        $stack8 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack9 = $stack8[j];

        <org.bytedeco.javacv.Blobs: double[] jProperty> = $stack9;

        $stack10 = <org.bytedeco.javacv.Blobs: double[] iProperty>;

        $stack11 = $stack10[Col];

        <org.bytedeco.javacv.Blobs: double iField> = $stack11;

        $stack12 = <org.bytedeco.javacv.Blobs: double[] jProperty>;

        $stack13 = $stack12[Col];

        <org.bytedeco.javacv.Blobs: double jField> = $stack13;

        $stack15 = <org.bytedeco.javacv.Blobs: double iField>;

        $stack14 = <org.bytedeco.javacv.Blobs: double jField>;

        $stack16 = $stack15 cmpl $stack14;

        if $stack16 <= 0 goto label3;

        $stack19 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack18 = <org.bytedeco.javacv.Blobs: double[] jProperty>;

        $stack19[i] = $stack18;

        $stack21 = <org.bytedeco.javacv.Blobs: double[][] RegionData>;

        $stack20 = <org.bytedeco.javacv.Blobs: double[] iProperty>;

        $stack21[j] = $stack20;

     label3:
        j = j + 1;

        goto label2;

     label4:
        i = i + 1;

        goto label1;

     label5:
        return;
    }

    static void <clinit>()
    {
        int $stack0, $stack1, $stack2, $stack3, $stack4, $stack5, $stack7, $stack8, $stack10, $stack12;
        int[][] $stack6;
        double[][] $stack9;
        int[] $stack11, $stack13;

        <org.bytedeco.javacv.Blobs: int BLOBROWCOUNT> = 3500;

        <org.bytedeco.javacv.Blobs: int BLOBCOLCOUNT> = 2700;

        $stack1 = <org.bytedeco.javacv.Blobs: int BLOBROWCOUNT>;

        $stack0 = <org.bytedeco.javacv.Blobs: int BLOBCOLCOUNT>;

        $stack2 = $stack1 + $stack0;

        $stack3 = $stack2 * 5;

        <org.bytedeco.javacv.Blobs: int BLOBTOTALCOUNT> = $stack3;

        <org.bytedeco.javacv.Blobs: int BLOBLABEL> = 0;

        <org.bytedeco.javacv.Blobs: int BLOBPARENT> = 1;

        <org.bytedeco.javacv.Blobs: int BLOBCOLOR> = 2;

        <org.bytedeco.javacv.Blobs: int BLOBAREA> = 3;

        <org.bytedeco.javacv.Blobs: int BLOBPERIMETER> = 4;

        <org.bytedeco.javacv.Blobs: int BLOBSUMX> = 5;

        <org.bytedeco.javacv.Blobs: int BLOBSUMY> = 6;

        <org.bytedeco.javacv.Blobs: int BLOBSUMXX> = 7;

        <org.bytedeco.javacv.Blobs: int BLOBSUMYY> = 8;

        <org.bytedeco.javacv.Blobs: int BLOBSUMXY> = 9;

        <org.bytedeco.javacv.Blobs: int BLOBMINX> = 10;

        <org.bytedeco.javacv.Blobs: int BLOBMAXX> = 11;

        <org.bytedeco.javacv.Blobs: int BLOBMINY> = 12;

        <org.bytedeco.javacv.Blobs: int BLOBMAXY> = 13;

        <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT> = 14;

        $stack5 = <org.bytedeco.javacv.Blobs: int BLOBROWCOUNT>;

        $stack4 = <org.bytedeco.javacv.Blobs: int BLOBCOLCOUNT>;

        $stack6 = newmultiarray (int)[$stack5][$stack4];

        <org.bytedeco.javacv.Blobs: int[][] LabelMat> = $stack6;

        $stack8 = <org.bytedeco.javacv.Blobs: int BLOBTOTALCOUNT>;

        $stack7 = <org.bytedeco.javacv.Blobs: int BLOBDATACOUNT>;

        $stack9 = newmultiarray (double)[$stack8][$stack7];

        <org.bytedeco.javacv.Blobs: double[][] RegionData> = $stack9;

        $stack10 = <org.bytedeco.javacv.Blobs: int BLOBTOTALCOUNT>;

        $stack11 = newarray (int)[$stack10];

        <org.bytedeco.javacv.Blobs: int[] SubsumedLabel> = $stack11;

        $stack12 = <org.bytedeco.javacv.Blobs: int BLOBTOTALCOUNT>;

        $stack13 = newarray (int)[$stack12];

        <org.bytedeco.javacv.Blobs: int[] CondensationMap> = $stack13;

        return;
    }
}
