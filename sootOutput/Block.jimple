public class Block extends org.ooc.frontend.model.Statement implements org.ooc.frontend.model.Scope
{
    protected final org.ooc.frontend.model.NodeList body;

    public void <init>(org.ooc.frontend.model.tokens.Token)
    {
        Block this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.NodeList $u0;
        org.ooc.frontend.model.Block $r0;

        this := @this: Block;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Statement: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $u0 = new org.ooc.frontend.model.NodeList;

        specialinvoke $u0.<org.ooc.frontend.model.NodeList: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.Block) this;

        $r0.<org.ooc.frontend.model.Block: org.ooc.frontend.model.NodeList body> = $u0;

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Block this;
        org.ooc.frontend.model.Block $r0;

        this := @this: Block;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Block) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Block)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        Block this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.NodeList $stack2;
        org.ooc.frontend.model.Block $r0;

        this := @this: Block;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Block) this;

        $stack2 = $r0.<org.ooc.frontend.model.Block: org.ooc.frontend.model.NodeList body>;

        virtualinvoke $stack2.<org.ooc.frontend.model.NodeList: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        Block this;
        org.ooc.frontend.model.NodeList $stack1;
        boolean $stack2;
        org.ooc.frontend.model.Block $r0;

        this := @this: Block;

        $r0 = (org.ooc.frontend.model.Block) this;

        $stack1 = $r0.<org.ooc.frontend.model.Block: org.ooc.frontend.model.NodeList body>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.NodeList: boolean hasChildren()>();

        return $stack2;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        Block this;
        org.ooc.frontend.model.Node oldie, kiddo;

        this := @this: Block;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        return 0;
    }

    public org.ooc.frontend.model.NodeList getBody()
    {
        Block this;
        org.ooc.frontend.model.NodeList $stack1;
        org.ooc.frontend.model.Block $r0;

        this := @this: Block;

        $r0 = (org.ooc.frontend.model.Block) this;

        $stack1 = $r0.<org.ooc.frontend.model.Block: org.ooc.frontend.model.NodeList body>;

        return $stack1;
    }

    public org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String, java.lang.String, org.ooc.frontend.model.FunctionCall)
    {
        Block this;
        java.lang.String name, suffix;
        org.ooc.frontend.model.FunctionCall call;

        this := @this: Block;

        name := @parameter0: java.lang.String;

        suffix := @parameter1: java.lang.String;

        call := @parameter2: org.ooc.frontend.model.FunctionCall;

        return null;
    }

    public void getFunctions(org.ooc.frontend.model.NodeList)
    {
        Block this;
        org.ooc.frontend.model.NodeList functions;

        this := @this: Block;

        functions := @parameter0: org.ooc.frontend.model.NodeList;

        return;
    }

    public org.ooc.frontend.model.VariableDecl getVariable(java.lang.String)
    {
        Block this;
        java.lang.String name;
        org.ooc.frontend.model.NodeList $stack2;
        org.ooc.frontend.model.VariableDecl $stack3;
        org.ooc.frontend.model.Block $r0, $r1;

        this := @this: Block;

        name := @parameter0: java.lang.String;

        $r0 = (org.ooc.frontend.model.Block) this;

        $stack2 = $r0.<org.ooc.frontend.model.Block: org.ooc.frontend.model.NodeList body>;

        $r1 = (org.ooc.frontend.model.Block) this;

        $stack3 = virtualinvoke $r1.<org.ooc.frontend.model.Block: org.ooc.frontend.model.VariableDecl getVariable(org.ooc.frontend.model.NodeList,java.lang.String)>($stack2, name);

        return $stack3;
    }

    public void getVariables(org.ooc.frontend.model.NodeList)
    {
        Block this;
        org.ooc.frontend.model.NodeList variables, $stack2;
        org.ooc.frontend.model.Block $r0, $r1;

        this := @this: Block;

        variables := @parameter0: org.ooc.frontend.model.NodeList;

        $r0 = (org.ooc.frontend.model.Block) this;

        $stack2 = $r0.<org.ooc.frontend.model.Block: org.ooc.frontend.model.NodeList body>;

        $r1 = (org.ooc.frontend.model.Block) this;

        virtualinvoke $r1.<org.ooc.frontend.model.Block: void getVariables(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.NodeList)>($stack2, variables);

        return;
    }
}
