public class BootstrapCoreExtensionManager extends java.lang.Object
{
    private final org.codehaus.plexus.logging.Logger log;
    private final org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver pluginDependenciesResolver;
    private final org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory repositorySystemSessionFactory;
    private final org.codehaus.plexus.classworlds.ClassWorld classWorld;
    private final org.codehaus.plexus.classworlds.realm.ClassRealm parentRealm;

    public void <init>(org.codehaus.plexus.logging.Logger, org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver, org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory, org.codehaus.plexus.PlexusContainer)
    {
        BootstrapCoreExtensionManager this;
        org.codehaus.plexus.logging.Logger log;
        org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver pluginDependenciesResolver;
        org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory repositorySystemSessionFactory;
        org.codehaus.plexus.PlexusContainer container;
        org.codehaus.plexus.DefaultPlexusContainer $stack5;
        org.codehaus.plexus.classworlds.ClassWorld $stack6;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack7;
        org.apache.maven.cli.internal.BootstrapCoreExtensionManager $r0, $r1, $r2, $r3, $r4;

        this := @this: BootstrapCoreExtensionManager;

        log := @parameter0: org.codehaus.plexus.logging.Logger;

        pluginDependenciesResolver := @parameter1: org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver;

        repositorySystemSessionFactory := @parameter2: org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory;

        container := @parameter3: org.codehaus.plexus.PlexusContainer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r0.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.logging.Logger log> = log;

        $r1 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r1.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver pluginDependenciesResolver> = pluginDependenciesResolver;

        $r2 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r2.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory repositorySystemSessionFactory> = repositorySystemSessionFactory;

        $stack5 = (org.codehaus.plexus.DefaultPlexusContainer) container;

        $stack6 = virtualinvoke $stack5.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.classworlds.ClassWorld getClassWorld()>();

        $r3 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r3.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.classworlds.ClassWorld classWorld> = $stack6;

        $stack7 = interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm getContainerRealm()>();

        $r4 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r4.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.classworlds.realm.ClassRealm parentRealm> = $stack7;

        return;
    }

    public java.util.List loadCoreExtensions(org.apache.maven.execution.MavenExecutionRequest, java.util.Set, java.util.List) throws java.lang.Exception
    {
        BootstrapCoreExtensionManager this;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory $stack6;
        org.eclipse.aether.DefaultRepositorySystemSession repoSession;
        java.util.List $stack8, repositories, extensions, $stack10;
        java.util.Set providedArtifacts;
        org.apache.maven.cli.internal.BootstrapCoreExtensionManager $r0, $r1;
        org.eclipse.aether.RepositorySystemSession $r2;

        this := @this: BootstrapCoreExtensionManager;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        providedArtifacts := @parameter1: java.util.Set;

        extensions := @parameter2: java.util.List;

        $r0 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack6 = $r0.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory repositorySystemSessionFactory>;

        repoSession = virtualinvoke $stack6.<org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory: org.eclipse.aether.DefaultRepositorySystemSession newRepositorySession(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $stack8 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getPluginArtifactRepositories()>();

        repositories = staticinvoke <org.apache.maven.RepositoryUtils: java.util.List toRepos(java.util.List)>($stack8);

        $r1 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r2 = (org.eclipse.aether.RepositorySystemSession) repoSession;

        $stack10 = specialinvoke $r1.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: java.util.List resolveCoreExtensions(org.eclipse.aether.RepositorySystemSession,java.util.List,java.util.Set,java.util.List)>($r2, repositories, providedArtifacts, extensions);

        return $stack10;
    }

    private java.util.List resolveCoreExtensions(org.eclipse.aether.RepositorySystemSession, java.util.List, java.util.Set, java.util.List) throws java.lang.Exception
    {
        java.util.Set providedArtifacts;
        java.util.List configuration, $stack14, repositories, artifacts;
        java.util.Iterator l7;
        boolean $stack13, $stack17;
        java.lang.Object $stack15;
        org.apache.maven.cli.internal.extension.model.CoreExtension extension;
        BootstrapCoreExtensionManager this;
        org.eclipse.aether.RepositorySystemSession repoSession;
        org.apache.maven.extension.internal.CoreExtensionEntry $stack19;
        java.util.ArrayList $u0;
        org.eclipse.aether.util.filter.ExclusionsDependencyFilter $u1;
        org.apache.maven.cli.internal.BootstrapCoreExtensionManager $r0, $r2;
        org.eclipse.aether.graph.DependencyFilter $r1;

        this := @this: BootstrapCoreExtensionManager;

        repoSession := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        providedArtifacts := @parameter2: java.util.Set;

        configuration := @parameter3: java.util.List;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $u1 = new org.eclipse.aether.util.filter.ExclusionsDependencyFilter;

        specialinvoke $u1.<org.eclipse.aether.util.filter.ExclusionsDependencyFilter: void <init>(java.util.Collection)>(providedArtifacts);

        l7 = interfaceinvoke configuration.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack13 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label3;

        $stack15 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        extension = (org.apache.maven.cli.internal.extension.model.CoreExtension) $stack15;

        $r0 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $r1 = (org.eclipse.aether.graph.DependencyFilter) $u1;

        artifacts = specialinvoke $r0.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: java.util.List resolveExtension(org.apache.maven.cli.internal.extension.model.CoreExtension,org.eclipse.aether.RepositorySystemSession,java.util.List,org.eclipse.aether.graph.DependencyFilter)>(extension, repoSession, repositories, $r1);

        $stack17 = interfaceinvoke artifacts.<java.util.List: boolean isEmpty()>();

        if $stack17 != 0 goto label2;

        $r2 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack19 = specialinvoke $r2.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.apache.maven.extension.internal.CoreExtensionEntry createExtension(org.apache.maven.cli.internal.extension.model.CoreExtension,java.util.List)>(extension, artifacts);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack19);

     label2:
        goto label1;

     label3:
        $stack14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u0);

        return $stack14;
    }

    private org.apache.maven.extension.internal.CoreExtensionEntry createExtension(org.apache.maven.cli.internal.extension.model.CoreExtension, java.util.List) throws java.lang.Exception
    {
        java.lang.StringBuilder $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack23, $stack25, $stack39, $stack40, $u0, $u1, $u2;
        org.apache.maven.cli.internal.extension.model.CoreExtension extension;
        java.lang.String $stack10, $stack13, $stack16, realmId, $stack24, $stack26, $stack41;
        BootstrapCoreExtensionManager this;
        org.codehaus.plexus.classworlds.ClassWorld $stack19;
        org.codehaus.plexus.classworlds.realm.ClassRealm realm, $stack27;
        org.codehaus.plexus.logging.Logger $stack22, $stack38;
        java.util.List artifacts;
        java.util.Iterator l5;
        boolean $stack29;
        java.lang.Object $stack30, $stack35;
        org.eclipse.aether.artifact.Artifact $stack31, artifact;
        java.io.File $stack32, file;
        java.util.Set $stack33;
        org.apache.maven.extension.internal.CoreExtensionEntry $stack34;
        java.net.URI $stack42;
        java.net.URL $stack43;
        org.apache.maven.cli.internal.BootstrapCoreExtensionManager $r0, $r1, $r2, $r3;

        this := @this: BootstrapCoreExtensionManager;

        extension := @parameter0: org.apache.maven.cli.internal.extension.model.CoreExtension;

        artifacts := @parameter1: java.util.List;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("coreExtension>");

        $stack10 = virtualinvoke extension.<org.apache.maven.cli.internal.extension.model.CoreExtension: java.lang.String getGroupId()>();

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack13 = virtualinvoke extension.<org.apache.maven.cli.internal.extension.model.CoreExtension: java.lang.String getArtifactId()>();

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack16 = virtualinvoke extension.<org.apache.maven.cli.internal.extension.model.CoreExtension: java.lang.String getVersion()>();

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        realmId = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack19 = $r0.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        realm = virtualinvoke $stack19.<org.codehaus.plexus.classworlds.ClassWorld: org.codehaus.plexus.classworlds.realm.ClassRealm newRealm(java.lang.String,java.lang.ClassLoader)>(realmId, null);

        $r1 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack22 = $r1.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.logging.Logger log>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Populating class realm ");

        $stack24 = virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: java.lang.String getId()>();

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack22.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack26);

        $r2 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack27 = $r2.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.classworlds.realm.ClassRealm parentRealm>;

        virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void setParentRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>($stack27);

        l5 = interfaceinvoke artifacts.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack29 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack29 == 0 goto label2;

        $stack35 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.eclipse.aether.artifact.Artifact) $stack35;

        file = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        $r3 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack38 = $r3.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.codehaus.plexus.logging.Logger log>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack39 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Included ");

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack38.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack41);

        $stack42 = virtualinvoke file.<java.io.File: java.net.URI toURI()>();

        $stack43 = virtualinvoke $stack42.<java.net.URI: java.net.URL toURL()>();

        virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void addURL(java.net.URL)>($stack43);

        goto label1;

     label2:
        $stack30 = interfaceinvoke artifacts.<java.util.List: java.lang.Object get(int)>(0);

        $stack31 = (org.eclipse.aether.artifact.Artifact) $stack30;

        $stack32 = interfaceinvoke $stack31.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        $stack33 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($stack32);

        $stack34 = staticinvoke <org.apache.maven.extension.internal.CoreExtensionEntry: org.apache.maven.extension.internal.CoreExtensionEntry discoverFrom(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Collection)>(realm, $stack33);

        return $stack34;
    }

    private java.util.List resolveExtension(org.apache.maven.cli.internal.extension.model.CoreExtension, org.eclipse.aether.RepositorySystemSession, java.util.List, org.eclipse.aether.graph.DependencyFilter) throws org.apache.maven.plugin.PluginResolutionException
    {
        org.apache.maven.cli.internal.extension.model.CoreExtension extension;
        java.lang.String $stack10, $stack11, $stack12;
        BootstrapCoreExtensionManager this;
        org.eclipse.aether.graph.DependencyFilter dependencyFilter;
        java.util.List repositories, artifacts;
        org.eclipse.aether.RepositorySystemSession repoSession;
        org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver $stack13;
        org.eclipse.aether.graph.DependencyNode root;
        org.apache.maven.model.Plugin $u0;
        org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator $u1;
        org.apache.maven.cli.internal.BootstrapCoreExtensionManager $r0;
        org.eclipse.aether.graph.DependencyVisitor $r1;

        this := @this: BootstrapCoreExtensionManager;

        extension := @parameter0: org.apache.maven.cli.internal.extension.model.CoreExtension;

        repoSession := @parameter1: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter2: java.util.List;

        dependencyFilter := @parameter3: org.eclipse.aether.graph.DependencyFilter;

        $u0 = new org.apache.maven.model.Plugin;

        specialinvoke $u0.<org.apache.maven.model.Plugin: void <init>()>();

        $stack10 = virtualinvoke extension.<org.apache.maven.cli.internal.extension.model.CoreExtension: java.lang.String getGroupId()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setGroupId(java.lang.String)>($stack10);

        $stack11 = virtualinvoke extension.<org.apache.maven.cli.internal.extension.model.CoreExtension: java.lang.String getArtifactId()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setArtifactId(java.lang.String)>($stack11);

        $stack12 = virtualinvoke extension.<org.apache.maven.cli.internal.extension.model.CoreExtension: java.lang.String getVersion()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>($stack12);

        $r0 = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) this;

        $stack13 = $r0.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver pluginDependenciesResolver>;

        root = virtualinvoke $stack13.<org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver: org.eclipse.aether.graph.DependencyNode resolveCoreExtension(org.apache.maven.model.Plugin,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>($u0, dependencyFilter, repositories, repoSession);

        $u1 = new org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;

        specialinvoke $u1.<org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator: void <init>()>();

        $r1 = (org.eclipse.aether.graph.DependencyVisitor) $u1;

        interfaceinvoke root.<org.eclipse.aether.graph.DependencyNode: boolean accept(org.eclipse.aether.graph.DependencyVisitor)>($r1);

        artifacts = virtualinvoke $u1.<org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator: java.util.List getArtifacts(boolean)>(0);

        return artifacts;
    }
}
