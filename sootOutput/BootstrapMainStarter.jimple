public class BootstrapMainStarter extends java.lang.Object
{

    public void <init>()
    {
        BootstrapMainStarter this;

        this := @this: BootstrapMainStarter;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void start(java.lang.String[], java.nio.file.Path) throws java.lang.Exception
    {
        BootstrapMainStarter this;
        java.nio.file.Path mavenHome, mavenJar, $stack18, $stack22, $stack23;
        java.net.URL[] $stack9;
        java.net.URI $stack11;
        java.net.URL $stack12;
        java.lang.ClassLoader $stack13, $stack14;
        java.lang.Thread $stack15;
        java.lang.Class mainClass;
        java.lang.String $stack19, $stack24;
        java.lang.Class[] $stack26;
        java.lang.reflect.Method mainMethod;
        java.lang.Object[] $stack28;
        java.lang.String[] args;
        java.net.URLClassLoader $u0;
        org.apache.maven.wrapper.BootstrapMainStarter $r0;

        this := @this: BootstrapMainStarter;

        args := @parameter0: java.lang.String[];

        mavenHome := @parameter1: java.nio.file.Path;

        $r0 = (org.apache.maven.wrapper.BootstrapMainStarter) this;

        mavenJar = specialinvoke $r0.<org.apache.maven.wrapper.BootstrapMainStarter: java.nio.file.Path findLauncherJar(java.nio.file.Path)>(mavenHome);

        $u0 = new java.net.URLClassLoader;

        $stack9 = newarray (java.net.URL)[1];

        $stack11 = interfaceinvoke mavenJar.<java.nio.file.Path: java.net.URI toUri()>();

        $stack12 = virtualinvoke $stack11.<java.net.URI: java.net.URL toURL()>();

        $stack9[0] = $stack12;

        $stack13 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $stack14 = virtualinvoke $stack13.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        specialinvoke $u0.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>($stack9, $stack14);

        $stack15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack15.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($u0);

        mainClass = virtualinvoke $u0.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String)>("org.codehaus.plexus.classworlds.launcher.Launcher");

        $stack18 = interfaceinvoke mavenHome.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $stack19 = interfaceinvoke $stack18.<java.nio.file.Path: java.lang.String toString()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("maven.home", $stack19);

        $stack22 = interfaceinvoke mavenHome.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("bin/m2.conf");

        $stack23 = interfaceinvoke $stack22.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $stack24 = interfaceinvoke $stack23.<java.nio.file.Path: java.lang.String toString()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("classworlds.conf", $stack24);

        $stack26 = newarray (java.lang.Class)[1];

        $stack26[0] = class "[Ljava/lang/String;";

        mainMethod = virtualinvoke mainClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", $stack26);

        $stack28 = newarray (java.lang.Object)[1];

        $stack28[0] = args;

        virtualinvoke mainMethod.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $stack28);

        return;
    }

    private java.nio.file.Path findLauncherJar(java.nio.file.Path) throws java.lang.RuntimeException, java.io.IOException
    {
        java.nio.file.Path mavenHome, $stack2, $stack9;
        java.util.stream.Stream $stack3, $stack5;
        java.util.function.Predicate $stack4;
        java.util.Optional $stack6;
        java.util.function.Supplier $stack7;
        java.lang.Object $stack8;
        BootstrapMainStarter this;

        this := @this: BootstrapMainStarter;

        mavenHome := @parameter0: java.nio.file.Path;

        $stack2 = interfaceinvoke mavenHome.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("boot");

        $stack3 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>($stack2);

        $stack4 = staticinvoke <BootstrapMainStarter$lambda_findLauncherJar_0__309: java.util.function.Predicate bootstrap$()>();

        $stack5 = interfaceinvoke $stack3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack4);

        $stack6 = interfaceinvoke $stack5.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $stack7 = staticinvoke <BootstrapMainStarter$lambda_findLauncherJar_1__310: java.util.function.Supplier bootstrap$(java.nio.file.Path)>(mavenHome);

        $stack8 = virtualinvoke $stack6.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>($stack7);

        $stack9 = (java.nio.file.Path) $stack8;

        return $stack9;
    }

    private static java.lang.RuntimeException lambda$findLauncherJar$1(java.nio.file.Path)
    {
        java.lang.RuntimeException $stack1;
        java.lang.Object[] $stack2;
        java.nio.file.Path mavenHome;
        java.lang.String $stack3;

        mavenHome := @parameter0: java.nio.file.Path;

        $stack1 = new java.lang.RuntimeException;

        $stack2 = newarray (java.lang.Object)[1];

        $stack2[0] = mavenHome;

        $stack3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t locate the Maven launcher JAR in Maven distribution \'%s\'.", $stack2);

        specialinvoke $stack1.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack3);

        return $stack1;
    }

    private static boolean lambda$findLauncherJar$0(java.nio.file.Path)
    {
        java.nio.file.Path p, $stack1;
        java.lang.String $stack2;
        boolean $stack3;

        p := @parameter0: java.nio.file.Path;

        $stack1 = interfaceinvoke p.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $stack2 = interfaceinvoke $stack1.<java.nio.file.Path: java.lang.String toString()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean matches(java.lang.String)>("plexus-classworlds-.*\\.jar");

        return $stack3;
    }
}
