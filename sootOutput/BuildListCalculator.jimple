public class BuildListCalculator extends java.lang.Object
{

    public void <init>()
    {
        BuildListCalculator this;

        this := @this: BuildListCalculator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.lifecycle.internal.ProjectBuildList calculateProjectBuilds(org.apache.maven.execution.MavenSession, java.util.List)
    {
        java.util.ArrayList $stack11;
        org.apache.maven.execution.MavenSession session, copiedSession;
        org.apache.maven.project.MavenProject rootProject, project;
        java.util.List taskSegments, projects;
        java.util.Iterator l5, l8;
        boolean $stack14, $stack17, $stack20;
        org.apache.maven.lifecycle.internal.ProjectBuildList $stack15;
        java.lang.Object $stack16, $stack22;
        org.apache.maven.lifecycle.internal.TaskSegment taskSegment;
        org.apache.maven.lifecycle.internal.ProjectSegment $stack24;
        BuildListCalculator this;

        this := @this: BuildListCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        taskSegments := @parameter1: java.util.List;

        $stack11 = new java.util.ArrayList;

        specialinvoke $stack11.<java.util.ArrayList: void <init>()>();

        rootProject = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getTopLevelProject()>();

        l5 = interfaceinvoke taskSegments.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label6;

        $stack16 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        taskSegment = (org.apache.maven.lifecycle.internal.TaskSegment) $stack16;

        $stack17 = virtualinvoke taskSegment.<org.apache.maven.lifecycle.internal.TaskSegment: boolean isAggregating()>();

        if $stack17 == 0 goto label2;

        projects = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(rootProject);

        goto label3;

     label2:
        projects = virtualinvoke session.<org.apache.maven.execution.MavenSession: java.util.List getProjects()>();

     label3:
        l8 = interfaceinvoke projects.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack20 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label5;

        $stack22 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        project = (org.apache.maven.project.MavenProject) $stack22;

        staticinvoke <org.apache.maven.lifecycle.internal.builder.BuilderCommon: void attachToThread(org.apache.maven.project.MavenProject)>(project);

        copiedSession = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenSession clone()>();

        virtualinvoke copiedSession.<org.apache.maven.execution.MavenSession: void setCurrentProject(org.apache.maven.project.MavenProject)>(project);

        $stack24 = new org.apache.maven.lifecycle.internal.ProjectSegment;

        specialinvoke $stack24.<org.apache.maven.lifecycle.internal.ProjectSegment: void <init>(org.apache.maven.project.MavenProject,org.apache.maven.lifecycle.internal.TaskSegment,org.apache.maven.execution.MavenSession)>(project, taskSegment, copiedSession);

        interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack24);

        goto label4;

     label5:
        goto label1;

     label6:
        $stack15 = new org.apache.maven.lifecycle.internal.ProjectBuildList;

        specialinvoke $stack15.<org.apache.maven.lifecycle.internal.ProjectBuildList: void <init>(java.util.List)>($stack11);

        return $stack15;
    }
}
