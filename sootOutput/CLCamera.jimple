public class CLCamera extends java.lang.Object
{
    public static int CLEYE_MONO_PROCESSED;
    public static int CLEYE_COLOR_PROCESSED;
    public static int CLEYE_MONO_RAW;
    public static int CLEYE_COLOR_RAW;
    public static int CLEYE_BAYER_RAW;
    public static int CLEYE_QVGA;
    public static int CLEYE_VGA;
    public static int CLEYE_AUTO_GAIN;
    public static int CLEYE_GAIN;
    public static int CLEYE_AUTO_EXPOSURE;
    public static int CLEYE_EXPOSURE;
    public static int CLEYE_AUTO_WHITEBALANCE;
    public static int CLEYE_WHITEBALANCE_RED;
    public static int CLEYE_WHITEBALANCE_GREEN;
    public static int CLEYE_WHITEBALANCE_BLUE;
    public static int CLEYE_HFLIP;
    public static int CLEYE_VFLIP;
    public static int CLEYE_HKEYSTONE;
    public static int CLEYE_VKEYSTONE;
    public static int CLEYE_XOFFSET;
    public static int CLEYE_YOFFSET;
    public static int CLEYE_ROTATION;
    public static int CLEYE_ZOOM;
    public static int CLEYE_LENSCORRECTION1;
    public static int CLEYE_LENSCORRECTION2;
    public static int CLEYE_LENSCORRECTION3;
    public static int CLEYE_LENSBRIGHTNESS;
    private int cameraInstance;
    private static boolean libraryLoaded;
    private static java.lang.String dllpathx32;
    private static java.lang.String dllpathx64;

    public void <init>()
    {
        CLCamera this;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (cl.eye.CLCamera) this;

        $r0.<cl.eye.CLCamera: int cameraInstance> = 0;

        return;
    }

    static native int CLEyeGetCameraCount();

    static native java.lang.String CLEyeGetCameraUUID(int);

    static native int CLEyeCreateCamera(int, int, int, int);

    static native boolean CLEyeDestroyCamera(int);

    static native boolean CLEyeCameraStart(int);

    static native boolean CLEyeCameraStop(int);

    static native boolean CLEyeSetCameraParameter(int, int, int);

    static native int CLEyeGetCameraParameter(int, int);

    static native boolean CLEyeCameraGetFrame(int, int[], int);

    public static boolean IsLibraryLoaded()
    {
        boolean $stack0;

        $stack0 = <cl.eye.CLCamera: boolean libraryLoaded>;

        return $stack0;
    }

    public static void loadLibrary(java.lang.String)
    {
        boolean $stack2;
        java.lang.String libraryPath;
        java.io.PrintStream $stack3, $stack5;
        java.lang.UnsatisfiedLinkError $stack4;

        libraryPath := @parameter0: java.lang.String;

        $stack2 = <cl.eye.CLCamera: boolean libraryLoaded>;

        if $stack2 == 0 goto label1;

        return;

     label1:
        staticinvoke <java.lang.System: void load(java.lang.String)>(libraryPath);

        $stack3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack3.<java.io.PrintStream: void println(java.lang.String)>("CLEyeMulticam.dll loaded");

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.String)>("(3) Could not find the CLEyeMulticam.dll (Custom Path)");

     label4:
        return;

        catch java.lang.UnsatisfiedLinkError from label1 to label2 with label3;
    }

    public static int cameraCount()
    {
        int $stack0;

        $stack0 = staticinvoke <cl.eye.CLCamera: int CLEyeGetCameraCount()>();

        return $stack0;
    }

    public static java.lang.String cameraUUID(int)
    {
        int index;
        java.lang.String $stack1;

        index := @parameter0: int;

        $stack1 = staticinvoke <cl.eye.CLCamera: java.lang.String CLEyeGetCameraUUID(int)>(index);

        return $stack1;
    }

    public void dispose()
    {
        CLCamera this;
        cl.eye.CLCamera $r0, $r1;

        this := @this: CLCamera;

        $r0 = (cl.eye.CLCamera) this;

        virtualinvoke $r0.<cl.eye.CLCamera: boolean stopCamera()>();

        $r1 = (cl.eye.CLCamera) this;

        virtualinvoke $r1.<cl.eye.CLCamera: boolean destroyCamera()>();

        return;
    }

    public boolean createCamera(int, int, int, int)
    {
        CLCamera this;
        int cameraIndex, mode, resolution, framerate, $stack5, $stack6;
        boolean $stack7;
        cl.eye.CLCamera $r0, $r1;

        this := @this: CLCamera;

        cameraIndex := @parameter0: int;

        mode := @parameter1: int;

        resolution := @parameter2: int;

        framerate := @parameter3: int;

        $stack5 = staticinvoke <cl.eye.CLCamera: int CLEyeCreateCamera(int,int,int,int)>(cameraIndex, mode, resolution, framerate);

        $r0 = (cl.eye.CLCamera) this;

        $r0.<cl.eye.CLCamera: int cameraInstance> = $stack5;

        $r1 = (cl.eye.CLCamera) this;

        $stack6 = $r1.<cl.eye.CLCamera: int cameraInstance>;

        if $stack6 == 0 goto label1;

        $stack7 = 1;

        goto label2;

     label1:
        $stack7 = 0;

     label2:
        return $stack7;
    }

    public boolean destroyCamera()
    {
        CLCamera this;
        int $stack1;
        boolean $stack2;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        $r0 = (cl.eye.CLCamera) this;

        $stack1 = $r0.<cl.eye.CLCamera: int cameraInstance>;

        $stack2 = staticinvoke <cl.eye.CLCamera: boolean CLEyeDestroyCamera(int)>($stack1);

        return $stack2;
    }

    public boolean startCamera()
    {
        CLCamera this;
        int $stack1;
        boolean $stack2;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        $r0 = (cl.eye.CLCamera) this;

        $stack1 = $r0.<cl.eye.CLCamera: int cameraInstance>;

        $stack2 = staticinvoke <cl.eye.CLCamera: boolean CLEyeCameraStart(int)>($stack1);

        return $stack2;
    }

    public boolean stopCamera()
    {
        CLCamera this;
        int $stack1;
        boolean $stack2;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        $r0 = (cl.eye.CLCamera) this;

        $stack1 = $r0.<cl.eye.CLCamera: int cameraInstance>;

        $stack2 = staticinvoke <cl.eye.CLCamera: boolean CLEyeCameraStop(int)>($stack1);

        return $stack2;
    }

    public boolean getCameraFrame(int[], int)
    {
        CLCamera this;
        int[] imgData;
        int waitTimeout, $stack3;
        boolean $stack4;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        imgData := @parameter0: int[];

        waitTimeout := @parameter1: int;

        $r0 = (cl.eye.CLCamera) this;

        $stack3 = $r0.<cl.eye.CLCamera: int cameraInstance>;

        $stack4 = staticinvoke <cl.eye.CLCamera: boolean CLEyeCameraGetFrame(int,int[],int)>($stack3, imgData, waitTimeout);

        return $stack4;
    }

    public boolean setCameraParam(int, int)
    {
        CLCamera this;
        int param, val, $stack3;
        boolean $stack4;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        param := @parameter0: int;

        val := @parameter1: int;

        $r0 = (cl.eye.CLCamera) this;

        $stack3 = $r0.<cl.eye.CLCamera: int cameraInstance>;

        $stack4 = staticinvoke <cl.eye.CLCamera: boolean CLEyeSetCameraParameter(int,int,int)>($stack3, param, val);

        return $stack4;
    }

    public int getCameraParam(int)
    {
        CLCamera this;
        int param, $stack2, $stack3;
        cl.eye.CLCamera $r0;

        this := @this: CLCamera;

        param := @parameter0: int;

        $r0 = (cl.eye.CLCamera) this;

        $stack2 = $r0.<cl.eye.CLCamera: int cameraInstance>;

        $stack3 = staticinvoke <cl.eye.CLCamera: int CLEyeGetCameraParameter(int,int)>($stack2, param);

        return $stack3;
    }

    static void <clinit>()
    {
        java.lang.String $stack2, $stack8;
        java.io.PrintStream $stack3, $stack5, $stack7, $stack9;
        java.lang.UnsatisfiedLinkError $stack4, $stack6;

        <cl.eye.CLCamera: int CLEYE_MONO_PROCESSED> = 0;

        <cl.eye.CLCamera: int CLEYE_COLOR_PROCESSED> = 1;

        <cl.eye.CLCamera: int CLEYE_MONO_RAW> = 2;

        <cl.eye.CLCamera: int CLEYE_COLOR_RAW> = 3;

        <cl.eye.CLCamera: int CLEYE_BAYER_RAW> = 4;

        <cl.eye.CLCamera: int CLEYE_QVGA> = 0;

        <cl.eye.CLCamera: int CLEYE_VGA> = 1;

        <cl.eye.CLCamera: int CLEYE_AUTO_GAIN> = 0;

        <cl.eye.CLCamera: int CLEYE_GAIN> = 1;

        <cl.eye.CLCamera: int CLEYE_AUTO_EXPOSURE> = 2;

        <cl.eye.CLCamera: int CLEYE_EXPOSURE> = 3;

        <cl.eye.CLCamera: int CLEYE_AUTO_WHITEBALANCE> = 4;

        <cl.eye.CLCamera: int CLEYE_WHITEBALANCE_RED> = 5;

        <cl.eye.CLCamera: int CLEYE_WHITEBALANCE_GREEN> = 6;

        <cl.eye.CLCamera: int CLEYE_WHITEBALANCE_BLUE> = 7;

        <cl.eye.CLCamera: int CLEYE_HFLIP> = 8;

        <cl.eye.CLCamera: int CLEYE_VFLIP> = 9;

        <cl.eye.CLCamera: int CLEYE_HKEYSTONE> = 10;

        <cl.eye.CLCamera: int CLEYE_VKEYSTONE> = 11;

        <cl.eye.CLCamera: int CLEYE_XOFFSET> = 12;

        <cl.eye.CLCamera: int CLEYE_YOFFSET> = 13;

        <cl.eye.CLCamera: int CLEYE_ROTATION> = 14;

        <cl.eye.CLCamera: int CLEYE_ZOOM> = 15;

        <cl.eye.CLCamera: int CLEYE_LENSCORRECTION1> = 16;

        <cl.eye.CLCamera: int CLEYE_LENSCORRECTION2> = 17;

        <cl.eye.CLCamera: int CLEYE_LENSCORRECTION3> = 18;

        <cl.eye.CLCamera: int CLEYE_LENSBRIGHTNESS> = 19;

        <cl.eye.CLCamera: boolean libraryLoaded> = 0;

        <cl.eye.CLCamera: java.lang.String dllpathx32> = "C://Program Files//Code Laboratories//CL-Eye Platform SDK//Bin//CLEyeMulticam.dll";

        <cl.eye.CLCamera: java.lang.String dllpathx64> = "C://Program Files (x86)//Code Laboratories//CL-Eye Platform SDK//Bin//CLEyeMulticam.dll";

     label1:
        $stack2 = <cl.eye.CLCamera: java.lang.String dllpathx32>;

        staticinvoke <java.lang.System: void load(java.lang.String)>($stack2);

        <cl.eye.CLCamera: boolean libraryLoaded> = 1;

        $stack3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack3.<java.io.PrintStream: void println(java.lang.String)>("CLEyeMulticam.dll loaded");

     label2:
        goto label7;

     label3:
        $stack6 := @caughtexception;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.String)>("(1) Could not find the CLEyeMulticam.dll");

     label4:
        $stack8 = <cl.eye.CLCamera: java.lang.String dllpathx64>;

        staticinvoke <java.lang.System: void load(java.lang.String)>($stack8);

        <cl.eye.CLCamera: boolean libraryLoaded> = 1;

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.String)>("CLEyeMulticam.dll loaded");

     label5:
        goto label7;

     label6:
        $stack4 := @caughtexception;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.String)>("(2) Could not find the CLEyeMulticam.dll");

     label7:
        return;

        catch java.lang.UnsatisfiedLinkError from label1 to label2 with label3;
        catch java.lang.UnsatisfiedLinkError from label4 to label5 with label6;
    }
}
