public class CLIManager extends java.lang.Object
{
    public static final char ALTERNATE_POM_FILE;
    public static final char BATCH_MODE;
    public static final char SET_SYSTEM_PROPERTY;
    public static final char OFFLINE;
    public static final char QUIET;
    public static final char VERBOSE;
    public static final char ERRORS;
    public static final char HELP;
    public static final char VERSION;
    public static final char SHOW_VERSION;
    public static final char NON_RECURSIVE;
    public static final char UPDATE_SNAPSHOTS;
    public static final char ACTIVATE_PROFILES;
    public static final java.lang.String SUPPRESS_SNAPSHOT_UPDATES;
    public static final char CHECKSUM_FAILURE_POLICY;
    public static final char CHECKSUM_WARNING_POLICY;
    public static final char ALTERNATE_USER_SETTINGS;
    public static final java.lang.String ALTERNATE_GLOBAL_SETTINGS;
    public static final char ALTERNATE_USER_TOOLCHAINS;
    public static final java.lang.String ALTERNATE_GLOBAL_TOOLCHAINS;
    public static final java.lang.String FAIL_FAST;
    public static final java.lang.String FAIL_ON_SEVERITY;
    public static final java.lang.String FAIL_AT_END;
    public static final java.lang.String FAIL_NEVER;
    public static final java.lang.String RESUME;
    public static final java.lang.String RESUME_FROM;
    public static final java.lang.String PROJECT_LIST;
    public static final java.lang.String ALSO_MAKE;
    public static final java.lang.String ALSO_MAKE_DEPENDENTS;
    public static final java.lang.String LOG_FILE;
    public static final java.lang.String ENCRYPT_MASTER_PASSWORD;
    public static final java.lang.String ENCRYPT_PASSWORD;
    public static final java.lang.String THREADS;
    public static final java.lang.String LEGACY_LOCAL_REPOSITORY;
    public static final java.lang.String BUILDER;
    public static final java.lang.String NO_TRANSFER_PROGRESS;
    public static final java.lang.String COLOR;
    public static final java.lang.String DEBUG;
    protected org.apache.commons.cli.Options options;

    public void <init>()
    {
        CLIManager this;
        org.apache.commons.cli.Options $stack2, $stack9, $stack17, $stack25, $stack32, $stack39, $stack46, $stack54, $stack61, $stack68, $stack75, $stack83, $stack90, $stack96, $stack103, $stack110, $stack118, $stack125, $stack133, $stack140, $stack147, $stack153, $stack159, $stack165, $stack171, $stack178, $stack185, $stack191, $stack197, $stack204, $stack211, $stack219, $stack227, $stack234, $stack240, $stack247, $stack253, $stack261, $u0;
        java.lang.String $stack3, $stack10, $stack18, $stack26, $stack33, $stack40, $stack47, $stack55, $stack62, $stack69, $stack76, $stack84, $stack97, $stack104, $stack111, $stack126, $stack205;
        org.apache.commons.cli.Option$Builder $stack4, $stack5, $stack6, $stack11, $stack12, $stack13, $stack14, $stack19, $stack20, $stack21, $stack22, $stack27, $stack28, $stack29, $stack34, $stack35, $stack36, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack63, $stack64, $stack65, $stack70, $stack71, $stack72, $stack77, $stack78, $stack79, $stack80, $stack85, $stack86, $stack87, $stack91, $stack92, $stack93, $stack98, $stack99, $stack100, $stack105, $stack106, $stack107, $stack112, $stack113, $stack114, $stack115, $stack119, $stack120, $stack121, $stack122, $stack127, $stack128, $stack129, $stack130, $stack134, $stack135, $stack136, $stack137, $stack141, $stack142, $stack143, $stack144, $stack148, $stack149, $stack150, $stack154, $stack155, $stack156, $stack160, $stack161, $stack162, $stack166, $stack167, $stack168, $stack172, $stack173, $stack174, $stack175, $stack179, $stack180, $stack181, $stack182, $stack186, $stack187, $stack188, $stack192, $stack193, $stack194, $stack198, $stack199, $stack200, $stack201, $stack206, $stack207, $stack208, $stack212, $stack213, $stack214, $stack215, $stack216, $stack220, $stack221, $stack222, $stack223, $stack224, $stack228, $stack229, $stack230, $stack231, $stack235, $stack236, $stack237, $stack241, $stack242, $stack243, $stack244, $stack248, $stack249, $stack250, $stack254, $stack255, $stack256, $stack257, $stack258, $stack262, $stack263, $stack264;
        org.apache.commons.cli.Option $stack7, $stack15, $stack23, $stack30, $stack37, $stack44, $stack52, $stack59, $stack66, $stack73, $stack81, $stack88, $stack94, $stack101, $stack108, $stack116, $stack123, $stack131, $stack138, $stack145, $stack151, $stack157, $stack163, $stack169, $stack176, $stack183, $stack189, $stack195, $stack202, $stack209, $stack217, $stack225, $stack232, $stack238, $stack245, $stack251, $stack259, $stack265;
        org.apache.maven.cli.CLIManager $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38;

        this := @this: CLIManager;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.commons.cli.Options;

        specialinvoke $u0.<org.apache.commons.cli.Options: void <init>()>();

        $r0 = (org.apache.maven.cli.CLIManager) this;

        $r0.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options> = $u0;

        $r1 = (org.apache.maven.cli.CLIManager) this;

        $stack2 = $r1.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack3 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(104);

        $stack4 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("help");

        $stack6 = virtualinvoke $stack5.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Display help information");

        $stack7 = virtualinvoke $stack6.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack2.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack7);

        $r2 = (org.apache.maven.cli.CLIManager) this;

        $stack9 = $r2.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack10 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(102);

        $stack11 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("file");

        $stack13 = virtualinvoke $stack12.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Force the use of an alternate POM file (or directory with pom.xml)");

        $stack15 = virtualinvoke $stack14.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack9.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack15);

        $r3 = (org.apache.maven.cli.CLIManager) this;

        $stack17 = $r3.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack18 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(68);

        $stack19 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("define");

        $stack21 = virtualinvoke $stack20.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Define a system property");

        $stack23 = virtualinvoke $stack22.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack17.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack23);

        $r4 = (org.apache.maven.cli.CLIManager) this;

        $stack25 = $r4.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack26 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(111);

        $stack27 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack26);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("offline");

        $stack29 = virtualinvoke $stack28.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Work offline");

        $stack30 = virtualinvoke $stack29.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack25.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack30);

        $r5 = (org.apache.maven.cli.CLIManager) this;

        $stack32 = $r5.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack33 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(118);

        $stack34 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("version");

        $stack36 = virtualinvoke $stack35.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Display version information");

        $stack37 = virtualinvoke $stack36.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack32.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack37);

        $r6 = (org.apache.maven.cli.CLIManager) this;

        $stack39 = $r6.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack40 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(113);

        $stack41 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack40);

        $stack42 = virtualinvoke $stack41.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("quiet");

        $stack43 = virtualinvoke $stack42.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Quiet output - only show errors");

        $stack44 = virtualinvoke $stack43.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack39.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack44);

        $r7 = (org.apache.maven.cli.CLIManager) this;

        $stack46 = $r7.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack47 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(88);

        $stack48 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack47);

        $stack49 = virtualinvoke $stack48.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("verbose");

        $stack50 = virtualinvoke $stack49.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("verbose");

        $stack51 = virtualinvoke $stack50.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Produce execution verbose output");

        $stack52 = virtualinvoke $stack51.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack46.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack52);

        $r8 = (org.apache.maven.cli.CLIManager) this;

        $stack54 = $r8.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack55 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(101);

        $stack56 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack55);

        $stack57 = virtualinvoke $stack56.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("errors");

        $stack58 = virtualinvoke $stack57.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Produce execution error messages");

        $stack59 = virtualinvoke $stack58.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack54.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack59);

        $r9 = (org.apache.maven.cli.CLIManager) this;

        $stack61 = $r9.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack62 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(78);

        $stack63 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack62);

        $stack64 = virtualinvoke $stack63.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("non-recursive");

        $stack65 = virtualinvoke $stack64.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Do not recurse into sub-projects. When used together with -pl, do not recurse into sub-projects of selected aggregators");

        $stack66 = virtualinvoke $stack65.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack61.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack66);

        $r10 = (org.apache.maven.cli.CLIManager) this;

        $stack68 = $r10.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack69 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(85);

        $stack70 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack69);

        $stack71 = virtualinvoke $stack70.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("update-snapshots");

        $stack72 = virtualinvoke $stack71.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Forces a check for missing releases and updated snapshots on remote repositories");

        $stack73 = virtualinvoke $stack72.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack68.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack73);

        $r11 = (org.apache.maven.cli.CLIManager) this;

        $stack75 = $r11.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack76 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(80);

        $stack77 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack76);

        $stack78 = virtualinvoke $stack77.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("activate-profiles");

        $stack79 = virtualinvoke $stack78.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Comma-delimited list of profiles to activate. Prefixing a profile with ! excludes it, and ? marks it as optional");

        $stack80 = virtualinvoke $stack79.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack81 = virtualinvoke $stack80.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack75.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack81);

        $r12 = (org.apache.maven.cli.CLIManager) this;

        $stack83 = $r12.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack84 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(66);

        $stack85 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack84);

        $stack86 = virtualinvoke $stack85.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("batch-mode");

        $stack87 = virtualinvoke $stack86.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Run in non-interactive (batch) mode (disables output color)");

        $stack88 = virtualinvoke $stack87.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack83.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack88);

        $r13 = (org.apache.maven.cli.CLIManager) this;

        $stack90 = $r13.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack91 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("nsu");

        $stack92 = virtualinvoke $stack91.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("no-snapshot-updates");

        $stack93 = virtualinvoke $stack92.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Suppress SNAPSHOT updates");

        $stack94 = virtualinvoke $stack93.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack90.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack94);

        $r14 = (org.apache.maven.cli.CLIManager) this;

        $stack96 = $r14.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack97 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(67);

        $stack98 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack97);

        $stack99 = virtualinvoke $stack98.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("strict-checksums");

        $stack100 = virtualinvoke $stack99.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Fail the build if checksums don\'t match");

        $stack101 = virtualinvoke $stack100.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack96.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack101);

        $r15 = (org.apache.maven.cli.CLIManager) this;

        $stack103 = $r15.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack104 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(99);

        $stack105 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack104);

        $stack106 = virtualinvoke $stack105.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("lax-checksums");

        $stack107 = virtualinvoke $stack106.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Warn if checksums don\'t match");

        $stack108 = virtualinvoke $stack107.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack103.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack108);

        $r16 = (org.apache.maven.cli.CLIManager) this;

        $stack110 = $r16.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack111 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(115);

        $stack112 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack111);

        $stack113 = virtualinvoke $stack112.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("settings");

        $stack114 = virtualinvoke $stack113.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Alternate path for the user settings file");

        $stack115 = virtualinvoke $stack114.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack116 = virtualinvoke $stack115.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack110.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack116);

        $r17 = (org.apache.maven.cli.CLIManager) this;

        $stack118 = $r17.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack119 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("gs");

        $stack120 = virtualinvoke $stack119.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("global-settings");

        $stack121 = virtualinvoke $stack120.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Alternate path for the global settings file");

        $stack122 = virtualinvoke $stack121.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack123 = virtualinvoke $stack122.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack118.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack123);

        $r18 = (org.apache.maven.cli.CLIManager) this;

        $stack125 = $r18.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack126 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(116);

        $stack127 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack126);

        $stack128 = virtualinvoke $stack127.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("toolchains");

        $stack129 = virtualinvoke $stack128.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Alternate path for the user toolchains file");

        $stack130 = virtualinvoke $stack129.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack131 = virtualinvoke $stack130.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack125.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack131);

        $r19 = (org.apache.maven.cli.CLIManager) this;

        $stack133 = $r19.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack134 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("gt");

        $stack135 = virtualinvoke $stack134.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("global-toolchains");

        $stack136 = virtualinvoke $stack135.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Alternate path for the global toolchains file");

        $stack137 = virtualinvoke $stack136.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack138 = virtualinvoke $stack137.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack133.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack138);

        $r20 = (org.apache.maven.cli.CLIManager) this;

        $stack140 = $r20.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack141 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("fos");

        $stack142 = virtualinvoke $stack141.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("fail-on-severity");

        $stack143 = virtualinvoke $stack142.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Configure which severity of logging should cause the build to fail");

        $stack144 = virtualinvoke $stack143.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArgs()>();

        $stack145 = virtualinvoke $stack144.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack140.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack145);

        $r21 = (org.apache.maven.cli.CLIManager) this;

        $stack147 = $r21.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack148 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("ff");

        $stack149 = virtualinvoke $stack148.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("fail-fast");

        $stack150 = virtualinvoke $stack149.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Stop at first failure in reactorized builds");

        $stack151 = virtualinvoke $stack150.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack147.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack151);

        $r22 = (org.apache.maven.cli.CLIManager) this;

        $stack153 = $r22.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack154 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("fae");

        $stack155 = virtualinvoke $stack154.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("fail-at-end");

        $stack156 = virtualinvoke $stack155.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Only fail the build afterwards; allow all non-impacted builds to continue");

        $stack157 = virtualinvoke $stack156.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack153.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack157);

        $r23 = (org.apache.maven.cli.CLIManager) this;

        $stack159 = $r23.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack160 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("fn");

        $stack161 = virtualinvoke $stack160.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("fail-never");

        $stack162 = virtualinvoke $stack161.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("NEVER fail the build, regardless of project result");

        $stack163 = virtualinvoke $stack162.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack159.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack163);

        $r24 = (org.apache.maven.cli.CLIManager) this;

        $stack165 = $r24.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack166 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("r");

        $stack167 = virtualinvoke $stack166.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("resume");

        $stack168 = virtualinvoke $stack167.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Resume reactor from the last failed project, using the resume.properties file in the build directory");

        $stack169 = virtualinvoke $stack168.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack165.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack169);

        $r25 = (org.apache.maven.cli.CLIManager) this;

        $stack171 = $r25.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack172 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("rf");

        $stack173 = virtualinvoke $stack172.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("resume-from");

        $stack174 = virtualinvoke $stack173.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack175 = virtualinvoke $stack174.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Resume reactor from specified project");

        $stack176 = virtualinvoke $stack175.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack171.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack176);

        $r26 = (org.apache.maven.cli.CLIManager) this;

        $stack178 = $r26.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack179 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("pl");

        $stack180 = virtualinvoke $stack179.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("projects");

        $stack181 = virtualinvoke $stack180.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Comma-delimited list of specified reactor projects to build instead of all projects. A project can be specified by [groupId]:artifactId or by its relative path. Prefixing a project with ! excludes it, and ? marks it as optional");

        $stack182 = virtualinvoke $stack181.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack183 = virtualinvoke $stack182.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack178.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack183);

        $r27 = (org.apache.maven.cli.CLIManager) this;

        $stack185 = $r27.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack186 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("am");

        $stack187 = virtualinvoke $stack186.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("also-make");

        $stack188 = virtualinvoke $stack187.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("If project list is specified, also build projects required by the list");

        $stack189 = virtualinvoke $stack188.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack185.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack189);

        $r28 = (org.apache.maven.cli.CLIManager) this;

        $stack191 = $r28.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack192 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("amd");

        $stack193 = virtualinvoke $stack192.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("also-make-dependents");

        $stack194 = virtualinvoke $stack193.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("If project list is specified, also build projects that depend on projects on the list");

        $stack195 = virtualinvoke $stack194.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack191.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack195);

        $r29 = (org.apache.maven.cli.CLIManager) this;

        $stack197 = $r29.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack198 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("l");

        $stack199 = virtualinvoke $stack198.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("log-file");

        $stack200 = virtualinvoke $stack199.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack201 = virtualinvoke $stack200.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Log file where all build output will go (disables output color)");

        $stack202 = virtualinvoke $stack201.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack197.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack202);

        $r30 = (org.apache.maven.cli.CLIManager) this;

        $stack204 = $r30.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack205 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(86);

        $stack206 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>($stack205);

        $stack207 = virtualinvoke $stack206.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("show-version");

        $stack208 = virtualinvoke $stack207.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Display version information WITHOUT stopping build");

        $stack209 = virtualinvoke $stack208.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack204.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack209);

        $r31 = (org.apache.maven.cli.CLIManager) this;

        $stack211 = $r31.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack212 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("emp");

        $stack213 = virtualinvoke $stack212.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("encrypt-master-password");

        $stack214 = virtualinvoke $stack213.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack215 = virtualinvoke $stack214.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder optionalArg(boolean)>(1);

        $stack216 = virtualinvoke $stack215.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Encrypt master security password");

        $stack217 = virtualinvoke $stack216.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack211.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack217);

        $r32 = (org.apache.maven.cli.CLIManager) this;

        $stack219 = $r32.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack220 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("ep");

        $stack221 = virtualinvoke $stack220.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("encrypt-password");

        $stack222 = virtualinvoke $stack221.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack223 = virtualinvoke $stack222.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder optionalArg(boolean)>(1);

        $stack224 = virtualinvoke $stack223.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Encrypt server password");

        $stack225 = virtualinvoke $stack224.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack219.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack225);

        $r33 = (org.apache.maven.cli.CLIManager) this;

        $stack227 = $r33.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack228 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("T");

        $stack229 = virtualinvoke $stack228.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("threads");

        $stack230 = virtualinvoke $stack229.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack231 = virtualinvoke $stack230.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Thread count, for instance 2.0C where C is core multiplied");

        $stack232 = virtualinvoke $stack231.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack227.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack232);

        $r34 = (org.apache.maven.cli.CLIManager) this;

        $stack234 = $r34.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack235 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("llr");

        $stack236 = virtualinvoke $stack235.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("legacy-local-repository");

        $stack237 = virtualinvoke $stack236.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Use Maven 2 Legacy Local Repository behaviour, ie no use of _remote.repositories. Can also be activated by using -Dmaven.legacyLocalRepo=true");

        $stack238 = virtualinvoke $stack237.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack234.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack238);

        $r35 = (org.apache.maven.cli.CLIManager) this;

        $stack240 = $r35.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack241 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("b");

        $stack242 = virtualinvoke $stack241.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("builder");

        $stack243 = virtualinvoke $stack242.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack244 = virtualinvoke $stack243.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("The id of the build strategy to use");

        $stack245 = virtualinvoke $stack244.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack240.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack245);

        $r36 = (org.apache.maven.cli.CLIManager) this;

        $stack247 = $r36.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack248 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder(java.lang.String)>("ntp");

        $stack249 = virtualinvoke $stack248.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("no-transfer-progress");

        $stack250 = virtualinvoke $stack249.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Do not display transfer progress when downloading or uploading");

        $stack251 = virtualinvoke $stack250.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack247.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack251);

        $r37 = (org.apache.maven.cli.CLIManager) this;

        $stack253 = $r37.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack254 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder()>();

        $stack255 = virtualinvoke $stack254.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("color");

        $stack256 = virtualinvoke $stack255.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder hasArg()>();

        $stack257 = virtualinvoke $stack256.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder optionalArg(boolean)>(1);

        $stack258 = virtualinvoke $stack257.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Defines the color mode of the output. Supported are \'auto\', \'always\', \'never\'.");

        $stack259 = virtualinvoke $stack258.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack253.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack259);

        $r38 = (org.apache.maven.cli.CLIManager) this;

        $stack261 = $r38.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack262 = staticinvoke <org.apache.commons.cli.Option: org.apache.commons.cli.Option$Builder builder()>();

        $stack263 = virtualinvoke $stack262.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder longOpt(java.lang.String)>("debug");

        $stack264 = virtualinvoke $stack263.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option$Builder desc(java.lang.String)>("Produce execution verbose output (deprecated; only kept for backward compatibility)");

        $stack265 = virtualinvoke $stack264.<org.apache.commons.cli.Option$Builder: org.apache.commons.cli.Option build()>();

        virtualinvoke $stack261.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($stack265);

        return;
    }

    public org.apache.commons.cli.CommandLine parse(java.lang.String[]) throws org.apache.commons.cli.ParseException
    {
        java.lang.String[] args, cleanArgs;
        CLIManager this;
        org.apache.commons.cli.Options $stack6;
        org.apache.commons.cli.CommandLine $stack7;
        org.apache.commons.cli.GnuParser $u0;
        org.apache.maven.cli.CLIManager $r0;
        org.apache.commons.cli.CommandLineParser $r1;

        this := @this: CLIManager;

        args := @parameter0: java.lang.String[];

        cleanArgs = staticinvoke <org.apache.maven.cli.CleanArgument: java.lang.String[] cleanArgs(java.lang.String[])>(args);

        $u0 = new org.apache.commons.cli.GnuParser;

        specialinvoke $u0.<org.apache.commons.cli.GnuParser: void <init>()>();

        $r0 = (org.apache.maven.cli.CLIManager) this;

        $stack6 = $r0.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $r1 = (org.apache.commons.cli.CommandLineParser) $u0;

        $stack7 = interfaceinvoke $r1.<org.apache.commons.cli.CommandLineParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($stack6, cleanArgs);

        return $stack7;
    }

    public void displayHelp(java.io.PrintStream)
    {
        java.io.PrintStream stdout;
        java.lang.String $stack10, $stack13, $stack17;
        java.lang.StringBuilder $stack11, $stack12, $u2;
        CLIManager this;
        org.apache.commons.cli.Options $stack14;
        int width;
        java.io.PrintWriter $u0;
        org.apache.commons.cli.HelpFormatter $u1;
        org.apache.maven.cli.CLIManager $r0;

        this := @this: CLIManager;

        stdout := @parameter0: java.io.PrintStream;

        virtualinvoke stdout.<java.io.PrintStream: void println()>();

        $u0 = new java.io.PrintWriter;

        specialinvoke $u0.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(stdout);

        $u1 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $u1.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        width = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: int getTerminalWidth()>();

        if width > 0 goto label1;

        width = 74;

     label1:
        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack10 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack11 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Options:");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (org.apache.maven.cli.CLIManager) this;

        $stack14 = $r0.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.Options options>;

        $stack17 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke $u1.<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>($u0, width, "mvn [options] [<goal(s)>] [<phase(s)>]", $stack13, $stack14, 1, 3, $stack17, 0);

        virtualinvoke $u0.<java.io.PrintWriter: void flush()>();

        return;
    }

    public static void <clinit>()
    {
        <CLIManager: java.lang.String DEBUG> = "debug";

        <CLIManager: java.lang.String COLOR> = "color";

        <CLIManager: java.lang.String NO_TRANSFER_PROGRESS> = "ntp";

        <CLIManager: java.lang.String BUILDER> = "b";

        <CLIManager: java.lang.String LEGACY_LOCAL_REPOSITORY> = "llr";

        <CLIManager: java.lang.String THREADS> = "T";

        <CLIManager: java.lang.String ENCRYPT_PASSWORD> = "ep";

        <CLIManager: java.lang.String ENCRYPT_MASTER_PASSWORD> = "emp";

        <CLIManager: java.lang.String LOG_FILE> = "l";

        <CLIManager: java.lang.String ALSO_MAKE_DEPENDENTS> = "amd";

        <CLIManager: java.lang.String ALSO_MAKE> = "am";

        <CLIManager: java.lang.String PROJECT_LIST> = "pl";

        <CLIManager: java.lang.String RESUME_FROM> = "rf";

        <CLIManager: java.lang.String RESUME> = "r";

        <CLIManager: java.lang.String FAIL_NEVER> = "fn";

        <CLIManager: java.lang.String FAIL_AT_END> = "fae";

        <CLIManager: java.lang.String FAIL_ON_SEVERITY> = "fos";

        <CLIManager: java.lang.String FAIL_FAST> = "ff";

        <CLIManager: java.lang.String ALTERNATE_GLOBAL_TOOLCHAINS> = "gt";

        <CLIManager: char ALTERNATE_USER_TOOLCHAINS> = 116;

        <CLIManager: java.lang.String ALTERNATE_GLOBAL_SETTINGS> = "gs";

        <CLIManager: char ALTERNATE_USER_SETTINGS> = 115;

        <CLIManager: char CHECKSUM_WARNING_POLICY> = 99;

        <CLIManager: char CHECKSUM_FAILURE_POLICY> = 67;

        <CLIManager: java.lang.String SUPPRESS_SNAPSHOT_UPDATES> = "nsu";

        <CLIManager: char ACTIVATE_PROFILES> = 80;

        <CLIManager: char UPDATE_SNAPSHOTS> = 85;

        <CLIManager: char NON_RECURSIVE> = 78;

        <CLIManager: char SHOW_VERSION> = 86;

        <CLIManager: char VERSION> = 118;

        <CLIManager: char HELP> = 104;

        <CLIManager: char ERRORS> = 101;

        <CLIManager: char VERBOSE> = 88;

        <CLIManager: char QUIET> = 113;

        <CLIManager: char OFFLINE> = 111;

        <CLIManager: char SET_SYSTEM_PROPERTY> = 68;

        <CLIManager: char BATCH_MODE> = 66;

        <CLIManager: char ALTERNATE_POM_FILE> = 102;

        return;
    }
}
