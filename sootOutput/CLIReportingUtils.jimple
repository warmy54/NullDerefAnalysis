public final class CLIReportingUtils extends java.lang.Object
{
    public static final long MB;
    private static final long ONE_SECOND;
    private static final long ONE_MINUTE;
    private static final long ONE_HOUR;
    private static final long ONE_DAY;
    public static final java.lang.String BUILD_VERSION_PROPERTY;

    public void <init>()
    {
        CLIReportingUtils this;

        this := @this: CLIReportingUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String showVersion()
    {
        java.lang.String ls, $stack7, $stack12, $stack15, $stack17, $stack18, $stack22, $stack25, $stack28, $stack35, $stack39, $stack42, $stack45, $stack48, $stack51;
        java.util.Properties properties;
        java.lang.StringBuilder $stack5, $stack9, $stack11, $stack13, $stack14, $stack16, $stack19, $stack21, $stack23, $stack24, $stack26, $stack27, $stack29, $stack31, $stack33, $stack34, $stack36, $stack38, $stack40, $stack41, $stack43, $stack44, $stack46, $stack47, $stack49;
        org.apache.maven.shared.utils.logging.MessageBuilder $stack6, $stack8;
        java.util.Locale $stack32;

        ls = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        properties = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.util.Properties getBuildProperties()>();

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>(int)>(256);

        $stack6 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack7 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String createMavenVersionString(java.util.Properties)>(properties);

        $stack8 = interfaceinvoke $stack6.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>($stack7);

        $stack9 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack8);

        virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ls);

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke properties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("distributionShortName");

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" home: ");

        $stack15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("maven.home", "<unknown Maven home>");

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack18 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String reduce(java.lang.String)>($stack17);

        $stack19 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ls);

        $stack21 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Java version: ");

        $stack22 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.version", "<unknown Java version>");

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", vendor: ");

        $stack25 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vendor", "<unknown vendor>");

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", runtime: ");

        $stack28 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.home", "<unknown runtime>");

        $stack29 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack28);

        virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ls);

        $stack31 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default locale: ");

        $stack32 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack33 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack32);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", platform encoding: ");

        $stack35 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "<unknown encoding>");

        $stack36 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

        virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ls);

        $stack38 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OS name: \"");

        $stack39 = <org.codehaus.plexus.util.Os: java.lang.String OS_NAME>;

        $stack40 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack39);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", version: \"");

        $stack42 = <org.codehaus.plexus.util.Os: java.lang.String OS_VERSION>;

        $stack43 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", arch: \"");

        $stack45 = <org.codehaus.plexus.util.Os: java.lang.String OS_ARCH>;

        $stack46 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack45);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", family: \"");

        $stack48 = <org.codehaus.plexus.util.Os: java.lang.String OS_FAMILY>;

        $stack49 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack48);

        virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $stack51 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack51;
    }

    public static java.lang.String showVersionMinimal()
    {
        java.util.Properties properties;
        java.lang.String $stack3, version, $stack5;

        properties = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.util.Properties getBuildProperties()>();

        $stack3 = virtualinvoke properties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");

        version = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String reduce(java.lang.String)>($stack3);

        if version == null goto label1;

        $stack5 = version;

        goto label2;

     label1:
        $stack5 = "<version unknown>";

     label2:
        return $stack5;
    }

    static java.lang.String createMavenVersionString(java.util.Properties)
    {
        java.util.Properties buildProperties;
        java.lang.String $stack7, timestamp, $stack9, version, $stack11, rev, $stack13, distributionName, ts, msg, $stack54, $stack48, $stack46;
        java.lang.StringBuilder $stack15, $stack16, $stack17, $stack19, $stack20, $stack21, $stack23, $stack24, $stack25, $stack27, $stack28, $stack29, $stack38, $stack39, $stack40, $stack41, $stack32, $stack33, $stack34;
        boolean $stack31;
        long $stack36;

        buildProperties := @parameter0: java.util.Properties;

        $stack7 = virtualinvoke buildProperties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("timestamp");

        timestamp = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String reduce(java.lang.String)>($stack7);

        $stack9 = virtualinvoke buildProperties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");

        version = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String reduce(java.lang.String)>($stack9);

        $stack11 = virtualinvoke buildProperties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("buildNumber");

        rev = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String reduce(java.lang.String)>($stack11);

        $stack13 = virtualinvoke buildProperties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("distributionName");

        distributionName = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String reduce(java.lang.String)>($stack13);

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(distributionName);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        msg = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        if version == null goto label1;

        $stack54 = version;

        goto label2;

     label1:
        $stack54 = "<version unknown>";

     label2:
        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack54);

        msg = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        if rev != null goto label3;

        if timestamp == null goto label9;

     label3:
        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        msg = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack27 = new java.lang.StringBuilder;

        specialinvoke $stack27.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        if rev == null goto label4;

        $stack48 = rev;

        goto label5;

     label4:
        $stack48 = "";

     label5:
        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack48);

        msg = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(timestamp);

        if $stack31 == 0 goto label8;

        $stack36 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(timestamp);

        ts = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String formatTimestamp(long)>($stack36);

        $stack38 = new java.lang.StringBuilder;

        specialinvoke $stack38.<java.lang.StringBuilder: void <init>()>();

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        if rev == null goto label6;

        $stack46 = "; ";

        goto label7;

     label6:
        $stack46 = "";

     label7:
        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack46);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ts);

        msg = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        msg = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.String toString()>();

     label9:
        return msg;
    }

    private static java.lang.String reduce(java.lang.String)
    {
        java.lang.String s, $stack2;
        boolean $stack1, $stack3;

        s := @parameter0: java.lang.String;

        if s == null goto label2;

        $stack1 = virtualinvoke s.<java.lang.String: boolean startsWith(java.lang.String)>("${");

        if $stack1 == 0 goto label1;

        $stack3 = virtualinvoke s.<java.lang.String: boolean endsWith(java.lang.String)>("}");

        if $stack3 == 0 goto label1;

        $stack2 = null;

        goto label3;

     label1:
        $stack2 = s;

        goto label3;

     label2:
        $stack2 = null;

     label3:
        return $stack2;
    }

    static java.util.Properties getBuildProperties()
    {
        java.util.Properties $stack4;
        java.lang.Class $stack5;
        java.io.IOException $stack8;
        java.lang.StringBuilder $stack9, $stack11, $stack13;
        java.io.PrintStream $stack10;
        java.lang.String $stack12, $stack14;
        java.lang.Throwable $stack16, $stack17;
        java.io.InputStream resourceAsStream;

        $stack4 = new java.util.Properties;

        specialinvoke $stack4.<java.util.Properties: void <init>()>();

     label01:
        $stack5 = class "Lorg/apache/maven/cli/MavenCli;";

        resourceAsStream = virtualinvoke $stack5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/org/apache/maven/messages/build.properties");

     label02:
        if resourceAsStream == null goto label03;

        virtualinvoke $stack4.<java.util.Properties: void load(java.io.InputStream)>(resourceAsStream);

     label03:
        if resourceAsStream == null goto label09;

        virtualinvoke resourceAsStream.<java.io.InputStream: void close()>();

        goto label09;

     label04:
        $stack17 := @caughtexception;

        if resourceAsStream == null goto label08;

     label05:
        virtualinvoke resourceAsStream.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $stack16 := @caughtexception;

        virtualinvoke $stack17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack16);

     label08:
        throw $stack17;

     label09:
        goto label11;

     label10:
        $stack8 := @caughtexception;

        $stack10 = <java.lang.System: java.io.PrintStream err>;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable determine version from JAR file: ");

        $stack12 = virtualinvoke $stack8.<java.io.IOException: java.lang.String getMessage()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack10.<java.io.PrintStream: void println(java.lang.String)>($stack14);

     label11:
        return $stack4;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.io.IOException from label01 to label09 with label10;
    }

    public static void showError(org.slf4j.Logger, java.lang.String, java.lang.Throwable, boolean)
    {
        boolean showStackTrace;
        org.slf4j.Logger logger;
        java.lang.String message, $stack5, $stack8;
        java.lang.Throwable e, cause;

        logger := @parameter0: org.slf4j.Logger;

        message := @parameter1: java.lang.String;

        e := @parameter2: java.lang.Throwable;

        showStackTrace := @parameter3: boolean;

        if showStackTrace == 0 goto label1;

        interfaceinvoke logger.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>(message, e);

        goto label3;

     label1:
        interfaceinvoke logger.<org.slf4j.Logger: void error(java.lang.String)>(message);

        if e == null goto label3;

        $stack5 = virtualinvoke e.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke logger.<org.slf4j.Logger: void error(java.lang.String)>($stack5);

        cause = virtualinvoke e.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label2:
        if cause == null goto label3;

        $stack8 = virtualinvoke cause.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke logger.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Caused by: {}", $stack8);

        cause = virtualinvoke cause.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label2;

     label3:
        return;
    }

    public static java.lang.String formatTimestamp(long)
    {
        java.text.SimpleDateFormat $stack3;
        java.util.Date $stack4;
        long timestamp;
        java.lang.String $stack5;

        timestamp := @parameter0: long;

        $stack3 = new java.text.SimpleDateFormat;

        specialinvoke $stack3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ssXXX");

        $stack4 = new java.util.Date;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>(timestamp);

        $stack5 = virtualinvoke $stack3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($stack4);

        return $stack5;
    }

    public static java.lang.String formatDuration(long)
    {
        long duration, ms, $stack13, s, $stack14, m, $stack15, h, d;
        byte $stack16, $stack17, $stack18;
        java.lang.String format, $stack30;
        java.lang.Object[] $stack19;
        java.lang.Long $stack21, $stack23, $stack25, $stack27, $stack29;

        duration := @parameter0: long;

        ms = duration % 1000L;

        $stack13 = duration / 1000L;

        s = $stack13 % 60L;

        $stack14 = duration / 60000L;

        m = $stack14 % 60L;

        $stack15 = duration / 3600000L;

        h = $stack15 % 24L;

        d = duration / 86400000L;

        $stack16 = d cmp 0L;

        if $stack16 <= 0 goto label1;

        format = "%d d %02d:%02d h";

        goto label4;

     label1:
        $stack17 = h cmp 0L;

        if $stack17 <= 0 goto label2;

        format = "%2$02d:%3$02d h";

        goto label4;

     label2:
        $stack18 = m cmp 0L;

        if $stack18 <= 0 goto label3;

        format = "%3$02d:%4$02d min";

        goto label4;

     label3:
        format = "%4$d.%5$03d s";

     label4:
        $stack19 = newarray (java.lang.Object)[5];

        $stack21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(d);

        $stack19[0] = $stack21;

        $stack23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(h);

        $stack19[1] = $stack23;

        $stack25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(m);

        $stack19[2] = $stack25;

        $stack27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(s);

        $stack19[3] = $stack27;

        $stack29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(ms);

        $stack19[4] = $stack29;

        $stack30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(format, $stack19);

        return $stack30;
    }

    public static void <clinit>()
    {
        <CLIReportingUtils: java.lang.String BUILD_VERSION_PROPERTY> = "version";

        <CLIReportingUtils: long ONE_DAY> = 86400000L;

        <CLIReportingUtils: long ONE_HOUR> = 3600000L;

        <CLIReportingUtils: long ONE_MINUTE> = 60000L;

        <CLIReportingUtils: long ONE_SECOND> = 1000L;

        <CLIReportingUtils: long MB> = 1048576L;

        return;
    }
}
