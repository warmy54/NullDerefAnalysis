public class CanonicalProjectBuilderTest extends org.apache.maven.project.AbstractMavenProjectTestCase
{

    public void <init>()
    {
        CanonicalProjectBuilderTest this;

        this := @this: CanonicalProjectBuilderTest;

        specialinvoke this.<org.apache.maven.project.AbstractMavenProjectTestCase: void <init>()>();

        return;
    }

    public void testProjectBuilder() throws java.lang.Exception
    {
        java.io.File f;
        CanonicalProjectBuilderTest this;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack13, key, $stack18, $stack22, $stack25, $stack28, g0, $stack36, $stack38;
        java.util.List plugins, $stack31, check#5;
        boolean $stack16, $stack39;
        java.lang.Object $stack19, $stack30, $stack32, $stack33, $stack37;
        org.codehaus.plexus.util.xml.Xpp3Dom $stack21, $stack24, $stack27, $stack35, configuration#4;
        org.apache.maven.model.PluginExecution execution;
        org.apache.maven.model.Plugin plugin, check;
        java.util.Iterator configuration;
        org.apache.maven.project.canonical.CanonicalProjectBuilderTest $r0;

        this := @this: CanonicalProjectBuilderTest;

        f = staticinvoke <org.apache.maven.project.canonical.CanonicalProjectBuilderTest: java.io.File getFileForClasspathResource(java.lang.String)>("canonical-pom.xml");

        $r0 = (org.apache.maven.project.canonical.CanonicalProjectBuilderTest) this;

        project = virtualinvoke $r0.<org.apache.maven.project.canonical.CanonicalProjectBuilderTest: org.apache.maven.project.MavenProject getProject(java.io.File)>(f);

        $stack13 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getModelVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("4.0.0", $stack13);

        plugins = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        key = "org.apache.maven.plugins:maven-plexus-plugin";

        plugin = null;

        configuration = interfaceinvoke plugins.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack16 = interfaceinvoke configuration.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label3;

        $stack37 = interfaceinvoke configuration.<java.util.Iterator: java.lang.Object next()>();

        check = (org.apache.maven.model.Plugin) $stack37;

        $stack38 = virtualinvoke check.<org.apache.maven.model.Plugin: java.lang.String getKey()>();

        $stack39 = virtualinvoke key.<java.lang.String: boolean equals(java.lang.Object)>($stack38);

        if $stack39 == 0 goto label2;

        plugin = check;

        goto label3;

     label2:
        goto label1;

     label3:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(plugin);

        $stack18 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack18);

        $stack19 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.Object getConfiguration()>();

        configuration#4 = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack19;

        $stack21 = virtualinvoke configuration#4.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>("plexusConfiguration");

        $stack22 = virtualinvoke $stack21.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getValue()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src/conf/plexus.conf", $stack22);

        $stack24 = virtualinvoke configuration#4.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>("plexusConfigurationPropertiesFile");

        $stack25 = virtualinvoke $stack24.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getValue()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src/conf/plexus.properties", $stack25);

        $stack27 = virtualinvoke configuration#4.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>("plexusApplicationName");

        $stack28 = virtualinvoke $stack27.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getValue()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("Continuum", $stack28);

        check#5 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.util.List getExecutions()>();

        $stack30 = interfaceinvoke check#5.<java.util.List: java.lang.Object get(int)>(0);

        execution = (org.apache.maven.model.PluginExecution) $stack30;

        $stack31 = virtualinvoke execution.<org.apache.maven.model.PluginExecution: java.util.List getGoals()>();

        $stack32 = interfaceinvoke $stack31.<java.util.List: java.lang.Object get(int)>(0);

        g0 = (java.lang.String) $stack32;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("plexus:runtime", g0);

        $stack33 = virtualinvoke execution.<org.apache.maven.model.PluginExecution: java.lang.Object getConfiguration()>();

        configuration#4 = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack33;

        $stack35 = virtualinvoke configuration#4.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>("plexusApplicationName");

        $stack36 = virtualinvoke $stack35.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getValue()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ContinuumPro", $stack36);

        return;
    }
}
