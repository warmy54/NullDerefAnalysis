public class CanvasFrame extends javax.swing.JFrame
{
    public static org.bytedeco.javacv.CanvasFrame global;
    public static final long DEFAULT_LATENCY;
    private long latency;
    private java.awt.event.KeyEvent keyEvent;
    private java.awt.KeyEventDispatcher keyEventDispatch;
    protected java.awt.Canvas canvas;
    protected boolean needInitialResize;
    protected double initialScale;
    protected double inverseGamma;
    private java.awt.Color color;
    private java.awt.Image image;
    private java.awt.image.BufferedImage buffer;
    private org.bytedeco.javacv.Java2DFrameConverter converter;

    public static java.lang.String[] getScreenDescriptions()
    {
        java.awt.GraphicsDevice[] screens;
        int $stack4, $stack5, i;
        java.lang.String[] descriptions;
        java.awt.GraphicsDevice $stack6;
        java.lang.String $stack7;

        screens = staticinvoke <org.bytedeco.javacv.CanvasFrame: java.awt.GraphicsDevice[] getScreenDevices()>();

        $stack4 = lengthof screens;

        descriptions = newarray (java.lang.String)[$stack4];

        i = 0;

     label1:
        $stack5 = lengthof screens;

        if i >= $stack5 goto label2;

        $stack6 = screens[i];

        $stack7 = virtualinvoke $stack6.<java.awt.GraphicsDevice: java.lang.String getIDstring()>();

        descriptions[i] = $stack7;

        i = i + 1;

        goto label1;

     label2:
        return descriptions;
    }

    public static java.awt.DisplayMode getDisplayMode(int)
    {
        java.awt.GraphicsDevice[] screens;
        int screenNumber, $stack3;
        java.awt.GraphicsDevice $stack5;
        java.awt.DisplayMode $stack6;

        screenNumber := @parameter0: int;

        screens = staticinvoke <org.bytedeco.javacv.CanvasFrame: java.awt.GraphicsDevice[] getScreenDevices()>();

        if screenNumber < 0 goto label1;

        $stack3 = lengthof screens;

        if screenNumber >= $stack3 goto label1;

        $stack5 = screens[screenNumber];

        $stack6 = virtualinvoke $stack5.<java.awt.GraphicsDevice: java.awt.DisplayMode getDisplayMode()>();

        return $stack6;

     label1:
        return null;
    }

    public static double getGamma(int)
    {
        java.awt.GraphicsDevice[] screens;
        int screenNumber, $stack3;
        java.awt.GraphicsDevice $stack5;
        double $stack6;

        screenNumber := @parameter0: int;

        screens = staticinvoke <org.bytedeco.javacv.CanvasFrame: java.awt.GraphicsDevice[] getScreenDevices()>();

        if screenNumber < 0 goto label1;

        $stack3 = lengthof screens;

        if screenNumber >= $stack3 goto label1;

        $stack5 = screens[screenNumber];

        $stack6 = staticinvoke <org.bytedeco.javacv.CanvasFrame: double getGamma(java.awt.GraphicsDevice)>($stack5);

        return $stack6;

     label1:
        return 0.0;
    }

    public static double getDefaultGamma()
    {
        java.awt.GraphicsDevice $stack0;
        double $stack1;

        $stack0 = staticinvoke <org.bytedeco.javacv.CanvasFrame: java.awt.GraphicsDevice getDefaultScreenDevice()>();

        $stack1 = staticinvoke <org.bytedeco.javacv.CanvasFrame: double getGamma(java.awt.GraphicsDevice)>($stack0);

        return $stack1;
    }

    public static double getGamma(java.awt.GraphicsDevice)
    {
        java.awt.GraphicsDevice screen;
        java.awt.GraphicsConfiguration $stack3;
        java.awt.image.ColorModel $stack4;
        java.awt.color.ColorSpace cs;
        boolean $stack6;
        java.awt.color.ICC_ColorSpace $stack7;
        java.awt.color.ICC_Profile $stack8;
        java.awt.color.ICC_ProfileRGB $stack9;
        float $stack10;
        double $stack11;
        java.lang.RuntimeException $stack12;

        screen := @parameter0: java.awt.GraphicsDevice;

        $stack3 = virtualinvoke screen.<java.awt.GraphicsDevice: java.awt.GraphicsConfiguration getDefaultConfiguration()>();

        $stack4 = virtualinvoke $stack3.<java.awt.GraphicsConfiguration: java.awt.image.ColorModel getColorModel()>();

        cs = virtualinvoke $stack4.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $stack6 = virtualinvoke cs.<java.awt.color.ColorSpace: boolean isCS_sRGB()>();

        if $stack6 == 0 goto label1;

        return 2.2;

     label1:
        $stack7 = (java.awt.color.ICC_ColorSpace) cs;

        $stack8 = virtualinvoke $stack7.<java.awt.color.ICC_ColorSpace: java.awt.color.ICC_Profile getProfile()>();

        $stack9 = (java.awt.color.ICC_ProfileRGB) $stack8;

        $stack10 = virtualinvoke $stack9.<java.awt.color.ICC_ProfileRGB: float getGamma(int)>(0);

        $stack11 = (double) $stack10;

     label2:
        return $stack11;

     label3:
        $stack12 := @caughtexception;

        return 0.0;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static java.awt.GraphicsDevice getScreenDevice(int) throws org.bytedeco.javacv.CanvasFrame$Exception
    {
        java.awt.GraphicsDevice[] screens;
        int screenNumber, $stack3, $stack10;
        java.awt.GraphicsDevice $stack4;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack11, $stack12, $u0;
        java.lang.String $stack13;
        org.bytedeco.javacv.CanvasFrame$Exception $u1;
        java.lang.Throwable $r0;

        screenNumber := @parameter0: int;

        screens = staticinvoke <org.bytedeco.javacv.CanvasFrame: java.awt.GraphicsDevice[] getScreenDevices()>();

        $stack3 = lengthof screens;

        if screenNumber < $stack3 goto label1;

        $u1 = new org.bytedeco.javacv.CanvasFrame$Exception;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CanvasFrame Error: Screen number ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(screenNumber);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found. There are only ");

        $stack10 = lengthof screens;

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" screens.");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.bytedeco.javacv.CanvasFrame$Exception: void <init>(java.lang.String)>($stack13);

        $r0 = (java.lang.Throwable) $u1;

        throw $r0;

     label1:
        $stack4 = screens[screenNumber];

        return $stack4;
    }

    public static java.awt.GraphicsDevice[] getScreenDevices()
    {
        java.awt.GraphicsEnvironment $stack0;
        java.awt.GraphicsDevice[] $stack1;

        $stack0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $stack1 = virtualinvoke $stack0.<java.awt.GraphicsEnvironment: java.awt.GraphicsDevice[] getScreenDevices()>();

        return $stack1;
    }

    public static java.awt.GraphicsDevice getDefaultScreenDevice()
    {
        java.awt.GraphicsEnvironment $stack0;
        java.awt.GraphicsDevice $stack1;

        $stack0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $stack1 = virtualinvoke $stack0.<java.awt.GraphicsEnvironment: java.awt.GraphicsDevice getDefaultScreenDevice()>();

        return $stack1;
    }

    public void <init>(java.lang.String)
    {
        CanvasFrame this;
        java.lang.String title;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        title := @parameter0: java.lang.String;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $r0.<org.bytedeco.javacv.CanvasFrame: void <init>(java.lang.String,double)>(title, 0.0);

        return;
    }

    public void <init>(java.lang.String, double)
    {
        CanvasFrame this;
        java.lang.String title;
        double gamma;
        org.bytedeco.javacv.CanvasFrame$3 $u0;
        org.bytedeco.javacv.Java2DFrameConverter $u1;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.awt.KeyEventDispatcher $r4;

        this := @this: CanvasFrame;

        title := @parameter0: java.lang.String;

        gamma := @parameter1: double;

        specialinvoke this.<javax.swing.JFrame: void <init>(java.lang.String)>(title);

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: long latency> = 200L;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent> = null;

        $u0 = new org.bytedeco.javacv.CanvasFrame$3;

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$3: void <init>(org.bytedeco.javacv.CanvasFrame)>($r2);

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        $r4 = (java.awt.KeyEventDispatcher) $u0;

        $r3.<org.bytedeco.javacv.CanvasFrame: java.awt.KeyEventDispatcher keyEventDispatch> = $r4;

        $r5 = (org.bytedeco.javacv.CanvasFrame) this;

        $r5.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas> = null;

        $r6 = (org.bytedeco.javacv.CanvasFrame) this;

        $r6.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize> = 0;

        $r7 = (org.bytedeco.javacv.CanvasFrame) this;

        $r7.<org.bytedeco.javacv.CanvasFrame: double initialScale> = 1.0;

        $r8 = (org.bytedeco.javacv.CanvasFrame) this;

        $r8.<org.bytedeco.javacv.CanvasFrame: double inverseGamma> = 1.0;

        $r9 = (org.bytedeco.javacv.CanvasFrame) this;

        $r9.<org.bytedeco.javacv.CanvasFrame: java.awt.Color color> = null;

        $r10 = (org.bytedeco.javacv.CanvasFrame) this;

        $r10.<org.bytedeco.javacv.CanvasFrame: java.awt.Image image> = null;

        $r11 = (org.bytedeco.javacv.CanvasFrame) this;

        $r11.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer> = null;

        $u1 = new org.bytedeco.javacv.Java2DFrameConverter;

        specialinvoke $u1.<org.bytedeco.javacv.Java2DFrameConverter: void <init>()>();

        $r12 = (org.bytedeco.javacv.CanvasFrame) this;

        $r12.<org.bytedeco.javacv.CanvasFrame: org.bytedeco.javacv.Java2DFrameConverter converter> = $u1;

        $r13 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $r13.<org.bytedeco.javacv.CanvasFrame: void init(boolean,java.awt.DisplayMode,double)>(0, null, gamma);

        return;
    }

    public void <init>(java.lang.String, java.awt.GraphicsConfiguration)
    {
        CanvasFrame this;
        java.lang.String title;
        java.awt.GraphicsConfiguration gc;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        title := @parameter0: java.lang.String;

        gc := @parameter1: java.awt.GraphicsConfiguration;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $r0.<org.bytedeco.javacv.CanvasFrame: void <init>(java.lang.String,java.awt.GraphicsConfiguration,double)>(title, gc, 0.0);

        return;
    }

    public void <init>(java.lang.String, java.awt.GraphicsConfiguration, double)
    {
        CanvasFrame this;
        java.lang.String title;
        java.awt.GraphicsConfiguration gc;
        double gamma;
        org.bytedeco.javacv.CanvasFrame$3 $u0;
        org.bytedeco.javacv.Java2DFrameConverter $u1;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.awt.KeyEventDispatcher $r4;

        this := @this: CanvasFrame;

        title := @parameter0: java.lang.String;

        gc := @parameter1: java.awt.GraphicsConfiguration;

        gamma := @parameter2: double;

        specialinvoke this.<javax.swing.JFrame: void <init>(java.lang.String,java.awt.GraphicsConfiguration)>(title, gc);

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: long latency> = 200L;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent> = null;

        $u0 = new org.bytedeco.javacv.CanvasFrame$3;

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$3: void <init>(org.bytedeco.javacv.CanvasFrame)>($r2);

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        $r4 = (java.awt.KeyEventDispatcher) $u0;

        $r3.<org.bytedeco.javacv.CanvasFrame: java.awt.KeyEventDispatcher keyEventDispatch> = $r4;

        $r5 = (org.bytedeco.javacv.CanvasFrame) this;

        $r5.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas> = null;

        $r6 = (org.bytedeco.javacv.CanvasFrame) this;

        $r6.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize> = 0;

        $r7 = (org.bytedeco.javacv.CanvasFrame) this;

        $r7.<org.bytedeco.javacv.CanvasFrame: double initialScale> = 1.0;

        $r8 = (org.bytedeco.javacv.CanvasFrame) this;

        $r8.<org.bytedeco.javacv.CanvasFrame: double inverseGamma> = 1.0;

        $r9 = (org.bytedeco.javacv.CanvasFrame) this;

        $r9.<org.bytedeco.javacv.CanvasFrame: java.awt.Color color> = null;

        $r10 = (org.bytedeco.javacv.CanvasFrame) this;

        $r10.<org.bytedeco.javacv.CanvasFrame: java.awt.Image image> = null;

        $r11 = (org.bytedeco.javacv.CanvasFrame) this;

        $r11.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer> = null;

        $u1 = new org.bytedeco.javacv.Java2DFrameConverter;

        specialinvoke $u1.<org.bytedeco.javacv.Java2DFrameConverter: void <init>()>();

        $r12 = (org.bytedeco.javacv.CanvasFrame) this;

        $r12.<org.bytedeco.javacv.CanvasFrame: org.bytedeco.javacv.Java2DFrameConverter converter> = $u1;

        $r13 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $r13.<org.bytedeco.javacv.CanvasFrame: void init(boolean,java.awt.DisplayMode,double)>(0, null, gamma);

        return;
    }

    public void <init>(java.lang.String, int, java.awt.DisplayMode) throws org.bytedeco.javacv.CanvasFrame$Exception
    {
        CanvasFrame this;
        java.lang.String title;
        int screenNumber;
        java.awt.DisplayMode displayMode;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        title := @parameter0: java.lang.String;

        screenNumber := @parameter1: int;

        displayMode := @parameter2: java.awt.DisplayMode;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $r0.<org.bytedeco.javacv.CanvasFrame: void <init>(java.lang.String,int,java.awt.DisplayMode,double)>(title, screenNumber, displayMode, 0.0);

        return;
    }

    public void <init>(java.lang.String, int, java.awt.DisplayMode, double) throws org.bytedeco.javacv.CanvasFrame$Exception
    {
        CanvasFrame this;
        java.lang.String title;
        int screenNumber;
        java.awt.GraphicsDevice $stack6;
        java.awt.GraphicsConfiguration $stack7;
        java.awt.DisplayMode displayMode;
        double gamma;
        org.bytedeco.javacv.CanvasFrame$3 $u0;
        org.bytedeco.javacv.Java2DFrameConverter $u1;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.awt.KeyEventDispatcher $r4;

        this := @this: CanvasFrame;

        title := @parameter0: java.lang.String;

        screenNumber := @parameter1: int;

        displayMode := @parameter2: java.awt.DisplayMode;

        gamma := @parameter3: double;

        $stack6 = staticinvoke <org.bytedeco.javacv.CanvasFrame: java.awt.GraphicsDevice getScreenDevice(int)>(screenNumber);

        $stack7 = virtualinvoke $stack6.<java.awt.GraphicsDevice: java.awt.GraphicsConfiguration getDefaultConfiguration()>();

        specialinvoke this.<javax.swing.JFrame: void <init>(java.lang.String,java.awt.GraphicsConfiguration)>(title, $stack7);

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: long latency> = 200L;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent> = null;

        $u0 = new org.bytedeco.javacv.CanvasFrame$3;

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$3: void <init>(org.bytedeco.javacv.CanvasFrame)>($r2);

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        $r4 = (java.awt.KeyEventDispatcher) $u0;

        $r3.<org.bytedeco.javacv.CanvasFrame: java.awt.KeyEventDispatcher keyEventDispatch> = $r4;

        $r5 = (org.bytedeco.javacv.CanvasFrame) this;

        $r5.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas> = null;

        $r6 = (org.bytedeco.javacv.CanvasFrame) this;

        $r6.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize> = 0;

        $r7 = (org.bytedeco.javacv.CanvasFrame) this;

        $r7.<org.bytedeco.javacv.CanvasFrame: double initialScale> = 1.0;

        $r8 = (org.bytedeco.javacv.CanvasFrame) this;

        $r8.<org.bytedeco.javacv.CanvasFrame: double inverseGamma> = 1.0;

        $r9 = (org.bytedeco.javacv.CanvasFrame) this;

        $r9.<org.bytedeco.javacv.CanvasFrame: java.awt.Color color> = null;

        $r10 = (org.bytedeco.javacv.CanvasFrame) this;

        $r10.<org.bytedeco.javacv.CanvasFrame: java.awt.Image image> = null;

        $r11 = (org.bytedeco.javacv.CanvasFrame) this;

        $r11.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer> = null;

        $u1 = new org.bytedeco.javacv.Java2DFrameConverter;

        specialinvoke $u1.<org.bytedeco.javacv.Java2DFrameConverter: void <init>()>();

        $r12 = (org.bytedeco.javacv.CanvasFrame) this;

        $r12.<org.bytedeco.javacv.CanvasFrame: org.bytedeco.javacv.Java2DFrameConverter converter> = $u1;

        $r13 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $r13.<org.bytedeco.javacv.CanvasFrame: void init(boolean,java.awt.DisplayMode,double)>(1, displayMode, gamma);

        return;
    }

    private void init(boolean, java.awt.DisplayMode, double)
    {
        CanvasFrame this;
        java.awt.DisplayMode displayMode;
        boolean fullScreen, $stack8;
        double gamma;
        java.lang.Exception $stack9;
        org.bytedeco.javacv.CanvasFrame$1 $u0;
        org.bytedeco.javacv.CanvasFrame $r0;
        java.lang.Runnable $r1, $r2;

        this := @this: CanvasFrame;

        fullScreen := @parameter0: boolean;

        displayMode := @parameter1: java.awt.DisplayMode;

        gamma := @parameter2: double;

        $u0 = new org.bytedeco.javacv.CanvasFrame$1;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$1: void <init>(org.bytedeco.javacv.CanvasFrame,java.awt.DisplayMode,boolean,double)>($r0, displayMode, fullScreen, gamma);

        $stack8 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $stack8 == 0 goto label1;

        $r1 = (java.lang.Runnable) $u0;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        goto label4;

     label1:
        $r2 = (java.lang.Runnable) $u0;

        staticinvoke <java.awt.EventQueue: void invokeAndWait(java.lang.Runnable)>($r2);

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void initCanvas(boolean, java.awt.DisplayMode, double)
    {
        CanvasFrame this;
        boolean fullScreen;
        java.awt.Canvas $stack6, $stack8, $stack10, $stack11, $stack12, $r2;
        java.awt.Container $stack7;
        java.awt.Dimension $stack13;
        java.awt.DisplayMode displayMode;
        double gamma;
        org.bytedeco.javacv.CanvasFrame$2 $u0;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: CanvasFrame;

        fullScreen := @parameter0: boolean;

        displayMode := @parameter1: java.awt.DisplayMode;

        gamma := @parameter2: double;

        $u0 = new org.bytedeco.javacv.CanvasFrame$2;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$2: void <init>(org.bytedeco.javacv.CanvasFrame)>($r0);

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $r2 = (java.awt.Canvas) $u0;

        $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas> = $r2;

        if fullScreen == 0 goto label1;

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack12 = $r3.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $r4 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack13 = virtualinvoke $r4.<org.bytedeco.javacv.CanvasFrame: java.awt.Dimension getSize()>();

        virtualinvoke $stack12.<java.awt.Canvas: void setSize(java.awt.Dimension)>($stack13);

        $r5 = (org.bytedeco.javacv.CanvasFrame) this;

        $r5.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize> = 0;

        goto label2;

     label1:
        $r6 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack6 = $r6.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack6.<java.awt.Canvas: void setSize(int,int)>(10, 10);

        $r7 = (org.bytedeco.javacv.CanvasFrame) this;

        $r7.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize> = 1;

     label2:
        $r8 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack7 = virtualinvoke $r8.<org.bytedeco.javacv.CanvasFrame: java.awt.Container getContentPane()>();

        $r9 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack8 = $r9.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack7.<java.awt.Container: java.awt.Component add(java.awt.Component)>($stack8);

        $r10 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack10 = $r10.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack10.<java.awt.Canvas: void setVisible(boolean)>(1);

        $r11 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack11 = $r11.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack11.<java.awt.Canvas: void createBufferStrategy(int)>(2);

        return;
    }

    public long getLatency()
    {
        CanvasFrame this;
        long $stack1;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack1 = $r0.<org.bytedeco.javacv.CanvasFrame: long latency>;

        return $stack1;
    }

    public void setLatency(long)
    {
        CanvasFrame this;
        long latency;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        latency := @parameter0: long;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: long latency> = latency;

        return;
    }

    public void waitLatency() throws java.lang.InterruptedException
    {
        CanvasFrame this;
        long $stack1;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack1 = virtualinvoke $r0.<org.bytedeco.javacv.CanvasFrame: long getLatency()>();

        staticinvoke <java.lang.Thread: void sleep(long)>($stack1);

        return;
    }

    public java.awt.event.KeyEvent waitKey() throws java.lang.InterruptedException
    {
        CanvasFrame this;
        java.awt.event.KeyEvent $stack1;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack1 = virtualinvoke $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent waitKey(int)>(0);

        return $stack1;
    }

    public synchronized java.awt.event.KeyEvent waitKey(int) throws java.lang.InterruptedException
    {
        int delay;
        CanvasFrame this;
        java.awt.event.KeyEvent e;
        long $stack3;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2;

        this := @this: CanvasFrame;

        delay := @parameter0: int;

        if delay < 0 goto label1;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent> = null;

        $stack3 = (long) delay;

        virtualinvoke this.<java.lang.Object: void wait(long)>($stack3);

     label1:
        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        e = $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent>;

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        $r2.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent> = null;

        return e;
    }

    public java.awt.Canvas getCanvas()
    {
        CanvasFrame this;
        java.awt.Canvas $stack1;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack1 = $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        return $stack1;
    }

    public java.awt.Dimension getCanvasSize()
    {
        CanvasFrame this;
        java.awt.Canvas $stack1;
        java.awt.Dimension $stack2;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack1 = $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $stack2 = virtualinvoke $stack1.<java.awt.Canvas: java.awt.Dimension getSize()>();

        return $stack2;
    }

    public void setCanvasSize(int, int)
    {
        CanvasFrame this;
        java.awt.Dimension d;
        int width, $stack7, height, $stack10;
        boolean $stack9;
        java.lang.Exception $stack14;
        org.bytedeco.javacv.CanvasFrame$4 $u0;
        org.bytedeco.javacv.CanvasFrame $r0, $r1;
        java.lang.Runnable $r2, $r3;

        this := @this: CanvasFrame;

        width := @parameter0: int;

        height := @parameter1: int;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        d = virtualinvoke $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.Dimension getCanvasSize()>();

        $stack7 = d.<java.awt.Dimension: int width>;

        if $stack7 != width goto label1;

        $stack10 = d.<java.awt.Dimension: int height>;

        if $stack10 != height goto label1;

        return;

     label1:
        $u0 = new org.bytedeco.javacv.CanvasFrame$4;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$4: void <init>(org.bytedeco.javacv.CanvasFrame,int,int)>($r1, width, height);

        $stack9 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $stack9 == 0 goto label2;

        $r2 = (java.lang.Runnable) $u0;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

        goto label5;

     label2:
        $r3 = (java.lang.Runnable) $u0;

        staticinvoke <java.awt.EventQueue: void invokeAndWait(java.lang.Runnable)>($r3);

     label3:
        goto label5;

     label4:
        $stack14 := @caughtexception;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public double getCanvasScale()
    {
        CanvasFrame this;
        double $stack1;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack1 = $r0.<org.bytedeco.javacv.CanvasFrame: double initialScale>;

        return $stack1;
    }

    public void setCanvasScale(double)
    {
        CanvasFrame this;
        double initialScale;
        org.bytedeco.javacv.CanvasFrame $r0, $r1;

        this := @this: CanvasFrame;

        initialScale := @parameter0: double;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: double initialScale> = initialScale;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $r1.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize> = 1;

        return;
    }

    public java.awt.Graphics2D createGraphics()
    {
        CanvasFrame this;
        java.awt.image.BufferedImage $stack3, newbuffer, $stack15, $stack20, $stack29, $stack11, $stack12;
        java.awt.Graphics g;
        int $stack21, $stack23, $stack30, $stack32, $stack7, $stack9;
        java.awt.Canvas $stack22, $stack31, $stack4, $stack6, $stack8;
        java.awt.GraphicsConfiguration $stack5;
        java.awt.Graphics2D $stack13;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: CanvasFrame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack3 = $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        if $stack3 == null goto label1;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack20 = $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        $stack21 = virtualinvoke $stack20.<java.awt.image.BufferedImage: int getWidth()>();

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack22 = $r2.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $stack23 = virtualinvoke $stack22.<java.awt.Canvas: int getWidth()>();

        if $stack21 != $stack23 goto label1;

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack29 = $r3.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        $stack30 = virtualinvoke $stack29.<java.awt.image.BufferedImage: int getHeight()>();

        $r4 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack31 = $r4.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $stack32 = virtualinvoke $stack31.<java.awt.Canvas: int getHeight()>();

        if $stack30 == $stack32 goto label3;

     label1:
        $r5 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack4 = $r5.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $stack5 = virtualinvoke $stack4.<java.awt.Canvas: java.awt.GraphicsConfiguration getGraphicsConfiguration()>();

        $r6 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack6 = $r6.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $stack7 = virtualinvoke $stack6.<java.awt.Canvas: int getWidth()>();

        $r7 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack8 = $r7.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        $stack9 = virtualinvoke $stack8.<java.awt.Canvas: int getHeight()>();

        newbuffer = virtualinvoke $stack5.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>($stack7, $stack9, 3);

        $r8 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack11 = $r8.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        if $stack11 == null goto label2;

        g = virtualinvoke newbuffer.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r9 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack15 = $r9.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        virtualinvoke g.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($stack15, 0, 0, null);

        virtualinvoke g.<java.awt.Graphics: void dispose()>();

     label2:
        $r10 = (org.bytedeco.javacv.CanvasFrame) this;

        $r10.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer> = newbuffer;

     label3:
        $r11 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack12 = $r11.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        $stack13 = virtualinvoke $stack12.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        return $stack13;
    }

    public void releaseGraphics(java.awt.Graphics2D)
    {
        java.awt.Graphics2D g;
        CanvasFrame this;
        java.awt.Canvas $stack2;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        g := @parameter0: java.awt.Graphics2D;

        virtualinvoke g.<java.awt.Graphics2D: void dispose()>();

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack2 = $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack2.<java.awt.Canvas: void paint(java.awt.Graphics)>(null);

        return;
    }

    public void showColor(java.awt.Color)
    {
        CanvasFrame this;
        java.awt.Color color;
        java.awt.Canvas $stack2;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2;

        this := @this: CanvasFrame;

        color := @parameter0: java.awt.Color;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $r0.<org.bytedeco.javacv.CanvasFrame: java.awt.Color color> = color;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $r1.<org.bytedeco.javacv.CanvasFrame: java.awt.Image image> = null;

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack2 = $r2.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack2.<java.awt.Canvas: void paint(java.awt.Graphics)>(null);

        return;
    }

    public void showImage(org.bytedeco.javacv.Frame)
    {
        CanvasFrame this;
        org.bytedeco.javacv.Frame image;
        org.bytedeco.javacv.CanvasFrame $r0;

        this := @this: CanvasFrame;

        image := @parameter0: org.bytedeco.javacv.Frame;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        virtualinvoke $r0.<org.bytedeco.javacv.CanvasFrame: void showImage(org.bytedeco.javacv.Frame,boolean)>(image, 0);

        return;
    }

    public void showImage(org.bytedeco.javacv.Frame, boolean)
    {
        CanvasFrame this;
        org.bytedeco.javacv.Frame image;
        org.bytedeco.javacv.Java2DFrameConverter $stack3, $stack4;
        int $stack5;
        boolean flipChannels;
        java.awt.image.BufferedImage $stack7;
        double $stack6;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2, $r3;

        this := @this: CanvasFrame;

        image := @parameter0: org.bytedeco.javacv.Frame;

        flipChannels := @parameter1: boolean;

        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack4 = $r0.<org.bytedeco.javacv.CanvasFrame: org.bytedeco.javacv.Java2DFrameConverter converter>;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack3 = $r1.<org.bytedeco.javacv.CanvasFrame: org.bytedeco.javacv.Java2DFrameConverter converter>;

        $stack5 = staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: int getBufferedImageType(org.bytedeco.javacv.Frame)>(image);

        if $stack5 != 0 goto label1;

        $stack6 = 1.0;

        goto label2;

     label1:
        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack6 = $r2.<org.bytedeco.javacv.CanvasFrame: double inverseGamma>;

     label2:
        $stack7 = virtualinvoke $stack4.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame,double,boolean,java.awt.color.ColorSpace)>(image, $stack6, flipChannels, null);

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        virtualinvoke $r3.<org.bytedeco.javacv.CanvasFrame: void showImage(java.awt.Image)>($stack7);

        return;
    }

    public void showImage(java.awt.Image)
    {
        java.awt.Image image;
        CanvasFrame this;
        boolean $stack4, $stack6;
        int $stack13, w, $stack18, h;
        double $stack14, $stack15, $stack16, $stack19, $stack20, $stack21;
        long $stack17, $stack22;
        java.awt.Canvas $stack5;
        org.bytedeco.javacv.CanvasFrame $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: CanvasFrame;

        image := @parameter0: java.awt.Image;

        if image != null goto label1;

        return;

     label1:
        $r0 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack4 = virtualinvoke $r0.<org.bytedeco.javacv.CanvasFrame: boolean isResizable()>();

        if $stack4 == 0 goto label2;

        $r1 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack6 = $r1.<org.bytedeco.javacv.CanvasFrame: boolean needInitialResize>;

        if $stack6 == 0 goto label2;

        $stack13 = virtualinvoke image.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $stack15 = (double) $stack13;

        $r2 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack14 = $r2.<org.bytedeco.javacv.CanvasFrame: double initialScale>;

        $stack16 = $stack15 * $stack14;

        $stack17 = staticinvoke <java.lang.Math: long round(double)>($stack16);

        w = (int) $stack17;

        $stack18 = virtualinvoke image.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        $stack20 = (double) $stack18;

        $r3 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack19 = $r3.<org.bytedeco.javacv.CanvasFrame: double initialScale>;

        $stack21 = $stack20 * $stack19;

        $stack22 = staticinvoke <java.lang.Math: long round(double)>($stack21);

        h = (int) $stack22;

        $r4 = (org.bytedeco.javacv.CanvasFrame) this;

        virtualinvoke $r4.<org.bytedeco.javacv.CanvasFrame: void setCanvasSize(int,int)>(w, h);

     label2:
        $r5 = (org.bytedeco.javacv.CanvasFrame) this;

        $r5.<org.bytedeco.javacv.CanvasFrame: java.awt.Color color> = null;

        $r6 = (org.bytedeco.javacv.CanvasFrame) this;

        $r6.<org.bytedeco.javacv.CanvasFrame: java.awt.Image image> = image;

        $r7 = (org.bytedeco.javacv.CanvasFrame) this;

        $stack5 = $r7.<org.bytedeco.javacv.CanvasFrame: java.awt.Canvas canvas>;

        virtualinvoke $stack5.<java.awt.Canvas: void paint(java.awt.Graphics)>(null);

        return;
    }

    public static void tile(org.bytedeco.javacv.CanvasFrame[])
    {
        org.bytedeco.javacv.CanvasFrame[] frames;
        int $stack14, $stack18, $stack19, n, $stack25, $stack27, $stack29, $stack31, $stack32, $stack34, $stack35, canvasCols, canvasX, canvasY, canvasMaxY, i, $stack20, count;
        double $stack15, $stack16;
        long $stack17;
        boolean $stack22;
        org.bytedeco.javacv.CanvasFrame $stack24, $stack26, $stack28, $stack30, $stack41, $stack42;
        java.lang.Exception $stack49;
        java.lang.Throwable $stack63;
        org.bytedeco.javacv.CanvasFrame$1MovedListener $u0;
        org.bytedeco.javacv.CanvasFrame$5 $u1;
        org.bytedeco.javacv.CanvasFrame$6 $u2;
        java.lang.Runnable $r0, $r1;

        frames := @parameter0: org.bytedeco.javacv.CanvasFrame[];

        $u0 = new org.bytedeco.javacv.CanvasFrame$1MovedListener;

        specialinvoke $u0.<org.bytedeco.javacv.CanvasFrame$1MovedListener: void <init>()>();

        $stack14 = lengthof frames;

        $stack15 = (double) $stack14;

        $stack16 = staticinvoke <java.lang.Math: double sqrt(double)>($stack15);

        $stack17 = staticinvoke <java.lang.Math: long round(double)>($stack16);

        canvasCols = (int) $stack17;

        $stack19 = canvasCols * canvasCols;

        $stack18 = lengthof frames;

        if $stack19 >= $stack18 goto label01;

        canvasCols = canvasCols + 1;

     label01:
        canvasX = 0;

        canvasY = 0;

        canvasMaxY = 0;

        i = 0;

     label02:
        $stack20 = lengthof frames;

        if i >= $stack20 goto label15;

        n = i;

     label03:
        $u0.<org.bytedeco.javacv.CanvasFrame$1MovedListener: boolean moved> = 0;

        $u1 = new org.bytedeco.javacv.CanvasFrame$5;

        specialinvoke $u1.<org.bytedeco.javacv.CanvasFrame$5: void <init>(org.bytedeco.javacv.CanvasFrame[],int,org.bytedeco.javacv.CanvasFrame$1MovedListener,int,int)>(frames, i, $u0, canvasX, canvasY);

        $r0 = (java.lang.Runnable) $u1;

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

        count = 0;

     label04:
        $stack22 = $u0.<org.bytedeco.javacv.CanvasFrame$1MovedListener: boolean moved>;

        if $stack22 != 0 goto label10;

        if count >= 5 goto label10;

        $stack41 = frames[n];

        entermonitor $stack41;

     label05:
        $stack42 = frames[n];

        virtualinvoke $stack42.<java.lang.Object: void wait(long)>(100L);

        exitmonitor $stack41;

     label06:
        goto label09;

     label07:
        $stack63 := @caughtexception;

        exitmonitor $stack41;

     label08:
        throw $stack63;

     label09:
        count = count + 1;

        goto label04;

     label10:
        $u2 = new org.bytedeco.javacv.CanvasFrame$6;

        specialinvoke $u2.<org.bytedeco.javacv.CanvasFrame$6: void <init>(org.bytedeco.javacv.CanvasFrame[],int,org.bytedeco.javacv.CanvasFrame$1MovedListener)>(frames, n, $u0);

        $r1 = (java.lang.Runnable) $u2;

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r1);

     label11:
        goto label13;

     label12:
        $stack49 := @caughtexception;

     label13:
        $stack24 = frames[i];

        $stack25 = virtualinvoke $stack24.<org.bytedeco.javacv.CanvasFrame: int getX()>();

        $stack26 = frames[i];

        $stack27 = virtualinvoke $stack26.<org.bytedeco.javacv.CanvasFrame: int getWidth()>();

        canvasX = $stack25 + $stack27;

        $stack28 = frames[i];

        $stack29 = virtualinvoke $stack28.<org.bytedeco.javacv.CanvasFrame: int getY()>();

        $stack30 = frames[i];

        $stack31 = virtualinvoke $stack30.<org.bytedeco.javacv.CanvasFrame: int getHeight()>();

        $stack32 = $stack29 + $stack31;

        canvasMaxY = staticinvoke <java.lang.Math: int max(int,int)>(canvasMaxY, $stack32);

        $stack34 = i + 1;

        $stack35 = $stack34 % canvasCols;

        if $stack35 != 0 goto label14;

        canvasX = 0;

        canvasY = canvasMaxY;

     label14:
        i = i + 1;

        goto label02;

     label15:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Exception from label03 to label11 with label12;
    }

    static java.awt.KeyEventDispatcher access$000(org.bytedeco.javacv.CanvasFrame)
    {
        org.bytedeco.javacv.CanvasFrame x0;
        java.awt.KeyEventDispatcher $stack1;

        x0 := @parameter0: org.bytedeco.javacv.CanvasFrame;

        $stack1 = x0.<org.bytedeco.javacv.CanvasFrame: java.awt.KeyEventDispatcher keyEventDispatch>;

        return $stack1;
    }

    static java.awt.Color access$100(org.bytedeco.javacv.CanvasFrame)
    {
        org.bytedeco.javacv.CanvasFrame x0;
        java.awt.Color $stack1;

        x0 := @parameter0: org.bytedeco.javacv.CanvasFrame;

        $stack1 = x0.<org.bytedeco.javacv.CanvasFrame: java.awt.Color color>;

        return $stack1;
    }

    static java.awt.Image access$200(org.bytedeco.javacv.CanvasFrame)
    {
        org.bytedeco.javacv.CanvasFrame x0;
        java.awt.Image $stack1;

        x0 := @parameter0: org.bytedeco.javacv.CanvasFrame;

        $stack1 = x0.<org.bytedeco.javacv.CanvasFrame: java.awt.Image image>;

        return $stack1;
    }

    static java.awt.image.BufferedImage access$300(org.bytedeco.javacv.CanvasFrame)
    {
        org.bytedeco.javacv.CanvasFrame x0;
        java.awt.image.BufferedImage $stack1;

        x0 := @parameter0: org.bytedeco.javacv.CanvasFrame;

        $stack1 = x0.<org.bytedeco.javacv.CanvasFrame: java.awt.image.BufferedImage buffer>;

        return $stack1;
    }

    static java.awt.event.KeyEvent access$402(org.bytedeco.javacv.CanvasFrame, java.awt.event.KeyEvent)
    {
        org.bytedeco.javacv.CanvasFrame x0;
        java.awt.event.KeyEvent x1;

        x0 := @parameter0: org.bytedeco.javacv.CanvasFrame;

        x1 := @parameter1: java.awt.event.KeyEvent;

        x0.<org.bytedeco.javacv.CanvasFrame: java.awt.event.KeyEvent keyEvent> = x1;

        return x1;
    }

    static void <clinit>()
    {
        <CanvasFrame: long DEFAULT_LATENCY> = 200L;

        <org.bytedeco.javacv.CanvasFrame: org.bytedeco.javacv.CanvasFrame global> = null;

        return;
    }
}
