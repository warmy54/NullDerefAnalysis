public class Cast extends org.ooc.frontend.model.Expression implements org.ooc.frontend.model.interfaces.MustBeResolved
{
    protected org.ooc.frontend.model.Expression inner;
    protected org.ooc.frontend.model.Type type;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.Type, org.ooc.frontend.model.tokens.Token)
    {
        Cast this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.Type targetType;
        org.ooc.frontend.model.Cast $r0, $r1;

        this := @this: Cast;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        targetType := @parameter1: org.ooc.frontend.model.Type;

        startToken := @parameter2: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.Cast) this;

        $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner> = expression;

        $r1 = (org.ooc.frontend.model.Cast) this;

        virtualinvoke $r1.<org.ooc.frontend.model.Cast: void setType(org.ooc.frontend.model.Type)>(targetType);

        return;
    }

    public org.ooc.frontend.model.Expression getGenericOperand()
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack1, $stack2;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack1 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Expression getGenericOperand()>();

        return $stack2;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        Cast this;
        org.ooc.frontend.model.Expression $stack3, $stack6;
        org.ooc.frontend.model.Type $stack4, $stack5;
        org.ooc.frontend.model.Cast $r0, $r1, $r2, $r3;

        this := @this: Cast;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack3 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        if oldie != $stack3 goto label1;

        $stack6 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.Cast) this;

        $r1.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner> = $stack6;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.Cast) this;

        $stack4 = $r2.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type type>;

        if oldie != $stack4 goto label2;

        $stack5 = (org.ooc.frontend.model.Type) kiddo;

        $r3 = (org.ooc.frontend.model.Cast) this;

        $r3.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type type> = $stack5;

        return 1;

     label2:
        return 0;
    }

    public org.ooc.frontend.model.Type getType()
    {
        Cast this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack1 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type type>;

        return $stack1;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Cast this;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Cast) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Cast)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        Cast this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Type $stack2;
        org.ooc.frontend.model.Expression $stack3;
        org.ooc.frontend.model.Cast $r0, $r1;

        this := @this: Cast;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack2 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type type>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Type: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.Cast) this;

        $stack3 = $r1.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        virtualinvoke $stack3.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        Cast this;

        this := @this: Cast;

        return 1;
    }

    public org.ooc.frontend.model.Expression getInner()
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack1 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        return $stack1;
    }

    public void setInner(org.ooc.frontend.model.Expression)
    {
        Cast this;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner> = expression;

        return;
    }

    public void setType(org.ooc.frontend.model.Type)
    {
        Cast this;
        org.ooc.frontend.model.Type newType;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        newType := @parameter0: org.ooc.frontend.model.Type;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type type> = newType;

        return;
    }

    public java.lang.String toString()
    {
        Cast this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.Expression $stack2;
        java.lang.String $stack3;
        org.ooc.frontend.model.Cast $r0, $r1;

        this := @this: Cast;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack2 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $r1 = (org.ooc.frontend.model.Cast) this;

        $stack1 = $r1.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type type>;

        $stack3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression,org.ooc.frontend.model.Type)>($stack2, $stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001 as \u0001]");

        return $stack3;
    }

    public boolean canBeReferenced()
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack1;
        boolean $stack2;
        org.ooc.frontend.model.Cast $r0;

        this := @this: Cast;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack1 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: boolean canBeReferenced()>();

        return $stack2;
    }

    public boolean isResolved()
    {
        Cast this;

        this := @this: Cast;

        return 0;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack6, realExpr;
        org.ooc.frontend.model.Node $stack7, $r1;
        org.ooc.frontend.model.Type $stack8, $stack9;
        int $stack10;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean fatal;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack12, $stack13, $stack15, $stack21, response;
        org.ooc.middle.OocCompilationError $u0;
        org.ooc.frontend.model.Cast $r0, $r3, $r4;
        java.lang.Throwable $r2;

        this := @this: Cast;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack6 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack7 = virtualinvoke $stack6.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Node bitchJumpCasts()>();

        realExpr = (org.ooc.frontend.model.Expression) $stack7;

        $stack8 = virtualinvoke realExpr.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack8 != null goto label2;

        if fatal == 0 goto label1;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r1 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r1, stack, "Couldn\'t resolve type of expression in a cast");

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label1:
        $stack21 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack21;

     label2:
        $stack9 = virtualinvoke realExpr.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack10 = virtualinvoke $stack9.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        if $stack10 <= 0 goto label3;

        $r3 = (org.ooc.frontend.model.Cast) this;

        response = virtualinvoke $r3.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.interfaces.MustBeResolved$Response tryArrayOverload(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

        $stack15 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        if response == $stack15 goto label3;

        return response;

     label3:
        $r4 = (org.ooc.frontend.model.Cast) this;

        response = virtualinvoke $r4.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.interfaces.MustBeResolved$Response tryRegularOverload(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

        $stack12 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        if response == $stack12 goto label4;

        return response;

     label4:
        $stack13 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack13;
    }

    private org.ooc.frontend.model.interfaces.MustBeResolved$Response tryRegularOverload(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack13, $stack32;
        org.ooc.frontend.model.Type leftType, rightType;
        boolean $stack16, $stack18, $stack22, $stack26, $stack42, fatal;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack17, $stack27, $stack37;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.Module $stack19, $stack23, $stack39;
        org.ooc.frontend.model.NodeList $stack20, $stack24, $stack31, stack, $stack40;
        org.ooc.frontend.model.FunctionDecl $stack29;
        org.ooc.frontend.model.tokens.Token $stack30;
        java.lang.Object $stack38, $stack44, $stack48;
        org.ooc.frontend.model.OpDecl op, bestOp;
        org.ooc.frontend.model.OpDecl$OpType $stack45, $stack49;
        int score, bestScore;
        java.util.Iterator call, score;
        org.ooc.frontend.model.Import op;
        org.ooc.frontend.model.Node op#10, $r6, $r7, $r8;
        org.ooc.frontend.model.FunctionCall $u0;
        org.ooc.frontend.model.Cast $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: Cast;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack13 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        leftType = virtualinvoke $stack13.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r1 = (org.ooc.frontend.model.Cast) this;

        rightType = virtualinvoke $r1.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type getType()>();

        $stack16 = virtualinvoke leftType.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack16 == 0 goto label01;

        $stack18 = virtualinvoke rightType.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack18 != 0 goto label02;

     label01:
        $stack17 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack17;

     label02:
        bestOp = null;

        bestScore = 0;

        $stack19 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack20 = virtualinvoke $stack19.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        call = virtualinvoke $stack20.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label03:
        $stack22 = interfaceinvoke call.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label05;

        $stack48 = interfaceinvoke call.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack48;

        $stack49 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType AS>;

        $r2 = (org.ooc.frontend.model.Cast) this;

        score = virtualinvoke $r2.<org.ooc.frontend.model.Cast: int getRegularOpScore(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.OpDecl$OpType,org.ooc.frontend.model.OpDecl,org.ooc.middle.hobgoblins.Resolver,org.ooc.frontend.model.Type,org.ooc.frontend.model.Type)>(stack, $stack49, op, res, leftType, rightType);

        if score <= bestScore goto label04;

        bestScore = score;

        bestOp = op;

     label04:
        goto label03;

     label05:
        $stack23 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack24 = virtualinvoke $stack23.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getAllImports()>();

        call = virtualinvoke $stack24.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label06:
        $stack26 = interfaceinvoke call.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label10;

        $stack38 = interfaceinvoke call.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.Import) $stack38;

        $stack39 = virtualinvoke op.<org.ooc.frontend.model.Import: org.ooc.frontend.model.Module getModule()>();

        $stack40 = virtualinvoke $stack39.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        score = virtualinvoke $stack40.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label07:
        $stack42 = interfaceinvoke score.<java.util.Iterator: boolean hasNext()>();

        if $stack42 == 0 goto label09;

        $stack44 = interfaceinvoke score.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack44;

        $stack45 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType AS>;

        $r3 = (org.ooc.frontend.model.Cast) this;

        score = virtualinvoke $r3.<org.ooc.frontend.model.Cast: int getRegularOpScore(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.OpDecl$OpType,org.ooc.frontend.model.OpDecl,org.ooc.middle.hobgoblins.Resolver,org.ooc.frontend.model.Type,org.ooc.frontend.model.Type)>(stack, $stack45, op, res, leftType, rightType);

        if score <= bestScore goto label08;

        bestScore = score;

        bestOp = op;

     label08:
        goto label07;

     label09:
        goto label06;

     label10:
        if bestOp == null goto label11;

        $u0 = new org.ooc.frontend.model.FunctionCall;

        $stack29 = virtualinvoke bestOp.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $r4 = (org.ooc.frontend.model.Cast) this;

        $stack30 = $r4.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.FunctionCall: void <init>(org.ooc.frontend.model.FunctionDecl,org.ooc.frontend.model.tokens.Token)>($stack29, $stack30);

        $stack31 = virtualinvoke $u0.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r5 = (org.ooc.frontend.model.Cast) this;

        $stack32 = $r5.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $r6 = (org.ooc.frontend.model.Node) $stack32;

        virtualinvoke $stack31.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r6);

        op#10 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r7 = (org.ooc.frontend.model.Node) this;

        $r8 = (org.ooc.frontend.model.Node) $u0;

        virtualinvoke op#10.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r7, $r8);

        virtualinvoke $u0.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, 1);

        $stack37 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack37;

     label11:
        $stack27 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack27;
    }

    private int getRegularOpScore(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.OpDecl$OpType, org.ooc.frontend.model.OpDecl, org.ooc.middle.hobgoblins.Resolver, org.ooc.frontend.model.Type, org.ooc.frontend.model.Type)
    {
        org.ooc.frontend.model.OpDecl op;
        org.ooc.frontend.model.OpDecl$OpType $stack11, opType;
        org.ooc.frontend.model.FunctionDecl $stack12, $stack19, $stack28, $stack35;
        org.ooc.frontend.model.NodeList args, stack;
        int $stack14, $stack15, score;
        org.ooc.frontend.model.Node $stack16, $r0;
        org.ooc.frontend.model.Argument $stack17;
        org.ooc.frontend.model.Type firstType, secondType, leftType, rightType;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean $stack21, $stack23, $stack24, $stack25, $stack30;
        Cast this;
        java.util.LinkedHashMap $stack29;
        java.lang.String $stack34, $stack36, $stack37;
        org.ooc.middle.OocCompilationError $u0;
        java.lang.Throwable $r1;
        org.ooc.frontend.model.Cast $r2;

        this := @this: Cast;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        opType := @parameter1: org.ooc.frontend.model.OpDecl$OpType;

        op := @parameter2: org.ooc.frontend.model.OpDecl;

        res := @parameter3: org.ooc.middle.hobgoblins.Resolver;

        leftType := @parameter4: org.ooc.frontend.model.Type;

        rightType := @parameter5: org.ooc.frontend.model.Type;

        score = 0;

        $stack11 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.OpDecl$OpType getOpType()>();

        if $stack11 != opType goto label5;

        $stack12 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        args = virtualinvoke $stack12.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $stack14 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack14 != 2 goto label1;

        return 0;

     label1:
        $stack15 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack15 == 1 goto label2;

        $u0 = new org.ooc.middle.OocCompilationError;

        $stack34 = virtualinvoke opType.<org.ooc.frontend.model.OpDecl$OpType: java.lang.String toPrettyString()>();

        $stack35 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack36 = virtualinvoke $stack35.<org.ooc.frontend.model.FunctionDecl: java.lang.String getArgsRepr()>();

        $stack37 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack34, $stack36) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("To overload the \u0001 operator, you need exactly one arguments, not \u0001");

        $r0 = (org.ooc.frontend.model.Node) op;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r0, stack, $stack37);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label2:
        $stack16 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(0);

        $stack17 = (org.ooc.frontend.model.Argument) $stack16;

        firstType = virtualinvoke $stack17.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack19 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        secondType = virtualinvoke $stack19.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.Type getReturnType()>();

        $stack21 = virtualinvoke firstType.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>(leftType, res);

        if $stack21 == 0 goto label5;

        $stack23 = virtualinvoke secondType.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>(rightType, res);

        if $stack23 != 0 goto label3;

        $stack28 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack29 = virtualinvoke $stack28.<org.ooc.frontend.model.FunctionDecl: java.util.LinkedHashMap getTypeParams()>();

        $r2 = (org.ooc.frontend.model.Cast) this;

        $stack30 = virtualinvoke $r2.<org.ooc.frontend.model.Cast: boolean isGeneric(org.ooc.frontend.model.Type,java.util.LinkedHashMap)>(secondType, $stack29);

        if $stack30 == 0 goto label5;

     label3:
        score = 0 + 10;

        $stack24 = virtualinvoke firstType.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>(leftType);

        if $stack24 == 0 goto label4;

        score = score + 20;

     label4:
        $stack25 = virtualinvoke secondType.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>(rightType);

        if $stack25 == 0 goto label5;

        score = score + 20;

     label5:
        return score;
    }

    private org.ooc.frontend.model.interfaces.MustBeResolved$Response tryArrayOverload(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack14, $stack29, $stack32, $stack37, $stack40, $stack48, $stack52, $stack58, $stack71, $stack74, $stack77, $stack78, $stack34, $r8;
        org.ooc.frontend.model.Type leftType, rightType, $stack30, $stack38, $stack41, innerType#11;
        boolean $stack17, $stack19, $stack23, $stack27, $stack33, fatal, $stack75, $stack83, $stack35;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack18, $stack28, $stack65, $stack66, $stack69, resp2;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.Module $stack20, $stack24, $stack80;
        org.ooc.frontend.model.NodeList $stack21, $stack25, stack, $stack42, $stack47, $stack50, $stack60, $stack81;
        java.lang.String $stack39;
        org.ooc.frontend.model.FunctionDecl $stack45;
        org.ooc.frontend.model.tokens.Token $stack46, $stack53, $stack59;
        org.ooc.frontend.model.IntLiteral$Format $stack54;
        long $stack55;
        org.ooc.frontend.model.VariableAccess $stack72;
        org.ooc.frontend.model.Declaration $stack73;
        java.lang.Object $stack79, $stack85, $stack89;
        org.ooc.frontend.model.OpDecl$OpType $stack86, $stack90;
        org.ooc.frontend.model.OpDecl bestOp, op;
        int bestScore, score, op#21;
        java.util.Iterator innerType, score#8;
        org.ooc.frontend.model.Import op#7;
        org.ooc.frontend.model.VariableDecl score#13;
        org.ooc.frontend.model.ArrayLiteral score#20;
        org.ooc.frontend.model.Node score#24, $r14, $r18, $r22, $r24, $r26, $r27, $r28;
        org.ooc.middle.OocCompilationError $u0, $u1;
        org.ooc.frontend.model.FunctionCall $u2;
        org.ooc.frontend.model.IntLiteral $u3;
        org.ooc.frontend.model.TypeAccess $u4;
        org.ooc.frontend.model.Cast $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r20, $r21, $r23, $r25;
        java.lang.Throwable $r15, $r19;

        this := @this: Cast;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack14 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        leftType = virtualinvoke $stack14.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r1 = (org.ooc.frontend.model.Cast) this;

        rightType = virtualinvoke $r1.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type getType()>();

        $stack17 = virtualinvoke leftType.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack17 == 0 goto label01;

        $stack19 = virtualinvoke rightType.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack19 != 0 goto label02;

     label01:
        $stack18 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack18;

     label02:
        bestOp = null;

        bestScore = 0;

        $stack20 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack21 = virtualinvoke $stack20.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        innerType = virtualinvoke $stack21.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label03:
        $stack23 = interfaceinvoke innerType.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label05;

        $stack89 = interfaceinvoke innerType.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack89;

        $stack90 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType AS>;

        $r2 = (org.ooc.frontend.model.Cast) this;

        score = virtualinvoke $r2.<org.ooc.frontend.model.Cast: int getArrayOpScore(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.OpDecl$OpType,org.ooc.frontend.model.OpDecl,org.ooc.middle.hobgoblins.Resolver,org.ooc.frontend.model.Type,org.ooc.frontend.model.Type)>(stack, $stack90, op, res, leftType, rightType);

        if score <= bestScore goto label04;

        bestScore = score;

        bestOp = op;

     label04:
        goto label03;

     label05:
        $stack24 = res.<org.ooc.middle.hobgoblins.Resolver: org.ooc.frontend.model.Module module>;

        $stack25 = virtualinvoke $stack24.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getAllImports()>();

        innerType = virtualinvoke $stack25.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label06:
        $stack27 = interfaceinvoke innerType.<java.util.Iterator: boolean hasNext()>();

        if $stack27 == 0 goto label10;

        $stack79 = interfaceinvoke innerType.<java.util.Iterator: java.lang.Object next()>();

        op#7 = (org.ooc.frontend.model.Import) $stack79;

        $stack80 = virtualinvoke op#7.<org.ooc.frontend.model.Import: org.ooc.frontend.model.Module getModule()>();

        $stack81 = virtualinvoke $stack80.<org.ooc.frontend.model.Module: org.ooc.frontend.model.NodeList getOps()>();

        score#8 = virtualinvoke $stack81.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label07:
        $stack83 = interfaceinvoke score#8.<java.util.Iterator: boolean hasNext()>();

        if $stack83 == 0 goto label09;

        $stack85 = interfaceinvoke score#8.<java.util.Iterator: java.lang.Object next()>();

        op = (org.ooc.frontend.model.OpDecl) $stack85;

        $stack86 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType AS>;

        $r3 = (org.ooc.frontend.model.Cast) this;

        score = virtualinvoke $r3.<org.ooc.frontend.model.Cast: int getArrayOpScore(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.OpDecl$OpType,org.ooc.frontend.model.OpDecl,org.ooc.middle.hobgoblins.Resolver,org.ooc.frontend.model.Type,org.ooc.frontend.model.Type)>(stack, $stack86, op, res, leftType, rightType);

        if score <= bestScore goto label08;

        bestScore = score;

        bestOp = op;

     label08:
        goto label07;

     label09:
        goto label06;

     label10:
        if bestOp == null goto label18;

        $r4 = (org.ooc.frontend.model.Cast) this;

        $stack29 = $r4.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack30 = virtualinvoke $stack29.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        innerType#11 = virtualinvoke $stack30.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Type dereference()>();

        $r5 = (org.ooc.frontend.model.Cast) this;

        $stack32 = $r5.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack33 = $stack32 instanceof org.ooc.frontend.model.VariableAccess;

        if $stack33 == 0 goto label11;

        $r6 = (org.ooc.frontend.model.Cast) this;

        $stack71 = $r6.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack72 = (org.ooc.frontend.model.VariableAccess) $stack71;

        $stack73 = virtualinvoke $stack72.<org.ooc.frontend.model.VariableAccess: org.ooc.frontend.model.Declaration getRef()>();

        $r7 = (org.ooc.frontend.model.Cast) this;

        $r8 = (org.ooc.frontend.model.Expression) $stack73;

        $r7.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner> = $r8;

        $r9 = (org.ooc.frontend.model.Cast) this;

        $stack74 = $r9.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack75 = $stack74 instanceof org.ooc.frontend.model.VariableDecl;

        if $stack75 == 0 goto label11;

        $r10 = (org.ooc.frontend.model.Cast) this;

        $stack77 = $r10.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        score#13 = (org.ooc.frontend.model.VariableDecl) $stack77;

        $stack78 = virtualinvoke score#13.<org.ooc.frontend.model.VariableDecl: org.ooc.frontend.model.Expression getExpression()>();

        $r11 = (org.ooc.frontend.model.Cast) this;

        $r11.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner> = $stack78;

     label11:
        $r12 = (org.ooc.frontend.model.Cast) this;

        $stack34 = $r12.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack35 = $stack34 instanceof org.ooc.frontend.model.ArrayLiteral;

        if $stack35 == 0 goto label14;

        $r13 = (org.ooc.frontend.model.Cast) this;

        $stack40 = $r13.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        score#20 = (org.ooc.frontend.model.ArrayLiteral) $stack40;

        $stack41 = virtualinvoke score#20.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.Type getInnerType()>();

        if $stack41 != null goto label13;

        if fatal == 0 goto label12;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r14 = (org.ooc.frontend.model.Node) score#20;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r14, stack, "Couldn\'t resolve inner type of ArrayLiteral, can\'t correctly call the overloaded cast!");

        $r15 = (java.lang.Throwable) $u0;

        throw $r15;

     label12:
        $stack69 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack69;

     label13:
        $stack42 = virtualinvoke score#20.<org.ooc.frontend.model.ArrayLiteral: org.ooc.frontend.model.NodeList getElements()>();

        op#21 = virtualinvoke $stack42.<org.ooc.frontend.model.NodeList: int size()>();

        goto label15;

     label14:
        $u1 = new org.ooc.middle.OocCompilationError;

        $r16 = (org.ooc.frontend.model.Cast) this;

        $stack37 = $r16.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $r17 = (org.ooc.frontend.model.Cast) this;

        $stack38 = virtualinvoke $r17.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Type getType()>();

        $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Type)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Trying to array-cast to \u0001 an array of which we don\'t know the size! Try a constructor instead, passing the size explicitly as an argument.");

        $r18 = (org.ooc.frontend.model.Node) $stack37;

        specialinvoke $u1.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r18, stack, $stack39);

        $r19 = (java.lang.Throwable) $u1;

        throw $r19;

     label15:
        $u2 = new org.ooc.frontend.model.FunctionCall;

        $stack45 = virtualinvoke bestOp.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $r20 = (org.ooc.frontend.model.Cast) this;

        $stack46 = $r20.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u2.<org.ooc.frontend.model.FunctionCall: void <init>(org.ooc.frontend.model.FunctionDecl,org.ooc.frontend.model.tokens.Token)>($stack45, $stack46);

        $stack47 = virtualinvoke $u2.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r21 = (org.ooc.frontend.model.Cast) this;

        $stack48 = $r21.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $r22 = (org.ooc.frontend.model.Node) $stack48;

        virtualinvoke $stack47.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r22);

        $stack50 = virtualinvoke $u2.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $u3 = new org.ooc.frontend.model.IntLiteral;

        $stack55 = (long) op#21;

        $stack54 = <org.ooc.frontend.model.IntLiteral$Format: org.ooc.frontend.model.IntLiteral$Format DEC>;

        $r23 = (org.ooc.frontend.model.Cast) this;

        $stack52 = $r23.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack53 = $stack52.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u3.<org.ooc.frontend.model.IntLiteral: void <init>(long,org.ooc.frontend.model.IntLiteral$Format,org.ooc.frontend.model.tokens.Token)>($stack55, $stack54, $stack53);

        $r24 = (org.ooc.frontend.model.Node) $u3;

        virtualinvoke $stack50.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r24);

        $u4 = new org.ooc.frontend.model.TypeAccess;

        $r25 = (org.ooc.frontend.model.Cast) this;

        $stack58 = $r25.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $stack59 = $stack58.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u4.<org.ooc.frontend.model.TypeAccess: void <init>(org.ooc.frontend.model.Type,org.ooc.frontend.model.tokens.Token)>(innerType#11, $stack59);

        $stack60 = virtualinvoke $u2.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getTypeParams()>();

        $r26 = (org.ooc.frontend.model.Node) $u4;

        virtualinvoke $stack60.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r26);

        virtualinvoke $u4.<org.ooc.frontend.model.TypeAccess: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, 1);

        score#24 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r27 = (org.ooc.frontend.model.Node) this;

        $r28 = (org.ooc.frontend.model.Node) $u2;

        virtualinvoke score#24.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r27, $r28);

        resp2 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response RESTART>;

     label16:
        $stack65 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response RESTART>;

        if resp2 != $stack65 goto label17;

        resp2 = virtualinvoke $u2.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, 1);

        goto label16;

     label17:
        $stack66 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack66;

     label18:
        $stack28 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack28;
    }

    private int getArrayOpScore(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.OpDecl$OpType, org.ooc.frontend.model.OpDecl, org.ooc.middle.hobgoblins.Resolver, org.ooc.frontend.model.Type, org.ooc.frontend.model.Type)
    {
        org.ooc.frontend.model.OpDecl op;
        org.ooc.frontend.model.OpDecl$OpType $stack11, opType;
        org.ooc.frontend.model.FunctionDecl $stack12, $stack18, $stack25, $stack33;
        org.ooc.frontend.model.NodeList args, stack;
        int $stack14, $stack15, $stack21, score;
        java.lang.String $stack17, $stack19, $stack20;
        org.ooc.frontend.model.Node $stack22, $r0;
        org.ooc.frontend.model.Argument $stack23;
        org.ooc.frontend.model.Type firstType, secondType, rightType, leftType;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean $stack27, $stack28, $stack29, $stack35;
        Cast this;
        java.util.LinkedHashMap $stack34;
        org.ooc.middle.OocCompilationError $u0;
        java.lang.Throwable $r1;
        org.ooc.frontend.model.Cast $r2;

        this := @this: Cast;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        opType := @parameter1: org.ooc.frontend.model.OpDecl$OpType;

        op := @parameter2: org.ooc.frontend.model.OpDecl;

        res := @parameter3: org.ooc.middle.hobgoblins.Resolver;

        leftType := @parameter4: org.ooc.frontend.model.Type;

        rightType := @parameter5: org.ooc.frontend.model.Type;

        score = 0;

        $stack11 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.OpDecl$OpType getOpType()>();

        if $stack11 != opType goto label6;

        $stack12 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        args = virtualinvoke $stack12.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.NodeList getArguments()>();

        $stack14 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack14 != 1 goto label1;

        return 0;

     label1:
        $stack15 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack15 > 2 goto label2;

        $stack21 = virtualinvoke args.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack21 >= 1 goto label3;

     label2:
        $u0 = new org.ooc.middle.OocCompilationError;

        $stack17 = virtualinvoke opType.<org.ooc.frontend.model.OpDecl$OpType: java.lang.String toPrettyString()>();

        $stack18 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack19 = virtualinvoke $stack18.<org.ooc.frontend.model.FunctionDecl: java.lang.String getArgsRepr()>();

        $stack20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack17, $stack19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("To overload the \u0001 operator from arrays, you need exactly two arguments (T* and size), not \u0001");

        $r0 = (org.ooc.frontend.model.Node) op;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r0, stack, $stack20);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label3:
        $stack22 = virtualinvoke args.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(0);

        $stack23 = (org.ooc.frontend.model.Argument) $stack22;

        firstType = virtualinvoke $stack23.<org.ooc.frontend.model.Argument: org.ooc.frontend.model.Type getType()>();

        $stack25 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        secondType = virtualinvoke $stack25.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.Type getReturnType()>();

        $stack27 = virtualinvoke secondType.<org.ooc.frontend.model.Type: boolean softEquals(org.ooc.frontend.model.Type,org.ooc.middle.hobgoblins.Resolver)>(rightType, res);

        if $stack27 != 0 goto label4;

        $stack33 = virtualinvoke op.<org.ooc.frontend.model.OpDecl: org.ooc.frontend.model.FunctionDecl getFunc()>();

        $stack34 = virtualinvoke $stack33.<org.ooc.frontend.model.FunctionDecl: java.util.LinkedHashMap getTypeParams()>();

        $r2 = (org.ooc.frontend.model.Cast) this;

        $stack35 = virtualinvoke $r2.<org.ooc.frontend.model.Cast: boolean isGeneric(org.ooc.frontend.model.Type,java.util.LinkedHashMap)>(secondType, $stack34);

        if $stack35 == 0 goto label6;

     label4:
        score = 0 + 10;

        $stack28 = virtualinvoke firstType.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>(leftType);

        if $stack28 == 0 goto label5;

        score = score + 20;

     label5:
        $stack29 = virtualinvoke secondType.<org.ooc.frontend.model.Type: boolean equals(java.lang.Object)>(rightType);

        if $stack29 == 0 goto label6;

        score = score + 20;

     label6:
        return score;
    }

    private boolean isGeneric(org.ooc.frontend.model.Type, java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap linkedHashMap;
        org.ooc.frontend.model.Type type;
        java.lang.String $stack3;
        boolean $stack4;
        Cast this;

        this := @this: Cast;

        type := @parameter0: org.ooc.frontend.model.Type;

        linkedHashMap := @parameter1: java.util.LinkedHashMap;

        $stack3 = virtualinvoke type.<org.ooc.frontend.model.Type: java.lang.String getName()>();

        $stack4 = virtualinvoke linkedHashMap.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($stack3);

        return $stack4;
    }

    public org.ooc.frontend.model.Node bitchJumpCasts()
    {
        Cast this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Cast $r0;
        org.ooc.frontend.model.Node $r1;

        this := @this: Cast;

        $r0 = (org.ooc.frontend.model.Cast) this;

        $stack1 = $r0.<org.ooc.frontend.model.Cast: org.ooc.frontend.model.Expression inner>;

        $r1 = (org.ooc.frontend.model.Node) $stack1;

        return $r1;
    }
}
