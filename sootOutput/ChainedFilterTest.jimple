public class ChainedFilterTest extends java.lang.Object
{

    public void <init>()
    {
        ChainedFilterTest this;

        this := @this: ChainedFilterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void test() throws java.lang.Exception
    {
        javax.xml.transform.TransformerFactory $stack11;
        javax.xml.transform.sax.SAXTransformerFactory transformerFactory;
        javax.xml.transform.sax.TransformerHandler transformerHandler;
        org.xml.sax.XMLReader $stack17, $r4;
        javax.xml.transform.Transformer transformer;
        java.lang.String $stack23;
        org.xmlunit.assertj.XmlAssert $stack24;
        org.xmlunit.assertj.CompareAssert $stack25;
        ChainedFilterTest this;
        java.io.StringWriter $u0;
        javax.xml.transform.stream.StreamResult $u1;
        javax.xml.transform.sax.SAXResult $u2;
        org.apache.maven.model.transform.sax.ChainedFilterTest$Awesome $u3;
        org.apache.maven.model.transform.sax.ChainedFilterTest$ChangeCase $u4;
        java.io.StringReader $u5;
        org.xml.sax.InputSource $u6;
        javax.xml.transform.sax.SAXSource $u7;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r0, $r2, $r3;
        org.xml.sax.ext.LexicalHandler $r1;

        this := @this: ChainedFilterTest;

        $stack11 = staticinvoke <org.apache.maven.model.transform.sax.Factories: javax.xml.transform.TransformerFactory newTransformerFactory()>();

        transformerFactory = (javax.xml.transform.sax.SAXTransformerFactory) $stack11;

        transformerHandler = virtualinvoke transformerFactory.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler()>();

        $u0 = new java.io.StringWriter;

        specialinvoke $u0.<java.io.StringWriter: void <init>()>();

        $u1 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $u1.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($u0);

        interfaceinvoke transformerHandler.<javax.xml.transform.sax.TransformerHandler: void setResult(javax.xml.transform.Result)>($u1);

        $u2 = new javax.xml.transform.sax.SAXResult;

        specialinvoke $u2.<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>(transformerHandler);

        $u3 = new org.apache.maven.model.transform.sax.ChainedFilterTest$Awesome;

        specialinvoke $u3.<org.apache.maven.model.transform.sax.ChainedFilterTest$Awesome: void <init>()>();

        $stack17 = staticinvoke <org.apache.maven.model.transform.sax.Factories: org.xml.sax.XMLReader newXMLReader()>();

        $r0 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u3;

        virtualinvoke $r0.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setParent(org.xml.sax.XMLReader)>($stack17);

        $r1 = (org.xml.sax.ext.LexicalHandler) $u3;

        virtualinvoke $u2.<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>($r1);

        $u4 = new org.apache.maven.model.transform.sax.ChainedFilterTest$ChangeCase;

        $r2 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u3;

        specialinvoke $u4.<org.apache.maven.model.transform.sax.ChainedFilterTest$ChangeCase: void <init>(org.apache.maven.model.transform.sax.AbstractSAXFilter)>($r2);

        $r3 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u4;

        virtualinvoke $r3.<org.apache.maven.model.transform.sax.AbstractSAXFilter: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(transformerHandler);

        $u7 = new javax.xml.transform.sax.SAXSource;

        $u6 = new org.xml.sax.InputSource;

        $u5 = new java.io.StringReader;

        specialinvoke $u5.<java.io.StringReader: void <init>(java.lang.String)>("<project><!-- aBc --><name>dEf</name></project>");

        specialinvoke $u6.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($u5);

        $r4 = (org.xml.sax.XMLReader) $u4;

        specialinvoke $u7.<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.XMLReader,org.xml.sax.InputSource)>($r4, $u6);

        transformer = virtualinvoke transformerFactory.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke transformer.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($u7, $u2);

        $stack23 = virtualinvoke $u0.<java.lang.Object: java.lang.String toString()>();

        $stack24 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>($stack23);

        $stack25 = virtualinvoke $stack24.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project><!--AWESOME--><name>awesome</name></project>");

        virtualinvoke $stack25.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }
}
