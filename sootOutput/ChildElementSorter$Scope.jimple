final enum class ChildElementSorter$Scope extends java.lang.Enum
{
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope IMPORT;
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope COMPILE;
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope PROVIDED;
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope SYSTEM;
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope RUNTIME;
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope TEST;
    public static final enum sortpom.wrapper.content.ChildElementSorter$Scope OTHER;
    private static final sortpom.wrapper.content.ChildElementSorter$Scope[] $VALUES;

    public static sortpom.wrapper.content.ChildElementSorter$Scope[] values()
    {
        sortpom.wrapper.content.ChildElementSorter$Scope[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (sortpom.wrapper.content.ChildElementSorter$Scope[]) $stack1;

        return $stack2;
    }

    public static sortpom.wrapper.content.ChildElementSorter$Scope valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        sortpom.wrapper.content.ChildElementSorter$Scope $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lsortpom/wrapper/content/ChildElementSorter$Scope;", name);

        $stack2 = (sortpom.wrapper.content.ChildElementSorter$Scope) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        ChildElementSorter$Scope this;
        java.lang.String l1;
        int l2;

        this := @this: ChildElementSorter$Scope;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    static sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)
    {
        java.lang.String scope, $stack10;
        sortpom.wrapper.content.ChildElementSorter$Scope $stack6, $stack9, value;
        boolean $stack7, $stack11;
        sortpom.wrapper.content.ChildElementSorter$Scope[] values;
        int l3, l4;

        scope := @parameter0: java.lang.String;

        if scope == null goto label1;

        $stack7 = virtualinvoke scope.<java.lang.String: boolean isEmpty()>();

        if $stack7 == 0 goto label2;

     label1:
        $stack6 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope COMPILE>;

        return $stack6;

     label2:
        values = staticinvoke <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>();

        l3 = lengthof values;

        l4 = 0;

     label3:
        if l4 >= l3 goto label5;

        value = values[l4];

        $stack10 = virtualinvoke value.<sortpom.wrapper.content.ChildElementSorter$Scope: java.lang.String name()>();

        $stack11 = virtualinvoke scope.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack10);

        if $stack11 == 0 goto label4;

        return value;

     label4:
        l4 = l4 + 1;

        goto label3;

     label5:
        $stack9 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope OTHER>;

        return $stack9;
    }

    static void <clinit>()
    {
        sortpom.wrapper.content.ChildElementSorter$Scope $stack0, $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;
        sortpom.wrapper.content.ChildElementSorter$Scope[] $stack7;

        $stack0 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack0.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("IMPORT", 0);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope IMPORT> = $stack0;

        $stack1 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack1.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("COMPILE", 1);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope COMPILE> = $stack1;

        $stack2 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack2.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("PROVIDED", 2);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope PROVIDED> = $stack2;

        $stack3 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack3.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("SYSTEM", 3);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope SYSTEM> = $stack3;

        $stack4 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack4.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("RUNTIME", 4);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope RUNTIME> = $stack4;

        $stack5 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack5.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("TEST", 5);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope TEST> = $stack5;

        $stack6 = new sortpom.wrapper.content.ChildElementSorter$Scope;

        specialinvoke $stack6.<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>("OTHER", 6);

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope OTHER> = $stack6;

        $stack7 = newarray (sortpom.wrapper.content.ChildElementSorter$Scope)[7];

        $stack8 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope IMPORT>;

        $stack7[0] = $stack8;

        $stack9 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope COMPILE>;

        $stack7[1] = $stack9;

        $stack10 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope PROVIDED>;

        $stack7[2] = $stack10;

        $stack11 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope SYSTEM>;

        $stack7[3] = $stack11;

        $stack12 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope RUNTIME>;

        $stack7[4] = $stack12;

        $stack13 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope TEST>;

        $stack7[5] = $stack13;

        $stack14 = <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope OTHER>;

        $stack7[6] = $stack14;

        <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] $VALUES> = $stack7;

        return;
    }
}
