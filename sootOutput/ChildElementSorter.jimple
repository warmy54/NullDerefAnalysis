public class ChildElementSorter extends java.lang.Object
{
    static final sortpom.wrapper.content.ChildElementSorter EMPTY_SORTER;
    private static final java.lang.String GROUP_ID_NAME;
    private static final java.lang.String EMPTY_PLUGIN_GROUP_ID_VALUE;
    private final java.util.LinkedHashMap childElementTextMappedBySortedNames;

    public void <init>(sortpom.parameter.DependencySortOrder, java.util.List)
    {
        ChildElementSorter this;
        sortpom.parameter.DependencySortOrder dependencySortOrder;
        java.util.Collection childElementNames;
        java.util.function.Consumer $stack6, $stack7;
        java.util.List children;
        java.util.LinkedHashMap $u0;
        sortpom.wrapper.content.ChildElementSorter $r0, $r1, $r2;

        this := @this: ChildElementSorter;

        dependencySortOrder := @parameter0: sortpom.parameter.DependencySortOrder;

        children := @parameter1: java.util.List;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames> = $u0;

        childElementNames = virtualinvoke dependencySortOrder.<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>();

        $r1 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack6 = staticinvoke <ChildElementSorter$lambda_new_0__309: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>($r1);

        interfaceinvoke childElementNames.<java.util.Collection: void forEach(java.util.function.Consumer)>($stack6);

        $r2 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack7 = staticinvoke <ChildElementSorter$lambda_new_1__313: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>($r2);

        interfaceinvoke children.<java.util.List: void forEach(java.util.function.Consumer)>($stack7);

        return;
    }

    private void <init>()
    {
        ChildElementSorter this;
        java.util.LinkedHashMap $u0;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames> = $u0;

        return;
    }

    boolean compareTo(sortpom.wrapper.content.ChildElementSorter)
    {
        sortpom.wrapper.content.ChildElementSorter otherChildElementSorter, $r0, $r1;
        java.util.function.Function getOtherTextFunc, $stack8;
        ChildElementSorter this;
        java.util.LinkedHashMap $stack5;
        java.util.Set $stack6;
        java.util.stream.Stream $stack7, $stack9, $stack11;
        java.util.function.Predicate $stack10;
        java.util.Optional $stack12;
        java.lang.Integer $stack13, $stack15;
        java.lang.Object $stack14;
        int compare;
        boolean $stack17;

        this := @this: ChildElementSorter;

        otherChildElementSorter := @parameter0: sortpom.wrapper.content.ChildElementSorter;

        getOtherTextFunc = staticinvoke <ChildElementSorter$lambda_compareTo_2__310: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter)>(otherChildElementSorter);

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack5 = $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames>;

        $stack6 = virtualinvoke $stack5.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $stack7 = interfaceinvoke $stack6.<java.util.Set: java.util.stream.Stream stream()>();

        $r1 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack8 = staticinvoke <ChildElementSorter$lambda_compareTo_3__312: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>($r1, getOtherTextFunc);

        $stack9 = interfaceinvoke $stack7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack8);

        $stack10 = staticinvoke <ChildElementSorter$lambda_compareTo_4__314: java.util.function.Predicate bootstrap$()>();

        $stack11 = interfaceinvoke $stack9.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack10);

        $stack12 = interfaceinvoke $stack11.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $stack13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack14 = virtualinvoke $stack12.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($stack13);

        $stack15 = (java.lang.Integer) $stack14;

        compare = virtualinvoke $stack15.<java.lang.Integer: int intValue()>();

        if compare >= 0 goto label1;

        $stack17 = 1;

        goto label2;

     label1:
        $stack17 = 0;

     label2:
        return $stack17;
    }

    private int compareTexts(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String key, $stack4, text, otherText;
        boolean $stack5;
        int $stack6, $stack7;
        ChildElementSorter this;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        key := @parameter0: java.lang.String;

        text := @parameter1: java.lang.String;

        otherText := @parameter2: java.lang.String;

        $stack4 = "scope";

        $stack5 = virtualinvoke $stack4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(key);

        if $stack5 == 0 goto label1;

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack7 = specialinvoke $r0.<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>(text, otherText);

        return $stack7;

     label1:
        $stack6 = virtualinvoke text.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(otherText);

        return $stack6;
    }

    private int compareScope(java.lang.String, java.lang.String)
    {
        java.lang.String childElementText, otherChildElementText;
        sortpom.wrapper.content.ChildElementSorter$Scope $stack3, $stack4;
        int $stack5;
        ChildElementSorter this;
        java.lang.Enum $r0;

        this := @this: ChildElementSorter;

        childElementText := @parameter0: java.lang.String;

        otherChildElementText := @parameter1: java.lang.String;

        $stack3 = staticinvoke <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>(childElementText);

        $stack4 = staticinvoke <sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>(otherChildElementText);

        $r0 = (java.lang.Enum) $stack4;

        $stack5 = virtualinvoke $stack3.<sortpom.wrapper.content.ChildElementSorter$Scope: int compareTo(java.lang.Enum)>($r0);

        return $stack5;
    }

    void emptyGroupIdIsFilledWithDefaultMavenGroupId()
    {
        ChildElementSorter this;
        java.util.LinkedHashMap $stack1;
        java.util.function.BiFunction $stack3;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack1 = $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames>;

        $stack3 = staticinvoke <ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__311: java.util.function.BiFunction bootstrap$()>();

        virtualinvoke $stack1.<java.util.LinkedHashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>("GROUPID", $stack3);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack2, $stack5, $stack6, $u0;
        ChildElementSorter this;
        java.util.LinkedHashMap $stack3;
        java.util.Collection $stack4;
        java.lang.String $stack7;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ChildElementSorter{childElementTexts=");

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack3 = $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames>;

        $stack4 = virtualinvoke $stack3.<java.util.LinkedHashMap: java.util.Collection values()>();

        $stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    private static java.lang.String lambda$emptyGroupIdIsFilledWithDefaultMavenGroupId$5(java.lang.String, java.lang.String)
    {
        java.lang.String oldValue, k, $stack3;
        boolean $stack2;

        k := @parameter0: java.lang.String;

        oldValue := @parameter1: java.lang.String;

        $stack2 = virtualinvoke oldValue.<java.lang.String: boolean isEmpty()>();

        if $stack2 == 0 goto label1;

        $stack3 = "org.apache.maven.plugins";

        goto label2;

     label1:
        $stack3 = oldValue;

     label2:
        return $stack3;
    }

    private static boolean lambda$compareTo$4(java.lang.Integer)
    {
        java.lang.Integer i;
        int $stack1;
        boolean $stack2;

        i := @parameter0: java.lang.Integer;

        $stack1 = virtualinvoke i.<java.lang.Integer: int intValue()>();

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    private java.lang.Integer lambda$compareTo$3(java.util.function.Function, java.util.Map$Entry)
    {
        ChildElementSorter this;
        java.util.Map$Entry entry;
        java.lang.Object $stack3, $stack5, $stack7;
        java.lang.String $stack4, $stack6, $stack8;
        java.util.function.Function getOtherTextFunc;
        int $stack9;
        java.lang.Integer $stack10;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        getOtherTextFunc := @parameter0: java.util.function.Function;

        entry := @parameter1: java.util.Map$Entry;

        $stack3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack4 = (java.lang.String) $stack3;

        $stack5 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack6 = (java.lang.String) $stack5;

        $stack7 = interfaceinvoke getOtherTextFunc.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(entry);

        $stack8 = (java.lang.String) $stack7;

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack9 = specialinvoke $r0.<sortpom.wrapper.content.ChildElementSorter: int compareTexts(java.lang.String,java.lang.String,java.lang.String)>($stack4, $stack6, $stack8);

        $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9);

        return $stack10;
    }

    private static java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter, java.util.Map$Entry)
    {
        sortpom.wrapper.content.ChildElementSorter otherChildElementSorter;
        java.util.Map$Entry entry;
        java.util.LinkedHashMap $stack2;
        java.lang.Object $stack3, $stack4;
        java.lang.String $stack5;

        otherChildElementSorter := @parameter0: sortpom.wrapper.content.ChildElementSorter;

        entry := @parameter1: java.util.Map$Entry;

        $stack2 = otherChildElementSorter.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames>;

        $stack3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack4 = virtualinvoke $stack2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (java.lang.String) $stack4;

        return $stack5;
    }

    private void lambda$new$1(org.jdom.Element)
    {
        ChildElementSorter this;
        org.jdom.Element element;
        java.util.LinkedHashMap $stack2;
        java.lang.String $stack3, $stack4, $stack5;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        element := @parameter0: org.jdom.Element;

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack2 = $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames>;

        $stack3 = virtualinvoke element.<org.jdom.Element: java.lang.String getName()>();

        $stack4 = virtualinvoke $stack3.<java.lang.String: java.lang.String toUpperCase()>();

        $stack5 = virtualinvoke element.<org.jdom.Element: java.lang.String getTextTrim()>();

        virtualinvoke $stack2.<java.util.LinkedHashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        return;
    }

    private void lambda$new$0(java.lang.String)
    {
        ChildElementSorter this;
        java.lang.String name, $stack3;
        java.util.LinkedHashMap $stack2;
        sortpom.wrapper.content.ChildElementSorter $r0;

        this := @this: ChildElementSorter;

        name := @parameter0: java.lang.String;

        $r0 = (sortpom.wrapper.content.ChildElementSorter) this;

        $stack2 = $r0.<sortpom.wrapper.content.ChildElementSorter: java.util.LinkedHashMap childElementTextMappedBySortedNames>;

        $stack3 = virtualinvoke name.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $stack2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, "");

        return;
    }

    static void <clinit>()
    {
        sortpom.wrapper.content.ChildElementSorter $stack0;

        <ChildElementSorter: java.lang.String EMPTY_PLUGIN_GROUP_ID_VALUE> = "org.apache.maven.plugins";

        <ChildElementSorter: java.lang.String GROUP_ID_NAME> = "GROUPID";

        $stack0 = new sortpom.wrapper.content.ChildElementSorter;

        specialinvoke $stack0.<sortpom.wrapper.content.ChildElementSorter: void <init>()>();

        <sortpom.wrapper.content.ChildElementSorter: sortpom.wrapper.content.ChildElementSorter EMPTY_SORTER> = $stack0;

        return;
    }
}
