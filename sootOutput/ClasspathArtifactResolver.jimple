public class ClasspathArtifactResolver extends java.lang.Object implements org.eclipse.aether.impl.ArtifactResolver
{

    public void <init>()
    {
        ClasspathArtifactResolver this;

        this := @this: ClasspathArtifactResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List resolveArtifacts(org.eclipse.aether.RepositorySystemSession, java.util.Collection) throws org.eclipse.aether.resolution.ArtifactResolutionException
    {
        java.util.Collection requests;
        java.util.Iterator l4;
        boolean $stack12, $stack19;
        java.lang.Object $stack13;
        org.eclipse.aether.resolution.ArtifactRequest request;
        java.lang.String $stack17, $stack18, $stack23, $stack24, scope, $stack31, $stack41;
        int $stack25;
        java.lang.StringBuilder $stack28, $stack29, $stack30, $stack39, $stack40, $u2, $u3;
        java.io.File $stack32;
        java.io.FileNotFoundException $stack36;
        ClasspathArtifactResolver this;
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.artifact.Artifact artifact;
        java.util.ArrayList $u0;
        org.eclipse.aether.resolution.ArtifactResult $u1;
        java.lang.IllegalStateException $u4;
        org.eclipse.aether.transfer.ArtifactNotFoundException $u5;
        org.eclipse.aether.resolution.ArtifactResolutionException $u6;
        java.lang.Exception $r0;
        java.lang.Throwable $r1;

        this := @this: ClasspathArtifactResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        requests := @parameter1: java.util.Collection;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        l4 = interfaceinvoke requests.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label8;

        $stack13 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        request = (org.eclipse.aether.resolution.ArtifactRequest) $stack13;

        $u1 = new org.eclipse.aether.resolution.ArtifactResult;

        specialinvoke $u1.<org.eclipse.aether.resolution.ArtifactResult: void <init>(org.eclipse.aether.resolution.ArtifactRequest)>(request);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

        artifact = virtualinvoke request.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack17 = "maven-test";

        $stack18 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack19 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label6;

        $stack23 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack24 = "scope-";

        $stack25 = virtualinvoke $stack24.<java.lang.String: int length()>();

        scope = virtualinvoke $stack23.<java.lang.String: java.lang.String substring(int)>($stack25);

     label2:
        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("projects/scope/transitive-");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scope);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-dep.xml");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack32 = staticinvoke <org.apache.maven.project.ProjectClasspathTest: java.io.File getFileForClasspathResource(java.lang.String)>($stack31);

        artifact = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: org.eclipse.aether.artifact.Artifact setFile(java.io.File)>($stack32);

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.resolution.ArtifactResult setArtifact(org.eclipse.aether.artifact.Artifact)>(artifact);

     label3:
        goto label5;

     label4:
        $stack36 := @caughtexception;

        $u4 = new java.lang.IllegalStateException;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack39 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing test POM for ");

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(artifact);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack41);

        throw $u4;

     label5:
        goto label7;

     label6:
        $u5 = new org.eclipse.aether.transfer.ArtifactNotFoundException;

        specialinvoke $u5.<org.eclipse.aether.transfer.ArtifactNotFoundException: void <init>(org.eclipse.aether.artifact.Artifact,org.eclipse.aether.repository.RemoteRepository)>(artifact, null);

        $r0 = (java.lang.Exception) $u5;

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.resolution.ArtifactResult addException(java.lang.Exception)>($r0);

        $u6 = new org.eclipse.aether.resolution.ArtifactResolutionException;

        specialinvoke $u6.<org.eclipse.aether.resolution.ArtifactResolutionException: void <init>(java.util.List)>($u0);

        $r1 = (java.lang.Throwable) $u6;

        throw $r1;

     label7:
        goto label1;

     label8:
        return $u0;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    public org.eclipse.aether.resolution.ArtifactResult resolveArtifact(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.ArtifactRequest) throws org.eclipse.aether.resolution.ArtifactResolutionException
    {
        ClasspathArtifactResolver this;
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.resolution.ArtifactRequest request;
        java.util.Set $stack3;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.eclipse.aether.resolution.ArtifactResult $stack6;
        org.apache.maven.project.ClasspathArtifactResolver $r0;

        this := @this: ClasspathArtifactResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        request := @parameter1: org.eclipse.aether.resolution.ArtifactRequest;

        $stack3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(request);

        $r0 = (org.apache.maven.project.ClasspathArtifactResolver) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.ClasspathArtifactResolver: java.util.List resolveArtifacts(org.eclipse.aether.RepositorySystemSession,java.util.Collection)>(session, $stack3);

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        $stack6 = (org.eclipse.aether.resolution.ArtifactResult) $stack5;

        return $stack6;
    }
}
