public class CleanArgumentTest extends java.lang.Object
{

    public void <init>()
    {
        CleanArgumentTest this;

        this := @this: CleanArgumentTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void cleanArgsShouldRemoveWrongSurroundingQuotes()
    {
        java.lang.String[] $stack3, cleanArgs;
        int $stack5, $stack6;
        java.lang.String $stack7, $stack8;
        CleanArgumentTest this;

        this := @this: CleanArgumentTest;

        $stack3 = newarray (java.lang.String)[2];

        $stack3[0] = "\"-Dfoo=bar";

        $stack3[1] = "\"-Dfoo2=bar two\"";

        cleanArgs = staticinvoke <org.apache.maven.cli.CleanArgument: java.lang.String[] cleanArgs(java.lang.String[])>($stack3);

        $stack6 = lengthof $stack3;

        $stack5 = lengthof cleanArgs;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack6, $stack5);

        $stack7 = cleanArgs[0];

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("-Dfoo=bar", $stack7);

        $stack8 = cleanArgs[1];

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("-Dfoo2=bar two", $stack8);

        return;
    }

    public void testCleanArgsShouldNotTouchCorrectlyQuotedArgumentsUsingDoubleQuotes()
    {
        java.lang.String[] $stack4, cleanArgs;
        int $stack6, $stack7;
        java.lang.String $stack8;
        CleanArgumentTest this;

        this := @this: CleanArgumentTest;

        $stack4 = newarray (java.lang.String)[1];

        $stack4[0] = "-Dinformation=\"The Information is important.\"";

        cleanArgs = staticinvoke <org.apache.maven.cli.CleanArgument: java.lang.String[] cleanArgs(java.lang.String[])>($stack4);

        $stack7 = lengthof $stack4;

        $stack6 = lengthof cleanArgs;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack7, $stack6);

        $stack8 = cleanArgs[0];

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("-Dinformation=\"The Information is important.\"", $stack8);

        return;
    }

    public void testCleanArgsShouldNotTouchCorrectlyQuotedArgumentsUsingSingleQuotes()
    {
        java.lang.String[] $stack4, cleanArgs;
        int $stack6, $stack7;
        java.lang.String $stack8;
        CleanArgumentTest this;

        this := @this: CleanArgumentTest;

        $stack4 = newarray (java.lang.String)[1];

        $stack4[0] = "-Dinformation=\'The Information is important.\'";

        cleanArgs = staticinvoke <org.apache.maven.cli.CleanArgument: java.lang.String[] cleanArgs(java.lang.String[])>($stack4);

        $stack7 = lengthof $stack4;

        $stack6 = lengthof cleanArgs;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack7, $stack6);

        $stack8 = cleanArgs[0];

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("-Dinformation=\'The Information is important.\'", $stack8);

        return;
    }
}
