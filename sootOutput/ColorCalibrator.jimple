public class ColorCalibrator extends java.lang.Object
{
    private org.bytedeco.javacv.ProjectiveDevice device;
    static final boolean $assertionsDisabled;

    public void <init>(org.bytedeco.javacv.ProjectiveDevice)
    {
        ColorCalibrator this;
        org.bytedeco.javacv.ProjectiveDevice device;
        org.bytedeco.javacv.ColorCalibrator $r0;

        this := @this: ColorCalibrator;

        device := @parameter0: org.bytedeco.javacv.ProjectiveDevice;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.bytedeco.javacv.ColorCalibrator) this;

        $r0.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device> = device;

        return;
    }

    public double calibrate(java.awt.Color[], java.awt.Color[])
    {
        boolean $stack27;
        ColorCalibrator this;
        org.bytedeco.javacv.ProjectiveDevice $stack28, $stack37, $stack59, $stack61, $stack63, $stack64, $stack76, $stack80, $stack85, $stack90;
        int[] order;
        java.awt.Color[] referenceColors, deviceColors;
        int $stack30, $stack31, $stack33, $stack34, $stack41, $stack44, $stack49, $stack65, $stack67, $stack68, $stack70, $stack71, $stack73, $stack74, $stack77, $stack81, $stack82, $stack86, $stack87, $stack129, $stack133, $stack137, $stack141, $stack144, $stack146, $stack147, $stack150, $stack152, $stack153, $stack156, $stack160, $stack161, $stack163, $stack165, $stack167, $stack171, $stack172, $stack176, $stack177, i, $stack40, j, k, m;
        org.bytedeco.opencv.opencv_core.CvMat A, b, x, $stack60, $stack62, $stack78, $stack83, $stack88, $stack91, i#15;
        org.bytedeco.javacv.ProjectiveDevice$Settings $stack38;
        double gamma, $stack42, $stack46, $stack47, $stack48, $stack50, $stack55, $stack56, $stack57, $stack58, x1, x2, x3, $stack131, $stack135, $stack139, $stack143, $stack149, $stack155, dc1, dc2, dc3, dc#16, k#25;
        byte $stack43;
        java.io.PrintStream $stack95;
        java.awt.Color $stack125, $stack127;
        float[] rc, dc;
        float $stack130, $stack134, $stack138, $stack142, $stack148, $stack154;
        java.lang.AssertionError $u0;
        org.bytedeco.opencv.opencv_core.CvScalar $u1, $u2;
        org.bytedeco.javacv.ColorCalibrator $r0, $r1, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.bytedeco.opencv.opencv_core.CvArr $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        this := @this: ColorCalibrator;

        referenceColors := @parameter0: java.awt.Color[];

        deviceColors := @parameter1: java.awt.Color[];

        $stack27 = <org.bytedeco.javacv.ColorCalibrator: boolean $assertionsDisabled>;

        if $stack27 != 0 goto label01;

        $stack177 = lengthof referenceColors;

        $stack176 = lengthof deviceColors;

        if $stack177 == $stack176 goto label01;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label01:
        $r0 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack28 = $r0.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        order = virtualinvoke $stack28.<org.bytedeco.javacv.ProjectiveDevice: int[] getRGBColorOrder()>();

        $stack30 = lengthof referenceColors;

        $stack31 = $stack30 * 3;

        A = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>($stack31, 12);

        $stack33 = lengthof referenceColors;

        $stack34 = $stack33 * 3;

        b = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>($stack34, 1);

        x = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(12, 1);

        $r1 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack37 = $r1.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack38 = virtualinvoke $stack37.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.javacv.ProjectiveDevice$Settings getSettings()>();

        gamma = virtualinvoke $stack38.<org.bytedeco.javacv.ProjectiveDevice$Settings: double getResponseGamma()>();

        i = 0;

     label02:
        $stack40 = lengthof referenceColors;

        if i >= $stack40 goto label07;

        $stack125 = deviceColors[i];

        dc = virtualinvoke $stack125.<java.awt.Color: float[] getRGBColorComponents(float[])>(null);

        $stack127 = referenceColors[i];

        rc = virtualinvoke $stack127.<java.awt.Color: float[] getRGBColorComponents(float[])>(null);

        $stack129 = order[0];

        $stack130 = dc[$stack129];

        $stack131 = (double) $stack130;

        dc1 = staticinvoke <java.lang.Math: double pow(double,double)>($stack131, gamma);

        $stack133 = order[1];

        $stack134 = dc[$stack133];

        $stack135 = (double) $stack134;

        dc2 = staticinvoke <java.lang.Math: double pow(double,double)>($stack135, gamma);

        $stack137 = order[2];

        $stack138 = dc[$stack137];

        $stack139 = (double) $stack138;

        dc3 = staticinvoke <java.lang.Math: double pow(double,double)>($stack139, gamma);

        j = 0;

     label03:
        if j >= 3 goto label06;

        $stack161 = i * 36;

        $stack160 = j * 16;

        k = $stack161 + $stack160;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(k, dc1);

        $stack163 = k + 1;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack163, dc2);

        $stack165 = k + 2;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack165, dc3);

        $stack167 = k + 3;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack167, 1.0);

        if j >= 2 goto label05;

        m = 0;

     label04:
        if m >= 12 goto label05;

        $stack171 = k + 4;

        $stack172 = $stack171 + m;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack172, 0.0);

        m = m + 1;

        goto label04;

     label05:
        j = j + 1;

        goto label03;

     label06:
        $stack144 = i * 3;

        $stack141 = order[0];

        $stack142 = rc[$stack141];

        $stack143 = (double) $stack142;

        virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack144, $stack143);

        $stack146 = i * 3;

        $stack150 = $stack146 + 1;

        $stack147 = order[1];

        $stack148 = rc[$stack147];

        $stack149 = (double) $stack148;

        virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack150, $stack149);

        $stack152 = i * 3;

        $stack156 = $stack152 + 2;

        $stack153 = order[2];

        $stack154 = rc[$stack153];

        $stack155 = (double) $stack154;

        virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack156, $stack155);

        i = i + 1;

        goto label02;

     label07:
        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) b;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) x;

        $stack41 = staticinvoke <org.bytedeco.opencv.global.opencv_core: int cvSolve(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r2, $r3, $r4, 1);

        $stack42 = (double) $stack41;

        $stack43 = $stack42 cmpl 1.0;

        if $stack43 == 0 goto label08;

        $stack95 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack95.<java.io.PrintStream: void println(java.lang.String)>("Error solving.");

     label08:
        $stack44 = virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        i#15 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>($stack44, 1);

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) x;

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) i#15;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r5, $r6, $r7);

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) b;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) i#15;

        $stack46 = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r8, $r9);

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) b;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) i#15;

        $stack47 = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r10, $r11);

        $stack48 = $stack46 * $stack47;

        $stack49 = virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        $stack50 = (double) $stack49;

        dc#16 = $stack48 / $stack50;

        dc1 = staticinvoke <java.lang.Math: double sqrt(double)>(dc#16);

        $u1 = new org.bytedeco.opencv.opencv_core.CvScalar;

        specialinvoke $u1.<org.bytedeco.opencv.opencv_core.CvScalar: void <init>()>();

        $u2 = new org.bytedeco.opencv.opencv_core.CvScalar;

        specialinvoke $u2.<org.bytedeco.opencv.opencv_core.CvScalar: void <init>()>();

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) b;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvAvgSdv(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvScalar,org.bytedeco.opencv.opencv_core.CvScalar,org.bytedeco.opencv.opencv_core.CvArr)>($r12, $u1, $u2, null);

        $stack55 = virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.CvScalar: double val(int)>(0);

        $stack56 = virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.CvScalar: double val(int)>(0);

        $stack57 = $stack55 * $stack56;

        $stack58 = dc#16 / $stack57;

        dc3 = 1.0 - $stack58;

        $r13 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack59 = $r13.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack60 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $stack59.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix> = $stack60;

        $r14 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack61 = $r14.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack62 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 1);

        $stack61.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat additiveLight> = $stack62;

        j = 0;

     label09:
        if j >= 3 goto label10;

        $stack65 = j * 4;

        k#25 = virtualinvoke x.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack65);

        $stack67 = j * 4;

        $stack68 = $stack67 + 1;

        x1 = virtualinvoke x.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack68);

        $stack70 = j * 4;

        $stack71 = $stack70 + 2;

        x2 = virtualinvoke x.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack71);

        $stack73 = j * 4;

        $stack74 = $stack73 + 3;

        x3 = virtualinvoke x.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack74);

        $r15 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack76 = $r15.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack78 = $stack76.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix>;

        $stack77 = j * 3;

        virtualinvoke $stack78.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack77, k#25);

        $r16 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack80 = $r16.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack83 = $stack80.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix>;

        $stack81 = j * 3;

        $stack82 = $stack81 + 1;

        virtualinvoke $stack83.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack82, x1);

        $r17 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack85 = $r17.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack88 = $stack85.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix>;

        $stack86 = j * 3;

        $stack87 = $stack86 + 2;

        virtualinvoke $stack88.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack87, x2);

        $r18 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack90 = $r18.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack91 = $stack90.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat additiveLight>;

        virtualinvoke $stack91.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(j, x3);

        j = j + 1;

        goto label09;

     label10:
        $r19 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack63 = $r19.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack63.<org.bytedeco.javacv.ProjectiveDevice: double colorR2> = dc3;

        $r20 = (org.bytedeco.javacv.ColorCalibrator) this;

        $stack64 = $r20.<org.bytedeco.javacv.ColorCalibrator: org.bytedeco.javacv.ProjectiveDevice device>;

        $stack64.<org.bytedeco.javacv.ProjectiveDevice: double avgColorErr> = dc1;

        return dc1;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/bytedeco/javacv/ColorCalibrator;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.bytedeco.javacv.ColorCalibrator: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
