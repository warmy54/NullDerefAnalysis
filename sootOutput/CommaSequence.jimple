public class CommaSequence extends org.ooc.frontend.model.Expression
{
    org.ooc.frontend.model.NodeList body;

    public org.ooc.frontend.model.Type getType()
    {
        CommaSequence this;
        org.ooc.frontend.model.NodeList $stack1, $stack3;
        boolean $stack2;
        org.ooc.frontend.model.Node $stack4;
        org.ooc.frontend.model.Expression $stack5;
        org.ooc.frontend.model.Type $stack6;
        org.ooc.frontend.model.CommaSequence $r0, $r1;

        this := @this: CommaSequence;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $stack1 = $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack2 == 0 goto label1;

        $stack6 = null;

        goto label2;

     label1:
        $r1 = (org.ooc.frontend.model.CommaSequence) this;

        $stack3 = $r1.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        $stack4 = virtualinvoke $stack3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getLast()>();

        $stack5 = (org.ooc.frontend.model.Expression) $stack4;

        $stack6 = virtualinvoke $stack5.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

     label2:
        return $stack6;
    }

    public void <init>(org.ooc.frontend.model.tokens.Token)
    {
        CommaSequence this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.NodeList $u0;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $u0 = new org.ooc.frontend.model.NodeList;

        specialinvoke $u0.<org.ooc.frontend.model.NodeList: void <init>()>();

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body> = $u0;

        return;
    }

    public org.ooc.frontend.model.NodeList getBody()
    {
        CommaSequence this;
        org.ooc.frontend.model.NodeList $stack1;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $stack1 = $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        return $stack1;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        CommaSequence this;
        org.ooc.frontend.model.Node oldie, kiddo;
        org.ooc.frontend.model.NodeList $stack3;
        boolean $stack4;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $stack3 = $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        $stack4 = virtualinvoke $stack3.<org.ooc.frontend.model.NodeList: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>(oldie, kiddo);

        return $stack4;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        CommaSequence this;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.CommaSequence)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        CommaSequence this;
        org.ooc.frontend.model.NodeList $stack4;
        java.util.Iterator l2;
        boolean $stack6;
        java.lang.Object $stack7;
        org.ooc.frontend.model.Statement stmt;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $stack4 = $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        l2 = virtualinvoke $stack4.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        stmt = (org.ooc.frontend.model.Statement) $stack7;

        virtualinvoke stmt.<org.ooc.frontend.model.Statement: void accept(org.ooc.frontend.Visitor)>(visitor);

        goto label1;

     label2:
        return;
    }

    public boolean hasChildren()
    {
        CommaSequence this;
        org.ooc.frontend.model.NodeList $stack1;
        boolean $stack2, $stack3;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $stack1 = $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack2 != 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public java.lang.String toString()
    {
        CommaSequence this;
        org.ooc.frontend.model.NodeList $stack7;
        java.util.Iterator l3;
        boolean $stack9, isFirst;
        java.lang.String $stack11, $stack14;
        java.lang.Object $stack12;
        org.ooc.frontend.model.Statement stmt;
        java.lang.StringBuilder $u0;
        org.ooc.frontend.model.CommaSequence $r0;

        this := @this: CommaSequence;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        isFirst = 1;

        $r0 = (org.ooc.frontend.model.CommaSequence) this;

        $stack7 = $r0.<org.ooc.frontend.model.CommaSequence: org.ooc.frontend.model.NodeList body>;

        l3 = virtualinvoke $stack7.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        stmt = (org.ooc.frontend.model.Statement) $stack12;

        if isFirst == 0 goto label2;

        isFirst = 0;

        goto label3;

     label2:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $stack14 = virtualinvoke stmt.<org.ooc.frontend.model.Statement: java.lang.String toString()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        goto label1;

     label4:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack11;
    }
}
