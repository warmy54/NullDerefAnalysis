class ComparableVersionIT$1 extends java.nio.file.SimpleFileVisitor
{
    java.util.regex.Pattern mavenArtifactJar;
    final org.apache.maven.artifact.versioning.ComparableVersionIT this$0;

    void <init>(org.apache.maven.artifact.versioning.ComparableVersionIT)
    {
        ComparableVersionIT$1 this;
        org.apache.maven.artifact.versioning.ComparableVersionIT this$0;
        java.util.regex.Pattern $stack2;
        org.apache.maven.artifact.versioning.ComparableVersionIT$1 $r0, $r1;

        this := @this: ComparableVersionIT$1;

        this$0 := @parameter0: org.apache.maven.artifact.versioning.ComparableVersionIT;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionIT$1) this;

        $r0.<org.apache.maven.artifact.versioning.ComparableVersionIT$1: org.apache.maven.artifact.versioning.ComparableVersionIT this$0> = this$0;

        specialinvoke this.<java.nio.file.SimpleFileVisitor: void <init>()>();

        $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("maven-artifact-[\\d.]+(-SNAPSHOT)?\\.jar");

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionIT$1) this;

        $r1.<org.apache.maven.artifact.versioning.ComparableVersionIT$1: java.util.regex.Pattern mavenArtifactJar> = $stack2;

        return;
    }

    public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        java.nio.file.Path file, $stack6, $stack17, $stack20;
        java.lang.String filename, $stack15, $stack18, $stack21, $stack28;
        ComparableVersionIT$1 this;
        java.util.regex.Pattern $stack8;
        java.util.regex.Matcher $stack9;
        boolean $stack10;
        java.nio.file.FileVisitResult $stack11, $stack25;
        java.lang.Runtime $stack12;
        java.lang.String[] $stack13, $stack16;
        java.lang.Process p;
        int $stack24;
        java.lang.InterruptedException $stack26;
        java.nio.file.attribute.BasicFileAttributes attrs;
        java.io.InterruptedIOException $u0;
        org.apache.maven.artifact.versioning.ComparableVersionIT$1 $r0;

        this := @this: ComparableVersionIT$1;

        file := @parameter0: java.nio.file.Path;

        attrs := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $stack6 = interfaceinvoke file.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        filename = interfaceinvoke $stack6.<java.nio.file.Path: java.lang.String toString()>();

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionIT$1) this;

        $stack8 = $r0.<org.apache.maven.artifact.versioning.ComparableVersionIT$1: java.util.regex.Pattern mavenArtifactJar>;

        $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(filename);

        $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>();

        if $stack10 == 0 goto label5;

        $stack12 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $stack13 = newarray (java.lang.String)[5];

        $stack15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $stack16 = newarray (java.lang.String)[1];

        $stack16[0] = "bin/java";

        $stack17 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($stack15, $stack16);

        $stack18 = interfaceinvoke $stack17.<java.nio.file.Path: java.lang.String toString()>();

        $stack13[0] = $stack18;

        $stack13[1] = "-jar";

        $stack20 = interfaceinvoke file.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $stack21 = interfaceinvoke $stack20.<java.nio.file.Path: java.lang.String toString()>();

        $stack13[2] = $stack21;

        $stack13[3] = "5.32";

        $stack13[4] = "5.27";

        p = virtualinvoke $stack12.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>($stack13);

     label1:
        $stack24 = virtualinvoke p.<java.lang.Process: int waitFor()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack24, "Unexpected exit code");

     label2:
        goto label4;

     label3:
        $stack26 := @caughtexception;

        $u0 = new java.io.InterruptedIOException;

        $stack28 = virtualinvoke $stack26.<java.lang.InterruptedException: java.lang.String toString()>();

        specialinvoke $u0.<java.io.InterruptedIOException: void <init>(java.lang.String)>($stack28);

        throw $u0;

     label4:
        $stack25 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;

        return $stack25;

     label5:
        $stack11 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return $stack11;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        java.lang.String[] $stack3;
        java.nio.file.Path $stack4, dir;
        boolean $stack5;
        java.nio.file.FileVisitResult $stack6, $stack7;
        ComparableVersionIT$1 this;
        java.nio.file.attribute.BasicFileAttributes attrs;

        this := @this: ComparableVersionIT$1;

        dir := @parameter0: java.nio.file.Path;

        attrs := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $stack3 = newarray (java.lang.String)[0];

        $stack4 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("target", $stack3);

        $stack5 = interfaceinvoke $stack4.<java.nio.file.Path: boolean equals(java.lang.Object)>(dir);

        if $stack5 == 0 goto label1;

        $stack7 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return $stack7;

     label1:
        $stack6 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult SKIP_SUBTREE>;

        return $stack6;
    }

    public volatile java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        ComparableVersionIT$1 this;
        java.lang.Object l1;
        java.nio.file.attribute.BasicFileAttributes l2;
        java.nio.file.Path $stack3;
        java.nio.file.FileVisitResult $stack4;
        org.apache.maven.artifact.versioning.ComparableVersionIT$1 $r0;

        this := @this: ComparableVersionIT$1;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $stack3 = (java.nio.file.Path) l1;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionIT$1) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionIT$1: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($stack3, l2);

        return $stack4;
    }

    public volatile java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        ComparableVersionIT$1 this;
        java.lang.Object l1;
        java.nio.file.attribute.BasicFileAttributes l2;
        java.nio.file.Path $stack3;
        java.nio.file.FileVisitResult $stack4;
        org.apache.maven.artifact.versioning.ComparableVersionIT$1 $r0;

        this := @this: ComparableVersionIT$1;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $stack3 = (java.nio.file.Path) l1;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionIT$1) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionIT$1: java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($stack3, l2);

        return $stack4;
    }
}
