public class ComparableVersionTest extends java.lang.Object
{
    private static final java.lang.String[] VERSIONS_QUALIFIER;
    private static final java.lang.String[] VERSIONS_NUMBER;

    public void <init>()
    {
        ComparableVersionTest this;

        this := @this: ComparableVersionTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private java.lang.Comparable newComparable(java.lang.String)
    {
        java.lang.String version, canonical, parsedCanonical, $stack15, $stack23;
        java.io.PrintStream $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $stack14, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $u2, $u3;
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersion $u0, $u1;
        java.lang.Comparable $r0;

        this := @this: ComparableVersionTest;

        version := @parameter0: java.lang.String;

        $u0 = new org.apache.maven.artifact.versioning.ComparableVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.ComparableVersion: void <init>(java.lang.String)>(version);

        canonical = virtualinvoke $u0.<org.apache.maven.artifact.versioning.ComparableVersion: java.lang.String getCanonical()>();

        $u1 = new org.apache.maven.artifact.versioning.ComparableVersion;

        specialinvoke $u1.<org.apache.maven.artifact.versioning.ComparableVersion: void <init>(java.lang.String)>(canonical);

        parsedCanonical = virtualinvoke $u1.<org.apache.maven.artifact.versioning.ComparableVersion: java.lang.String getCanonical()>();

        $stack10 = <java.lang.System: java.io.PrintStream out>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canonical( ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ) = ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(canonical);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack10.<java.io.PrintStream: void println(java.lang.String)>($stack15);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canonical( ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ) = ");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(canonical);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> canonical: ");

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(parsedCanonical);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(canonical, parsedCanonical, $stack23);

        $r0 = (java.lang.Comparable) $u0;

        return $r0;
    }

    private void checkVersionsOrder(java.lang.String[])
    {
        java.lang.String[] versions;
        int $stack7, $stack8, $stack9, $stack10, $stack11, $stack14, $stack22, i, j;
        java.lang.Comparable[] c;
        java.lang.Comparable low, high, $stack45;
        java.lang.StringBuilder $stack17, $stack18, $stack19, $stack20, $stack25, $stack26, $stack27, $stack28, $u0, $u1;
        java.lang.String $stack21, $stack29, $stack44;
        ComparableVersionTest this;
        boolean $stack16, $stack24;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        versions := @parameter0: java.lang.String[];

        $stack7 = lengthof versions;

        c = newarray (java.lang.Comparable)[$stack7];

        i = 0;

     label01:
        $stack8 = lengthof versions;

        if i >= $stack8 goto label02;

        $stack44 = versions[i];

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        $stack45 = specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>($stack44);

        c[i] = $stack45;

        i = i + 1;

        goto label01;

     label02:
        i = 1;

     label03:
        $stack9 = lengthof versions;

        if i >= $stack9 goto label10;

        $stack10 = i - 1;

        low = c[$stack10];

        j = i;

     label04:
        $stack11 = lengthof versions;

        if j >= $stack11 goto label09;

        high = c[j];

        $stack14 = interfaceinvoke low.<java.lang.Comparable: int compareTo(java.lang.Object)>(high);

        if $stack14 >= 0 goto label05;

        $stack16 = 1;

        goto label06;

     label05:
        $stack16 = 0;

     label06:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(low);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(high);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack16, $stack21);

        $stack22 = interfaceinvoke high.<java.lang.Comparable: int compareTo(java.lang.Object)>(low);

        if $stack22 <= 0 goto label07;

        $stack24 = 1;

        goto label08;

     label07:
        $stack24 = 0;

     label08:
        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(high);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(low);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack24, $stack29);

        j = j + 1;

        goto label04;

     label09:
        i = i + 1;

        goto label03;

     label10:
        return;
    }

    private void checkVersionsEqual(java.lang.String, java.lang.String)
    {
        ComparableVersionTest this;
        java.lang.String v1, v2, $stack14, $stack22, $stack31, $stack39, $stack47;
        java.lang.Comparable c1, c2;
        int $stack7, $stack15, $stack23, $stack24;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack13, $stack18, $stack19, $stack20, $stack21, $stack27, $stack28, $stack29, $stack30, $stack34, $stack35, $stack36, $stack37, $stack38, $stack42, $stack43, $stack44, $stack45, $stack46, $u0, $u1, $u2, $u3, $u4;
        boolean $stack32, $stack40, $stack9, $stack17, $stack26;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1;

        this := @this: ComparableVersionTest;

        v1 := @parameter0: java.lang.String;

        v2 := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        c1 = specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>(v1);

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        c2 = specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>(v2);

        $stack7 = interfaceinvoke c1.<java.lang.Comparable: int compareTo(java.lang.Object)>(c2);

        if $stack7 != 0 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack9, $stack14);

        $stack15 = interfaceinvoke c2.<java.lang.Comparable: int compareTo(java.lang.Object)>(c1);

        if $stack15 != 0 goto label3;

        $stack17 = 1;

        goto label4;

     label3:
        $stack17 = 0;

     label4:
        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack17, $stack22);

        $stack23 = virtualinvoke c1.<java.lang.Object: int hashCode()>();

        $stack24 = virtualinvoke c2.<java.lang.Object: int hashCode()>();

        if $stack23 != $stack24 goto label5;

        $stack26 = 1;

        goto label6;

     label5:
        $stack26 = 0;

     label6:
        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack27 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected same hashcode for ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack26, $stack31);

        $stack32 = virtualinvoke c1.<java.lang.Object: boolean equals(java.lang.Object)>(c2);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".equals( ");

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack32, $stack39);

        $stack40 = virtualinvoke c2.<java.lang.Object: boolean equals(java.lang.Object)>(c1);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack42 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".equals( ");

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack40, $stack47);

        return;
    }

    private void checkVersionsArrayEqual(java.lang.String[])
    {
        java.lang.String[] array;
        int $stack4, $stack5, i, j;
        ComparableVersionTest this;
        java.lang.String $stack8, $stack9;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        array := @parameter0: java.lang.String[];

        i = 0;

     label1:
        $stack4 = lengthof array;

        if i >= $stack4 goto label4;

        j = i;

     label2:
        $stack5 = lengthof array;

        if j >= $stack5 goto label3;

        $stack9 = array[i];

        $stack8 = array[j];

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>($stack9, $stack8);

        j = j + 1;

        goto label2;

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    private void checkVersionsOrder(java.lang.String, java.lang.String)
    {
        ComparableVersionTest this;
        java.lang.String v1, v2, $stack14, $stack22;
        java.lang.Comparable c1, c2;
        int $stack7, $stack15;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack13, $stack18, $stack19, $stack20, $stack21, $u0, $u1;
        boolean $stack9, $stack17;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1;

        this := @this: ComparableVersionTest;

        v1 := @parameter0: java.lang.String;

        v2 := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        c1 = specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>(v1);

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        c2 = specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>(v2);

        $stack7 = interfaceinvoke c1.<java.lang.Comparable: int compareTo(java.lang.Object)>(c2);

        if $stack7 >= 0 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack9, $stack14);

        $stack15 = interfaceinvoke c2.<java.lang.Comparable: int compareTo(java.lang.Object)>(c1);

        if $stack15 <= 0 goto label3;

        $stack17 = 1;

        goto label4;

     label3:
        $stack17 = 0;

     label4:
        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack17, $stack22);

        return;
    }

    public void testVersionsQualifier()
    {
        ComparableVersionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        $stack1 = <org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.String[] VERSIONS_QUALIFIER>;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String[])>($stack1);

        return;
    }

    public void testVersionsNumber()
    {
        ComparableVersionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        $stack1 = <org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.String[] VERSIONS_NUMBER>;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String[])>($stack1);

        return;
    }

    public void testVersionsEqual()
    {
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41;

        this := @this: ComparableVersionTest;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>("1.0-alpha");

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1", "1");

        $r2 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r2.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1", "1.0");

        $r3 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r3.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1", "1.0.0");

        $r4 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r4.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1.0", "1.0.0");

        $r5 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r5.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1", "1-0");

        $r6 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r6.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1", "1.0-0");

        $r7 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r7.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1.0", "1.0-0");

        $r8 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r8.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1a", "1-a");

        $r9 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r9.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1a", "1.0-a");

        $r10 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r10.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1a", "1.0.0-a");

        $r11 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r11.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1.0a", "1-a");

        $r12 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r12.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1.0.0a", "1-a");

        $r13 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r13.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1x", "1-x");

        $r14 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r14.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1x", "1.0-x");

        $r15 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r15.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1x", "1.0.0-x");

        $r16 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r16.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1.0x", "1-x");

        $r17 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r17.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1.0.0x", "1-x");

        $r18 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r18.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1ga", "1");

        $r19 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r19.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1release", "1");

        $r20 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r20.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1final", "1");

        $r21 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r21.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1cr", "1rc");

        $r22 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r22.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1a1", "1-alpha-1");

        $r23 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r23.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1b2", "1-beta-2");

        $r24 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r24.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1m3", "1-milestone-3");

        $r25 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r25.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1X", "1x");

        $r26 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r26.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1A", "1a");

        $r27 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r27.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1B", "1b");

        $r28 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r28.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1M", "1m");

        $r29 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r29.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1Ga", "1");

        $r30 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r30.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1GA", "1");

        $r31 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r31.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1RELEASE", "1");

        $r32 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r32.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1release", "1");

        $r33 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r33.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1RELeaSE", "1");

        $r34 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r34.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1Final", "1");

        $r35 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r35.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1FinaL", "1");

        $r36 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r36.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1FINAL", "1");

        $r37 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r37.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1Cr", "1Rc");

        $r38 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r38.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1cR", "1rC");

        $r39 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r39.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1m3", "1Milestone3");

        $r40 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r40.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1m3", "1MileStone3");

        $r41 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r41.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1m3", "1MILESTONE3");

        return;
    }

    public void testVersionComparing()
    {
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        this := @this: ComparableVersionTest;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1", "2");

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.5", "2");

        $r2 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r2.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1", "2.5");

        $r3 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r3.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0", "1.1");

        $r4 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r4.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.1", "1.2");

        $r5 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r5.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0.0", "1.1");

        $r6 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r6.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0.1", "1.1");

        $r7 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r7.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.1", "1.2.0");

        $r8 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r8.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-alpha-1", "1.0");

        $r9 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r9.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-alpha-1", "1.0-alpha-2");

        $r10 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r10.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-alpha-1", "1.0-beta-1");

        $r11 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r11.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-beta-1", "1.0-SNAPSHOT");

        $r12 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r12.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-SNAPSHOT", "1.0");

        $r13 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r13.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-alpha-1-SNAPSHOT", "1.0-alpha-1");

        $r14 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r14.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0", "1.0-1");

        $r15 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r15.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0-1", "1.0-2");

        $r16 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r16.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1.0.0", "1.0-1");

        $r17 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r17.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("2.0-1", "2.0.1");

        $r18 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r18.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("2.0.1-klm", "2.0.1-lmn");

        $r19 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r19.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("2.0.1", "2.0.1-xyz");

        $r20 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r20.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("2.0.1", "2.0.1-123");

        $r21 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r21.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("2.0.1-xyz", "2.0.1-123");

        return;
    }

    public void testMng5568()
    {
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1, $r2;

        this := @this: ComparableVersionTest;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("6.1.0rc3", "6.1.0");

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("6.1.0rc3", "6.1H.5-beta");

        $r2 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r2.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("6.1.0", "6.1H.5-beta");

        return;
    }

    public void testMng6572()
    {
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ComparableVersionTest;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("20190126.230843", "1234567890.12345");

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1234567890.12345", "123456789012345.1H.5-beta");

        $r2 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r2.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("20190126.230843", "123456789012345.1H.5-beta");

        $r3 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r3.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("123456789012345.1H.5-beta", "12345678901234567890.1H.5-beta");

        $r4 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r4.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1234567890.12345", "12345678901234567890.1H.5-beta");

        $r5 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r5.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("20190126.230843", "12345678901234567890.1H.5-beta");

        return;
    }

    public void testVersionEqualWithLeadingZeroes()
    {
        java.lang.String[] $stack2;
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        $stack2 = newarray (java.lang.String)[19];

        $stack2[0] = "0000000000000000001";

        $stack2[1] = "000000000000000001";

        $stack2[2] = "00000000000000001";

        $stack2[3] = "0000000000000001";

        $stack2[4] = "000000000000001";

        $stack2[5] = "00000000000001";

        $stack2[6] = "0000000000001";

        $stack2[7] = "000000000001";

        $stack2[8] = "00000000001";

        $stack2[9] = "0000000001";

        $stack2[10] = "000000001";

        $stack2[11] = "00000001";

        $stack2[12] = "0000001";

        $stack2[13] = "000001";

        $stack2[14] = "00001";

        $stack2[15] = "0001";

        $stack2[16] = "001";

        $stack2[17] = "01";

        $stack2[18] = "1";

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsArrayEqual(java.lang.String[])>($stack2);

        return;
    }

    public void testVersionZeroEqualWithLeadingZeroes()
    {
        java.lang.String[] $stack2;
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        $stack2 = newarray (java.lang.String)[19];

        $stack2[0] = "0000000000000000000";

        $stack2[1] = "000000000000000000";

        $stack2[2] = "00000000000000000";

        $stack2[3] = "0000000000000000";

        $stack2[4] = "000000000000000";

        $stack2[5] = "00000000000000";

        $stack2[6] = "0000000000000";

        $stack2[7] = "000000000000";

        $stack2[8] = "00000000000";

        $stack2[9] = "0000000000";

        $stack2[10] = "000000000";

        $stack2[11] = "00000000";

        $stack2[12] = "0000000";

        $stack2[13] = "000000";

        $stack2[14] = "00000";

        $stack2[15] = "0000";

        $stack2[16] = "000";

        $stack2[17] = "00";

        $stack2[18] = "0";

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsArrayEqual(java.lang.String[])>($stack2);

        return;
    }

    public void testMng6964()
    {
        ComparableVersionTest this;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0, $r1, $r2;

        this := @this: ComparableVersionTest;

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1-0.alpha", "1");

        $r1 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r1.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1-0.beta", "1");

        $r2 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r2.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsOrder(java.lang.String,java.lang.String)>("1-0.alpha", "1-0.beta");

        return;
    }

    public void testLocaleIndependent()
    {
        java.util.Locale orig, $stack10, $stack14, locale, $u0;
        java.util.Locale[] $stack9;
        int l4, l5;
        ComparableVersionTest this;
        java.lang.Throwable $stack17;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        orig = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack9 = newarray (java.util.Locale)[3];

        $stack10 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack9[0] = $stack10;

        $u0 = new java.util.Locale;

        specialinvoke $u0.<java.util.Locale: void <init>(java.lang.String)>("tr");

        $stack9[1] = $u0;

        $stack14 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack9[2] = $stack14;

     label1:
        l4 = lengthof $stack9;

        l5 = 0;

     label2:
        if l5 >= l4 goto label3;

        locale = $stack9[l5];

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(locale);

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: void checkVersionsEqual(java.lang.String,java.lang.String)>("1-abcdefghijklmnopqrstuvwxyz", "1-ABCDEFGHIJKLMNOPQRSTUVWXYZ");

        l5 = l5 + 1;

        goto label2;

     label3:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(orig);

        goto label6;

     label4:
        $stack17 := @caughtexception;

     label5:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(orig);

        throw $stack17;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void testReuse()
    {
        ComparableVersionTest this;
        java.lang.Comparable c2;
        org.apache.maven.artifact.versioning.ComparableVersion $u0;
        org.apache.maven.artifact.versioning.ComparableVersionTest $r0;

        this := @this: ComparableVersionTest;

        $u0 = new org.apache.maven.artifact.versioning.ComparableVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.ComparableVersion: void <init>(java.lang.String)>("1");

        virtualinvoke $u0.<org.apache.maven.artifact.versioning.ComparableVersion: void parseVersion(java.lang.String)>("2");

        $r0 = (org.apache.maven.artifact.versioning.ComparableVersionTest) this;

        c2 = specialinvoke $r0.<org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.Comparable newComparable(java.lang.String)>("2");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($u0, c2, "reused instance should be equivalent to new instance");

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $stack0, $stack1;

        $stack0 = newarray (java.lang.String)[22];

        $stack0[0] = "1-alpha2snapshot";

        $stack0[1] = "1-alpha2";

        $stack0[2] = "1-alpha-123";

        $stack0[3] = "1-beta-2";

        $stack0[4] = "1-beta123";

        $stack0[5] = "1-m2";

        $stack0[6] = "1-m11";

        $stack0[7] = "1-rc";

        $stack0[8] = "1-cr2";

        $stack0[9] = "1-rc123";

        $stack0[10] = "1-SNAPSHOT";

        $stack0[11] = "1";

        $stack0[12] = "1-sp";

        $stack0[13] = "1-sp2";

        $stack0[14] = "1-sp123";

        $stack0[15] = "1-abc";

        $stack0[16] = "1-def";

        $stack0[17] = "1-pom-1";

        $stack0[18] = "1-1-snapshot";

        $stack0[19] = "1-1";

        $stack0[20] = "1-2";

        $stack0[21] = "1-123";

        <org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.String[] VERSIONS_QUALIFIER> = $stack0;

        $stack1 = newarray (java.lang.String)[25];

        $stack1[0] = "2.0";

        $stack1[1] = "2-1";

        $stack1[2] = "2.0.a";

        $stack1[3] = "2.0.0.a";

        $stack1[4] = "2.0.2";

        $stack1[5] = "2.0.123";

        $stack1[6] = "2.1.0";

        $stack1[7] = "2.1-a";

        $stack1[8] = "2.1b";

        $stack1[9] = "2.1-c";

        $stack1[10] = "2.1-1";

        $stack1[11] = "2.1.0.1";

        $stack1[12] = "2.2";

        $stack1[13] = "2.123";

        $stack1[14] = "11.a2";

        $stack1[15] = "11.a11";

        $stack1[16] = "11.b2";

        $stack1[17] = "11.b11";

        $stack1[18] = "11.m2";

        $stack1[19] = "11.m11";

        $stack1[20] = "11";

        $stack1[21] = "11.a";

        $stack1[22] = "11b";

        $stack1[23] = "11c";

        $stack1[24] = "11m";

        <org.apache.maven.artifact.versioning.ComparableVersionTest: java.lang.String[] VERSIONS_NUMBER> = $stack1;

        return;
    }
}
