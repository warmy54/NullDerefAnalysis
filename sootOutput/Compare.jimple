public class Compare extends org.ooc.frontend.model.BinaryOperation
{
    protected org.ooc.frontend.model.Compare$CompareType compareType;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.Expression, org.ooc.frontend.model.Compare$CompareType, org.ooc.frontend.model.tokens.Token)
    {
        Compare this;
        org.ooc.frontend.model.Expression left, right;
        org.ooc.frontend.model.tokens.Token token;
        org.ooc.frontend.model.Compare$CompareType compareType;
        org.ooc.frontend.model.Compare $r0;

        this := @this: Compare;

        left := @parameter0: org.ooc.frontend.model.Expression;

        right := @parameter1: org.ooc.frontend.model.Expression;

        compareType := @parameter2: org.ooc.frontend.model.Compare$CompareType;

        token := @parameter3: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.BinaryOperation: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>(left, right, token);

        $r0 = (org.ooc.frontend.model.Compare) this;

        $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Compare$CompareType compareType> = compareType;

        return;
    }

    public org.ooc.frontend.model.Compare$CompareType getCompareType()
    {
        Compare this;
        org.ooc.frontend.model.Compare$CompareType $stack1;
        org.ooc.frontend.model.Compare $r0;

        this := @this: Compare;

        $r0 = (org.ooc.frontend.model.Compare) this;

        $stack1 = $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Compare$CompareType compareType>;

        return $stack1;
    }

    public void setCompareType(org.ooc.frontend.model.Compare$CompareType)
    {
        Compare this;
        org.ooc.frontend.model.Compare$CompareType compareType;
        org.ooc.frontend.model.Compare $r0;

        this := @this: Compare;

        compareType := @parameter0: org.ooc.frontend.model.Compare$CompareType;

        $r0 = (org.ooc.frontend.model.Compare) this;

        $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Compare$CompareType compareType> = compareType;

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Compare this;
        org.ooc.frontend.model.Compare $r0;

        this := @this: Compare;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Compare) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Compare)>($r0);

        return;
    }

    public org.ooc.frontend.model.OpDecl$OpType getOpType()
    {
        Compare this;
        org.ooc.frontend.model.Compare$CompareType $stack1;
        int[] $stack2;
        int $stack3, $stack4;
        org.ooc.frontend.model.OpDecl$OpType $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;
        org.ooc.frontend.model.Compare $r0;

        this := @this: Compare;

        $stack2 = <org.ooc.frontend.model.Compare$1: int[] $SwitchMap$org$ooc$frontend$model$Compare$CompareType>;

        $r0 = (org.ooc.frontend.model.Compare) this;

        $stack1 = $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Compare$CompareType compareType>;

        $stack3 = virtualinvoke $stack1.<org.ooc.frontend.model.Compare$CompareType: int ordinal()>();

        $stack4 = $stack2[$stack3];

        tableswitch($stack4)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $stack10 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType EQ>;

        return $stack10;

     label2:
        $stack9 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType GT>;

        return $stack9;

     label3:
        $stack8 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType GTE>;

        return $stack8;

     label4:
        $stack7 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType LT>;

        return $stack7;

     label5:
        $stack6 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType LTE>;

        return $stack6;

     label6:
        $stack5 = <org.ooc.frontend.model.OpDecl$OpType: org.ooc.frontend.model.OpDecl$OpType NE>;

        return $stack5;

     label7:
        return null;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        Compare this;
        org.ooc.frontend.model.NodeList stack, args;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean fatal, $stack21, $stack31, $stack40;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response response, $stack10, $stack13, $stack24, $stack41, $stack55;
        org.ooc.frontend.model.Expression $stack11, $stack15, $stack16, $stack19, $stack22, $stack26, $stack27, $stack29, $stack33, $stack45, $stack46, $stack48, $stack49, $r15, $r24, $r27;
        org.ooc.frontend.model.Type $stack12, $stack20, $stack23, $stack30, $stack34;
        java.lang.String $stack17, $stack18, $stack28, $stack36;
        org.ooc.frontend.model.Declaration $stack35;
        org.ooc.frontend.model.tokens.Token $stack37, $stack39, $stack43, $stack53;
        org.ooc.frontend.model.IntLiteral$Format $stack54;
        org.ooc.middle.OocCompilationError $u0, $u1;
        org.ooc.frontend.model.VariableAccess $u2;
        org.ooc.frontend.model.MemberAccess $u3;
        org.ooc.frontend.model.FunctionCall $u4;
        org.ooc.frontend.model.IntLiteral $u5;
        org.ooc.frontend.model.Compare $r0, $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r23, $r25, $r26;
        org.ooc.frontend.model.Node $r4, $r10, $r19, $r21, $r22;
        java.lang.Throwable $r5, $r11;

        this := @this: Compare;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        response = specialinvoke this.<org.ooc.frontend.model.BinaryOperation: org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

        $stack10 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        if response == $stack10 goto label1;

        return response;

     label1:
        $r0 = (org.ooc.frontend.model.Compare) this;

        $stack11 = $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack12 = virtualinvoke $stack11.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack12 == null goto label2;

        $r1 = (org.ooc.frontend.model.Compare) this;

        $stack19 = $r1.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack20 = virtualinvoke $stack19.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack21 = virtualinvoke $stack20.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack21 != 0 goto label4;

     label2:
        if fatal == 0 goto label3;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r2 = (org.ooc.frontend.model.Compare) this;

        $stack15 = $r2.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $r3 = (org.ooc.frontend.model.Compare) this;

        $stack16 = $r3.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack17 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: java.lang.String toString(boolean)>(1);

        $stack18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression,java.lang.String)>($stack16, $stack17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Left type of assignment unresolved: \u0001 (btw, stack = \u0001");

        $r4 = (org.ooc.frontend.model.Node) $stack15;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r4, stack, $stack18);

        $r5 = (java.lang.Throwable) $u0;

        throw $r5;

     label3:
        $stack13 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack13;

     label4:
        $r6 = (org.ooc.frontend.model.Compare) this;

        $stack22 = $r6.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right>;

        $stack23 = virtualinvoke $stack22.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        if $stack23 == null goto label5;

        $r7 = (org.ooc.frontend.model.Compare) this;

        $stack29 = $r7.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack30 = virtualinvoke $stack29.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack31 = virtualinvoke $stack30.<org.ooc.frontend.model.Type: boolean isResolved()>();

        if $stack31 != 0 goto label7;

     label5:
        if fatal == 0 goto label6;

        $u1 = new org.ooc.middle.OocCompilationError;

        $r8 = (org.ooc.frontend.model.Compare) this;

        $stack27 = $r8.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right>;

        $r9 = (org.ooc.frontend.model.Compare) this;

        $stack26 = $r9.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right>;

        $stack28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression)>($stack26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Right type of assignment unresolved: \u0001");

        $r10 = (org.ooc.frontend.model.Node) $stack27;

        specialinvoke $u1.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r10, stack, $stack28);

        $r11 = (java.lang.Throwable) $u1;

        throw $r11;

     label6:
        $stack24 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack24;

     label7:
        $u2 = new org.ooc.frontend.model.VariableAccess;

        $r12 = (org.ooc.frontend.model.Compare) this;

        $stack33 = $r12.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack34 = virtualinvoke $stack33.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack35 = virtualinvoke $stack34.<org.ooc.frontend.model.Type: org.ooc.frontend.model.Declaration getRef()>();

        $stack36 = virtualinvoke $stack35.<org.ooc.frontend.model.Declaration: java.lang.String getName()>();

        $r13 = (org.ooc.frontend.model.Compare) this;

        $stack37 = $r13.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u2.<org.ooc.frontend.model.VariableAccess: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>($stack36, $stack37);

        $u3 = new org.ooc.frontend.model.MemberAccess;

        $r14 = (org.ooc.frontend.model.Compare) this;

        $stack39 = $r14.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.tokens.Token startToken>;

        $r15 = (org.ooc.frontend.model.Expression) $u2;

        specialinvoke $u3.<org.ooc.frontend.model.MemberAccess: void <init>(org.ooc.frontend.model.Expression,java.lang.String,org.ooc.frontend.model.tokens.Token)>($r15, "size", $stack39);

        $r16 = (org.ooc.frontend.model.Compare) this;

        $stack40 = virtualinvoke $r16.<org.ooc.frontend.model.Compare: boolean isGeneric()>();

        if $stack40 == 0 goto label8;

        $u4 = new org.ooc.frontend.model.FunctionCall;

        $r17 = (org.ooc.frontend.model.Compare) this;

        $stack43 = $r17.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u4.<org.ooc.frontend.model.FunctionCall: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>("memcmp", $stack43);

        args = virtualinvoke $u4.<org.ooc.frontend.model.FunctionCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r18 = (org.ooc.frontend.model.Compare) this;

        $stack45 = $r18.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack46 = virtualinvoke $stack45.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Expression getGenericOperand()>();

        $r19 = (org.ooc.frontend.model.Node) $stack46;

        virtualinvoke args.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r19);

        $r20 = (org.ooc.frontend.model.Compare) this;

        $stack48 = $r20.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right>;

        $stack49 = virtualinvoke $stack48.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Expression getGenericOperand()>();

        $r21 = (org.ooc.frontend.model.Node) $stack49;

        virtualinvoke args.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r21);

        $r22 = (org.ooc.frontend.model.Node) $u3;

        virtualinvoke args.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r22);

        $r23 = (org.ooc.frontend.model.Compare) this;

        $r24 = (org.ooc.frontend.model.Expression) $u4;

        $r23.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left> = $r24;

        $u5 = new org.ooc.frontend.model.IntLiteral;

        $stack54 = <org.ooc.frontend.model.IntLiteral$Format: org.ooc.frontend.model.IntLiteral$Format DEC>;

        $r25 = (org.ooc.frontend.model.Compare) this;

        $stack53 = $r25.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u5.<org.ooc.frontend.model.IntLiteral: void <init>(long,org.ooc.frontend.model.IntLiteral$Format,org.ooc.frontend.model.tokens.Token)>(0L, $stack54, $stack53);

        $r26 = (org.ooc.frontend.model.Compare) this;

        $r27 = (org.ooc.frontend.model.Expression) $u5;

        $r26.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right> = $r27;

        $stack55 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response RESTART>;

        return $stack55;

     label8:
        $stack41 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack41;
    }

    private boolean isGeneric()
    {
        Compare this;
        org.ooc.frontend.model.Expression $stack1, $stack4, $stack7, $stack11;
        org.ooc.frontend.model.Type $stack2, $stack5, $stack8, $stack12;
        boolean $stack3, $stack6, $stack10;
        int $stack9, $stack13;
        org.ooc.frontend.model.Compare $r0, $r1, $r2, $r3;

        this := @this: Compare;

        $r0 = (org.ooc.frontend.model.Compare) this;

        $stack1 = $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack3 = virtualinvoke $stack2.<org.ooc.frontend.model.Type: boolean isGeneric()>();

        if $stack3 == 0 goto label1;

        $r1 = (org.ooc.frontend.model.Compare) this;

        $stack11 = $r1.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression left>;

        $stack12 = virtualinvoke $stack11.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack13 = virtualinvoke $stack12.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        if $stack13 == 0 goto label2;

     label1:
        $r2 = (org.ooc.frontend.model.Compare) this;

        $stack4 = $r2.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right>;

        $stack5 = virtualinvoke $stack4.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack6 = virtualinvoke $stack5.<org.ooc.frontend.model.Type: boolean isGeneric()>();

        if $stack6 == 0 goto label3;

        $r3 = (org.ooc.frontend.model.Compare) this;

        $stack7 = $r3.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Expression right>;

        $stack8 = virtualinvoke $stack7.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $stack9 = virtualinvoke $stack8.<org.ooc.frontend.model.Type: int getPointerLevel()>();

        if $stack9 != 0 goto label3;

     label2:
        $stack10 = 1;

        goto label4;

     label3:
        $stack10 = 0;

     label4:
        return $stack10;
    }

    public int getPriority()
    {
        Compare this;
        org.ooc.frontend.model.Compare$CompareType $stack1;
        int[] $stack2;
        int $stack3, $stack4;
        org.ooc.frontend.model.Compare $r0;

        this := @this: Compare;

        $stack2 = <org.ooc.frontend.model.Compare$1: int[] $SwitchMap$org$ooc$frontend$model$Compare$CompareType>;

        $r0 = (org.ooc.frontend.model.Compare) this;

        $stack1 = $r0.<org.ooc.frontend.model.Compare: org.ooc.frontend.model.Compare$CompareType compareType>;

        $stack3 = virtualinvoke $stack1.<org.ooc.frontend.model.Compare$CompareType: int ordinal()>();

        $stack4 = $stack2[$stack3];

        tableswitch($stack4)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            default: goto label3;
        };

     label1:
        return 40;

     label2:
        return 50;

     label3:
        return 0;
    }
}
