public class ConcurrencyDependencyGraph extends java.lang.Object
{
    private final org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds;
    private final org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph;
    private final java.util.Set finishedProjects;

    public void <init>(org.apache.maven.lifecycle.internal.ProjectBuildList, org.apache.maven.execution.ProjectDependencyGraph)
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph;
        org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds;
        java.util.HashSet $u0;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0, $r1, $r2;

        this := @this: ConcurrencyDependencyGraph;

        projectBuilds := @parameter0: org.apache.maven.lifecycle.internal.ProjectBuildList;

        projectDependencyGraph := @parameter1: org.apache.maven.execution.ProjectDependencyGraph;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashSet;

        specialinvoke $u0.<java.util.HashSet: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set finishedProjects> = $u0;

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph> = projectDependencyGraph;

        $r2 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $r2.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds> = projectBuilds;

        return;
    }

    public int getNumberOfBuilds()
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.lifecycle.internal.ProjectBuildList $stack1;
        int $stack2;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0;

        this := @this: ConcurrencyDependencyGraph;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.lifecycle.internal.ProjectBuildList: int size()>();

        return $stack2;
    }

    public java.util.List getRootSchedulableBuilds()
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.lifecycle.internal.ProjectBuildList $stack5;
        java.util.Iterator l2;
        boolean $stack7, $stack13;
        java.lang.Object $stack9;
        org.apache.maven.lifecycle.internal.ProjectSegment projectBuild;
        org.apache.maven.execution.ProjectDependencyGraph $stack10;
        org.apache.maven.project.MavenProject $stack11, $stack15;
        java.util.List $stack12;
        java.util.LinkedHashSet $u0;
        java.util.ArrayList $u1;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0, $r1;

        this := @this: ConcurrencyDependencyGraph;

        $u0 = new java.util.LinkedHashSet;

        specialinvoke $u0.<java.util.LinkedHashSet: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack5 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds>;

        l2 = virtualinvoke $stack5.<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        projectBuild = (org.apache.maven.lifecycle.internal.ProjectSegment) $stack9;

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack10 = $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph>;

        $stack11 = virtualinvoke projectBuild.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.project.MavenProject getProject()>();

        $stack12 = interfaceinvoke $stack10.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack11, 0);

        $stack13 = interfaceinvoke $stack12.<java.util.List: boolean isEmpty()>();

        if $stack13 == 0 goto label2;

        $stack15 = virtualinvoke projectBuild.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.project.MavenProject getProject()>();

        interfaceinvoke $u0.<java.util.Set: boolean add(java.lang.Object)>($stack15);

     label2:
        goto label1;

     label3:
        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>(java.util.Collection)>($u0);

        return $u1;
    }

    public java.util.List markAsFinished(org.apache.maven.project.MavenProject)
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.project.MavenProject mavenProject;
        java.util.Set $stack2;
        java.util.List $stack4;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0, $r1;

        this := @this: ConcurrencyDependencyGraph;

        mavenProject := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack2 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set finishedProjects>;

        interfaceinvoke $stack2.<java.util.Set: boolean add(java.lang.Object)>(mavenProject);

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack4 = specialinvoke $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getSchedulableNewProcesses(org.apache.maven.project.MavenProject)>(mavenProject);

        return $stack4;
    }

    private java.util.List getSchedulableNewProcesses(org.apache.maven.project.MavenProject)
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.project.MavenProject finishedProject, dependentProject;
        org.apache.maven.execution.ProjectDependencyGraph $stack7, $stack12;
        java.util.List $stack8, upstreamProjects;
        java.util.Iterator l3;
        boolean $stack10, $stack15;
        java.lang.Object $stack11;
        java.util.Set $stack14;
        java.util.ArrayList $u0;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0, $r1, $r2;

        this := @this: ConcurrencyDependencyGraph;

        finishedProject := @parameter0: org.apache.maven.project.MavenProject;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack7 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph>;

        $stack8 = interfaceinvoke $stack7.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>(finishedProject, 0);

        l3 = interfaceinvoke $stack8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack10 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label3;

        $stack11 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        dependentProject = (org.apache.maven.project.MavenProject) $stack11;

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack12 = $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph>;

        upstreamProjects = interfaceinvoke $stack12.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>(dependentProject, 0);

        $r2 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack14 = $r2.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set finishedProjects>;

        $stack15 = interfaceinvoke $stack14.<java.util.Set: boolean containsAll(java.util.Collection)>(upstreamProjects);

        if $stack15 == 0 goto label2;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(dependentProject);

     label2:
        goto label1;

     label3:
        return $u0;
    }

    public java.util.Set getUnfinishedProjects()
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.lifecycle.internal.ProjectBuildList $stack3;
        java.util.Set $stack4, $stack5;
        java.util.HashSet $u0;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0, $r1;

        this := @this: ConcurrencyDependencyGraph;

        $u0 = new java.util.HashSet;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack3 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds>;

        $stack4 = virtualinvoke $stack3.<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Set getProjects()>();

        specialinvoke $u0.<java.util.HashSet: void <init>(java.util.Collection)>($stack4);

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack5 = $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set finishedProjects>;

        interfaceinvoke $u0.<java.util.Set: boolean removeAll(java.util.Collection)>($stack5);

        return $u0;
    }

    protected java.util.Set getFinishedProjects()
    {
        ConcurrencyDependencyGraph this;
        java.util.Set $stack1;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0;

        this := @this: ConcurrencyDependencyGraph;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set finishedProjects>;

        return $stack1;
    }

    protected org.apache.maven.lifecycle.internal.ProjectBuildList getProjectBuilds()
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.lifecycle.internal.ProjectBuildList $stack1;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0;

        this := @this: ConcurrencyDependencyGraph;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds>;

        return $stack1;
    }

    protected java.util.List getDependencies(org.apache.maven.project.MavenProject)
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.project.MavenProject p;
        org.apache.maven.execution.ProjectDependencyGraph $stack2;
        java.util.List $stack3;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0;

        this := @this: ConcurrencyDependencyGraph;

        p := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack2 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph>;

        $stack3 = interfaceinvoke $stack2.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>(p, 0);

        return $stack3;
    }

    public java.util.List getActiveDependencies(org.apache.maven.project.MavenProject)
    {
        ConcurrencyDependencyGraph this;
        org.apache.maven.project.MavenProject p;
        org.apache.maven.execution.ProjectDependencyGraph $stack3;
        java.util.List activeDependencies;
        java.util.Set $stack5;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $r0, $r1;

        this := @this: ConcurrencyDependencyGraph;

        p := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack3 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: org.apache.maven.execution.ProjectDependencyGraph projectDependencyGraph>;

        activeDependencies = interfaceinvoke $stack3.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>(p, 0);

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph) this;

        $stack5 = $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set finishedProjects>;

        interfaceinvoke activeDependencies.<java.util.List: boolean removeAll(java.util.Collection)>($stack5);

        return activeDependencies;
    }
}
