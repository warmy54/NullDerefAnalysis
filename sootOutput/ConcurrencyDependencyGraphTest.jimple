public class ConcurrencyDependencyGraphTest extends java.lang.Object
{

    public void <init>()
    {
        ConcurrencyDependencyGraphTest this;

        this := @this: ConcurrencyDependencyGraphTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGraph() throws java.lang.Exception
    {
        org.apache.maven.execution.MavenSession $stack12;
        org.apache.maven.lifecycle.internal.ProjectBuildList projectBuildList;
        java.util.Set $stack17, $stack32, $stack39, $stack44, unfinishedProjects, $stack53, $stack56;
        int $stack18, $stack20, $stack23, $stack30, $stack33, $stack37, $stack40, $stack45, $stack48, $stack54, $stack57, $stack61, $stack65, $stack69, $stack73;
        java.util.List rootSchedulableBuilds, dependenciesA, schedulableNewProcesses, dependenciesC, dependenciesX, activeDependenciesC, activeDependenciesX;
        org.apache.maven.project.MavenProject $stack24, $stack27, $stack34, $stack41, $stack50, $stack58, $stack62, $stack66, $stack70;
        java.util.Iterator $stack25;
        java.lang.Object $stack26, $stack49;
        ConcurrencyDependencyGraphTest this;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub $u0;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $u1;
        org.apache.maven.execution.ProjectDependencyGraph $r0;

        this := @this: ConcurrencyDependencyGraphTest;

        $stack12 = staticinvoke <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.execution.MavenSession getMavenSession()>();

        projectBuildList = staticinvoke <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.lifecycle.internal.ProjectBuildList getProjectBuildList(org.apache.maven.execution.MavenSession)>($stack12);

        $u0 = new org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub;

        specialinvoke $u0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: void <init>()>();

        $u1 = new org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph;

        $r0 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        specialinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: void <init>(org.apache.maven.lifecycle.internal.ProjectBuildList,org.apache.maven.execution.ProjectDependencyGraph)>(projectBuildList, $r0);

        $stack17 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getFinishedProjects()>();

        $stack18 = interfaceinvoke $stack17.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack18);

        $stack20 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: int getNumberOfBuilds()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(6, $stack20);

        rootSchedulableBuilds = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getRootSchedulableBuilds()>();

        $stack23 = interfaceinvoke rootSchedulableBuilds.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack23);

        $stack24 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        $stack25 = interfaceinvoke rootSchedulableBuilds.<java.util.List: java.util.Iterator iterator()>();

        $stack26 = interfaceinvoke $stack25.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack24, $stack26);

        $stack27 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        dependenciesA = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getDependencies(org.apache.maven.project.MavenProject)>($stack27);

        $stack30 = interfaceinvoke dependenciesA.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack30);

        $stack32 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getUnfinishedProjects()>();

        $stack33 = interfaceinvoke $stack32.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(6, $stack33);

        $stack34 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        schedulableNewProcesses = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List markAsFinished(org.apache.maven.project.MavenProject)>($stack34);

        $stack37 = interfaceinvoke schedulableNewProcesses.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack37);

        $stack39 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getFinishedProjects()>();

        $stack40 = interfaceinvoke $stack39.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack40);

        $stack41 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List markAsFinished(org.apache.maven.project.MavenProject)>($stack41);

        $stack44 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getFinishedProjects()>();

        $stack45 = interfaceinvoke $stack44.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack45);

        unfinishedProjects = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getUnfinishedProjects()>();

        $stack48 = interfaceinvoke unfinishedProjects.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack48);

        $stack49 = interfaceinvoke schedulableNewProcesses.<java.util.List: java.lang.Object get(int)>(0);

        $stack50 = (org.apache.maven.project.MavenProject) $stack49;

        virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List markAsFinished(org.apache.maven.project.MavenProject)>($stack50);

        $stack53 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getFinishedProjects()>();

        $stack54 = interfaceinvoke $stack53.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack54);

        $stack56 = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.Set getUnfinishedProjects()>();

        $stack57 = interfaceinvoke $stack56.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack57);

        $stack58 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject C>;

        dependenciesC = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getDependencies(org.apache.maven.project.MavenProject)>($stack58);

        $stack61 = interfaceinvoke dependenciesC.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack61);

        $stack62 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject X>;

        dependenciesX = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getDependencies(org.apache.maven.project.MavenProject)>($stack62);

        $stack65 = interfaceinvoke dependenciesX.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack65);

        $stack66 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject C>;

        activeDependenciesC = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getActiveDependencies(org.apache.maven.project.MavenProject)>($stack66);

        $stack69 = interfaceinvoke activeDependenciesC.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack69);

        $stack70 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject X>;

        activeDependenciesX = virtualinvoke $u1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getActiveDependencies(org.apache.maven.project.MavenProject)>($stack70);

        $stack73 = interfaceinvoke activeDependenciesX.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack73);

        return;
    }
}
