public class ConditionalParser extends java.lang.Object
{

    public void <init>()
    {
        ConditionalParser this;

        this := @this: ConditionalParser;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.ooc.frontend.model.Conditional parse(org.ooc.frontend.model.Module, org.ubi.SourceReader, org.ooc.frontend.model.tokens.TokenReader)
    {
        org.ooc.frontend.model.tokens.TokenReader reader;
        int mark;
        java.lang.Object $stack8, $stack10, $stack14, $stack28, $stack34, $stack40, statement;
        org.ooc.frontend.model.tokens.Token startToken, $stack11, $stack15;
        byte $stack9, $stack12, $stack16, $stack17, $stack18, $stack45;
        org.ooc.frontend.model.Module module;
        org.ubi.SourceReader sReader;
        org.ooc.frontend.model.Expression condition;
        org.ooc.frontend.model.NodeList $stack20;
        org.ubi.Locatable $stack29, $stack35, $stack41;
        org.ubi.FileLocation $stack30, $stack36, $stack42;
        java.lang.String $stack31, $stack32, $stack37, $stack38, $stack43, $stack44;
        org.ubi.CompilationFailedError $u0, $u1, $u2;
        org.ooc.frontend.model.While $u3;
        org.ooc.frontend.model.If $u4;
        java.lang.Throwable $r0, $r1, $r2;
        org.ooc.frontend.model.Conditional $r3, $r4;

        module := @parameter0: org.ooc.frontend.model.Module;

        sReader := @parameter1: org.ubi.SourceReader;

        reader := @parameter2: org.ooc.frontend.model.tokens.TokenReader;

        mark = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: int mark()>();

        $stack8 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        startToken = (org.ooc.frontend.model.tokens.Token) $stack8;

        $stack9 = startToken.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack9 == 27 goto label1;

        $stack45 = startToken.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack45 == 24 goto label1;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;

     label1:
        $stack10 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack11 = (org.ooc.frontend.model.tokens.Token) $stack10;

        $stack12 = $stack11.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack12 == 82 goto label2;

        $u0 = new org.ubi.CompilationFailedError;

        $stack40 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack41 = (org.ubi.Locatable) $stack40;

        $stack42 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack41);

        $stack43 = virtualinvoke startToken.<org.ooc.frontend.model.tokens.Token: java.lang.String get(org.ubi.SourceReader)>(sReader);

        $stack44 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack43) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected opening parenthesis after \u0001");

        specialinvoke $u0.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack42, $stack44);

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label2:
        condition = staticinvoke <org.ooc.frontend.parser.ExpressionParser: org.ooc.frontend.model.Expression parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if condition != null goto label3;

        $u1 = new org.ubi.CompilationFailedError;

        $stack34 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object peek()>();

        $stack35 = (org.ubi.Locatable) $stack34;

        $stack36 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack35);

        $stack37 = virtualinvoke startToken.<org.ooc.frontend.model.tokens.Token: java.lang.String get(org.ubi.SourceReader)>(sReader);

        $stack38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected expression as \u0001 condition");

        specialinvoke $u1.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack36, $stack38);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label3:
        $stack14 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack15 = (org.ooc.frontend.model.tokens.Token) $stack14;

        $stack16 = $stack15.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack16 == 83 goto label4;

        $u2 = new org.ubi.CompilationFailedError;

        $stack28 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack29 = (org.ubi.Locatable) $stack28;

        $stack30 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack29);

        $stack31 = virtualinvoke startToken.<org.ooc.frontend.model.tokens.Token: java.lang.String get(org.ubi.SourceReader)>(sReader);

        $stack32 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack31) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected closing parenthesis after expression of an \u0001");

        specialinvoke $u2.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack30, $stack32);

        $r2 = (java.lang.Throwable) $u2;

        throw $r2;

     label4:
        $stack17 = startToken.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack17 != 27 goto label5;

        $u3 = new org.ooc.frontend.model.While;

        specialinvoke $u3.<org.ooc.frontend.model.While: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>(condition, startToken);

        statement = $u3;

        goto label7;

     label5:
        $stack18 = startToken.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack18 != 24 goto label6;

        $u4 = new org.ooc.frontend.model.If;

        specialinvoke $u4.<org.ooc.frontend.model.If: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>(condition, startToken);

        statement = $u4;

        goto label7;

     label6:
        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;

     label7:
        $r3 = (org.ooc.frontend.model.Conditional) statement;

        $stack20 = virtualinvoke $r3.<org.ooc.frontend.model.Conditional: org.ooc.frontend.model.NodeList getBody()>();

        staticinvoke <org.ooc.frontend.parser.ControlStatementFiller: void fill(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader,org.ooc.frontend.model.NodeList)>(module, sReader, reader, $stack20);

        $r4 = (org.ooc.frontend.model.Conditional) statement;

        return $r4;
    }
}
