public class ConsumerModelSourceTransformerTest extends java.lang.Object
{
    private org.apache.maven.internal.aether.ConsumerModelSourceTransformer transformer;

    public void <init>()
    {
        ConsumerModelSourceTransformerTest this;
        org.apache.maven.internal.aether.ConsumerModelSourceTransformer $u0;
        org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest $r0;

        this := @this: ConsumerModelSourceTransformerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.internal.aether.ConsumerModelSourceTransformer;

        specialinvoke $u0.<org.apache.maven.internal.aether.ConsumerModelSourceTransformer: void <init>()>();

        $r0 = (org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest) this;

        $r0.<org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest: org.apache.maven.internal.aether.ConsumerModelSourceTransformer transformer> = $u0;

        return;
    }

    public void transform() throws java.lang.Exception
    {
        java.lang.String[] $stack7, $stack10;
        java.nio.file.Path $stack8, beforePomFile, $stack11, afterPomFile;
        java.nio.file.OpenOption[] $stack13;
        java.io.InputStream expected, result;
        ConsumerModelSourceTransformerTest this;
        org.apache.maven.internal.aether.ConsumerModelSourceTransformer $stack16;
        org.xmlunit.assertj.XmlAssert $stack18;
        org.xmlunit.assertj.CompareAssert $stack19;
        java.lang.Throwable $stack22, $stack23, $stack25, $stack26;
        org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest$NoTransformerContext $u0;
        org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest $r0;
        org.apache.maven.model.building.TransformerContext $r1;

        this := @this: ConsumerModelSourceTransformerTest;

        $stack7 = newarray (java.lang.String)[0];

        $stack8 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("src/test/resources/projects/transform/before.pom", $stack7);

        beforePomFile = interfaceinvoke $stack8.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $stack10 = newarray (java.lang.String)[0];

        $stack11 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("src/test/resources/projects/transform/after.pom", $stack10);

        afterPomFile = interfaceinvoke $stack11.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $stack13 = newarray (java.nio.file.OpenOption)[0];

        expected = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(afterPomFile, $stack13);

     label01:
        $r0 = (org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest) this;

        $stack16 = $r0.<org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest: org.apache.maven.internal.aether.ConsumerModelSourceTransformer transformer>;

        $u0 = new org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest$NoTransformerContext;

        specialinvoke $u0.<org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest$NoTransformerContext: void <init>(org.apache.maven.internal.aether.ConsumerModelSourceTransformerTest$1)>(null);

        $r1 = (org.apache.maven.model.building.TransformerContext) $u0;

        result = virtualinvoke $stack16.<org.apache.maven.internal.aether.ConsumerModelSourceTransformer: java.io.InputStream transform(java.nio.file.Path,org.apache.maven.model.building.TransformerContext)>(beforePomFile, $r1);

     label02:
        $stack18 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(result);

        $stack19 = virtualinvoke $stack18.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>(expected);

        virtualinvoke $stack19.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

     label03:
        if result == null goto label09;

        virtualinvoke result.<java.io.InputStream: void close()>();

        goto label09;

     label04:
        $stack26 := @caughtexception;

        if result == null goto label08;

     label05:
        virtualinvoke result.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $stack25 := @caughtexception;

        virtualinvoke $stack26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack25);

     label08:
        throw $stack26;

     label09:
        if expected == null goto label15;

        virtualinvoke expected.<java.io.InputStream: void close()>();

        goto label15;

     label10:
        $stack23 := @caughtexception;

        if expected == null goto label14;

     label11:
        virtualinvoke expected.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $stack22 := @caughtexception;

        virtualinvoke $stack23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack22);

     label14:
        throw $stack23;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }
}
