public class ConsumerPomXMLFilterTest extends org.apache.maven.model.transform.AbstractXMLFilterTests
{

    public void <init>()
    {
        ConsumerPomXMLFilterTest this;

        this := @this: ConsumerPomXMLFilterTest;

        specialinvoke this.<org.apache.maven.model.transform.AbstractXMLFilterTests: void <init>()>();

        return;
    }

    protected java.lang.String omitXmlDeclaration()
    {
        ConsumerPomXMLFilterTest this;

        this := @this: ConsumerPomXMLFilterTest;

        return "no";
    }

    protected org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter(java.util.function.Consumer) throws org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException, javax.xml.transform.TransformerConfigurationException
    {
        ConsumerPomXMLFilterTest this;
        java.util.function.Consumer lexicalHandlerConsumer;
        java.lang.String[] $stack6;
        java.nio.file.Path $stack7;
        org.apache.maven.model.transform.RawToConsumerPomXMLFilter filter;
        org.apache.maven.model.transform.ConsumerPomXMLFilterTest$1 $u0;
        org.apache.maven.model.transform.RawToConsumerPomXMLFilterFactory $u1;
        org.apache.maven.model.transform.ConsumerPomXMLFilterTest $r0;
        org.apache.maven.model.transform.BuildToRawPomXMLFilterFactory $r1;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r2;

        this := @this: ConsumerPomXMLFilterTest;

        lexicalHandlerConsumer := @parameter0: java.util.function.Consumer;

        $u0 = new org.apache.maven.model.transform.ConsumerPomXMLFilterTest$1;

        $r0 = (org.apache.maven.model.transform.ConsumerPomXMLFilterTest) this;

        specialinvoke $u0.<org.apache.maven.model.transform.ConsumerPomXMLFilterTest$1: void <init>(org.apache.maven.model.transform.ConsumerPomXMLFilterTest,java.util.function.Consumer,boolean)>($r0, lexicalHandlerConsumer, 1);

        $u1 = new org.apache.maven.model.transform.RawToConsumerPomXMLFilterFactory;

        $r1 = (org.apache.maven.model.transform.BuildToRawPomXMLFilterFactory) $u0;

        specialinvoke $u1.<org.apache.maven.model.transform.RawToConsumerPomXMLFilterFactory: void <init>(org.apache.maven.model.transform.BuildToRawPomXMLFilterFactory)>($r1);

        $stack6 = newarray (java.lang.String)[0];

        $stack7 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("pom.xml", $stack6);

        filter = virtualinvoke $u1.<org.apache.maven.model.transform.RawToConsumerPomXMLFilterFactory: org.apache.maven.model.transform.RawToConsumerPomXMLFilter get(java.nio.file.Path)>($stack7);

        virtualinvoke filter.<org.apache.maven.model.transform.RawToConsumerPomXMLFilter: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespaces", 1);

        $r2 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) filter;

        return $r2;
    }

    public void aggregatorWithParent() throws java.lang.Exception
    {
        ConsumerPomXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6, $stack7;
        org.apache.maven.model.transform.ConsumerPomXMLFilterTest $r0;

        this := @this: ConsumerPomXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ConsumerPomXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ConsumerPomXMLFilterTest: java.lang.String transform(java.lang.String)>("<project>\n  <parent>\n    <groupId>GROUPID</groupId>\n    <artifactId>PARENT</artifactId>\n    <version>VERSION</version>\n    <relativePath>../pom.xml</relativePath>\n  </parent>\n  <artifactId>PROJECT</artifactId>\n  <modules>\n    <module>ab</module>\n    <module>../cd</module>\n  </modules>\n</project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project>\n  <parent>\n    <groupId>GROUPID</groupId>\n    <artifactId>PARENT</artifactId>\n    <version>VERSION</version>\n  </parent>\n  <artifactId>PROJECT</artifactId>\n</project>");

        $stack7 = virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert ignoreWhitespace()>();

        virtualinvoke $stack7.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void aggregatorWithCliFriendlyVersion() throws java.lang.Exception
    {
        ConsumerPomXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6, $stack7;
        org.apache.maven.model.transform.ConsumerPomXMLFilterTest $r0;

        this := @this: ConsumerPomXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ConsumerPomXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ConsumerPomXMLFilterTest: java.lang.String transform(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                           http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.sonatype.mavenbook.multispring</groupId>\n  <artifactId>parent</artifactId>\n  <version>0.9-${changelist}-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>Multi-Spring Chapter Parent Project</name>\n  <modules>\n    <module>simple-parent</module>\n  </modules>\n  \n  <pluginRepositories>\n    <pluginRepository>\n      <id>apache.snapshots</id>\n      <url>http://repository.apache.org/snapshots/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                           http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.sonatype.mavenbook.multispring</groupId>\n  <artifactId>parent</artifactId>\n  <version>0.9-CL-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>Multi-Spring Chapter Parent Project</name>\n  \n  <pluginRepositories>\n    <pluginRepository>\n      <id>apache.snapshots</id>\n      <url>http://repository.apache.org/snapshots/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</project>");

        $stack7 = virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert ignoreWhitespace()>();

        virtualinvoke $stack7.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void licenseHeader() throws java.lang.Exception
    {
        ConsumerPomXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ConsumerPomXMLFilterTest $r0;

        this := @this: ConsumerPomXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ConsumerPomXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ConsumerPomXMLFilterTest: java.lang.String transform(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache.maven</groupId>\n    <artifactId>maven</artifactId>\n    <version>4.0.0-SNAPSHOT</version>\n  </parent>\n  <artifactId>maven-xml</artifactId>\n  <name>Maven XML</name>\n  \n  <properties>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>animal-sniffer-maven-plugin</artifactId>\n        <configuration>\n          <signature>\n            <groupId>org.codehaus.mojo.signature</groupId>\n            <artifactId>java18</artifactId>\n            <version>1.0</version>\n          </signature>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  \n  <dependencies>\n    <dependency>\n      <groupId>javax.inject</groupId>\n      <artifactId>javax.inject</artifactId>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>org.xmlunit</groupId>\n      <artifactId>xmlunit-assertj</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache.maven</groupId>\n    <artifactId>maven</artifactId>\n    <version>4.0.0-SNAPSHOT</version>\n  </parent>\n  <artifactId>maven-xml</artifactId>\n  <name>Maven XML</name>\n  \n  <properties>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>animal-sniffer-maven-plugin</artifactId>\n        <configuration>\n          <signature>\n            <groupId>org.codehaus.mojo.signature</groupId>\n            <artifactId>java18</artifactId>\n            <version>1.0</version>\n          </signature>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  \n  <dependencies>\n    <dependency>\n      <groupId>javax.inject</groupId>\n      <artifactId>javax.inject</artifactId>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>org.xmlunit</groupId>\n      <artifactId>xmlunit-assertj</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void lexicalHandler() throws java.lang.Exception
    {
        ConsumerPomXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ConsumerPomXMLFilterTest $r0;

        this := @this: ConsumerPomXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ConsumerPomXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ConsumerPomXMLFilterTest: java.lang.String transform(java.lang.String)>("<project><!--before--><modules><!--pre-in--><module><!--in-->ab</module><module>../cd</module><!--post-in--></modules><!--after--></project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project><!--before--><!--after--></project>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }
}
