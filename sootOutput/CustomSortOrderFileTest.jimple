class CustomSortOrderFileTest extends java.lang.Object
{

    void <init>()
    {
        CustomSortOrderFileTest this;

        this := @this: CustomSortOrderFileTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void compareDefaultSortOrderFileToString() throws java.io.IOException, org.jdom.JDOMException
    {
        java.nio.charset.Charset $stack3;
        java.lang.String expected, $stack5;
        CustomSortOrderFileTest this;
        java.io.FileInputStream $u0;
        sortpom.wrapper.CustomSortOrderFileTest $r0;

        this := @this: CustomSortOrderFileTest;

        $u0 = new java.io.FileInputStream;

        specialinvoke $u0.<java.io.FileInputStream: void <init>(java.lang.String)>("src/test/resources/sortOrderFiles/with_newline_tagsToString.txt");

        $stack3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        expected = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>($u0, $stack3);

        $r0 = (sortpom.wrapper.CustomSortOrderFileTest) this;

        $stack5 = specialinvoke $r0.<sortpom.wrapper.CustomSortOrderFileTest: java.lang.String getToStringOnCustomSortOrderFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expected, $stack5);

        return;
    }

    private java.lang.String getToStringOnCustomSortOrderFile() throws java.io.IOException, org.jdom.JDOMException
    {
        sortpom.parameter.PluginParameters$Builder $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        sortpom.parameter.PluginParameters pluginParameters;
        org.jdom.Document documentFromDefaultSortOrderFile;
        org.jdom.Element $stack19, $stack22;
        sortpom.wrapper.content.Wrapper $stack20, $stack23;
        java.lang.String $stack24;
        CustomSortOrderFileTest this;
        sortpom.util.FileUtil $u0;
        sortpom.wrapper.WrapperFactoryImpl $u1;
        sortpom.wrapper.operation.HierarchyRootWrapper $u2, $u3;
        org.jdom.Content $r0, $r1;
        sortpom.wrapper.operation.WrapperFactory $r2;

        this := @this: CustomSortOrderFileTest;

        $stack6 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack7 = virtualinvoke $stack6.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setPomFile(java.io.File)>(null);

        $stack8 = virtualinvoke $stack7.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFileOutput(boolean,java.lang.String,java.lang.String,boolean)>(0, ".bak", null, 0);

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $stack10 = virtualinvoke $stack9.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\r\n", 1, 1, 1);

        $stack11 = virtualinvoke $stack10.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(2, 0, 0);

        $stack12 = virtualinvoke $stack11.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortOrder(java.lang.String,java.lang.String)>("src/test/resources/sortOrderFiles/with_newline_tags.xml", null);

        $stack13 = virtualinvoke $stack12.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("scope,groupId,artifactId", "groupId,artifactId", "groupId,artifactId", 1, 1, 1);

        pluginParameters = virtualinvoke $stack13.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $u0 = new sortpom.util.FileUtil;

        specialinvoke $u0.<sortpom.util.FileUtil: void <init>()>();

        virtualinvoke $u0.<sortpom.util.FileUtil: void setup(sortpom.parameter.PluginParameters)>(pluginParameters);

        $u1 = new sortpom.wrapper.WrapperFactoryImpl;

        specialinvoke $u1.<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>($u0);

        documentFromDefaultSortOrderFile = virtualinvoke $u1.<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>();

        $u2 = new sortpom.wrapper.operation.HierarchyRootWrapper;

        $stack19 = virtualinvoke documentFromDefaultSortOrderFile.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r0 = (org.jdom.Content) $stack19;

        $stack20 = virtualinvoke $u1.<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>($r0);

        specialinvoke $u2.<sortpom.wrapper.operation.HierarchyRootWrapper: void <init>(sortpom.wrapper.content.Wrapper)>($stack20);

        $u3 = new sortpom.wrapper.operation.HierarchyRootWrapper;

        $stack22 = virtualinvoke documentFromDefaultSortOrderFile.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r1 = (org.jdom.Content) $stack22;

        $stack23 = virtualinvoke $u1.<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>($r1);

        specialinvoke $u3.<sortpom.wrapper.operation.HierarchyRootWrapper: void <init>(sortpom.wrapper.content.Wrapper)>($stack23);

        $r2 = (sortpom.wrapper.operation.WrapperFactory) $u1;

        virtualinvoke $u3.<sortpom.wrapper.operation.HierarchyRootWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>($r2);

        $stack24 = virtualinvoke $u3.<sortpom.wrapper.operation.HierarchyRootWrapper: java.lang.String toString()>();

        return $stack24;
    }
}
