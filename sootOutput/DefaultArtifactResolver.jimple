public class DefaultArtifactResolver extends java.lang.Object implements org.apache.maven.artifact.resolver.ArtifactResolver, org.codehaus.plexus.personality.plexus.lifecycle.phase.Disposable
{
    private org.codehaus.plexus.logging.Logger logger;
    protected org.apache.maven.artifact.factory.ArtifactFactory artifactFactory;
    private org.apache.maven.artifact.resolver.ArtifactCollector artifactCollector;
    private org.apache.maven.artifact.resolver.ResolutionErrorHandler resolutionErrorHandler;
    private org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
    private org.codehaus.plexus.PlexusContainer container;
    private org.apache.maven.plugin.LegacySupport legacySupport;
    private org.eclipse.aether.RepositorySystem repoSystem;
    private final java.util.concurrent.Executor executor;

    public void <init>()
    {
        DefaultArtifactResolver this;
        java.lang.Integer $stack2;
        int threads;
        java.util.concurrent.TimeUnit $stack7;
        java.util.concurrent.Executor $stack9;
        java.util.concurrent.LinkedBlockingQueue $u0;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver$DaemonThreadCreator $u1;
        java.util.concurrent.ThreadPoolExecutor $u2;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r2;
        java.util.concurrent.ThreadFactory $r1;

        this := @this: DefaultArtifactResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("maven.artifact.threads", 5);

        threads = virtualinvoke $stack2.<java.lang.Integer: int intValue()>();

        if threads > 1 goto label1;

        $stack9 = staticinvoke <DefaultArtifactResolver$run__309: java.util.concurrent.Executor bootstrap$()>();

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: java.util.concurrent.Executor executor> = $stack9;

        goto label2;

     label1:
        $u2 = new java.util.concurrent.ThreadPoolExecutor;

        $stack7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $u0 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $u0.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $u1 = new org.apache.maven.artifact.resolver.DefaultArtifactResolver$DaemonThreadCreator;

        specialinvoke $u1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver$DaemonThreadCreator: void <init>()>();

        $r1 = (java.util.concurrent.ThreadFactory) $u1;

        specialinvoke $u2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(threads, threads, 3L, $stack7, $u0, $r1);

        $r2 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $r2.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: java.util.concurrent.Executor executor> = $u2;

     label2:
        return;
    }

    private org.eclipse.aether.RepositorySystemSession getSession(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        DefaultArtifactResolver this;
        org.apache.maven.plugin.LegacySupport $stack2;
        org.eclipse.aether.RepositorySystemSession $stack3, $stack5;
        org.eclipse.aether.RepositorySystem $stack4;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1;

        this := @this: DefaultArtifactResolver;

        localRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.plugin.LegacySupport legacySupport>;

        $stack3 = interfaceinvoke $stack2.<org.apache.maven.plugin.LegacySupport: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack4 = $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.eclipse.aether.RepositorySystem repoSystem>;

        $stack5 = staticinvoke <org.apache.maven.artifact.repository.LegacyLocalRepositoryManager: org.eclipse.aether.RepositorySystemSession overlay(org.apache.maven.artifact.repository.ArtifactRepository,org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RepositorySystem)>(localRepository, $stack3, $stack4);

        return $stack5;
    }

    private void injectSession1(org.apache.maven.artifact.repository.RepositoryRequest, org.apache.maven.execution.MavenSession)
    {
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.artifact.repository.RepositoryRequest request;
        boolean $stack3, $stack6;
        org.apache.maven.execution.MavenExecutionRequest $stack5;
        DefaultArtifactResolver this;

        this := @this: DefaultArtifactResolver;

        request := @parameter0: org.apache.maven.artifact.repository.RepositoryRequest;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        if session == null goto label1;

        $stack3 = virtualinvoke session.<org.apache.maven.execution.MavenSession: boolean isOffline()>();

        interfaceinvoke request.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setOffline(boolean)>($stack3);

        $stack5 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.execution.MavenExecutionRequest: boolean isUpdateSnapshots()>();

        interfaceinvoke request.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setForceUpdate(boolean)>($stack6);

     label1:
        return;
    }

    private void injectSession2(org.apache.maven.artifact.resolver.ArtifactResolutionRequest, org.apache.maven.execution.MavenSession)
    {
        DefaultArtifactResolver this;
        org.apache.maven.artifact.resolver.ArtifactResolutionRequest request;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.execution.MavenExecutionRequest $stack3, $stack6, $stack9;
        java.util.List $stack4, $stack7, $stack10;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;
        org.apache.maven.artifact.repository.RepositoryRequest $r1;

        this := @this: DefaultArtifactResolver;

        request := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $r1 = (org.apache.maven.artifact.repository.RepositoryRequest) request;

        specialinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void injectSession1(org.apache.maven.artifact.repository.RepositoryRequest,org.apache.maven.execution.MavenSession)>($r1, session);

        if session == null goto label1;

        $stack3 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getServers()>();

        virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setServers(java.util.List)>($stack4);

        $stack6 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack7 = interfaceinvoke $stack6.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getMirrors()>();

        virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setMirrors(java.util.List)>($stack7);

        $stack9 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack10 = interfaceinvoke $stack9.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getProxies()>();

        virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setProxies(java.util.List)>($stack10);

     label1:
        return;
    }

    public void resolve(org.apache.maven.artifact.Artifact, java.util.List, org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.wagon.events.TransferListener) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        org.eclipse.aether.RepositorySystemSession $stack5;
        org.apache.maven.wagon.events.TransferListener resolutionListener;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1;

        this := @this: DefaultArtifactResolver;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter1: java.util.List;

        localRepository := @parameter2: org.apache.maven.artifact.repository.ArtifactRepository;

        resolutionListener := @parameter3: org.apache.maven.wagon.events.TransferListener;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack5 = specialinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.eclipse.aether.RepositorySystemSession getSession(org.apache.maven.artifact.repository.ArtifactRepository)>(localRepository);

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        specialinvoke $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.eclipse.aether.RepositorySystemSession)>(artifact, remoteRepositories, $stack5);

        return;
    }

    public void resolveAlways(org.apache.maven.artifact.Artifact, java.util.List, org.apache.maven.artifact.repository.ArtifactRepository) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        org.eclipse.aether.RepositorySystemSession $stack4;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1;

        this := @this: DefaultArtifactResolver;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter1: java.util.List;

        localRepository := @parameter2: org.apache.maven.artifact.repository.ArtifactRepository;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.eclipse.aether.RepositorySystemSession getSession(org.apache.maven.artifact.repository.ArtifactRepository)>(localRepository);

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        specialinvoke $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.eclipse.aether.RepositorySystemSession)>(artifact, remoteRepositories, $stack4);

        return;
    }

    private void resolve(org.apache.maven.artifact.Artifact, java.util.List, org.eclipse.aether.RepositorySystemSession) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack8, $stack9, $stack26, $stack31, $stack35, $stack36, $stack48, $stack55, $stack61, $stack66, $stack69, $stack71, $stack76, $stack78, path;
        boolean $stack10, $stack11, $stack29, $stack33, $stack40, $stack41, $stack74;
        org.eclipse.aether.artifact.Artifact $stack13, $stack18, $stack25, $stack27;
        java.util.List remoteRepositories, $stack15;
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.repository.LocalRepository $stack21;
        java.io.File $stack22, $stack28, systemFile, $u7;
        DefaultArtifactResolver this;
        org.eclipse.aether.RepositorySystem $stack23;
        java.util.regex.Pattern $stack30;
        int $stack37;
        java.lang.StringBuilder $stack44, $stack45, $stack46, $stack47, $stack51, $stack52, $stack53, $stack54, $stack58, $stack59, $stack60, $stack65, $stack67, $stack68, $stack70, $u0, $u2, $u4, $u12;
        java.lang.NumberFormatException $stack62;
        org.codehaus.plexus.logging.Logger $stack64;
        java.lang.Throwable $stack72, $stack73, $r0, $r1, $r2, $r6, $r8;
        org.eclipse.aether.repository.LocalRepositoryManager lrm;
        org.eclipse.aether.resolution.ArtifactResult systemFile#5;
        java.util.regex.Matcher artifactRequest#7;
        org.apache.maven.artifact.resolver.ArtifactNotFoundException $u1, $u3, $u5, $u8;
        org.eclipse.aether.resolution.ArtifactRequest $u6;
        org.apache.maven.artifact.resolver.ArtifactResolutionException $u9;
        org.apache.maven.artifact.repository.metadata.Snapshot $u10;
        org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata $u11;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r3, $r10;
        org.eclipse.aether.resolution.ArtifactResolutionException $r4, $r5, $r7;
        org.apache.maven.artifact.metadata.ArtifactMetadata $r9;

        this := @this: DefaultArtifactResolver;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter1: java.util.List;

        session := @parameter2: org.eclipse.aether.RepositorySystemSession;

        if artifact != null goto label01;

        return;

     label01:
        $stack8 = "system";

        $stack9 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack10 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>($stack9);

        if $stack10 == 0 goto label05;

        systemFile = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        if systemFile != null goto label02;

        $u1 = new org.apache.maven.artifact.resolver.ArtifactNotFoundException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack58 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System artifact: ");

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(artifact);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no file attached");

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.apache.maven.artifact.resolver.ArtifactNotFoundException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact)>($stack61, artifact);

        $r0 = (java.lang.Throwable) $u1;

        throw $r0;

     label02:
        $stack40 = virtualinvoke systemFile.<java.io.File: boolean exists()>();

        if $stack40 != 0 goto label03;

        $u3 = new org.apache.maven.artifact.resolver.ArtifactNotFoundException;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack51 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System artifact: ");

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(artifact);

        $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in path: ");

        $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(systemFile);

        $stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<org.apache.maven.artifact.resolver.ArtifactNotFoundException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact)>($stack55, artifact);

        $r1 = (java.lang.Throwable) $u3;

        throw $r1;

     label03:
        $stack41 = virtualinvoke systemFile.<java.io.File: boolean isFile()>();

        if $stack41 != 0 goto label04;

        $u5 = new org.apache.maven.artifact.resolver.ArtifactNotFoundException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System artifact: ");

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(artifact);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a file: ");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(systemFile);

        $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u5.<org.apache.maven.artifact.resolver.ArtifactNotFoundException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact)>($stack48, artifact);

        $r2 = (java.lang.Throwable) $u5;

        throw $r2;

     label04:
        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setResolved(boolean)>(1);

        return;

     label05:
        $stack11 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isResolved()>();

        if $stack11 != 0 goto label14;

     label06:
        $u6 = new org.eclipse.aether.resolution.ArtifactRequest;

        specialinvoke $u6.<org.eclipse.aether.resolution.ArtifactRequest: void <init>()>();

        $stack13 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        virtualinvoke $u6.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($stack13);

        $stack15 = staticinvoke <org.apache.maven.RepositoryUtils: java.util.List toRepos(java.util.List)>(remoteRepositories);

        virtualinvoke $u6.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setRepositories(java.util.List)>($stack15);

        lrm = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.LocalRepositoryManager getLocalRepositoryManager()>();

        $stack18 = virtualinvoke $u6.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.artifact.Artifact getArtifact()>();

        path = interfaceinvoke lrm.<org.eclipse.aether.repository.LocalRepositoryManager: java.lang.String getPathForLocalArtifact(org.eclipse.aether.artifact.Artifact)>($stack18);

        $u7 = new java.io.File;

        $stack21 = interfaceinvoke lrm.<org.eclipse.aether.repository.LocalRepositoryManager: org.eclipse.aether.repository.LocalRepository getRepository()>();

        $stack22 = virtualinvoke $stack21.<org.eclipse.aether.repository.LocalRepository: java.io.File getBasedir()>();

        specialinvoke $u7.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack22, path);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($u7);

        $r3 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack23 = $r3.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.eclipse.aether.RepositorySystem repoSystem>;

        systemFile#5 = interfaceinvoke $stack23.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.resolution.ArtifactResult resolveArtifact(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactRequest)>(session, $u6);

     label07:
        goto label10;

     label08:
        $stack72 := @caughtexception;

        $r4 = (org.eclipse.aether.resolution.ArtifactResolutionException) $stack72;

        $stack73 = virtualinvoke $r4.<org.eclipse.aether.resolution.ArtifactResolutionException: java.lang.Throwable getCause()>();

        $stack74 = $stack73 instanceof org.eclipse.aether.transfer.ArtifactNotFoundException;

        if $stack74 == 0 goto label09;

        $u8 = new org.apache.maven.artifact.resolver.ArtifactNotFoundException;

        $r5 = (org.eclipse.aether.resolution.ArtifactResolutionException) $stack72;

        $stack78 = virtualinvoke $r5.<org.eclipse.aether.resolution.ArtifactResolutionException: java.lang.String getMessage()>();

        specialinvoke $u8.<org.apache.maven.artifact.resolver.ArtifactNotFoundException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact,java.util.List,java.lang.Throwable)>($stack78, artifact, remoteRepositories, $stack72);

        $r6 = (java.lang.Throwable) $u8;

        throw $r6;

     label09:
        $u9 = new org.apache.maven.artifact.resolver.ArtifactResolutionException;

        $r7 = (org.eclipse.aether.resolution.ArtifactResolutionException) $stack72;

        $stack76 = virtualinvoke $r7.<org.eclipse.aether.resolution.ArtifactResolutionException: java.lang.String getMessage()>();

        specialinvoke $u9.<org.apache.maven.artifact.resolver.ArtifactResolutionException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact,java.util.List,java.lang.Throwable)>($stack76, artifact, remoteRepositories, $stack72);

        $r8 = (java.lang.Throwable) $u9;

        throw $r8;

     label10:
        $stack25 = virtualinvoke systemFile#5.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack26 = interfaceinvoke $stack25.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void selectVersion(java.lang.String)>($stack26);

        $stack27 = virtualinvoke systemFile#5.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack28 = interfaceinvoke $stack27.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($stack28);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setResolved(boolean)>(1);

        $stack29 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isSnapshot()>();

        if $stack29 == 0 goto label14;

        $stack30 = <org.apache.maven.artifact.Artifact: java.util.regex.Pattern VERSION_FILE_PATTERN>;

        $stack31 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        artifactRequest#7 = virtualinvoke $stack30.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack31);

        $stack33 = virtualinvoke artifactRequest#7.<java.util.regex.Matcher: boolean matches()>();

        if $stack33 == 0 goto label14;

        $u10 = new org.apache.maven.artifact.repository.metadata.Snapshot;

        specialinvoke $u10.<org.apache.maven.artifact.repository.metadata.Snapshot: void <init>()>();

        $stack35 = virtualinvoke artifactRequest#7.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        virtualinvoke $u10.<org.apache.maven.artifact.repository.metadata.Snapshot: void setTimestamp(java.lang.String)>($stack35);

     label11:
        $stack36 = virtualinvoke artifactRequest#7.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $stack37 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack36);

        virtualinvoke $u10.<org.apache.maven.artifact.repository.metadata.Snapshot: void setBuildNumber(int)>($stack37);

        $u11 = new org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;

        specialinvoke $u11.<org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata: void <init>(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.metadata.Snapshot)>(artifact, $u10);

        $r9 = (org.apache.maven.artifact.metadata.ArtifactMetadata) $u11;

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void addMetadata(org.apache.maven.artifact.metadata.ArtifactMetadata)>($r9);

     label12:
        goto label14;

     label13:
        $stack62 := @caughtexception;

        $r10 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack64 = $r10.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.codehaus.plexus.logging.Logger logger>;

        $u12 = new java.lang.StringBuilder;

        specialinvoke $u12.<java.lang.StringBuilder: void <init>()>();

        $stack65 = virtualinvoke $u12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid artifact version ");

        $stack66 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack66);

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack69 = virtualinvoke $stack62.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $stack70 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack69);

        $stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack64.<org.codehaus.plexus.logging.Logger: void warn(java.lang.String)>($stack71);

     label14:
        return;

        catch org.eclipse.aether.resolution.ArtifactResolutionException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.ArtifactRepository, java.util.List, org.apache.maven.artifact.metadata.ArtifactMetadataSource, org.apache.maven.artifact.resolver.filter.ArtifactFilter) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        java.util.Set artifacts;
        org.apache.maven.artifact.Artifact originatingArtifact;
        java.util.Map $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack8;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        localRepository := @parameter2: org.apache.maven.artifact.repository.ArtifactRepository;

        remoteRepositories := @parameter3: java.util.List;

        source := @parameter4: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        filter := @parameter5: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        $stack7 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack8 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter)>(artifacts, originatingArtifact, $stack7, localRepository, remoteRepositories, source, filter);

        return $stack8;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, java.util.Map, org.apache.maven.artifact.repository.ArtifactRepository, java.util.List, org.apache.maven.artifact.metadata.ArtifactMetadataSource) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        java.util.Set artifacts;
        org.apache.maven.artifact.Artifact originatingArtifact;
        java.util.Map managedVersions;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack7;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        managedVersions := @parameter2: java.util.Map;

        localRepository := @parameter3: org.apache.maven.artifact.repository.ArtifactRepository;

        remoteRepositories := @parameter4: java.util.List;

        source := @parameter5: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack7 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter)>(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, null);

        return $stack7;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, java.util.Map, org.apache.maven.artifact.repository.ArtifactRepository, java.util.List, org.apache.maven.artifact.metadata.ArtifactMetadataSource, org.apache.maven.artifact.resolver.filter.ArtifactFilter) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        java.util.Set artifacts;
        org.apache.maven.artifact.Artifact originatingArtifact;
        java.util.Map managedVersions;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack8;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        managedVersions := @parameter2: java.util.Map;

        localRepository := @parameter3: org.apache.maven.artifact.repository.ArtifactRepository;

        remoteRepositories := @parameter4: java.util.List;

        source := @parameter5: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        filter := @parameter6: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack8 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter,java.util.List)>(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, null);

        return $stack8;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, java.util.List, org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.artifact.metadata.ArtifactMetadataSource) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        java.util.Set artifacts;
        org.apache.maven.artifact.Artifact originatingArtifact;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack6;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter2: java.util.List;

        localRepository := @parameter3: org.apache.maven.artifact.repository.ArtifactRepository;

        source := @parameter4: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack6 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter)>(artifacts, originatingArtifact, localRepository, remoteRepositories, source, null);

        return $stack6;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, java.util.List, org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.artifact.metadata.ArtifactMetadataSource, java.util.List) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        java.util.Set artifacts;
        org.apache.maven.artifact.Artifact originatingArtifact;
        java.util.Map $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories, listeners;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack8;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter2: java.util.List;

        localRepository := @parameter3: org.apache.maven.artifact.repository.ArtifactRepository;

        source := @parameter4: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        listeners := @parameter5: java.util.List;

        $stack7 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack8 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter,java.util.List)>(artifacts, originatingArtifact, $stack7, localRepository, remoteRepositories, source, null, listeners);

        return $stack8;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, java.util.Map, org.apache.maven.artifact.repository.ArtifactRepository, java.util.List, org.apache.maven.artifact.metadata.ArtifactMetadataSource, org.apache.maven.artifact.resolver.filter.ArtifactFilter, java.util.List) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        java.util.Set artifacts;
        org.apache.maven.artifact.Artifact originatingArtifact;
        java.util.Map managedVersions;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories, listeners;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack9;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        managedVersions := @parameter2: java.util.Map;

        localRepository := @parameter3: org.apache.maven.artifact.repository.ArtifactRepository;

        remoteRepositories := @parameter4: java.util.List;

        source := @parameter5: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        filter := @parameter6: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        listeners := @parameter7: java.util.List;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack9 = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter,java.util.List,java.util.List)>(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners, null);

        return $stack9;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveTransitively(java.util.Set, org.apache.maven.artifact.Artifact, java.util.Map, org.apache.maven.artifact.repository.ArtifactRepository, java.util.List, org.apache.maven.artifact.metadata.ArtifactMetadataSource, org.apache.maven.artifact.resolver.filter.ArtifactFilter, java.util.List, java.util.List) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        org.apache.maven.artifact.Artifact originatingArtifact;
        org.apache.maven.artifact.resolver.ArtifactResolutionRequest $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, request, $u0;
        java.util.Set artifacts;
        java.util.Map managedVersions;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        java.util.List remoteRepositories, listeners, conflictResolvers;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        DefaultArtifactResolver this;
        org.apache.maven.plugin.LegacySupport $stack20;
        org.apache.maven.execution.MavenSession $stack21;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $stack22;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource source;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1, $r2;

        this := @this: DefaultArtifactResolver;

        artifacts := @parameter0: java.util.Set;

        originatingArtifact := @parameter1: org.apache.maven.artifact.Artifact;

        managedVersions := @parameter2: java.util.Map;

        localRepository := @parameter3: org.apache.maven.artifact.repository.ArtifactRepository;

        remoteRepositories := @parameter4: java.util.List;

        source := @parameter5: org.apache.maven.artifact.metadata.ArtifactMetadataSource;

        filter := @parameter6: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        listeners := @parameter7: java.util.List;

        conflictResolvers := @parameter8: java.util.List;

        $u0 = new org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        specialinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: void <init>()>();

        $stack12 = virtualinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setArtifact(org.apache.maven.artifact.Artifact)>(originatingArtifact);

        $stack13 = virtualinvoke $stack12.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setResolveRoot(boolean)>(0);

        $stack14 = virtualinvoke $stack13.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setArtifactDependencies(java.util.Set)>(artifacts);

        $stack15 = virtualinvoke $stack14.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setManagedVersionMap(java.util.Map)>(managedVersions);

        $stack16 = virtualinvoke $stack15.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>(localRepository);

        $stack17 = virtualinvoke $stack16.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setRemoteRepositories(java.util.List)>(remoteRepositories);

        $stack18 = virtualinvoke $stack17.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setCollectionFilter(org.apache.maven.artifact.resolver.filter.ArtifactFilter)>(filter);

        request = virtualinvoke $stack18.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setListeners(java.util.List)>(listeners);

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack20 = $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.plugin.LegacySupport legacySupport>;

        $stack21 = interfaceinvoke $stack20.<org.apache.maven.plugin.LegacySupport: org.apache.maven.execution.MavenSession getSession()>();

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        specialinvoke $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void injectSession2(org.apache.maven.artifact.resolver.ArtifactResolutionRequest,org.apache.maven.execution.MavenSession)>(request, $stack21);

        $r2 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack22 = virtualinvoke $r2.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveWithExceptions(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>(request);

        return $stack22;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolveWithExceptions(org.apache.maven.artifact.resolver.ArtifactResolutionRequest) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        org.apache.maven.artifact.resolver.ArtifactResolutionRequest request;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult result;
        org.apache.maven.artifact.resolver.ResolutionErrorHandler $stack4;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1;

        this := @this: DefaultArtifactResolver;

        request := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        result = virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolve(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>(request);

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack4 = $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ResolutionErrorHandler resolutionErrorHandler>;

        interfaceinvoke $stack4.<org.apache.maven.artifact.resolver.ResolutionErrorHandler: void throwErrors(org.apache.maven.artifact.resolver.ArtifactResolutionRequest,org.apache.maven.artifact.resolver.ArtifactResolutionResult)>(request, result);

        return result;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolve(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)
    {
        org.apache.maven.artifact.resolver.ArtifactResolutionRequest request, e#17, $u8;
        org.apache.maven.artifact.Artifact rootArtifact, artifact, $stack159, mergedArtifacts#39;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter collectionFilter, resolutionFilter;
        DefaultArtifactResolver this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack25;
        org.eclipse.aether.RepositorySystemSession session;
        org.apache.maven.artifact.metadata.ArtifactMetadataSource $stack27, $stack34, $stack79, $stack141;
        boolean $stack30, $stack31, $stack33, $stack37, $stack39, $stack43, $stack58, $stack66, $stack92, $stack98, $stack112, $stack129, $stack29, $stack119, $stack45;
        org.apache.maven.artifact.resolver.ArtifactCollector $stack35;
        java.util.Set $stack44, $stack48, $stack54, $stack56, artifacts, directArtifacts;
        java.lang.Thread $stack51;
        int $stack55;
        java.lang.Object $stack60, $stack110, $stack140;
        java.util.concurrent.Executor $stack63;
        java.util.List $stack64, $stack83, $stack85, $stack87, $stack89, $stack124, $stack156, listeners;
        java.util.Iterator l16, directArtifacts#37;
        java.util.Collection $stack100;
        java.lang.String conflictId, $stack150, $stack153, $stack155;
        org.codehaus.plexus.logging.Logger $stack128, $stack131, $stack135, $stack38;
        org.codehaus.plexus.PlexusContainer $stack139;
        java.lang.InterruptedException $stack143;
        java.lang.Throwable $stack146, $stack158, $stack161, $stack163;
        java.lang.StringBuilder $stack149, $stack151, $stack152, $stack154, $u9;
        java.util.Map managedVersions;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult result#10, $u3;
        org.apache.maven.artifact.metadata.ResolutionGroup resolutionGroup;
        java.lang.ClassLoader metadataRequest#35;
        org.apache.maven.artifact.resolver.ResolutionNode allArtifacts#38;
        java.util.ArrayList $u0, $u5;
        org.apache.maven.artifact.resolver.DebugResolutionListener $u1;
        org.apache.maven.artifact.resolver.WarningResolutionListener $u2;
        org.apache.maven.repository.legacy.metadata.DefaultMetadataResolutionRequest $u4;
        java.util.LinkedHashMap $u6;
        java.util.LinkedHashSet $u7, $u14;
        org.apache.maven.artifact.resolver.ArtifactResolutionException $u10, $u13, $r8;
        java.util.concurrent.CountDownLatch $u11;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver$ResolveTask $u12;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r11, $r16, $r17, $r18, $r19, $r20;
        org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest $r9, $r10, $r12, $r15;
        org.apache.maven.artifact.repository.RepositoryRequest $r13;
        org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException $r14;
        java.lang.Runnable $r21;

        this := @this: DefaultArtifactResolver;

        request := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        rootArtifact = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        artifacts = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.Set getArtifactDependencies()>();

        managedVersions = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.Map getManagedVersionMap()>();

        listeners = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getListeners()>();

        collectionFilter = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.filter.ArtifactFilter getCollectionFilter()>();

        resolutionFilter = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.filter.ArtifactFilter getResolutionFilter()>();

        $stack25 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        session = specialinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.eclipse.aether.RepositorySystemSession getSession(org.apache.maven.artifact.repository.ArtifactRepository)>($stack25);

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack27 = $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.metadata.ArtifactMetadataSource source>;

        if $stack27 != null goto label04;

     label01:
        $r2 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack139 = $r2.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.codehaus.plexus.PlexusContainer container>;

        $stack140 = interfaceinvoke $stack139.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/artifact/metadata/ArtifactMetadataSource;");

        $stack141 = (org.apache.maven.artifact.metadata.ArtifactMetadataSource) $stack140;

        $r3 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $r3.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.metadata.ArtifactMetadataSource source> = $stack141;

     label02:
        goto label04;

     label03:
        $stack163 := @caughtexception;

     label04:
        if listeners != null goto label06;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        listeners = $u0;

        $r4 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack128 = $r4.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.codehaus.plexus.logging.Logger logger>;

        $stack129 = interfaceinvoke $stack128.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack129 == 0 goto label05;

        $u1 = new org.apache.maven.artifact.resolver.DebugResolutionListener;

        $r5 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack135 = $r5.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.codehaus.plexus.logging.Logger logger>;

        specialinvoke $u1.<org.apache.maven.artifact.resolver.DebugResolutionListener: void <init>(org.codehaus.plexus.logging.Logger)>($stack135);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

     label05:
        $u2 = new org.apache.maven.artifact.resolver.WarningResolutionListener;

        $r6 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack131 = $r6.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.codehaus.plexus.logging.Logger logger>;

        specialinvoke $u2.<org.apache.maven.artifact.resolver.WarningResolutionListener: void <init>(org.codehaus.plexus.logging.Logger)>($stack131);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u2);

     label06:
        $u3 = new org.apache.maven.artifact.resolver.ArtifactResolutionResult;

        specialinvoke $u3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void <init>()>();

        $stack29 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: boolean isResolveRoot()>();

        if $stack29 == 0 goto label11;

     label07:
        $stack124 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getRemoteRepositories()>();

        $r7 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        specialinvoke $r7.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.eclipse.aether.RepositorySystemSession)>(rootArtifact, $stack124, session);

     label08:
        goto label11;

     label09:
        $stack161 := @caughtexception;

        $r8 = (org.apache.maven.artifact.resolver.ArtifactResolutionException) $stack161;

        virtualinvoke $u3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addErrorArtifactException(org.apache.maven.artifact.resolver.ArtifactResolutionException)>($r8);

        return $u3;

     label10:
        $stack158 := @caughtexception;

        $stack159 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        virtualinvoke $u3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addMissingArtifact(org.apache.maven.artifact.Artifact)>($stack159);

        return $u3;

     label11:
        e#17 = request;

        $stack30 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: boolean isResolveTransitively()>();

        if $stack30 == 0 goto label24;

        $u4 = new org.apache.maven.repository.legacy.metadata.DefaultMetadataResolutionRequest;

        specialinvoke $u4.<org.apache.maven.repository.legacy.metadata.DefaultMetadataResolutionRequest: void <init>(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>(request);

        $r9 = (org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest) $u4;

        interfaceinvoke $r9.<org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest: org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest setArtifact(org.apache.maven.artifact.Artifact)>(rootArtifact);

        if managedVersions != null goto label12;

        $stack119 = 1;

        goto label13;

     label12:
        $stack119 = 0;

     label13:
        $r10 = (org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest) $u4;

        interfaceinvoke $r10.<org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest: org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest setResolveManagedVersions(boolean)>($stack119);

     label14:
        $r11 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack79 = $r11.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.metadata.ArtifactMetadataSource source>;

        $r12 = (org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest) $u4;

        resolutionGroup = interfaceinvoke $stack79.<org.apache.maven.artifact.metadata.ArtifactMetadataSource: org.apache.maven.artifact.metadata.ResolutionGroup retrieve(org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest)>($r12);

        if managedVersions != null goto label15;

        managedVersions = virtualinvoke resolutionGroup.<org.apache.maven.artifact.metadata.ResolutionGroup: java.util.Map getManagedVersions()>();

     label15:
        directArtifacts = virtualinvoke resolutionGroup.<org.apache.maven.artifact.metadata.ResolutionGroup: java.util.Set getArtifacts()>();

        if artifacts == null goto label16;

        $stack92 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack92 == 0 goto label17;

     label16:
        artifacts = directArtifacts;

        goto label21;

     label17:
        $u5 = new java.util.ArrayList;

        specialinvoke $u5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $u5.<java.util.List: boolean addAll(java.util.Collection)>(artifacts);

        interfaceinvoke $u5.<java.util.List: boolean addAll(java.util.Collection)>(directArtifacts);

        $u6 = new java.util.LinkedHashMap;

        specialinvoke $u6.<java.util.LinkedHashMap: void <init>()>();

        l16 = interfaceinvoke $u5.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $stack98 = interfaceinvoke l16.<java.util.Iterator: boolean hasNext()>();

        if $stack98 == 0 goto label20;

        $stack110 = interfaceinvoke l16.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack110;

        conflictId = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        $stack112 = interfaceinvoke $u6.<java.util.Map: boolean containsKey(java.lang.Object)>(conflictId);

        if $stack112 != 0 goto label19;

        interfaceinvoke $u6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(conflictId, artifact);

     label19:
        goto label18;

     label20:
        $u7 = new java.util.LinkedHashSet;

        $stack100 = interfaceinvoke $u6.<java.util.Map: java.util.Collection values()>();

        specialinvoke $u7.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($stack100);

        artifacts = $u7;

     label21:
        $u8 = new org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        $r13 = (org.apache.maven.artifact.repository.RepositoryRequest) request;

        specialinvoke $u8.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: void <init>(org.apache.maven.artifact.repository.RepositoryRequest)>($r13);

        e#17 = $u8;

        $stack83 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getServers()>();

        virtualinvoke $u8.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setServers(java.util.List)>($stack83);

        $stack85 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getMirrors()>();

        virtualinvoke $u8.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setMirrors(java.util.List)>($stack85);

        $stack87 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getProxies()>();

        virtualinvoke $u8.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setProxies(java.util.List)>($stack87);

        $stack89 = virtualinvoke resolutionGroup.<org.apache.maven.artifact.metadata.ResolutionGroup: java.util.List getResolutionRepositories()>();

        virtualinvoke $u8.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest setRemoteRepositories(java.util.List)>($stack89);

     label22:
        goto label24;

     label23:
        $stack146 := @caughtexception;

        $u10 = new org.apache.maven.artifact.resolver.ArtifactResolutionException;

        $u9 = new java.lang.StringBuilder;

        specialinvoke $u9.<java.lang.StringBuilder: void <init>()>();

        $stack149 = virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get dependency information for ");

        $stack150 = interfaceinvoke rootArtifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        $stack151 = virtualinvoke $stack149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack150);

        $stack152 = virtualinvoke $stack151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r14 = (org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException) $stack146;

        $stack153 = virtualinvoke $r14.<org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException: java.lang.String getMessage()>();

        $stack154 = virtualinvoke $stack152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack153);

        $stack155 = virtualinvoke $stack154.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = (org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest) $u4;

        $stack156 = interfaceinvoke $r15.<org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest: java.util.List getRemoteRepositories()>();

        specialinvoke $u10.<org.apache.maven.artifact.resolver.ArtifactResolutionException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact,java.util.List,java.lang.Throwable)>($stack155, rootArtifact, $stack156, $stack146);

        virtualinvoke $u3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addMetadataResolutionException(org.apache.maven.artifact.resolver.ArtifactResolutionException)>($u10);

        return $u3;

     label24:
        if artifacts == null goto label25;

        $stack33 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack33 == 0 goto label27;

     label25:
        $stack31 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: boolean isResolveRoot()>();

        if $stack31 == 0 goto label26;

        virtualinvoke $u3.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void addArtifact(org.apache.maven.artifact.Artifact)>(rootArtifact);

     label26:
        return $u3;

     label27:
        $r16 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack35 = $r16.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactCollector artifactCollector>;

        $r17 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack34 = $r17.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.metadata.ArtifactMetadataSource source>;

        result#10 = interfaceinvoke $stack35.<org.apache.maven.artifact.resolver.ArtifactCollector: org.apache.maven.artifact.resolver.ArtifactResolutionResult collect(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.resolver.ArtifactResolutionRequest,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter,java.util.List,java.util.List)>(artifacts, rootArtifact, managedVersions, e#17, $stack34, collectionFilter, listeners, null);

        $stack37 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasMetadataResolutionExceptions()>();

        if $stack37 != 0 goto label28;

        $stack39 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasVersionRangeViolations()>();

        if $stack39 != 0 goto label28;

        $stack43 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasCircularDependencyExceptions()>();

        if $stack43 == 0 goto label29;

     label28:
        $r18 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack38 = $r18.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.codehaus.plexus.logging.Logger logger>;

        interfaceinvoke $stack38.<org.codehaus.plexus.logging.Logger: void info(java.lang.String)>("Failure detected.");

        return result#10;

     label29:
        $stack44 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifactResolutionNodes()>();

        if $stack44 == null goto label37;

        $stack51 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        metadataRequest#35 = virtualinvoke $stack51.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $u11 = new java.util.concurrent.CountDownLatch;

        $stack54 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifactResolutionNodes()>();

        $stack55 = interfaceinvoke $stack54.<java.util.Set: int size()>();

        specialinvoke $u11.<java.util.concurrent.CountDownLatch: void <init>(int)>($stack55);

        $stack56 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifactResolutionNodes()>();

        directArtifacts#37 = interfaceinvoke $stack56.<java.util.Set: java.util.Iterator iterator()>();

     label30:
        $stack58 = interfaceinvoke directArtifacts#37.<java.util.Iterator: boolean hasNext()>();

        if $stack58 == 0 goto label34;

        $stack60 = interfaceinvoke directArtifacts#37.<java.util.Iterator: java.lang.Object next()>();

        allArtifacts#38 = (org.apache.maven.artifact.resolver.ResolutionNode) $stack60;

        mergedArtifacts#39 = virtualinvoke allArtifacts#38.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact getArtifact()>();

        if resolutionFilter == null goto label31;

        $stack66 = interfaceinvoke resolutionFilter.<org.apache.maven.artifact.resolver.filter.ArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>(mergedArtifacts#39);

        if $stack66 == 0 goto label32;

     label31:
        $r19 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack63 = $r19.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: java.util.concurrent.Executor executor>;

        $u12 = new org.apache.maven.artifact.resolver.DefaultArtifactResolver$ResolveTask;

        $stack64 = virtualinvoke allArtifacts#38.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List getRemoteRepositories()>();

        $r20 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        specialinvoke $u12.<org.apache.maven.artifact.resolver.DefaultArtifactResolver$ResolveTask: void <init>(org.apache.maven.artifact.resolver.DefaultArtifactResolver,java.lang.ClassLoader,java.util.concurrent.CountDownLatch,org.apache.maven.artifact.Artifact,org.eclipse.aether.RepositorySystemSession,java.util.List,org.apache.maven.artifact.resolver.ArtifactResolutionResult)>($r20, metadataRequest#35, $u11, mergedArtifacts#39, session, $stack64, result#10);

        $r21 = (java.lang.Runnable) $u12;

        interfaceinvoke $stack63.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r21);

        goto label33;

     label32:
        virtualinvoke $u11.<java.util.concurrent.CountDownLatch: void countDown()>();

     label33:
        goto label30;

     label34:
        virtualinvoke $u11.<java.util.concurrent.CountDownLatch: void await()>();

     label35:
        goto label37;

     label36:
        $stack143 := @caughtexception;

        $u13 = new org.apache.maven.artifact.resolver.ArtifactResolutionException;

        specialinvoke $u13.<org.apache.maven.artifact.resolver.ArtifactResolutionException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact,java.lang.Throwable)>("Resolution interrupted", rootArtifact, $stack143);

        virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addErrorArtifactException(org.apache.maven.artifact.resolver.ArtifactResolutionException)>($u13);

     label37:
        $stack45 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: boolean isResolveRoot()>();

        if $stack45 == 0 goto label38;

        $u14 = new java.util.LinkedHashSet;

        specialinvoke $u14.<java.util.LinkedHashSet: void <init>()>();

        interfaceinvoke $u14.<java.util.Set: boolean add(java.lang.Object)>(rootArtifact);

        $stack48 = virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.util.Set getArtifacts()>();

        interfaceinvoke $u14.<java.util.Set: boolean addAll(java.util.Collection)>($stack48);

        virtualinvoke result#10.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void setArtifacts(java.util.Set)>($u14);

     label38:
        return result#10;

        catch org.codehaus.plexus.component.repository.exception.ComponentLookupException from label01 to label02 with label03;
        catch org.apache.maven.artifact.resolver.ArtifactResolutionException from label07 to label08 with label09;
        catch org.apache.maven.artifact.resolver.ArtifactNotFoundException from label07 to label08 with label10;
        catch org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException from label14 to label22 with label23;
        catch java.lang.InterruptedException from label34 to label35 with label36;
    }

    public void resolve(org.apache.maven.artifact.Artifact, java.util.List, org.apache.maven.artifact.repository.ArtifactRepository) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        DefaultArtifactResolver this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.List remoteRepositories;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0;

        this := @this: DefaultArtifactResolver;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter1: java.util.List;

        localRepository := @parameter2: org.apache.maven.artifact.repository.ArtifactRepository;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        virtualinvoke $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.wagon.events.TransferListener)>(artifact, remoteRepositories, localRepository, null);

        return;
    }

    public void dispose()
    {
        DefaultArtifactResolver this;
        java.util.concurrent.Executor $stack1, $stack3;
        boolean $stack2;
        java.util.concurrent.ExecutorService $stack4;
        org.apache.maven.artifact.resolver.DefaultArtifactResolver $r0, $r1;

        this := @this: DefaultArtifactResolver;

        $r0 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: java.util.concurrent.Executor executor>;

        $stack2 = $stack1 instanceof java.util.concurrent.ExecutorService;

        if $stack2 == 0 goto label1;

        $r1 = (org.apache.maven.artifact.resolver.DefaultArtifactResolver) this;

        $stack3 = $r1.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: java.util.concurrent.Executor executor>;

        $stack4 = (java.util.concurrent.ExecutorService) $stack3;

        interfaceinvoke $stack4.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label1:
        return;
    }

    static void access$000(org.apache.maven.artifact.resolver.DefaultArtifactResolver, org.apache.maven.artifact.Artifact, java.util.List, org.eclipse.aether.RepositorySystemSession) throws org.apache.maven.artifact.resolver.ArtifactResolutionException, org.apache.maven.artifact.resolver.ArtifactNotFoundException
    {
        org.apache.maven.artifact.resolver.DefaultArtifactResolver x0;
        org.apache.maven.artifact.Artifact x1;
        java.util.List x2;
        org.eclipse.aether.RepositorySystemSession x3;

        x0 := @parameter0: org.apache.maven.artifact.resolver.DefaultArtifactResolver;

        x1 := @parameter1: org.apache.maven.artifact.Artifact;

        x2 := @parameter2: java.util.List;

        x3 := @parameter3: org.eclipse.aether.RepositorySystemSession;

        specialinvoke x0.<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.eclipse.aether.RepositorySystemSession)>(x1, x2, x3);

        return;
    }
}
