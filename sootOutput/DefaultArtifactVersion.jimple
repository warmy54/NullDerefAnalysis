public class DefaultArtifactVersion extends java.lang.Object implements org.apache.maven.artifact.versioning.ArtifactVersion
{
    private java.lang.Integer majorVersion;
    private java.lang.Integer minorVersion;
    private java.lang.Integer incrementalVersion;
    private java.lang.Integer buildNumber;
    private java.lang.String qualifier;
    private org.apache.maven.artifact.versioning.ComparableVersion comparable;

    public void <init>(java.lang.String)
    {
        DefaultArtifactVersion this;
        java.lang.String version;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0;

        this := @this: DefaultArtifactVersion;

        version := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        virtualinvoke $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void parseVersion(java.lang.String)>(version);

        return;
    }

    public int hashCode()
    {
        DefaultArtifactVersion this;
        org.apache.maven.artifact.versioning.ComparableVersion $stack1;
        int $stack3, $stack4;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: org.apache.maven.artifact.versioning.ComparableVersion comparable>;

        $stack3 = virtualinvoke $stack1.<org.apache.maven.artifact.versioning.ComparableVersion: int hashCode()>();

        $stack4 = 11 + $stack3;

        return $stack4;
    }

    public boolean equals(java.lang.Object)
    {
        DefaultArtifactVersion this;
        java.lang.Object other;
        boolean $stack2, $stack5;
        org.apache.maven.artifact.versioning.ArtifactVersion $stack3;
        int $stack4;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0;

        this := @this: DefaultArtifactVersion;

        other := @parameter0: java.lang.Object;

        if this != other goto label1;

        return 1;

     label1:
        $stack2 = other instanceof org.apache.maven.artifact.versioning.ArtifactVersion;

        if $stack2 != 0 goto label2;

        return 0;

     label2:
        $stack3 = (org.apache.maven.artifact.versioning.ArtifactVersion) other;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: int compareTo(org.apache.maven.artifact.versioning.ArtifactVersion)>($stack3);

        if $stack4 != 0 goto label3;

        $stack5 = 1;

        goto label4;

     label3:
        $stack5 = 0;

     label4:
        return $stack5;
    }

    public int compareTo(org.apache.maven.artifact.versioning.ArtifactVersion)
    {
        org.apache.maven.artifact.versioning.ArtifactVersion otherVersion, $r2;
        boolean $stack2;
        DefaultArtifactVersion this;
        java.lang.String $stack4;
        int $stack5, $stack9;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $stack6, $u0, $r0, $r1;
        org.apache.maven.artifact.versioning.ComparableVersion $stack7, $stack8;

        this := @this: DefaultArtifactVersion;

        otherVersion := @parameter0: org.apache.maven.artifact.versioning.ArtifactVersion;

        $stack2 = otherVersion instanceof org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        if $stack2 == 0 goto label1;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack8 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: org.apache.maven.artifact.versioning.ComparableVersion comparable>;

        $stack6 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) otherVersion;

        $stack7 = $stack6.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: org.apache.maven.artifact.versioning.ComparableVersion comparable>;

        $stack9 = virtualinvoke $stack8.<org.apache.maven.artifact.versioning.ComparableVersion: int compareTo(org.apache.maven.artifact.versioning.ComparableVersion)>($stack7);

        return $stack9;

     label1:
        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        $stack4 = virtualinvoke otherVersion.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>($stack4);

        $r1 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r2 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack5 = virtualinvoke $r1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: int compareTo(org.apache.maven.artifact.versioning.ArtifactVersion)>($r2);

        return $stack5;
    }

    public int getMajorVersion()
    {
        DefaultArtifactVersion this;
        java.lang.Integer $stack1, $stack2;
        int $stack3;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0, $r1;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack2 = $r1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion>;

        $stack3 = virtualinvoke $stack2.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public int getMinorVersion()
    {
        DefaultArtifactVersion this;
        java.lang.Integer $stack1, $stack2;
        int $stack3;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0, $r1;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer minorVersion>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack2 = $r1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer minorVersion>;

        $stack3 = virtualinvoke $stack2.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public int getIncrementalVersion()
    {
        DefaultArtifactVersion this;
        java.lang.Integer $stack1, $stack2;
        int $stack3;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0, $r1;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer incrementalVersion>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack2 = $r1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer incrementalVersion>;

        $stack3 = virtualinvoke $stack2.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public int getBuildNumber()
    {
        DefaultArtifactVersion this;
        java.lang.Integer $stack1, $stack2;
        int $stack3;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0, $r1;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer buildNumber>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack2 = $r1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer buildNumber>;

        $stack3 = virtualinvoke $stack2.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public java.lang.String getQualifier()
    {
        DefaultArtifactVersion this;
        java.lang.String $stack1;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier>;

        return $stack1;
    }

    public final void parseVersion(java.lang.String)
    {
        DefaultArtifactVersion this;
        java.lang.String version, $stack23, $stack24, part2, part1;
        int index, $stack10, $stack44;
        boolean $stack14, $stack18, $stack19, $stack22, $stack37, $stack49, $stack12, fallback, $stack15, $stack16, $stack17;
        java.lang.Integer $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack42, $stack43, $stack45, $stack46;
        org.apache.maven.artifact.versioning.ComparableVersion $u0;
        java.util.StringTokenizer $u1;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        this := @this: DefaultArtifactVersion;

        version := @parameter0: java.lang.String;

        $u0 = new org.apache.maven.artifact.versioning.ComparableVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.ComparableVersion: void <init>(java.lang.String)>(version);

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: org.apache.maven.artifact.versioning.ComparableVersion comparable> = $u0;

        index = virtualinvoke version.<java.lang.String: int indexOf(int)>(45);

        part2 = null;

        if index >= 0 goto label01;

        part1 = version;

        goto label02;

     label01:
        part1 = virtualinvoke version.<java.lang.String: java.lang.String substring(int,int)>(0, index);

        $stack10 = index + 1;

        part2 = virtualinvoke version.<java.lang.String: java.lang.String substring(int)>($stack10);

     label02:
        if part2 == null goto label05;

        $stack44 = virtualinvoke part2.<java.lang.String: int length()>();

        if $stack44 == 1 goto label03;

        $stack49 = virtualinvoke part2.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $stack49 != 0 goto label04;

     label03:
        $stack45 = staticinvoke <org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer tryParseInt(java.lang.String)>(part2);

        $r1 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer buildNumber> = $stack45;

        $r2 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack46 = $r2.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer buildNumber>;

        if $stack46 != null goto label05;

        $r3 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r3.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier> = part2;

        goto label05;

     label04:
        $r4 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r4.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier> = part2;

     label05:
        $stack12 = virtualinvoke part1.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $stack12 != 0 goto label06;

        $stack37 = virtualinvoke part1.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $stack37 != 0 goto label06;

        $stack42 = staticinvoke <org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer tryParseInt(java.lang.String)>(part1);

        $r5 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r5.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion> = $stack42;

        $r6 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack43 = $r6.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion>;

        if $stack43 != null goto label14;

        $r7 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r7.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier> = version;

        $r8 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r8.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer buildNumber> = null;

        goto label14;

     label06:
        fallback = 0;

        $u1 = new java.util.StringTokenizer;

        specialinvoke $u1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(part1, ".");

        $stack14 = virtualinvoke $u1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $stack14 == 0 goto label07;

        $stack34 = staticinvoke <org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer getNextIntegerToken(java.util.StringTokenizer)>($u1);

        $r9 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r9.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion> = $stack34;

        $r10 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack35 = $r10.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion>;

        if $stack35 != null goto label08;

        fallback = 1;

        goto label08;

     label07:
        fallback = 1;

     label08:
        $stack15 = virtualinvoke $u1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $stack15 == 0 goto label09;

        $stack31 = staticinvoke <org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer getNextIntegerToken(java.util.StringTokenizer)>($u1);

        $r11 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r11.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer minorVersion> = $stack31;

        $r12 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack32 = $r12.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer minorVersion>;

        if $stack32 != null goto label09;

        fallback = 1;

     label09:
        $stack16 = virtualinvoke $u1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $stack16 == 0 goto label10;

        $stack28 = staticinvoke <org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer getNextIntegerToken(java.util.StringTokenizer)>($u1);

        $r13 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r13.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer incrementalVersion> = $stack28;

        $r14 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack29 = $r14.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer incrementalVersion>;

        if $stack29 != null goto label10;

        fallback = 1;

     label10:
        $stack17 = virtualinvoke $u1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $stack17 == 0 goto label11;

        $stack23 = virtualinvoke $u1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r15 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r15.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier> = $stack23;

        $r16 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack24 = $r16.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier>;

        fallback = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>($stack24);

     label11:
        $stack18 = virtualinvoke part1.<java.lang.String: boolean contains(java.lang.CharSequence)>("..");

        if $stack18 != 0 goto label12;

        $stack19 = virtualinvoke part1.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $stack19 != 0 goto label12;

        $stack22 = virtualinvoke part1.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $stack22 == 0 goto label13;

     label12:
        fallback = 1;

     label13:
        if fallback == 0 goto label14;

        $r17 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r17.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String qualifier> = version;

        $r18 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r18.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer majorVersion> = null;

        $r19 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r19.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer minorVersion> = null;

        $r20 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r20.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer incrementalVersion> = null;

        $r21 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $r21.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer buildNumber> = null;

     label14:
        return;
    }

    private static java.lang.Integer getNextIntegerToken(java.util.StringTokenizer)
    {
        java.util.StringTokenizer tok;
        java.lang.String s;
        int $stack3;
        java.lang.Integer $stack4;
        boolean $stack5;

        tok := @parameter0: java.util.StringTokenizer;

        s = virtualinvoke tok.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $stack3 = virtualinvoke s.<java.lang.String: int length()>();

        if $stack3 <= 1 goto label1;

        $stack5 = virtualinvoke s.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $stack5 == 0 goto label1;

        return null;

     label1:
        $stack4 = staticinvoke <org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.Integer tryParseInt(java.lang.String)>(s);

        return $stack4;
    }

    private static java.lang.Integer tryParseInt(java.lang.String)
    {
        java.lang.String s;
        boolean $stack3;
        byte $stack5;
        int $stack6;
        java.lang.Integer $stack7;
        java.lang.NumberFormatException $stack8;
        long longValue;

        s := @parameter0: java.lang.String;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>(s);

        if $stack3 != 0 goto label1;

        return null;

     label1:
        longValue = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(s);

        $stack5 = longValue cmp 2147483647L;

        if $stack5 <= 0 goto label3;

     label2:
        return null;

     label3:
        $stack6 = (int) longValue;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack6);

     label4:
        return $stack7;

     label5:
        $stack8 := @caughtexception;

        return null;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public java.lang.String toString()
    {
        DefaultArtifactVersion this;
        org.apache.maven.artifact.versioning.ComparableVersion $stack1;
        java.lang.String $stack2;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0;

        this := @this: DefaultArtifactVersion;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack1 = $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: org.apache.maven.artifact.versioning.ComparableVersion comparable>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.artifact.versioning.ComparableVersion: java.lang.String toString()>();

        return $stack2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        DefaultArtifactVersion this;
        java.lang.Object l1;
        org.apache.maven.artifact.versioning.ArtifactVersion $stack2;
        int $stack3;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $r0;

        this := @this: DefaultArtifactVersion;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (org.apache.maven.artifact.versioning.ArtifactVersion) l1;

        $r0 = (org.apache.maven.artifact.versioning.DefaultArtifactVersion) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: int compareTo(org.apache.maven.artifact.versioning.ArtifactVersion)>($stack2);

        return $stack3;
    }
}
