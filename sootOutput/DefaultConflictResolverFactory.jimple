public class DefaultConflictResolverFactory extends java.lang.Object implements org.apache.maven.repository.legacy.resolver.conflict.ConflictResolverFactory, org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable
{
    private org.codehaus.plexus.PlexusContainer container;

    public void <init>()
    {
        DefaultConflictResolverFactory this;

        this := @this: DefaultConflictResolverFactory;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver getConflictResolver(java.lang.String) throws org.apache.maven.repository.legacy.resolver.conflict.ConflictResolverNotFoundException
    {
        DefaultConflictResolverFactory this;
        java.lang.String type, $stack3, $stack12;
        org.codehaus.plexus.PlexusContainer $stack4;
        java.lang.Object $stack5;
        org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver $stack6;
        java.lang.Throwable $stack7, $r1;
        java.lang.StringBuilder $stack10, $stack11, $u0;
        org.apache.maven.repository.legacy.resolver.conflict.ConflictResolverNotFoundException $u1;
        org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory $r0;

        this := @this: DefaultConflictResolverFactory;

        type := @parameter0: java.lang.String;

     label1:
        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory) this;

        $stack4 = $r0.<org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory: org.codehaus.plexus.PlexusContainer container>;

        $stack3 = <org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver: java.lang.String ROLE>;

        $stack5 = interfaceinvoke $stack4.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.String,java.lang.String)>($stack3, type);

        $stack6 = (org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver) $stack5;

     label2:
        return $stack6;

     label3:
        $stack7 := @caughtexception;

        $u1 = new org.apache.maven.repository.legacy.resolver.conflict.ConflictResolverNotFoundException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find conflict resolver of type: ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(type);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.apache.maven.repository.legacy.resolver.conflict.ConflictResolverNotFoundException: void <init>(java.lang.String)>($stack12);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

        catch org.codehaus.plexus.component.repository.exception.ComponentLookupException from label1 to label2 with label3;
    }

    public void contextualize(org.codehaus.plexus.context.Context) throws org.codehaus.plexus.context.ContextException
    {
        DefaultConflictResolverFactory this;
        org.codehaus.plexus.context.Context context;
        java.lang.Object $stack2;
        org.codehaus.plexus.PlexusContainer $stack3;
        org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory $r0;

        this := @this: DefaultConflictResolverFactory;

        context := @parameter0: org.codehaus.plexus.context.Context;

        $stack2 = interfaceinvoke context.<org.codehaus.plexus.context.Context: java.lang.Object get(java.lang.Object)>("plexus");

        $stack3 = (org.codehaus.plexus.PlexusContainer) $stack2;

        $r0 = (org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory) this;

        $r0.<org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory: org.codehaus.plexus.PlexusContainer container> = $stack3;

        return;
    }
}
