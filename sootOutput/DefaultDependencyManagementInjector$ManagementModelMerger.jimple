public class DefaultDependencyManagementInjector$ManagementModelMerger extends org.apache.maven.model.merge.MavenModelMerger
{

    protected void <init>()
    {
        DefaultDependencyManagementInjector$ManagementModelMerger this;

        this := @this: DefaultDependencyManagementInjector$ManagementModelMerger;

        specialinvoke this.<org.apache.maven.model.merge.MavenModelMerger: void <init>()>();

        return;
    }

    public void mergeManagedDependencies(org.apache.maven.model.Model)
    {
        org.apache.maven.model.Model model;
        org.apache.maven.model.DependencyManagement dependencyManagement;
        java.util.Map context;
        java.util.List $stack12, $stack15;
        boolean $stack14, $stack17;
        java.lang.Object $stack18, $stack21, $stack23, key;
        DefaultDependencyManagementInjector$ManagementModelMerger this;
        org.apache.maven.model.merge.ModelMerger$KeyComputer $stack19, $stack24;
        org.apache.maven.model.Dependency dependency, dependency;
        java.util.Iterator l5;
        java.util.HashMap $u0;
        org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger $r0, $r1, $r2;

        this := @this: DefaultDependencyManagementInjector$ManagementModelMerger;

        model := @parameter0: org.apache.maven.model.Model;

        dependencyManagement = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.DependencyManagement getDependencyManagement()>();

        if dependencyManagement == null goto label5;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        context = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $stack12 = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getDependencies()>();

        l5 = interfaceinvoke $stack12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label2;

        $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        dependency = (org.apache.maven.model.Dependency) $stack23;

        $r0 = (org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger) this;

        $stack24 = virtualinvoke $r0.<org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger: org.apache.maven.model.merge.ModelMerger$KeyComputer getDependencyKey()>();

        key = interfaceinvoke $stack24.<org.apache.maven.model.merge.ModelMerger$KeyComputer: java.lang.Object apply(java.lang.Object)>(dependency);

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, dependency);

        goto label1;

     label2:
        $stack15 = virtualinvoke dependencyManagement.<org.apache.maven.model.DependencyManagement: java.util.List getDependencies()>();

        l5 = interfaceinvoke $stack15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack17 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label5;

        $stack18 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        dependency = (org.apache.maven.model.Dependency) $stack18;

        $r1 = (org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger) this;

        $stack19 = virtualinvoke $r1.<org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger: org.apache.maven.model.merge.ModelMerger$KeyComputer getDependencyKey()>();

        key = interfaceinvoke $stack19.<org.apache.maven.model.merge.ModelMerger$KeyComputer: java.lang.Object apply(java.lang.Object)>(dependency);

        $stack21 = interfaceinvoke $u0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        dependency = (org.apache.maven.model.Dependency) $stack21;

        if dependency == null goto label4;

        $r2 = (org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger) this;

        virtualinvoke $r2.<org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger: void mergeDependency(org.apache.maven.model.Dependency,org.apache.maven.model.Dependency,boolean,java.util.Map)>(dependency, dependency, 0, context);

     label4:
        goto label3;

     label5:
        return;
    }

    protected void mergeDependency_Optional(org.apache.maven.model.Dependency, org.apache.maven.model.Dependency, boolean, java.util.Map)
    {
        DefaultDependencyManagementInjector$ManagementModelMerger this;
        org.apache.maven.model.Dependency target, source;
        boolean sourceDominant;
        java.util.Map context;

        this := @this: DefaultDependencyManagementInjector$ManagementModelMerger;

        target := @parameter0: org.apache.maven.model.Dependency;

        source := @parameter1: org.apache.maven.model.Dependency;

        sourceDominant := @parameter2: boolean;

        context := @parameter3: java.util.Map;

        return;
    }

    protected void mergeDependency_Exclusions(org.apache.maven.model.Dependency, org.apache.maven.model.Dependency, boolean, java.util.Map)
    {
        org.apache.maven.model.Dependency target, source;
        java.util.List tgt, src;
        boolean $stack11, $stack14, sourceDominant;
        java.util.Iterator l7;
        java.lang.Object $stack15;
        org.apache.maven.model.Exclusion element, clone;
        DefaultDependencyManagementInjector$ManagementModelMerger this;
        java.util.Map context;

        this := @this: DefaultDependencyManagementInjector$ManagementModelMerger;

        target := @parameter0: org.apache.maven.model.Dependency;

        source := @parameter1: org.apache.maven.model.Dependency;

        sourceDominant := @parameter2: boolean;

        context := @parameter3: java.util.Map;

        tgt = virtualinvoke target.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        $stack11 = interfaceinvoke tgt.<java.util.List: boolean isEmpty()>();

        if $stack11 == 0 goto label2;

        src = virtualinvoke source.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        l7 = interfaceinvoke src.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label2;

        $stack15 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        element = (org.apache.maven.model.Exclusion) $stack15;

        clone = virtualinvoke element.<org.apache.maven.model.Exclusion: org.apache.maven.model.Exclusion clone()>();

        virtualinvoke target.<org.apache.maven.model.Dependency: void addExclusion(org.apache.maven.model.Exclusion)>(clone);

        goto label1;

     label2:
        return;
    }
}
