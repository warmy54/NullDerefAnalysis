class DefaultGraphBuilderTest$ScenarioBuilder extends java.lang.Object
{
    private java.lang.String description;
    private java.util.List activeRequiredProjects;
    private java.util.List activeOptionalProjects;
    private java.util.List inactiveRequiredProjects;
    private java.util.List inactiveOptionalProjects;
    private java.lang.String resumeFrom;
    private java.lang.String makeBehavior;
    private java.io.File requestedPom;
    private boolean recursive;

    private void <init>()
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.util.List $stack1, $stack2, $stack3, $stack4;
        java.io.File $u0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List activeRequiredProjects> = $stack1;

        $stack2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List activeOptionalProjects> = $stack2;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r2.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List inactiveRequiredProjects> = $stack3;

        $stack4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r3.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List inactiveOptionalProjects> = $stack4;

        $r4 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r4.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String resumeFrom> = "";

        $r5 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r5.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String makeBehavior> = "";

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>("module-parent", "pom.xml");

        $r6 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r6.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.io.File requestedPom> = $u0;

        $r7 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r7.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: boolean recursive> = 1;

        return;
    }

    public static org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)
    {
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $stack2;
        java.lang.String description;

        description := @parameter0: java.lang.String;

        $stack2 = new org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder;

        specialinvoke $stack2.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: void <init>()>();

        $stack2.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String description> = description;

        return $stack2;
    }

    public transient org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String[] activeRequiredProjects;
        java.util.List $stack2;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1, $r2;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        activeRequiredProjects := @parameter0: java.lang.String[];

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List prependWithColonIfNeeded(java.lang.String[])>(activeRequiredProjects);

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List activeRequiredProjects> = $stack2;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r2;
    }

    public transient org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeOptionalProjects(java.lang.String[])
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String[] activeOptionalProjects;
        java.util.List $stack2;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1, $r2;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        activeOptionalProjects := @parameter0: java.lang.String[];

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List prependWithColonIfNeeded(java.lang.String[])>(activeOptionalProjects);

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List activeOptionalProjects> = $stack2;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r2;
    }

    public transient org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String[] inactiveRequiredProjects;
        java.util.List $stack2;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1, $r2;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        inactiveRequiredProjects := @parameter0: java.lang.String[];

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List prependWithColonIfNeeded(java.lang.String[])>(inactiveRequiredProjects);

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List inactiveRequiredProjects> = $stack2;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r2;
    }

    public transient org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveOptionalProjects(java.lang.String[])
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String[] inactiveOptionalProjects;
        java.util.List $stack2;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1, $r2;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        inactiveOptionalProjects := @parameter0: java.lang.String[];

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List prependWithColonIfNeeded(java.lang.String[])>(inactiveOptionalProjects);

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List inactiveOptionalProjects> = $stack2;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r2;
    }

    public org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String resumeFrom;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        resumeFrom := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String resumeFrom> = resumeFrom;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r1;
    }

    public org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String makeBehavior;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        makeBehavior := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String makeBehavior> = makeBehavior;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r1;
    }

    public org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder requestedPom(java.lang.String)
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String requestedPom;
        java.io.File $u0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        requestedPom := @parameter0: java.lang.String;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>(requestedPom, "pom.xml");

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.io.File requestedPom> = $u0;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r1;
    }

    public org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder nonRecursive()
    {
        DefaultGraphBuilderTest$ScenarioBuilder this;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: boolean recursive> = 0;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        return $r1;
    }

    public transient org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])
    {
        java.lang.String[] expectedReactorProjects;
        java.util.List $stack4;
        DefaultGraphBuilderTest$ScenarioBuilder this;
        org.junit.jupiter.params.provider.Arguments $stack5;
        org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult $u0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult $r1;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        expectedReactorProjects := @parameter0: java.lang.String[];

        $u0 = new org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult;

        $stack4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(expectedReactorProjects);

        specialinvoke $u0.<org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult: void <init>(java.util.List)>($stack4);

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult) $u0;

        $stack5 = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments createTestArguments(org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult)>($r1);

        return $stack5;
    }

    public org.junit.jupiter.params.provider.Arguments expectResult(java.lang.Class, java.lang.String)
    {
        java.lang.Class expected;
        java.lang.String partOfMessage;
        DefaultGraphBuilderTest$ScenarioBuilder this;
        org.junit.jupiter.params.provider.Arguments $stack5;
        org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown $u0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult $r1;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        expected := @parameter0: java.lang.Class;

        partOfMessage := @parameter1: java.lang.String;

        $u0 = new org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown;

        specialinvoke $u0.<org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown: void <init>(java.lang.Class,java.lang.String)>(expected, partOfMessage);

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult) $u0;

        $stack5 = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments createTestArguments(org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult)>($r1);

        return $stack5;
    }

    private org.junit.jupiter.params.provider.Arguments createTestArguments(org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult)
    {
        java.lang.Object[] $stack2;
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.lang.String $stack3, $stack8, $stack9;
        java.util.List $stack4, $stack5, $stack6, $stack7;
        org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult expectedResult;
        java.io.File $stack10;
        boolean $stack11;
        java.lang.Boolean $stack13;
        org.junit.jupiter.params.provider.Arguments $stack14;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        expectedResult := @parameter0: org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult;

        $stack2 = newarray (java.lang.Object)[10];

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack3 = $r0.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String description>;

        $stack2[0] = $stack3;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack4 = $r1.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List activeRequiredProjects>;

        $stack2[1] = $stack4;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack5 = $r2.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List activeOptionalProjects>;

        $stack2[2] = $stack5;

        $r3 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack6 = $r3.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List inactiveRequiredProjects>;

        $stack2[3] = $stack6;

        $r4 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack7 = $r4.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.util.List inactiveOptionalProjects>;

        $stack2[4] = $stack7;

        $r5 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack8 = $r5.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String resumeFrom>;

        $stack2[5] = $stack8;

        $r6 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack9 = $r6.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.lang.String makeBehavior>;

        $stack2[6] = $stack9;

        $stack2[7] = expectedResult;

        $r7 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack10 = $r7.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: java.io.File requestedPom>;

        $stack2[8] = $stack10;

        $r8 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack11 = $r8.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: boolean recursive>;

        $stack13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack11);

        $stack2[9] = $stack13;

        $stack14 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments arguments(java.lang.Object[])>($stack2);

        return $stack14;
    }

    private java.util.List prependWithColonIfNeeded(java.lang.String[])
    {
        java.lang.String[] selectors;
        java.util.stream.Stream $stack2, $stack4;
        DefaultGraphBuilderTest$ScenarioBuilder this;
        java.util.function.Function $stack3;
        java.util.stream.Collector $stack5;
        java.lang.Object $stack6;
        java.util.List $stack7;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $r0;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        selectors := @parameter0: java.lang.String[];

        $stack2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(selectors);

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder) this;

        $stack3 = staticinvoke <DefaultGraphBuilderTest$ScenarioBuilder$prependWithColonIfNeeded__309: java.util.function.Function bootstrap$(org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder)>($r0);

        $stack4 = interfaceinvoke $stack2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack3);

        $stack5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack5);

        $stack7 = (java.util.List) $stack6;

        return $stack7;
    }

    private java.lang.String prependWithColonIfNeeded(java.lang.String)
    {
        java.lang.String selector, $stack6;
        int $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5;
        DefaultGraphBuilderTest$ScenarioBuilder this;

        this := @this: DefaultGraphBuilderTest$ScenarioBuilder;

        selector := @parameter0: java.lang.String;

        $stack2 = virtualinvoke selector.<java.lang.String: int indexOf(int)>(58);

        if $stack2 != -1 goto label1;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(selector);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $stack6 = selector;

     label2:
        return $stack6;
    }
}
