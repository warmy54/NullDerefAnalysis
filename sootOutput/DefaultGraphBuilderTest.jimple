class DefaultGraphBuilderTest extends java.lang.Object
{
    private static final java.lang.String GROUP_ID;
    private static final java.lang.String PARENT_MODULE;
    private static final java.lang.String INDEPENDENT_MODULE;
    private static final java.lang.String MODULE_A;
    private static final java.lang.String MODULE_B;
    private static final java.lang.String MODULE_C;
    private static final java.lang.String MODULE_C_1;
    private static final java.lang.String MODULE_C_2;
    private org.apache.maven.graph.DefaultGraphBuilder graphBuilder;
    private final org.apache.maven.project.ProjectBuilder projectBuilder;
    private final org.apache.maven.execution.MavenSession session;
    private final org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest;
    private final org.apache.maven.project.collector.ProjectsSelector projectsSelector;
    private final org.apache.maven.model.locator.ModelLocator modelLocator;
    private final org.apache.maven.project.collector.PomlessCollectionStrategy pomlessCollectionStrategy;
    private final org.apache.maven.project.collector.MultiModuleCollectionStrategy multiModuleCollectionStrategy;
    private final org.apache.maven.project.collector.RequestPomCollectionStrategy requestPomCollectionStrategy;
    private java.util.Map artifactIdProjectMap;

    void <init>()
    {
        DefaultGraphBuilderTest this;
        java.lang.Object $stack1, $stack3, $stack5;
        org.apache.maven.project.ProjectBuilder $stack2, $stack8, $stack11;
        org.apache.maven.execution.MavenSession $stack4;
        org.apache.maven.execution.MavenExecutionRequest $stack6;
        org.apache.maven.project.collector.ProjectsSelector $stack13, $stack16, $r5;
        org.apache.maven.model.locator.ModelLocator $stack14, $r7;
        org.apache.maven.project.collector.DefaultProjectsSelector $u0;
        org.apache.maven.model.locator.DefaultModelLocator $u1;
        org.apache.maven.project.collector.PomlessCollectionStrategy $u2;
        org.apache.maven.project.collector.MultiModuleCollectionStrategy $u3;
        org.apache.maven.project.collector.RequestPomCollectionStrategy $u4;
        org.apache.maven.graph.DefaultGraphBuilderTest $r0, $r1, $r2, $r3, $r4, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        this := @this: DefaultGraphBuilderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack2 = (org.apache.maven.project.ProjectBuilder) $stack1;

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r0.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.ProjectBuilder projectBuilder> = $stack2;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/execution/MavenSession;");

        $stack4 = (org.apache.maven.execution.MavenSession) $stack3;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r1.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenSession session> = $stack4;

        $stack5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/execution/MavenExecutionRequest;");

        $stack6 = (org.apache.maven.execution.MavenExecutionRequest) $stack5;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r2.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest> = $stack6;

        $u0 = new org.apache.maven.project.collector.DefaultProjectsSelector;

        $r3 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack8 = $r3.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.ProjectBuilder projectBuilder>;

        specialinvoke $u0.<org.apache.maven.project.collector.DefaultProjectsSelector: void <init>(org.apache.maven.project.ProjectBuilder)>($stack8);

        $r4 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r5 = (org.apache.maven.project.collector.ProjectsSelector) $u0;

        $r4.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.ProjectsSelector projectsSelector> = $r5;

        $u1 = new org.apache.maven.model.locator.DefaultModelLocator;

        specialinvoke $u1.<org.apache.maven.model.locator.DefaultModelLocator: void <init>()>();

        $r6 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r7 = (org.apache.maven.model.locator.ModelLocator) $u1;

        $r6.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.model.locator.ModelLocator modelLocator> = $r7;

        $u2 = new org.apache.maven.project.collector.PomlessCollectionStrategy;

        $r8 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack11 = $r8.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.ProjectBuilder projectBuilder>;

        specialinvoke $u2.<org.apache.maven.project.collector.PomlessCollectionStrategy: void <init>(org.apache.maven.project.ProjectBuilder)>($stack11);

        $r9 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r9.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.PomlessCollectionStrategy pomlessCollectionStrategy> = $u2;

        $u3 = new org.apache.maven.project.collector.MultiModuleCollectionStrategy;

        $r10 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack14 = $r10.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.model.locator.ModelLocator modelLocator>;

        $r11 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack13 = $r11.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.ProjectsSelector projectsSelector>;

        specialinvoke $u3.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: void <init>(org.apache.maven.model.locator.ModelLocator,org.apache.maven.project.collector.ProjectsSelector)>($stack14, $stack13);

        $r12 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r12.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.MultiModuleCollectionStrategy multiModuleCollectionStrategy> = $u3;

        $u4 = new org.apache.maven.project.collector.RequestPomCollectionStrategy;

        $r13 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack16 = $r13.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.ProjectsSelector projectsSelector>;

        specialinvoke $u4.<org.apache.maven.project.collector.RequestPomCollectionStrategy: void <init>(org.apache.maven.project.collector.ProjectsSelector)>($stack16);

        $r14 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r14.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.RequestPomCollectionStrategy requestPomCollectionStrategy> = $u4;

        return;
    }

    public static java.util.stream.Stream parameters()
    {
        org.junit.jupiter.params.provider.Arguments[] $stack0;
        org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder $stack2, $stack6, $stack8, $stack12, $stack14, $stack18, $stack20, $stack21, $stack25, $stack27, $stack31, $stack33, $stack37, $stack39, $stack41, $stack45, $stack47, $stack51, $stack53, $stack57, $stack59, $stack63, $stack65, $stack67, $stack71, $stack73, $stack74, $stack78, $stack80, $stack82, $stack85, $stack87, $stack89, $stack92, $stack94, $stack96, $stack99, $stack101, $stack103, $stack107, $stack109, $stack111, $stack114, $stack115, $stack119, $stack121, $stack122, $stack126, $stack128, $stack129, $stack133, $stack134, $stack135, $stack139, $stack141, $stack142, $stack143, $stack147, $stack149, $stack150, $stack151, $stack155, $stack157, $stack159, $stack160, $stack164, $stack166, $stack170, $stack171, $stack173, $stack174, $stack178, $stack179, $stack181, $stack185, $stack186, $stack188, $stack192, $stack194, $stack195, $stack199, $stack201, $stack205, $stack206, $stack210, $stack211, $stack212, $stack216, $stack217, $stack218;
        java.lang.String[] $stack3, $stack7, $stack9, $stack13, $stack15, $stack19, $stack22, $stack26, $stack28, $stack32, $stack34, $stack38, $stack40, $stack42, $stack46, $stack48, $stack52, $stack54, $stack58, $stack60, $stack64, $stack66, $stack68, $stack72, $stack75, $stack79, $stack81, $stack86, $stack88, $stack93, $stack95, $stack100, $stack102, $stack104, $stack108, $stack110, $stack116, $stack120, $stack123, $stack127, $stack130, $stack136, $stack140, $stack144, $stack148, $stack152, $stack156, $stack158, $stack161, $stack165, $stack167, $stack172, $stack175, $stack180, $stack182, $stack187, $stack189, $stack193, $stack196, $stack200, $stack202, $stack207, $stack213, $stack219;
        org.junit.jupiter.params.provider.Arguments $stack4, $stack10, $stack16, $stack23, $stack29, $stack35, $stack43, $stack49, $stack55, $stack61, $stack69, $stack76, $stack83, $stack90, $stack97, $stack105, $stack112, $stack117, $stack124, $stack131, $stack137, $stack145, $stack153, $stack162, $stack168, $stack176, $stack183, $stack190, $stack197, $stack203, $stack208, $stack214, $stack220;
        java.util.stream.Stream $stack221;

        $stack0 = newarray (org.junit.jupiter.params.provider.Arguments)[33];

        $stack2 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Full reactor in order");

        $stack3 = newarray (java.lang.String)[7];

        $stack3[0] = "module-parent";

        $stack3[1] = "module-c";

        $stack3[2] = "module-c-1";

        $stack3[3] = "module-a";

        $stack3[4] = "module-b";

        $stack3[5] = "module-c-2";

        $stack3[6] = "module-independent";

        $stack4 = virtualinvoke $stack2.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack3);

        $stack0[0] = $stack4;

        $stack6 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected project");

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "module-b";

        $stack8 = virtualinvoke $stack6.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack7);

        $stack9 = newarray (java.lang.String)[1];

        $stack9[0] = "module-b";

        $stack10 = virtualinvoke $stack8.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack9);

        $stack0[1] = $stack10;

        $stack12 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected aggregator project (including child modules)");

        $stack13 = newarray (java.lang.String)[1];

        $stack13[0] = "module-c";

        $stack14 = virtualinvoke $stack12.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack13);

        $stack15 = newarray (java.lang.String)[3];

        $stack15[0] = "module-c";

        $stack15[1] = "module-c-1";

        $stack15[2] = "module-c-2";

        $stack16 = virtualinvoke $stack14.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack15);

        $stack0[2] = $stack16;

        $stack18 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected aggregator project with non-recursive");

        $stack19 = newarray (java.lang.String)[1];

        $stack19[0] = "module-c";

        $stack20 = virtualinvoke $stack18.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack19);

        $stack21 = virtualinvoke $stack20.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder nonRecursive()>();

        $stack22 = newarray (java.lang.String)[1];

        $stack22[0] = "module-c";

        $stack23 = virtualinvoke $stack21.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack22);

        $stack0[3] = $stack23;

        $stack25 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected optional project");

        $stack26 = newarray (java.lang.String)[1];

        $stack26[0] = "module-b";

        $stack27 = virtualinvoke $stack25.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeOptionalProjects(java.lang.String[])>($stack26);

        $stack28 = newarray (java.lang.String)[1];

        $stack28[0] = "module-b";

        $stack29 = virtualinvoke $stack27.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack28);

        $stack0[4] = $stack29;

        $stack31 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected missing optional project");

        $stack32 = newarray (java.lang.String)[1];

        $stack32[0] = "non-existing-module";

        $stack33 = virtualinvoke $stack31.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeOptionalProjects(java.lang.String[])>($stack32);

        $stack34 = newarray (java.lang.String)[7];

        $stack34[0] = "module-parent";

        $stack34[1] = "module-c";

        $stack34[2] = "module-c-1";

        $stack34[3] = "module-a";

        $stack34[4] = "module-b";

        $stack34[5] = "module-c-2";

        $stack34[6] = "module-independent";

        $stack35 = virtualinvoke $stack33.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack34);

        $stack0[5] = $stack35;

        $stack37 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected missing optional and required project");

        $stack38 = newarray (java.lang.String)[1];

        $stack38[0] = "non-existing-module";

        $stack39 = virtualinvoke $stack37.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeOptionalProjects(java.lang.String[])>($stack38);

        $stack40 = newarray (java.lang.String)[1];

        $stack40[0] = "module-b";

        $stack41 = virtualinvoke $stack39.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack40);

        $stack42 = newarray (java.lang.String)[1];

        $stack42[0] = "module-b";

        $stack43 = virtualinvoke $stack41.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack42);

        $stack0[6] = $stack43;

        $stack45 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluded project");

        $stack46 = newarray (java.lang.String)[1];

        $stack46[0] = "module-b";

        $stack47 = virtualinvoke $stack45.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack46);

        $stack48 = newarray (java.lang.String)[6];

        $stack48[0] = "module-parent";

        $stack48[1] = "module-c";

        $stack48[2] = "module-c-1";

        $stack48[3] = "module-a";

        $stack48[4] = "module-c-2";

        $stack48[5] = "module-independent";

        $stack49 = virtualinvoke $stack47.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack48);

        $stack0[7] = $stack49;

        $stack51 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluded optional project");

        $stack52 = newarray (java.lang.String)[1];

        $stack52[0] = "module-b";

        $stack53 = virtualinvoke $stack51.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveOptionalProjects(java.lang.String[])>($stack52);

        $stack54 = newarray (java.lang.String)[6];

        $stack54[0] = "module-parent";

        $stack54[1] = "module-c";

        $stack54[2] = "module-c-1";

        $stack54[3] = "module-a";

        $stack54[4] = "module-c-2";

        $stack54[5] = "module-independent";

        $stack55 = virtualinvoke $stack53.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack54);

        $stack0[8] = $stack55;

        $stack57 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluded missing optional project");

        $stack58 = newarray (java.lang.String)[1];

        $stack58[0] = "non-existing-module";

        $stack59 = virtualinvoke $stack57.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveOptionalProjects(java.lang.String[])>($stack58);

        $stack60 = newarray (java.lang.String)[7];

        $stack60[0] = "module-parent";

        $stack60[1] = "module-c";

        $stack60[2] = "module-c-1";

        $stack60[3] = "module-a";

        $stack60[4] = "module-b";

        $stack60[5] = "module-c-2";

        $stack60[6] = "module-independent";

        $stack61 = virtualinvoke $stack59.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack60);

        $stack0[9] = $stack61;

        $stack63 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluded missing optional and required project");

        $stack64 = newarray (java.lang.String)[1];

        $stack64[0] = "non-existing-module";

        $stack65 = virtualinvoke $stack63.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveOptionalProjects(java.lang.String[])>($stack64);

        $stack66 = newarray (java.lang.String)[1];

        $stack66[0] = "module-b";

        $stack67 = virtualinvoke $stack65.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack66);

        $stack68 = newarray (java.lang.String)[6];

        $stack68[0] = "module-parent";

        $stack68[1] = "module-c";

        $stack68[2] = "module-c-1";

        $stack68[3] = "module-a";

        $stack68[4] = "module-c-2";

        $stack68[5] = "module-independent";

        $stack69 = virtualinvoke $stack67.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack68);

        $stack0[10] = $stack69;

        $stack71 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluded aggregator project with non-recursive");

        $stack72 = newarray (java.lang.String)[1];

        $stack72[0] = "module-c";

        $stack73 = virtualinvoke $stack71.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack72);

        $stack74 = virtualinvoke $stack73.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder nonRecursive()>();

        $stack75 = newarray (java.lang.String)[6];

        $stack75[0] = "module-parent";

        $stack75[1] = "module-c-1";

        $stack75[2] = "module-a";

        $stack75[3] = "module-b";

        $stack75[4] = "module-c-2";

        $stack75[5] = "module-independent";

        $stack76 = virtualinvoke $stack74.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack75);

        $stack0[11] = $stack76;

        $stack78 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected and excluded same project");

        $stack79 = newarray (java.lang.String)[1];

        $stack79[0] = "module-a";

        $stack80 = virtualinvoke $stack78.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack79);

        $stack81 = newarray (java.lang.String)[1];

        $stack81[0] = "module-a";

        $stack82 = virtualinvoke $stack80.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack81);

        $stack83 = virtualinvoke $stack82.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/MavenExecutionException;", "empty reactor");

        $stack0[12] = $stack83;

        $stack85 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluded aggregator, but selected child");

        $stack86 = newarray (java.lang.String)[1];

        $stack86[0] = "module-c-1";

        $stack87 = virtualinvoke $stack85.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack86);

        $stack88 = newarray (java.lang.String)[1];

        $stack88[0] = "module-c";

        $stack89 = virtualinvoke $stack87.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack88);

        $stack90 = virtualinvoke $stack89.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/MavenExecutionException;", "empty reactor");

        $stack0[13] = $stack90;

        $stack92 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Project selected with different selector resolves to same project");

        $stack93 = newarray (java.lang.String)[1];

        $stack93[0] = "unittest:module-a";

        $stack94 = virtualinvoke $stack92.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack93);

        $stack95 = newarray (java.lang.String)[1];

        $stack95[0] = "module-a";

        $stack96 = virtualinvoke $stack94.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack95);

        $stack97 = virtualinvoke $stack96.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/MavenExecutionException;", "empty reactor");

        $stack0[14] = $stack97;

        $stack99 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected and excluded same project, but also selected another project");

        $stack100 = newarray (java.lang.String)[2];

        $stack100[0] = "module-a";

        $stack100[1] = "module-b";

        $stack101 = virtualinvoke $stack99.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack100);

        $stack102 = newarray (java.lang.String)[1];

        $stack102[0] = "module-a";

        $stack103 = virtualinvoke $stack101.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack102);

        $stack104 = newarray (java.lang.String)[1];

        $stack104[0] = "module-b";

        $stack105 = virtualinvoke $stack103.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack104);

        $stack0[15] = $stack105;

        $stack107 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected missing project as required and as optional");

        $stack108 = newarray (java.lang.String)[1];

        $stack108[0] = "non-existing-module";

        $stack109 = virtualinvoke $stack107.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack108);

        $stack110 = newarray (java.lang.String)[1];

        $stack110[0] = "non-existing-module";

        $stack111 = virtualinvoke $stack109.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeOptionalProjects(java.lang.String[])>($stack110);

        $stack112 = virtualinvoke $stack111.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/MavenExecutionException;", "not find the selected project");

        $stack0[16] = $stack112;

        $stack114 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Resuming from project");

        $stack115 = virtualinvoke $stack114.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-b");

        $stack116 = newarray (java.lang.String)[3];

        $stack116[0] = "module-b";

        $stack116[1] = "module-c-2";

        $stack116[2] = "module-independent";

        $stack117 = virtualinvoke $stack115.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack116);

        $stack0[17] = $stack117;

        $stack119 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected project with also make dependencies");

        $stack120 = newarray (java.lang.String)[1];

        $stack120[0] = "module-c-2";

        $stack121 = virtualinvoke $stack119.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack120);

        $stack122 = virtualinvoke $stack121.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-upstream");

        $stack123 = newarray (java.lang.String)[5];

        $stack123[0] = "module-parent";

        $stack123[1] = "module-c";

        $stack123[2] = "module-a";

        $stack123[3] = "module-b";

        $stack123[4] = "module-c-2";

        $stack124 = virtualinvoke $stack122.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack123);

        $stack0[18] = $stack124;

        $stack126 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected project with also make dependents");

        $stack127 = newarray (java.lang.String)[1];

        $stack127[0] = "module-b";

        $stack128 = virtualinvoke $stack126.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack127);

        $stack129 = virtualinvoke $stack128.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-downstream");

        $stack130 = newarray (java.lang.String)[2];

        $stack130[0] = "module-b";

        $stack130[1] = "module-c-2";

        $stack131 = virtualinvoke $stack129.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack130);

        $stack0[19] = $stack131;

        $stack133 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Resuming from project with also make dependencies");

        $stack134 = virtualinvoke $stack133.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-upstream");

        $stack135 = virtualinvoke $stack134.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-c-2");

        $stack136 = newarray (java.lang.String)[6];

        $stack136[0] = "module-parent";

        $stack136[1] = "module-c";

        $stack136[2] = "module-a";

        $stack136[3] = "module-b";

        $stack136[4] = "module-c-2";

        $stack136[5] = "module-independent";

        $stack137 = virtualinvoke $stack135.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack136);

        $stack0[20] = $stack137;

        $stack139 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected project with resume from and also make dependency (MNG-4960 IT#1)");

        $stack140 = newarray (java.lang.String)[1];

        $stack140[0] = "module-c-2";

        $stack141 = virtualinvoke $stack139.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack140);

        $stack142 = virtualinvoke $stack141.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-b");

        $stack143 = virtualinvoke $stack142.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-upstream");

        $stack144 = newarray (java.lang.String)[5];

        $stack144[0] = "module-parent";

        $stack144[1] = "module-c";

        $stack144[2] = "module-a";

        $stack144[3] = "module-b";

        $stack144[4] = "module-c-2";

        $stack145 = virtualinvoke $stack143.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack144);

        $stack0[21] = $stack145;

        $stack147 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected project with resume from and also make dependent (MNG-4960 IT#2)");

        $stack148 = newarray (java.lang.String)[1];

        $stack148[0] = "module-b";

        $stack149 = virtualinvoke $stack147.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack148);

        $stack150 = virtualinvoke $stack149.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-c-2");

        $stack151 = virtualinvoke $stack150.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-downstream");

        $stack152 = newarray (java.lang.String)[1];

        $stack152[0] = "module-c-2";

        $stack153 = virtualinvoke $stack151.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack152);

        $stack0[22] = $stack153;

        $stack155 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluding an also make dependency from selectedProject does take its transitive dependency");

        $stack156 = newarray (java.lang.String)[1];

        $stack156[0] = "module-c-2";

        $stack157 = virtualinvoke $stack155.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack156);

        $stack158 = newarray (java.lang.String)[1];

        $stack158[0] = "module-b";

        $stack159 = virtualinvoke $stack157.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack158);

        $stack160 = virtualinvoke $stack159.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-upstream");

        $stack161 = newarray (java.lang.String)[4];

        $stack161[0] = "module-parent";

        $stack161[1] = "module-c";

        $stack161[2] = "module-a";

        $stack161[3] = "module-c-2";

        $stack162 = virtualinvoke $stack160.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack161);

        $stack0[23] = $stack162;

        $stack164 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluding a project also excludes its children");

        $stack165 = newarray (java.lang.String)[1];

        $stack165[0] = "module-c";

        $stack166 = virtualinvoke $stack164.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack165);

        $stack167 = newarray (java.lang.String)[4];

        $stack167[0] = "module-parent";

        $stack167[1] = "module-a";

        $stack167[2] = "module-b";

        $stack167[3] = "module-independent";

        $stack168 = virtualinvoke $stack166.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack167);

        $stack0[24] = $stack168;

        $stack170 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Excluding an also make dependency from resumeFrom does take its transitive dependency");

        $stack171 = virtualinvoke $stack170.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-c-2");

        $stack172 = newarray (java.lang.String)[1];

        $stack172[0] = "module-b";

        $stack173 = virtualinvoke $stack171.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack172);

        $stack174 = virtualinvoke $stack173.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-upstream");

        $stack175 = newarray (java.lang.String)[5];

        $stack175[0] = "module-parent";

        $stack175[1] = "module-c";

        $stack175[2] = "module-a";

        $stack175[3] = "module-c-2";

        $stack175[4] = "module-independent";

        $stack176 = virtualinvoke $stack174.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack175);

        $stack0[25] = $stack176;

        $stack178 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Resume from exclude project downstream");

        $stack179 = virtualinvoke $stack178.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-a");

        $stack180 = newarray (java.lang.String)[1];

        $stack180[0] = "module-b";

        $stack181 = virtualinvoke $stack179.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack180);

        $stack182 = newarray (java.lang.String)[3];

        $stack182[0] = "module-a";

        $stack182[1] = "module-c-2";

        $stack182[2] = "module-independent";

        $stack183 = virtualinvoke $stack181.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack182);

        $stack0[26] = $stack183;

        $stack185 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Exclude the project we are resuming from (as proposed in MNG-6676)");

        $stack186 = virtualinvoke $stack185.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-b");

        $stack187 = newarray (java.lang.String)[1];

        $stack187[0] = "module-b";

        $stack188 = virtualinvoke $stack186.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder inactiveRequiredProjects(java.lang.String[])>($stack187);

        $stack189 = newarray (java.lang.String)[2];

        $stack189[0] = "module-c-2";

        $stack189[1] = "module-independent";

        $stack190 = virtualinvoke $stack188.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack189);

        $stack0[27] = $stack190;

        $stack192 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Selected projects in wrong order are resumed correctly in order");

        $stack193 = newarray (java.lang.String)[3];

        $stack193[0] = "module-c-2";

        $stack193[1] = "module-b";

        $stack193[2] = "module-a";

        $stack194 = virtualinvoke $stack192.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack193);

        $stack195 = virtualinvoke $stack194.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder resumeFrom(java.lang.String)>("module-b");

        $stack196 = newarray (java.lang.String)[2];

        $stack196[0] = "module-b";

        $stack196[1] = "module-c-2";

        $stack197 = virtualinvoke $stack195.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack196);

        $stack0[28] = $stack197;

        $stack199 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Duplicate projects are filtered out");

        $stack200 = newarray (java.lang.String)[2];

        $stack200[0] = "module-a";

        $stack200[1] = "module-a";

        $stack201 = virtualinvoke $stack199.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder activeRequiredProjects(java.lang.String[])>($stack200);

        $stack202 = newarray (java.lang.String)[1];

        $stack202[0] = "module-a";

        $stack203 = virtualinvoke $stack201.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack202);

        $stack0[29] = $stack203;

        $stack205 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Select reactor by specific pom");

        $stack206 = virtualinvoke $stack205.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder requestedPom(java.lang.String)>("module-c");

        $stack207 = newarray (java.lang.String)[3];

        $stack207[0] = "module-c";

        $stack207[1] = "module-c-1";

        $stack207[2] = "module-c-2";

        $stack208 = virtualinvoke $stack206.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack207);

        $stack0[30] = $stack208;

        $stack210 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Select reactor by specific pom with also make dependencies");

        $stack211 = virtualinvoke $stack210.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder requestedPom(java.lang.String)>("module-c");

        $stack212 = virtualinvoke $stack211.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-upstream");

        $stack213 = newarray (java.lang.String)[6];

        $stack213[0] = "module-parent";

        $stack213[1] = "module-c";

        $stack213[2] = "module-c-1";

        $stack213[3] = "module-a";

        $stack213[4] = "module-b";

        $stack213[5] = "module-c-2";

        $stack214 = virtualinvoke $stack212.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack213);

        $stack0[31] = $stack214;

        $stack216 = staticinvoke <org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder scenario(java.lang.String)>("Select reactor by specific pom with also make dependents");

        $stack217 = virtualinvoke $stack216.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder requestedPom(java.lang.String)>("module-b");

        $stack218 = virtualinvoke $stack217.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder makeBehavior(java.lang.String)>("make-downstream");

        $stack219 = newarray (java.lang.String)[2];

        $stack219[0] = "module-b";

        $stack219[1] = "module-c-2";

        $stack220 = virtualinvoke $stack218.<org.apache.maven.graph.DefaultGraphBuilderTest$ScenarioBuilder: org.junit.jupiter.params.provider.Arguments expectResult(java.lang.String[])>($stack219);

        $stack0[32] = $stack220;

        $stack221 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($stack0);

        return $stack221;
    }

    void testGetReactorProjects(java.lang.String, java.util.List, java.util.List, java.util.List, java.util.List, java.lang.String, java.lang.String, org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult, java.io.File, boolean)
    {
        java.util.List parameterActiveRequiredProjects, parameterActiveOptionalProjects, parameterInactiveRequiredProjects, parameterInactiveOptionalProjects, expectedReactorProjects, expectedProjectNames, actualReactorProjects;
        java.util.function.Consumer $stack18, $stack20, $stack22, $stack24, $stack60;
        DefaultGraphBuilderTest this;
        org.apache.maven.execution.MavenExecutionRequest $stack25, $stack29, $stack33, $stack37, $stack78;
        org.apache.maven.execution.ProjectActivation $stack26, $u0;
        org.mockito.stubbing.OngoingStubbing $stack27, $stack31, $stack35, $stack40, $stack80;
        java.lang.String $stack30, parameterMakeBehavior, parameterResumeFrom, parameterDescription, $stack79, $stack84, actualReactorProjects#4;
        java.io.File $stack34, parameterRequestedPom;
        boolean $stack38, parameterRecursive, $stack43, $stack47, $stack48, $stack61;
        java.lang.Boolean $stack39, $stack41;
        org.apache.maven.execution.MavenSession $stack44;
        org.apache.maven.graph.DefaultGraphBuilder $stack45;
        org.apache.maven.model.building.Result result;
        org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult parameterExpectedResult;
        org.assertj.core.api.AbstractBooleanAssert $stack49, $stack52, $stack62, $stack65;
        java.lang.Object[] $stack50, $stack63;
        org.assertj.core.api.AbstractAssert $stack51, $stack64;
        org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown $stack54, $stack55;
        java.lang.Iterable $stack56, $stack59;
        org.assertj.core.api.IterableAssert $stack57;
        org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult $stack67;
        java.lang.Object $stack68, $stack77;
        org.apache.maven.execution.ProjectDependencyGraph $stack69;
        java.util.stream.Stream $stack71, $stack75;
        java.util.Map $stack72;
        java.util.function.Function $stack74;
        java.util.stream.Collector $stack76;
        java.lang.StringBuilder $stack82, $stack83, $u1;
        java.lang.Class expectedProjectNames#3;
        org.apache.maven.graph.DefaultGraphBuilderTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: DefaultGraphBuilderTest;

        parameterDescription := @parameter0: java.lang.String;

        parameterActiveRequiredProjects := @parameter1: java.util.List;

        parameterActiveOptionalProjects := @parameter2: java.util.List;

        parameterInactiveRequiredProjects := @parameter3: java.util.List;

        parameterInactiveOptionalProjects := @parameter4: java.util.List;

        parameterResumeFrom := @parameter5: java.lang.String;

        parameterMakeBehavior := @parameter6: java.lang.String;

        parameterExpectedResult := @parameter7: org.apache.maven.graph.DefaultGraphBuilderTest$ExpectedResult;

        parameterRequestedPom := @parameter8: java.io.File;

        parameterRecursive := @parameter9: boolean;

        $u0 = new org.apache.maven.execution.ProjectActivation;

        specialinvoke $u0.<org.apache.maven.execution.ProjectActivation: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($u0);

        $stack18 = staticinvoke <DefaultGraphBuilderTest$activateRequiredProject__309: java.util.function.Consumer bootstrap$(org.apache.maven.execution.ProjectActivation)>($u0);

        interfaceinvoke parameterActiveRequiredProjects.<java.util.List: void forEach(java.util.function.Consumer)>($stack18);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($u0);

        $stack20 = staticinvoke <DefaultGraphBuilderTest$activateOptionalProject__312: java.util.function.Consumer bootstrap$(org.apache.maven.execution.ProjectActivation)>($u0);

        interfaceinvoke parameterActiveOptionalProjects.<java.util.List: void forEach(java.util.function.Consumer)>($stack20);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($u0);

        $stack22 = staticinvoke <DefaultGraphBuilderTest$deactivateRequiredProject__313: java.util.function.Consumer bootstrap$(org.apache.maven.execution.ProjectActivation)>($u0);

        interfaceinvoke parameterInactiveRequiredProjects.<java.util.List: void forEach(java.util.function.Consumer)>($stack22);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($u0);

        $stack24 = staticinvoke <DefaultGraphBuilderTest$deactivateOptionalProject__314: java.util.function.Consumer bootstrap$(org.apache.maven.execution.ProjectActivation)>($u0);

        interfaceinvoke parameterInactiveOptionalProjects.<java.util.List: void forEach(java.util.function.Consumer)>($stack24);

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack25 = $r0.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        $stack26 = interfaceinvoke $stack25.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.ProjectActivation getProjectActivation()>();

        $stack27 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack26);

        interfaceinvoke $stack27.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($u0);

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack29 = $r1.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        $stack30 = interfaceinvoke $stack29.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getMakeBehavior()>();

        $stack31 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack30);

        interfaceinvoke $stack31.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(parameterMakeBehavior);

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack33 = $r2.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        $stack34 = interfaceinvoke $stack33.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack35 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack34);

        interfaceinvoke $stack35.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(parameterRequestedPom);

        $r3 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack37 = $r3.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        $stack38 = interfaceinvoke $stack37.<org.apache.maven.execution.MavenExecutionRequest: boolean isRecursive()>();

        $stack39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack38);

        $stack40 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack39);

        $stack41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(parameterRecursive);

        interfaceinvoke $stack40.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack41);

        $stack43 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>(parameterResumeFrom);

        if $stack43 == 0 goto label1;

        $r4 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack78 = $r4.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        $stack79 = interfaceinvoke $stack78.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getResumeFrom()>();

        $stack80 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack79);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack82 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(parameterResumeFrom);

        $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack80.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack84);

     label1:
        $r5 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack45 = $r5.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.graph.DefaultGraphBuilder graphBuilder>;

        $r6 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack44 = $r6.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenSession session>;

        result = virtualinvoke $stack45.<org.apache.maven.graph.DefaultGraphBuilder: org.apache.maven.model.building.Result build(org.apache.maven.execution.MavenSession)>($stack44);

        $stack47 = parameterExpectedResult instanceof org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult;

        if $stack47 == 0 goto label2;

        $stack61 = virtualinvoke result.<org.apache.maven.model.building.Result: boolean hasErrors()>();

        $stack62 = staticinvoke <org.assertj.core.api.Assertions: org.assertj.core.api.AbstractBooleanAssert assertThat(boolean)>($stack61);

        $stack63 = newarray (java.lang.Object)[0];

        $stack64 = virtualinvoke $stack62.<org.assertj.core.api.AbstractBooleanAssert: org.assertj.core.api.AbstractAssert withFailMessage(java.lang.String,java.lang.Object[])>("Expected result not to have errors", $stack63);

        $stack65 = (org.assertj.core.api.AbstractBooleanAssert) $stack64;

        virtualinvoke $stack65.<org.assertj.core.api.AbstractBooleanAssert: org.assertj.core.api.AbstractBooleanAssert isFalse()>();

        $stack67 = (org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult) parameterExpectedResult;

        expectedProjectNames = $stack67.<org.apache.maven.graph.DefaultGraphBuilderTest$SelectedProjectsResult: java.util.List projectNames>;

        $stack68 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Object get()>();

        $stack69 = (org.apache.maven.execution.ProjectDependencyGraph) $stack68;

        actualReactorProjects = interfaceinvoke $stack69.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getSortedProjects()>();

        $stack71 = interfaceinvoke expectedProjectNames.<java.util.List: java.util.stream.Stream stream()>();

        $r7 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack72 = $r7.<org.apache.maven.graph.DefaultGraphBuilderTest: java.util.Map artifactIdProjectMap>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($stack72);

        $stack74 = staticinvoke <DefaultGraphBuilderTest$get__316: java.util.function.Function bootstrap$(java.util.Map)>($stack72);

        $stack75 = interfaceinvoke $stack71.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack74);

        $stack76 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $stack77 = interfaceinvoke $stack75.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack76);

        expectedReactorProjects = (java.util.List) $stack77;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(expectedReactorProjects, actualReactorProjects, parameterDescription);

        goto label3;

     label2:
        $stack48 = virtualinvoke result.<org.apache.maven.model.building.Result: boolean hasErrors()>();

        $stack49 = staticinvoke <org.assertj.core.api.Assertions: org.assertj.core.api.AbstractBooleanAssert assertThat(boolean)>($stack48);

        $stack50 = newarray (java.lang.Object)[0];

        $stack51 = virtualinvoke $stack49.<org.assertj.core.api.AbstractBooleanAssert: org.assertj.core.api.AbstractAssert withFailMessage(java.lang.String,java.lang.Object[])>("Expected result to have errors", $stack50);

        $stack52 = (org.assertj.core.api.AbstractBooleanAssert) $stack51;

        virtualinvoke $stack52.<org.assertj.core.api.AbstractBooleanAssert: org.assertj.core.api.AbstractBooleanAssert isTrue()>();

        $stack54 = (org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown) parameterExpectedResult;

        expectedProjectNames#3 = $stack54.<org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown: java.lang.Class expected>;

        $stack55 = (org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown) parameterExpectedResult;

        actualReactorProjects#4 = $stack55.<org.apache.maven.graph.DefaultGraphBuilderTest$ExceptionThrown: java.lang.String partOfMessage>;

        $stack56 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        $stack57 = staticinvoke <org.assertj.core.api.Assertions: org.assertj.core.api.IterableAssert assertThat(java.lang.Iterable)>($stack56);

        virtualinvoke $stack57.<org.assertj.core.api.IterableAssert: org.assertj.core.api.AbstractIterableAssert hasSize(int)>(1);

        $stack59 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        $stack60 = staticinvoke <DefaultGraphBuilderTest$lambda_testGetReactorProjects_0__315: java.util.function.Consumer bootstrap$(java.lang.Class,java.lang.String)>(expectedProjectNames#3, actualReactorProjects#4);

        interfaceinvoke $stack59.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($stack60);

     label3:
        return;
    }

    public void before() throws java.lang.Exception
    {
        DefaultGraphBuilderTest this;
        java.lang.Object $stack10, $stack27, $stack49, $stack58;
        org.apache.maven.project.collector.RequestPomCollectionStrategy $stack11;
        org.apache.maven.project.collector.MultiModuleCollectionStrategy $stack12;
        org.apache.maven.project.collector.PomlessCollectionStrategy $stack13;
        org.apache.maven.execution.BuildResumptionDataRepository $stack14;
        org.apache.maven.project.MavenProject projectParent, projectIndependentModule, projectModuleA, projectModuleB, projectModuleC, projectModuleC1, projectModuleC2;
        org.apache.maven.project.MavenProject[] $stack22, $stack33, $stack35;
        java.util.stream.Stream $stack23;
        java.util.function.Function $stack24, $stack25;
        java.util.stream.Collector $stack26;
        java.util.Map $stack28, $stack52;
        org.apache.maven.model.Dependency $stack29, $stack31;
        java.util.List $stack30, $stack32, $stack34, $stack36, $stack43, projectBuildingResults, $stack56, $stack60;
        org.apache.maven.execution.MavenSession $stack37, $stack42;
        org.apache.maven.execution.MavenExecutionRequest $stack38, $stack40, $stack46;
        org.mockito.stubbing.OngoingStubbing $stack39, $stack44, $stack48, $stack61;
        org.apache.maven.project.ProjectBuildingRequest $stack47, $stack50, $stack59;
        java.util.Collection $stack53;
        org.apache.maven.project.ProjectBuilder $stack55;
        boolean $stack57;
        org.apache.maven.graph.DefaultGraphBuilder $u0;
        org.apache.maven.graph.DefaultGraphBuilderTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        this := @this: DefaultGraphBuilderTest;

        $u0 = new org.apache.maven.graph.DefaultGraphBuilder;

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/execution/BuildResumptionDataRepository;");

        $stack14 = (org.apache.maven.execution.BuildResumptionDataRepository) $stack10;

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack13 = $r0.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.PomlessCollectionStrategy pomlessCollectionStrategy>;

        $r1 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack12 = $r1.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.MultiModuleCollectionStrategy multiModuleCollectionStrategy>;

        $r2 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack11 = $r2.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.collector.RequestPomCollectionStrategy requestPomCollectionStrategy>;

        specialinvoke $u0.<org.apache.maven.graph.DefaultGraphBuilder: void <init>(org.apache.maven.execution.BuildResumptionDataRepository,org.apache.maven.project.collector.PomlessCollectionStrategy,org.apache.maven.project.collector.MultiModuleCollectionStrategy,org.apache.maven.project.collector.RequestPomCollectionStrategy)>($stack14, $stack13, $stack12, $stack11);

        $r3 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r3.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.graph.DefaultGraphBuilder graphBuilder> = $u0;

        $r4 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectParent = specialinvoke $r4.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String)>("module-parent");

        $r5 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectIndependentModule = specialinvoke $r5.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String)>("module-independent");

        $r6 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectModuleA = specialinvoke $r6.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String,org.apache.maven.project.MavenProject)>("module-a", projectParent);

        $r7 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectModuleB = specialinvoke $r7.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String,org.apache.maven.project.MavenProject)>("module-b", projectParent);

        $r8 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectModuleC = specialinvoke $r8.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String,org.apache.maven.project.MavenProject)>("module-c", projectParent);

        $r9 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectModuleC1 = specialinvoke $r9.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String,org.apache.maven.project.MavenProject)>("module-c-1", projectModuleC);

        $r10 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectModuleC2 = specialinvoke $r10.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String,org.apache.maven.project.MavenProject)>("module-c-2", projectModuleC);

        $stack22 = newarray (org.apache.maven.project.MavenProject)[7];

        $stack22[0] = projectParent;

        $stack22[1] = projectIndependentModule;

        $stack22[2] = projectModuleA;

        $stack22[3] = projectModuleB;

        $stack22[4] = projectModuleC;

        $stack22[5] = projectModuleC1;

        $stack22[6] = projectModuleC2;

        $stack23 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($stack22);

        $stack24 = staticinvoke <DefaultGraphBuilderTest$getArtifactId__310: java.util.function.Function bootstrap$()>();

        $stack25 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $stack26 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($stack24, $stack25);

        $stack27 = interfaceinvoke $stack23.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack26);

        $stack28 = (java.util.Map) $stack27;

        $r11 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $r11.<org.apache.maven.graph.DefaultGraphBuilderTest: java.util.Map artifactIdProjectMap> = $stack28;

        $r12 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack29 = specialinvoke $r12.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>(projectModuleA);

        $stack30 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($stack29);

        virtualinvoke projectModuleB.<org.apache.maven.project.MavenProject: void setDependencies(java.util.List)>($stack30);

        $r13 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack31 = specialinvoke $r13.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>(projectModuleB);

        $stack32 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($stack31);

        virtualinvoke projectModuleC2.<org.apache.maven.project.MavenProject: void setDependencies(java.util.List)>($stack32);

        $stack33 = newarray (org.apache.maven.project.MavenProject)[6];

        $stack33[0] = projectIndependentModule;

        $stack33[1] = projectModuleA;

        $stack33[2] = projectModuleB;

        $stack33[3] = projectModuleC;

        $stack33[4] = projectModuleC1;

        $stack33[5] = projectModuleC2;

        $stack34 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack33);

        virtualinvoke projectParent.<org.apache.maven.project.MavenProject: void setCollectedProjects(java.util.List)>($stack34);

        $stack35 = newarray (org.apache.maven.project.MavenProject)[2];

        $stack35[0] = projectModuleC1;

        $stack35[1] = projectModuleC2;

        $stack36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack35);

        virtualinvoke projectModuleC.<org.apache.maven.project.MavenProject: void setCollectedProjects(java.util.List)>($stack36);

        $r14 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack37 = $r14.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenSession session>;

        $stack38 = virtualinvoke $stack37.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack39 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack38);

        $r15 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack40 = $r15.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        interfaceinvoke $stack39.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack40);

        $r16 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack42 = $r16.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenSession session>;

        $stack43 = virtualinvoke $stack42.<org.apache.maven.execution.MavenSession: java.util.List getProjects()>();

        $stack44 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack43);

        interfaceinvoke $stack44.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(null);

        $r17 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack46 = $r17.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.execution.MavenExecutionRequest mavenExecutionRequest>;

        $stack47 = interfaceinvoke $stack46.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.project.ProjectBuildingRequest getProjectBuildingRequest()>();

        $stack48 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack47);

        $stack49 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuildingRequest;");

        $stack50 = (org.apache.maven.project.ProjectBuildingRequest) $stack49;

        interfaceinvoke $stack48.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack50);

        $r18 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack52 = $r18.<org.apache.maven.graph.DefaultGraphBuilderTest: java.util.Map artifactIdProjectMap>;

        $stack53 = interfaceinvoke $stack52.<java.util.Map: java.util.Collection values()>();

        $r19 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        projectBuildingResults = specialinvoke $r19.<org.apache.maven.graph.DefaultGraphBuilderTest: java.util.List createProjectBuildingResultMocks(java.util.Collection)>($stack53);

        $r20 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        $stack55 = $r20.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $stack56 = staticinvoke <org.mockito.ArgumentMatchers: java.util.List anyList()>();

        $stack57 = staticinvoke <org.mockito.ArgumentMatchers: boolean anyBoolean()>();

        $stack58 = staticinvoke <org.mockito.ArgumentMatchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuildingRequest;");

        $stack59 = (org.apache.maven.project.ProjectBuildingRequest) $stack58;

        $stack60 = interfaceinvoke $stack55.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack56, $stack57, $stack59);

        $stack61 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack60);

        interfaceinvoke $stack61.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(projectBuildingResults);

        return;
    }

    private org.apache.maven.project.MavenProject getMavenProject(java.lang.String, org.apache.maven.project.MavenProject)
    {
        DefaultGraphBuilderTest this;
        java.lang.String artifactId, $stack7, $stack8;
        org.apache.maven.project.MavenProject project, parentProject;
        org.apache.maven.model.Model $stack9;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.graph.DefaultGraphBuilderTest $r0;

        this := @this: DefaultGraphBuilderTest;

        artifactId := @parameter0: java.lang.String;

        parentProject := @parameter1: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.graph.DefaultGraphBuilderTest) this;

        project = specialinvoke $r0.<org.apache.maven.graph.DefaultGraphBuilderTest: org.apache.maven.project.MavenProject getMavenProject(java.lang.String)>(artifactId);

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        $stack7 = virtualinvoke parentProject.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>($stack7);

        $stack8 = virtualinvoke parentProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>($stack8);

        $stack9 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack9.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($u0);

        return project;
    }

    private org.apache.maven.project.MavenProject getMavenProject(java.lang.String)
    {
        org.apache.maven.project.MavenProject $stack3;
        java.lang.String artifactId;
        java.io.File $stack4;
        java.util.ArrayList $stack5;
        DefaultGraphBuilderTest this;

        this := @this: DefaultGraphBuilderTest;

        artifactId := @parameter0: java.lang.String;

        $stack3 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack3.<org.apache.maven.project.MavenProject: void <init>()>();

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setGroupId(java.lang.String)>("unittest");

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setVersion(java.lang.String)>("1.0");

        $stack4 = new java.io.File;

        specialinvoke $stack4.<java.io.File: void <init>(java.lang.String,java.lang.String)>(artifactId, "pom.xml");

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setPomFile(java.io.File)>($stack4);

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setCollectedProjects(java.util.List)>($stack5);

        return $stack3;
    }

    private org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)
    {
        org.apache.maven.model.Dependency $stack3;
        org.apache.maven.project.MavenProject mavenProject;
        java.lang.String $stack4, $stack5, $stack6;
        DefaultGraphBuilderTest this;

        this := @this: DefaultGraphBuilderTest;

        mavenProject := @parameter0: org.apache.maven.project.MavenProject;

        $stack3 = new org.apache.maven.model.Dependency;

        specialinvoke $stack3.<org.apache.maven.model.Dependency: void <init>()>();

        $stack4 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        virtualinvoke $stack3.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>($stack4);

        $stack5 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        virtualinvoke $stack3.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>($stack5);

        $stack6 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        virtualinvoke $stack3.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>($stack6);

        return $stack3;
    }

    private java.util.List createProjectBuildingResultMocks(java.util.Collection)
    {
        java.util.Collection projects;
        java.util.stream.Stream $stack2, $stack4;
        java.util.function.Function $stack3;
        java.util.stream.Collector $stack5;
        java.lang.Object $stack6;
        java.util.List $stack7;
        DefaultGraphBuilderTest this;

        this := @this: DefaultGraphBuilderTest;

        projects := @parameter0: java.util.Collection;

        $stack2 = interfaceinvoke projects.<java.util.Collection: java.util.stream.Stream stream()>();

        $stack3 = staticinvoke <DefaultGraphBuilderTest$lambda_createProjectBuildingResultMocks_1__311: java.util.function.Function bootstrap$()>();

        $stack4 = interfaceinvoke $stack2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack3);

        $stack5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack5);

        $stack7 = (java.util.List) $stack6;

        return $stack7;
    }

    private static org.apache.maven.project.ProjectBuildingResult lambda$createProjectBuildingResultMocks$1(org.apache.maven.project.MavenProject)
    {
        java.lang.Object $stack2;
        org.apache.maven.project.ProjectBuildingResult result;
        org.apache.maven.project.MavenProject $stack3, project;
        org.mockito.stubbing.OngoingStubbing $stack4;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuildingResult;");

        result = (org.apache.maven.project.ProjectBuildingResult) $stack2;

        $stack3 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack3);

        interfaceinvoke $stack4.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(project);

        return result;
    }

    private static void lambda$testGetReactorProjects$0(java.lang.Class, java.lang.String, org.apache.maven.model.building.ModelProblem)
    {
        org.apache.maven.model.building.ModelProblem p;
        java.lang.Exception $stack3;
        org.assertj.core.api.AbstractThrowableAssert $stack4, $stack6;
        java.lang.Class expectedException;
        org.assertj.core.api.AbstractAssert $stack5;
        java.lang.String partOfMessage;

        expectedException := @parameter0: java.lang.Class;

        partOfMessage := @parameter1: java.lang.String;

        p := @parameter2: org.apache.maven.model.building.ModelProblem;

        $stack3 = interfaceinvoke p.<org.apache.maven.model.building.ModelProblem: java.lang.Exception getException()>();

        $stack4 = staticinvoke <org.assertj.core.api.Assertions: org.assertj.core.api.AbstractThrowableAssert assertThat(java.lang.Throwable)>($stack3);

        $stack5 = virtualinvoke $stack4.<org.assertj.core.api.AbstractThrowableAssert: org.assertj.core.api.AbstractAssert isInstanceOf(java.lang.Class)>(expectedException);

        $stack6 = (org.assertj.core.api.AbstractThrowableAssert) $stack5;

        virtualinvoke $stack6.<org.assertj.core.api.AbstractThrowableAssert: org.assertj.core.api.AbstractThrowableAssert hasMessageContaining(java.lang.String)>(partOfMessage);

        return;
    }

    public static void <clinit>()
    {
        <DefaultGraphBuilderTest: java.lang.String MODULE_C_2> = "module-c-2";

        <DefaultGraphBuilderTest: java.lang.String MODULE_C_1> = "module-c-1";

        <DefaultGraphBuilderTest: java.lang.String MODULE_C> = "module-c";

        <DefaultGraphBuilderTest: java.lang.String MODULE_B> = "module-b";

        <DefaultGraphBuilderTest: java.lang.String MODULE_A> = "module-a";

        <DefaultGraphBuilderTest: java.lang.String INDEPENDENT_MODULE> = "module-independent";

        <DefaultGraphBuilderTest: java.lang.String PARENT_MODULE> = "module-parent";

        <DefaultGraphBuilderTest: java.lang.String GROUP_ID> = "unittest";

        return;
    }
}
