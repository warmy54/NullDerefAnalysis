public class DefaultGraphConflictResolver extends java.lang.Object implements org.apache.maven.repository.metadata.GraphConflictResolver
{
    protected org.apache.maven.repository.metadata.GraphConflictResolutionPolicy policy;

    public void <init>()
    {
        DefaultGraphConflictResolver this;

        this := @this: DefaultGraphConflictResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.repository.metadata.MetadataGraph resolveConflicts(org.apache.maven.repository.metadata.MetadataGraph, org.apache.maven.artifact.ArtifactScopeEnum) throws org.apache.maven.repository.metadata.GraphConflictResolutionException
    {
        DefaultGraphConflictResolver this;
        org.apache.maven.repository.metadata.GraphConflictResolutionPolicy $stack16;
        org.apache.maven.repository.metadata.MetadataGraph graph, linkedRes#73, $u2, $u3;
        org.apache.maven.repository.metadata.MetadataGraphVertex entry, resEntry, v, $stack42, $stack43, $stack47, $stack48, newV, sourceV, $stack70, $stack52;
        boolean $stack18, $stack19, $stack28, $stack69, $stack46;
        java.util.TreeSet vertices;
        int $stack21, $stack24;
        org.apache.maven.artifact.ArtifactScopeEnum scope, requestedScope, $stack39;
        org.apache.maven.repository.metadata.ArtifactMetadata $stack25, md, $stack44, $stack49, $stack71, $stack53, $u4;
        java.lang.Object $stack30;
        java.util.List ins;
        org.apache.maven.repository.metadata.MetadataGraphEdge edge;
        java.lang.Throwable $stack75, $r1, $r2, $r5;
        java.util.Iterator linkedRes;
        java.lang.String $stack35, $stack36, $stack37, $stack38, $stack40, $stack41, $stack45, $stack50;
        org.apache.maven.repository.metadata.GraphConflictResolutionException $u0, $u1, $u5;
        org.apache.maven.repository.metadata.DefaultGraphConflictResolver $r0, $r3, $r4;

        this := @this: DefaultGraphConflictResolver;

        graph := @parameter0: org.apache.maven.repository.metadata.MetadataGraph;

        scope := @parameter1: org.apache.maven.artifact.ArtifactScopeEnum;

        $r0 = (org.apache.maven.repository.metadata.DefaultGraphConflictResolver) this;

        $stack16 = $r0.<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.GraphConflictResolutionPolicy policy>;

        if $stack16 != null goto label01;

        $u0 = new org.apache.maven.repository.metadata.GraphConflictResolutionException;

        specialinvoke $u0.<org.apache.maven.repository.metadata.GraphConflictResolutionException: void <init>(java.lang.String)>("no GraphConflictResolutionPolicy injected");

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label01:
        if graph != null goto label02;

        return null;

     label02:
        entry = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex getEntry()>();

        if entry != null goto label03;

        return null;

     label03:
        $stack18 = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: boolean isEmpty()>();

        if $stack18 == 0 goto label04;

        $u1 = new org.apache.maven.repository.metadata.GraphConflictResolutionException;

        specialinvoke $u1.<org.apache.maven.repository.metadata.GraphConflictResolutionException: void <init>(java.lang.String)>("graph with an entry, but not vertices do not exist");

        $r2 = (java.lang.Throwable) $u1;

        throw $r2;

     label04:
        $stack19 = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: boolean isEmptyEdges()>();

        if $stack19 == 0 goto label05;

        return null;

     label05:
        vertices = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: java.util.TreeSet getVertices()>();

     label06:
        $stack21 = virtualinvoke vertices.<java.util.TreeSet: int size()>();

        if $stack21 != 1 goto label08;

        $u2 = new org.apache.maven.repository.metadata.MetadataGraph;

        specialinvoke $u2.<org.apache.maven.repository.metadata.MetadataGraph: void <init>(org.apache.maven.repository.metadata.MetadataGraphVertex)>(entry);

     label07:
        return $u2;

     label08:
        requestedScope = staticinvoke <org.apache.maven.artifact.ArtifactScopeEnum: org.apache.maven.artifact.ArtifactScopeEnum checkScope(org.apache.maven.artifact.ArtifactScopeEnum)>(scope);

        $u3 = new org.apache.maven.repository.metadata.MetadataGraph;

        $stack24 = virtualinvoke vertices.<java.util.TreeSet: int size()>();

        specialinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: void <init>(int)>($stack24);

        virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: void setVersionedVertices(boolean)>(0);

        virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: void setScopedVertices(boolean)>(0);

        $stack25 = virtualinvoke entry.<org.apache.maven.repository.metadata.MetadataGraphVertex: org.apache.maven.repository.metadata.ArtifactMetadata getMd()>();

        resEntry = virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex addVertex(org.apache.maven.repository.metadata.ArtifactMetadata)>($stack25);

        virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: void setEntry(org.apache.maven.repository.metadata.MetadataGraphVertex)>(resEntry);

        virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: void setScope(org.apache.maven.artifact.ArtifactScopeEnum)>(requestedScope);

        linkedRes = virtualinvoke vertices.<java.util.TreeSet: java.util.Iterator iterator()>();

     label09:
        $stack28 = interfaceinvoke linkedRes.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label16;

        $stack30 = interfaceinvoke linkedRes.<java.util.Iterator: java.lang.Object next()>();

        v = (org.apache.maven.repository.metadata.MetadataGraphVertex) $stack30;

        ins = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: java.util.List getIncidentEdges(org.apache.maven.repository.metadata.MetadataGraphVertex)>(v);

        $r3 = (org.apache.maven.repository.metadata.DefaultGraphConflictResolver) this;

        edge = specialinvoke $r3.<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.MetadataGraphEdge cleanEdges(org.apache.maven.repository.metadata.MetadataGraphVertex,java.util.List,org.apache.maven.artifact.ArtifactScopeEnum)>(v, ins, requestedScope);

        if edge != null goto label10;

        $stack69 = virtualinvoke entry.<org.apache.maven.repository.metadata.MetadataGraphVertex: boolean equals(java.lang.Object)>(v);

        if $stack69 == 0 goto label15;

        $stack70 = virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex getEntry()>();

        $stack71 = virtualinvoke $stack70.<org.apache.maven.repository.metadata.MetadataGraphVertex: org.apache.maven.repository.metadata.ArtifactMetadata getMd()>();

        virtualinvoke $stack71.<org.apache.maven.repository.metadata.ArtifactMetadata: void setWhy(java.lang.String)>("This is a graph entry point. No links.");

        goto label15;

     label10:
        md = virtualinvoke v.<org.apache.maven.repository.metadata.MetadataGraphVertex: org.apache.maven.repository.metadata.ArtifactMetadata getMd()>();

        $u4 = new org.apache.maven.repository.metadata.ArtifactMetadata;

        $stack35 = virtualinvoke md.<org.apache.maven.repository.metadata.ArtifactMetadata: java.lang.String getGroupId()>();

        $stack36 = virtualinvoke md.<org.apache.maven.repository.metadata.ArtifactMetadata: java.lang.String getArtifactId()>();

        $stack37 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: java.lang.String getVersion()>();

        $stack38 = virtualinvoke md.<org.apache.maven.repository.metadata.ArtifactMetadata: java.lang.String getType()>();

        $stack39 = virtualinvoke md.<org.apache.maven.repository.metadata.ArtifactMetadata: org.apache.maven.artifact.ArtifactScopeEnum getScopeAsEnum()>();

        $stack40 = virtualinvoke md.<org.apache.maven.repository.metadata.ArtifactMetadata: java.lang.String getClassifier()>();

        $stack41 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: java.lang.String getArtifactUri()>();

        $stack42 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.repository.metadata.MetadataGraphVertex getSource()>();

        if $stack42 != null goto label11;

        $stack45 = "";

        goto label12;

     label11:
        $stack43 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.repository.metadata.MetadataGraphVertex getSource()>();

        $stack44 = virtualinvoke $stack43.<org.apache.maven.repository.metadata.MetadataGraphVertex: org.apache.maven.repository.metadata.ArtifactMetadata getMd()>();

        $stack45 = virtualinvoke $stack44.<org.apache.maven.repository.metadata.ArtifactMetadata: java.lang.String toString()>();

     label12:
        $stack46 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: boolean isResolved()>();

        $stack47 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.repository.metadata.MetadataGraphVertex getTarget()>();

        if $stack47 != null goto label13;

        $stack50 = null;

        goto label14;

     label13:
        $stack48 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.repository.metadata.MetadataGraphVertex getTarget()>();

        $stack49 = virtualinvoke $stack48.<org.apache.maven.repository.metadata.MetadataGraphVertex: org.apache.maven.repository.metadata.ArtifactMetadata getMd()>();

        $stack50 = virtualinvoke $stack49.<org.apache.maven.repository.metadata.ArtifactMetadata: java.lang.String getError()>();

     label14:
        specialinvoke $u4.<org.apache.maven.repository.metadata.ArtifactMetadata: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.ArtifactScopeEnum,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)>($stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack45, $stack46, $stack50);

        newV = virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex addVertex(org.apache.maven.repository.metadata.ArtifactMetadata)>($u4);

        $stack52 = virtualinvoke edge.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.repository.metadata.MetadataGraphVertex getSource()>();

        $stack53 = virtualinvoke $stack52.<org.apache.maven.repository.metadata.MetadataGraphVertex: org.apache.maven.repository.metadata.ArtifactMetadata getMd()>();

        sourceV = virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex addVertex(org.apache.maven.repository.metadata.ArtifactMetadata)>($stack53);

        virtualinvoke $u3.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraph addEdge(org.apache.maven.repository.metadata.MetadataGraphVertex,org.apache.maven.repository.metadata.MetadataGraphVertex,org.apache.maven.repository.metadata.MetadataGraphEdge)>(sourceV, newV, edge);

     label15:
        goto label09;

     label16:
        $r4 = (org.apache.maven.repository.metadata.DefaultGraphConflictResolver) this;

        linkedRes#73 = specialinvoke $r4.<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.MetadataGraph findLinkedSubgraph(org.apache.maven.repository.metadata.MetadataGraph)>($u3);

     label17:
        return linkedRes#73;

     label18:
        $stack75 := @caughtexception;

        $u5 = new org.apache.maven.repository.metadata.GraphConflictResolutionException;

        specialinvoke $u5.<org.apache.maven.repository.metadata.GraphConflictResolutionException: void <init>(java.lang.Throwable)>($stack75);

        $r5 = (java.lang.Throwable) $u5;

        throw $r5;

        catch org.apache.maven.repository.metadata.MetadataResolutionException from label06 to label07 with label18;
        catch org.apache.maven.repository.metadata.MetadataResolutionException from label08 to label17 with label18;
    }

    private org.apache.maven.repository.metadata.MetadataGraph findLinkedSubgraph(org.apache.maven.repository.metadata.MetadataGraph)
    {
        org.apache.maven.repository.metadata.MetadataGraph g;
        java.util.TreeSet $stack7, $stack10, $stack14, $stack16, vertices#3;
        int $stack8, $stack11, $stack15, $stack19;
        DefaultGraphConflictResolver this;
        org.apache.maven.repository.metadata.MetadataGraphVertex $stack12, v;
        boolean $stack18, $stack22, $stack27;
        java.lang.Object $stack23, $stack26;
        java.util.Iterator vertices, v;
        java.util.ArrayList $u0, $u1;
        org.apache.maven.repository.metadata.DefaultGraphConflictResolver $r0;

        this := @this: DefaultGraphConflictResolver;

        g := @parameter0: org.apache.maven.repository.metadata.MetadataGraph;

        $stack7 = virtualinvoke g.<org.apache.maven.repository.metadata.MetadataGraph: java.util.TreeSet getVertices()>();

        $stack8 = virtualinvoke $stack7.<java.util.TreeSet: int size()>();

        if $stack8 != 1 goto label1;

        return g;

     label1:
        $u0 = new java.util.ArrayList;

        $stack10 = virtualinvoke g.<org.apache.maven.repository.metadata.MetadataGraph: java.util.TreeSet getVertices()>();

        $stack11 = virtualinvoke $stack10.<java.util.TreeSet: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack11);

        $stack12 = virtualinvoke g.<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex getEntry()>();

        $r0 = (org.apache.maven.repository.metadata.DefaultGraphConflictResolver) this;

        specialinvoke $r0.<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: void visit(org.apache.maven.repository.metadata.MetadataGraphVertex,java.util.List,org.apache.maven.repository.metadata.MetadataGraph)>($stack12, $u0, g);

        $u1 = new java.util.ArrayList;

        $stack14 = virtualinvoke g.<org.apache.maven.repository.metadata.MetadataGraph: java.util.TreeSet getVertices()>();

        $stack15 = virtualinvoke $stack14.<java.util.TreeSet: int size()>();

        specialinvoke $u1.<java.util.ArrayList: void <init>(int)>($stack15);

        $stack16 = virtualinvoke g.<org.apache.maven.repository.metadata.MetadataGraph: java.util.TreeSet getVertices()>();

        vertices = virtualinvoke $stack16.<java.util.TreeSet: java.util.Iterator iterator()>();

     label2:
        $stack18 = interfaceinvoke vertices.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label4;

        $stack26 = interfaceinvoke vertices.<java.util.Iterator: java.lang.Object next()>();

        v = (org.apache.maven.repository.metadata.MetadataGraphVertex) $stack26;

        $stack27 = interfaceinvoke $u0.<java.util.List: boolean contains(java.lang.Object)>(v);

        if $stack27 != 0 goto label3;

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>(v);

     label3:
        goto label2;

     label4:
        $stack19 = interfaceinvoke $u1.<java.util.List: int size()>();

        if $stack19 >= 1 goto label5;

        return g;

     label5:
        vertices#3 = virtualinvoke g.<org.apache.maven.repository.metadata.MetadataGraph: java.util.TreeSet getVertices()>();

        v = interfaceinvoke $u1.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $stack22 = interfaceinvoke v.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label7;

        $stack23 = interfaceinvoke v.<java.util.Iterator: java.lang.Object next()>();

        v = (org.apache.maven.repository.metadata.MetadataGraphVertex) $stack23;

        virtualinvoke vertices#3.<java.util.TreeSet: boolean remove(java.lang.Object)>(v);

        goto label6;

     label7:
        return g;
    }

    private void visit(org.apache.maven.repository.metadata.MetadataGraphVertex, java.util.List, org.apache.maven.repository.metadata.MetadataGraph)
    {
        java.util.List visited, exitList, $stack11;
        org.apache.maven.repository.metadata.MetadataGraphVertex 'from', $stack15;
        boolean $stack7, $stack13;
        org.apache.maven.repository.metadata.MetadataGraph graph;
        int $stack10;
        java.util.Iterator l5;
        java.lang.Object $stack14;
        org.apache.maven.repository.metadata.MetadataGraphEdge e;
        DefaultGraphConflictResolver this;
        org.apache.maven.repository.metadata.DefaultGraphConflictResolver $r0;

        this := @this: DefaultGraphConflictResolver;

        'from' := @parameter0: org.apache.maven.repository.metadata.MetadataGraphVertex;

        visited := @parameter1: java.util.List;

        graph := @parameter2: org.apache.maven.repository.metadata.MetadataGraph;

        $stack7 = interfaceinvoke visited.<java.util.List: boolean contains(java.lang.Object)>('from');

        if $stack7 == 0 goto label1;

        return;

     label1:
        interfaceinvoke visited.<java.util.List: boolean add(java.lang.Object)>('from');

        exitList = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: java.util.List getExcidentEdges(org.apache.maven.repository.metadata.MetadataGraphVertex)>('from');

        if exitList == null goto label3;

        $stack10 = interfaceinvoke exitList.<java.util.List: int size()>();

        if $stack10 <= 0 goto label3;

        $stack11 = virtualinvoke graph.<org.apache.maven.repository.metadata.MetadataGraph: java.util.List getExcidentEdges(org.apache.maven.repository.metadata.MetadataGraphVertex)>('from');

        l5 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack13 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label3;

        $stack14 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        e = (org.apache.maven.repository.metadata.MetadataGraphEdge) $stack14;

        $stack15 = virtualinvoke e.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.repository.metadata.MetadataGraphVertex getTarget()>();

        $r0 = (org.apache.maven.repository.metadata.DefaultGraphConflictResolver) this;

        specialinvoke $r0.<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: void visit(org.apache.maven.repository.metadata.MetadataGraphVertex,java.util.List,org.apache.maven.repository.metadata.MetadataGraph)>($stack15, visited, graph);

        goto label2;

     label3:
        return;
    }

    private org.apache.maven.repository.metadata.MetadataGraphEdge cleanEdges(org.apache.maven.repository.metadata.MetadataGraphVertex, java.util.List, org.apache.maven.artifact.ArtifactScopeEnum)
    {
        java.util.List edges;
        boolean $stack7, $stack13, $stack19, $stack10;
        int $stack8;
        java.util.Iterator l5;
        java.lang.Object $stack11, $stack17;
        org.apache.maven.repository.metadata.MetadataGraphEdge e, e;
        org.apache.maven.artifact.ArtifactScopeEnum scope, $stack12, $stack18;
        DefaultGraphConflictResolver this;
        org.apache.maven.repository.metadata.GraphConflictResolutionPolicy $stack14;
        org.apache.maven.repository.metadata.MetadataGraphVertex v;
        org.apache.maven.repository.metadata.DefaultGraphConflictResolver $r0;

        this := @this: DefaultGraphConflictResolver;

        v := @parameter0: org.apache.maven.repository.metadata.MetadataGraphVertex;

        edges := @parameter1: java.util.List;

        scope := @parameter2: org.apache.maven.artifact.ArtifactScopeEnum;

        if edges == null goto label1;

        $stack7 = interfaceinvoke edges.<java.util.List: boolean isEmpty()>();

        if $stack7 == 0 goto label2;

     label1:
        return null;

     label2:
        $stack8 = interfaceinvoke edges.<java.util.List: int size()>();

        if $stack8 != 1 goto label4;

        $stack17 = interfaceinvoke edges.<java.util.List: java.lang.Object get(int)>(0);

        e = (org.apache.maven.repository.metadata.MetadataGraphEdge) $stack17;

        $stack18 = virtualinvoke e.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.artifact.ArtifactScopeEnum getScope()>();

        $stack19 = virtualinvoke scope.<org.apache.maven.artifact.ArtifactScopeEnum: boolean encloses(org.apache.maven.artifact.ArtifactScopeEnum)>($stack18);

        if $stack19 == 0 goto label3;

        return e;

     label3:
        return null;

     label4:
        e = null;

        l5 = interfaceinvoke edges.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack10 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label9;

        $stack11 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        e = (org.apache.maven.repository.metadata.MetadataGraphEdge) $stack11;

        $stack12 = virtualinvoke e.<org.apache.maven.repository.metadata.MetadataGraphEdge: org.apache.maven.artifact.ArtifactScopeEnum getScope()>();

        $stack13 = virtualinvoke scope.<org.apache.maven.artifact.ArtifactScopeEnum: boolean encloses(org.apache.maven.artifact.ArtifactScopeEnum)>($stack12);

        if $stack13 != 0 goto label6;

        goto label5;

     label6:
        if e != null goto label7;

        e = e;

        goto label8;

     label7:
        $r0 = (org.apache.maven.repository.metadata.DefaultGraphConflictResolver) this;

        $stack14 = $r0.<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.GraphConflictResolutionPolicy policy>;

        e = interfaceinvoke $stack14.<org.apache.maven.repository.metadata.GraphConflictResolutionPolicy: org.apache.maven.repository.metadata.MetadataGraphEdge apply(org.apache.maven.repository.metadata.MetadataGraphEdge,org.apache.maven.repository.metadata.MetadataGraphEdge)>(e, e);

     label8:
        goto label5;

     label9:
        return e;
    }
}
