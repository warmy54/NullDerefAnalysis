public class DefaultInheritanceAssemblerTest extends java.lang.Object
{
    private org.apache.maven.model.io.DefaultModelReader reader;
    private org.apache.maven.model.io.ModelWriter writer;
    private org.apache.maven.model.inheritance.InheritanceAssembler assembler;

    public void <init>()
    {
        DefaultInheritanceAssemblerTest this;

        this := @this: DefaultInheritanceAssemblerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.io.DefaultModelReader $stack3, $u0;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest$1 $u1;
        org.apache.maven.model.io.DefaultModelWriter $u2;
        org.apache.maven.model.inheritance.DefaultInheritanceAssembler $u3;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0, $r1, $r2, $r4, $r6;
        org.apache.maven.model.building.ModelSourceTransformer $r3;
        org.apache.maven.model.io.ModelWriter $r5;
        org.apache.maven.model.inheritance.InheritanceAssembler $r7;

        this := @this: DefaultInheritanceAssemblerTest;

        $u0 = new org.apache.maven.model.io.DefaultModelReader;

        specialinvoke $u0.<org.apache.maven.model.io.DefaultModelReader: void <init>()>();

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.io.DefaultModelReader reader> = $u0;

        $r1 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack3 = $r1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.io.DefaultModelReader reader>;

        $u1 = new org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest$1;

        $r2 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        specialinvoke $u1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest$1: void <init>(org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest)>($r2);

        $r3 = (org.apache.maven.model.building.ModelSourceTransformer) $u1;

        virtualinvoke $stack3.<org.apache.maven.model.io.DefaultModelReader: void setTransformer(org.apache.maven.model.building.ModelSourceTransformer)>($r3);

        $u2 = new org.apache.maven.model.io.DefaultModelWriter;

        specialinvoke $u2.<org.apache.maven.model.io.DefaultModelWriter: void <init>()>();

        $r4 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $r5 = (org.apache.maven.model.io.ModelWriter) $u2;

        $r4.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.io.ModelWriter writer> = $r5;

        $u3 = new org.apache.maven.model.inheritance.DefaultInheritanceAssembler;

        specialinvoke $u3.<org.apache.maven.model.inheritance.DefaultInheritanceAssembler: void <init>()>();

        $r6 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $r7 = (org.apache.maven.model.inheritance.InheritanceAssembler) $u3;

        $r6.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.inheritance.InheritanceAssembler assembler> = $r7;

        return;
    }

    private java.io.File getPom(java.lang.String)
    {
        java.io.File $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6;
        java.lang.String name, $stack7;
        DefaultInheritanceAssemblerTest this;

        this := @this: DefaultInheritanceAssemblerTest;

        name := @parameter0: java.lang.String;

        $stack2 = new java.io.File;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/poms/inheritance/");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack2.<java.io.File: void <init>(java.lang.String)>($stack7);

        return $stack2;
    }

    private org.apache.maven.model.Model getModel(java.lang.String) throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        java.lang.String name;
        org.apache.maven.model.io.DefaultModelReader $stack2;
        java.io.File $stack3;
        org.apache.maven.model.Model $stack4;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0, $r1;

        this := @this: DefaultInheritanceAssemblerTest;

        name := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack2 = $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.io.DefaultModelReader reader>;

        $r1 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: java.io.File getPom(java.lang.String)>(name);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.File,java.util.Map)>($stack3, null);

        return $stack4;
    }

    public void testPluginConfiguration() throws java.lang.Exception
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String)>("plugin-configuration");

        return;
    }

    public void testUrls() throws java.lang.Exception
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String)>("urls");

        return;
    }

    public void testFlatUrls() throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String)>("flat-urls");

        return;
    }

    public void testNoAppendUrls() throws java.lang.Exception
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String)>("no-append-urls");

        return;
    }

    public void testNoAppendUrls2() throws java.lang.Exception
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String)>("no-append-urls2");

        return;
    }

    public void testNoAppendUrls3() throws java.lang.Exception
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String)>("no-append-urls3");

        return;
    }

    public void testFlatTrickyUrls() throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        org.junit.jupiter.api.function.Executable $stack3;
        java.lang.Throwable $stack4;
        java.lang.String $stack5, $stack7, $stack9, $stack11;
        boolean $stack6, $stack10;
        java.lang.AssertionError $stack8, afe;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0, $r1, $r2, $r3;

        this := @this: DefaultInheritanceAssemblerTest;

     label1:
        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>("tricky-flat-artifactId-urls", 0);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

        $stack9 = virtualinvoke $stack8.<java.lang.AssertionError: java.lang.String getMessage()>();

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean contains(java.lang.CharSequence)>("Expected text value \'http://www.apache.org/path/to/parent/child-artifact-id/\' but was \'http://www.apache.org/path/to/parent/../child-artifact-id/\'");

        $stack11 = virtualinvoke $stack8.<java.lang.AssertionError: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack10, $stack11);

     label4:
        $r1 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>("tricky-flat-artifactId-urls", 1);

        $r2 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r2.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>("tricky-flat-directory-urls", 0);

        $r3 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack3 = staticinvoke <DefaultInheritanceAssemblerTest$lambda_testFlatTrickyUrls_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest)>($r3);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/AssertionError;", $stack3, "should have failed since module reference == directory name != artifactId");

        afe = (java.lang.AssertionError) $stack4;

        $stack5 = virtualinvoke afe.<java.lang.AssertionError: java.lang.String getMessage()>();

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("Expected text value \'http://www.apache.org/path/to/parent/../child-artifact-id/\' but was \'http://www.apache.org/path/to/parent/child-artifact-id/\'");

        $stack7 = virtualinvoke afe.<java.lang.AssertionError: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack6, $stack7);

        return;

        catch java.lang.AssertionError from label1 to label2 with label3;
    }

    public void testWithEmptyUrl() throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>("empty-urls", 0);

        return;
    }

    public void testInheritance(java.lang.String) throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        java.lang.String baseName;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0, $r1;

        this := @this: DefaultInheritanceAssemblerTest;

        baseName := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>(baseName, 0);

        $r1 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>(baseName, 1);

        return;
    }

    public void testInheritance(java.lang.String, boolean) throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        java.lang.String baseName, $stack11, $stack16, $stack26, $stack31, $stack36;
        java.lang.StringBuilder $stack9, $stack10, $stack14, $stack15, $stack22, $stack23, $stack24, $stack25, $stack29, $stack30, $u0, $u1, $u3, $u5;
        org.apache.maven.model.Model parent, child;
        boolean fromRepo;
        org.apache.maven.model.inheritance.InheritanceAssembler $stack19;
        org.apache.maven.model.io.ModelWriter $stack27;
        java.io.File expected, $u4;
        org.xmlunit.matchers.CompareMatcher $stack33, $stack34, $stack35;
        org.apache.maven.model.building.SimpleProblemCollector $u2;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0, $r1, $r2, $r4, $r5;
        org.apache.maven.model.building.ModelProblemCollector $r3;
        org.hamcrest.Matcher $r6;

        this := @this: DefaultInheritanceAssemblerTest;

        baseName := @parameter0: java.lang.String;

        fromRepo := @parameter1: boolean;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(baseName);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-parent");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        parent = specialinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.Model getModel(java.lang.String)>($stack11);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(baseName);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-child");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        child = specialinvoke $r1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.Model getModel(java.lang.String)>($stack16);

        if fromRepo == 0 goto label1;

        virtualinvoke parent.<org.apache.maven.model.Model: void setPomFile(java.io.File)>(null);

        virtualinvoke child.<org.apache.maven.model.Model: void setPomFile(java.io.File)>(null);

     label1:
        $u2 = new org.apache.maven.model.building.SimpleProblemCollector;

        specialinvoke $u2.<org.apache.maven.model.building.SimpleProblemCollector: void <init>()>();

        $r2 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack19 = $r2.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.inheritance.InheritanceAssembler assembler>;

        $r3 = (org.apache.maven.model.building.ModelProblemCollector) $u2;

        interfaceinvoke $stack19.<org.apache.maven.model.inheritance.InheritanceAssembler: void assembleModelInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>(child, parent, null, $r3);

        $u4 = new java.io.File;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/test-classes/poms/inheritance/");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(baseName);

        if fromRepo == 0 goto label2;

        $stack36 = "-build";

        goto label3;

     label2:
        $stack36 = "-repo";

     label3:
        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack36);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-actual.xml");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.io.File: void <init>(java.lang.String)>($stack26);

        $r4 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack27 = $r4.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.io.ModelWriter writer>;

        interfaceinvoke $stack27.<org.apache.maven.model.io.ModelWriter: void write(java.io.File,java.util.Map,org.apache.maven.model.Model)>($u4, null, child);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(baseName);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-expected");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        expected = specialinvoke $r5.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: java.io.File getPom(java.lang.String)>($stack31);

        $stack33 = staticinvoke <org.xmlunit.matchers.CompareMatcher: org.xmlunit.matchers.CompareMatcher isIdenticalTo(java.lang.Object)>(expected);

        $stack34 = virtualinvoke $stack33.<org.xmlunit.matchers.CompareMatcher: org.xmlunit.matchers.CompareMatcher ignoreComments()>();

        $stack35 = virtualinvoke $stack34.<org.xmlunit.matchers.CompareMatcher: org.xmlunit.matchers.CompareMatcher ignoreWhitespace()>();

        $r6 = (org.hamcrest.Matcher) $stack35;

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($u4, $r6);

        return;
    }

    public void testModulePathNotArtifactId() throws java.io.IOException
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.Model parent, child;
        org.apache.maven.model.inheritance.InheritanceAssembler $stack9;
        org.apache.maven.model.io.ModelWriter $stack11;
        java.io.File expected, $u1;
        org.xmlunit.matchers.CompareMatcher $stack13, $stack14, $stack15;
        org.apache.maven.model.building.SimpleProblemCollector $u0;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0, $r1, $r2, $r4, $r5;
        org.apache.maven.model.building.ModelProblemCollector $r3;
        org.hamcrest.Matcher $r6;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        parent = specialinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.Model getModel(java.lang.String)>("module-path-not-artifactId-parent");

        $r1 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        child = specialinvoke $r1.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.Model getModel(java.lang.String)>("module-path-not-artifactId-child");

        $u0 = new org.apache.maven.model.building.SimpleProblemCollector;

        specialinvoke $u0.<org.apache.maven.model.building.SimpleProblemCollector: void <init>()>();

        $r2 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack9 = $r2.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.inheritance.InheritanceAssembler assembler>;

        $r3 = (org.apache.maven.model.building.ModelProblemCollector) $u0;

        interfaceinvoke $stack9.<org.apache.maven.model.inheritance.InheritanceAssembler: void assembleModelInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>(child, parent, null, $r3);

        $u1 = new java.io.File;

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>("target/test-classes/poms/inheritance/module-path-not-artifactId-actual.xml");

        $r4 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        $stack11 = $r4.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: org.apache.maven.model.io.ModelWriter writer>;

        interfaceinvoke $stack11.<org.apache.maven.model.io.ModelWriter: void write(java.io.File,java.util.Map,org.apache.maven.model.Model)>($u1, null, child);

        $r5 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        expected = specialinvoke $r5.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: java.io.File getPom(java.lang.String)>("module-path-not-artifactId-expected");

        $stack13 = staticinvoke <org.xmlunit.matchers.CompareMatcher: org.xmlunit.matchers.CompareMatcher isIdenticalTo(java.lang.Object)>(expected);

        $stack14 = virtualinvoke $stack13.<org.xmlunit.matchers.CompareMatcher: org.xmlunit.matchers.CompareMatcher ignoreComments()>();

        $stack15 = virtualinvoke $stack14.<org.xmlunit.matchers.CompareMatcher: org.xmlunit.matchers.CompareMatcher ignoreWhitespace()>();

        $r6 = (org.hamcrest.Matcher) $stack15;

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($u1, $r6);

        return;
    }

    private void lambda$testFlatTrickyUrls$0() throws java.lang.Throwable
    {
        DefaultInheritanceAssemblerTest this;
        org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest $r0;

        this := @this: DefaultInheritanceAssemblerTest;

        $r0 = (org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest) this;

        virtualinvoke $r0.<org.apache.maven.model.inheritance.DefaultInheritanceAssemblerTest: void testInheritance(java.lang.String,boolean)>("tricky-flat-directory-urls", 1);

        return;
    }
}
