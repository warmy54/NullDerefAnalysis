public class DefaultLifecycleExecutionPlanCalculator extends java.lang.Object implements org.apache.maven.lifecycle.internal.LifecycleExecutionPlanCalculator
{
    private org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver;
    private org.apache.maven.plugin.BuildPluginManager pluginManager;
    private org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles;
    private org.apache.maven.lifecycle.internal.MojoDescriptorCreator mojoDescriptorCreator;
    private org.apache.maven.lifecycle.internal.LifecyclePluginResolver lifecyclePluginResolver;
    private org.apache.maven.lifecycle.LifecycleMappingDelegate standardDelegate;
    private java.util.Map delegates;
    private java.util.Map mojoExecutionConfigurators;

    public void <init>()
    {
        DefaultLifecycleExecutionPlanCalculator this;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.maven.plugin.BuildPluginManager, org.apache.maven.lifecycle.DefaultLifecycles, org.apache.maven.lifecycle.internal.MojoDescriptorCreator, org.apache.maven.lifecycle.internal.LifecyclePluginResolver)
    {
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.plugin.BuildPluginManager pluginManager;
        org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles;
        org.apache.maven.lifecycle.internal.MojoDescriptorCreator mojoDescriptorCreator;
        org.apache.maven.lifecycle.internal.LifecyclePluginResolver lifecyclePluginResolver;
        java.util.Map $stack7;
        org.apache.maven.lifecycle.internal.DefaultMojoExecutionConfigurator $u0;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1, $r2, $r3, $r4;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        pluginManager := @parameter0: org.apache.maven.plugin.BuildPluginManager;

        defaultLifeCycles := @parameter1: org.apache.maven.lifecycle.DefaultLifecycles;

        mojoDescriptorCreator := @parameter2: org.apache.maven.lifecycle.internal.MojoDescriptorCreator;

        lifecyclePluginResolver := @parameter3: org.apache.maven.lifecycle.internal.LifecyclePluginResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.plugin.BuildPluginManager pluginManager> = pluginManager;

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles> = defaultLifeCycles;

        $r2 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $r2.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.internal.MojoDescriptorCreator mojoDescriptorCreator> = mojoDescriptorCreator;

        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.internal.LifecyclePluginResolver lifecyclePluginResolver> = lifecyclePluginResolver;

        $u0 = new org.apache.maven.lifecycle.internal.DefaultMojoExecutionConfigurator;

        specialinvoke $u0.<org.apache.maven.lifecycle.internal.DefaultMojoExecutionConfigurator: void <init>()>();

        $stack7 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("default", $u0);

        $r4 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $r4.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map mojoExecutionConfigurators> = $stack7;

        return;
    }

    public org.apache.maven.lifecycle.MavenExecutionPlan calculateExecutionPlan(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.List, boolean) throws org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.lifecycle.internal.LifecyclePluginResolver $stack7;
        java.util.List tasks, executions, planItem;
        boolean setup;
        org.apache.maven.lifecycle.DefaultLifecycles $stack11;
        org.apache.maven.lifecycle.MavenExecutionPlan $u0;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1, $r2, $r3;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        tasks := @parameter2: java.util.List;

        setup := @parameter3: boolean;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack7 = $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.internal.LifecyclePluginResolver lifecyclePluginResolver>;

        virtualinvoke $stack7.<org.apache.maven.lifecycle.internal.LifecyclePluginResolver: void resolveMissingPluginVersions(org.apache.maven.project.MavenProject,org.apache.maven.execution.MavenSession)>(project, session);

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        executions = virtualinvoke $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.List calculateMojoExecutions(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.List)>(session, project, tasks);

        if setup == 0 goto label1;

        $r2 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r2.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void setupMojoExecutions(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.List)>(session, project, executions);

     label1:
        planItem = staticinvoke <org.apache.maven.lifecycle.internal.ExecutionPlanItem: java.util.List createExecutionPlanItems(org.apache.maven.project.MavenProject,java.util.List)>(project, executions);

        $u0 = new org.apache.maven.lifecycle.MavenExecutionPlan;

        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack11 = $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles>;

        specialinvoke $u0.<org.apache.maven.lifecycle.MavenExecutionPlan: void <init>(java.util.List,org.apache.maven.lifecycle.DefaultLifecycles)>(planItem, $stack11);

        return $u0;
    }

    public org.apache.maven.lifecycle.MavenExecutionPlan calculateExecutionPlan(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.List) throws org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.util.List tasks;
        org.apache.maven.lifecycle.MavenExecutionPlan $stack4;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        tasks := @parameter2: java.util.List;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.MavenExecutionPlan calculateExecutionPlan(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.List,boolean)>(session, project, tasks, 1);

        return $stack4;
    }

    private void setupMojoExecutions(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.List) throws org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.util.List mojoExecutions;
        java.util.Set alreadyPlannedExecutions;
        java.util.Iterator l5;
        boolean $stack9;
        java.lang.Object $stack10;
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        mojoExecutions := @parameter2: java.util.List;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        alreadyPlannedExecutions = specialinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Set fillMojoDescriptors(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.List)>(session, project, mojoExecutions);

        l5 = interfaceinvoke mojoExecutions.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $stack10 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        mojoExecution = (org.apache.maven.plugin.MojoExecution) $stack10;

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        virtualinvoke $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void setupMojoExecution(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution,java.util.Set)>(session, project, mojoExecution, alreadyPlannedExecutions);

        goto label1;

     label2:
        return;
    }

    private java.util.Set fillMojoDescriptors(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.List) throws org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.PluginNotFoundException
    {
        java.util.List mojoExecutions;
        int $stack9;
        java.util.Iterator l5;
        boolean $stack11;
        java.lang.Object $stack12;
        org.apache.maven.plugin.MojoExecution execution;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        java.util.HashSet $u0;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        mojoExecutions := @parameter2: java.util.List;

        $u0 = new java.util.HashSet;

        $stack9 = interfaceinvoke mojoExecutions.<java.util.List: int size()>();

        specialinvoke $u0.<java.util.HashSet: void <init>(int)>($stack9);

        l5 = interfaceinvoke mojoExecutions.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label2;

        $stack12 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        execution = (org.apache.maven.plugin.MojoExecution) $stack12;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        mojoDescriptor = specialinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.plugin.descriptor.MojoDescriptor fillMojoDescriptor(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution)>(session, project, execution);

        interfaceinvoke $u0.<java.util.Set: boolean add(java.lang.Object)>(mojoDescriptor);

        goto label1;

     label2:
        return $u0;
    }

    private org.apache.maven.plugin.descriptor.MojoDescriptor fillMojoDescriptor(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, org.apache.maven.plugin.MojoExecution) throws org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.InvalidPluginDescriptorException
    {
        org.apache.maven.plugin.MojoExecution execution;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.plugin.BuildPluginManager $stack6;
        org.apache.maven.model.Plugin $stack7;
        java.lang.String $stack8;
        org.apache.maven.project.MavenProject project;
        java.util.List $stack9;
        org.apache.maven.execution.MavenSession session;
        org.eclipse.aether.RepositorySystemSession $stack10;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        execution := @parameter2: org.apache.maven.plugin.MojoExecution;

        mojoDescriptor = virtualinvoke execution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        if mojoDescriptor != null goto label1;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack6 = $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.plugin.BuildPluginManager pluginManager>;

        $stack7 = virtualinvoke execution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.model.Plugin getPlugin()>();

        $stack8 = virtualinvoke execution.<org.apache.maven.plugin.MojoExecution: java.lang.String getGoal()>();

        $stack9 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack10 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        mojoDescriptor = interfaceinvoke $stack6.<org.apache.maven.plugin.BuildPluginManager: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor(org.apache.maven.model.Plugin,java.lang.String,java.util.List,org.eclipse.aether.RepositorySystemSession)>($stack7, $stack8, $stack9, $stack10);

        virtualinvoke execution.<org.apache.maven.plugin.MojoExecution: void setMojoDescriptor(org.apache.maven.plugin.descriptor.MojoDescriptor)>(mojoDescriptor);

     label1:
        return mojoDescriptor;
    }

    public void setupMojoExecution(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, org.apache.maven.plugin.MojoExecution, java.util.Set) throws org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.lifecycle.MojoExecutionConfigurator $stack6;
        org.apache.maven.plugin.MojoExecution$Source $stack7, $stack8;
        boolean $stack9;
        java.util.Set alreadyPlannedExecutions;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1, $r2, $r3;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        mojoExecution := @parameter2: org.apache.maven.plugin.MojoExecution;

        alreadyPlannedExecutions := @parameter3: java.util.Set;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.plugin.descriptor.MojoDescriptor fillMojoDescriptor(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution)>(session, project, mojoExecution);

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack6 = specialinvoke $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator(org.apache.maven.plugin.MojoExecution)>(mojoExecution);

        $stack7 = <org.apache.maven.plugin.MojoExecution$Source: org.apache.maven.plugin.MojoExecution$Source CLI>;

        $stack8 = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.MojoExecution$Source getSource()>();

        $stack9 = virtualinvoke $stack7.<org.apache.maven.plugin.MojoExecution$Source: boolean equals(java.lang.Object)>($stack8);

        interfaceinvoke $stack6.<org.apache.maven.lifecycle.MojoExecutionConfigurator: void configure(org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution,boolean)>(project, mojoExecution, $stack9);

        $r2 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r2.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void finalizeMojoConfiguration(org.apache.maven.plugin.MojoExecution)>(mojoExecution);

        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>(mojoExecution, session, project, alreadyPlannedExecutions);

        return;
    }

    public java.util.List calculateMojoExecutions(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.List) throws org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.version.PluginVersionResolutionException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException
    {
        java.util.List tasks, mojoDescriptor#8;
        java.util.Iterator l5, executionIdx#7;
        boolean $stack14, $stack16, $stack17, $stack28;
        java.lang.Object task, $stack30;
        java.lang.StringBuilder $stack20, $stack21, $u2;
        java.lang.String $stack22, pluginGoal, executionId;
        org.apache.maven.lifecycle.internal.LifecycleTask $stack23;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.util.Collection $stack26;
        org.apache.maven.lifecycle.internal.GoalTask $stack33;
        org.apache.maven.lifecycle.internal.MojoDescriptorCreator $stack35;
        org.apache.maven.plugin.MojoExecution$Source $stack38;
        int $stack40, executionIdx;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        java.util.Map executionId#6;
        java.util.ArrayList $u0;
        org.apache.maven.plugin.MojoExecution $u1;
        java.lang.IllegalStateException $u3;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        tasks := @parameter2: java.util.List;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        l5 = interfaceinvoke tasks.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label8;

        task = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        $stack16 = task instanceof org.apache.maven.lifecycle.internal.GoalTask;

        if $stack16 == 0 goto label3;

        $stack33 = (org.apache.maven.lifecycle.internal.GoalTask) task;

        pluginGoal = $stack33.<org.apache.maven.lifecycle.internal.GoalTask: java.lang.String pluginGoal>;

        executionId = "default-cli";

        executionIdx = virtualinvoke pluginGoal.<java.lang.String: int indexOf(int)>(64);

        if executionIdx <= 0 goto label2;

        $stack40 = executionIdx + 1;

        executionId = virtualinvoke pluginGoal.<java.lang.String: java.lang.String substring(int)>($stack40);

     label2:
        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack35 = $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.internal.MojoDescriptorCreator mojoDescriptorCreator>;

        mojoDescriptor = virtualinvoke $stack35.<org.apache.maven.lifecycle.internal.MojoDescriptorCreator: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor(java.lang.String,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject)>(pluginGoal, session, project);

        $u1 = new org.apache.maven.plugin.MojoExecution;

        $stack38 = <org.apache.maven.plugin.MojoExecution$Source: org.apache.maven.plugin.MojoExecution$Source CLI>;

        specialinvoke $u1.<org.apache.maven.plugin.MojoExecution: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,java.lang.String,org.apache.maven.plugin.MojoExecution$Source)>(mojoDescriptor, executionId, $stack38);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

        goto label7;

     label3:
        $stack17 = task instanceof org.apache.maven.lifecycle.internal.LifecycleTask;

        if $stack17 == 0 goto label6;

        $stack23 = (org.apache.maven.lifecycle.internal.LifecycleTask) task;

        pluginGoal = virtualinvoke $stack23.<org.apache.maven.lifecycle.internal.LifecycleTask: java.lang.String getLifecyclePhase()>();

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        executionId#6 = specialinvoke $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map calculateLifecycleMappings(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.lang.String)>(session, project, pluginGoal);

        $stack26 = interfaceinvoke executionId#6.<java.util.Map: java.util.Collection values()>();

        executionIdx#7 = interfaceinvoke $stack26.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack28 = interfaceinvoke executionIdx#7.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label5;

        $stack30 = interfaceinvoke executionIdx#7.<java.util.Iterator: java.lang.Object next()>();

        mojoDescriptor#8 = (java.util.List) $stack30;

        interfaceinvoke $u0.<java.util.List: boolean addAll(java.util.Collection)>(mojoDescriptor#8);

        goto label4;

     label5:
        goto label7;

     label6:
        $u3 = new java.lang.IllegalStateException;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected task ");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(task);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack22);

        throw $u3;

     label7:
        goto label1;

     label8:
        return $u0;
    }

    private java.util.Map calculateLifecycleMappings(org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.lang.String) throws org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.InvalidPluginDescriptorException
    {
        DefaultLifecycleExecutionPlanCalculator this;
        java.lang.String lifecyclePhase, $stack9, $stack12, $stack26, $stack29;
        org.apache.maven.lifecycle.DefaultLifecycles $stack6, $stack25;
        org.apache.maven.lifecycle.Lifecycle lifecycle;
        java.lang.String[] $stack8;
        int $stack10;
        java.util.Map $stack11, $stack14;
        java.lang.Object $stack13;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.lang.StringBuilder $stack22, $stack23, $stack24, $stack27, $stack28, $u0;
        org.apache.maven.lifecycle.LifecycleMappingDelegate delegate;
        org.apache.maven.lifecycle.LifecyclePhaseNotFoundException $u1;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1, $r3, $r4, $r5;
        java.lang.Throwable $r2;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        project := @parameter1: org.apache.maven.project.MavenProject;

        lifecyclePhase := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack6 = $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles>;

        lifecycle = virtualinvoke $stack6.<org.apache.maven.lifecycle.DefaultLifecycles: org.apache.maven.lifecycle.Lifecycle get(java.lang.String)>(lifecyclePhase);

        if lifecycle != null goto label1;

        $u1 = new org.apache.maven.lifecycle.LifecyclePhaseNotFoundException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown lifecycle phase \"");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lifecyclePhase);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\". You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: ");

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack25 = $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles>;

        $stack26 = virtualinvoke $stack25.<org.apache.maven.lifecycle.DefaultLifecycles: java.lang.String getLifecyclePhaseList()>();

        $stack27 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.apache.maven.lifecycle.LifecyclePhaseNotFoundException: void <init>(java.lang.String,java.lang.String)>($stack29, lifecyclePhase);

        $r2 = (java.lang.Throwable) $u1;

        throw $r2;

     label1:
        $stack8 = <org.apache.maven.lifecycle.DefaultLifecycles: java.lang.String[] STANDARD_LIFECYCLES>;

        $stack9 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack10 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($stack8, $stack9);

        if $stack10 < 0 goto label2;

        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        delegate = $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.LifecycleMappingDelegate standardDelegate>;

        goto label3;

     label2:
        $r4 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack11 = $r4.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map delegates>;

        $stack12 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack13 = interfaceinvoke $stack11.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack12);

        delegate = (org.apache.maven.lifecycle.LifecycleMappingDelegate) $stack13;

        if delegate != null goto label3;

        $r5 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        delegate = $r5.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.LifecycleMappingDelegate standardDelegate>;

     label3:
        $stack14 = interfaceinvoke delegate.<org.apache.maven.lifecycle.LifecycleMappingDelegate: java.util.Map calculateLifecycleMappings(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,org.apache.maven.lifecycle.Lifecycle,java.lang.String)>(session, project, lifecycle, lifecyclePhase);

        return $stack14;
    }

    private void finalizeMojoConfiguration(org.apache.maven.plugin.MojoExecution)
    {
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        DefaultLifecycleExecutionPlanCalculator this;
        org.codehaus.plexus.util.xml.Xpp3Dom defaultConfiguration, parameterDefaults, executionConfiguration, parameterConfiguration, $u0, $u1, $u2;
        java.util.List $stack14, $stack15;
        java.util.Iterator l6;
        boolean $stack17, $stack31, $stack33;
        java.lang.Object $stack20;
        org.apache.maven.plugin.descriptor.Parameter parameter;
        java.lang.String $stack21, $stack23, $stack29, $stack30, $stack32, $stack37, $stack38;
        java.lang.Boolean $stack25;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoExecution := @parameter0: org.apache.maven.plugin.MojoExecution;

        mojoDescriptor = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        executionConfiguration = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.codehaus.plexus.util.xml.Xpp3Dom getConfiguration()>();

        if executionConfiguration != null goto label1;

        $u0 = new org.codehaus.plexus.util.xml.Xpp3Dom;

        specialinvoke $u0.<org.codehaus.plexus.util.xml.Xpp3Dom: void <init>(java.lang.String)>("configuration");

        executionConfiguration = $u0;

     label1:
        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        defaultConfiguration = specialinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.codehaus.plexus.util.xml.Xpp3Dom getMojoConfiguration(org.apache.maven.plugin.descriptor.MojoDescriptor)>(mojoDescriptor);

        $u1 = new org.codehaus.plexus.util.xml.Xpp3Dom;

        specialinvoke $u1.<org.codehaus.plexus.util.xml.Xpp3Dom: void <init>(java.lang.String)>("configuration");

        $stack14 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.util.List getParameters()>();

        if $stack14 == null goto label6;

        $stack15 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.util.List getParameters()>();

        l6 = interfaceinvoke $stack15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack17 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label6;

        $stack20 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        parameter = (org.apache.maven.plugin.descriptor.Parameter) $stack20;

        $stack21 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getName()>();

        parameterConfiguration = virtualinvoke executionConfiguration.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>($stack21);

        if parameterConfiguration != null goto label3;

        $stack38 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getAlias()>();

        parameterConfiguration = virtualinvoke executionConfiguration.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>($stack38);

     label3:
        $stack23 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getName()>();

        parameterDefaults = virtualinvoke defaultConfiguration.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>($stack23);

        $stack25 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        parameterConfiguration = staticinvoke <org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom mergeXpp3Dom(org.codehaus.plexus.util.xml.Xpp3Dom,org.codehaus.plexus.util.xml.Xpp3Dom,java.lang.Boolean)>(parameterConfiguration, parameterDefaults, $stack25);

        if parameterConfiguration == null goto label5;

        $u2 = new org.codehaus.plexus.util.xml.Xpp3Dom;

        $stack29 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getName()>();

        specialinvoke $u2.<org.codehaus.plexus.util.xml.Xpp3Dom: void <init>(org.codehaus.plexus.util.xml.Xpp3Dom,java.lang.String)>(parameterConfiguration, $stack29);

        $stack30 = virtualinvoke $u2.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getAttribute(java.lang.String)>("implementation");

        $stack31 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack30);

        if $stack31 == 0 goto label4;

        $stack32 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getImplementation()>();

        $stack33 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack32);

        if $stack33 == 0 goto label4;

        $stack37 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getImplementation()>();

        virtualinvoke $u2.<org.codehaus.plexus.util.xml.Xpp3Dom: void setAttribute(java.lang.String,java.lang.String)>("implementation", $stack37);

     label4:
        virtualinvoke $u1.<org.codehaus.plexus.util.xml.Xpp3Dom: void addChild(org.codehaus.plexus.util.xml.Xpp3Dom)>($u2);

     label5:
        goto label2;

     label6:
        virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: void setConfiguration(org.codehaus.plexus.util.xml.Xpp3Dom)>($u1);

        return;
    }

    private org.codehaus.plexus.util.xml.Xpp3Dom getMojoConfiguration(org.apache.maven.plugin.descriptor.MojoDescriptor)
    {
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        org.codehaus.plexus.util.xml.Xpp3Dom $stack2;
        DefaultLifecycleExecutionPlanCalculator this;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoDescriptor := @parameter0: org.apache.maven.plugin.descriptor.MojoDescriptor;

        $stack2 = staticinvoke <org.apache.maven.lifecycle.internal.MojoDescriptorCreator: org.codehaus.plexus.util.xml.Xpp3Dom convert(org.apache.maven.plugin.descriptor.MojoDescriptor)>(mojoDescriptor);

        return $stack2;
    }

    public void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution, org.apache.maven.execution.MavenSession) throws org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject $stack3;
        java.util.HashSet $u0;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoExecution := @parameter0: org.apache.maven.plugin.MojoExecution;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        $stack3 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $u0 = new java.util.HashSet;

        specialinvoke $u0.<java.util.HashSet: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>(mojoExecution, session, $stack3, $u0);

        return;
    }

    private void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.Collection) throws org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        boolean $stack11, $stack13, $stack16, $stack19, $stack21;
        java.util.Collection alreadyPlannedExecutions;
        org.apache.maven.project.MavenProject project, forkedProject;
        org.apache.maven.execution.MavenSession session;
        java.util.List forkedProjects, forkedExecutions;
        java.util.Iterator l7;
        java.lang.Object $stack17;
        java.lang.String $stack18, $stack23;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.lifecycle.internal.LifecyclePluginResolver $stack26;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1, $r2;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoExecution := @parameter0: org.apache.maven.plugin.MojoExecution;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        project := @parameter2: org.apache.maven.project.MavenProject;

        alreadyPlannedExecutions := @parameter3: java.util.Collection;

        mojoDescriptor = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        $stack11 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: boolean isForking()>();

        if $stack11 != 0 goto label1;

        return;

     label1:
        interfaceinvoke alreadyPlannedExecutions.<java.util.Collection: boolean add(java.lang.Object)>(mojoDescriptor);

        $stack13 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: boolean isAggregator()>();

        forkedProjects = staticinvoke <org.apache.maven.lifecycle.internal.LifecycleDependencyResolver: java.util.List getProjects(org.apache.maven.project.MavenProject,org.apache.maven.execution.MavenSession,boolean)>(project, session, $stack13);

        l7 = interfaceinvoke forkedProjects.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack16 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label7;

        $stack17 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        forkedProject = (org.apache.maven.project.MavenProject) $stack17;

        if forkedProject == project goto label3;

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack26 = $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.internal.LifecyclePluginResolver lifecyclePluginResolver>;

        virtualinvoke $stack26.<org.apache.maven.lifecycle.internal.LifecyclePluginResolver: void resolveMissingPluginVersions(org.apache.maven.project.MavenProject,org.apache.maven.execution.MavenSession)>(forkedProject, session);

     label3:
        $stack18 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getExecutePhase()>();

        $stack19 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack18);

        if $stack19 == 0 goto label4;

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        forkedExecutions = specialinvoke $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.List calculateForkedLifecycle(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>(mojoExecution, session, forkedProject, alreadyPlannedExecutions);

        goto label5;

     label4:
        $r2 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        forkedExecutions = specialinvoke $r2.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.List calculateForkedGoal(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>(mojoExecution, session, forkedProject, alreadyPlannedExecutions);

     label5:
        $stack21 = interfaceinvoke forkedExecutions.<java.util.List: boolean isEmpty()>();

        if $stack21 != 0 goto label6;

        $stack23 = staticinvoke <org.apache.maven.lifecycle.internal.builder.BuilderCommon: java.lang.String getKey(org.apache.maven.project.MavenProject)>(forkedProject);

        virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: void setForkedExecutions(java.lang.String,java.util.List)>($stack23, forkedExecutions);

     label6:
        goto label2;

     label7:
        return;
    }

    private java.util.List calculateForkedLifecycle(org.apache.maven.plugin.MojoExecution, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.Collection) throws org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.plugin.MojoExecution mojoExecution, forkedExecution, forkedMojoDescriptor#10;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor, $stack28, $stack37, forkedMojoDescriptor;
        java.lang.String forkedPhase, $stack42;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.util.Map lifecycleMappings;
        java.util.Collection $stack16, $stack20, alreadyPlannedExecutions;
        boolean $stack18, $stack22, $stack25, $stack29, $stack34;
        java.lang.Object $stack23, $stack27, $stack32, $stack36;
        org.apache.maven.lifecycle.MojoExecutionConfigurator $stack38;
        org.apache.maven.plugin.BuildPluginManager $stack40;
        org.apache.maven.model.Plugin $stack41;
        java.util.List $stack43, forkedExecutions;
        org.eclipse.aether.RepositorySystemSession $stack44;
        java.util.Iterator mojoExecutions, forkedExecutions#3, forkedExecution#9;
        java.util.ArrayList $u0;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoExecution := @parameter0: org.apache.maven.plugin.MojoExecution;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        project := @parameter2: org.apache.maven.project.MavenProject;

        alreadyPlannedExecutions := @parameter3: java.util.Collection;

        mojoDescriptor = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        forkedPhase = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getExecutePhase()>();

        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        lifecycleMappings = specialinvoke $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map calculateLifecycleMappings(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.lang.String)>(session, project, forkedPhase);

        $stack16 = interfaceinvoke lifecycleMappings.<java.util.Map: java.util.Collection values()>();

        mojoExecutions = interfaceinvoke $stack16.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack18 = interfaceinvoke mojoExecutions.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label05;

        $stack32 = interfaceinvoke mojoExecutions.<java.util.Iterator: java.lang.Object next()>();

        forkedExecutions = (java.util.List) $stack32;

        forkedExecutions#3 = interfaceinvoke forkedExecutions.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack34 = interfaceinvoke forkedExecutions#3.<java.util.Iterator: boolean hasNext()>();

        if $stack34 == 0 goto label04;

        $stack36 = interfaceinvoke forkedExecutions#3.<java.util.Iterator: java.lang.Object next()>();

        forkedExecution = (org.apache.maven.plugin.MojoExecution) $stack36;

        $stack37 = virtualinvoke forkedExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        if $stack37 != null goto label03;

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack40 = $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.plugin.BuildPluginManager pluginManager>;

        $stack41 = virtualinvoke forkedExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.model.Plugin getPlugin()>();

        $stack42 = virtualinvoke forkedExecution.<org.apache.maven.plugin.MojoExecution: java.lang.String getGoal()>();

        $stack43 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack44 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        forkedMojoDescriptor = interfaceinvoke $stack40.<org.apache.maven.plugin.BuildPluginManager: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor(org.apache.maven.model.Plugin,java.lang.String,java.util.List,org.eclipse.aether.RepositorySystemSession)>($stack41, $stack42, $stack43, $stack44);

        virtualinvoke forkedExecution.<org.apache.maven.plugin.MojoExecution: void setMojoDescriptor(org.apache.maven.plugin.descriptor.MojoDescriptor)>(forkedMojoDescriptor);

     label03:
        $r2 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack38 = specialinvoke $r2.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator(org.apache.maven.plugin.MojoExecution)>(forkedExecution);

        interfaceinvoke $stack38.<org.apache.maven.lifecycle.MojoExecutionConfigurator: void configure(org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution,boolean)>(project, forkedExecution, 0);

        goto label02;

     label04:
        goto label01;

     label05:
        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void injectLifecycleOverlay(java.util.Map,org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject)>(lifecycleMappings, mojoExecution, session, project);

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $stack20 = interfaceinvoke lifecycleMappings.<java.util.Map: java.util.Collection values()>();

        forkedExecutions#3 = interfaceinvoke $stack20.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $stack22 = interfaceinvoke forkedExecutions#3.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label10;

        $stack23 = interfaceinvoke forkedExecutions#3.<java.util.Iterator: java.lang.Object next()>();

        forkedExecutions = (java.util.List) $stack23;

        forkedExecution#9 = interfaceinvoke forkedExecutions.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack25 = interfaceinvoke forkedExecution#9.<java.util.Iterator: boolean hasNext()>();

        if $stack25 == 0 goto label09;

        $stack27 = interfaceinvoke forkedExecution#9.<java.util.Iterator: java.lang.Object next()>();

        forkedMojoDescriptor#10 = (org.apache.maven.plugin.MojoExecution) $stack27;

        $stack28 = virtualinvoke forkedMojoDescriptor#10.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        $stack29 = interfaceinvoke alreadyPlannedExecutions.<java.util.Collection: boolean contains(java.lang.Object)>($stack28);

        if $stack29 != 0 goto label08;

        $r4 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r4.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void finalizeMojoConfiguration(org.apache.maven.plugin.MojoExecution)>(forkedMojoDescriptor#10);

        $r5 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r5.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>(forkedMojoDescriptor#10, session, project, alreadyPlannedExecutions);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(forkedMojoDescriptor#10);

     label08:
        goto label07;

     label09:
        goto label06;

     label10:
        return $u0;
    }

    private void injectLifecycleOverlay(java.util.Map, org.apache.maven.plugin.MojoExecution, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject) throws org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.plugin.MojoExecution mojoExecution, forkedExecution, $u3;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor, forkedMojoDescriptor;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.lang.String forkedLifecycle, $stack28, $stack51, $stack75, goal;
        boolean $stack22, $stack26, $stack33, $stack36, $stack44;
        org.apache.maven.plugin.lifecycle.Lifecycle lifecycleOverlay;
        java.util.List $stack24, forkedExecutions, $stack31, $stack42;
        java.lang.Object $stack27, $stack29, $stack34, $stack37, $stack41, $stack46, $stack52;
        org.apache.maven.plugin.lifecycle.Phase phase;
        java.util.Map lifecycleMappings;
        int $stack47;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.lifecycle.internal.MojoDescriptorCreator $stack48;
        org.codehaus.plexus.util.xml.Xpp3Dom forkedConfiguration, phaseConfiguration#8, goal#11;
        org.apache.maven.lifecycle.MojoExecutionConfigurator $stack53;
        java.lang.Throwable $stack72, $r0, $r1, $r2;
        org.apache.maven.model.Plugin $stack74;
        java.util.Iterator e#2, phaseConfiguration, forkedExecution, execution#9;
        org.apache.maven.plugin.lifecycle.Execution execution;
        org.apache.maven.plugin.PluginDescriptorParsingException $u0;
        org.apache.maven.lifecycle.LifecycleNotFoundException $u1;
        org.apache.maven.plugin.MojoNotFoundException $u2;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r3, $r4;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        lifecycleMappings := @parameter0: java.util.Map;

        mojoExecution := @parameter1: org.apache.maven.plugin.MojoExecution;

        session := @parameter2: org.apache.maven.execution.MavenSession;

        project := @parameter3: org.apache.maven.project.MavenProject;

        mojoDescriptor = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        pluginDescriptor = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        forkedLifecycle = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getExecuteLifecycle()>();

        $stack22 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(forkedLifecycle);

        if $stack22 == 0 goto label01;

        return;

     label01:
        lifecycleOverlay = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.lifecycle.Lifecycle getLifecycleMapping(java.lang.String)>(forkedLifecycle);

     label02:
        goto label04;

     label03:
        $stack72 := @caughtexception;

        $u0 = new org.apache.maven.plugin.PluginDescriptorParsingException;

        $stack74 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.model.Plugin getPlugin()>();

        $stack75 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getSource()>();

        specialinvoke $u0.<org.apache.maven.plugin.PluginDescriptorParsingException: void <init>(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>($stack74, $stack75, $stack72);

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label04:
        if lifecycleOverlay != null goto label05;

        $u1 = new org.apache.maven.lifecycle.LifecycleNotFoundException;

        specialinvoke $u1.<org.apache.maven.lifecycle.LifecycleNotFoundException: void <init>(java.lang.String)>(forkedLifecycle);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label05:
        $stack24 = virtualinvoke lifecycleOverlay.<org.apache.maven.plugin.lifecycle.Lifecycle: java.util.List getPhases()>();

        e#2 = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $stack26 = interfaceinvoke e#2.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label15;

        $stack27 = interfaceinvoke e#2.<java.util.Iterator: java.lang.Object next()>();

        phase = (org.apache.maven.plugin.lifecycle.Phase) $stack27;

        $stack28 = virtualinvoke phase.<org.apache.maven.plugin.lifecycle.Phase: java.lang.String getId()>();

        $stack29 = interfaceinvoke lifecycleMappings.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack28);

        forkedExecutions = (java.util.List) $stack29;

        if forkedExecutions == null goto label14;

        $stack31 = virtualinvoke phase.<org.apache.maven.plugin.lifecycle.Phase: java.util.List getExecutions()>();

        phaseConfiguration = interfaceinvoke $stack31.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack33 = interfaceinvoke phaseConfiguration.<java.util.Iterator: boolean hasNext()>();

        if $stack33 == 0 goto label12;

        $stack41 = interfaceinvoke phaseConfiguration.<java.util.Iterator: java.lang.Object next()>();

        execution = (org.apache.maven.plugin.lifecycle.Execution) $stack41;

        $stack42 = virtualinvoke execution.<org.apache.maven.plugin.lifecycle.Execution: java.util.List getGoals()>();

        forkedExecution = interfaceinvoke $stack42.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $stack44 = interfaceinvoke forkedExecution.<java.util.Iterator: boolean hasNext()>();

        if $stack44 == 0 goto label11;

        $stack46 = interfaceinvoke forkedExecution.<java.util.Iterator: java.lang.Object next()>();

        goal = (java.lang.String) $stack46;

        $stack47 = virtualinvoke goal.<java.lang.String: int indexOf(int)>(58);

        if $stack47 >= 0 goto label09;

        forkedMojoDescriptor = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.descriptor.MojoDescriptor getMojo(java.lang.String)>(goal);

        if forkedMojoDescriptor != null goto label10;

        $u2 = new org.apache.maven.plugin.MojoNotFoundException;

        specialinvoke $u2.<org.apache.maven.plugin.MojoNotFoundException: void <init>(java.lang.String,org.apache.maven.plugin.descriptor.PluginDescriptor)>(goal, pluginDescriptor);

        $r2 = (java.lang.Throwable) $u2;

        throw $r2;

     label09:
        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack48 = $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.internal.MojoDescriptorCreator mojoDescriptorCreator>;

        forkedMojoDescriptor = virtualinvoke $stack48.<org.apache.maven.lifecycle.internal.MojoDescriptorCreator: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor(java.lang.String,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject)>(goal, session, project);

     label10:
        $u3 = new org.apache.maven.plugin.MojoExecution;

        $stack51 = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: java.lang.String getExecutionId()>();

        specialinvoke $u3.<org.apache.maven.plugin.MojoExecution: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,java.lang.String)>(forkedMojoDescriptor, $stack51);

        $stack52 = virtualinvoke execution.<org.apache.maven.plugin.lifecycle.Execution: java.lang.Object getConfiguration()>();

        forkedConfiguration = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack52;

        virtualinvoke $u3.<org.apache.maven.plugin.MojoExecution: void setConfiguration(org.codehaus.plexus.util.xml.Xpp3Dom)>(forkedConfiguration);

        $r4 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack53 = specialinvoke $r4.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator(org.apache.maven.plugin.MojoExecution)>($u3);

        interfaceinvoke $stack53.<org.apache.maven.lifecycle.MojoExecutionConfigurator: void configure(org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution,boolean)>(project, $u3, 1);

        interfaceinvoke forkedExecutions.<java.util.List: boolean add(java.lang.Object)>($u3);

        goto label08;

     label11:
        goto label07;

     label12:
        $stack34 = virtualinvoke phase.<org.apache.maven.plugin.lifecycle.Phase: java.lang.Object getConfiguration()>();

        phaseConfiguration#8 = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack34;

        if phaseConfiguration#8 == null goto label14;

        execution#9 = interfaceinvoke forkedExecutions.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $stack36 = interfaceinvoke execution#9.<java.util.Iterator: boolean hasNext()>();

        if $stack36 == 0 goto label14;

        $stack37 = interfaceinvoke execution#9.<java.util.Iterator: java.lang.Object next()>();

        forkedExecution = (org.apache.maven.plugin.MojoExecution) $stack37;

        goal#11 = virtualinvoke forkedExecution.<org.apache.maven.plugin.MojoExecution: org.codehaus.plexus.util.xml.Xpp3Dom getConfiguration()>();

        goal#11 = staticinvoke <org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom mergeXpp3Dom(org.codehaus.plexus.util.xml.Xpp3Dom,org.codehaus.plexus.util.xml.Xpp3Dom)>(phaseConfiguration#8, goal#11);

        virtualinvoke forkedExecution.<org.apache.maven.plugin.MojoExecution: void setConfiguration(org.codehaus.plexus.util.xml.Xpp3Dom)>(goal#11);

        goto label13;

     label14:
        goto label06;

     label15:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch org.codehaus.plexus.util.xml.pull.XmlPullParserException from label01 to label02 with label03;
    }

    private java.util.List calculateForkedGoal(org.apache.maven.plugin.MojoExecution, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, java.util.Collection) throws org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException, org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.plugin.MojoExecution mojoExecution, $u1;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor, forkedMojoDescriptor;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.lang.String forkedGoal;
        java.util.Collection alreadyPlannedExecutions;
        boolean $stack14;
        DefaultLifecycleExecutionPlanCalculator this;
        org.apache.maven.lifecycle.MojoExecutionConfigurator $stack16;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.execution.MavenSession session;
        java.util.List $stack17, $stack18;
        org.apache.maven.plugin.MojoNotFoundException $u0;
        java.lang.Throwable $r0;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r1, $r2, $r3;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoExecution := @parameter0: org.apache.maven.plugin.MojoExecution;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        project := @parameter2: org.apache.maven.project.MavenProject;

        alreadyPlannedExecutions := @parameter3: java.util.Collection;

        mojoDescriptor = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        pluginDescriptor = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        forkedGoal = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getExecuteGoal()>();

        forkedMojoDescriptor = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.descriptor.MojoDescriptor getMojo(java.lang.String)>(forkedGoal);

        if forkedMojoDescriptor != null goto label1;

        $u0 = new org.apache.maven.plugin.MojoNotFoundException;

        specialinvoke $u0.<org.apache.maven.plugin.MojoNotFoundException: void <init>(java.lang.String,org.apache.maven.plugin.descriptor.PluginDescriptor)>(forkedGoal, pluginDescriptor);

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        $stack14 = interfaceinvoke alreadyPlannedExecutions.<java.util.Collection: boolean contains(java.lang.Object)>(forkedMojoDescriptor);

        if $stack14 == 0 goto label2;

        $stack18 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack18;

     label2:
        $u1 = new org.apache.maven.plugin.MojoExecution;

        specialinvoke $u1.<org.apache.maven.plugin.MojoExecution: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,java.lang.String)>(forkedMojoDescriptor, forkedGoal);

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack16 = specialinvoke $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator(org.apache.maven.plugin.MojoExecution)>($u1);

        interfaceinvoke $stack16.<org.apache.maven.lifecycle.MojoExecutionConfigurator: void configure(org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution,boolean)>(project, $u1, 1);

        $r2 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r2.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void finalizeMojoConfiguration(org.apache.maven.plugin.MojoExecution)>($u1);

        $r3 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        specialinvoke $r3.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>($u1, session, project, alreadyPlannedExecutions);

        $stack17 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u1);

        return $stack17;
    }

    private org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator(org.apache.maven.plugin.MojoExecution)
    {
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.plugin.descriptor.MojoDescriptor $stack4;
        DefaultLifecycleExecutionPlanCalculator this;
        java.util.Map $stack6, $stack8;
        java.lang.Object $stack7, $stack9;
        java.lang.String configuratorId;
        org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator;
        org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator $r0, $r1;

        this := @this: DefaultLifecycleExecutionPlanCalculator;

        mojoExecution := @parameter0: org.apache.maven.plugin.MojoExecution;

        $stack4 = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        configuratorId = virtualinvoke $stack4.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getComponentConfigurator()>();

        if configuratorId != null goto label1;

        configuratorId = "default";

     label1:
        $r0 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack6 = $r0.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map mojoExecutionConfigurators>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(configuratorId);

        mojoExecutionConfigurator = (org.apache.maven.lifecycle.MojoExecutionConfigurator) $stack7;

        if mojoExecutionConfigurator != null goto label2;

        $r1 = (org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator) this;

        $stack8 = $r1.<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map mojoExecutionConfigurators>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>("default");

        mojoExecutionConfigurator = (org.apache.maven.lifecycle.MojoExecutionConfigurator) $stack9;

     label2:
        return mojoExecutionConfigurator;
    }
}
