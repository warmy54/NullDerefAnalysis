public class DefaultLifecyclesTest extends java.lang.Object
{
    private org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles;

    public void <init>()
    {
        DefaultLifecyclesTest this;

        this := @this: DefaultLifecyclesTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDefaultLifecycles()
    {
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.DefaultLifecycles $stack2;
        java.util.List lifecycles;
        org.hamcrest.Matcher $stack4, $stack6;
        java.lang.String[] $stack5;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        $stack2 = $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles>;

        lifecycles = virtualinvoke $stack2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasSize(int)>(4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(lifecycles, $stack4);

        $stack5 = <org.apache.maven.lifecycle.DefaultLifecycles: java.lang.String[] STANDARD_LIFECYCLES>;

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher arrayWithSize(int)>(4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    public void testDefaultLifecycle()
    {
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.Lifecycle lifecycle;
        java.lang.String $stack3;
        org.hamcrest.Matcher $stack4, $stack6;
        java.util.List $stack5;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        lifecycle = specialinvoke $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.Lifecycle getLifeCycleById(java.lang.String)>("default");

        $stack3 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("default");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack3, $stack4);

        $stack5 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.util.List getPhases()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasSize(int)>(23);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    public void testCleanLifecycle()
    {
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.Lifecycle lifecycle;
        java.lang.String $stack3;
        org.hamcrest.Matcher $stack4, $stack6;
        java.util.List $stack5;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        lifecycle = specialinvoke $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.Lifecycle getLifeCycleById(java.lang.String)>("clean");

        $stack3 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("clean");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack3, $stack4);

        $stack5 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.util.List getPhases()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasSize(int)>(3);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    public void testSiteLifecycle()
    {
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.Lifecycle lifecycle;
        java.lang.String $stack3;
        org.hamcrest.Matcher $stack4, $stack6;
        java.util.List $stack5;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        lifecycle = specialinvoke $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.Lifecycle getLifeCycleById(java.lang.String)>("site");

        $stack3 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("site");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack3, $stack4);

        $stack5 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.util.List getPhases()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasSize(int)>(4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    public void testWrapperLifecycle()
    {
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.Lifecycle lifecycle;
        java.lang.String $stack3;
        org.hamcrest.Matcher $stack4, $stack6;
        java.util.List $stack5;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        lifecycle = specialinvoke $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.Lifecycle getLifeCycleById(java.lang.String)>("wrapper");

        $stack3 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("wrapper");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack3, $stack4);

        $stack5 = virtualinvoke lifecycle.<org.apache.maven.lifecycle.Lifecycle: java.util.List getPhases()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasSize(int)>(1);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    public void testCustomLifecycle()
    {
        java.lang.String[] $stack6;
        java.util.List $stack8, $stack12, $stack21, $stack26, $stack31, $stack36, $stack41;
        java.util.Map $stack9, $stack20;
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.DefaultLifecycles $stack11, $u2;
        java.util.stream.Stream $stack15;
        java.util.function.Function $stack16, $stack17;
        java.util.stream.Collector $stack18;
        java.lang.Object $stack19, $stack22, $stack27, $stack32, $stack37, $stack42;
        org.apache.maven.lifecycle.Lifecycle $stack23, $stack28, $stack33, $stack38, $stack43, $u1;
        java.lang.String $stack24, $stack29, $stack34, $stack39, $stack44;
        org.hamcrest.Matcher $stack25, $stack30, $stack35, $stack40, $stack45;
        java.util.ArrayList $u0;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $u1 = new org.apache.maven.lifecycle.Lifecycle;

        $stack6 = newarray (java.lang.String)[3];

        $stack6[0] = "extract";

        $stack6[1] = "transform";

        $stack6[2] = "load";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        $stack9 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $u1.<org.apache.maven.lifecycle.Lifecycle: void <init>(java.lang.String,java.util.List,java.util.Map)>("etl", $stack8, $stack9);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        $stack11 = $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles>;

        $stack12 = virtualinvoke $stack11.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        interfaceinvoke $u0.<java.util.List: boolean addAll(java.util.Collection)>($stack12);

        $u2 = new org.apache.maven.lifecycle.DefaultLifecycles;

        $stack15 = interfaceinvoke $u0.<java.util.List: java.util.stream.Stream stream()>();

        $stack16 = staticinvoke <DefaultLifecyclesTest$lambda_testCustomLifecycle_0__310: java.util.function.Function bootstrap$()>();

        $stack17 = staticinvoke <DefaultLifecyclesTest$lambda_testCustomLifecycle_1__311: java.util.function.Function bootstrap$()>();

        $stack18 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($stack16, $stack17);

        $stack19 = interfaceinvoke $stack15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack18);

        $stack20 = (java.util.Map) $stack19;

        specialinvoke $u2.<org.apache.maven.lifecycle.DefaultLifecycles: void <init>(java.util.Map,org.codehaus.plexus.logging.Logger)>($stack20, null);

        $stack21 = virtualinvoke $u2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack22 = interfaceinvoke $stack21.<java.util.List: java.lang.Object get(int)>(0);

        $stack23 = (org.apache.maven.lifecycle.Lifecycle) $stack22;

        $stack24 = virtualinvoke $stack23.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("default");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack24, $stack25);

        $stack26 = virtualinvoke $u2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack27 = interfaceinvoke $stack26.<java.util.List: java.lang.Object get(int)>(1);

        $stack28 = (org.apache.maven.lifecycle.Lifecycle) $stack27;

        $stack29 = virtualinvoke $stack28.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack30 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("clean");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack29, $stack30);

        $stack31 = virtualinvoke $u2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack32 = interfaceinvoke $stack31.<java.util.List: java.lang.Object get(int)>(2);

        $stack33 = (org.apache.maven.lifecycle.Lifecycle) $stack32;

        $stack34 = virtualinvoke $stack33.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack35 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("site");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack34, $stack35);

        $stack36 = virtualinvoke $u2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack37 = interfaceinvoke $stack36.<java.util.List: java.lang.Object get(int)>(3);

        $stack38 = (org.apache.maven.lifecycle.Lifecycle) $stack37;

        $stack39 = virtualinvoke $stack38.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack40 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("wrapper");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack39, $stack40);

        $stack41 = virtualinvoke $u2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack42 = interfaceinvoke $stack41.<java.util.List: java.lang.Object get(int)>(4);

        $stack43 = (org.apache.maven.lifecycle.Lifecycle) $stack42;

        $stack44 = virtualinvoke $stack43.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack45 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("etl");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack44, $stack45);

        return;
    }

    private org.apache.maven.lifecycle.Lifecycle getLifeCycleById(java.lang.String)
    {
        DefaultLifecyclesTest this;
        org.apache.maven.lifecycle.DefaultLifecycles $stack2;
        java.util.List $stack3;
        java.util.stream.Stream $stack4, $stack6;
        java.lang.String id;
        java.util.function.Predicate $stack5;
        java.util.Optional $stack7;
        java.util.function.Supplier $stack8;
        java.lang.Object $stack9;
        org.apache.maven.lifecycle.Lifecycle $stack10;
        org.apache.maven.lifecycle.DefaultLifecyclesTest $r0;

        this := @this: DefaultLifecyclesTest;

        id := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.lifecycle.DefaultLifecyclesTest) this;

        $stack2 = $r0.<org.apache.maven.lifecycle.DefaultLifecyclesTest: org.apache.maven.lifecycle.DefaultLifecycles defaultLifeCycles>;

        $stack3 = virtualinvoke $stack2.<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.util.stream.Stream stream()>();

        $stack5 = staticinvoke <DefaultLifecyclesTest$lambda_getLifeCycleById_2__309: java.util.function.Predicate bootstrap$(java.lang.String)>(id);

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack5);

        $stack7 = interfaceinvoke $stack6.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $stack8 = staticinvoke <DefaultLifecyclesTest$init__312: java.util.function.Supplier bootstrap$()>();

        $stack9 = virtualinvoke $stack7.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>($stack8);

        $stack10 = (org.apache.maven.lifecycle.Lifecycle) $stack9;

        return $stack10;
    }

    private static boolean lambda$getLifeCycleById$2(java.lang.String, org.apache.maven.lifecycle.Lifecycle)
    {
        java.lang.String id, $stack2;
        org.apache.maven.lifecycle.Lifecycle l;
        boolean $stack3;

        id := @parameter0: java.lang.String;

        l := @parameter1: org.apache.maven.lifecycle.Lifecycle;

        $stack2 = virtualinvoke l.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        $stack3 = virtualinvoke id.<java.lang.String: boolean equals(java.lang.Object)>($stack2);

        return $stack3;
    }

    private static org.apache.maven.lifecycle.Lifecycle lambda$testCustomLifecycle$1(org.apache.maven.lifecycle.Lifecycle)
    {
        org.apache.maven.lifecycle.Lifecycle l;

        l := @parameter0: org.apache.maven.lifecycle.Lifecycle;

        return l;
    }

    private static java.lang.String lambda$testCustomLifecycle$0(org.apache.maven.lifecycle.Lifecycle)
    {
        org.apache.maven.lifecycle.Lifecycle l;
        java.lang.String $stack1;

        l := @parameter0: org.apache.maven.lifecycle.Lifecycle;

        $stack1 = virtualinvoke l.<org.apache.maven.lifecycle.Lifecycle: java.lang.String getId()>();

        return $stack1;
    }
}
