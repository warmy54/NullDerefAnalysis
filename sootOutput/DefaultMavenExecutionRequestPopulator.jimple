public class DefaultMavenExecutionRequestPopulator extends java.lang.Object implements org.apache.maven.execution.MavenExecutionRequestPopulator
{
    private final org.apache.maven.bridge.MavenRepositorySystem repositorySystem;

    public void <init>(org.apache.maven.bridge.MavenRepositorySystem)
    {
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.bridge.MavenRepositorySystem repositorySystem;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0;

        this := @this: DefaultMavenExecutionRequestPopulator;

        repositorySystem := @parameter0: org.apache.maven.bridge.MavenRepositorySystem;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem> = repositorySystem;

        return;
    }

    public org.apache.maven.execution.MavenExecutionRequest populateFromToolchains(org.apache.maven.execution.MavenExecutionRequest, org.apache.maven.toolchain.model.PersistedToolchains) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        org.apache.maven.toolchain.model.PersistedToolchains toolchains;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.util.HashMap $stack6;
        java.util.List $stack7, $stack17;
        java.util.Iterator l4;
        boolean $stack9, $stack14;
        java.lang.Object $stack12, $stack16;
        org.apache.maven.toolchain.model.ToolchainModel model;
        java.lang.String $stack13, $stack15, $stack20;
        java.util.ArrayList $stack21;
        DefaultMavenExecutionRequestPopulator this;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        toolchains := @parameter1: org.apache.maven.toolchain.model.PersistedToolchains;

        if toolchains == null goto label4;

        $stack6 = new java.util.HashMap;

        specialinvoke $stack6.<java.util.HashMap: void <init>(int)>(2);

        $stack7 = virtualinvoke toolchains.<org.apache.maven.toolchain.model.PersistedToolchains: java.util.List getToolchains()>();

        l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack12 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        model = (org.apache.maven.toolchain.model.ToolchainModel) $stack12;

        $stack13 = virtualinvoke model.<org.apache.maven.toolchain.model.ToolchainModel: java.lang.String getType()>();

        $stack14 = interfaceinvoke $stack6.<java.util.Map: boolean containsKey(java.lang.Object)>($stack13);

        if $stack14 != 0 goto label2;

        $stack20 = virtualinvoke model.<org.apache.maven.toolchain.model.ToolchainModel: java.lang.String getType()>();

        $stack21 = new java.util.ArrayList;

        specialinvoke $stack21.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack20, $stack21);

     label2:
        $stack15 = virtualinvoke model.<org.apache.maven.toolchain.model.ToolchainModel: java.lang.String getType()>();

        $stack16 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack15);

        $stack17 = (java.util.List) $stack16;

        interfaceinvoke $stack17.<java.util.List: boolean add(java.lang.Object)>(model);

        goto label1;

     label3:
        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setToolchains(java.util.Map)>($stack6);

     label4:
        return request;
    }

    public org.apache.maven.execution.MavenExecutionRequest populateDefaults(org.apache.maven.execution.MavenExecutionRequest) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0, $r1, $r2, $r3, $r4;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        specialinvoke $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void baseDirectory(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r1 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        specialinvoke $r1.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void localRepository(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r2 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        specialinvoke $r2.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void populateDefaultPluginGroups(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r3 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        specialinvoke $r3.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void injectDefaultRepositories(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r4 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        specialinvoke $r4.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void injectDefaultPluginRepositories(org.apache.maven.execution.MavenExecutionRequest)>(request);

        return request;
    }

    private void populateDefaultPluginGroups(org.apache.maven.execution.MavenExecutionRequest)
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        DefaultMavenExecutionRequestPopulator this;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginGroup(java.lang.String)>("org.apache.maven.plugins");

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginGroup(java.lang.String)>("org.codehaus.mojo");

        return;
    }

    private void injectDefaultRepositories(org.apache.maven.execution.MavenExecutionRequest) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.bridge.MavenRepositorySystem $stack4, $stack8;
        java.util.List $stack5;
        java.util.Set definedRepositories;
        boolean $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository $stack9;
        java.lang.Exception $stack11;
        org.apache.maven.execution.MavenExecutionRequestPopulationException $u0;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0, $r1;
        java.lang.Throwable $r2;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack4 = $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack5 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getRemoteRepositories()>();

        definedRepositories = virtualinvoke $stack4.<org.apache.maven.bridge.MavenRepositorySystem: java.util.Set getRepoIds(java.util.List)>($stack5);

        $stack7 = interfaceinvoke definedRepositories.<java.util.Set: boolean contains(java.lang.Object)>("central");

        if $stack7 != 0 goto label4;

     label1:
        $r1 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack8 = $r1.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack9 = virtualinvoke $stack8.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createDefaultRemoteRepository(org.apache.maven.execution.MavenExecutionRequest)>(request);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addRemoteRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack9);

     label2:
        goto label4;

     label3:
        $stack11 := @caughtexception;

        $u0 = new org.apache.maven.execution.MavenExecutionRequestPopulationException;

        specialinvoke $u0.<org.apache.maven.execution.MavenExecutionRequestPopulationException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot create default remote repository.", $stack11);

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void injectDefaultPluginRepositories(org.apache.maven.execution.MavenExecutionRequest) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.bridge.MavenRepositorySystem $stack4, $stack8;
        java.util.List $stack5;
        java.util.Set definedRepositories;
        boolean $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository $stack9;
        java.lang.Exception $stack11;
        org.apache.maven.execution.MavenExecutionRequestPopulationException $u0;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0, $r1;
        java.lang.Throwable $r2;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack4 = $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack5 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.List getPluginArtifactRepositories()>();

        definedRepositories = virtualinvoke $stack4.<org.apache.maven.bridge.MavenRepositorySystem: java.util.Set getRepoIds(java.util.List)>($stack5);

        $stack7 = interfaceinvoke definedRepositories.<java.util.Set: boolean contains(java.lang.Object)>("central");

        if $stack7 != 0 goto label4;

     label1:
        $r1 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack8 = $r1.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack9 = virtualinvoke $stack8.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createDefaultRemoteRepository(org.apache.maven.execution.MavenExecutionRequest)>(request);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack9);

     label2:
        goto label4;

     label3:
        $stack11 := @caughtexception;

        $u0 = new org.apache.maven.execution.MavenExecutionRequestPopulationException;

        specialinvoke $u0.<org.apache.maven.execution.MavenExecutionRequestPopulationException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot create default remote repository.", $stack11);

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void localRepository(org.apache.maven.execution.MavenExecutionRequest) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.artifact.repository.ArtifactRepository $stack2, $stack5, $stack9;
        java.io.File $stack3, $stack7, $u0;
        java.lang.String $stack6;
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $stack2 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        if $stack2 != null goto label1;

        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack9 = specialinvoke $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(org.apache.maven.execution.MavenExecutionRequest)>(request);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack9);

     label1:
        $stack3 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getLocalRepositoryPath()>();

        if $stack3 != null goto label2;

        $u0 = new java.io.File;

        $stack5 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack6);

        $stack7 = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepositoryPath(java.io.File)>($stack7);

     label2:
        return;
    }

    private org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(org.apache.maven.execution.MavenExecutionRequest) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        java.io.File $stack4, $stack9, $stack14, $u0;
        boolean $stack5;
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.bridge.MavenRepositorySystem $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository $stack8;
        java.lang.Exception $stack17;
        java.lang.String localRepositoryPath;
        org.apache.maven.execution.MavenExecutionRequestPopulationException $u1;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0;
        java.lang.Throwable $r1;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        localRepositoryPath = null;

        $stack4 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getLocalRepositoryPath()>();

        if $stack4 == null goto label1;

        $stack14 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getLocalRepositoryPath()>();

        localRepositoryPath = virtualinvoke $stack14.<java.io.File: java.lang.String getAbsolutePath()>();

     label1:
        $stack5 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(localRepositoryPath);

        if $stack5 == 0 goto label2;

        $stack9 = <org.apache.maven.repository.RepositorySystem: java.io.File defaultUserLocalRepository>;

        localRepositoryPath = virtualinvoke $stack9.<java.io.File: java.lang.String getAbsolutePath()>();

     label2:
        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack7 = $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>(localRepositoryPath);

        $stack8 = virtualinvoke $stack7.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(org.apache.maven.execution.MavenExecutionRequest,java.io.File)>(request, $u0);

     label3:
        return $stack8;

     label4:
        $stack17 := @caughtexception;

        $u1 = new org.apache.maven.execution.MavenExecutionRequestPopulationException;

        specialinvoke $u1.<org.apache.maven.execution.MavenExecutionRequestPopulationException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot create local repository.", $stack17);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void baseDirectory(org.apache.maven.execution.MavenExecutionRequest)
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        java.lang.String $stack2;
        java.io.File $stack3, $stack4, $stack5, $stack6;
        DefaultMavenExecutionRequestPopulator this;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $stack2 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getBaseDirectory()>();

        if $stack2 != null goto label1;

        $stack3 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        if $stack3 == null goto label1;

        $stack4 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack5 = virtualinvoke $stack4.<java.io.File: java.io.File getAbsoluteFile()>();

        $stack6 = virtualinvoke $stack5.<java.io.File: java.io.File getParentFile()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setBaseDirectory(java.io.File)>($stack6);

     label1:
        return;
    }

    public org.apache.maven.execution.MavenExecutionRequest populateFromSettings(org.apache.maven.execution.MavenExecutionRequest, org.apache.maven.settings.Settings) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        org.apache.maven.settings.Settings settings;
        org.apache.maven.execution.MavenExecutionRequest request;
        boolean $stack10, $stack12, $stack20, $stack26, $stack31, $stack37, $stack41, $stack44, $stack60, $stack23;
        java.util.List $stack14, $stack18, $stack21, $stack24, $stack27, $stack29, $stack35, remoteRepositories, pluginRepositories#19;
        java.lang.String $stack16, $stack36;
        java.lang.Object $stack32, $stack45, $stack50, $stack55, $stack59, $stack64;
        org.apache.maven.model.Profile $stack33;
        DefaultMavenExecutionRequestPopulator this;
        org.apache.maven.bridge.MavenRepositorySystem $stack46, $stack51;
        org.apache.maven.artifact.repository.ArtifactRepository $stack47, $stack52;
        java.lang.Throwable $stack68, $stack69;
        java.util.Iterator l3, pluginRepositories, remoteRepository#20;
        org.apache.maven.settings.Server server;
        org.apache.maven.settings.Proxy server#9;
        org.apache.maven.settings.Mirror server#12;
        org.apache.maven.settings.Profile server#15;
        org.apache.maven.settings.Repository remoteRepository, pluginRepo#21;
        org.apache.maven.execution.DefaultMavenExecutionRequestPopulator $r0, $r1;

        this := @this: DefaultMavenExecutionRequestPopulator;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        settings := @parameter1: org.apache.maven.settings.Settings;

        if settings != null goto label01;

        return request;

     label01:
        $stack10 = virtualinvoke settings.<org.apache.maven.settings.Settings: boolean isOffline()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setOffline(boolean)>($stack10);

        $stack12 = virtualinvoke settings.<org.apache.maven.settings.Settings: boolean isInteractiveMode()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setInteractiveMode(boolean)>($stack12);

        $stack14 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getPluginGroups()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setPluginGroups(java.util.List)>($stack14);

        $stack16 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.lang.String getLocalRepository()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepositoryPath(java.lang.String)>($stack16);

        $stack18 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getServers()>();

        l3 = interfaceinvoke $stack18.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack20 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label03;

        $stack64 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server = (org.apache.maven.settings.Server) $stack64;

        server = virtualinvoke server.<org.apache.maven.settings.Server: org.apache.maven.settings.Server clone()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addServer(org.apache.maven.settings.Server)>(server);

        goto label02;

     label03:
        $stack21 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getProxies()>();

        l3 = interfaceinvoke $stack21.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $stack23 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label06;

        $stack59 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server#9 = (org.apache.maven.settings.Proxy) $stack59;

        $stack60 = virtualinvoke server#9.<org.apache.maven.settings.Proxy: boolean isActive()>();

        if $stack60 != 0 goto label05;

        goto label04;

     label05:
        server#9 = virtualinvoke server#9.<org.apache.maven.settings.Proxy: org.apache.maven.settings.Proxy clone()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addProxy(org.apache.maven.settings.Proxy)>(server#9);

        goto label04;

     label06:
        $stack24 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getMirrors()>();

        l3 = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack26 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label08;

        $stack55 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server#12 = (org.apache.maven.settings.Mirror) $stack55;

        server#12 = virtualinvoke server#12.<org.apache.maven.settings.Mirror: org.apache.maven.settings.Mirror clone()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addMirror(org.apache.maven.settings.Mirror)>(server#12);

        goto label07;

     label08:
        $stack27 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getActiveProfiles()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setActiveProfiles(java.util.List)>($stack27);

        $stack29 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getProfiles()>();

        l3 = interfaceinvoke $stack29.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $stack31 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label22;

        $stack32 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server#15 = (org.apache.maven.settings.Profile) $stack32;

        $stack33 = staticinvoke <org.apache.maven.settings.SettingsUtils: org.apache.maven.model.Profile convertFromSettingsProfile(org.apache.maven.settings.Profile)>(server#15);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addProfile(org.apache.maven.model.Profile)>($stack33);

        $stack35 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getActiveProfiles()>();

        $stack36 = virtualinvoke server#15.<org.apache.maven.settings.Profile: java.lang.String getId()>();

        $stack37 = interfaceinvoke $stack35.<java.util.List: boolean contains(java.lang.Object)>($stack36);

        if $stack37 == 0 goto label21;

        remoteRepositories = virtualinvoke server#15.<org.apache.maven.settings.Profile: java.util.List getRepositories()>();

        pluginRepositories = interfaceinvoke remoteRepositories.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $stack41 = interfaceinvoke pluginRepositories.<java.util.Iterator: boolean hasNext()>();

        if $stack41 == 0 goto label15;

        $stack50 = interfaceinvoke pluginRepositories.<java.util.Iterator: java.lang.Object next()>();

        remoteRepository = (org.apache.maven.settings.Repository) $stack50;

     label11:
        $r0 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack51 = $r0.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack52 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.settings.Repository)>(remoteRepository);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addRemoteRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack52);

     label12:
        goto label14;

     label13:
        $stack69 := @caughtexception;

     label14:
        goto label10;

     label15:
        pluginRepositories#19 = virtualinvoke server#15.<org.apache.maven.settings.Profile: java.util.List getPluginRepositories()>();

        remoteRepository#20 = interfaceinvoke pluginRepositories#19.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $stack44 = interfaceinvoke remoteRepository#20.<java.util.Iterator: boolean hasNext()>();

        if $stack44 == 0 goto label21;

        $stack45 = interfaceinvoke remoteRepository#20.<java.util.Iterator: java.lang.Object next()>();

        pluginRepo#21 = (org.apache.maven.settings.Repository) $stack45;

     label17:
        $r1 = (org.apache.maven.execution.DefaultMavenExecutionRequestPopulator) this;

        $stack46 = $r1.<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack47 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.settings.Repository)>(pluginRepo#21);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack47);

     label18:
        goto label20;

     label19:
        $stack68 := @caughtexception;

     label20:
        goto label16;

     label21:
        goto label09;

     label22:
        return request;

        catch org.apache.maven.artifact.InvalidRepositoryException from label11 to label12 with label13;
        catch org.apache.maven.artifact.InvalidRepositoryException from label17 to label18 with label19;
    }
}
