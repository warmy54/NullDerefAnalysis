public class DefaultMavenPluginManager extends java.lang.Object implements org.apache.maven.plugin.MavenPluginManager
{
    public static final java.lang.String KEY_EXTENSIONS_REALMS;
    private org.codehaus.plexus.logging.Logger logger;
    private org.codehaus.plexus.logging.LoggerManager loggerManager;
    private org.codehaus.plexus.PlexusContainer container;
    private org.apache.maven.classrealm.ClassRealmManager classRealmManager;
    private org.apache.maven.plugin.PluginDescriptorCache pluginDescriptorCache;
    private org.apache.maven.plugin.PluginRealmCache pluginRealmCache;
    private org.apache.maven.plugin.internal.PluginDependenciesResolver pluginDependenciesResolver;
    private org.apache.maven.rtinfo.RuntimeInformation runtimeInformation;
    private org.apache.maven.plugin.ExtensionRealmCache extensionRealmCache;
    private org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver;
    private org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache;
    private org.apache.maven.plugin.internal.MavenPluginValidator pluginValidator;
    private org.apache.maven.project.ExtensionDescriptorBuilder extensionDescriptorBuilder;
    private org.apache.maven.plugin.descriptor.PluginDescriptorBuilder builder;

    public void <init>()
    {
        DefaultMavenPluginManager this;
        org.apache.maven.project.ExtensionDescriptorBuilder $u0;
        org.apache.maven.plugin.descriptor.PluginDescriptorBuilder $u1;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1;

        this := @this: DefaultMavenPluginManager;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.project.ExtensionDescriptorBuilder;

        specialinvoke $u0.<org.apache.maven.project.ExtensionDescriptorBuilder: void <init>()>();

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.project.ExtensionDescriptorBuilder extensionDescriptorBuilder> = $u0;

        $u1 = new org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;

        specialinvoke $u1.<org.apache.maven.plugin.descriptor.PluginDescriptorBuilder: void <init>()>();

        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptorBuilder builder> = $u1;

        return;
    }

    public synchronized org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor(org.apache.maven.model.Plugin, java.util.List, org.eclipse.aether.RepositorySystemSession) throws org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.InvalidPluginDescriptorException
    {
        DefaultMavenPluginManager this;
        org.apache.maven.model.Plugin plugin;
        java.util.List repositories;
        org.eclipse.aether.RepositorySystemSession session;
        org.apache.maven.plugin.PluginDescriptorCache $stack8, $stack10, $stack17;
        org.apache.maven.plugin.PluginDescriptorCache$Key cacheKey;
        org.apache.maven.plugin.internal.PluginDependenciesResolver $stack12;
        org.eclipse.aether.artifact.Artifact artifact;
        org.apache.maven.artifact.Artifact pluginArtifact;
        java.lang.String $stack16;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1, $r2, $r3, $r4;

        this := @this: DefaultMavenPluginManager;

        plugin := @parameter0: org.apache.maven.model.Plugin;

        repositories := @parameter1: java.util.List;

        session := @parameter2: org.eclipse.aether.RepositorySystemSession;

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack8 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginDescriptorCache pluginDescriptorCache>;

        cacheKey = interfaceinvoke $stack8.<org.apache.maven.plugin.PluginDescriptorCache: org.apache.maven.plugin.PluginDescriptorCache$Key createKey(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, repositories, session);

        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack10 = $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginDescriptorCache pluginDescriptorCache>;

        pluginDescriptor = interfaceinvoke $stack10.<org.apache.maven.plugin.PluginDescriptorCache: org.apache.maven.plugin.descriptor.PluginDescriptor get(org.apache.maven.plugin.PluginDescriptorCache$Key)>(cacheKey);

        if pluginDescriptor != null goto label1;

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack12 = $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.internal.PluginDependenciesResolver pluginDependenciesResolver>;

        artifact = interfaceinvoke $stack12.<org.apache.maven.plugin.internal.PluginDependenciesResolver: org.eclipse.aether.artifact.Artifact resolve(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, repositories, session);

        pluginArtifact = staticinvoke <org.apache.maven.RepositoryUtils: org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.artifact.Artifact)>(artifact);

        $r3 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        pluginDescriptor = specialinvoke $r3.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor extractPluginDescriptor(org.apache.maven.artifact.Artifact,org.apache.maven.model.Plugin)>(pluginArtifact, plugin);

        $stack16 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("requiredMavenVersion", null);

        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setRequiredMavenVersion(java.lang.String)>($stack16);

        $r4 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack17 = $r4.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginDescriptorCache pluginDescriptorCache>;

        interfaceinvoke $stack17.<org.apache.maven.plugin.PluginDescriptorCache: void put(org.apache.maven.plugin.PluginDescriptorCache$Key,org.apache.maven.plugin.descriptor.PluginDescriptor)>(cacheKey, pluginDescriptor);

     label1:
        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setPlugin(org.apache.maven.model.Plugin)>(plugin);

        return pluginDescriptor;
    }

    private org.apache.maven.plugin.descriptor.PluginDescriptor extractPluginDescriptor(org.apache.maven.artifact.Artifact, org.apache.maven.model.Plugin) throws org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.InvalidPluginDescriptorException
    {
        org.apache.maven.artifact.Artifact pluginArtifact;
        java.io.File pluginFile, $u1;
        boolean $stack10, $stack13, $stack16;
        DefaultMavenPluginManager this;
        java.lang.String $stack12, $stack20, $stack25, $stack29, $stack31, $stack34, $stack38, $stack41, $stack46;
        org.apache.maven.plugin.internal.MavenPluginValidator $stack15;
        java.lang.StringBuilder $stack19, $stack21, $stack22, $stack23, $stack24, $stack28, $stack30, $u4, $u8;
        org.apache.maven.model.Plugin plugin;
        java.io.IOException $stack44, $u5;
        java.lang.Throwable $stack47, $stack48, $stack50, $stack51, $r5, $r7;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.util.zip.ZipEntry pluginDescriptorEntry;
        java.io.InputStream is;
        java.util.jar.JarFile $u0;
        java.io.FileInputStream $u2;
        java.io.BufferedInputStream $u3;
        org.apache.maven.plugin.PluginDescriptorParsingException $u6;
        java.util.ArrayList $u7;
        org.apache.maven.plugin.InvalidPluginDescriptorException $u9;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1, $r2, $r3, $r4, $r6;

        this := @this: DefaultMavenPluginManager;

        pluginArtifact := @parameter0: org.apache.maven.artifact.Artifact;

        plugin := @parameter1: org.apache.maven.model.Plugin;

        pluginDescriptor = null;

        pluginFile = interfaceinvoke pluginArtifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

     label01:
        $stack10 = virtualinvoke pluginFile.<java.io.File: boolean isFile()>();

        if $stack10 == 0 goto label10;

        $u0 = new java.util.jar.JarFile;

        specialinvoke $u0.<java.util.jar.JarFile: void <init>(java.io.File,boolean)>(pluginFile, 0);

     label02:
        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack38 = specialinvoke $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.String getPluginDescriptorLocation()>();

        pluginDescriptorEntry = virtualinvoke $u0.<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($stack38);

        if pluginDescriptorEntry == null goto label03;

        is = virtualinvoke $u0.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(pluginDescriptorEntry);

        $stack41 = virtualinvoke pluginFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        pluginDescriptor = specialinvoke $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor parsePluginDescriptor(java.io.InputStream,org.apache.maven.model.Plugin,java.lang.String)>(is, plugin, $stack41);

     label03:
        virtualinvoke $u0.<java.util.jar.JarFile: void close()>();

        goto label09;

     label04:
        $stack51 := @caughtexception;

     label05:
        virtualinvoke $u0.<java.util.jar.JarFile: void close()>();

     label06:
        goto label08;

     label07:
        $stack50 := @caughtexception;

        virtualinvoke $stack51.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack50);

     label08:
        throw $stack51;

     label09:
        goto label18;

     label10:
        $u1 = new java.io.File;

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack12 = specialinvoke $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.String getPluginDescriptorLocation()>();

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>(pluginFile, $stack12);

        $stack13 = virtualinvoke $u1.<java.io.File: boolean isFile()>();

        if $stack13 == 0 goto label18;

        $u3 = new java.io.BufferedInputStream;

        $u2 = new java.io.FileInputStream;

        specialinvoke $u2.<java.io.FileInputStream: void <init>(java.io.File)>($u1);

        specialinvoke $u3.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($u2);

     label11:
        $stack34 = virtualinvoke $u1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        pluginDescriptor = specialinvoke $r3.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor parsePluginDescriptor(java.io.InputStream,org.apache.maven.model.Plugin,java.lang.String)>($u3, plugin, $stack34);

     label12:
        virtualinvoke $u3.<java.io.InputStream: void close()>();

        goto label18;

     label13:
        $stack48 := @caughtexception;

     label14:
        virtualinvoke $u3.<java.io.InputStream: void close()>();

     label15:
        goto label17;

     label16:
        $stack47 := @caughtexception;

        virtualinvoke $stack48.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack47);

     label17:
        throw $stack48;

     label18:
        if pluginDescriptor != null goto label19;

        $u5 = new java.io.IOException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No plugin descriptor found at ");

        $r4 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack29 = specialinvoke $r4.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.String getPluginDescriptorLocation()>();

        $stack30 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u5.<java.io.IOException: void <init>(java.lang.String)>($stack31);

        throw $u5;

     label19:
        goto label21;

     label20:
        $stack44 := @caughtexception;

        $u6 = new org.apache.maven.plugin.PluginDescriptorParsingException;

        $stack46 = virtualinvoke pluginFile.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $u6.<org.apache.maven.plugin.PluginDescriptorParsingException: void <init>(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>(plugin, $stack46, $stack44);

        $r5 = (java.lang.Throwable) $u6;

        throw $r5;

     label21:
        $u7 = new java.util.ArrayList;

        specialinvoke $u7.<java.util.ArrayList: void <init>()>();

        $r6 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack15 = $r6.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.internal.MavenPluginValidator pluginValidator>;

        interfaceinvoke $stack15.<org.apache.maven.plugin.internal.MavenPluginValidator: void validate(org.apache.maven.artifact.Artifact,org.apache.maven.plugin.descriptor.PluginDescriptor,java.util.List)>(pluginArtifact, pluginDescriptor, $u7);

        $stack16 = interfaceinvoke $u7.<java.util.List: boolean isEmpty()>();

        if $stack16 != 0 goto label22;

        $u9 = new org.apache.maven.plugin.InvalidPluginDescriptorException;

        $u8 = new java.lang.StringBuilder;

        specialinvoke $u8.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid plugin descriptor for ");

        $stack20 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getId()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pluginFile);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u9.<org.apache.maven.plugin.InvalidPluginDescriptorException: void <init>(java.lang.String,java.util.List)>($stack25, $u7);

        $r7 = (java.lang.Throwable) $u9;

        throw $r7;

     label22:
        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setPluginArtifact(org.apache.maven.artifact.Artifact)>(pluginArtifact);

        return pluginDescriptor;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label01 to label19 with label20;
    }

    private java.lang.String getPluginDescriptorLocation()
    {
        DefaultMavenPluginManager this;

        this := @this: DefaultMavenPluginManager;

        return "META-INF/maven/plugin.xml";
    }

    private org.apache.maven.plugin.descriptor.PluginDescriptor parsePluginDescriptor(java.io.InputStream, org.apache.maven.model.Plugin, java.lang.String) throws org.apache.maven.plugin.PluginDescriptorParsingException
    {
        java.io.InputStream is;
        DefaultMavenPluginManager this;
        java.lang.String descriptorLocation;
        org.apache.maven.plugin.descriptor.PluginDescriptorBuilder $stack7;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.lang.Throwable $stack9, $r2;
        org.apache.maven.model.Plugin plugin;
        org.codehaus.plexus.util.xml.XmlStreamReader reader;
        org.apache.maven.plugin.PluginDescriptorParsingException $u0;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0;
        java.io.Reader $r1;

        this := @this: DefaultMavenPluginManager;

        is := @parameter0: java.io.InputStream;

        plugin := @parameter1: org.apache.maven.model.Plugin;

        descriptorLocation := @parameter2: java.lang.String;

     label1:
        reader = staticinvoke <org.codehaus.plexus.util.ReaderFactory: org.codehaus.plexus.util.xml.XmlStreamReader newXmlReader(java.io.InputStream)>(is);

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack7 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptorBuilder builder>;

        $r1 = (java.io.Reader) reader;

        pluginDescriptor = virtualinvoke $stack7.<org.apache.maven.plugin.descriptor.PluginDescriptorBuilder: org.apache.maven.plugin.descriptor.PluginDescriptor build(java.io.Reader,java.lang.String)>($r1, descriptorLocation);

     label2:
        return pluginDescriptor;

     label3:
        $stack9 := @caughtexception;

        $u0 = new org.apache.maven.plugin.PluginDescriptorParsingException;

        specialinvoke $u0.<org.apache.maven.plugin.PluginDescriptorParsingException: void <init>(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>(plugin, descriptorLocation, $stack9);

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
        catch org.codehaus.plexus.configuration.PlexusConfigurationException from label1 to label2 with label3;
    }

    public org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor(org.apache.maven.model.Plugin, java.lang.String, java.util.List, org.eclipse.aether.RepositorySystemSession) throws org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.InvalidPluginDescriptorException
    {
        DefaultMavenPluginManager this;
        org.apache.maven.model.Plugin plugin;
        java.util.List repositories;
        org.eclipse.aether.RepositorySystemSession session;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.lang.String goal;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        org.apache.maven.plugin.MojoNotFoundException $u0;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0;
        java.lang.Throwable $r1;

        this := @this: DefaultMavenPluginManager;

        plugin := @parameter0: org.apache.maven.model.Plugin;

        goal := @parameter1: java.lang.String;

        repositories := @parameter2: java.util.List;

        session := @parameter3: org.eclipse.aether.RepositorySystemSession;

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        pluginDescriptor = virtualinvoke $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, repositories, session);

        mojoDescriptor = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.descriptor.MojoDescriptor getMojo(java.lang.String)>(goal);

        if mojoDescriptor != null goto label1;

        $u0 = new org.apache.maven.plugin.MojoNotFoundException;

        specialinvoke $u0.<org.apache.maven.plugin.MojoNotFoundException: void <init>(java.lang.String,org.apache.maven.plugin.descriptor.PluginDescriptor)>(goal, pluginDescriptor);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label1:
        return mojoDescriptor;
    }

    public void checkRequiredMavenVersion(org.apache.maven.plugin.descriptor.PluginDescriptor) throws org.apache.maven.plugin.PluginIncompatibleException
    {
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.lang.String requiredMavenVersion, $stack12, $stack16, $stack21, $stack23;
        boolean $stack5, $stack7;
        DefaultMavenPluginManager this;
        org.apache.maven.rtinfo.RuntimeInformation $stack6;
        org.apache.maven.model.Plugin $stack9;
        java.lang.StringBuilder $stack11, $stack13, $stack14, $stack15, $stack20, $stack22, $u0, $u2;
        java.lang.RuntimeException $stack17;
        org.codehaus.plexus.logging.Logger $stack19;
        org.apache.maven.plugin.PluginIncompatibleException $u1;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r2;
        java.lang.Throwable $r1;

        this := @this: DefaultMavenPluginManager;

        pluginDescriptor := @parameter0: org.apache.maven.plugin.descriptor.PluginDescriptor;

        requiredMavenVersion = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getRequiredMavenVersion()>();

        $stack5 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotBlank(java.lang.String)>(requiredMavenVersion);

        if $stack5 == 0 goto label4;

     label1:
        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack6 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.rtinfo.RuntimeInformation runtimeInformation>;

        $stack7 = interfaceinvoke $stack6.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>(requiredMavenVersion);

        if $stack7 != 0 goto label2;

        $u1 = new org.apache.maven.plugin.PluginIncompatibleException;

        $stack9 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.model.Plugin getPlugin()>();

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The plugin ");

        $stack12 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires Maven version ");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(requiredMavenVersion);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.apache.maven.plugin.PluginIncompatibleException: void <init>(org.apache.maven.model.Plugin,java.lang.String)>($stack9, $stack16);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label2:
        goto label4;

     label3:
        $stack17 := @caughtexception;

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack19 = $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not verify plugin\'s Maven prerequisite: ");

        $stack21 = virtualinvoke $stack17.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack19.<org.codehaus.plexus.logging.Logger: void warn(java.lang.String)>($stack23);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public synchronized void setupPluginRealm(org.apache.maven.plugin.descriptor.PluginDescriptor, org.apache.maven.execution.MavenSession, java.lang.ClassLoader, java.util.List, org.eclipse.aether.graph.DependencyFilter) throws org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginContainerException
    {
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        boolean $stack15, $stack33, $stack47;
        DefaultMavenPluginManager this;
        java.lang.ClassLoader parent;
        java.util.List imports, $stack18, $stack25, $stack30, $stack31, $stack45, pluginArtifacts;
        org.eclipse.aether.graph.DependencyFilter filter;
        org.apache.maven.plugin.PluginRealmCache $stack17, $stack21, $stack23, $stack27;
        org.eclipse.aether.RepositorySystemSession $stack19, repositorySession;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack24, $stack28, $stack39, repositorySession#4;
        java.lang.Object $stack38, $stack48;
        java.lang.Throwable $stack50;
        org.apache.maven.plugin.ExtensionRealmCache$CacheRecord extensionRecord;
        java.util.Iterator l11;
        org.codehaus.plexus.component.repository.ComponentDescriptor componentDescriptor;
        java.util.Map extensionRecord#8;
        org.apache.maven.plugin.PluginRealmCache$Key repositorySession#9;
        org.apache.maven.plugin.PluginRealmCache$CacheRecord pluginArtifacts#10;
        java.lang.IllegalStateException $u0;
        java.util.ArrayList $u1;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: DefaultMavenPluginManager;

        pluginDescriptor := @parameter0: org.apache.maven.plugin.descriptor.PluginDescriptor;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        parent := @parameter2: java.lang.ClassLoader;

        imports := @parameter3: java.util.List;

        filter := @parameter4: org.eclipse.aether.graph.DependencyFilter;

        plugin = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.model.Plugin getPlugin()>();

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack15 = virtualinvoke plugin.<org.apache.maven.model.Plugin: boolean isExtensions()>();

        if $stack15 == 0 goto label07;

     label01:
        repositorySession = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        extensionRecord = virtualinvoke $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.ExtensionRealmCache$CacheRecord setupExtensionsRealm(org.apache.maven.project.MavenProject,org.apache.maven.model.Plugin,org.eclipse.aether.RepositorySystemSession)>(project, plugin, repositorySession);

     label02:
        goto label04;

     label03:
        $stack50 := @caughtexception;

        $u0 = new java.lang.IllegalStateException;

        specialinvoke $u0.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($stack50);

        throw $u0;

     label04:
        repositorySession#4 = virtualinvoke extensionRecord.<org.apache.maven.plugin.ExtensionRealmCache$CacheRecord: org.codehaus.plexus.classworlds.realm.ClassRealm getRealm()>();

        pluginArtifacts = virtualinvoke extensionRecord.<org.apache.maven.plugin.ExtensionRealmCache$CacheRecord: java.util.List getArtifacts()>();

        $stack45 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        l11 = interfaceinvoke $stack45.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack47 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $stack47 == 0 goto label06;

        $stack48 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        componentDescriptor = (org.codehaus.plexus.component.repository.ComponentDescriptor) $stack48;

        virtualinvoke componentDescriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: void setRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(repositorySession#4);

        goto label05;

     label06:
        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setClassRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(repositorySession#4);

        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setArtifacts(java.util.List)>(pluginArtifacts);

        goto label12;

     label07:
        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        extensionRecord#8 = specialinvoke $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.Map calcImports(org.apache.maven.project.MavenProject,java.lang.ClassLoader,java.util.List)>(project, parent, imports);

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack17 = $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginRealmCache pluginRealmCache>;

        $stack18 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack19 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        repositorySession#9 = interfaceinvoke $stack17.<org.apache.maven.plugin.PluginRealmCache: org.apache.maven.plugin.PluginRealmCache$Key createKey(org.apache.maven.model.Plugin,java.lang.ClassLoader,java.util.Map,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, parent, extensionRecord#8, filter, $stack18, $stack19);

        $r3 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack21 = $r3.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginRealmCache pluginRealmCache>;

        pluginArtifacts#10 = interfaceinvoke $stack21.<org.apache.maven.plugin.PluginRealmCache: org.apache.maven.plugin.PluginRealmCache$CacheRecord get(org.apache.maven.plugin.PluginRealmCache$Key)>(repositorySession#9);

        if pluginArtifacts#10 == null goto label10;

        $stack28 = virtualinvoke pluginArtifacts#10.<org.apache.maven.plugin.PluginRealmCache$CacheRecord: org.codehaus.plexus.classworlds.realm.ClassRealm getRealm()>();

        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setClassRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>($stack28);

        $u1 = new java.util.ArrayList;

        $stack30 = virtualinvoke pluginArtifacts#10.<org.apache.maven.plugin.PluginRealmCache$CacheRecord: java.util.List getArtifacts()>();

        specialinvoke $u1.<java.util.ArrayList: void <init>(java.util.Collection)>($stack30);

        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setArtifacts(java.util.List)>($u1);

        $stack31 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        l11 = interfaceinvoke $stack31.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $stack33 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $stack33 == 0 goto label09;

        $stack38 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        componentDescriptor = (org.codehaus.plexus.component.repository.ComponentDescriptor) $stack38;

        $stack39 = virtualinvoke pluginArtifacts#10.<org.apache.maven.plugin.PluginRealmCache$CacheRecord: org.codehaus.plexus.classworlds.realm.ClassRealm getRealm()>();

        virtualinvoke componentDescriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: void setRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>($stack39);

        goto label08;

     label09:
        goto label11;

     label10:
        $r4 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        specialinvoke $r4.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void createPluginRealm(org.apache.maven.plugin.descriptor.PluginDescriptor,org.apache.maven.execution.MavenSession,java.lang.ClassLoader,java.util.Map,org.eclipse.aether.graph.DependencyFilter)>(pluginDescriptor, session, parent, extensionRecord#8, filter);

        $r5 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack23 = $r5.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginRealmCache pluginRealmCache>;

        $stack24 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()>();

        $stack25 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getArtifacts()>();

        pluginArtifacts#10 = interfaceinvoke $stack23.<org.apache.maven.plugin.PluginRealmCache: org.apache.maven.plugin.PluginRealmCache$CacheRecord put(org.apache.maven.plugin.PluginRealmCache$Key,org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.List)>(repositorySession#9, $stack24, $stack25);

     label11:
        $r6 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack27 = $r6.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginRealmCache pluginRealmCache>;

        interfaceinvoke $stack27.<org.apache.maven.plugin.PluginRealmCache: void register(org.apache.maven.project.MavenProject,org.apache.maven.plugin.PluginRealmCache$Key,org.apache.maven.plugin.PluginRealmCache$CacheRecord)>(project, repositorySession#9, pluginArtifacts#10);

     label12:
        return;

        catch org.apache.maven.plugin.PluginManagerException from label01 to label02 with label03;
    }

    private void createPluginRealm(org.apache.maven.plugin.descriptor.PluginDescriptor, org.apache.maven.execution.MavenSession, java.lang.ClassLoader, java.util.Map, org.eclipse.aether.graph.DependencyFilter) throws org.apache.maven.plugin.PluginResolutionException, org.apache.maven.plugin.PluginContainerException
    {
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.apache.maven.model.Plugin $stack15, plugin;
        java.lang.Object $stack16, $stack18;
        org.apache.maven.artifact.Artifact $stack17, pluginArtifact;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        org.eclipse.aether.RepositorySystemSession repositorySession;
        org.eclipse.aether.graph.DependencyFilter filter, dependencyFilter;
        DefaultMavenPluginManager this;
        org.apache.maven.plugin.internal.PluginDependenciesResolver $stack23;
        org.eclipse.aether.artifact.Artifact $stack24;
        java.util.List $stack25, pluginArtifacts, $stack32;
        org.eclipse.aether.graph.DependencyNode root;
        java.lang.ClassLoader parent;
        java.util.Map foreignImports;
        org.apache.maven.classrealm.ClassRealmManager $stack30;
        org.codehaus.plexus.classworlds.realm.ClassRealm pluginRealm;
        org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator $u0;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r2, $r3, $r4, $r5;
        org.eclipse.aether.graph.DependencyVisitor $r1;

        this := @this: DefaultMavenPluginManager;

        pluginDescriptor := @parameter0: org.apache.maven.plugin.descriptor.PluginDescriptor;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        parent := @parameter2: java.lang.ClassLoader;

        foreignImports := @parameter3: java.util.Map;

        filter := @parameter4: org.eclipse.aether.graph.DependencyFilter;

        $stack15 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.model.Plugin getPlugin()>();

        $stack16 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($stack15, "pluginDescriptor.plugin cannot be null");

        plugin = (org.apache.maven.model.Plugin) $stack16;

        $stack17 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.artifact.Artifact getPluginArtifact()>();

        $stack18 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($stack17, "pluginDescriptor.pluginArtifact cannot be null");

        pluginArtifact = (org.apache.maven.artifact.Artifact) $stack18;

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        repositorySession = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        dependencyFilter = virtualinvoke project.<org.apache.maven.project.MavenProject: org.eclipse.aether.graph.DependencyFilter getExtensionDependencyFilter()>();

        dependencyFilter = staticinvoke <org.eclipse.aether.util.filter.AndDependencyFilter: org.eclipse.aether.graph.DependencyFilter newInstance(org.eclipse.aether.graph.DependencyFilter,org.eclipse.aether.graph.DependencyFilter)>(dependencyFilter, filter);

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack23 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.internal.PluginDependenciesResolver pluginDependenciesResolver>;

        $stack24 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>(pluginArtifact);

        $stack25 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        root = interfaceinvoke $stack23.<org.apache.maven.plugin.internal.PluginDependenciesResolver: org.eclipse.aether.graph.DependencyNode resolve(org.apache.maven.model.Plugin,org.eclipse.aether.artifact.Artifact,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, $stack24, dependencyFilter, $stack25, repositorySession);

        $u0 = new org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;

        specialinvoke $u0.<org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator: void <init>()>();

        $r1 = (org.eclipse.aether.graph.DependencyVisitor) $u0;

        interfaceinvoke root.<org.eclipse.aether.graph.DependencyNode: boolean accept(org.eclipse.aether.graph.DependencyVisitor)>($r1);

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        pluginArtifacts = specialinvoke $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List toMavenArtifacts(org.eclipse.aether.graph.DependencyNode,org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator)>(root, $u0);

        $r3 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack30 = $r3.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.classrealm.ClassRealmManager classRealmManager>;

        $r4 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack32 = specialinvoke $r4.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List toAetherArtifacts(java.util.List)>(pluginArtifacts);

        pluginRealm = interfaceinvoke $stack30.<org.apache.maven.classrealm.ClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm createPluginRealm(org.apache.maven.model.Plugin,java.lang.ClassLoader,java.util.List,java.util.Map,java.util.List)>(plugin, parent, null, foreignImports, $stack32);

        $r5 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        specialinvoke $r5.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void discoverPluginComponents(org.codehaus.plexus.classworlds.realm.ClassRealm,org.apache.maven.model.Plugin,org.apache.maven.plugin.descriptor.PluginDescriptor)>(pluginRealm, plugin, pluginDescriptor);

        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setClassRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(pluginRealm);

        virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setArtifacts(java.util.List)>(pluginArtifacts);

        return;
    }

    private void discoverPluginComponents(org.codehaus.plexus.classworlds.realm.ClassRealm, org.apache.maven.model.Plugin, org.apache.maven.plugin.descriptor.PluginDescriptor) throws org.apache.maven.plugin.PluginContainerException
    {
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        DefaultMavenPluginManager this;
        org.codehaus.plexus.PlexusContainer $stack6, $stack9, $stack13, $stack25;
        org.codehaus.plexus.classworlds.realm.ClassRealm pluginRealm;
        java.lang.Object[] $stack7;
        org.codehaus.plexus.DefaultPlexusContainer $stack10;
        java.util.List $stack16;
        boolean $stack18;
        java.lang.Object $stack24;
        org.codehaus.plexus.component.repository.ComponentDescriptor componentDescriptor;
        java.lang.Throwable $stack27, $r6;
        org.apache.maven.model.Plugin plugin;
        java.lang.StringBuilder $stack30, $stack32, $stack33, $stack35, $u2;
        java.lang.String $stack31, $stack34, $stack36;
        java.util.Iterator e;
        org.apache.maven.session.scope.internal.SessionScopeModule $u0;
        org.apache.maven.execution.scope.internal.MojoExecutionScopeModule $u1;
        org.apache.maven.plugin.PluginContainerException $u3;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1, $r2, $r3;
        com.google.inject.Module[] $r4;
        java.lang.Exception $r5;

        this := @this: DefaultMavenPluginManager;

        pluginRealm := @parameter0: org.codehaus.plexus.classworlds.realm.ClassRealm;

        plugin := @parameter1: org.apache.maven.model.Plugin;

        pluginDescriptor := @parameter2: org.apache.maven.plugin.descriptor.PluginDescriptor;

     label1:
        if pluginDescriptor == null goto label3;

        $stack16 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        e = interfaceinvoke $stack16.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack18 = interfaceinvoke e.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label3;

        $stack24 = interfaceinvoke e.<java.util.Iterator: java.lang.Object next()>();

        componentDescriptor = (org.codehaus.plexus.component.repository.ComponentDescriptor) $stack24;

        virtualinvoke componentDescriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: void setRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(pluginRealm);

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack25 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        interfaceinvoke $stack25.<org.codehaus.plexus.PlexusContainer: void addComponentDescriptor(org.codehaus.plexus.component.repository.ComponentDescriptor)>(componentDescriptor);

        goto label2;

     label3:
        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack6 = $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        $stack10 = (org.codehaus.plexus.DefaultPlexusContainer) $stack6;

        $stack7 = newarray (com.google.inject.Module)[2];

        $u0 = new org.apache.maven.session.scope.internal.SessionScopeModule;

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack9 = $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        specialinvoke $u0.<org.apache.maven.session.scope.internal.SessionScopeModule: void <init>(org.codehaus.plexus.PlexusContainer)>($stack9);

        $stack7[0] = $u0;

        $u1 = new org.apache.maven.execution.scope.internal.MojoExecutionScopeModule;

        $r3 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack13 = $r3.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        specialinvoke $u1.<org.apache.maven.execution.scope.internal.MojoExecutionScopeModule: void <init>(org.codehaus.plexus.PlexusContainer)>($stack13);

        $stack7[1] = $u1;

        $r4 = (com.google.inject.Module[]) $stack7;

        virtualinvoke $stack10.<org.codehaus.plexus.DefaultPlexusContainer: java.util.List discoverComponents(org.codehaus.plexus.classworlds.realm.ClassRealm,com.google.inject.Module[])>(pluginRealm, $r4);

     label4:
        goto label6;

     label5:
        $stack27 := @caughtexception;

        $u3 = new org.apache.maven.plugin.PluginContainerException;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in component graph of plugin ");

        $stack31 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getId()>();

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r5 = (java.lang.Exception) $stack27;

        $stack34 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $stack35 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<org.apache.maven.plugin.PluginContainerException: void <init>(org.apache.maven.model.Plugin,org.codehaus.plexus.classworlds.realm.ClassRealm,java.lang.String,java.lang.Throwable)>(plugin, pluginRealm, $stack36, $stack27);

        $r6 = (java.lang.Throwable) $u3;

        throw $r6;

     label6:
        return;

        catch org.codehaus.plexus.component.repository.exception.ComponentLookupException from label1 to label4 with label5;
        catch org.codehaus.plexus.component.composition.CycleDetectedInComponentGraphException from label1 to label4 with label5;
    }

    private java.util.List toAetherArtifacts(java.util.List)
    {
        java.util.ArrayList $stack2;
        java.util.List pluginArtifacts;
        java.util.Collection $stack3;
        DefaultMavenPluginManager this;

        this := @this: DefaultMavenPluginManager;

        pluginArtifacts := @parameter0: java.util.List;

        $stack2 = new java.util.ArrayList;

        $stack3 = staticinvoke <org.apache.maven.RepositoryUtils: java.util.Collection toArtifacts(java.util.Collection)>(pluginArtifacts);

        specialinvoke $stack2.<java.util.ArrayList: void <init>(java.util.Collection)>($stack3);

        return $stack2;
    }

    private java.util.List toMavenArtifacts(org.eclipse.aether.graph.DependencyNode, org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator)
    {
        java.util.ArrayList $stack4;
        org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator nlg;
        java.util.List $stack5, $stack8, $stack11;
        int $stack6;
        org.eclipse.aether.graph.DependencyNode root;
        java.util.Set $stack7;
        java.util.function.Predicate $stack9;
        DefaultMavenPluginManager this;

        this := @this: DefaultMavenPluginManager;

        root := @parameter0: org.eclipse.aether.graph.DependencyNode;

        nlg := @parameter1: org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;

        $stack4 = new java.util.ArrayList;

        $stack5 = virtualinvoke nlg.<org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator: java.util.List getNodes()>();

        $stack6 = interfaceinvoke $stack5.<java.util.List: int size()>();

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>($stack6);

        $stack7 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(root);

        $stack8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        staticinvoke <org.apache.maven.RepositoryUtils: void toArtifacts(java.util.Collection,java.util.Collection,java.util.List,org.eclipse.aether.graph.DependencyFilter)>($stack4, $stack7, $stack8, null);

        $stack9 = staticinvoke <DefaultMavenPluginManager$lambda_toMavenArtifacts_0__309: java.util.function.Predicate bootstrap$()>();

        interfaceinvoke $stack4.<java.util.List: boolean removeIf(java.util.function.Predicate)>($stack9);

        $stack11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack4);

        return $stack11;
    }

    private java.util.Map calcImports(org.apache.maven.project.MavenProject, java.lang.ClassLoader, java.util.List)
    {
        org.apache.maven.project.MavenProject project;
        org.codehaus.plexus.classworlds.realm.ClassRealm projectRealm, $stack12;
        DefaultMavenPluginManager this;
        org.apache.maven.classrealm.ClassRealmManager $stack10;
        java.lang.ClassLoader parent;
        java.util.List imports;
        java.util.Iterator l6;
        boolean $stack16;
        java.lang.Object $stack17;
        java.lang.String parentImport;
        java.util.HashMap $u0;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0;

        this := @this: DefaultMavenPluginManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        parent := @parameter1: java.lang.ClassLoader;

        imports := @parameter2: java.util.List;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        projectRealm = virtualinvoke project.<org.apache.maven.project.MavenProject: org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()>();

        if projectRealm == null goto label1;

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("", projectRealm);

        goto label2;

     label1:
        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack10 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.classrealm.ClassRealmManager classRealmManager>;

        $stack12 = interfaceinvoke $stack10.<org.apache.maven.classrealm.ClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm getMavenApiRealm()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("", $stack12);

     label2:
        if parent == null goto label4;

        if imports == null goto label4;

        l6 = interfaceinvoke imports.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack16 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label4;

        $stack17 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        parentImport = (java.lang.String) $stack17;

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(parentImport, parent);

        goto label3;

     label4:
        return $u0;
    }

    public java.lang.Object getConfiguredMojo(java.lang.Class, org.apache.maven.execution.MavenSession, org.apache.maven.plugin.MojoExecution) throws org.apache.maven.plugin.PluginConfigurationException, org.apache.maven.plugin.PluginContainerException
    {
        org.apache.maven.plugin.MojoExecution mojoExecution;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.codehaus.plexus.classworlds.realm.ClassRealm pluginRealm, oldLookupRealm;
        DefaultMavenPluginManager this;
        org.codehaus.plexus.logging.Logger $stack18, $stack64, e#17;
        boolean $stack19, $stack28, $stack99, $stack100, $stack145, $stack147, $stack83, $stack29;
        org.codehaus.plexus.PlexusContainer $stack20, $stack25, $stack34, $stack79;
        java.lang.Thread $stack22, $stack24, $stack33, $stack78;
        java.lang.ClassLoader oldClassLoader, $r3;
        java.lang.Class mojoInterface, $stack121;
        java.lang.String $stack26, $stack51, $stack66, $stack70, $stack88, $stack91, $stack94, $stack96, $stack98, $stack104, $stack107, $stack110, $stack115, $stack118, $stack122, $stack125, $stack127, $stack129;
        java.lang.Object mojo;
        org.apache.maven.execution.MavenSession session;
        org.codehaus.plexus.logging.LoggerManager $stack50;
        org.apache.maven.plugin.Mojo $stack54;
        org.apache.maven.plugin.ContextEnabled $stack62;
        java.lang.StringBuilder $stack65, $stack67, $stack68, $stack69, $stack87, $stack89, $stack90, $stack92, $stack93, $stack95, $stack103, $stack105, $stack106, $stack108, $stack109, $stack114, $stack116, $stack117, $stack119, $stack120, $stack123, $stack124, $stack126, $u0, $u3, $u7, $u9;
        java.lang.Throwable $stack77, $stack81, cause, $r6, $r7, $r9;
        org.apache.maven.project.MavenProject e#11;
        java.util.Map cause#12;
        org.codehaus.plexus.util.xml.Xpp3Dom e#18;
        org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration cause#19, $u12, $u13;
        java.io.ByteArrayOutputStream $u1, $u5;
        java.io.PrintStream $u2, $u6;
        org.apache.maven.plugin.PluginContainerException $u4, $u8, $u10;
        org.apache.maven.monitor.logging.DefaultLog $u11;
        org.apache.maven.plugin.PluginParameterExpressionEvaluator $u14;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1, $r2, $r4, $r10, $r12, $r15, $r16;
        org.codehaus.plexus.component.repository.exception.ComponentLookupException $r5, $r8;
        org.apache.maven.plugin.logging.Log $r11;
        org.codehaus.plexus.configuration.PlexusConfiguration $r13;
        org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator $r14;

        this := @this: DefaultMavenPluginManager;

        mojoInterface := @parameter0: java.lang.Class;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        mojoExecution := @parameter2: org.apache.maven.plugin.MojoExecution;

        mojoDescriptor = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor()>();

        pluginDescriptor = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        pluginRealm = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()>();

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack18 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        $stack19 = interfaceinvoke $stack18.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack19 == 0 goto label01;

        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack64 = $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack65 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuring mojo ");

        $stack66 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getId()>();

        $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack66);

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from plugin realm ");

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pluginRealm);

        $stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack64.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack70);

     label01:
        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack20 = $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        oldLookupRealm = interfaceinvoke $stack20.<org.codehaus.plexus.PlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm setLookupRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(pluginRealm);

        $stack22 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        oldClassLoader = virtualinvoke $stack22.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $stack24 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = (java.lang.ClassLoader) pluginRealm;

        virtualinvoke $stack24.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r3);

     label02:
        $r4 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack25 = $r4.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        $stack26 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getRoleHint()>();

        mojo = interfaceinvoke $stack25.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class,java.lang.String)>(mojoInterface, $stack26);

     label03:
        goto label10;

     label04:
        $stack81 := @caughtexception;

        $r5 = (org.codehaus.plexus.component.repository.exception.ComponentLookupException) $stack81;

        cause = virtualinvoke $r5.<org.codehaus.plexus.component.repository.exception.ComponentLookupException: java.lang.Throwable getCause()>();

     label05:
        if cause == null goto label06;

        $stack145 = cause instanceof java.lang.LinkageError;

        if $stack145 != 0 goto label06;

        $stack147 = cause instanceof java.lang.ClassNotFoundException;

        if $stack147 != 0 goto label06;

        cause = virtualinvoke cause.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label05;

     label06:
        $stack83 = cause instanceof java.lang.NoClassDefFoundError;

        if $stack83 != 0 goto label07;

        $stack99 = cause instanceof java.lang.ClassNotFoundException;

        if $stack99 == 0 goto label08;

     label07:
        $u1 = new java.io.ByteArrayOutputStream;

        specialinvoke $u1.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $u2 = new java.io.PrintStream;

        specialinvoke $u2.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u1);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack87 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load the mojo \'");

        $stack88 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getGoal()>();

        $stack89 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack88);

        $stack90 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in the plugin \'");

        $stack91 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack92 = virtualinvoke $stack90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack91);

        $stack93 = virtualinvoke $stack92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. A required class is missing: ");

        $stack94 = virtualinvoke cause.<java.lang.Throwable: java.lang.String getMessage()>();

        $stack95 = virtualinvoke $stack93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack94);

        $stack96 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $u2.<java.io.PrintStream: void println(java.lang.String)>($stack96);

        virtualinvoke pluginRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void display(java.io.PrintStream)>($u2);

        $u4 = new org.apache.maven.plugin.PluginContainerException;

        $stack98 = virtualinvoke $u1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        specialinvoke $u4.<org.apache.maven.plugin.PluginContainerException: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.classworlds.realm.ClassRealm,java.lang.String,java.lang.Throwable)>(mojoDescriptor, pluginRealm, $stack98, cause);

        $r6 = (java.lang.Throwable) $u4;

        throw $r6;

     label08:
        $stack100 = cause instanceof java.lang.LinkageError;

        if $stack100 == 0 goto label09;

        $u5 = new java.io.ByteArrayOutputStream;

        specialinvoke $u5.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $u6 = new java.io.PrintStream;

        specialinvoke $u6.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u5);

        $u7 = new java.lang.StringBuilder;

        specialinvoke $u7.<java.lang.StringBuilder: void <init>()>();

        $stack114 = virtualinvoke $u7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load the mojo \'");

        $stack115 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getGoal()>();

        $stack116 = virtualinvoke $stack114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack115);

        $stack117 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in the plugin \'");

        $stack118 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack119 = virtualinvoke $stack117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack118);

        $stack120 = virtualinvoke $stack119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to an API incompatibility: ");

        $stack121 = virtualinvoke $stack81.<java.lang.Object: java.lang.Class getClass()>();

        $stack122 = virtualinvoke $stack121.<java.lang.Class: java.lang.String getName()>();

        $stack123 = virtualinvoke $stack120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack122);

        $stack124 = virtualinvoke $stack123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack125 = virtualinvoke cause.<java.lang.Throwable: java.lang.String getMessage()>();

        $stack126 = virtualinvoke $stack124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack125);

        $stack127 = virtualinvoke $stack126.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $u6.<java.io.PrintStream: void println(java.lang.String)>($stack127);

        virtualinvoke pluginRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void display(java.io.PrintStream)>($u6);

        $u8 = new org.apache.maven.plugin.PluginContainerException;

        $stack129 = virtualinvoke $u5.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        specialinvoke $u8.<org.apache.maven.plugin.PluginContainerException: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.classworlds.realm.ClassRealm,java.lang.String,java.lang.Throwable)>(mojoDescriptor, pluginRealm, $stack129, cause);

        $r7 = (java.lang.Throwable) $u8;

        throw $r7;

     label09:
        $u10 = new org.apache.maven.plugin.PluginContainerException;

        $u9 = new java.lang.StringBuilder;

        specialinvoke $u9.<java.lang.StringBuilder: void <init>()>();

        $stack103 = virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load the mojo \'");

        $stack104 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getGoal()>();

        $stack105 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack104);

        $stack106 = virtualinvoke $stack105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (or one of its required components) from the plugin \'");

        $stack107 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack108 = virtualinvoke $stack106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack107);

        $stack109 = virtualinvoke $stack108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack110 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = (org.codehaus.plexus.component.repository.exception.ComponentLookupException) $stack81;

        specialinvoke $u10.<org.apache.maven.plugin.PluginContainerException: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.classworlds.realm.ClassRealm,java.lang.String,org.codehaus.plexus.component.repository.exception.ComponentLookupException)>(mojoDescriptor, pluginRealm, $stack110, $r8);

        $r9 = (java.lang.Throwable) $u10;

        throw $r9;

     label10:
        $stack28 = mojo instanceof org.apache.maven.plugin.ContextEnabled;

        if $stack28 == 0 goto label11;

        e#11 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        cause#12 = virtualinvoke session.<org.apache.maven.execution.MavenSession: java.util.Map getPluginContext(org.apache.maven.plugin.descriptor.PluginDescriptor,org.apache.maven.project.MavenProject)>(pluginDescriptor, e#11);

        if cause#12 == null goto label11;

        interfaceinvoke cause#12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("project", e#11);

        interfaceinvoke cause#12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pluginDescriptor", pluginDescriptor);

        $stack62 = (org.apache.maven.plugin.ContextEnabled) mojo;

        interfaceinvoke $stack62.<org.apache.maven.plugin.ContextEnabled: void setPluginContext(java.util.Map)>(cause#12);

     label11:
        $stack29 = mojo instanceof org.apache.maven.plugin.Mojo;

        if $stack29 == 0 goto label12;

        $r10 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack50 = $r10.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.LoggerManager loggerManager>;

        $stack51 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getImplementation()>();

        e#17 = interfaceinvoke $stack50.<org.codehaus.plexus.logging.LoggerManager: org.codehaus.plexus.logging.Logger getLoggerForComponent(java.lang.String)>($stack51);

        $stack54 = (org.apache.maven.plugin.Mojo) mojo;

        $u11 = new org.apache.maven.monitor.logging.DefaultLog;

        specialinvoke $u11.<org.apache.maven.monitor.logging.DefaultLog: void <init>(org.codehaus.plexus.logging.Logger)>(e#17);

        $r11 = (org.apache.maven.plugin.logging.Log) $u11;

        interfaceinvoke $stack54.<org.apache.maven.plugin.Mojo: void setLog(org.apache.maven.plugin.logging.Log)>($r11);

     label12:
        e#18 = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: org.codehaus.plexus.util.xml.Xpp3Dom getConfiguration()>();

        if e#18 != null goto label13;

        $u12 = new org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;

        specialinvoke $u12.<org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration: void <init>(java.lang.String)>("configuration");

        cause#19 = $u12;

        goto label14;

     label13:
        $u13 = new org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;

        specialinvoke $u13.<org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration: void <init>(org.codehaus.plexus.util.xml.Xpp3Dom)>(e#18);

        cause#19 = $u13;

     label14:
        $u14 = new org.apache.maven.plugin.PluginParameterExpressionEvaluator;

        specialinvoke $u14.<org.apache.maven.plugin.PluginParameterExpressionEvaluator: void <init>(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.MojoExecution)>(session, mojoExecution);

        $r12 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $r13 = (org.codehaus.plexus.configuration.PlexusConfiguration) cause#19;

        $r14 = (org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator) $u14;

        specialinvoke $r12.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void populatePluginFields(java.lang.Object,org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.classworlds.realm.ClassRealm,org.codehaus.plexus.configuration.PlexusConfiguration,org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator)>(mojo, mojoDescriptor, pluginRealm, $r13, $r14);

     label15:
        $stack33 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack33.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(oldClassLoader);

        $r15 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack34 = $r15.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        interfaceinvoke $stack34.<org.codehaus.plexus.PlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm setLookupRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(oldLookupRealm);

        return mojo;

     label16:
        $stack77 := @caughtexception;

     label17:
        $stack78 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack78.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(oldClassLoader);

        $r16 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack79 = $r16.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        interfaceinvoke $stack79.<org.codehaus.plexus.PlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm setLookupRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(oldLookupRealm);

        throw $stack77;

        catch org.codehaus.plexus.component.repository.exception.ComponentLookupException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void populatePluginFields(java.lang.Object, org.apache.maven.plugin.descriptor.MojoDescriptor, org.codehaus.plexus.classworlds.realm.ClassRealm, org.codehaus.plexus.configuration.PlexusConfiguration, org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator) throws org.apache.maven.plugin.PluginConfigurationException
    {
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        boolean $stack14, $stack31, $stack34;
        DefaultMavenPluginManager this;
        org.codehaus.plexus.PlexusContainer $stack15, $stack32, $stack66;
        java.lang.Object $stack16, mojo;
        org.codehaus.plexus.logging.Logger $stack18, $stack21, $stack29, $stack63, $stack138;
        java.lang.StringBuilder $stack22, $stack24, $stack25, $stack26, $stack27, $stack71, $stack73, $stack74, $stack77, $stack78, $stack80, $stack89, $stack91, $stack92, $stack94, $stack103, $stack104, $stack105, $stack107, $stack111, $stack113, $stack117, $stack118, $stack120, $stack125, $stack126, $stack129, $u2, $u5, $u6, $u7, $u9, $u13, $u17;
        java.lang.String $stack23, $stack28, $stack33, $stack72, $stack76, $stack79, $stack81, $stack84, $stack90, $stack93, $stack95, $stack98, $stack106, $stack108, $stack112, $stack119, $stack128, configuratorId, validator#8;
        org.codehaus.plexus.configuration.PlexusConfiguration configuration, $stack115, $stack127;
        org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator expressionEvaluator;
        org.codehaus.plexus.classworlds.realm.ClassRealm pluginRealm;
        java.lang.Throwable $stack62, $stack64, $stack99, $stack109, $stack137, $r6, $r14, $r16, $r17, $r18;
        java.lang.LinkageError $stack67;
        java.lang.Class $stack75;
        org.apache.maven.plugin.descriptor.PluginDescriptor $stack83, $stack97, $stack101, $stack123;
        java.lang.NoClassDefFoundError $stack85;
        org.codehaus.plexus.component.configurator.ComponentConfigurator configurator;
        java.util.Collection missingParameters;
        org.apache.maven.plugin.DebugConfigurationListener $u0;
        org.apache.maven.plugin.internal.ValidatingConfigurationListener $u1;
        java.util.ArrayList $u3;
        org.apache.maven.plugin.PluginParameterException $u4;
        org.apache.maven.plugin.PluginConfigurationException $u8, $u10, $u14, $u18;
        java.io.ByteArrayOutputStream $u11, $u15;
        java.io.PrintStream $u12, $u16;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1, $r3, $r5, $r7, $r8, $r9, $r19, $r20;
        org.codehaus.plexus.component.configurator.ConfigurationListener $r2, $r4;
        org.codehaus.plexus.component.configurator.ComponentConfigurationException $r10, $r11, $r12, $r13;
        org.codehaus.plexus.component.repository.exception.ComponentLookupException $r15;

        this := @this: DefaultMavenPluginManager;

        mojo := @parameter0: java.lang.Object;

        mojoDescriptor := @parameter1: org.apache.maven.plugin.descriptor.MojoDescriptor;

        pluginRealm := @parameter2: org.codehaus.plexus.classworlds.realm.ClassRealm;

        configuration := @parameter3: org.codehaus.plexus.configuration.PlexusConfiguration;

        expressionEvaluator := @parameter4: org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;

        configurator = null;

        configuratorId = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getComponentConfigurator()>();

        $stack14 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(configuratorId);

        if $stack14 == 0 goto label01;

        configuratorId = "basic";

     label01:
        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack15 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        $stack16 = interfaceinvoke $stack15.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class,java.lang.String)>(class "Lorg/codehaus/plexus/component/configurator/ComponentConfigurator;", configuratorId);

        configurator = (org.codehaus.plexus.component.configurator.ComponentConfigurator) $stack16;

        $u0 = new org.apache.maven.plugin.DebugConfigurationListener;

        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack18 = $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        specialinvoke $u0.<org.apache.maven.plugin.DebugConfigurationListener: void <init>(org.codehaus.plexus.logging.Logger)>($stack18);

        $u1 = new org.apache.maven.plugin.internal.ValidatingConfigurationListener;

        $r2 = (org.codehaus.plexus.component.configurator.ConfigurationListener) $u0;

        specialinvoke $u1.<org.apache.maven.plugin.internal.ValidatingConfigurationListener: void <init>(java.lang.Object,org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.component.configurator.ConfigurationListener)>(mojo, mojoDescriptor, $r2);

        $r3 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack21 = $r3.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuring mojo \'");

        $stack23 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getId()>();

        $stack24 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with ");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(configuratorId);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" configurator -->");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack21.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack28);

        $r4 = (org.codehaus.plexus.component.configurator.ConfigurationListener) $u1;

        interfaceinvoke configurator.<org.codehaus.plexus.component.configurator.ComponentConfigurator: void configureComponent(java.lang.Object,org.codehaus.plexus.configuration.PlexusConfiguration,org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator,org.codehaus.plexus.classworlds.realm.ClassRealm,org.codehaus.plexus.component.configurator.ConfigurationListener)>(mojo, configuration, expressionEvaluator, pluginRealm, $r4);

        $r5 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack29 = $r5.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        interfaceinvoke $stack29.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>("-- end configuration --");

        missingParameters = virtualinvoke $u1.<org.apache.maven.plugin.internal.ValidatingConfigurationListener: java.util.Collection getMissingParameters()>();

        $stack31 = interfaceinvoke missingParameters.<java.util.Collection: boolean isEmpty()>();

        if $stack31 != 0 goto label03;

        $stack33 = "basic";

        $stack34 = virtualinvoke $stack33.<java.lang.String: boolean equals(java.lang.Object)>(configuratorId);

        if $stack34 == 0 goto label02;

        $u4 = new org.apache.maven.plugin.PluginParameterException;

        $u3 = new java.util.ArrayList;

        specialinvoke $u3.<java.util.ArrayList: void <init>(java.util.Collection)>(missingParameters);

        specialinvoke $u4.<org.apache.maven.plugin.PluginParameterException: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,java.util.List)>(mojoDescriptor, $u3);

        $r6 = (java.lang.Throwable) $u4;

        throw $r6;

     label02:
        $r7 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        specialinvoke $r7.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void validateParameters(org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.configuration.PlexusConfiguration,org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator)>(mojoDescriptor, configuration, expressionEvaluator);

     label03:
        if configurator == null goto label18;

     label04:
        $r8 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack32 = $r8.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        interfaceinvoke $stack32.<org.codehaus.plexus.PlexusContainer: void release(java.lang.Object)>(configurator);

     label05:
        goto label18;

     label06:
        $stack137 := @caughtexception;

        $r9 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack138 = $r9.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        interfaceinvoke $stack138.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>("Failed to release mojo configurator - ignoring.");

        goto label18;

     label07:
        $stack109 := @caughtexception;

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack111 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse configuration of mojo ");

        $stack112 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getId()>();

        $stack113 = virtualinvoke $stack111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack112);

        validator#8 = virtualinvoke $stack113.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = (org.codehaus.plexus.component.configurator.ComponentConfigurationException) $stack109;

        $stack115 = virtualinvoke $r10.<org.codehaus.plexus.component.configurator.ComponentConfigurationException: org.codehaus.plexus.configuration.PlexusConfiguration getFailedConfiguration()>();

        if $stack115 == null goto label08;

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack125 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(validator#8);

        $stack126 = virtualinvoke $stack125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for parameter ");

        $r11 = (org.codehaus.plexus.component.configurator.ComponentConfigurationException) $stack109;

        $stack127 = virtualinvoke $r11.<org.codehaus.plexus.component.configurator.ComponentConfigurationException: org.codehaus.plexus.configuration.PlexusConfiguration getFailedConfiguration()>();

        $stack128 = interfaceinvoke $stack127.<org.codehaus.plexus.configuration.PlexusConfiguration: java.lang.String getName()>();

        $stack129 = virtualinvoke $stack126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack128);

        validator#8 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $u7 = new java.lang.StringBuilder;

        specialinvoke $u7.<java.lang.StringBuilder: void <init>()>();

        $stack117 = virtualinvoke $u7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(validator#8);

        $stack118 = virtualinvoke $stack117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = (org.codehaus.plexus.component.configurator.ComponentConfigurationException) $stack109;

        $stack119 = virtualinvoke $r12.<org.codehaus.plexus.component.configurator.ComponentConfigurationException: java.lang.String getMessage()>();

        $stack120 = virtualinvoke $stack118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack119);

        validator#8 = virtualinvoke $stack120.<java.lang.StringBuilder: java.lang.String toString()>();

        $u8 = new org.apache.maven.plugin.PluginConfigurationException;

        $stack123 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        $r13 = (org.codehaus.plexus.component.configurator.ComponentConfigurationException) $stack109;

        specialinvoke $u8.<org.apache.maven.plugin.PluginConfigurationException: void <init>(org.apache.maven.plugin.descriptor.PluginDescriptor,java.lang.String,org.codehaus.plexus.component.configurator.ComponentConfigurationException)>($stack123, validator#8, $r13);

        $r14 = (java.lang.Throwable) $u8;

        throw $r14;

     label09:
        $stack99 := @caughtexception;

        $u10 = new org.apache.maven.plugin.PluginConfigurationException;

        $stack101 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        $u9 = new java.lang.StringBuilder;

        specialinvoke $u9.<java.lang.StringBuilder: void <init>()>();

        $stack103 = virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve component configurator ");

        $stack104 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(configuratorId);

        $stack105 = virtualinvoke $stack104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for configuration of mojo ");

        $stack106 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getId()>();

        $stack107 = virtualinvoke $stack105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack106);

        $stack108 = virtualinvoke $stack107.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = (org.codehaus.plexus.component.repository.exception.ComponentLookupException) $stack99;

        specialinvoke $u10.<org.apache.maven.plugin.PluginConfigurationException: void <init>(org.apache.maven.plugin.descriptor.PluginDescriptor,java.lang.String,org.codehaus.plexus.component.repository.exception.ComponentLookupException)>($stack101, $stack108, $r15);

        $r16 = (java.lang.Throwable) $u10;

        throw $r16;

     label10:
        $stack85 := @caughtexception;

        $u11 = new java.io.ByteArrayOutputStream;

        specialinvoke $u11.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $u12 = new java.io.PrintStream;

        specialinvoke $u12.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u11);

        $u13 = new java.lang.StringBuilder;

        specialinvoke $u13.<java.lang.StringBuilder: void <init>()>();

        $stack89 = virtualinvoke $u13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A required class was missing during configuration of mojo ");

        $stack90 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getId()>();

        $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90);

        $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack93 = virtualinvoke $stack85.<java.lang.NoClassDefFoundError: java.lang.String getMessage()>();

        $stack94 = virtualinvoke $stack92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack93);

        $stack95 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $u12.<java.io.PrintStream: void println(java.lang.String)>($stack95);

        virtualinvoke pluginRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void display(java.io.PrintStream)>($u12);

        $u14 = new org.apache.maven.plugin.PluginConfigurationException;

        $stack97 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        $stack98 = virtualinvoke $u11.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        specialinvoke $u14.<org.apache.maven.plugin.PluginConfigurationException: void <init>(org.apache.maven.plugin.descriptor.PluginDescriptor,java.lang.String,java.lang.Throwable)>($stack97, $stack98, $stack85);

        $r17 = (java.lang.Throwable) $u14;

        throw $r17;

     label11:
        $stack67 := @caughtexception;

        $u15 = new java.io.ByteArrayOutputStream;

        specialinvoke $u15.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $u16 = new java.io.PrintStream;

        specialinvoke $u16.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u15);

        $u17 = new java.lang.StringBuilder;

        specialinvoke $u17.<java.lang.StringBuilder: void <init>()>();

        $stack71 = virtualinvoke $u17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An API incompatibility was encountered during configuration of mojo ");

        $stack72 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getId()>();

        $stack73 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack72);

        $stack74 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack75 = virtualinvoke $stack67.<java.lang.Object: java.lang.Class getClass()>();

        $stack76 = virtualinvoke $stack75.<java.lang.Class: java.lang.String getName()>();

        $stack77 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack76);

        $stack78 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack79 = virtualinvoke $stack67.<java.lang.LinkageError: java.lang.String getMessage()>();

        $stack80 = virtualinvoke $stack78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack79);

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $u16.<java.io.PrintStream: void println(java.lang.String)>($stack81);

        virtualinvoke pluginRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void display(java.io.PrintStream)>($u16);

        $u18 = new org.apache.maven.plugin.PluginConfigurationException;

        $stack83 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        $stack84 = virtualinvoke $u15.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        specialinvoke $u18.<org.apache.maven.plugin.PluginConfigurationException: void <init>(org.apache.maven.plugin.descriptor.PluginDescriptor,java.lang.String,java.lang.Throwable)>($stack83, $stack84, $stack67);

        $r18 = (java.lang.Throwable) $u18;

        throw $r18;

     label12:
        $stack64 := @caughtexception;

     label13:
        if configurator == null goto label17;

     label14:
        $r19 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack66 = $r19.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        interfaceinvoke $stack66.<org.codehaus.plexus.PlexusContainer: void release(java.lang.Object)>(configurator);

     label15:
        goto label17;

     label16:
        $stack62 := @caughtexception;

        $r20 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack63 = $r20.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        interfaceinvoke $stack63.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>("Failed to release mojo configurator - ignoring.");

     label17:
        throw $stack64;

     label18:
        return;

        catch org.codehaus.plexus.component.repository.exception.ComponentLifecycleException from label04 to label05 with label06;
        catch org.codehaus.plexus.component.configurator.ComponentConfigurationException from label01 to label03 with label07;
        catch org.codehaus.plexus.component.repository.exception.ComponentLookupException from label01 to label03 with label09;
        catch java.lang.NoClassDefFoundError from label01 to label03 with label10;
        catch java.lang.LinkageError from label01 to label03 with label11;
        catch java.lang.Throwable from label01 to label03 with label12;
        catch org.codehaus.plexus.component.repository.exception.ComponentLifecycleException from label14 to label15 with label16;
        catch java.lang.Throwable from label07 to label13 with label12;
    }

    private void validateParameters(org.apache.maven.plugin.descriptor.MojoDescriptor, org.codehaus.plexus.configuration.PlexusConfiguration, org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator) throws org.codehaus.plexus.component.configurator.ComponentConfigurationException, org.apache.maven.plugin.PluginParameterException
    {
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        java.util.List $stack12, $stack14;
        java.util.Iterator l5;
        boolean $stack17, $stack20, $stack16;
        java.lang.Object $stack19, value;
        org.apache.maven.plugin.descriptor.Parameter parameter;
        org.codehaus.plexus.configuration.PlexusConfiguration configuration, config;
        java.lang.String $stack21, expression, $stack37, msg;
        int $stack25;
        org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator expressionEvaluator;
        java.lang.Throwable $stack32, $r0, $r1;
        java.lang.StringBuilder $stack34, $stack35, $stack36, $stack38, $stack39, $u1;
        DefaultMavenPluginManager this;
        java.util.ArrayList $u0;
        org.codehaus.plexus.component.configurator.ComponentConfigurationException $u2;
        org.apache.maven.plugin.PluginParameterException $u3;

        this := @this: DefaultMavenPluginManager;

        mojoDescriptor := @parameter0: org.apache.maven.plugin.descriptor.MojoDescriptor;

        configuration := @parameter1: org.codehaus.plexus.configuration.PlexusConfiguration;

        expressionEvaluator := @parameter2: org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;

        $stack12 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.util.List getParameters()>();

        if $stack12 != null goto label01;

        return;

     label01:
        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $stack14 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.util.List getParameters()>();

        l5 = interfaceinvoke $stack14.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack16 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label10;

        $stack19 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        parameter = (org.apache.maven.plugin.descriptor.Parameter) $stack19;

        $stack20 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: boolean isRequired()>();

        if $stack20 != 0 goto label03;

        goto label02;

     label03:
        value = null;

        $stack21 = virtualinvoke parameter.<org.apache.maven.plugin.descriptor.Parameter: java.lang.String getName()>();

        config = interfaceinvoke configuration.<org.codehaus.plexus.configuration.PlexusConfiguration: org.codehaus.plexus.configuration.PlexusConfiguration getChild(java.lang.String,boolean)>($stack21, 0);

        if config == null goto label07;

        expression = interfaceinvoke config.<org.codehaus.plexus.configuration.PlexusConfiguration: java.lang.String getValue(java.lang.String)>(null);

     label04:
        value = interfaceinvoke expressionEvaluator.<org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator: java.lang.Object evaluate(java.lang.String)>(expression);

        if value != null goto label05;

        value = interfaceinvoke config.<org.codehaus.plexus.configuration.PlexusConfiguration: java.lang.String getAttribute(java.lang.String,java.lang.String)>("default-value", null);

     label05:
        goto label07;

     label06:
        $stack32 := @caughtexception;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error evaluating the expression \'");

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for configuration value \'");

        $stack37 = interfaceinvoke configuration.<org.codehaus.plexus.configuration.PlexusConfiguration: java.lang.String getName()>();

        $stack38 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack37);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        msg = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.String toString()>();

        $u2 = new org.codehaus.plexus.component.configurator.ComponentConfigurationException;

        specialinvoke $u2.<org.codehaus.plexus.component.configurator.ComponentConfigurationException: void <init>(org.codehaus.plexus.configuration.PlexusConfiguration,java.lang.String,java.lang.Throwable)>(configuration, msg, $stack32);

        $r0 = (java.lang.Throwable) $u2;

        throw $r0;

     label07:
        if value != null goto label09;

        if config == null goto label08;

        $stack25 = interfaceinvoke config.<org.codehaus.plexus.configuration.PlexusConfiguration: int getChildCount()>();

        if $stack25 > 0 goto label09;

     label08:
        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(parameter);

     label09:
        goto label02;

     label10:
        $stack17 = interfaceinvoke $u0.<java.util.List: boolean isEmpty()>();

        if $stack17 != 0 goto label11;

        $u3 = new org.apache.maven.plugin.PluginParameterException;

        specialinvoke $u3.<org.apache.maven.plugin.PluginParameterException: void <init>(org.apache.maven.plugin.descriptor.MojoDescriptor,java.util.List)>(mojoDescriptor, $u0);

        $r1 = (java.lang.Throwable) $u3;

        throw $r1;

     label11:
        return;

        catch org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException from label04 to label05 with label06;
    }

    public void releaseMojo(java.lang.Object, org.apache.maven.plugin.MojoExecution)
    {
        java.lang.Object mojo;
        DefaultMavenPluginManager this;
        org.codehaus.plexus.PlexusContainer $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.plugin.MojoExecution mojoExecution;
        java.lang.String $stack8, $stack13, $stack17, goalExecId;
        org.codehaus.plexus.logging.Logger $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack15, $stack16, $stack18, $stack19, $u0, $u1;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r1;

        this := @this: DefaultMavenPluginManager;

        mojo := @parameter0: java.lang.Object;

        mojoExecution := @parameter1: org.apache.maven.plugin.MojoExecution;

        if mojo == null goto label5;

     label1:
        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack5 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.PlexusContainer container>;

        interfaceinvoke $stack5.<org.codehaus.plexus.PlexusContainer: void release(java.lang.Object)>(mojo);

     label2:
        goto label5;

     label3:
        $stack6 := @caughtexception;

        goalExecId = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: java.lang.String getGoal()>();

        $stack8 = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: java.lang.String getExecutionId()>();

        if $stack8 == null goto label4;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(goalExecId);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {execution: ");

        $stack17 = virtualinvoke mojoExecution.<org.apache.maven.plugin.MojoExecution: java.lang.String getExecutionId()>();

        $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        goalExecId = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r1 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack10 = $r1.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error releasing mojo for ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(goalExecId);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack10.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String,java.lang.Throwable)>($stack13, $stack6);

     label5:
        return;

        catch org.codehaus.plexus.component.repository.exception.ComponentLifecycleException from label1 to label2 with label3;
    }

    public org.apache.maven.plugin.ExtensionRealmCache$CacheRecord setupExtensionsRealm(org.apache.maven.project.MavenProject, org.apache.maven.model.Plugin, org.eclipse.aether.RepositorySystemSession) throws org.apache.maven.plugin.PluginManagerException
    {
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack18, pluginKey, $stack23, $stack83, $stack92, $stack101, $stack104, message, $stack122, $stack125, $stack128;
        java.lang.Object $stack19, $stack21, $stack67, $stack42;
        org.apache.maven.model.Plugin plugin;
        java.util.List repositories, $stack39, versionRequest#8;
        DefaultMavenPluginManager this;
        org.eclipse.aether.RepositorySystemSession session;
        org.apache.maven.plugin.PluginArtifactsCache $stack24, $stack26, $stack29, $stack31, $stack118, $stack120;
        org.apache.maven.plugin.ExtensionRealmCache $stack32, $stack34, $stack46, $stack36;
        org.apache.maven.classrealm.ClassRealmManager $stack38;
        org.codehaus.plexus.classworlds.realm.ClassRealm extensionRealm;
        boolean $stack41, $stack56, $stack108;
        org.apache.maven.artifact.Artifact extensionArtifact, $stack68;
        org.apache.maven.plugin.version.PluginVersionResolver $stack81;
        org.apache.maven.plugin.version.PluginVersionResult $stack82;
        java.io.IOException $stack98;
        java.lang.StringBuilder $stack100, $stack102, $stack103, $stack105, $u5;
        org.codehaus.plexus.logging.Logger $stack107, $stack109, $stack115;
        java.lang.Throwable $stack116, $stack117, $stack123, $stack126, $r3, $r7, $r14;
        java.util.Map pluginRealms;
        org.apache.maven.plugin.ExtensionRealmCache$CacheRecord extensionRecord;
        org.apache.maven.plugin.PluginArtifactsCache$Key e#5;
        org.apache.maven.plugin.PluginArtifactsCache$CacheRecord recordArtifacts;
        org.apache.maven.plugin.ExtensionRealmCache$Key e#10;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.apache.maven.project.ExtensionDescriptor extensionDescriptor#29;
        org.apache.maven.project.ExtensionDescriptorBuilder $stack43;
        java.io.File $stack44;
        java.util.HashMap $u0;
        org.apache.maven.plugin.version.DefaultPluginVersionRequest $u1;
        org.apache.maven.plugin.PluginManagerException $u2, $u3, $u4;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r4, $r5, $r8, $r9, $r10, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        org.apache.maven.plugin.version.PluginVersionRequest $r1;
        org.apache.maven.plugin.version.PluginVersionResolutionException $r2;
        org.apache.maven.plugin.PluginResolutionException $r6, $r11, $r13;

        this := @this: DefaultMavenPluginManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        plugin := @parameter1: org.apache.maven.model.Plugin;

        session := @parameter2: org.eclipse.aether.RepositorySystemSession;

        $stack18 = <org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.String KEY_EXTENSIONS_REALMS>;

        $stack19 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.Object getContextValue(java.lang.String)>($stack18);

        pluginRealms = (java.util.Map) $stack19;

        if pluginRealms != null goto label01;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        pluginRealms = $u0;

        $stack92 = <org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.String KEY_EXTENSIONS_REALMS>;

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setContextValue(java.lang.String,java.lang.Object)>($stack92, $u0);

     label01:
        pluginKey = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getId()>();

        $stack21 = interfaceinvoke pluginRealms.<java.util.Map: java.lang.Object get(java.lang.Object)>(pluginKey);

        extensionRecord = (org.apache.maven.plugin.ExtensionRealmCache$CacheRecord) $stack21;

        if extensionRecord == null goto label02;

        return extensionRecord;

     label02:
        repositories = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack23 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        if $stack23 != null goto label06;

        $u1 = new org.apache.maven.plugin.version.DefaultPluginVersionRequest;

        specialinvoke $u1.<org.apache.maven.plugin.version.DefaultPluginVersionRequest: void <init>(org.apache.maven.model.Plugin,org.eclipse.aether.RepositorySystemSession,java.util.List)>(plugin, session, repositories);

     label03:
        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack81 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver>;

        $r1 = (org.apache.maven.plugin.version.PluginVersionRequest) $u1;

        $stack82 = interfaceinvoke $stack81.<org.apache.maven.plugin.version.PluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolve(org.apache.maven.plugin.version.PluginVersionRequest)>($r1);

        $stack83 = interfaceinvoke $stack82.<org.apache.maven.plugin.version.PluginVersionResult: java.lang.String getVersion()>();

        virtualinvoke plugin.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>($stack83);

     label04:
        goto label06;

     label05:
        $stack126 := @caughtexception;

        $u2 = new org.apache.maven.plugin.PluginManagerException;

        $r2 = (org.apache.maven.plugin.version.PluginVersionResolutionException) $stack126;

        $stack128 = virtualinvoke $r2.<org.apache.maven.plugin.version.PluginVersionResolutionException: java.lang.String getMessage()>();

        specialinvoke $u2.<org.apache.maven.plugin.PluginManagerException: void <init>(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>(plugin, $stack128, $stack126);

        $r3 = (java.lang.Throwable) $u2;

        throw $r3;

     label06:
        $r4 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack24 = $r4.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache>;

        e#5 = interfaceinvoke $stack24.<org.apache.maven.plugin.PluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$Key createKey(org.apache.maven.model.Plugin,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, null, repositories, session);

     label07:
        $r5 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack26 = $r5.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache>;

        recordArtifacts = interfaceinvoke $stack26.<org.apache.maven.plugin.PluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$CacheRecord get(org.apache.maven.plugin.PluginArtifactsCache$Key)>(e#5);

     label08:
        goto label10;

     label09:
        $stack123 := @caughtexception;

        $u3 = new org.apache.maven.plugin.PluginManagerException;

        $r6 = (org.apache.maven.plugin.PluginResolutionException) $stack123;

        $stack125 = virtualinvoke $r6.<org.apache.maven.plugin.PluginResolutionException: java.lang.String getMessage()>();

        specialinvoke $u3.<org.apache.maven.plugin.PluginManagerException: void <init>(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>(plugin, $stack125, $stack123);

        $r7 = (java.lang.Throwable) $u3;

        throw $r7;

     label10:
        if recordArtifacts == null goto label11;

        versionRequest#8 = virtualinvoke recordArtifacts.<org.apache.maven.plugin.PluginArtifactsCache$CacheRecord: java.util.List getArtifacts()>();

        goto label14;

     label11:
        $r8 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        versionRequest#8 = specialinvoke $r8.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List resolveExtensionArtifacts(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, repositories, session);

        $r9 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack29 = $r9.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache>;

        recordArtifacts = interfaceinvoke $stack29.<org.apache.maven.plugin.PluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$CacheRecord put(org.apache.maven.plugin.PluginArtifactsCache$Key,java.util.List)>(e#5, versionRequest#8);

     label12:
        goto label14;

     label13:
        $stack117 := @caughtexception;

        $r10 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack118 = $r10.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache>;

        $r11 = (org.apache.maven.plugin.PluginResolutionException) $stack117;

        interfaceinvoke $stack118.<org.apache.maven.plugin.PluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$CacheRecord put(org.apache.maven.plugin.PluginArtifactsCache$Key,org.apache.maven.plugin.PluginResolutionException)>(e#5, $r11);

        $r12 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack120 = $r12.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache>;

        interfaceinvoke $stack120.<org.apache.maven.plugin.PluginArtifactsCache: void register(org.apache.maven.project.MavenProject,org.apache.maven.plugin.PluginArtifactsCache$Key,org.apache.maven.plugin.PluginArtifactsCache$CacheRecord)>(project, e#5, recordArtifacts);

        $u4 = new org.apache.maven.plugin.PluginManagerException;

        $r13 = (org.apache.maven.plugin.PluginResolutionException) $stack117;

        $stack122 = virtualinvoke $r13.<org.apache.maven.plugin.PluginResolutionException: java.lang.String getMessage()>();

        specialinvoke $u4.<org.apache.maven.plugin.PluginManagerException: void <init>(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>(plugin, $stack122, $stack117);

        $r14 = (java.lang.Throwable) $u4;

        throw $r14;

     label14:
        $r15 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack31 = $r15.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.PluginArtifactsCache pluginArtifactsCache>;

        interfaceinvoke $stack31.<org.apache.maven.plugin.PluginArtifactsCache: void register(org.apache.maven.project.MavenProject,org.apache.maven.plugin.PluginArtifactsCache$Key,org.apache.maven.plugin.PluginArtifactsCache$CacheRecord)>(project, e#5, recordArtifacts);

        $r16 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack32 = $r16.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.ExtensionRealmCache extensionRealmCache>;

        e#10 = interfaceinvoke $stack32.<org.apache.maven.plugin.ExtensionRealmCache: org.apache.maven.plugin.ExtensionRealmCache$Key createKey(java.util.List)>(versionRequest#8);

        $r17 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack34 = $r17.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.ExtensionRealmCache extensionRealmCache>;

        extensionRecord = interfaceinvoke $stack34.<org.apache.maven.plugin.ExtensionRealmCache: org.apache.maven.plugin.ExtensionRealmCache$CacheRecord get(org.apache.maven.plugin.ExtensionRealmCache$Key)>(e#10);

        if extensionRecord != null goto label24;

        $r18 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack38 = $r18.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.classrealm.ClassRealmManager classRealmManager>;

        $r19 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack39 = specialinvoke $r19.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List toAetherArtifacts(java.util.List)>(versionRequest#8);

        extensionRealm = interfaceinvoke $stack38.<org.apache.maven.classrealm.ClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm createExtensionRealm(org.apache.maven.model.Plugin,java.util.List)>(plugin, $stack39);

        pluginDescriptor = null;

        $stack41 = virtualinvoke plugin.<org.apache.maven.model.Plugin: boolean isExtensions()>();

        if $stack41 == 0 goto label18;

        $stack56 = interfaceinvoke versionRequest#8.<java.util.List: boolean isEmpty()>();

        if $stack56 != 0 goto label18;

     label15:
        $stack67 = interfaceinvoke versionRequest#8.<java.util.List: java.lang.Object get(int)>(0);

        $stack68 = (org.apache.maven.artifact.Artifact) $stack67;

        $r20 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        pluginDescriptor = specialinvoke $r20.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor extractPluginDescriptor(org.apache.maven.artifact.Artifact,org.apache.maven.model.Plugin)>($stack68, plugin);

     label16:
        goto label18;

     label17:
        $stack116 := @caughtexception;

     label18:
        $r21 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        specialinvoke $r21.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void discoverPluginComponents(org.codehaus.plexus.classworlds.realm.ClassRealm,org.apache.maven.model.Plugin,org.apache.maven.plugin.descriptor.PluginDescriptor)>(extensionRealm, plugin, pluginDescriptor);

        extensionDescriptor#29 = null;

        $stack42 = interfaceinvoke versionRequest#8.<java.util.List: java.lang.Object get(int)>(0);

        extensionArtifact = (org.apache.maven.artifact.Artifact) $stack42;

     label19:
        $r22 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack43 = $r22.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.project.ExtensionDescriptorBuilder extensionDescriptorBuilder>;

        $stack44 = interfaceinvoke extensionArtifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        extensionDescriptor#29 = virtualinvoke $stack43.<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.File)>($stack44);

     label20:
        goto label23;

     label21:
        $stack98 := @caughtexception;

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack100 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid extension descriptor for ");

        $stack101 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getId()>();

        $stack102 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack101);

        $stack103 = virtualinvoke $stack102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack104 = virtualinvoke $stack98.<java.io.IOException: java.lang.String getMessage()>();

        $stack105 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack104);

        message = virtualinvoke $stack105.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack107 = $r23.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        $stack108 = interfaceinvoke $stack107.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack108 == 0 goto label22;

        $r24 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack115 = $r24.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        interfaceinvoke $stack115.<org.codehaus.plexus.logging.Logger: void error(java.lang.String,java.lang.Throwable)>(message, $stack98);

        goto label23;

     label22:
        $r25 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack109 = $r25.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.codehaus.plexus.logging.Logger logger>;

        interfaceinvoke $stack109.<org.codehaus.plexus.logging.Logger: void error(java.lang.String)>(message);

     label23:
        $r26 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack46 = $r26.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.ExtensionRealmCache extensionRealmCache>;

        extensionRecord = interfaceinvoke $stack46.<org.apache.maven.plugin.ExtensionRealmCache: org.apache.maven.plugin.ExtensionRealmCache$CacheRecord put(org.apache.maven.plugin.ExtensionRealmCache$Key,org.codehaus.plexus.classworlds.realm.ClassRealm,org.apache.maven.project.ExtensionDescriptor,java.util.List)>(e#10, extensionRealm, extensionDescriptor#29, versionRequest#8);

     label24:
        $r27 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack36 = $r27.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.ExtensionRealmCache extensionRealmCache>;

        interfaceinvoke $stack36.<org.apache.maven.plugin.ExtensionRealmCache: void register(org.apache.maven.project.MavenProject,org.apache.maven.plugin.ExtensionRealmCache$Key,org.apache.maven.plugin.ExtensionRealmCache$CacheRecord)>(project, e#10, extensionRecord);

        interfaceinvoke pluginRealms.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(pluginKey, extensionRecord);

        return extensionRecord;

        catch org.apache.maven.plugin.version.PluginVersionResolutionException from label03 to label04 with label05;
        catch org.apache.maven.plugin.PluginResolutionException from label07 to label08 with label09;
        catch org.apache.maven.plugin.PluginResolutionException from label11 to label12 with label13;
        catch org.apache.maven.plugin.PluginDescriptorParsingException from label15 to label16 with label17;
        catch org.apache.maven.plugin.InvalidPluginDescriptorException from label15 to label16 with label17;
        catch java.io.IOException from label19 to label20 with label21;
    }

    private java.util.List resolveExtensionArtifacts(org.apache.maven.model.Plugin, java.util.List, org.eclipse.aether.RepositorySystemSession) throws org.apache.maven.plugin.PluginResolutionException
    {
        DefaultMavenPluginManager this;
        org.apache.maven.model.Plugin extensionPlugin;
        java.util.List repositories, $stack10;
        org.eclipse.aether.RepositorySystemSession session;
        org.apache.maven.plugin.internal.PluginDependenciesResolver $stack6;
        org.eclipse.aether.graph.DependencyNode root;
        org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator $u0;
        org.apache.maven.plugin.internal.DefaultMavenPluginManager $r0, $r2;
        org.eclipse.aether.graph.DependencyVisitor $r1;

        this := @this: DefaultMavenPluginManager;

        extensionPlugin := @parameter0: org.apache.maven.model.Plugin;

        repositories := @parameter1: java.util.List;

        session := @parameter2: org.eclipse.aether.RepositorySystemSession;

        $r0 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack6 = $r0.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.internal.PluginDependenciesResolver pluginDependenciesResolver>;

        root = interfaceinvoke $stack6.<org.apache.maven.plugin.internal.PluginDependenciesResolver: org.eclipse.aether.graph.DependencyNode resolve(org.apache.maven.model.Plugin,org.eclipse.aether.artifact.Artifact,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>(extensionPlugin, null, null, repositories, session);

        $u0 = new org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;

        specialinvoke $u0.<org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator: void <init>()>();

        $r1 = (org.eclipse.aether.graph.DependencyVisitor) $u0;

        interfaceinvoke root.<org.eclipse.aether.graph.DependencyNode: boolean accept(org.eclipse.aether.graph.DependencyVisitor)>($r1);

        $r2 = (org.apache.maven.plugin.internal.DefaultMavenPluginManager) this;

        $stack10 = specialinvoke $r2.<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List toMavenArtifacts(org.eclipse.aether.graph.DependencyNode,org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator)>(root, $u0);

        return $stack10;
    }

    private static boolean lambda$toMavenArtifacts$0(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.io.File $stack1;
        boolean $stack2;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $stack1 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        if $stack1 != null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $stack0, $stack3, $stack4;
        java.lang.Class $stack1;
        java.lang.String $stack2, $stack5;

        $stack0 = new java.lang.StringBuilder;

        specialinvoke $stack0.<java.lang.StringBuilder: void <init>()>();

        $stack1 = class "Lorg/apache/maven/plugin/internal/DefaultMavenPluginManager;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getName()>();

        $stack3 = virtualinvoke $stack0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/extensionsRealms");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.String KEY_EXTENSIONS_REALMS> = $stack5;

        return;
    }
}
