public class DefaultMirrorSelector extends java.lang.Object implements org.apache.maven.repository.MirrorSelector
{
    private static final java.lang.String WILDCARD;
    private static final java.lang.String EXTERNAL_WILDCARD;
    private static final java.lang.String EXTERNAL_HTTP_WILDCARD;

    public void <init>()
    {
        DefaultMirrorSelector this;

        this := @this: DefaultMirrorSelector;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository, java.util.List)
    {
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.lang.String repoId, $stack13, $stack18;
        java.util.List mirrors;
        boolean $stack9, $stack11, $stack14, $stack16, $stack19, $stack21;
        java.lang.Object $stack12, $stack17;
        DefaultMirrorSelector this;
        java.util.Iterator l4;
        org.apache.maven.settings.Mirror mirror;

        this := @this: DefaultMirrorSelector;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        mirrors := @parameter1: java.util.List;

        repoId = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        if repoId == null goto label6;

        if mirrors == null goto label6;

        l4 = interfaceinvoke mirrors.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack17 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        mirror = (org.apache.maven.settings.Mirror) $stack17;

        $stack18 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getMirrorOf()>();

        $stack19 = virtualinvoke repoId.<java.lang.String: boolean equals(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label2;

        $stack21 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean matchesLayout(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>(repository, mirror);

        if $stack21 == 0 goto label2;

        return mirror;

     label2:
        goto label1;

     label3:
        l4 = interfaceinvoke mirrors.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label6;

        $stack12 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        mirror = (org.apache.maven.settings.Mirror) $stack12;

        $stack13 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getMirrorOf()>();

        $stack14 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean matchPattern(org.apache.maven.artifact.repository.ArtifactRepository,java.lang.String)>(repository, $stack13);

        if $stack14 == 0 goto label5;

        $stack16 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean matchesLayout(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>(repository, mirror);

        if $stack16 == 0 goto label5;

        return mirror;

     label5:
        goto label4;

     label6:
        return null;
    }

    static boolean matchPattern(org.apache.maven.artifact.repository.ArtifactRepository, java.lang.String)
    {
        org.apache.maven.artifact.repository.ArtifactRepository originalRepository;
        java.lang.String originalId, pattern, $stack10, $stack18, $stack20, $stack22, $stack33, repo;
        boolean $stack11, $stack12, $stack17, $stack19, $stack21, $stack23, $stack26, $stack28, $stack30, $stack34, result;
        java.lang.String[] repos;
        int l6, $stack16, l7;

        originalRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        pattern := @parameter1: java.lang.String;

        result = 0;

        originalId = interfaceinvoke originalRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack10 = "*";

        $stack11 = virtualinvoke $stack10.<java.lang.String: boolean equals(java.lang.Object)>(pattern);

        if $stack11 != 0 goto label1;

        $stack12 = virtualinvoke pattern.<java.lang.String: boolean equals(java.lang.Object)>(originalId);

        if $stack12 == 0 goto label2;

     label1:
        result = 1;

        goto label9;

     label2:
        repos = virtualinvoke pattern.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l6 = lengthof repos;

        l7 = 0;

     label3:
        if l7 >= l6 goto label9;

        repo = repos[l7];

        repo = virtualinvoke repo.<java.lang.String: java.lang.String trim()>();

        $stack16 = virtualinvoke repo.<java.lang.String: int length()>();

        if $stack16 <= 1 goto label4;

        $stack30 = virtualinvoke repo.<java.lang.String: boolean startsWith(java.lang.String)>("!");

        if $stack30 == 0 goto label4;

        $stack33 = virtualinvoke repo.<java.lang.String: java.lang.String substring(int)>(1);

        $stack34 = virtualinvoke $stack33.<java.lang.String: boolean equals(java.lang.Object)>(originalId);

        if $stack34 == 0 goto label8;

        result = 0;

        goto label9;

     label4:
        $stack17 = virtualinvoke repo.<java.lang.String: boolean equals(java.lang.Object)>(originalId);

        if $stack17 == 0 goto label5;

        result = 1;

        goto label9;

     label5:
        $stack18 = "external:*";

        $stack19 = virtualinvoke $stack18.<java.lang.String: boolean equals(java.lang.Object)>(repo);

        if $stack19 == 0 goto label6;

        $stack28 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean isExternalRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(originalRepository);

        if $stack28 == 0 goto label6;

        result = 1;

        goto label8;

     label6:
        $stack20 = "external:http:*";

        $stack21 = virtualinvoke $stack20.<java.lang.String: boolean equals(java.lang.Object)>(repo);

        if $stack21 == 0 goto label7;

        $stack26 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean isExternalHttpRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(originalRepository);

        if $stack26 == 0 goto label7;

        result = 1;

        goto label8;

     label7:
        $stack22 = "*";

        $stack23 = virtualinvoke $stack22.<java.lang.String: boolean equals(java.lang.Object)>(repo);

        if $stack23 == 0 goto label8;

        result = 1;

     label8:
        l7 = l7 + 1;

        goto label3;

     label9:
        return result;
    }

    static boolean isExternalRepo(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        java.net.URL $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository originalRepository;
        java.lang.String $stack3, $stack4, $stack6;
        boolean $stack5, $stack7, $stack8;
        java.net.MalformedURLException $stack9;

        originalRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

     label1:
        $stack2 = new java.net.URL;

        $stack3 = interfaceinvoke originalRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        specialinvoke $stack2.<java.net.URL: void <init>(java.lang.String)>($stack3);

        $stack4 = virtualinvoke $stack2.<java.net.URL: java.lang.String getHost()>();

        $stack5 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean isLocal(java.lang.String)>($stack4);

        if $stack5 != 0 goto label2;

        $stack6 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack7 = virtualinvoke $stack6.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $stack7 != 0 goto label2;

        $stack8 = 1;

        goto label3;

     label2:
        $stack8 = 0;

     label3:
        return $stack8;

     label4:
        $stack9 := @caughtexception;

        return 0;

        catch java.net.MalformedURLException from label1 to label3 with label4;
    }

    private static boolean isLocal(java.lang.String)
    {
        java.lang.String host, $stack1, $stack3;
        boolean $stack2, $stack4, $stack5;

        host := @parameter0: java.lang.String;

        $stack1 = "localhost";

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>(host);

        if $stack2 != 0 goto label1;

        $stack3 = "127.0.0.1";

        $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(host);

        if $stack4 == 0 goto label2;

     label1:
        $stack5 = 1;

        goto label3;

     label2:
        $stack5 = 0;

     label3:
        return $stack5;
    }

    static boolean isExternalHttpRepo(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        java.net.URL $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository originalRepository;
        java.lang.String $stack3, $stack4, $stack5, $stack10, $stack11, $stack14, $stack15, $stack17, $stack18, $stack7;
        boolean $stack6, $stack12, $stack16, $stack19, $stack8, $stack9;
        java.net.MalformedURLException $stack20;

        originalRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

     label1:
        $stack2 = new java.net.URL;

        $stack3 = interfaceinvoke originalRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        specialinvoke $stack2.<java.net.URL: void <init>(java.lang.String)>($stack3);

        $stack4 = "http";

        $stack5 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack6 = virtualinvoke $stack4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack5);

        if $stack6 != 0 goto label2;

        $stack10 = "dav";

        $stack11 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack12 = virtualinvoke $stack10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack11);

        if $stack12 != 0 goto label2;

        $stack14 = "dav:http";

        $stack15 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack15);

        if $stack16 != 0 goto label2;

        $stack17 = "dav+http";

        $stack18 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack19 = virtualinvoke $stack17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack18);

        if $stack19 == 0 goto label3;

     label2:
        $stack7 = virtualinvoke $stack2.<java.net.URL: java.lang.String getHost()>();

        $stack8 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean isLocal(java.lang.String)>($stack7);

        if $stack8 != 0 goto label3;

        $stack9 = 1;

        goto label4;

     label3:
        $stack9 = 0;

     label4:
        return $stack9;

     label5:
        $stack20 := @caughtexception;

        return 0;

        catch java.net.MalformedURLException from label1 to label4 with label5;
    }

    static boolean matchesLayout(org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.settings.Mirror)
    {
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.lang.String $stack2, $stack3;
        org.apache.maven.settings.Mirror mirror;
        boolean $stack4;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        mirror := @parameter1: org.apache.maven.settings.Mirror;

        $stack2 = staticinvoke <org.apache.maven.RepositoryUtils: java.lang.String getLayout(org.apache.maven.artifact.repository.ArtifactRepository)>(repository);

        $stack3 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getMirrorOfLayouts()>();

        $stack4 = staticinvoke <org.apache.maven.repository.DefaultMirrorSelector: boolean matchesLayout(java.lang.String,java.lang.String)>($stack2, $stack3);

        return $stack4;
    }

    static boolean matchesLayout(java.lang.String, java.lang.String)
    {
        java.lang.String mirrorLayout, $stack9, repoLayout, layout, $stack16, $stack23;
        boolean $stack8, $stack10, $stack11, $stack15, $stack17, $stack20, $stack24, result;
        java.lang.String[] layouts;
        int l5, $stack14, l6;

        repoLayout := @parameter0: java.lang.String;

        mirrorLayout := @parameter1: java.lang.String;

        result = 0;

        $stack8 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(mirrorLayout);

        if $stack8 != 0 goto label1;

        $stack9 = "*";

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean equals(java.lang.Object)>(mirrorLayout);

        if $stack10 == 0 goto label2;

     label1:
        result = 1;

        goto label8;

     label2:
        $stack11 = virtualinvoke mirrorLayout.<java.lang.String: boolean equals(java.lang.Object)>(repoLayout);

        if $stack11 == 0 goto label3;

        result = 1;

        goto label8;

     label3:
        layouts = virtualinvoke mirrorLayout.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l5 = lengthof layouts;

        l6 = 0;

     label4:
        if l6 >= l5 goto label8;

        layout = layouts[l6];

        $stack14 = virtualinvoke layout.<java.lang.String: int length()>();

        if $stack14 <= 1 goto label5;

        $stack20 = virtualinvoke layout.<java.lang.String: boolean startsWith(java.lang.String)>("!");

        if $stack20 == 0 goto label5;

        $stack23 = virtualinvoke layout.<java.lang.String: java.lang.String substring(int)>(1);

        $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(repoLayout);

        if $stack24 == 0 goto label7;

        result = 0;

        goto label8;

     label5:
        $stack15 = virtualinvoke layout.<java.lang.String: boolean equals(java.lang.Object)>(repoLayout);

        if $stack15 == 0 goto label6;

        result = 1;

        goto label8;

     label6:
        $stack16 = "*";

        $stack17 = virtualinvoke $stack16.<java.lang.String: boolean equals(java.lang.Object)>(layout);

        if $stack17 == 0 goto label7;

        result = 1;

     label7:
        l6 = l6 + 1;

        goto label4;

     label8:
        return result;
    }

    public static void <clinit>()
    {
        <DefaultMirrorSelector: java.lang.String EXTERNAL_HTTP_WILDCARD> = "external:http:*";

        <DefaultMirrorSelector: java.lang.String EXTERNAL_WILDCARD> = "external:*";

        <DefaultMirrorSelector: java.lang.String WILDCARD> = "*";

        return;
    }
}
