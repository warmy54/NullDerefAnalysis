class DefaultModelBuilder$DefaultTransformerContextBuilder extends java.lang.Object implements org.apache.maven.model.building.TransformerContextBuilder
{
    private final org.apache.maven.model.building.DefaultTransformerContext context;
    private final java.util.Map mappedSources;
    final org.apache.maven.model.building.DefaultModelBuilder this$0;

    private void <init>(org.apache.maven.model.building.DefaultModelBuilder)
    {
        DefaultModelBuilder$DefaultTransformerContextBuilder this;
        org.apache.maven.model.building.DefaultModelBuilder l1;
        org.apache.maven.model.building.DefaultTransformerContext $u0;
        java.util.concurrent.ConcurrentHashMap $u1;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder $r0, $r1, $r2;

        this := @this: DefaultModelBuilder$DefaultTransformerContextBuilder;

        l1 := @parameter0: org.apache.maven.model.building.DefaultModelBuilder;

        $r0 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        $r0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: org.apache.maven.model.building.DefaultModelBuilder this$0> = l1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.model.building.DefaultTransformerContext;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultTransformerContext: void <init>()>();

        $r1 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        $r1.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: org.apache.maven.model.building.DefaultTransformerContext context> = $u0;

        $u1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $u1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(64);

        $r2 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        $r2.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: java.util.Map mappedSources> = $u1;

        return;
    }

    public org.apache.maven.model.building.TransformerContext initialize(org.apache.maven.model.building.ModelBuildingRequest, org.apache.maven.model.building.ModelProblemCollector)
    {
        org.apache.maven.model.building.ModelProblemCollector collector;
        org.apache.maven.model.building.DefaultModelProblemCollector problems;
        DefaultModelBuilder$DefaultTransformerContextBuilder this;
        org.apache.maven.model.building.ModelBuildingRequest request;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder$1 $u0;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder $r0;
        org.apache.maven.model.building.TransformerContext $r1;

        this := @this: DefaultModelBuilder$DefaultTransformerContextBuilder;

        request := @parameter0: org.apache.maven.model.building.ModelBuildingRequest;

        collector := @parameter1: org.apache.maven.model.building.ModelProblemCollector;

        problems = (org.apache.maven.model.building.DefaultModelProblemCollector) collector;

        $u0 = new org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder$1;

        $r0 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder$1: void <init>(org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.DefaultModelProblemCollector)>($r0, request, problems);

        $r1 = (org.apache.maven.model.building.TransformerContext) $u0;

        return $r1;
    }

    public org.apache.maven.model.building.TransformerContext build()
    {
        DefaultModelBuilder$DefaultTransformerContextBuilder this;
        org.apache.maven.model.building.DefaultTransformerContext $stack1;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder $r0;
        org.apache.maven.model.building.TransformerContext $r1;

        this := @this: DefaultModelBuilder$DefaultTransformerContextBuilder;

        $r0 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        $stack1 = $r0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: org.apache.maven.model.building.DefaultTransformerContext context>;

        $r1 = (org.apache.maven.model.building.TransformerContext) $stack1;

        return $r1;
    }

    public org.apache.maven.building.Source getSource(java.lang.String, java.lang.String)
    {
        DefaultModelBuilder$DefaultTransformerContextBuilder this;
        java.lang.String groupId, artifactId;
        java.util.Map $stack5;
        java.lang.Object $stack6, $stack10;
        java.util.Set sources;
        java.util.stream.Stream $stack7;
        java.util.function.BinaryOperator $stack8;
        java.util.Optional $stack9;
        org.apache.maven.building.Source $stack11;
        org.apache.maven.model.building.DefaultTransformerContext$GAKey $u0;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder $r0;

        this := @this: DefaultModelBuilder$DefaultTransformerContextBuilder;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        $stack5 = $r0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: java.util.Map mappedSources>;

        $u0 = new org.apache.maven.model.building.DefaultTransformerContext$GAKey;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultTransformerContext$GAKey: void <init>(java.lang.String,java.lang.String)>(groupId, artifactId);

        $stack6 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($u0);

        sources = (java.util.Set) $stack6;

        if sources != null goto label1;

        return null;

     label1:
        $stack7 = interfaceinvoke sources.<java.util.Set: java.util.stream.Stream stream()>();

        $stack8 = staticinvoke <DefaultModelBuilder$DefaultTransformerContextBuilder$lambda_getSource_0__310: java.util.function.BinaryOperator bootstrap$(java.lang.String,java.lang.String)>(groupId, artifactId);

        $stack9 = interfaceinvoke $stack7.<java.util.stream.Stream: java.util.Optional reduce(java.util.function.BinaryOperator)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $stack11 = (org.apache.maven.building.Source) $stack10;

        return $stack11;
    }

    public void putSource(java.lang.String, java.lang.String, org.apache.maven.building.Source)
    {
        DefaultModelBuilder$DefaultTransformerContextBuilder this;
        java.lang.String groupId, artifactId;
        java.util.Map $stack5;
        java.util.function.Function $stack6;
        java.lang.Object $stack7;
        org.apache.maven.building.Source source;
        java.util.Set $stack8;
        org.apache.maven.model.building.DefaultTransformerContext$GAKey $u0;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder $r0;

        this := @this: DefaultModelBuilder$DefaultTransformerContextBuilder;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        source := @parameter2: org.apache.maven.building.Source;

        $r0 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        $stack5 = $r0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: java.util.Map mappedSources>;

        $u0 = new org.apache.maven.model.building.DefaultTransformerContext$GAKey;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultTransformerContext$GAKey: void <init>(java.lang.String,java.lang.String)>(groupId, artifactId);

        $stack6 = staticinvoke <DefaultModelBuilder$DefaultTransformerContextBuilder$lambda_putSource_1__309: java.util.function.Function bootstrap$()>();

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($u0, $stack6);

        $stack8 = (java.util.Set) $stack7;

        interfaceinvoke $stack8.<java.util.Set: boolean add(java.lang.Object)>(source);

        return;
    }

    private static java.util.Set lambda$putSource$1(org.apache.maven.model.building.DefaultTransformerContext$GAKey)
    {
        java.util.HashSet $stack1;
        org.apache.maven.model.building.DefaultTransformerContext$GAKey k;

        k := @parameter0: org.apache.maven.model.building.DefaultTransformerContext$GAKey;

        $stack1 = new java.util.HashSet;

        specialinvoke $stack1.<java.util.HashSet: void <init>()>();

        return $stack1;
    }

    private static org.apache.maven.building.Source lambda$getSource$0(java.lang.String, java.lang.String, org.apache.maven.building.Source, org.apache.maven.building.Source)
    {
        java.lang.IllegalStateException $stack4;
        java.lang.Object[] $stack5;
        java.lang.String groupId, artifactId, $stack8, $stack10, $stack11;
        org.apache.maven.building.Source a, b;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        a := @parameter2: org.apache.maven.building.Source;

        b := @parameter3: org.apache.maven.building.Source;

        $stack4 = new java.lang.IllegalStateException;

        $stack5 = newarray (java.lang.Object)[4];

        $stack5[0] = groupId;

        $stack5[1] = artifactId;

        $stack8 = interfaceinvoke a.<org.apache.maven.building.Source: java.lang.String getLocation()>();

        $stack5[2] = $stack8;

        $stack10 = interfaceinvoke b.<org.apache.maven.building.Source: java.lang.String getLocation()>();

        $stack5[3] = $stack10;

        $stack11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No unique Source for %s:%s: %s and %s", $stack5);

        specialinvoke $stack4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack11);

        throw $stack4;
    }

    void <init>(org.apache.maven.model.building.DefaultModelBuilder, org.apache.maven.model.building.DefaultModelBuilder$1)
    {
        DefaultModelBuilder$DefaultTransformerContextBuilder this;
        org.apache.maven.model.building.DefaultModelBuilder x0;
        org.apache.maven.model.building.DefaultModelBuilder$1 x1;
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder $r0;

        this := @this: DefaultModelBuilder$DefaultTransformerContextBuilder;

        x0 := @parameter0: org.apache.maven.model.building.DefaultModelBuilder;

        x1 := @parameter1: org.apache.maven.model.building.DefaultModelBuilder$1;

        $r0 = (org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder) this;

        specialinvoke $r0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: void <init>(org.apache.maven.model.building.DefaultModelBuilder)>(x0);

        return;
    }

    static org.apache.maven.model.building.DefaultTransformerContext access$100(org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder)
    {
        org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder x0;
        org.apache.maven.model.building.DefaultTransformerContext $stack1;

        x0 := @parameter0: org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder;

        $stack1 = x0.<org.apache.maven.model.building.DefaultModelBuilder$DefaultTransformerContextBuilder: org.apache.maven.model.building.DefaultTransformerContext context>;

        return $stack1;
    }
}
