public class DefaultModelNormalizer extends java.lang.Object implements org.apache.maven.model.normalization.ModelNormalizer
{
    private org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger merger;

    public void <init>()
    {
        DefaultModelNormalizer this;
        org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger $u0;
        org.apache.maven.model.normalization.DefaultModelNormalizer $r0;

        this := @this: DefaultModelNormalizer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger;

        specialinvoke $u0.<org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger: void <init>()>();

        $r0 = (org.apache.maven.model.normalization.DefaultModelNormalizer) this;

        $r0.<org.apache.maven.model.normalization.DefaultModelNormalizer: org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger merger> = $u0;

        return;
    }

    public void mergeDuplicates(org.apache.maven.model.Model, org.apache.maven.model.building.ModelBuildingRequest, org.apache.maven.model.building.ModelProblemCollector)
    {
        org.apache.maven.model.Model model;
        org.apache.maven.model.Build build;
        int $stack18, $stack19, $stack28, $stack29, $stack32, $stack33, $stack14, $stack15;
        java.util.Collection $stack21, $stack39;
        java.lang.Object $stack22, $stack40, $stack42;
        java.lang.String $stack23, key;
        boolean $stack31, $stack17;
        org.apache.maven.model.Plugin first, plugin;
        DefaultModelNormalizer this;
        org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger $stack45;
        org.apache.maven.model.building.ModelBuildingRequest request;
        org.apache.maven.model.building.ModelProblemCollector problems;
        java.util.List plugins;
        java.util.Iterator l7;
        org.apache.maven.model.Dependency plugin#33;
        java.util.LinkedHashMap $u0, $u2;
        java.util.ArrayList $u1, $u3;
        org.apache.maven.model.normalization.DefaultModelNormalizer $r0;

        this := @this: DefaultModelNormalizer;

        model := @parameter0: org.apache.maven.model.Model;

        request := @parameter1: org.apache.maven.model.building.ModelBuildingRequest;

        problems := @parameter2: org.apache.maven.model.building.ModelProblemCollector;

        build = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if build == null goto label4;

        plugins = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getPlugins()>();

        $u0 = new java.util.LinkedHashMap;

        $stack28 = interfaceinvoke plugins.<java.util.List: int size()>();

        $stack29 = $stack28 * 2;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>(int)>($stack29);

        l7 = interfaceinvoke plugins.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack31 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label3;

        $stack40 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack40;

        key = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getKey()>();

        $stack42 = interfaceinvoke $u0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        first = (org.apache.maven.model.Plugin) $stack42;

        if first == null goto label2;

        $r0 = (org.apache.maven.model.normalization.DefaultModelNormalizer) this;

        $stack45 = $r0.<org.apache.maven.model.normalization.DefaultModelNormalizer: org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger merger>;

        virtualinvoke $stack45.<org.apache.maven.model.normalization.DefaultModelNormalizer$DuplicateMerger: void mergePlugin(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin)>(plugin, first);

     label2:
        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, plugin);

        goto label1;

     label3:
        $stack32 = interfaceinvoke plugins.<java.util.List: int size()>();

        $stack33 = interfaceinvoke $u0.<java.util.Map: int size()>();

        if $stack32 == $stack33 goto label4;

        $u1 = new java.util.ArrayList;

        $stack39 = interfaceinvoke $u0.<java.util.Map: java.util.Collection values()>();

        specialinvoke $u1.<java.util.ArrayList: void <init>(java.util.Collection)>($stack39);

        virtualinvoke build.<org.apache.maven.model.Build: void setPlugins(java.util.List)>($u1);

     label4:
        plugins = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getDependencies()>();

        $u2 = new java.util.LinkedHashMap;

        $stack14 = interfaceinvoke plugins.<java.util.List: int size()>();

        $stack15 = $stack14 * 2;

        specialinvoke $u2.<java.util.LinkedHashMap: void <init>(int)>($stack15);

        l7 = interfaceinvoke plugins.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack17 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label6;

        $stack22 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        plugin#33 = (org.apache.maven.model.Dependency) $stack22;

        $stack23 = virtualinvoke plugin#33.<org.apache.maven.model.Dependency: java.lang.String getManagementKey()>();

        interfaceinvoke $u2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack23, plugin#33);

        goto label5;

     label6:
        $stack18 = interfaceinvoke plugins.<java.util.List: int size()>();

        $stack19 = interfaceinvoke $u2.<java.util.Map: int size()>();

        if $stack18 == $stack19 goto label7;

        $u3 = new java.util.ArrayList;

        $stack21 = interfaceinvoke $u2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $u3.<java.util.ArrayList: void <init>(java.util.Collection)>($stack21);

        virtualinvoke model.<org.apache.maven.model.Model: void setDependencies(java.util.List)>($u3);

     label7:
        return;
    }

    public void injectDefaultValues(org.apache.maven.model.Model, org.apache.maven.model.building.ModelBuildingRequest, org.apache.maven.model.building.ModelProblemCollector)
    {
        DefaultModelNormalizer this;
        org.apache.maven.model.Model model;
        java.util.List $stack7, $stack9, $stack13;
        org.apache.maven.model.Build build;
        java.util.Iterator l5;
        boolean $stack11;
        java.lang.Object $stack12;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.model.building.ModelBuildingRequest request;
        org.apache.maven.model.building.ModelProblemCollector problems;
        org.apache.maven.model.normalization.DefaultModelNormalizer $r0, $r1;

        this := @this: DefaultModelNormalizer;

        model := @parameter0: org.apache.maven.model.Model;

        request := @parameter1: org.apache.maven.model.building.ModelBuildingRequest;

        problems := @parameter2: org.apache.maven.model.building.ModelProblemCollector;

        $stack7 = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getDependencies()>();

        $r0 = (org.apache.maven.model.normalization.DefaultModelNormalizer) this;

        specialinvoke $r0.<org.apache.maven.model.normalization.DefaultModelNormalizer: void injectDependencyDefaults(java.util.List)>($stack7);

        build = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if build == null goto label2;

        $stack9 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getPlugins()>();

        l5 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label2;

        $stack12 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack12;

        $stack13 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.util.List getDependencies()>();

        $r1 = (org.apache.maven.model.normalization.DefaultModelNormalizer) this;

        specialinvoke $r1.<org.apache.maven.model.normalization.DefaultModelNormalizer: void injectDependencyDefaults(java.util.List)>($stack13);

        goto label1;

     label2:
        return;
    }

    private void injectDependencyDefaults(java.util.List)
    {
        java.util.List dependencies;
        java.util.Iterator l2;
        boolean $stack5, $stack8;
        java.lang.Object $stack6;
        org.apache.maven.model.Dependency dependency;
        java.lang.String $stack7;
        DefaultModelNormalizer this;

        this := @this: DefaultModelNormalizer;

        dependencies := @parameter0: java.util.List;

        l2 = interfaceinvoke dependencies.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label3;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        dependency = (org.apache.maven.model.Dependency) $stack6;

        $stack7 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack8 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack7);

        if $stack8 == 0 goto label2;

        virtualinvoke dependency.<org.apache.maven.model.Dependency: void setScope(java.lang.String)>("compile");

     label2:
        goto label1;

     label3:
        return;
    }
}
