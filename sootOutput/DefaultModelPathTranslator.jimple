public class DefaultModelPathTranslator extends java.lang.Object implements org.apache.maven.model.path.ModelPathTranslator
{
    private org.apache.maven.model.path.PathTranslator pathTranslator;

    public void <init>()
    {
        DefaultModelPathTranslator this;

        this := @this: DefaultModelPathTranslator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.model.path.DefaultModelPathTranslator setPathTranslator(org.apache.maven.model.path.PathTranslator)
    {
        DefaultModelPathTranslator this;
        org.apache.maven.model.path.PathTranslator pathTranslator;
        org.apache.maven.model.path.DefaultModelPathTranslator $r0, $r1;

        this := @this: DefaultModelPathTranslator;

        pathTranslator := @parameter0: org.apache.maven.model.path.PathTranslator;

        $r0 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $r0.<org.apache.maven.model.path.DefaultModelPathTranslator: org.apache.maven.model.path.PathTranslator pathTranslator> = pathTranslator;

        $r1 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        return $r1;
    }

    public void alignToBaseDirectory(org.apache.maven.model.Model, java.io.File, org.apache.maven.model.building.ModelBuildingRequest)
    {
        org.apache.maven.model.Model model;
        java.io.File basedir;
        org.apache.maven.model.Build build;
        DefaultModelPathTranslator this;
        java.lang.String $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack27, $stack28, $stack29, $stack30, filter, $stack48, $stack52, $stack53, $stack56, $stack57;
        java.util.List $stack20, $stack23, $stack26, $stack34, $stack36;
        boolean $stack22, $stack25, $stack38;
        int $stack35;
        java.lang.Object $stack47, $stack51, $stack55;
        org.apache.maven.model.building.ModelBuildingRequest request;
        java.util.Iterator filters, resource#6;
        org.apache.maven.model.Resource resource;
        org.apache.maven.model.Reporting filters#11;
        java.util.ArrayList $u0;
        org.apache.maven.model.path.DefaultModelPathTranslator $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: DefaultModelPathTranslator;

        model := @parameter0: org.apache.maven.model.Model;

        basedir := @parameter1: java.io.File;

        request := @parameter2: org.apache.maven.model.building.ModelBuildingRequest;

        if model == null goto label01;

        if basedir != null goto label02;

     label01:
        return;

     label02:
        build = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if build == null goto label10;

        $stack12 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getDirectory()>();

        $r0 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack13 = specialinvoke $r0.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack12, basedir);

        virtualinvoke build.<org.apache.maven.model.Build: void setDirectory(java.lang.String)>($stack13);

        $stack14 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getSourceDirectory()>();

        $r1 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack15 = specialinvoke $r1.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack14, basedir);

        virtualinvoke build.<org.apache.maven.model.Build: void setSourceDirectory(java.lang.String)>($stack15);

        $stack16 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getTestSourceDirectory()>();

        $r2 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack17 = specialinvoke $r2.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack16, basedir);

        virtualinvoke build.<org.apache.maven.model.Build: void setTestSourceDirectory(java.lang.String)>($stack17);

        $stack18 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getScriptSourceDirectory()>();

        $r3 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack19 = specialinvoke $r3.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack18, basedir);

        virtualinvoke build.<org.apache.maven.model.Build: void setScriptSourceDirectory(java.lang.String)>($stack19);

        $stack20 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getResources()>();

        filters = interfaceinvoke $stack20.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $stack22 = interfaceinvoke filters.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label04;

        $stack55 = interfaceinvoke filters.<java.util.Iterator: java.lang.Object next()>();

        resource = (org.apache.maven.model.Resource) $stack55;

        $stack56 = virtualinvoke resource.<org.apache.maven.model.Resource: java.lang.String getDirectory()>();

        $r4 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack57 = specialinvoke $r4.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack56, basedir);

        virtualinvoke resource.<org.apache.maven.model.Resource: void setDirectory(java.lang.String)>($stack57);

        goto label03;

     label04:
        $stack23 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getTestResources()>();

        filters = interfaceinvoke $stack23.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack25 = interfaceinvoke filters.<java.util.Iterator: boolean hasNext()>();

        if $stack25 == 0 goto label06;

        $stack51 = interfaceinvoke filters.<java.util.Iterator: java.lang.Object next()>();

        resource = (org.apache.maven.model.Resource) $stack51;

        $stack52 = virtualinvoke resource.<org.apache.maven.model.Resource: java.lang.String getDirectory()>();

        $r5 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack53 = specialinvoke $r5.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack52, basedir);

        virtualinvoke resource.<org.apache.maven.model.Resource: void setDirectory(java.lang.String)>($stack53);

        goto label05;

     label06:
        $stack26 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getFilters()>();

        if $stack26 == null goto label09;

        $u0 = new java.util.ArrayList;

        $stack34 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getFilters()>();

        $stack35 = interfaceinvoke $stack34.<java.util.List: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack35);

        $stack36 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getFilters()>();

        resource#6 = interfaceinvoke $stack36.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack38 = interfaceinvoke resource#6.<java.util.Iterator: boolean hasNext()>();

        if $stack38 == 0 goto label08;

        $stack47 = interfaceinvoke resource#6.<java.util.Iterator: java.lang.Object next()>();

        filter = (java.lang.String) $stack47;

        $r6 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack48 = specialinvoke $r6.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>(filter, basedir);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack48);

        goto label07;

     label08:
        virtualinvoke build.<org.apache.maven.model.Build: void setFilters(java.util.List)>($u0);

     label09:
        $stack27 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        $r7 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack28 = specialinvoke $r7.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack27, basedir);

        virtualinvoke build.<org.apache.maven.model.Build: void setOutputDirectory(java.lang.String)>($stack28);

        $stack29 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getTestOutputDirectory()>();

        $r8 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack30 = specialinvoke $r8.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack29, basedir);

        virtualinvoke build.<org.apache.maven.model.Build: void setTestOutputDirectory(java.lang.String)>($stack30);

     label10:
        filters#11 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Reporting getReporting()>();

        if filters#11 == null goto label11;

        $stack10 = virtualinvoke filters#11.<org.apache.maven.model.Reporting: java.lang.String getOutputDirectory()>();

        $r9 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack11 = specialinvoke $r9.<org.apache.maven.model.path.DefaultModelPathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>($stack10, basedir);

        virtualinvoke filters#11.<org.apache.maven.model.Reporting: void setOutputDirectory(java.lang.String)>($stack11);

     label11:
        return;
    }

    private java.lang.String alignToBaseDirectory(java.lang.String, java.io.File)
    {
        DefaultModelPathTranslator this;
        java.lang.String path, $stack4;
        java.io.File basedir;
        org.apache.maven.model.path.PathTranslator $stack3;
        org.apache.maven.model.path.DefaultModelPathTranslator $r0;

        this := @this: DefaultModelPathTranslator;

        path := @parameter0: java.lang.String;

        basedir := @parameter1: java.io.File;

        $r0 = (org.apache.maven.model.path.DefaultModelPathTranslator) this;

        $stack3 = $r0.<org.apache.maven.model.path.DefaultModelPathTranslator: org.apache.maven.model.path.PathTranslator pathTranslator>;

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.path.PathTranslator: java.lang.String alignToBaseDirectory(java.lang.String,java.io.File)>(path, basedir);

        return $stack4;
    }
}
