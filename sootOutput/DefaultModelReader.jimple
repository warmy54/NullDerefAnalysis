public class DefaultModelReader extends java.lang.Object implements org.apache.maven.model.io.ModelReader
{
    private org.apache.maven.model.building.ModelSourceTransformer transformer;

    public void <init>()
    {
        DefaultModelReader this;

        this := @this: DefaultModelReader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setTransformer(org.apache.maven.model.building.ModelSourceTransformer)
    {
        DefaultModelReader this;
        org.apache.maven.model.building.ModelSourceTransformer transformer;
        org.apache.maven.model.io.DefaultModelReader $r0;

        this := @this: DefaultModelReader;

        transformer := @parameter0: org.apache.maven.model.building.ModelSourceTransformer;

        $r0 = (org.apache.maven.model.io.DefaultModelReader) this;

        $r0.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.building.ModelSourceTransformer transformer> = transformer;

        return;
    }

    public org.apache.maven.model.Model read(java.io.File, java.util.Map) throws java.io.IOException
    {
        java.io.File input;
        DefaultModelReader this;
        java.util.Map options;
        org.apache.maven.model.building.TransformerContext context;
        org.apache.maven.model.building.ModelSourceTransformer $stack10;
        java.nio.file.Path $stack11;
        java.lang.Throwable $stack24, $stack25, $stack27;
        java.lang.StringBuilder $stack30, $stack31, $u1;
        java.lang.String $stack32;
        java.io.InputStream is, e#3;
        org.apache.maven.model.Model model;
        java.io.FileInputStream $u0;
        java.io.IOException $u2;
        org.apache.maven.model.io.DefaultModelReader $r0, $r1, $r2;

        this := @this: DefaultModelReader;

        input := @parameter0: java.io.File;

        options := @parameter1: java.util.Map;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(input, "input cannot be null");

        $r0 = (org.apache.maven.model.io.DefaultModelReader) this;

        context = specialinvoke $r0.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.building.TransformerContext getTransformerContext(java.util.Map)>(options);

        if context != null goto label01;

        $u0 = new java.io.FileInputStream;

        specialinvoke $u0.<java.io.FileInputStream: void <init>(java.io.File)>(input);

        is = $u0;

        goto label04;

     label01:
        $r1 = (org.apache.maven.model.io.DefaultModelReader) this;

        $stack10 = $r1.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.building.ModelSourceTransformer transformer>;

        $stack11 = virtualinvoke input.<java.io.File: java.nio.file.Path toPath()>();

        is = interfaceinvoke $stack10.<org.apache.maven.model.building.ModelSourceTransformer: java.io.InputStream transform(java.nio.file.Path,org.apache.maven.model.building.TransformerContext)>($stack11, context);

     label02:
        goto label04;

     label03:
        $stack27 := @caughtexception;

        $u2 = new java.io.IOException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to transform ");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(input);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($stack32, $stack27);

        throw $u2;

     label04:
        e#3 = is;

     label05:
        $r2 = (org.apache.maven.model.io.DefaultModelReader) this;

        model = virtualinvoke $r2.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.InputStream,java.util.Map)>(is, options);

        virtualinvoke model.<org.apache.maven.model.Model: void setPomFile(java.io.File)>(input);

     label06:
        if is == null goto label07;

        virtualinvoke is.<java.io.InputStream: void close()>();

     label07:
        return model;

     label08:
        $stack25 := @caughtexception;

        if e#3 == null goto label12;

     label09:
        virtualinvoke e#3.<java.io.InputStream: void close()>();

     label10:
        goto label12;

     label11:
        $stack24 := @caughtexception;

        virtualinvoke $stack25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack24);

     label12:
        throw $stack25;

        catch org.apache.maven.model.building.TransformerException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public org.apache.maven.model.Model read(java.io.Reader, java.util.Map) throws java.io.IOException
    {
        java.io.Reader input;
        DefaultModelReader this;
        java.util.Map options;
        boolean $stack7;
        org.apache.maven.model.InputSource $stack8;
        java.lang.Throwable $stack11, $stack12;
        org.apache.maven.model.Model l4;
        org.apache.maven.model.io.DefaultModelReader $r0, $r1, $r2;

        this := @this: DefaultModelReader;

        input := @parameter0: java.io.Reader;

        options := @parameter1: java.util.Map;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(input, "input cannot be null");

     label1:
        $r0 = (org.apache.maven.model.io.DefaultModelReader) this;

        $stack7 = specialinvoke $r0.<org.apache.maven.model.io.DefaultModelReader: boolean isStrict(java.util.Map)>(options);

        $r1 = (org.apache.maven.model.io.DefaultModelReader) this;

        $stack8 = specialinvoke $r1.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.InputSource getSource(java.util.Map)>(options);

        $r2 = (org.apache.maven.model.io.DefaultModelReader) this;

        l4 = specialinvoke $r2.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.Reader,boolean,org.apache.maven.model.InputSource)>(input, $stack7, $stack8);

     label2:
        if input == null goto label3;

        virtualinvoke input.<java.io.Reader: void close()>();

     label3:
        return l4;

     label4:
        $stack12 := @caughtexception;

        if input == null goto label8;

     label5:
        virtualinvoke input.<java.io.Reader: void close()>();

     label6:
        goto label8;

     label7:
        $stack11 := @caughtexception;

        virtualinvoke $stack12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack11);

     label8:
        throw $stack12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public org.apache.maven.model.Model read(java.io.InputStream, java.util.Map) throws java.io.IOException
    {
        java.io.InputStream input;
        org.codehaus.plexus.util.xml.XmlStreamReader in;
        DefaultModelReader this;
        java.util.Map options;
        boolean $stack8;
        org.apache.maven.model.InputSource $stack9;
        java.lang.Throwable $stack12, $stack13;
        org.apache.maven.model.Model l4;
        org.apache.maven.model.io.DefaultModelReader $r0, $r1, $r2;
        java.io.Reader $r3;

        this := @this: DefaultModelReader;

        input := @parameter0: java.io.InputStream;

        options := @parameter1: java.util.Map;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(input, "input cannot be null");

        in = staticinvoke <org.codehaus.plexus.util.ReaderFactory: org.codehaus.plexus.util.xml.XmlStreamReader newXmlReader(java.io.InputStream)>(input);

     label1:
        $r0 = (org.apache.maven.model.io.DefaultModelReader) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.model.io.DefaultModelReader: boolean isStrict(java.util.Map)>(options);

        $r1 = (org.apache.maven.model.io.DefaultModelReader) this;

        $stack9 = specialinvoke $r1.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.InputSource getSource(java.util.Map)>(options);

        $r2 = (org.apache.maven.model.io.DefaultModelReader) this;

        $r3 = (java.io.Reader) in;

        l4 = specialinvoke $r2.<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.Reader,boolean,org.apache.maven.model.InputSource)>($r3, $stack8, $stack9);

     label2:
        if in == null goto label3;

        virtualinvoke in.<org.codehaus.plexus.util.xml.XmlStreamReader: void close()>();

     label3:
        return l4;

     label4:
        $stack13 := @caughtexception;

        if in == null goto label8;

     label5:
        virtualinvoke in.<org.codehaus.plexus.util.xml.XmlStreamReader: void close()>();

     label6:
        goto label8;

     label7:
        $stack12 := @caughtexception;

        virtualinvoke $stack13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack12);

     label8:
        throw $stack13;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private boolean isStrict(java.util.Map)
    {
        java.util.Map options;
        java.lang.String $stack3;
        boolean $stack4, $stack5;
        DefaultModelReader this;
        java.lang.Object $stack6;

        this := @this: DefaultModelReader;

        options := @parameter0: java.util.Map;

        if options == null goto label1;

        $stack6 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.apache.maven.model.io.isStrict");

        goto label2;

     label1:
        $stack6 = null;

     label2:
        if $stack6 == null goto label3;

        $stack3 = virtualinvoke $stack6.<java.lang.Object: java.lang.String toString()>();

        $stack4 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack3);

        if $stack4 == 0 goto label4;

     label3:
        $stack5 = 1;

        goto label5;

     label4:
        $stack5 = 0;

     label5:
        return $stack5;
    }

    private org.apache.maven.model.InputSource getSource(java.util.Map)
    {
        java.util.Map options;
        org.apache.maven.model.InputSource $stack3;
        DefaultModelReader this;
        java.lang.Object $stack4;

        this := @this: DefaultModelReader;

        options := @parameter0: java.util.Map;

        if options == null goto label1;

        $stack4 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.apache.maven.model.io.inputSource");

        goto label2;

     label1:
        $stack4 = null;

     label2:
        $stack3 = (org.apache.maven.model.InputSource) $stack4;

        return $stack3;
    }

    private org.apache.maven.model.building.TransformerContext getTransformerContext(java.util.Map)
    {
        java.util.Map options;
        org.apache.maven.model.building.TransformerContext $stack3;
        DefaultModelReader this;
        java.lang.Object $stack4;

        this := @this: DefaultModelReader;

        options := @parameter0: java.util.Map;

        if options == null goto label1;

        $stack4 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("transformerContext");

        goto label2;

     label1:
        $stack4 = null;

     label2:
        $stack3 = (org.apache.maven.model.building.TransformerContext) $stack4;

        return $stack3;
    }

    private org.apache.maven.model.Model read(java.io.Reader, boolean, org.apache.maven.model.InputSource) throws java.io.IOException
    {
        org.apache.maven.model.InputSource source;
        java.io.Reader reader;
        boolean strict;
        org.apache.maven.model.Model $stack6, $stack8;
        java.lang.Throwable $stack9, $r3;
        java.lang.String $stack11;
        int $stack12, $stack13;
        DefaultModelReader this;
        org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx $u0;
        org.apache.maven.model.io.xpp3.MavenXpp3Reader $u1;
        org.apache.maven.model.io.ModelParseException $u2;
        org.codehaus.plexus.util.xml.pull.XmlPullParserException $r0, $r1, $r2;

        this := @this: DefaultModelReader;

        reader := @parameter0: java.io.Reader;

        strict := @parameter1: boolean;

        source := @parameter2: org.apache.maven.model.InputSource;

     label1:
        if source == null goto label3;

        $u0 = new org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx;

        specialinvoke $u0.<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: void <init>()>();

        $stack8 = virtualinvoke $u0.<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Model read(java.io.Reader,boolean,org.apache.maven.model.InputSource)>(reader, strict, source);

     label2:
        return $stack8;

     label3:
        $u1 = new org.apache.maven.model.io.xpp3.MavenXpp3Reader;

        specialinvoke $u1.<org.apache.maven.model.io.xpp3.MavenXpp3Reader: void <init>()>();

        $stack6 = virtualinvoke $u1.<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model read(java.io.Reader,boolean)>(reader, strict);

     label4:
        return $stack6;

     label5:
        $stack9 := @caughtexception;

        $u2 = new org.apache.maven.model.io.ModelParseException;

        $r0 = (org.codehaus.plexus.util.xml.pull.XmlPullParserException) $stack9;

        $stack11 = virtualinvoke $r0.<org.codehaus.plexus.util.xml.pull.XmlPullParserException: java.lang.String getMessage()>();

        $r1 = (org.codehaus.plexus.util.xml.pull.XmlPullParserException) $stack9;

        $stack12 = virtualinvoke $r1.<org.codehaus.plexus.util.xml.pull.XmlPullParserException: int getLineNumber()>();

        $r2 = (org.codehaus.plexus.util.xml.pull.XmlPullParserException) $stack9;

        $stack13 = virtualinvoke $r2.<org.codehaus.plexus.util.xml.pull.XmlPullParserException: int getColumnNumber()>();

        specialinvoke $u2.<org.apache.maven.model.io.ModelParseException: void <init>(java.lang.String,int,int,java.lang.Throwable)>($stack11, $stack12, $stack13, $stack9);

        $r3 = (java.lang.Throwable) $u2;

        throw $r3;

        catch org.codehaus.plexus.util.xml.pull.XmlPullParserException from label1 to label2 with label5;
        catch org.codehaus.plexus.util.xml.pull.XmlPullParserException from label3 to label4 with label5;
    }
}
