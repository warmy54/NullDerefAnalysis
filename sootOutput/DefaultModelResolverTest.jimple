public final class DefaultModelResolverTest extends org.apache.maven.repository.internal.AbstractRepositoryTestCase
{

    public void <init>()
    {
        DefaultModelResolverTest this;

        this := @this: DefaultModelResolverTest;

        specialinvoke this.<org.apache.maven.repository.internal.AbstractRepositoryTestCase: void <init>()>();

        return;
    }

    public void testResolveParentThrowsUnresolvableModelExceptionWhenNotFound() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack7, $stack8;
        boolean $stack9;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("0");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack5 = staticinvoke <DefaultModelResolverTest$lambda_testResolveParentThrowsUnresolvableModelExceptionWhenNotFound_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.repository.internal.DefaultModelResolverTest,org.apache.maven.model.Parent)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack7 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        $stack9 = virtualinvoke $stack8.<java.lang.String: boolean startsWith(java.lang.String)>("Could not find artifact ut.simple:artifact:pom:0 in repo");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack7, $stack9;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("[2.0,2.1)");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack5 = staticinvoke <DefaultModelResolverTest$lambda_testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound_1__311: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.repository.internal.DefaultModelResolverTest,org.apache.maven.model.Parent)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack7 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack9 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("No versions matched the requested parent version range \'[2.0,2.1)\'", $stack9);

        return;
    }

    public void testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("[1.0,)");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack5 = staticinvoke <DefaultModelResolverTest$lambda_testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound_2__310: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.repository.internal.DefaultModelResolverTest,org.apache.maven.model.Parent)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("The requested parent version range \'[1.0,)\' does not specify an upper bound", $stack8);

        return;
    }

    public void testResolveParentSuccessfullyResolvesExistingParentWithoutRange() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("1.0");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack6);

        return;
    }

    public void testResolveParentSuccessfullyResolvesExistingParentUsingHighestVersion() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("(,2.0)");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack6);

        return;
    }

    public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack7, $stack8;
        boolean $stack9;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("0");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack5 = staticinvoke <DefaultModelResolverTest$lambda_testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound_3__313: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.repository.internal.DefaultModelResolverTest,org.apache.maven.model.Dependency)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack7 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        $stack9 = virtualinvoke $stack8.<java.lang.String: boolean startsWith(java.lang.String)>("Could not find artifact ut.simple:artifact:pom:0 in repo");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("[2.0,2.1)");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack5 = staticinvoke <DefaultModelResolverTest$lambda_testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound_4__312: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.repository.internal.DefaultModelResolverTest,org.apache.maven.model.Dependency)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("No versions matched the requested dependency version range \'[2.0,2.1)\'", $stack8);

        return;
    }

    public void testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("[1.0,)");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack5 = staticinvoke <DefaultModelResolverTest$lambda_testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound_5__314: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.repository.internal.DefaultModelResolverTest,org.apache.maven.model.Dependency)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("The requested dependency version range \'[1.0,)\' does not specify an upper bound", $stack8);

        return;
    }

    public void testResolveDependencySuccessfullyResolvesExistingDependencyWithoutRange() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("1.0");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack6);

        return;
    }

    public void testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVersion() throws java.lang.Exception
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("ut.simple");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("artifact");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("(,2.0)");

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack6);

        return;
    }

    private org.apache.maven.model.resolution.ModelResolver newModelResolver() throws org.codehaus.plexus.component.repository.exception.ComponentLookupException, java.net.MalformedURLException
    {
        DefaultModelResolverTest this;
        org.eclipse.aether.RepositorySystemSession $stack2;
        java.lang.Class $stack4;
        java.lang.String $stack5;
        org.codehaus.plexus.PlexusContainer $stack6, $stack9, $stack12;
        java.lang.Object $stack7, $stack10, $stack13;
        org.eclipse.aether.impl.ArtifactResolver $stack8;
        org.eclipse.aether.impl.VersionRangeResolver $stack11;
        org.eclipse.aether.repository.RemoteRepository[] $stack14;
        org.eclipse.aether.impl.RemoteRepositoryManager $stack15;
        org.eclipse.aether.repository.RemoteRepository $stack17;
        java.util.List $stack18;
        org.apache.maven.repository.internal.DefaultModelResolver $u0;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0, $r1, $r2, $r3;
        org.apache.maven.model.resolution.ModelResolver $r4;

        this := @this: DefaultModelResolverTest;

        $u0 = new org.apache.maven.repository.internal.DefaultModelResolver;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.eclipse.aether.RepositorySystemSession session>;

        $stack4 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>();

        $r1 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack6 = virtualinvoke $r1.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack7 = interfaceinvoke $stack6.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/eclipse/aether/impl/ArtifactResolver;");

        $stack8 = (org.eclipse.aether.impl.ArtifactResolver) $stack7;

        $r2 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack9 = virtualinvoke $r2.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack10 = interfaceinvoke $stack9.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/eclipse/aether/impl/VersionRangeResolver;");

        $stack11 = (org.eclipse.aether.impl.VersionRangeResolver) $stack10;

        $r3 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack12 = virtualinvoke $r3.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack13 = interfaceinvoke $stack12.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/eclipse/aether/impl/RemoteRepositoryManager;");

        $stack15 = (org.eclipse.aether.impl.RemoteRepositoryManager) $stack13;

        $stack14 = newarray (org.eclipse.aether.repository.RemoteRepository)[1];

        $stack17 = staticinvoke <org.apache.maven.repository.internal.DefaultModelResolverTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        $stack14[0] = $stack17;

        $stack18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack14);

        specialinvoke $u0.<org.apache.maven.repository.internal.DefaultModelResolver: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,java.lang.String,org.eclipse.aether.impl.ArtifactResolver,org.eclipse.aether.impl.VersionRangeResolver,org.eclipse.aether.impl.RemoteRepositoryManager,java.util.List)>($stack2, null, $stack5, $stack8, $stack11, $stack15, $stack18);

        $r4 = (org.apache.maven.model.resolution.ModelResolver) $u0;

        return $r4;
    }

    private void lambda$testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound$5(org.apache.maven.model.Dependency) throws java.lang.Throwable
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Dependency dependency;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>(dependency);

        return;
    }

    private void lambda$testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound$4(org.apache.maven.model.Dependency) throws java.lang.Throwable
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Dependency dependency;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>(dependency);

        return;
    }

    private void lambda$testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound$3(org.apache.maven.model.Dependency) throws java.lang.Throwable
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Dependency dependency;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>(dependency);

        return;
    }

    private void lambda$testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound$2(org.apache.maven.model.Parent) throws java.lang.Throwable
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Parent parent;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        parent := @parameter0: org.apache.maven.model.Parent;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>(parent);

        return;
    }

    private void lambda$testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound$1(org.apache.maven.model.Parent) throws java.lang.Throwable
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Parent parent;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        parent := @parameter0: org.apache.maven.model.Parent;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>(parent);

        return;
    }

    private void lambda$testResolveParentThrowsUnresolvableModelExceptionWhenNotFound$0(org.apache.maven.model.Parent) throws java.lang.Throwable
    {
        DefaultModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Parent parent;
        org.apache.maven.repository.internal.DefaultModelResolverTest $r0;

        this := @this: DefaultModelResolverTest;

        parent := @parameter0: org.apache.maven.model.Parent;

        $r0 = (org.apache.maven.repository.internal.DefaultModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.repository.internal.DefaultModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>(parent);

        return;
    }
}
