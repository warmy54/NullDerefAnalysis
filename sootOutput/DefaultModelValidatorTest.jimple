public class DefaultModelValidatorTest extends java.lang.Object
{
    private org.apache.maven.model.validation.ModelValidator validator;

    public void <init>()
    {
        DefaultModelValidatorTest this;

        this := @this: DefaultModelValidatorTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private org.apache.maven.model.Model read(java.lang.String) throws java.lang.Exception
    {
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack10, $stack11, $stack12;
        java.lang.String pom, resource, $stack13;
        DefaultModelValidatorTest this;
        java.lang.Class $stack8;
        java.io.InputStream is;
        org.apache.maven.model.io.xpp3.MavenXpp3Reader $stack14;
        org.apache.maven.model.Model $stack15;

        this := @this: DefaultModelValidatorTest;

        pom := @parameter0: java.lang.String;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/poms/validation/");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pom);

        resource = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        is = virtualinvoke $stack8.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(resource);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing resource: ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resource);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(is, $stack13);

        $stack14 = new org.apache.maven.model.io.xpp3.MavenXpp3Reader;

        specialinvoke $stack14.<org.apache.maven.model.io.xpp3.MavenXpp3Reader: void <init>()>();

        $stack15 = virtualinvoke $stack14.<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model read(java.io.InputStream)>(is);

        return $stack15;
    }

    private org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String) throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        java.lang.String pom;
        org.apache.maven.model.building.SimpleProblemCollector $stack2;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0;

        this := @this: DefaultModelValidatorTest;

        pom := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateEffective(java.lang.String,int)>(pom, 31);

        return $stack2;
    }

    private org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String) throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        java.lang.String pom;
        org.apache.maven.model.building.SimpleProblemCollector $stack2;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0;

        this := @this: DefaultModelValidatorTest;

        pom := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String,int)>(pom, 31);

        return $stack2;
    }

    private org.apache.maven.model.building.SimpleProblemCollector validateEffective(java.lang.String, int) throws java.lang.Exception
    {
        int level;
        org.apache.maven.model.building.DefaultModelBuildingRequest request, $u0;
        DefaultModelValidatorTest this;
        java.lang.String pom;
        org.apache.maven.model.Model model;
        org.apache.maven.model.validation.ModelValidator $stack10;
        org.apache.maven.model.building.SimpleProblemCollector $u1;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;
        org.apache.maven.model.building.ModelBuildingRequest $r2;
        org.apache.maven.model.building.ModelProblemCollector $r3;

        this := @this: DefaultModelValidatorTest;

        pom := @parameter0: java.lang.String;

        level := @parameter1: int;

        $u0 = new org.apache.maven.model.building.DefaultModelBuildingRequest;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultModelBuildingRequest: void <init>()>();

        request = virtualinvoke $u0.<org.apache.maven.model.building.DefaultModelBuildingRequest: org.apache.maven.model.building.DefaultModelBuildingRequest setValidationLevel(int)>(level);

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        model = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.Model read(java.lang.String)>(pom);

        $u1 = new org.apache.maven.model.building.SimpleProblemCollector;

        specialinvoke $u1.<org.apache.maven.model.building.SimpleProblemCollector: void <init>(org.apache.maven.model.Model)>(model);

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $stack10 = $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.validation.ModelValidator validator>;

        $r2 = (org.apache.maven.model.building.ModelBuildingRequest) request;

        $r3 = (org.apache.maven.model.building.ModelProblemCollector) $u1;

        interfaceinvoke $stack10.<org.apache.maven.model.validation.ModelValidator: void validateEffectiveModel(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>(model, $r2, $r3);

        return $u1;
    }

    private org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String, int) throws java.lang.Exception
    {
        int level;
        org.apache.maven.model.building.DefaultModelBuildingRequest request, $u0;
        DefaultModelValidatorTest this;
        java.lang.String pom;
        org.apache.maven.model.Model model;
        org.apache.maven.model.validation.ModelValidator $stack10, $stack11;
        org.apache.maven.model.building.SimpleProblemCollector $u1;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r4;
        org.apache.maven.model.building.ModelBuildingRequest $r2, $r5;
        org.apache.maven.model.building.ModelProblemCollector $r3, $r6;

        this := @this: DefaultModelValidatorTest;

        pom := @parameter0: java.lang.String;

        level := @parameter1: int;

        $u0 = new org.apache.maven.model.building.DefaultModelBuildingRequest;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultModelBuildingRequest: void <init>()>();

        request = virtualinvoke $u0.<org.apache.maven.model.building.DefaultModelBuildingRequest: org.apache.maven.model.building.DefaultModelBuildingRequest setValidationLevel(int)>(level);

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        model = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.Model read(java.lang.String)>(pom);

        $u1 = new org.apache.maven.model.building.SimpleProblemCollector;

        specialinvoke $u1.<org.apache.maven.model.building.SimpleProblemCollector: void <init>(org.apache.maven.model.Model)>(model);

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $stack10 = $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.validation.ModelValidator validator>;

        $r2 = (org.apache.maven.model.building.ModelBuildingRequest) request;

        $r3 = (org.apache.maven.model.building.ModelProblemCollector) $u1;

        interfaceinvoke $stack10.<org.apache.maven.model.validation.ModelValidator: void validateFileModel(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>(model, $r2, $r3);

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $stack11 = $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.validation.ModelValidator validator>;

        $r5 = (org.apache.maven.model.building.ModelBuildingRequest) request;

        $r6 = (org.apache.maven.model.building.ModelProblemCollector) $u1;

        interfaceinvoke $stack11.<org.apache.maven.model.validation.ModelValidator: void validateRawModel(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>(model, $r5, $r6);

        return $u1;
    }

    private void assertContains(java.lang.String, java.lang.String)
    {
        java.lang.String msg, substring, $stack9;
        boolean $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7, $stack8;
        DefaultModelValidatorTest this;

        this := @this: DefaultModelValidatorTest;

        msg := @parameter0: java.lang.String;

        substring := @parameter1: java.lang.String;

        $stack3 = virtualinvoke msg.<java.lang.String: boolean contains(java.lang.CharSequence)>(substring);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(substring);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was not found in: ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack3, $stack9);

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.validation.DefaultModelValidator $u0;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0;
        org.apache.maven.model.validation.ModelValidator $r1;

        this := @this: DefaultModelValidatorTest;

        $u0 = new org.apache.maven.model.validation.DefaultModelValidator;

        specialinvoke $u0.<org.apache.maven.model.validation.DefaultModelValidator: void <init>()>();

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $r1 = (org.apache.maven.model.validation.ModelValidator) $u0;

        $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.validation.ModelValidator validator> = $r1;

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.validation.ModelValidator validator> = null;

        return;
    }

    private void assertViolations(org.apache.maven.model.building.SimpleProblemCollector, int, int, int)
    {
        int fatals, $stack6, errors, $stack10, warnings, $stack14;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack5, $stack7, $stack9, $stack11, $stack13, $stack15;
        java.lang.String $stack8, $stack12, $stack16;
        DefaultModelValidatorTest this;

        this := @this: DefaultModelValidatorTest;

        result := @parameter0: org.apache.maven.model.building.SimpleProblemCollector;

        fatals := @parameter1: int;

        errors := @parameter2: int;

        warnings := @parameter3: int;

        $stack5 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack6 = interfaceinvoke $stack5.<java.util.List: int size()>();

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(fatals, $stack6, $stack8);

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: int size()>();

        $stack11 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($stack11);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(errors, $stack10, $stack12);

        $stack13 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack14 = interfaceinvoke $stack13.<java.util.List: int size()>();

        $stack15 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($stack15);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(warnings, $stack14, $stack16);

        return;
    }

    public void testMissingModelVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-modelVersion-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'modelVersion\' is missing.", $stack5);

        return;
    }

    public void testBadModelVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String,int)>("bad-modelVersion.xml", 31);

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 1, 0, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("modelVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingArtifactId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-artifactId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'artifactId\' is missing.", $stack5);

        return;
    }

    public void testMissingGroupId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-groupId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'groupId\' is missing.", $stack5);

        return;
    }

    public void testInvalidCoordinateIds() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4, $stack7;
        java.lang.Object $stack5, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("invalid-coordinate-ids-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 2, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'groupId\' with value \'o/a/m\' does not match a valid coordinate id pattern.", $stack5);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'artifactId\' with value \'m$-do$\' does not match a valid coordinate id pattern.", $stack8);

        return;
    }

    public void testMissingType() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-type-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'packaging\' is missing.", $stack5);

        return;
    }

    public void testMissingVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-version-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'version\' is missing.", $stack5);

        return;
    }

    public void testInvalidAggregatorPackaging() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("invalid-aggregator-packaging-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("Aggregator projects require \'pom\' as packaging.");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingDependencyArtifactId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-dependency-artifactId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'dependencies.dependency.artifactId\' for groupId:null:jar is missing");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingDependencyGroupId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-dependency-groupId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'dependencies.dependency.groupId\' for null:artifactId:jar is missing");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingDependencyVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-dependency-version-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'dependencies.dependency.version\' for groupId:artifactId:jar is missing");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingDependencyManagementArtifactId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-dependency-mgmt-artifactId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'dependencyManagement.dependencies.dependency.artifactId\' for groupId:null:jar is missing");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingDependencyManagementGroupId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-dependency-mgmt-groupId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'dependencyManagement.dependencies.dependency.groupId\' for null:artifactId:jar is missing");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingAll() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List messages;
        boolean $stack5, $stack6, $stack7, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-1-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        messages = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke messages.<java.util.List: boolean contains(java.lang.Object)>("\'modelVersion\' is missing.");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack5);

        $stack6 = interfaceinvoke messages.<java.util.List: boolean contains(java.lang.Object)>("\'groupId\' is missing.");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $stack7 = interfaceinvoke messages.<java.util.List: boolean contains(java.lang.Object)>("\'artifactId\' is missing.");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack7);

        $stack8 = interfaceinvoke messages.<java.util.List: boolean contains(java.lang.Object)>("\'version\' is missing.");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack8);

        return;
    }

    public void testMissingPluginArtifactId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-plugin-artifactId-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.plugins.plugin.artifactId\' is missing.", $stack5);

        return;
    }

    public void testEmptyPluginVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("empty-plugin-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.plugins.plugin.version\' for org.apache.maven.plugins:maven-it-plugin must be a valid version but is \'\'.", $stack5);

        return;
    }

    public void testMissingRepositoryId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4, $stack7, $stack10, $stack13;
        java.lang.Object $stack5, $stack8, $stack11, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String,int)>("missing-repository-id-pom.xml", 31);

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'repositories.repository.id\' is missing.", $stack5);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'repositories.repository.[null].url\' is missing.", $stack8);

        $stack10 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack11 = interfaceinvoke $stack10.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'pluginRepositories.pluginRepository.id\' is missing.", $stack11);

        $stack13 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack14 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'pluginRepositories.pluginRepository.[null].url\' is missing.", $stack14);

        return;
    }

    public void testMissingResourceDirectory() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4, $stack7;
        java.lang.Object $stack5, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-resource-directory-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 2, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.resources.resource.directory\' is missing.", $stack5);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.testResources.testResource.directory\' is missing.", $stack8);

        return;
    }

    public void testBadPluginDependencyScope() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack7, $stack11;
        java.lang.Object $stack4, $stack8, $stack12;
        java.lang.String $stack5, $stack9, $stack13;
        boolean $stack6, $stack10, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-plugin-dependency-scope.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 3, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:d");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        $stack9 = (java.lang.String) $stack8;

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:e");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack12 = interfaceinvoke $stack11.<java.util.List: java.lang.Object get(int)>(2);

        $stack13 = (java.lang.String) $stack12;

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:f");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        return;
    }

    public void testBadDependencyScope() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack7;
        java.lang.Object $stack4, $stack8;
        java.lang.String $stack5, $stack9;
        boolean $stack6, $stack10;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-dependency-scope.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 2);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:f");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        $stack9 = (java.lang.String) $stack8;

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:g");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        return;
    }

    public void testBadDependencyManagementScope() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-dependency-management-scope.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "test:g");

        return;
    }

    public void testBadDependencyVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6;
        java.lang.Object $stack4, $stack7;
        java.lang.String $stack5, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-dependency-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 2, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencies.dependency.version\' for test:b:jar must be a valid version");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'dependencies.dependency.version\' for test:c:jar must not contain any of these characters");

        return;
    }

    public void testDuplicateModule() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("duplicate-module.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("child");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testInvalidProfileId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack7, $stack11, $stack15;
        java.lang.Object $stack4, $stack8, $stack12, $stack16;
        java.lang.String $stack5, $stack9, $stack13, $stack17;
        boolean $stack6, $stack10, $stack14, $stack18;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("invalid-profile-ids.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("+invalid-id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        $stack9 = (java.lang.String) $stack8;

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean contains(java.lang.CharSequence)>("-invalid-id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack12 = interfaceinvoke $stack11.<java.util.List: java.lang.Object get(int)>(2);

        $stack13 = (java.lang.String) $stack12;

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean contains(java.lang.CharSequence)>("!invalid-id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        $stack15 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack16 = interfaceinvoke $stack15.<java.util.List: java.lang.Object get(int)>(3);

        $stack17 = (java.lang.String) $stack16;

        $stack18 = virtualinvoke $stack17.<java.lang.String: boolean contains(java.lang.CharSequence)>("?invalid-id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack18);

        return;
    }

    public void testDuplicateProfileId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("duplicate-profile-id.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("non-unique-id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testBadPluginVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6, $stack9, $stack12;
        java.lang.Object $stack4, $stack7, $stack10, $stack13;
        java.lang.String $stack5, $stack8, $stack11, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-plugin-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'build.plugins.plugin.version\' for test:mip must be a valid version");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'build.plugins.plugin.version\' for test:rmv must be a valid version");

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(2);

        $stack11 = (java.lang.String) $stack10;

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack11, "\'build.plugins.plugin.version\' for test:lmv must be a valid version");

        $stack12 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(3);

        $stack14 = (java.lang.String) $stack13;

        $r5 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r5.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack14, "\'build.plugins.plugin.version\' for test:ifsc must not contain any of these characters");

        return;
    }

    public void testDistributionManagementStatus() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("distribution-management-status.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("distributionManagement.status");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testIncompleteParent() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack7, $stack11;
        java.lang.Object $stack4, $stack8, $stack12;
        java.lang.String $stack5, $stack9, $stack13;
        boolean $stack6, $stack10, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("incomplete-parent.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 3, 0, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("parent.groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        $stack9 = (java.lang.String) $stack8;

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean contains(java.lang.CharSequence)>("parent.artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack12 = interfaceinvoke $stack11.<java.util.List: java.lang.Object get(int)>(2);

        $stack13 = (java.lang.String) $stack12;

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean contains(java.lang.CharSequence)>("parent.version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        return;
    }

    public void testHardCodedSystemPath() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6, $stack9;
        java.lang.Object $stack4, $stack7, $stack10;
        java.lang.String $stack5, $stack8, $stack11;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("hard-coded-system-path.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 3);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencies.dependency.scope\' for test:a:jar declares usage of deprecated \'system\' scope");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'dependencies.dependency.systemPath\' for test:a:jar should use a variable instead of a hard-coded path");

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(2);

        $stack11 = (java.lang.String) $stack10;

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack11, "\'dependencies.dependency.scope\' for test:b:jar declares usage of deprecated \'system\' scope");

        return;
    }

    public void testEmptyModule() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("empty-module.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'modules.module[0]\' has been specified without a path");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testDuplicatePlugin() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack7, $stack11, $stack15;
        java.lang.Object $stack4, $stack8, $stack12, $stack16;
        java.lang.String $stack5, $stack9, $stack13, $stack17;
        boolean $stack6, $stack10, $stack14, $stack18;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("duplicate-plugin.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("duplicate declaration of plugin test:duplicate");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        $stack9 = (java.lang.String) $stack8;

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean contains(java.lang.CharSequence)>("duplicate declaration of plugin test:managed-duplicate");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack12 = interfaceinvoke $stack11.<java.util.List: java.lang.Object get(int)>(2);

        $stack13 = (java.lang.String) $stack12;

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean contains(java.lang.CharSequence)>("duplicate declaration of plugin profile:duplicate");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        $stack15 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack16 = interfaceinvoke $stack15.<java.util.List: java.lang.Object get(int)>(3);

        $stack17 = (java.lang.String) $stack16;

        $stack18 = virtualinvoke $stack17.<java.lang.String: boolean contains(java.lang.CharSequence)>("duplicate declaration of plugin profile:managed-duplicate");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack18);

        return;
    }

    public void testDuplicatePluginExecution() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6, $stack9, $stack12;
        java.lang.Object $stack4, $stack7, $stack10, $stack13;
        java.lang.String $stack5, $stack8, $stack11, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("duplicate-plugin-execution.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "duplicate execution with id a");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "duplicate execution with id default");

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(2);

        $stack11 = (java.lang.String) $stack10;

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack11, "duplicate execution with id c");

        $stack12 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(3);

        $stack14 = (java.lang.String) $stack13;

        $r5 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r5.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack14, "duplicate execution with id b");

        return;
    }

    public void testReservedRepositoryId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6, $stack9, $stack12;
        java.lang.Object $stack4, $stack7, $stack10, $stack13;
        java.lang.String $stack5, $stack8, $stack11, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("reserved-repository-id.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'repositories.repository.id\' must not be \'local\'");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'pluginRepositories.pluginRepository.id\' must not be \'local\'");

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(2);

        $stack11 = (java.lang.String) $stack10;

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack11, "\'distributionManagement.repository.id\' must not be \'local\'");

        $stack12 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(3);

        $stack14 = (java.lang.String) $stack13;

        $r5 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r5.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack14, "\'distributionManagement.snapshotRepository.id\' must not be \'local\'");

        return;
    }

    public void testMissingPluginDependencyGroupId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-plugin-dependency-groupId.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>(":a:");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingPluginDependencyArtifactId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-plugin-dependency-artifactId.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testMissingPluginDependencyVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-plugin-dependency-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:a");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testBadPluginDependencyVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        boolean $stack6;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-plugin-dependency-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean contains(java.lang.CharSequence)>("test:b");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testBadVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'version\' must not contain any of these characters");

        return;
    }

    public void testBadSnapshotVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-snapshot-version.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'version\' uses an unsupported snapshot version format");

        return;
    }

    public void testBadRepositoryId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6, $stack9, $stack12;
        java.lang.Object $stack4, $stack7, $stack10, $stack13;
        java.lang.String $stack5, $stack8, $stack11, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-repository-id.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 4, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'repositories.repository.id\' must not contain any of these characters");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'pluginRepositories.pluginRepository.id\' must not contain any of these characters");

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(2);

        $stack11 = (java.lang.String) $stack10;

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack11, "\'distributionManagement.repository.id\' must not contain any of these characters");

        $stack12 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(3);

        $stack14 = (java.lang.String) $stack13;

        $r5 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r5.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack14, "\'distributionManagement.snapshotRepository.id\' must not contain any of these characters");

        return;
    }

    public void testBadDependencyExclusionId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result, result_30;
        java.util.List $stack4, $stack7;
        java.lang.Object $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateEffective(java.lang.String,int)>("bad-dependency-exclusion-id.xml", 20);

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 2);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        $stack6 = (java.lang.String) $stack5;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack6, "\'dependencies.dependency.exclusions.exclusion.groupId\' for gid:aid:jar");

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        $stack9 = (java.lang.String) $stack8;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack9, "\'dependencies.dependency.exclusions.exclusion.artifactId\' for gid:aid:jar");

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result_30 = specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("bad-dependency-exclusion-id.xml");

        $r5 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r5.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result_30, 0, 0, 0);

        return;
    }

    public void testMissingDependencyExclusionId() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6;
        java.lang.Object $stack4, $stack7;
        java.lang.String $stack5, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-dependency-exclusion-id.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 2);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencies.dependency.exclusions.exclusion.groupId\' for gid:aid:jar is missing");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'dependencies.dependency.exclusions.exclusion.artifactId\' for gid:aid:jar is missing");

        return;
    }

    public void testBadImportScopeType() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("bad-import-scope-type.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencyManagement.dependencies.dependency.type\' for test:a:jar must be \'pom\'");

        return;
    }

    public void testBadImportScopeClassifier() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("bad-import-scope-classifier.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencyManagement.dependencies.dependency.classifier\' for test:a:pom:cls must be empty");

        return;
    }

    public void testSystemPathRefersToProjectBasedir() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6, $stack9, $stack12;
        java.lang.Object $stack4, $stack7, $stack10, $stack13;
        java.lang.String $stack5, $stack8, $stack11, $stack14;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("basedir-system-path.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 4);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencies.dependency.scope\' for test:a:jar declares usage of deprecated \'system\' scope");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'dependencies.dependency.systemPath\' for test:a:jar should not point at files within the project directory");

        $stack9 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(2);

        $stack11 = (java.lang.String) $stack10;

        $r4 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r4.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack11, "\'dependencies.dependency.scope\' for test:b:jar declares usage of deprecated \'system\' scope");

        $stack12 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(3);

        $stack14 = (java.lang.String) $stack13;

        $r5 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r5.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack14, "\'dependencies.dependency.systemPath\' for test:b:jar should not point at files within the project directory");

        return;
    }

    public void testInvalidVersionInPluginManagement() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/missing-plugin-version-pluginManagement.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 1, 0, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.pluginManagement.plugins.plugin.(groupId:artifactId)\' version of a plugin must be defined. ", $stack5);

        return;
    }

    public void testInvalidGroupIdInPluginManagement() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/missing-groupId-pluginManagement.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 1, 0, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.pluginManagement.plugins.plugin.(groupId:artifactId)\' groupId of a plugin must be defined. ", $stack5);

        return;
    }

    public void testInvalidArtifactIdInPluginManagement() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/missing-artifactId-pluginManagement.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 1, 0, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.pluginManagement.plugins.plugin.(groupId:artifactId)\' artifactId of a plugin must be defined. ", $stack5);

        return;
    }

    public void testInvalidGroupAndArtifactIdInPluginManagement() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4, $stack7;
        java.lang.Object $stack5, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/missing-ga-pluginManagement.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 2, 0, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.pluginManagement.plugins.plugin.(groupId:artifactId)\' groupId of a plugin must be defined. ", $stack5);

        $stack7 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'build.pluginManagement.plugins.plugin.(groupId:artifactId)\' artifactId of a plugin must be defined. ", $stack8);

        return;
    }

    public void testMissingReportPluginVersion() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validate(java.lang.String)>("missing-report-version-pom.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }

    public void testDeprecatedDependencyMetaversionsLatestAndRelease() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack3, $stack6;
        java.lang.Object $stack4, $stack7;
        java.lang.String $stack5, $stack8;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1, $r2, $r3;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("deprecated-dependency-metaversions-latest-and-release.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 2);

        $stack3 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object get(int)>(0);

        $stack5 = (java.lang.String) $stack4;

        $r2 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r2.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack5, "\'dependencies.dependency.version\' for test:a:jar is either LATEST or RELEASE (both of them are being deprecated)");

        $stack6 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(1);

        $stack8 = (java.lang.String) $stack7;

        $r3 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r3.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertContains(java.lang.String,java.lang.String)>($stack8, "\'dependencies.dependency.version\' for test:b:jar is either LATEST or RELEASE (both of them are being deprecated)");

        return;
    }

    public void testSelfReferencingDependencyInRawModel() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/self-referencing.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 1, 0, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getFatals()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'dependencies.dependency[com.example.group:testinvalidpom:0.0.1-SNAPSHOT]\' for com.example.group:testinvalidpom:0.0.1-SNAPSHOT is referencing itself.", $stack5);

        return;
    }

    public void testSelfReferencingDependencyWithClassifierInRawModel() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/self-referencing-classifier.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }

    public void testCiFriendlySha1() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/ok-ci-friendly-sha1.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }

    public void testCiFriendlyRevision() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/ok-ci-friendly-revision.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }

    public void testCiFriendlyChangeList() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/ok-ci-friendly-changelist.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }

    public void testCiFriendlyAllExpressions() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/ok-ci-friendly-all-expressions.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }

    public void testCiFriendlyBad() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/bad-ci-friendly.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'version\' contains an expression but should be a constant.", $stack5);

        return;
    }

    public void testCiFriendlyBadSha1Plus() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/bad-ci-friendly-sha1plus.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'version\' contains an expression but should be a constant.", $stack5);

        return;
    }

    public void testCiFriendlyBadSha1Plus2() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/bad-ci-friendly-sha1plus2.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'version\' contains an expression but should be a constant.", $stack5);

        return;
    }

    public void testParentVersionLATEST() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/bad-parent-version-latest.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'parent.version\' is either LATEST or RELEASE (both of them are being deprecated)", $stack5);

        return;
    }

    public void testParentVersionRELEASE() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/bad-parent-version-release.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 1);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getWarnings()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'parent.version\' is either LATEST or RELEASE (both of them are being deprecated)", $stack5);

        return;
    }

    public void repositoryWithExpression() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        java.util.List $stack4;
        java.lang.Object $stack5;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/repository-with-expression.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 1, 0);

        $stack4 = virtualinvoke result.<org.apache.maven.model.building.SimpleProblemCollector: java.util.List getErrors()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\'repositories.repository.[repo].url\' contains an expression but should be a constant.", $stack5);

        return;
    }

    public void repositoryWithBasedirExpression() throws java.lang.Exception
    {
        DefaultModelValidatorTest this;
        org.apache.maven.model.building.SimpleProblemCollector result;
        org.apache.maven.model.validation.DefaultModelValidatorTest $r0, $r1;

        this := @this: DefaultModelValidatorTest;

        $r0 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        result = specialinvoke $r0.<org.apache.maven.model.validation.DefaultModelValidatorTest: org.apache.maven.model.building.SimpleProblemCollector validateRaw(java.lang.String)>("raw-model/repository-with-basedir-expression.xml");

        $r1 = (org.apache.maven.model.validation.DefaultModelValidatorTest) this;

        specialinvoke $r1.<org.apache.maven.model.validation.DefaultModelValidatorTest: void assertViolations(org.apache.maven.model.building.SimpleProblemCollector,int,int,int)>(result, 0, 0, 0);

        return;
    }
}
