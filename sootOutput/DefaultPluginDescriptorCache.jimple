public class DefaultPluginDescriptorCache extends java.lang.Object implements org.apache.maven.plugin.PluginDescriptorCache
{
    private java.util.Map descriptors;

    public void <init>()
    {
        DefaultPluginDescriptorCache this;
        java.util.HashMap $u0;
        org.apache.maven.plugin.DefaultPluginDescriptorCache $r0;

        this := @this: DefaultPluginDescriptorCache;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>(int)>(128);

        $r0 = (org.apache.maven.plugin.DefaultPluginDescriptorCache) this;

        $r0.<org.apache.maven.plugin.DefaultPluginDescriptorCache: java.util.Map descriptors> = $u0;

        return;
    }

    public void flush()
    {
        DefaultPluginDescriptorCache this;
        java.util.Map $stack1;
        org.apache.maven.plugin.DefaultPluginDescriptorCache $r0;

        this := @this: DefaultPluginDescriptorCache;

        $r0 = (org.apache.maven.plugin.DefaultPluginDescriptorCache) this;

        $stack1 = $r0.<org.apache.maven.plugin.DefaultPluginDescriptorCache: java.util.Map descriptors>;

        interfaceinvoke $stack1.<java.util.Map: void clear()>();

        return;
    }

    public org.apache.maven.plugin.PluginDescriptorCache$Key createKey(org.apache.maven.model.Plugin, java.util.List, org.eclipse.aether.RepositorySystemSession)
    {
        org.apache.maven.model.Plugin plugin;
        java.util.List repositories;
        org.eclipse.aether.RepositorySystemSession session;
        DefaultPluginDescriptorCache this;
        org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey $u0;
        org.apache.maven.plugin.PluginDescriptorCache$Key $r0;

        this := @this: DefaultPluginDescriptorCache;

        plugin := @parameter0: org.apache.maven.model.Plugin;

        repositories := @parameter1: java.util.List;

        session := @parameter2: org.eclipse.aether.RepositorySystemSession;

        $u0 = new org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey;

        specialinvoke $u0.<org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey: void <init>(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, repositories, session);

        $r0 = (org.apache.maven.plugin.PluginDescriptorCache$Key) $u0;

        return $r0;
    }

    public org.apache.maven.plugin.descriptor.PluginDescriptor get(org.apache.maven.plugin.PluginDescriptorCache$Key)
    {
        DefaultPluginDescriptorCache this;
        org.apache.maven.plugin.PluginDescriptorCache$Key cacheKey;
        java.util.Map $stack2;
        java.lang.Object $stack3;
        org.apache.maven.plugin.descriptor.PluginDescriptor $stack4, $stack5;
        org.apache.maven.plugin.DefaultPluginDescriptorCache $r0;

        this := @this: DefaultPluginDescriptorCache;

        cacheKey := @parameter0: org.apache.maven.plugin.PluginDescriptorCache$Key;

        $r0 = (org.apache.maven.plugin.DefaultPluginDescriptorCache) this;

        $stack2 = $r0.<org.apache.maven.plugin.DefaultPluginDescriptorCache: java.util.Map descriptors>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(cacheKey);

        $stack4 = (org.apache.maven.plugin.descriptor.PluginDescriptor) $stack3;

        $stack5 = staticinvoke <org.apache.maven.plugin.DefaultPluginDescriptorCache: org.apache.maven.plugin.descriptor.PluginDescriptor clone(org.apache.maven.plugin.descriptor.PluginDescriptor)>($stack4);

        return $stack5;
    }

    public void put(org.apache.maven.plugin.PluginDescriptorCache$Key, org.apache.maven.plugin.descriptor.PluginDescriptor)
    {
        DefaultPluginDescriptorCache this;
        org.apache.maven.plugin.PluginDescriptorCache$Key cacheKey;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor, $stack4;
        java.util.Map $stack3;
        org.apache.maven.plugin.DefaultPluginDescriptorCache $r0;

        this := @this: DefaultPluginDescriptorCache;

        cacheKey := @parameter0: org.apache.maven.plugin.PluginDescriptorCache$Key;

        pluginDescriptor := @parameter1: org.apache.maven.plugin.descriptor.PluginDescriptor;

        $r0 = (org.apache.maven.plugin.DefaultPluginDescriptorCache) this;

        $stack3 = $r0.<org.apache.maven.plugin.DefaultPluginDescriptorCache: java.util.Map descriptors>;

        $stack4 = staticinvoke <org.apache.maven.plugin.DefaultPluginDescriptorCache: org.apache.maven.plugin.descriptor.PluginDescriptor clone(org.apache.maven.plugin.descriptor.PluginDescriptor)>(pluginDescriptor);

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(cacheKey, $stack4);

        return;
    }

    protected static org.apache.maven.plugin.descriptor.PluginDescriptor clone(org.apache.maven.plugin.descriptor.PluginDescriptor)
    {
        org.apache.maven.plugin.descriptor.PluginDescriptor original, $stack2, clone;
        java.lang.String $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack15, $stack17;
        boolean $stack7, $stack16;
        org.apache.maven.artifact.Artifact $stack11, $stack12;
        java.util.List $stack13, $stack14, $stack18;

        original := @parameter0: org.apache.maven.plugin.descriptor.PluginDescriptor;

        clone = null;

        if original == null goto label1;

        $stack2 = new org.apache.maven.plugin.descriptor.PluginDescriptor;

        specialinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void <init>()>();

        clone = $stack2;

        $stack3 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getGroupId()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setGroupId(java.lang.String)>($stack3);

        $stack4 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getArtifactId()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setArtifactId(java.lang.String)>($stack4);

        $stack5 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getVersion()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setVersion(java.lang.String)>($stack5);

        $stack6 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getGoalPrefix()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setGoalPrefix(java.lang.String)>($stack6);

        $stack7 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: boolean isInheritedByDefault()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setInheritedByDefault(boolean)>($stack7);

        $stack8 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getName()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setName(java.lang.String)>($stack8);

        $stack9 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getDescription()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setDescription(java.lang.String)>($stack9);

        $stack10 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getRequiredMavenVersion()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setRequiredMavenVersion(java.lang.String)>($stack10);

        $stack11 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.artifact.Artifact getPluginArtifact()>();

        $stack12 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: org.apache.maven.artifact.Artifact copyArtifactSafe(org.apache.maven.artifact.Artifact)>($stack11);

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setPluginArtifact(org.apache.maven.artifact.Artifact)>($stack12);

        $stack13 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getMojos()>();

        $stack14 = staticinvoke <org.apache.maven.plugin.DefaultPluginDescriptorCache: java.util.List clone(java.util.List,org.apache.maven.plugin.descriptor.PluginDescriptor)>($stack13, $stack2);

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setComponents(java.util.List)>($stack14);

        $stack15 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setId(java.lang.String)>($stack15);

        $stack16 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: boolean isIsolatedRealm()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setIsolatedRealm(boolean)>($stack16);

        $stack17 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getSource()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setSource(java.lang.String)>($stack17);

        $stack18 = virtualinvoke original.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getDependencies()>();

        virtualinvoke $stack2.<org.apache.maven.plugin.descriptor.PluginDescriptor: void setDependencies(java.util.List)>($stack18);

     label1:
        return clone;
    }

    private static java.util.List clone(java.util.List, org.apache.maven.plugin.descriptor.PluginDescriptor)
    {
        java.util.List mojos;
        java.util.ArrayList $stack6, clones;
        int $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        java.lang.Object $stack11;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojo, clone;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;

        mojos := @parameter0: java.util.List;

        pluginDescriptor := @parameter1: org.apache.maven.plugin.descriptor.PluginDescriptor;

        clones = null;

        if mojos == null goto label2;

        $stack6 = new java.util.ArrayList;

        $stack7 = interfaceinvoke mojos.<java.util.List: int size()>();

        specialinvoke $stack6.<java.util.ArrayList: void <init>(int)>($stack7);

        clones = $stack6;

        l3 = interfaceinvoke mojos.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $stack11 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        mojo = (org.apache.maven.plugin.descriptor.MojoDescriptor) $stack11;

        clone = virtualinvoke mojo.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.MojoDescriptor clone()>();

        virtualinvoke clone.<org.apache.maven.plugin.descriptor.MojoDescriptor: void setPluginDescriptor(org.apache.maven.plugin.descriptor.PluginDescriptor)>(pluginDescriptor);

        interfaceinvoke $stack6.<java.util.List: boolean add(java.lang.Object)>(clone);

        goto label1;

     label2:
        return clones;
    }
}
