public class DefaultPluginManagementInjector$ManagementModelMerger extends org.apache.maven.model.merge.MavenModelMerger
{

    protected void <init>()
    {
        DefaultPluginManagementInjector$ManagementModelMerger this;

        this := @this: DefaultPluginManagementInjector$ManagementModelMerger;

        specialinvoke this.<org.apache.maven.model.merge.MavenModelMerger: void <init>()>();

        return;
    }

    public void mergeManagedBuildPlugins(org.apache.maven.model.Model)
    {
        org.apache.maven.model.Model model;
        org.apache.maven.model.Build build;
        org.apache.maven.model.PluginManagement pluginManagement;
        DefaultPluginManagementInjector$ManagementModelMerger this;
        org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger $r0;
        org.apache.maven.model.PluginContainer $r1, $r2;

        this := @this: DefaultPluginManagementInjector$ManagementModelMerger;

        model := @parameter0: org.apache.maven.model.Model;

        build = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if build == null goto label1;

        pluginManagement = virtualinvoke build.<org.apache.maven.model.Build: org.apache.maven.model.PluginManagement getPluginManagement()>();

        if pluginManagement == null goto label1;

        $r0 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        $r1 = (org.apache.maven.model.PluginContainer) build;

        $r2 = (org.apache.maven.model.PluginContainer) pluginManagement;

        specialinvoke $r0.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: void mergePluginContainerPlugins(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer)>($r1, $r2);

     label1:
        return;
    }

    private void mergePluginContainerPlugins(org.apache.maven.model.PluginContainer, org.apache.maven.model.PluginContainer)
    {
        org.apache.maven.model.PluginContainer source, target;
        java.util.List src, tgt;
        boolean $stack12, $stack19, $stack21;
        int $stack15, $stack16;
        java.util.Map context;
        java.lang.Object $stack22, $stack25, $stack27, key;
        DefaultPluginManagementInjector$ManagementModelMerger this;
        org.apache.maven.model.merge.ModelMerger$KeyComputer $stack23, $stack28;
        org.apache.maven.model.Plugin managedPlugin, element;
        java.util.Iterator l7;
        java.util.LinkedHashMap $u0;
        org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger $r0, $r1, $r2;

        this := @this: DefaultPluginManagementInjector$ManagementModelMerger;

        target := @parameter0: org.apache.maven.model.PluginContainer;

        source := @parameter1: org.apache.maven.model.PluginContainer;

        src = virtualinvoke source.<org.apache.maven.model.PluginContainer: java.util.List getPlugins()>();

        $stack12 = interfaceinvoke src.<java.util.List: boolean isEmpty()>();

        if $stack12 != 0 goto label5;

        tgt = virtualinvoke target.<org.apache.maven.model.PluginContainer: java.util.List getPlugins()>();

        $u0 = new java.util.LinkedHashMap;

        $stack15 = interfaceinvoke src.<java.util.List: int size()>();

        $stack16 = $stack15 * 2;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>(int)>($stack16);

        context = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        l7 = interfaceinvoke src.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack19 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label2;

        $stack27 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        element = (org.apache.maven.model.Plugin) $stack27;

        $r0 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        $stack28 = virtualinvoke $r0.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: org.apache.maven.model.merge.ModelMerger$KeyComputer getPluginKey()>();

        key = interfaceinvoke $stack28.<org.apache.maven.model.merge.ModelMerger$KeyComputer: java.lang.Object apply(java.lang.Object)>(element);

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, element);

        goto label1;

     label2:
        l7 = interfaceinvoke tgt.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack21 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label5;

        $stack22 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        element = (org.apache.maven.model.Plugin) $stack22;

        $r1 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        $stack23 = virtualinvoke $r1.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: org.apache.maven.model.merge.ModelMerger$KeyComputer getPluginKey()>();

        key = interfaceinvoke $stack23.<org.apache.maven.model.merge.ModelMerger$KeyComputer: java.lang.Object apply(java.lang.Object)>(element);

        $stack25 = interfaceinvoke $u0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        managedPlugin = (org.apache.maven.model.Plugin) $stack25;

        if managedPlugin == null goto label4;

        $r2 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        virtualinvoke $r2.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: void mergePlugin(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean,java.util.Map)>(element, managedPlugin, 0, context);

     label4:
        goto label3;

     label5:
        return;
    }

    protected void mergePlugin_Executions(org.apache.maven.model.Plugin, org.apache.maven.model.Plugin, boolean, java.util.Map)
    {
        org.apache.maven.model.Plugin source, target;
        java.util.List src, tgt;
        boolean $stack13, $stack21, $stack23, sourceDominant;
        int $stack16, $stack17, $stack18, $stack19;
        java.util.Collection $stack25;
        java.lang.Object $stack26, $stack29, $stack35, key;
        DefaultPluginManagementInjector$ManagementModelMerger this;
        org.apache.maven.model.merge.ModelMerger$KeyComputer $stack27, $stack36;
        org.apache.maven.model.PluginExecution existing, $stack38, element;
        java.util.Map context;
        java.util.Iterator l8;
        java.util.LinkedHashMap $u0;
        java.util.ArrayList $u1;
        org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger $r0, $r1, $r2;

        this := @this: DefaultPluginManagementInjector$ManagementModelMerger;

        target := @parameter0: org.apache.maven.model.Plugin;

        source := @parameter1: org.apache.maven.model.Plugin;

        sourceDominant := @parameter2: boolean;

        context := @parameter3: java.util.Map;

        src = virtualinvoke source.<org.apache.maven.model.Plugin: java.util.List getExecutions()>();

        $stack13 = interfaceinvoke src.<java.util.List: boolean isEmpty()>();

        if $stack13 != 0 goto label6;

        tgt = virtualinvoke target.<org.apache.maven.model.Plugin: java.util.List getExecutions()>();

        $u0 = new java.util.LinkedHashMap;

        $stack16 = interfaceinvoke src.<java.util.List: int size()>();

        $stack17 = interfaceinvoke tgt.<java.util.List: int size()>();

        $stack18 = $stack16 + $stack17;

        $stack19 = $stack18 * 2;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>(int)>($stack19);

        l8 = interfaceinvoke src.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack21 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label2;

        $stack35 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        element = (org.apache.maven.model.PluginExecution) $stack35;

        $r0 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        $stack36 = virtualinvoke $r0.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: org.apache.maven.model.merge.ModelMerger$KeyComputer getPluginExecutionKey()>();

        key = interfaceinvoke $stack36.<org.apache.maven.model.merge.ModelMerger$KeyComputer: java.lang.Object apply(java.lang.Object)>(element);

        $stack38 = virtualinvoke element.<org.apache.maven.model.PluginExecution: org.apache.maven.model.PluginExecution clone()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack38);

        goto label1;

     label2:
        l8 = interfaceinvoke tgt.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack23 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label5;

        $stack26 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        element = (org.apache.maven.model.PluginExecution) $stack26;

        $r1 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        $stack27 = virtualinvoke $r1.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: org.apache.maven.model.merge.ModelMerger$KeyComputer getPluginExecutionKey()>();

        key = interfaceinvoke $stack27.<org.apache.maven.model.merge.ModelMerger$KeyComputer: java.lang.Object apply(java.lang.Object)>(element);

        $stack29 = interfaceinvoke $u0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        existing = (org.apache.maven.model.PluginExecution) $stack29;

        if existing == null goto label4;

        $r2 = (org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger) this;

        virtualinvoke $r2.<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: void mergePluginExecution(org.apache.maven.model.PluginExecution,org.apache.maven.model.PluginExecution,boolean,java.util.Map)>(element, existing, sourceDominant, context);

     label4:
        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, element);

        goto label3;

     label5:
        $u1 = new java.util.ArrayList;

        $stack25 = interfaceinvoke $u0.<java.util.Map: java.util.Collection values()>();

        specialinvoke $u1.<java.util.ArrayList: void <init>(java.util.Collection)>($stack25);

        virtualinvoke target.<org.apache.maven.model.Plugin: void setExecutions(java.util.List)>($u1);

     label6:
        return;
    }
}
