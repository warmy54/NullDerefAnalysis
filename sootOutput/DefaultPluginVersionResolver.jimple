public class DefaultPluginVersionResolver extends java.lang.Object implements org.apache.maven.plugin.version.PluginVersionResolver
{
    private static final java.lang.String REPOSITORY_CONTEXT;
    private org.codehaus.plexus.logging.Logger logger;
    private org.eclipse.aether.RepositorySystem repositorySystem;
    private org.apache.maven.artifact.repository.metadata.io.MetadataReader metadataReader;
    private org.apache.maven.plugin.MavenPluginManager pluginManager;

    public void <init>()
    {
        DefaultPluginVersionResolver this;

        this := @this: DefaultPluginVersionResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.plugin.version.PluginVersionResult resolve(org.apache.maven.plugin.version.PluginVersionRequest) throws org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        DefaultPluginVersionResolver this;
        org.apache.maven.plugin.version.PluginVersionRequest request;
        org.codehaus.plexus.logging.Logger $stack4, $stack7, $stack23, $stack26;
        boolean $stack5, $stack24;
        java.lang.StringBuilder $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack27, $stack29, $stack30, $stack32, $stack33, $stack35, $stack36, $stack38, $u0, $u1;
        java.lang.String $stack9, $stack12, $stack15, $stack20, $stack28, $stack31, $stack34, $stack39;
        org.apache.maven.model.Model $stack18;
        org.eclipse.aether.repository.ArtifactRepository $stack37;
        org.apache.maven.plugin.version.PluginVersionResult result;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DefaultPluginVersionResolver;

        request := @parameter0: org.apache.maven.plugin.version.PluginVersionRequest;

        $r0 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        result = specialinvoke $r0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolveFromProject(org.apache.maven.plugin.version.PluginVersionRequest)>(request);

        if result != null goto label1;

        $r1 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        result = specialinvoke $r1.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolveFromRepository(org.apache.maven.plugin.version.PluginVersionRequest)>(request);

        $r2 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack23 = $r2.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.codehaus.plexus.logging.Logger logger>;

        $stack24 = interfaceinvoke $stack23.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack24 == 0 goto label2;

        $r3 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack26 = $r3.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.codehaus.plexus.logging.Logger logger>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack27 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolved plugin version for ");

        $stack28 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getGroupId()>();

        $stack29 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack28);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack31 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getArtifactId()>();

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $stack34 = interfaceinvoke result.<org.apache.maven.plugin.version.PluginVersionResult: java.lang.String getVersion()>();

        $stack35 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from repository ");

        $stack37 = interfaceinvoke result.<org.apache.maven.plugin.version.PluginVersionResult: org.eclipse.aether.repository.ArtifactRepository getRepository()>();

        $stack38 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack37);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack26.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack39);

        goto label2;

     label1:
        $r4 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack4 = $r4.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.codehaus.plexus.logging.Logger logger>;

        $stack5 = interfaceinvoke $stack4.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack5 == 0 goto label2;

        $r5 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack7 = $r5.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.codehaus.plexus.logging.Logger logger>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolved plugin version for ");

        $stack9 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getGroupId()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack12 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getArtifactId()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $stack15 = interfaceinvoke result.<org.apache.maven.plugin.version.PluginVersionResult: java.lang.String getVersion()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from POM ");

        $stack18 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.apache.maven.model.Model getPom()>();

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack7.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack20);

     label2:
        return result;
    }

    private org.apache.maven.plugin.version.PluginVersionResult resolveFromRepository(org.apache.maven.plugin.version.PluginVersionRequest) throws org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.plugin.version.PluginVersionRequest request;
        org.eclipse.aether.RequestTrace trace;
        java.lang.String $stack14, $stack15;
        org.eclipse.aether.metadata.Metadata$Nature $stack16;
        org.eclipse.aether.resolution.MetadataRequest $stack19, $stack31, $stack46, $u3, $u4;
        java.util.List $stack21, results#3;
        boolean $stack23, $stack29;
        DefaultPluginVersionResolver this;
        org.eclipse.aether.RepositorySystem $stack24;
        org.eclipse.aether.RepositorySystemSession $stack25, $stack33, $stack36;
        java.util.Iterator l8, results;
        java.lang.Object $stack30, $stack44, repository#5;
        org.eclipse.aether.resolution.MetadataResult res;
        org.eclipse.aether.metadata.Metadata $stack34, $r0, $r1;
        org.eclipse.aether.repository.RemoteRepository repository;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResult $u0;
        org.eclipse.aether.metadata.DefaultMetadata $u1;
        java.util.ArrayList $u2;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions $u5;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver $r2, $r3, $r5;
        org.eclipse.aether.repository.ArtifactRepository $r4;
        org.apache.maven.plugin.version.PluginVersionResult $r6;

        this := @this: DefaultPluginVersionResolver;

        request := @parameter0: org.apache.maven.plugin.version.PluginVersionRequest;

        trace = staticinvoke <org.eclipse.aether.RequestTrace: org.eclipse.aether.RequestTrace newChild(org.eclipse.aether.RequestTrace,java.lang.Object)>(null, request);

        $u0 = new org.apache.maven.plugin.version.internal.DefaultPluginVersionResult;

        specialinvoke $u0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResult: void <init>()>();

        $u1 = new org.eclipse.aether.metadata.DefaultMetadata;

        $stack14 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getGroupId()>();

        $stack15 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getArtifactId()>();

        $stack16 = <org.eclipse.aether.metadata.Metadata$Nature: org.eclipse.aether.metadata.Metadata$Nature RELEASE_OR_SNAPSHOT>;

        specialinvoke $u1.<org.eclipse.aether.metadata.DefaultMetadata: void <init>(java.lang.String,java.lang.String,java.lang.String,org.eclipse.aether.metadata.Metadata$Nature)>($stack14, $stack15, "maven-metadata.xml", $stack16);

        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        $u3 = new org.eclipse.aether.resolution.MetadataRequest;

        $r0 = (org.eclipse.aether.metadata.Metadata) $u1;

        specialinvoke $u3.<org.eclipse.aether.resolution.MetadataRequest: void <init>(org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.RemoteRepository,java.lang.String)>($r0, null, "plugin");

        $stack19 = virtualinvoke $u3.<org.eclipse.aether.resolution.MetadataRequest: org.eclipse.aether.resolution.MetadataRequest setTrace(org.eclipse.aether.RequestTrace)>(trace);

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>($stack19);

        $stack21 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.util.List getRepositories()>();

        results = interfaceinvoke $stack21.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack23 = interfaceinvoke results.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label2;

        $stack44 = interfaceinvoke results.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.eclipse.aether.repository.RemoteRepository) $stack44;

        $u4 = new org.eclipse.aether.resolution.MetadataRequest;

        $r1 = (org.eclipse.aether.metadata.Metadata) $u1;

        specialinvoke $u4.<org.eclipse.aether.resolution.MetadataRequest: void <init>(org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.RemoteRepository,java.lang.String)>($r1, repository, "plugin");

        $stack46 = virtualinvoke $u4.<org.eclipse.aether.resolution.MetadataRequest: org.eclipse.aether.resolution.MetadataRequest setTrace(org.eclipse.aether.RequestTrace)>(trace);

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>($stack46);

        goto label1;

     label2:
        $r2 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack24 = $r2.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.eclipse.aether.RepositorySystem repositorySystem>;

        $stack25 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        results#3 = interfaceinvoke $stack24.<org.eclipse.aether.RepositorySystem: java.util.List resolveMetadata(org.eclipse.aether.RepositorySystemSession,java.util.Collection)>($stack25, $u2);

        $u5 = new org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions;

        specialinvoke $u5.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: void <init>()>();

        l8 = interfaceinvoke results#3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack29 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack29 == 0 goto label5;

        $stack30 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        res = (org.eclipse.aether.resolution.MetadataResult) $stack30;

        $stack31 = virtualinvoke res.<org.eclipse.aether.resolution.MetadataResult: org.eclipse.aether.resolution.MetadataRequest getRequest()>();

        repository#5 = virtualinvoke $stack31.<org.eclipse.aether.resolution.MetadataRequest: org.eclipse.aether.repository.RemoteRepository getRepository()>();

        if repository#5 != null goto label4;

        $stack36 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        repository#5 = interfaceinvoke $stack36.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.LocalRepository getLocalRepository()>();

     label4:
        $stack33 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack34 = virtualinvoke res.<org.eclipse.aether.resolution.MetadataResult: org.eclipse.aether.metadata.Metadata getMetadata()>();

        $r3 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $r4 = (org.eclipse.aether.repository.ArtifactRepository) repository#5;

        specialinvoke $r3.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void mergeMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository)>($stack33, trace, $u5, $stack34, $r4);

        goto label3;

     label5:
        $r5 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        specialinvoke $r5.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void selectVersion(org.apache.maven.plugin.version.internal.DefaultPluginVersionResult,org.apache.maven.plugin.version.PluginVersionRequest,org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions)>($u0, request, $u5);

        $r6 = (org.apache.maven.plugin.version.PluginVersionResult) $u0;

        return $r6;
    }

    private void selectVersion(org.apache.maven.plugin.version.internal.DefaultPluginVersionResult, org.apache.maven.plugin.version.PluginVersionRequest, org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions) throws org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions versions;
        java.lang.String $stack12, $stack14, $stack17, $stack18, version, ver, v#13;
        boolean $stack13, $stack15, $stack30, $stack32, $stack35, $stack38, $stack44, $stack51, $stack55;
        org.apache.maven.plugin.version.PluginVersionRequest request;
        org.eclipse.aether.RepositorySystemSession $stack19;
        org.eclipse.aether.repository.LocalRepository $stack20;
        java.util.List $stack21;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResult result;
        java.util.Comparator $stack24, $stack26;
        java.util.Map $stack27, $stack40, $stack46, $stack57;
        java.util.Set $stack28;
        java.lang.Object $stack36, $stack41, $stack42, $stack47, $stack49;
        DefaultPluginVersionResolver this;
        java.lang.Throwable $stack60, $r4;
        org.eclipse.aether.repository.ArtifactRepository repo;
        java.util.Iterator l9;
        org.eclipse.aether.version.Version v, ver#12;
        org.eclipse.aether.util.version.GenericVersionScheme $u0;
        java.util.TreeSet $u1, $u2;
        org.apache.maven.plugin.version.PluginVersionResolutionException $u3;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver $r0, $r2, $r3;
        org.eclipse.aether.version.VersionScheme $r1;

        this := @this: DefaultPluginVersionResolver;

        result := @parameter0: org.apache.maven.plugin.version.internal.DefaultPluginVersionResult;

        request := @parameter1: org.apache.maven.plugin.version.PluginVersionRequest;

        versions := @parameter2: org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions;

        version = null;

        repo = null;

        $stack12 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String releaseVersion>;

        $stack13 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack12);

        if $stack13 == 0 goto label01;

        version = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String releaseVersion>;

        repo = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: org.eclipse.aether.repository.ArtifactRepository releaseRepository>;

        goto label02;

     label01:
        $stack14 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String latestVersion>;

        $stack15 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack14);

        if $stack15 == 0 goto label02;

        version = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String latestVersion>;

        repo = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: org.eclipse.aether.repository.ArtifactRepository latestRepository>;

     label02:
        if version == null goto label03;

        $r0 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack55 = specialinvoke $r0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: boolean isCompatible(org.apache.maven.plugin.version.PluginVersionRequest,java.lang.String)>(request, version);

        if $stack55 != 0 goto label03;

        $stack57 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.util.Map versions>;

        interfaceinvoke $stack57.<java.util.Map: java.lang.Object remove(java.lang.Object)>(version);

        version = null;

     label03:
        if version != null goto label16;

        $u0 = new org.eclipse.aether.util.version.GenericVersionScheme;

        specialinvoke $u0.<org.eclipse.aether.util.version.GenericVersionScheme: void <init>()>();

        $u1 = new java.util.TreeSet;

        $stack24 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder()>();

        specialinvoke $u1.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack24);

        $u2 = new java.util.TreeSet;

        $stack26 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder()>();

        specialinvoke $u2.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26);

        $stack27 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.util.Map versions>;

        $stack28 = interfaceinvoke $stack27.<java.util.Map: java.util.Set keySet()>();

        l9 = interfaceinvoke $stack28.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $stack30 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack30 == 0 goto label10;

        $stack49 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        ver = (java.lang.String) $stack49;

     label05:
        $r1 = (org.eclipse.aether.version.VersionScheme) $u0;

        v = interfaceinvoke $r1.<org.eclipse.aether.version.VersionScheme: org.eclipse.aether.version.Version parseVersion(java.lang.String)>(ver);

        $stack51 = virtualinvoke ver.<java.lang.String: boolean endsWith(java.lang.String)>("-SNAPSHOT");

        if $stack51 == 0 goto label06;

        virtualinvoke $u2.<java.util.TreeSet: boolean add(java.lang.Object)>(v);

        goto label07;

     label06:
        virtualinvoke $u1.<java.util.TreeSet: boolean add(java.lang.Object)>(v);

     label07:
        goto label09;

     label08:
        $stack60 := @caughtexception;

     label09:
        goto label04;

     label10:
        l9 = virtualinvoke $u1.<java.util.TreeSet: java.util.Iterator iterator()>();

     label11:
        $stack32 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack32 == 0 goto label13;

        $stack42 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        ver#12 = (org.eclipse.aether.version.Version) $stack42;

        v#13 = interfaceinvoke ver#12.<org.eclipse.aether.version.Version: java.lang.String toString()>();

        $r2 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack44 = specialinvoke $r2.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: boolean isCompatible(org.apache.maven.plugin.version.PluginVersionRequest,java.lang.String)>(request, v#13);

        if $stack44 == 0 goto label12;

        version = v#13;

        $stack46 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.util.Map versions>;

        $stack47 = interfaceinvoke $stack46.<java.util.Map: java.lang.Object get(java.lang.Object)>(v#13);

        repo = (org.eclipse.aether.repository.ArtifactRepository) $stack47;

        goto label13;

     label12:
        goto label11;

     label13:
        if version != null goto label16;

        l9 = virtualinvoke $u2.<java.util.TreeSet: java.util.Iterator iterator()>();

     label14:
        $stack35 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label16;

        $stack36 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        ver#12 = (org.eclipse.aether.version.Version) $stack36;

        v#13 = interfaceinvoke ver#12.<org.eclipse.aether.version.Version: java.lang.String toString()>();

        $r3 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack38 = specialinvoke $r3.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: boolean isCompatible(org.apache.maven.plugin.version.PluginVersionRequest,java.lang.String)>(request, v#13);

        if $stack38 == 0 goto label15;

        version = v#13;

        $stack40 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.util.Map versions>;

        $stack41 = interfaceinvoke $stack40.<java.util.Map: java.lang.Object get(java.lang.Object)>(v#13);

        repo = (org.eclipse.aether.repository.ArtifactRepository) $stack41;

        goto label16;

     label15:
        goto label14;

     label16:
        if version == null goto label17;

        virtualinvoke result.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResult: void setVersion(java.lang.String)>(version);

        virtualinvoke result.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResult: void setRepository(org.eclipse.aether.repository.ArtifactRepository)>(repo);

        goto label18;

     label17:
        $u3 = new org.apache.maven.plugin.version.PluginVersionResolutionException;

        $stack17 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getGroupId()>();

        $stack18 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getArtifactId()>();

        $stack19 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack20 = interfaceinvoke $stack19.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.LocalRepository getLocalRepository()>();

        $stack21 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.util.List getRepositories()>();

        specialinvoke $u3.<org.apache.maven.plugin.version.PluginVersionResolutionException: void <init>(java.lang.String,java.lang.String,org.eclipse.aether.repository.LocalRepository,java.util.List,java.lang.String)>($stack17, $stack18, $stack20, $stack21, "Plugin not found in any plugin repository");

        $r4 = (java.lang.Throwable) $u3;

        throw $r4;

     label18:
        return;

        catch org.eclipse.aether.version.InvalidVersionSpecificationException from label05 to label07 with label08;
    }

    private boolean isCompatible(org.apache.maven.plugin.version.PluginVersionRequest, java.lang.String)
    {
        org.apache.maven.plugin.version.PluginVersionRequest request;
        java.lang.String $stack7, $stack8, version, $stack20, $stack22, $stack29;
        DefaultPluginVersionResolver this;
        org.apache.maven.plugin.MavenPluginManager $stack9, $stack13;
        java.util.List $stack10;
        org.eclipse.aether.RepositorySystemSession $stack11;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.lang.Exception $stack14, $stack23;
        org.codehaus.plexus.logging.Logger $stack16, $stack26;
        java.lang.StringBuilder $stack17, $stack18, $stack19, $stack21, $stack27, $stack28, $u1, $u2;
        java.lang.Throwable $stack24;
        org.apache.maven.model.Plugin $u0;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver $r0, $r1, $r2, $r3;

        this := @this: DefaultPluginVersionResolver;

        request := @parameter0: org.apache.maven.plugin.version.PluginVersionRequest;

        version := @parameter1: java.lang.String;

        $u0 = new org.apache.maven.model.Plugin;

        specialinvoke $u0.<org.apache.maven.model.Plugin: void <init>()>();

        $stack7 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getGroupId()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setGroupId(java.lang.String)>($stack7);

        $stack8 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getArtifactId()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setArtifactId(java.lang.String)>($stack8);

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>(version);

     label1:
        $r0 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack9 = $r0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.MavenPluginManager pluginManager>;

        $stack10 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.util.List getRepositories()>();

        $stack11 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        pluginDescriptor = interfaceinvoke $stack9.<org.apache.maven.plugin.MavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>($u0, $stack10, $stack11);

     label2:
        goto label5;

     label3:
        $stack24 := @caughtexception;

        $r1 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack26 = $r1.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.codehaus.plexus.logging.Logger logger>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack27 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring unresolvable plugin version ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack26.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String,java.lang.Throwable)>($stack29, $stack24);

        return 0;

     label4:
        $stack23 := @caughtexception;

        return 1;

     label5:
        $r2 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack13 = $r2.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.MavenPluginManager pluginManager>;

        interfaceinvoke $stack13.<org.apache.maven.plugin.MavenPluginManager: void checkRequiredMavenVersion(org.apache.maven.plugin.descriptor.PluginDescriptor)>(pluginDescriptor);

     label6:
        goto label8;

     label7:
        $stack14 := @caughtexception;

        $r3 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack16 = $r3.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.codehaus.plexus.logging.Logger logger>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring incompatible plugin version ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack20 = virtualinvoke $stack14.<java.lang.Exception: java.lang.String getMessage()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack16.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack22);

        return 0;

     label8:
        return 1;

        catch org.apache.maven.plugin.PluginResolutionException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    private void mergeMetadata(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.RequestTrace, org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions, org.eclipse.aether.metadata.Metadata, org.eclipse.aether.repository.ArtifactRepository)
    {
        org.eclipse.aether.metadata.Metadata metadata;
        java.io.File $stack8, $stack9, $stack14;
        boolean $stack10;
        java.lang.Boolean $stack11;
        DefaultPluginVersionResolver this;
        org.apache.maven.artifact.repository.metadata.io.MetadataReader $stack13;
        org.apache.maven.artifact.repository.metadata.Metadata repoMetadata;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions versions;
        org.eclipse.aether.repository.ArtifactRepository repository;
        java.io.IOException $stack16;
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.RequestTrace trace;
        java.util.Map options;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver $r0, $r1, $r2;

        this := @this: DefaultPluginVersionResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        trace := @parameter1: org.eclipse.aether.RequestTrace;

        versions := @parameter2: org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions;

        metadata := @parameter3: org.eclipse.aether.metadata.Metadata;

        repository := @parameter4: org.eclipse.aether.repository.ArtifactRepository;

        if metadata == null goto label4;

        $stack8 = interfaceinvoke metadata.<org.eclipse.aether.metadata.Metadata: java.io.File getFile()>();

        if $stack8 == null goto label4;

        $stack9 = interfaceinvoke metadata.<org.eclipse.aether.metadata.Metadata: java.io.File getFile()>();

        $stack10 = virtualinvoke $stack9.<java.io.File: boolean isFile()>();

        if $stack10 == 0 goto label4;

     label1:
        $stack11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        options = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("org.apache.maven.artifact.repository.metadata.io.isStrict", $stack11);

        $r0 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        $stack13 = $r0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.artifact.repository.metadata.io.MetadataReader metadataReader>;

        $stack14 = interfaceinvoke metadata.<org.eclipse.aether.metadata.Metadata: java.io.File getFile()>();

        repoMetadata = interfaceinvoke $stack13.<org.apache.maven.artifact.repository.metadata.io.MetadataReader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.File,java.util.Map)>($stack14, options);

        $r1 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        specialinvoke $r1.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void mergeMetadata(org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions,org.apache.maven.artifact.repository.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository)>(versions, repoMetadata, repository);

     label2:
        goto label4;

     label3:
        $stack16 := @caughtexception;

        $r2 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        specialinvoke $r2.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void invalidMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,java.lang.Exception)>(session, trace, metadata, repository, $stack16);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void invalidMetadata(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.RequestTrace, org.eclipse.aether.metadata.Metadata, org.eclipse.aether.repository.ArtifactRepository, java.lang.Exception)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.RepositoryListener listener;
        org.eclipse.aether.RepositoryEvent$Builder $stack9;
        org.eclipse.aether.RepositoryEvent$EventType $stack10;
        org.eclipse.aether.RequestTrace trace;
        org.eclipse.aether.metadata.Metadata metadata;
        java.lang.Exception exception;
        org.eclipse.aether.repository.ArtifactRepository repository;
        org.eclipse.aether.RepositoryEvent $stack15;
        DefaultPluginVersionResolver this;

        this := @this: DefaultPluginVersionResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        trace := @parameter1: org.eclipse.aether.RequestTrace;

        metadata := @parameter2: org.eclipse.aether.metadata.Metadata;

        repository := @parameter3: org.eclipse.aether.repository.ArtifactRepository;

        exception := @parameter4: java.lang.Exception;

        listener = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.RepositoryListener getRepositoryListener()>();

        if listener == null goto label1;

        $stack9 = new org.eclipse.aether.RepositoryEvent$Builder;

        $stack10 = <org.eclipse.aether.RepositoryEvent$EventType: org.eclipse.aether.RepositoryEvent$EventType METADATA_INVALID>;

        specialinvoke $stack9.<org.eclipse.aether.RepositoryEvent$Builder: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RepositoryEvent$EventType)>(session, $stack10);

        virtualinvoke $stack9.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setTrace(org.eclipse.aether.RequestTrace)>(trace);

        virtualinvoke $stack9.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setMetadata(org.eclipse.aether.metadata.Metadata)>(metadata);

        virtualinvoke $stack9.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setException(java.lang.Exception)>(exception);

        virtualinvoke $stack9.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setRepository(org.eclipse.aether.repository.ArtifactRepository)>(repository);

        $stack15 = virtualinvoke $stack9.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent build()>();

        interfaceinvoke listener.<org.eclipse.aether.RepositoryListener: void metadataInvalid(org.eclipse.aether.RepositoryEvent)>($stack15);

     label1:
        return;
    }

    private void mergeMetadata(org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions, org.apache.maven.artifact.repository.metadata.Metadata, org.eclipse.aether.repository.ArtifactRepository)
    {
        org.apache.maven.artifact.repository.metadata.Metadata source;
        org.apache.maven.artifact.repository.metadata.Versioning versioning;
        java.lang.String $stack9, timestamp, $stack11, version, $stack24, $stack27, $stack28, $stack31, $stack13;
        boolean $stack12, $stack20, $stack14, $stack17;
        java.util.Iterator l6;
        java.lang.Object $stack18;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions versions;
        java.util.Map $stack19, $stack22;
        org.eclipse.aether.repository.ArtifactRepository repository;
        int $stack25, $stack29;
        DefaultPluginVersionResolver this;
        java.util.List $stack15;

        this := @this: DefaultPluginVersionResolver;

        versions := @parameter0: org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions;

        source := @parameter1: org.apache.maven.artifact.repository.metadata.Metadata;

        repository := @parameter2: org.eclipse.aether.repository.ArtifactRepository;

        versioning = virtualinvoke source.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

        if versioning == null goto label5;

        $stack9 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.lang.String getLastUpdated()>();

        timestamp = staticinvoke <org.codehaus.plexus.util.StringUtils: java.lang.String clean(java.lang.String)>($stack9);

        $stack11 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.lang.String getRelease()>();

        $stack12 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack11);

        if $stack12 == 0 goto label1;

        $stack28 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String releaseTimestamp>;

        $stack29 = virtualinvoke timestamp.<java.lang.String: int compareTo(java.lang.String)>($stack28);

        if $stack29 <= 0 goto label1;

        $stack31 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.lang.String getRelease()>();

        versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String releaseVersion> = $stack31;

        versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String releaseTimestamp> = timestamp;

        versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: org.eclipse.aether.repository.ArtifactRepository releaseRepository> = repository;

     label1:
        $stack13 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.lang.String getLatest()>();

        $stack14 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack13);

        if $stack14 == 0 goto label2;

        $stack24 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String latestTimestamp>;

        $stack25 = virtualinvoke timestamp.<java.lang.String: int compareTo(java.lang.String)>($stack24);

        if $stack25 <= 0 goto label2;

        $stack27 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.lang.String getLatest()>();

        versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String latestVersion> = $stack27;

        versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.lang.String latestTimestamp> = timestamp;

        versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: org.eclipse.aether.repository.ArtifactRepository latestRepository> = repository;

     label2:
        $stack15 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.util.List getVersions()>();

        l6 = interfaceinvoke $stack15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack17 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label5;

        $stack18 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        version = (java.lang.String) $stack18;

        $stack19 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.util.Map versions>;

        $stack20 = interfaceinvoke $stack19.<java.util.Map: boolean containsKey(java.lang.Object)>(version);

        if $stack20 != 0 goto label4;

        $stack22 = versions.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions: java.util.Map versions>;

        interfaceinvoke $stack22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(version, repository);

     label4:
        goto label3;

     label5:
        return;
    }

    private org.apache.maven.plugin.version.PluginVersionResult resolveFromProject(org.apache.maven.plugin.version.PluginVersionRequest)
    {
        org.apache.maven.plugin.version.PluginVersionRequest request;
        org.apache.maven.model.Model $stack4, $stack5, $stack8;
        org.apache.maven.model.Build $stack6, build;
        DefaultPluginVersionResolver this;
        java.util.List $stack10, $stack14;
        org.apache.maven.model.PluginManagement $stack12, $stack13;
        org.apache.maven.plugin.version.PluginVersionResult result;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver $r0, $r1;

        this := @this: DefaultPluginVersionResolver;

        request := @parameter0: org.apache.maven.plugin.version.PluginVersionRequest;

        result = null;

        $stack4 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.apache.maven.model.Model getPom()>();

        if $stack4 == null goto label1;

        $stack5 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.apache.maven.model.Model getPom()>();

        $stack6 = virtualinvoke $stack5.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if $stack6 == null goto label1;

        $stack8 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: org.apache.maven.model.Model getPom()>();

        build = virtualinvoke $stack8.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $stack10 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getPlugins()>();

        $r0 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        result = specialinvoke $r0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolveFromProject(org.apache.maven.plugin.version.PluginVersionRequest,java.util.List)>(request, $stack10);

        if result != null goto label1;

        $stack12 = virtualinvoke build.<org.apache.maven.model.Build: org.apache.maven.model.PluginManagement getPluginManagement()>();

        if $stack12 == null goto label1;

        $stack13 = virtualinvoke build.<org.apache.maven.model.Build: org.apache.maven.model.PluginManagement getPluginManagement()>();

        $stack14 = virtualinvoke $stack13.<org.apache.maven.model.PluginManagement: java.util.List getPlugins()>();

        $r1 = (org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver) this;

        result = specialinvoke $r1.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolveFromProject(org.apache.maven.plugin.version.PluginVersionRequest,java.util.List)>(request, $stack14);

     label1:
        return result;
    }

    private org.apache.maven.plugin.version.PluginVersionResult resolveFromProject(org.apache.maven.plugin.version.PluginVersionRequest, java.util.List)
    {
        java.util.List plugins;
        java.util.Iterator l3;
        boolean $stack6, $stack10, $stack14;
        java.lang.Object $stack7;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.plugin.version.PluginVersionRequest request;
        java.lang.String $stack8, $stack9, $stack12, $stack13, $stack15, $stack17;
        DefaultPluginVersionResolver this;
        org.apache.maven.plugin.version.internal.DefaultPluginVersionResult $u0;
        org.apache.maven.plugin.version.PluginVersionResult $r0;

        this := @this: DefaultPluginVersionResolver;

        request := @parameter0: org.apache.maven.plugin.version.PluginVersionRequest;

        plugins := @parameter1: java.util.List;

        l3 = interfaceinvoke plugins.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label4;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack7;

        $stack8 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getGroupId()>();

        $stack9 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getGroupId()>();

        $stack10 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>($stack9);

        if $stack10 == 0 goto label3;

        $stack12 = interfaceinvoke request.<org.apache.maven.plugin.version.PluginVersionRequest: java.lang.String getArtifactId()>();

        $stack13 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack14 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>($stack13);

        if $stack14 == 0 goto label3;

        $stack15 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        if $stack15 == null goto label2;

        $u0 = new org.apache.maven.plugin.version.internal.DefaultPluginVersionResult;

        $stack17 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        specialinvoke $u0.<org.apache.maven.plugin.version.internal.DefaultPluginVersionResult: void <init>(java.lang.String)>($stack17);

        $r0 = (org.apache.maven.plugin.version.PluginVersionResult) $u0;

        return $r0;

     label2:
        return null;

     label3:
        goto label1;

     label4:
        return null;
    }

    public static void <clinit>()
    {
        <DefaultPluginVersionResolver: java.lang.String REPOSITORY_CONTEXT> = "plugin";

        return;
    }
}
