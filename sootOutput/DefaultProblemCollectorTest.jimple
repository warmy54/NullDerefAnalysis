public class DefaultProblemCollectorTest extends java.lang.Object
{

    public void <init>()
    {
        DefaultProblemCollectorTest this;

        this := @this: DefaultProblemCollectorTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetProblems()
    {
        org.apache.maven.building.DefaultProblemCollector $stack5;
        java.util.List $stack6, $stack8, $stack13, $stack15, $stack27;
        int $stack9, $stack14, $stack22, $stack24, $stack34, $stack36;
        java.lang.Exception $stack10, $stack26, $stack37;
        org.apache.maven.building.Problem$Severity $stack11, $stack17, $stack18, $stack29, $stack30;
        java.lang.Object $stack16, $stack28;
        org.apache.maven.building.Problem p1, p2;
        java.lang.String $stack20, $stack32;
        DefaultProblemCollectorTest this;

        this := @this: DefaultProblemCollectorTest;

        $stack5 = new org.apache.maven.building.DefaultProblemCollector;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: void <init>(java.util.List)>(null);

        $stack6 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack6);

        $stack8 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack9 = interfaceinvoke $stack8.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack9);

        virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, "MESSAGE1", -1, -1, null);

        $stack10 = new java.lang.Exception;

        specialinvoke $stack10.<java.lang.Exception: void <init>()>();

        $stack11 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity WARNING>;

        virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>($stack11, null, 42, 127, $stack10);

        $stack13 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack14 = interfaceinvoke $stack13.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack14);

        $stack15 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack16 = interfaceinvoke $stack15.<java.util.List: java.lang.Object get(int)>(0);

        p1 = (org.apache.maven.building.Problem) $stack16;

        $stack17 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        $stack18 = interfaceinvoke p1.<org.apache.maven.building.Problem: org.apache.maven.building.Problem$Severity getSeverity()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, $stack18);

        $stack20 = interfaceinvoke p1.<org.apache.maven.building.Problem: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MESSAGE1", $stack20);

        $stack22 = interfaceinvoke p1.<org.apache.maven.building.Problem: int getLineNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(-1, $stack22);

        $stack24 = interfaceinvoke p1.<org.apache.maven.building.Problem: int getColumnNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(-1, $stack24);

        $stack26 = interfaceinvoke p1.<org.apache.maven.building.Problem: java.lang.Exception getException()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack26);

        $stack27 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack28 = interfaceinvoke $stack27.<java.util.List: java.lang.Object get(int)>(1);

        p2 = (org.apache.maven.building.Problem) $stack28;

        $stack29 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity WARNING>;

        $stack30 = interfaceinvoke p2.<org.apache.maven.building.Problem: org.apache.maven.building.Problem$Severity getSeverity()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack29, $stack30);

        $stack32 = interfaceinvoke p2.<org.apache.maven.building.Problem: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack32);

        $stack34 = interfaceinvoke p2.<org.apache.maven.building.Problem: int getLineNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(42, $stack34);

        $stack36 = interfaceinvoke p2.<org.apache.maven.building.Problem: int getColumnNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(127, $stack36);

        $stack37 = interfaceinvoke p2.<org.apache.maven.building.Problem: java.lang.Exception getException()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack37);

        return;
    }

    public void testSetSource()
    {
        org.apache.maven.building.DefaultProblemCollector $stack2;
        java.util.List $stack4, $stack9, $stack14;
        java.lang.Object $stack5, $stack10, $stack15;
        org.apache.maven.building.Problem $stack6, $stack11, $stack16;
        java.lang.String $stack7, $stack12, $stack17;
        DefaultProblemCollectorTest this;

        this := @this: DefaultProblemCollectorTest;

        $stack2 = new org.apache.maven.building.DefaultProblemCollector;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: void <init>(java.util.List)>(null);

        virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, "PROBLEM1", -1, -1, null);

        virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: void setSource(java.lang.String)>("SOURCE_PROBLEM2");

        virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, "PROBLEM2", -1, -1, null);

        virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: void setSource(java.lang.String)>("SOURCE_PROBLEM3");

        virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, "PROBLEM3", -1, -1, null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(0);

        $stack6 = (org.apache.maven.building.Problem) $stack5;

        $stack7 = interfaceinvoke $stack6.<org.apache.maven.building.Problem: java.lang.String getSource()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

        $stack9 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(1);

        $stack11 = (org.apache.maven.building.Problem) $stack10;

        $stack12 = interfaceinvoke $stack11.<org.apache.maven.building.Problem: java.lang.String getSource()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("SOURCE_PROBLEM2", $stack12);

        $stack14 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblemCollector: java.util.List getProblems()>();

        $stack15 = interfaceinvoke $stack14.<java.util.List: java.lang.Object get(int)>(2);

        $stack16 = (org.apache.maven.building.Problem) $stack15;

        $stack17 = interfaceinvoke $stack16.<org.apache.maven.building.Problem: java.lang.String getSource()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("SOURCE_PROBLEM3", $stack17);

        return;
    }
}
