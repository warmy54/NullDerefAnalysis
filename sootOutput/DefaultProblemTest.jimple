public class DefaultProblemTest extends java.lang.Object
{

    public void <init>()
    {
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetSeverity()
    {
        org.apache.maven.building.DefaultProblem $stack2, $stack5, $stack9, $stack13;
        org.apache.maven.building.Problem$Severity $stack3, $stack4, $stack6, $stack7, $stack8, $stack10, $stack11, $stack12, $stack14, $stack15, $stack16;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack2 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, null);

        $stack3 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblem: org.apache.maven.building.Problem$Severity getSeverity()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        $stack6 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity FATAL>;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, $stack6, null, -1, -1, null);

        $stack7 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity FATAL>;

        $stack8 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblem: org.apache.maven.building.Problem$Severity getSeverity()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = new org.apache.maven.building.DefaultProblem;

        $stack10 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        specialinvoke $stack9.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, $stack10, null, -1, -1, null);

        $stack11 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        $stack12 = virtualinvoke $stack9.<org.apache.maven.building.DefaultProblem: org.apache.maven.building.Problem$Severity getSeverity()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        $stack13 = new org.apache.maven.building.DefaultProblem;

        $stack14 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity WARNING>;

        specialinvoke $stack13.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, $stack14, null, -1, -1, null);

        $stack15 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity WARNING>;

        $stack16 = virtualinvoke $stack13.<org.apache.maven.building.DefaultProblem: org.apache.maven.building.Problem$Severity getSeverity()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        return;
    }

    public void testGetLineNumber()
    {
        org.apache.maven.building.DefaultProblem $stack2, $stack5, $stack8, $stack11;
        int $stack4, $stack7, $stack10, $stack13;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack2 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblem: int getLineNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(-1, $stack4);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, 42, -1, null);

        $stack7 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblem: int getLineNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(42, $stack7);

        $stack8 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack8.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, 2147483647, -1, null);

        $stack10 = virtualinvoke $stack8.<org.apache.maven.building.DefaultProblem: int getLineNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2147483647, $stack10);

        $stack11 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack11.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -2147483648, -1, null);

        $stack13 = virtualinvoke $stack11.<org.apache.maven.building.DefaultProblem: int getLineNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(-2147483648, $stack13);

        return;
    }

    public void testGetColumnNumber()
    {
        org.apache.maven.building.DefaultProblem $stack2, $stack5, $stack8, $stack11;
        int $stack4, $stack7, $stack10, $stack13;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack2 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblem: int getColumnNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(-1, $stack4);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, 42, null);

        $stack7 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblem: int getColumnNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(42, $stack7);

        $stack8 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack8.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, 2147483647, null);

        $stack10 = virtualinvoke $stack8.<org.apache.maven.building.DefaultProblem: int getColumnNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2147483647, $stack10);

        $stack11 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack11.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -2147483648, null);

        $stack13 = virtualinvoke $stack11.<org.apache.maven.building.DefaultProblem: int getColumnNumber()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(-2147483648, $stack13);

        return;
    }

    public void testGetException()
    {
        org.apache.maven.building.DefaultProblem $stack3, $stack7;
        java.lang.Exception $stack5, $stack6, $stack8;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack3 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack3.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, null);

        $stack5 = virtualinvoke $stack3.<org.apache.maven.building.DefaultProblem: java.lang.Exception getException()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = new java.lang.Exception;

        specialinvoke $stack6.<java.lang.Exception: void <init>()>();

        $stack7 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack7.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, $stack6);

        $stack8 = virtualinvoke $stack7.<org.apache.maven.building.DefaultProblem: java.lang.Exception getException()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testGetSource()
    {
        org.apache.maven.building.DefaultProblem $stack2, $stack5, $stack8;
        java.lang.String $stack4, $stack7, $stack10;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack2 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblem: java.lang.String getSource()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, "", -1, -1, null);

        $stack7 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblem: java.lang.String getSource()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

        $stack8 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack8.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, "SOURCE", -1, -1, null);

        $stack10 = virtualinvoke $stack8.<org.apache.maven.building.DefaultProblem: java.lang.String getSource()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("SOURCE", $stack10);

        return;
    }

    public void testGetLocation()
    {
        org.apache.maven.building.DefaultProblem $stack2, $stack5, $stack8, $stack11, $stack14;
        java.lang.String $stack4, $stack7, $stack10, $stack13, $stack16;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack2 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblem: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, "SOURCE", -1, -1, null);

        $stack7 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblem: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("SOURCE", $stack7);

        $stack8 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack8.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, 42, -1, null);

        $stack10 = virtualinvoke $stack8.<org.apache.maven.building.DefaultProblem: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("line 42", $stack10);

        $stack11 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack11.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, 127, null);

        $stack13 = virtualinvoke $stack11.<org.apache.maven.building.DefaultProblem: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("column 127", $stack13);

        $stack14 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack14.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, "SOURCE", 42, 127, null);

        $stack16 = virtualinvoke $stack14.<org.apache.maven.building.DefaultProblem: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("SOURCE, line 42, column 127", $stack16);

        return;
    }

    public void testGetMessage()
    {
        org.apache.maven.building.DefaultProblem $stack2, $stack5, $stack14;
        java.lang.String $stack4, $stack13, $stack22;
        java.lang.Exception $stack6, $stack15;
        DefaultProblemTest this;

        this := @this: DefaultProblemTest;

        $stack2 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack2.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>("MESSAGE", null, null, -1, -1, null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.DefaultProblem: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MESSAGE", $stack4);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        $stack6 = new java.lang.Exception;

        specialinvoke $stack6.<java.lang.Exception: void <init>()>();

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, $stack6);

        $stack13 = virtualinvoke $stack5.<org.apache.maven.building.DefaultProblem: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        $stack14 = new org.apache.maven.building.DefaultProblem;

        $stack15 = new java.lang.Exception;

        specialinvoke $stack15.<java.lang.Exception: void <init>(java.lang.String)>("EXCEPTION MESSAGE");

        specialinvoke $stack14.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>(null, null, null, -1, -1, $stack15);

        $stack22 = virtualinvoke $stack14.<org.apache.maven.building.DefaultProblem: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("EXCEPTION MESSAGE", $stack22);

        return;
    }
}
