public class DefaultProjectArtifactsCache extends java.lang.Object implements org.apache.maven.project.artifact.ProjectArtifactsCache
{
    protected final java.util.Map cache;

    public void <init>()
    {
        DefaultProjectArtifactsCache this;
        java.util.concurrent.ConcurrentHashMap $u0;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache $r0;

        this := @this: DefaultProjectArtifactsCache;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $u0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        $r0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: java.util.Map cache> = $u0;

        return;
    }

    public org.apache.maven.project.artifact.ProjectArtifactsCache$Key createKey(org.apache.maven.project.MavenProject, java.util.Collection, java.util.Collection, boolean, org.eclipse.aether.RepositorySystemSession)
    {
        org.apache.maven.project.MavenProject project;
        java.util.List $stack7;
        java.util.Collection scopesToCollect, scopesToResolve;
        boolean aggregating;
        org.eclipse.aether.RepositorySystemSession session;
        DefaultProjectArtifactsCache this;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache$CacheKey $u0;
        org.apache.maven.project.artifact.ProjectArtifactsCache$Key $r0;

        this := @this: DefaultProjectArtifactsCache;

        project := @parameter0: org.apache.maven.project.MavenProject;

        scopesToCollect := @parameter1: java.util.Collection;

        scopesToResolve := @parameter2: java.util.Collection;

        aggregating := @parameter3: boolean;

        session := @parameter4: org.eclipse.aether.RepositorySystemSession;

        $u0 = new org.apache.maven.project.artifact.DefaultProjectArtifactsCache$CacheKey;

        $stack7 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemoteProjectRepositories()>();

        specialinvoke $u0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache$CacheKey: void <init>(org.apache.maven.project.MavenProject,java.util.List,java.util.Collection,java.util.Collection,boolean,org.eclipse.aether.RepositorySystemSession)>(project, $stack7, scopesToCollect, scopesToResolve, aggregating, session);

        $r0 = (org.apache.maven.project.artifact.ProjectArtifactsCache$Key) $u0;

        return $r0;
    }

    public org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord get(org.apache.maven.project.artifact.ProjectArtifactsCache$Key) throws org.apache.maven.lifecycle.LifecycleExecutionException
    {
        DefaultProjectArtifactsCache this;
        org.apache.maven.project.artifact.ProjectArtifactsCache$Key key;
        java.util.Map $stack3;
        java.lang.Object $stack4;
        org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord cacheRecord;
        org.apache.maven.lifecycle.LifecycleExecutionException $stack5, $stack7;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache $r0;
        java.lang.Throwable $r1;

        this := @this: DefaultProjectArtifactsCache;

        key := @parameter0: org.apache.maven.project.artifact.ProjectArtifactsCache$Key;

        $r0 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        $stack3 = $r0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: java.util.Map cache>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        cacheRecord = (org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord) $stack4;

        if cacheRecord == null goto label1;

        $stack5 = virtualinvoke cacheRecord.<org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord: org.apache.maven.lifecycle.LifecycleExecutionException getException()>();

        if $stack5 == null goto label1;

        $stack7 = virtualinvoke cacheRecord.<org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord: org.apache.maven.lifecycle.LifecycleExecutionException getException()>();

        $r1 = (java.lang.Throwable) $stack7;

        throw $r1;

     label1:
        return cacheRecord;
    }

    public org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord put(org.apache.maven.project.artifact.ProjectArtifactsCache$Key, java.util.Set)
    {
        java.util.Set projectArtifacts, $stack7;
        DefaultProjectArtifactsCache this;
        org.apache.maven.project.artifact.ProjectArtifactsCache$Key key;
        java.util.Map $stack8;
        java.util.LinkedHashSet $u0;
        org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord $u1;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache $r0, $r1;

        this := @this: DefaultProjectArtifactsCache;

        key := @parameter0: org.apache.maven.project.artifact.ProjectArtifactsCache$Key;

        projectArtifacts := @parameter1: java.util.Set;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(projectArtifacts, "projectArtifacts cannot be null");

        $r0 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        virtualinvoke $r0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: void assertUniqueKey(org.apache.maven.project.artifact.ProjectArtifactsCache$Key)>(key);

        $u1 = new org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord;

        $u0 = new java.util.LinkedHashSet;

        specialinvoke $u0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(projectArtifacts);

        $stack7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($u0);

        specialinvoke $u1.<org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord: void <init>(java.util.Set)>($stack7);

        $r1 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        $stack8 = $r1.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: java.util.Map cache>;

        interfaceinvoke $stack8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u1);

        return $u1;
    }

    protected void assertUniqueKey(org.apache.maven.project.artifact.ProjectArtifactsCache$Key)
    {
        DefaultProjectArtifactsCache this;
        org.apache.maven.project.artifact.ProjectArtifactsCache$Key key;
        java.util.Map $stack2;
        boolean $stack3;
        java.lang.StringBuilder $stack6, $stack7, $u0;
        java.lang.String $stack8;
        java.lang.IllegalStateException $u1;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache $r0;

        this := @this: DefaultProjectArtifactsCache;

        key := @parameter0: org.apache.maven.project.artifact.ProjectArtifactsCache$Key;

        $r0 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        $stack2 = $r0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: java.util.Map cache>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(key);

        if $stack3 == 0 goto label1;

        $u1 = new java.lang.IllegalStateException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate artifact resolution result for project ");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(key);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack8);

        throw $u1;

     label1:
        return;
    }

    public org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord put(org.apache.maven.project.artifact.ProjectArtifactsCache$Key, org.apache.maven.lifecycle.LifecycleExecutionException)
    {
        org.apache.maven.lifecycle.LifecycleExecutionException exception;
        DefaultProjectArtifactsCache this;
        org.apache.maven.project.artifact.ProjectArtifactsCache$Key key;
        java.util.Map $stack6;
        org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord $u0;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache $r0, $r1;

        this := @this: DefaultProjectArtifactsCache;

        key := @parameter0: org.apache.maven.project.artifact.ProjectArtifactsCache$Key;

        exception := @parameter1: org.apache.maven.lifecycle.LifecycleExecutionException;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(exception, "exception cannot be null");

        $r0 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        virtualinvoke $r0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: void assertUniqueKey(org.apache.maven.project.artifact.ProjectArtifactsCache$Key)>(key);

        $u0 = new org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord;

        specialinvoke $u0.<org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord: void <init>(org.apache.maven.lifecycle.LifecycleExecutionException)>(exception);

        $r1 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        $stack6 = $r1.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: java.util.Map cache>;

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u0);

        return $u0;
    }

    public void flush()
    {
        DefaultProjectArtifactsCache this;
        java.util.Map $stack1;
        org.apache.maven.project.artifact.DefaultProjectArtifactsCache $r0;

        this := @this: DefaultProjectArtifactsCache;

        $r0 = (org.apache.maven.project.artifact.DefaultProjectArtifactsCache) this;

        $stack1 = $r0.<org.apache.maven.project.artifact.DefaultProjectArtifactsCache: java.util.Map cache>;

        interfaceinvoke $stack1.<java.util.Map: void clear()>();

        return;
    }

    public void register(org.apache.maven.project.MavenProject, org.apache.maven.project.artifact.ProjectArtifactsCache$Key, org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord)
    {
        DefaultProjectArtifactsCache this;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.project.artifact.ProjectArtifactsCache$Key cacheKey;
        org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord record;

        this := @this: DefaultProjectArtifactsCache;

        project := @parameter0: org.apache.maven.project.MavenProject;

        cacheKey := @parameter1: org.apache.maven.project.artifact.ProjectArtifactsCache$Key;

        record := @parameter2: org.apache.maven.project.artifact.ProjectArtifactsCache$CacheRecord;

        return;
    }
}
