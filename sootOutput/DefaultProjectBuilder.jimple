public class DefaultProjectBuilder extends java.lang.Object implements org.apache.maven.project.ProjectBuilder
{
    private org.codehaus.plexus.logging.Logger logger;
    private org.apache.maven.model.building.ModelBuilder modelBuilder;
    private org.apache.maven.model.building.ModelProcessor modelProcessor;
    private org.apache.maven.project.ProjectBuildingHelper projectBuildingHelper;
    private org.apache.maven.bridge.MavenRepositorySystem repositorySystem;
    private org.eclipse.aether.RepositorySystem repoSystem;
    private org.eclipse.aether.impl.RemoteRepositoryManager repositoryManager;
    private org.apache.maven.project.ProjectDependenciesResolver dependencyResolver;

    public void <init>()
    {
        DefaultProjectBuilder this;

        this := @this: DefaultProjectBuilder;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.maven.project.ProjectBuildingResult build(java.io.File, org.apache.maven.project.ProjectBuildingRequest) throws org.apache.maven.project.ProjectBuildingException
    {
        DefaultProjectBuilder this;
        java.io.File pomFile;
        org.apache.maven.project.ProjectBuildingRequest request;
        org.apache.maven.project.ProjectBuildingResult $stack5;
        org.apache.maven.model.building.FileModelSource $u0;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig $u1;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1;
        org.apache.maven.model.building.ModelSource $r2;

        this := @this: DefaultProjectBuilder;

        pomFile := @parameter0: java.io.File;

        request := @parameter1: org.apache.maven.project.ProjectBuildingRequest;

        $u0 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u0.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>(pomFile);

        $u1 = new org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuilder$InternalConfig: void <init>(org.apache.maven.project.DefaultProjectBuilder,org.apache.maven.project.ProjectBuildingRequest,org.apache.maven.project.ReactorModelPool,org.apache.maven.model.building.TransformerContextBuilder)>($r0, request, null, null);

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $r2 = (org.apache.maven.model.building.ModelSource) $u0;

        $stack5 = specialinvoke $r1.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.model.building.ModelSource,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(pomFile, $r2, $u1);

        return $stack5;
    }

    public org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.model.building.ModelSource, org.apache.maven.project.ProjectBuildingRequest) throws org.apache.maven.project.ProjectBuildingException
    {
        DefaultProjectBuilder this;
        org.apache.maven.model.building.ModelSource modelSource;
        org.apache.maven.project.ProjectBuildingRequest request;
        org.apache.maven.project.ProjectBuildingResult $stack5;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig $u0;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1;

        this := @this: DefaultProjectBuilder;

        modelSource := @parameter0: org.apache.maven.model.building.ModelSource;

        request := @parameter1: org.apache.maven.project.ProjectBuildingRequest;

        $u0 = new org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $u0.<org.apache.maven.project.DefaultProjectBuilder$InternalConfig: void <init>(org.apache.maven.project.DefaultProjectBuilder,org.apache.maven.project.ProjectBuildingRequest,org.apache.maven.project.ReactorModelPool,org.apache.maven.model.building.TransformerContextBuilder)>($r0, request, null, null);

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack5 = specialinvoke $r1.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.model.building.ModelSource,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(null, modelSource, $u0);

        return $stack5;
    }

    private org.apache.maven.project.ProjectBuildingResult build(java.io.File, org.apache.maven.model.building.ModelSource, org.apache.maven.project.DefaultProjectBuilder$InternalConfig) throws org.apache.maven.project.ProjectBuildingException
    {
        java.lang.Thread $stack14, $stack21, $stack50;
        java.lang.ClassLoader oldContextClassLoader;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig config;
        org.apache.maven.project.ProjectBuildingRequest projectBuildingRequest;
        boolean $stack18, $stack19;
        java.lang.Object[] $stack23;
        java.util.List $stack24, modelProblems;
        DefaultProjectBuilder this;
        org.eclipse.aether.RepositorySystemSession $stack26;
        org.apache.maven.project.ProjectBuildingHelper $stack32, $stack38;
        java.io.File pomFile;
        org.apache.maven.model.building.ModelSource modelSource;
        org.apache.maven.model.building.ModelBuilder $stack43;
        java.util.Map $stack46;
        java.lang.Throwable $stack49, $stack51, error, $r7, $r11;
        java.lang.String $stack54, $stack55;
        org.apache.maven.model.Model $stack56;
        org.apache.maven.project.MavenProject project, $u0;
        org.apache.maven.model.building.ModelBuildingRequest request;
        org.apache.maven.model.building.ModelBuildingResult result;
        org.apache.maven.project.DependencyResolutionResult request#9;
        org.apache.maven.project.DefaultModelBuildingListener $u1;
        org.apache.maven.project.ProjectBuildingException $u2, $u5;
        java.util.HashMap $u3;
        org.apache.maven.project.DefaultProjectBuildingResult $u4;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r3, $r8, $r9, $r10;
        org.apache.maven.model.building.ModelBuildingListener $r2;
        org.apache.maven.model.building.ModelBuildingException $r4, $r5, $r6;
        org.apache.maven.project.ProjectBuildingResult $r12;

        this := @this: DefaultProjectBuilder;

        pomFile := @parameter0: java.io.File;

        modelSource := @parameter1: org.apache.maven.model.building.ModelSource;

        config := @parameter2: org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        $stack14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        oldContextClassLoader = virtualinvoke $stack14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label01:
        projectBuildingRequest = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.project.ProjectBuildingRequest access$000(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        project = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.MavenProject getProject()>();

        modelProblems = null;

        error = null;

        if project != null goto label08;

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        request = specialinvoke $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuildingRequest getModelBuildingRequest(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $u0 = new org.apache.maven.project.MavenProject;

        specialinvoke $u0.<org.apache.maven.project.MavenProject: void <init>()>();

        project = $u0;

        virtualinvoke $u0.<org.apache.maven.project.MavenProject: void setFile(java.io.File)>(pomFile);

        $u1 = new org.apache.maven.project.DefaultModelBuildingListener;

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack38 = $r1.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingHelper projectBuildingHelper>;

        specialinvoke $u1.<org.apache.maven.project.DefaultModelBuildingListener: void <init>(org.apache.maven.project.MavenProject,org.apache.maven.project.ProjectBuildingHelper,org.apache.maven.project.ProjectBuildingRequest)>($u0, $stack38, projectBuildingRequest);

        $r2 = (org.apache.maven.model.building.ModelBuildingListener) $u1;

        interfaceinvoke request.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setModelBuildingListener(org.apache.maven.model.building.ModelBuildingListener)>($r2);

        interfaceinvoke request.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setPomFile(java.io.File)>(pomFile);

        interfaceinvoke request.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setModelSource(org.apache.maven.model.building.ModelSource)>(modelSource);

        interfaceinvoke request.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setLocationTracking(boolean)>(1);

     label02:
        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack43 = $r3.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuilder modelBuilder>;

        result = interfaceinvoke $stack43.<org.apache.maven.model.building.ModelBuilder: org.apache.maven.model.building.ModelBuildingResult build(org.apache.maven.model.building.ModelBuildingRequest)>(request);

     label03:
        goto label07;

     label04:
        $stack51 := @caughtexception;

        $r4 = (org.apache.maven.model.building.ModelBuildingException) $stack51;

        result = virtualinvoke $r4.<org.apache.maven.model.building.ModelBuildingException: org.apache.maven.model.building.ModelBuildingResult getResult()>();

        if result == null goto label05;

        $stack56 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getEffectiveModel()>();

        if $stack56 != null goto label06;

     label05:
        $u2 = new org.apache.maven.project.ProjectBuildingException;

        $r5 = (org.apache.maven.model.building.ModelBuildingException) $stack51;

        $stack54 = virtualinvoke $r5.<org.apache.maven.model.building.ModelBuildingException: java.lang.String getModelId()>();

        $r6 = (org.apache.maven.model.building.ModelBuildingException) $stack51;

        $stack55 = virtualinvoke $r6.<org.apache.maven.model.building.ModelBuildingException: java.lang.String getMessage()>();

        specialinvoke $u2.<org.apache.maven.project.ProjectBuildingException: void <init>(java.lang.String,java.lang.String,java.io.File,java.lang.Throwable)>($stack54, $stack55, pomFile, $stack51);

        $r7 = (java.lang.Throwable) $u2;

        throw $r7;

     label06:
        error = $stack51;

     label07:
        modelProblems = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getProblems()>();

        $stack46 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $u3 = new java.util.HashMap;

        specialinvoke $u3.<java.util.HashMap: void <init>()>();

        $r8 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $r8.<org.apache.maven.project.DefaultProjectBuilder: void initProject(org.apache.maven.project.MavenProject,java.util.Map,boolean,org.apache.maven.model.building.ModelBuildingResult,java.util.Map,org.apache.maven.project.ProjectBuildingRequest)>($u0, $stack46, 1, result, $u3, projectBuildingRequest);

        goto label09;

     label08:
        $stack18 = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: boolean isResolveDependencies()>();

        if $stack18 == 0 goto label09;

        $r9 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack32 = $r9.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingHelper projectBuildingHelper>;

        interfaceinvoke $stack32.<org.apache.maven.project.ProjectBuildingHelper: void selectProjectRealm(org.apache.maven.project.MavenProject)>(project);

     label09:
        request#9 = null;

        $stack19 = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: boolean isResolveDependencies()>();

        if $stack19 == 0 goto label10;

        $stack26 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.eclipse.aether.RepositorySystemSession access$100(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $r10 = (org.apache.maven.project.DefaultProjectBuilder) this;

        request#9 = specialinvoke $r10.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.DependencyResolutionResult resolveDependencies(org.apache.maven.project.MavenProject,org.eclipse.aether.RepositorySystemSession)>(project, $stack26);

     label10:
        $u4 = new org.apache.maven.project.DefaultProjectBuildingResult;

        specialinvoke $u4.<org.apache.maven.project.DefaultProjectBuildingResult: void <init>(org.apache.maven.project.MavenProject,java.util.List,org.apache.maven.project.DependencyResolutionResult)>(project, modelProblems, request#9);

        if error == null goto label11;

        $u5 = new org.apache.maven.project.ProjectBuildingException;

        $stack23 = newarray (org.apache.maven.project.ProjectBuildingResult)[1];

        $stack23[0] = $u4;

        $stack24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack23);

        specialinvoke $u5.<org.apache.maven.project.ProjectBuildingException: void <init>(java.util.List)>($stack24);

        virtualinvoke $u5.<org.apache.maven.project.ProjectBuildingException: java.lang.Throwable initCause(java.lang.Throwable)>(error);

        $r11 = (java.lang.Throwable) $u5;

        throw $r11;

     label11:
        $stack21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack21.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(oldContextClassLoader);

        $r12 = (org.apache.maven.project.ProjectBuildingResult) $u4;

        return $r12;

     label12:
        $stack49 := @caughtexception;

     label13:
        $stack50 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack50.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(oldContextClassLoader);

        throw $stack49;

        catch org.apache.maven.model.building.ModelBuildingException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private org.apache.maven.project.DependencyResolutionResult resolveDependencies(org.apache.maven.project.MavenProject, org.eclipse.aether.RepositorySystemSession)
    {
        org.apache.maven.project.MavenProject project;
        org.eclipse.aether.RepositorySystemSession session;
        DefaultProjectBuilder this;
        org.apache.maven.project.ProjectDependenciesResolver $stack10;
        org.eclipse.aether.graph.DependencyNode $stack13, $stack14;
        java.util.List $stack15, $stack18;
        org.apache.maven.artifact.Artifact $stack16, artifact;
        java.lang.String $stack17, path;
        org.eclipse.aether.repository.LocalRepositoryManager lrm;
        java.util.Iterator l6;
        boolean $stack21, $stack28;
        java.lang.Object $stack27;
        org.eclipse.aether.artifact.Artifact $stack30;
        org.eclipse.aether.repository.LocalRepository $stack33;
        java.io.File $stack34, $u2;
        java.lang.Throwable $stack35;
        org.apache.maven.project.DependencyResolutionResult resolutionResult;
        org.apache.maven.project.DefaultDependencyResolutionRequest $u0;
        java.util.LinkedHashSet $u1;
        org.apache.maven.project.DefaultProjectBuilder $r0;
        org.apache.maven.project.DependencyResolutionRequest $r1;
        org.apache.maven.project.DependencyResolutionException $r2;

        this := @this: DefaultProjectBuilder;

        project := @parameter0: org.apache.maven.project.MavenProject;

        session := @parameter1: org.eclipse.aether.RepositorySystemSession;

     label1:
        $u0 = new org.apache.maven.project.DefaultDependencyResolutionRequest;

        specialinvoke $u0.<org.apache.maven.project.DefaultDependencyResolutionRequest: void <init>(org.apache.maven.project.MavenProject,org.eclipse.aether.RepositorySystemSession)>(project, session);

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack10 = $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectDependenciesResolver dependencyResolver>;

        $r1 = (org.apache.maven.project.DependencyResolutionRequest) $u0;

        resolutionResult = interfaceinvoke $stack10.<org.apache.maven.project.ProjectDependenciesResolver: org.apache.maven.project.DependencyResolutionResult resolve(org.apache.maven.project.DependencyResolutionRequest)>($r1);

     label2:
        goto label4;

     label3:
        $stack35 := @caughtexception;

        $r2 = (org.apache.maven.project.DependencyResolutionException) $stack35;

        resolutionResult = virtualinvoke $r2.<org.apache.maven.project.DependencyResolutionException: org.apache.maven.project.DependencyResolutionResult getResult()>();

     label4:
        $u1 = new java.util.LinkedHashSet;

        specialinvoke $u1.<java.util.LinkedHashSet: void <init>()>();

        $stack13 = interfaceinvoke resolutionResult.<org.apache.maven.project.DependencyResolutionResult: org.eclipse.aether.graph.DependencyNode getDependencyGraph()>();

        if $stack13 == null goto label7;

        $stack14 = interfaceinvoke resolutionResult.<org.apache.maven.project.DependencyResolutionResult: org.eclipse.aether.graph.DependencyNode getDependencyGraph()>();

        $stack15 = interfaceinvoke $stack14.<org.eclipse.aether.graph.DependencyNode: java.util.List getChildren()>();

        $stack16 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack17 = interfaceinvoke $stack16.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        $stack18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($stack17);

        staticinvoke <org.apache.maven.RepositoryUtils: void toArtifacts(java.util.Collection,java.util.Collection,java.util.List,org.eclipse.aether.graph.DependencyFilter)>($u1, $stack15, $stack18, null);

        lrm = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.LocalRepositoryManager getLocalRepositoryManager()>();

        l6 = interfaceinvoke $u1.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $stack21 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label7;

        $stack27 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack27;

        $stack28 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isResolved()>();

        if $stack28 != 0 goto label6;

        $stack30 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        path = interfaceinvoke lrm.<org.eclipse.aether.repository.LocalRepositoryManager: java.lang.String getPathForLocalArtifact(org.eclipse.aether.artifact.Artifact)>($stack30);

        $u2 = new java.io.File;

        $stack33 = interfaceinvoke lrm.<org.eclipse.aether.repository.LocalRepositoryManager: org.eclipse.aether.repository.LocalRepository getRepository()>();

        $stack34 = virtualinvoke $stack33.<org.eclipse.aether.repository.LocalRepository: java.io.File getBasedir()>();

        specialinvoke $u2.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack34, path);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($u2);

     label6:
        goto label5;

     label7:
        virtualinvoke project.<org.apache.maven.project.MavenProject: void setResolvedArtifacts(java.util.Set)>($u1);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setArtifacts(java.util.Set)>($u1);

        return resolutionResult;

        catch org.apache.maven.project.DependencyResolutionException from label1 to label2 with label3;
    }

    private java.util.List getProfileIds(java.util.List)
    {
        java.util.List profiles, $stack7;
        java.util.stream.Stream $stack2, $stack4;
        java.util.function.Function $stack3;
        java.util.stream.Collector $stack5;
        java.lang.Object $stack6;
        DefaultProjectBuilder this;

        this := @this: DefaultProjectBuilder;

        profiles := @parameter0: java.util.List;

        $stack2 = interfaceinvoke profiles.<java.util.List: java.util.stream.Stream stream()>();

        $stack3 = staticinvoke <DefaultProjectBuilder$getId__309: java.util.function.Function bootstrap$()>();

        $stack4 = interfaceinvoke $stack2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack3);

        $stack5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack5);

        $stack7 = (java.util.List) $stack6;

        return $stack7;
    }

    private org.apache.maven.model.building.ModelBuildingRequest getModelBuildingRequest(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)
    {
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig config;
        org.apache.maven.project.ProjectBuildingRequest configuration;
        org.eclipse.aether.RequestTrace $stack8, trace;
        org.eclipse.aether.RepositorySystemSession $stack11, $stack37;
        DefaultProjectBuilder this;
        org.eclipse.aether.RepositorySystem $stack12;
        org.eclipse.aether.impl.RemoteRepositoryManager $stack13;
        java.util.List $stack14, $stack21, $stack23, $stack25;
        org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging $stack15;
        org.apache.maven.project.ReactorModelPool $stack16, $stack34;
        int $stack17;
        boolean $stack19;
        java.util.Properties $stack27, $stack29;
        java.util.Date $stack31;
        org.apache.maven.model.building.TransformerContextBuilder $stack35;
        org.apache.maven.model.building.ModelCache $stack38;
        org.apache.maven.model.building.DefaultModelBuildingRequest $u0;
        org.apache.maven.project.ProjectModelResolver $u1;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1;
        org.apache.maven.model.building.ModelBuildingRequest $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;
        org.apache.maven.model.resolution.ModelResolver $r11;

        this := @this: DefaultProjectBuilder;

        config := @parameter0: org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        configuration = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.project.ProjectBuildingRequest access$000(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $u0 = new org.apache.maven.model.building.DefaultModelBuildingRequest;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultModelBuildingRequest: void <init>()>();

        $stack8 = staticinvoke <org.eclipse.aether.RequestTrace: org.eclipse.aether.RequestTrace newChild(org.eclipse.aether.RequestTrace,java.lang.Object)>(null, configuration);

        trace = virtualinvoke $stack8.<org.eclipse.aether.RequestTrace: org.eclipse.aether.RequestTrace newChild(java.lang.Object)>($u0);

        $u1 = new org.apache.maven.project.ProjectModelResolver;

        $stack11 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.eclipse.aether.RepositorySystemSession access$100(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack12 = $r0.<org.apache.maven.project.DefaultProjectBuilder: org.eclipse.aether.RepositorySystem repoSystem>;

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack13 = $r1.<org.apache.maven.project.DefaultProjectBuilder: org.eclipse.aether.impl.RemoteRepositoryManager repositoryManager>;

        $stack14 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: java.util.List access$200(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $stack15 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging getRepositoryMerging()>();

        $stack16 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.project.ReactorModelPool access$300(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        specialinvoke $u1.<org.apache.maven.project.ProjectModelResolver: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.RepositorySystem,org.eclipse.aether.impl.RemoteRepositoryManager,java.util.List,org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging,org.apache.maven.project.ReactorModelPool)>($stack11, trace, $stack12, $stack13, $stack14, $stack15, $stack16);

        $stack17 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: int getValidationLevel()>();

        $r2 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r2.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setValidationLevel(int)>($stack17);

        $stack19 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: boolean isProcessPlugins()>();

        $r3 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r3.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setProcessPlugins(boolean)>($stack19);

        $stack21 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: java.util.List getProfiles()>();

        $r4 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r4.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setProfiles(java.util.List)>($stack21);

        $stack23 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: java.util.List getActiveProfileIds()>();

        $r5 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r5.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setActiveProfileIds(java.util.List)>($stack23);

        $stack25 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: java.util.List getInactiveProfileIds()>();

        $r6 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r6.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setInactiveProfileIds(java.util.List)>($stack25);

        $stack27 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: java.util.Properties getSystemProperties()>();

        $r7 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r7.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setSystemProperties(java.util.Properties)>($stack27);

        $stack29 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: java.util.Properties getUserProperties()>();

        $r8 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r8.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setUserProperties(java.util.Properties)>($stack29);

        $stack31 = interfaceinvoke configuration.<org.apache.maven.project.ProjectBuildingRequest: java.util.Date getBuildStartTime()>();

        $r9 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r9.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setBuildStartTime(java.util.Date)>($stack31);

        $r10 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        $r11 = (org.apache.maven.model.resolution.ModelResolver) $u1;

        interfaceinvoke $r10.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setModelResolver(org.apache.maven.model.resolution.ModelResolver)>($r11);

        $stack34 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.project.ReactorModelPool access$300(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        if $stack34 == null goto label1;

        $stack37 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.eclipse.aether.RepositorySystemSession access$100(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $stack38 = staticinvoke <org.apache.maven.repository.internal.DefaultModelCache: org.apache.maven.model.building.ModelCache newInstance(org.eclipse.aether.RepositorySystemSession)>($stack37);

        $r12 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r12.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setModelCache(org.apache.maven.model.building.ModelCache)>($stack38);

     label1:
        $stack35 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.model.building.TransformerContextBuilder access$400(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $r13 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        interfaceinvoke $r13.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setTransformerContextBuilder(org.apache.maven.model.building.TransformerContextBuilder)>($stack35);

        $r14 = (org.apache.maven.model.building.ModelBuildingRequest) $u0;

        return $r14;
    }

    public org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.artifact.Artifact, org.apache.maven.project.ProjectBuildingRequest) throws org.apache.maven.project.ProjectBuildingException
    {
        DefaultProjectBuilder this;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.project.ProjectBuildingRequest request;
        org.apache.maven.project.ProjectBuildingResult $stack3;
        org.apache.maven.project.DefaultProjectBuilder $r0;

        this := @this: DefaultProjectBuilder;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        request := @parameter1: org.apache.maven.project.ProjectBuildingRequest;

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.artifact.Artifact,boolean,org.apache.maven.project.ProjectBuildingRequest)>(artifact, 0, request);

        return $stack3;
    }

    public org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.artifact.Artifact, boolean, org.apache.maven.project.ProjectBuildingRequest) throws org.apache.maven.project.ProjectBuildingException
    {
        org.apache.maven.artifact.Artifact artifact;
        DefaultProjectBuilder this;
        org.apache.maven.project.ProjectBuildingRequest request;
        java.util.List $stack14, $stack36;
        org.eclipse.aether.RepositorySystem $stack16;
        org.eclipse.aether.RepositorySystemSession $stack17;
        org.eclipse.aether.resolution.ArtifactResult pomResult, $stack38;
        org.eclipse.aether.repository.ArtifactRepository $stack20;
        boolean localProject, $stack24, $stack39, allowStubModel;
        java.lang.String $stack22, $stack23, $stack27, $stack28, $stack29, $stack33, $stack41, $stack44, $stack46;
        org.apache.maven.project.ProjectBuildingResult $stack30, $stack32, $stack53;
        java.lang.Throwable $stack35, $r6;
        java.lang.Object $stack37;
        java.lang.StringBuilder $stack43, $stack45, $u2;
        org.apache.maven.model.building.ModelSource $stack52, $r8, $r10;
        org.eclipse.aether.artifact.Artifact pomArtifact;
        java.io.File pomRequest#6;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig $u0;
        org.eclipse.aether.resolution.ArtifactRequest $u1;
        org.apache.maven.project.ProjectBuildingException $u3;
        org.apache.maven.model.building.FileModelSource $u4;
        org.apache.maven.model.building.ArtifactModelSource $u5;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r3, $r4, $r7, $r9;
        org.eclipse.aether.resolution.ArtifactResolutionException $r2, $r5;

        this := @this: DefaultProjectBuilder;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        allowStubModel := @parameter1: boolean;

        request := @parameter2: org.apache.maven.project.ProjectBuildingRequest;

        pomArtifact = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        pomArtifact = staticinvoke <org.apache.maven.repository.internal.ArtifactDescriptorUtils: org.eclipse.aether.artifact.Artifact toPomArtifact(org.eclipse.aether.artifact.Artifact)>(pomArtifact);

        $u0 = new org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $u0.<org.apache.maven.project.DefaultProjectBuilder$InternalConfig: void <init>(org.apache.maven.project.DefaultProjectBuilder,org.apache.maven.project.ProjectBuildingRequest,org.apache.maven.project.ReactorModelPool,org.apache.maven.model.building.TransformerContextBuilder)>($r0, request, null, null);

     label1:
        $u1 = new org.eclipse.aether.resolution.ArtifactRequest;

        specialinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: void <init>()>();

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>(pomArtifact);

        $stack14 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: java.util.List access$200(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>($u0);

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setRepositories(java.util.List)>($stack14);

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack16 = $r1.<org.apache.maven.project.DefaultProjectBuilder: org.eclipse.aether.RepositorySystem repoSystem>;

        $stack17 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.eclipse.aether.RepositorySystemSession access$100(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>($u0);

        pomResult = interfaceinvoke $stack16.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.resolution.ArtifactResult resolveArtifact(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactRequest)>($stack17, $u1);

        pomArtifact = virtualinvoke pomResult.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack20 = virtualinvoke pomResult.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.repository.ArtifactRepository getRepository()>();

        localProject = $stack20 instanceof org.eclipse.aether.repository.WorkspaceRepository;

     label2:
        goto label5;

     label3:
        $stack35 := @caughtexception;

        $r2 = (org.eclipse.aether.resolution.ArtifactResolutionException) $stack35;

        $stack36 = virtualinvoke $r2.<org.eclipse.aether.resolution.ArtifactResolutionException: java.util.List getResults()>();

        $stack37 = interfaceinvoke $stack36.<java.util.List: java.lang.Object get(int)>(0);

        $stack38 = (org.eclipse.aether.resolution.ArtifactResult) $stack37;

        $stack39 = virtualinvoke $stack38.<org.eclipse.aether.resolution.ArtifactResult: boolean isMissing()>();

        if $stack39 == 0 goto label4;

        if allowStubModel == 0 goto label4;

        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack52 = specialinvoke $r3.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelSource createStubModelSource(org.apache.maven.artifact.Artifact)>(artifact);

        $r4 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack53 = specialinvoke $r4.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.model.building.ModelSource,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(null, $stack52, $u0);

        return $stack53;

     label4:
        $u3 = new org.apache.maven.project.ProjectBuildingException;

        $stack41 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack43 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error resolving project artifact: ");

        $r5 = (org.eclipse.aether.resolution.ArtifactResolutionException) $stack35;

        $stack44 = virtualinvoke $r5.<org.eclipse.aether.resolution.ArtifactResolutionException: java.lang.String getMessage()>();

        $stack45 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack44);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<org.apache.maven.project.ProjectBuildingException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($stack41, $stack46, $stack35);

        $r6 = (java.lang.Throwable) $u3;

        throw $r6;

     label5:
        pomRequest#6 = interfaceinvoke pomArtifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        $stack22 = "pom";

        $stack23 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        $stack24 = virtualinvoke $stack22.<java.lang.String: boolean equals(java.lang.Object)>($stack23);

        if $stack24 == 0 goto label6;

        $stack33 = interfaceinvoke pomArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void selectVersion(java.lang.String)>($stack33);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>(pomRequest#6);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setResolved(boolean)>(1);

     label6:
        if localProject == 0 goto label7;

        $u4 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u4.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>(pomRequest#6);

        $r7 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $r8 = (org.apache.maven.model.building.ModelSource) $u4;

        $stack32 = specialinvoke $r7.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.model.building.ModelSource,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(pomRequest#6, $r8, $u0);

        return $stack32;

     label7:
        $u5 = new org.apache.maven.model.building.ArtifactModelSource;

        $stack27 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack28 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack29 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        specialinvoke $u5.<org.apache.maven.model.building.ArtifactModelSource: void <init>(java.io.File,java.lang.String,java.lang.String,java.lang.String)>(pomRequest#6, $stack27, $stack28, $stack29);

        $r9 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $r10 = (org.apache.maven.model.building.ModelSource) $u5;

        $stack30 = specialinvoke $r9.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.model.building.ModelSource,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(null, $r10, $u0);

        return $stack30;

        catch org.eclipse.aether.resolution.ArtifactResolutionException from label1 to label2 with label3;
    }

    private org.apache.maven.model.building.ModelSource createStubModelSource(org.apache.maven.artifact.Artifact)
    {
        java.lang.StringBuilder $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $u0;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack8, $stack12, $stack16, $stack20, $stack25;
        DefaultProjectBuilder this;
        org.apache.maven.model.building.StringModelSource $u1;
        org.apache.maven.model.building.ModelSource $r0;

        this := @this: DefaultProjectBuilder;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>(int)>(1024);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\'1.0\'?>");

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<project>");

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<modelVersion>4.0.0</modelVersion>");

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<groupId>");

        $stack8 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</groupId>");

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<artifactId>");

        $stack12 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</artifactId>");

        $stack15 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<version>");

        $stack16 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getBaseVersion()>();

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</version>");

        $stack19 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<packaging>");

        $stack20 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</packaging>");

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</project>");

        $u1 = new org.apache.maven.model.building.StringModelSource;

        $stack25 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        specialinvoke $u1.<org.apache.maven.model.building.StringModelSource: void <init>(java.lang.CharSequence,java.lang.String)>($u0, $stack25);

        $r0 = (org.apache.maven.model.building.ModelSource) $u1;

        return $r0;
    }

    public java.util.List build(java.util.List, boolean, org.apache.maven.project.ProjectBuildingRequest) throws org.apache.maven.project.ProjectBuildingException
    {
        org.apache.maven.project.ReactorModelPool modelPool;
        DefaultProjectBuilder this;
        org.apache.maven.project.ProjectBuildingRequest request;
        org.apache.maven.model.building.ModelBuilder $stack18;
        org.apache.maven.model.building.TransformerContextBuilder $stack19, $stack37;
        java.util.List pomFiles;
        boolean recursive, $stack28, $stack32, noErrors, $stack40;
        java.lang.Thread $stack23, $stack43, $stack29;
        java.lang.ClassLoader oldContextClassLoader;
        org.eclipse.aether.RepositorySystemSession $stack27, $stack34;
        java.util.Properties $stack30;
        org.apache.maven.feature.Features$Feature $stack31;
        org.eclipse.aether.SessionData $stack35;
        java.lang.Object $stack36;
        org.apache.maven.model.building.TransformerContext $stack38;
        java.lang.Throwable $stack42, $r4;
        java.util.ArrayList $u0, $u1, $u6;
        org.apache.maven.project.ReactorModelPool$Builder $u2;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig $u3;
        java.util.HashMap $u4, $u7;
        java.util.LinkedHashSet $u5;
        org.apache.maven.project.ProjectBuildingException $u8;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r2, $r3;

        this := @this: DefaultProjectBuilder;

        pomFiles := @parameter0: java.util.List;

        recursive := @parameter1: boolean;

        request := @parameter2: org.apache.maven.project.ProjectBuildingRequest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $u2 = new org.apache.maven.project.ReactorModelPool$Builder;

        specialinvoke $u2.<org.apache.maven.project.ReactorModelPool$Builder: void <init>()>();

        modelPool = virtualinvoke $u2.<org.apache.maven.project.ReactorModelPool$Builder: org.apache.maven.project.ReactorModelPool build()>();

        $u3 = new org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack18 = $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuilder modelBuilder>;

        $stack19 = interfaceinvoke $stack18.<org.apache.maven.model.building.ModelBuilder: org.apache.maven.model.building.TransformerContextBuilder newTransformerContextBuilder()>();

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $u3.<org.apache.maven.project.DefaultProjectBuilder$InternalConfig: void <init>(org.apache.maven.project.DefaultProjectBuilder,org.apache.maven.project.ProjectBuildingRequest,org.apache.maven.project.ReactorModelPool,org.apache.maven.model.building.TransformerContextBuilder)>($r1, request, modelPool, $stack19);

        $u4 = new java.util.HashMap;

        specialinvoke $u4.<java.util.HashMap: void <init>(int)>(256);

        $u5 = new java.util.LinkedHashSet;

        specialinvoke $u5.<java.util.LinkedHashSet: void <init>()>();

        $r2 = (org.apache.maven.project.DefaultProjectBuilder) this;

        noErrors = specialinvoke $r2.<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.util.List,java.util.Set,boolean,boolean,org.apache.maven.project.DefaultProjectBuilder$InternalConfig,org.apache.maven.project.ReactorModelPool$Builder)>($u0, $u1, $u4, pomFiles, $u5, 1, recursive, $u3, $u2);

        $stack23 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        oldContextClassLoader = virtualinvoke $stack23.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        $u6 = new java.util.ArrayList;

        specialinvoke $u6.<java.util.ArrayList: void <init>()>();

        $u7 = new java.util.HashMap;

        specialinvoke $u7.<java.util.HashMap: void <init>()>();

        $stack27 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.eclipse.aether.RepositorySystemSession access$100(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>($u3);

        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack28 = specialinvoke $r3.<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.util.List,org.apache.maven.project.ProjectBuildingRequest,java.util.Map,org.eclipse.aether.RepositorySystemSession)>($u0, $u6, $u4, $u1, request, $u7, $stack27);

        if $stack28 == 0 goto label2;

        if noErrors == 0 goto label2;

        $stack40 = 1;

        goto label3;

     label2:
        $stack40 = 0;

     label3:
        noErrors = $stack40;

     label4:
        $stack29 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack29.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(oldContextClassLoader);

        goto label7;

     label5:
        $stack42 := @caughtexception;

     label6:
        $stack43 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $stack43.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(oldContextClassLoader);

        throw $stack42;

     label7:
        $stack30 = interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: java.util.Properties getUserProperties()>();

        $stack31 = staticinvoke <org.apache.maven.feature.Features: org.apache.maven.feature.Features$Feature buildConsumer(java.util.Properties)>($stack30);

        $stack32 = virtualinvoke $stack31.<org.apache.maven.feature.Features$Feature: boolean isActive()>();

        if $stack32 == 0 goto label8;

        $stack34 = interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack35 = interfaceinvoke $stack34.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.SessionData getData()>();

        $stack36 = <org.apache.maven.model.building.TransformerContext: java.lang.Object KEY>;

        $stack37 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.model.building.TransformerContextBuilder access$400(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>($u3);

        $stack38 = interfaceinvoke $stack37.<org.apache.maven.model.building.TransformerContextBuilder: org.apache.maven.model.building.TransformerContext build()>();

        interfaceinvoke $stack35.<org.eclipse.aether.SessionData: void set(java.lang.Object,java.lang.Object)>($stack36, $stack38);

     label8:
        if noErrors != 0 goto label9;

        $u8 = new org.apache.maven.project.ProjectBuildingException;

        specialinvoke $u8.<org.apache.maven.project.ProjectBuildingException: void <init>(java.util.List)>($u0);

        $r4 = (java.lang.Throwable) $u8;

        throw $r4;

     label9:
        return $u0;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean build(java.util.List, java.util.List, java.util.Map, java.util.List, java.util.Set, boolean, boolean, org.apache.maven.project.DefaultProjectBuilder$InternalConfig, org.apache.maven.project.ReactorModelPool$Builder)
    {
        java.util.List pomFiles, results, interimResults;
        java.util.Iterator l11;
        boolean $stack14, root, recursive, $stack17, noErrors;
        java.lang.Object $stack15;
        java.io.File pomFile;
        java.util.Set aggregatorFiles;
        DefaultProjectBuilder this;
        java.util.Map projectIndex;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig config;
        org.apache.maven.project.ReactorModelPool$Builder poolBuilder;
        org.apache.maven.project.DefaultProjectBuilder $r0;

        this := @this: DefaultProjectBuilder;

        results := @parameter0: java.util.List;

        interimResults := @parameter1: java.util.List;

        projectIndex := @parameter2: java.util.Map;

        pomFiles := @parameter3: java.util.List;

        aggregatorFiles := @parameter4: java.util.Set;

        root := @parameter5: boolean;

        recursive := @parameter6: boolean;

        config := @parameter7: org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        poolBuilder := @parameter8: org.apache.maven.project.ReactorModelPool$Builder;

        noErrors = 1;

        l11 = interfaceinvoke pomFiles.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label3;

        $stack15 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        pomFile = (java.io.File) $stack15;

        interfaceinvoke aggregatorFiles.<java.util.Set: boolean add(java.lang.Object)>(pomFile);

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack17 = specialinvoke $r0.<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.io.File,java.util.Set,boolean,boolean,org.apache.maven.project.DefaultProjectBuilder$InternalConfig,org.apache.maven.project.ReactorModelPool$Builder)>(results, interimResults, projectIndex, pomFile, aggregatorFiles, root, recursive, config, poolBuilder);

        if $stack17 != 0 goto label2;

        noErrors = 0;

     label2:
        interfaceinvoke aggregatorFiles.<java.util.Set: boolean remove(java.lang.Object)>(pomFile);

        goto label1;

     label3:
        return noErrors;
    }

    private boolean build(java.util.List, java.util.List, java.util.Map, java.io.File, java.util.Set, boolean, boolean, org.apache.maven.project.DefaultProjectBuilder$InternalConfig, org.apache.maven.project.ReactorModelPool$Builder)
    {
        java.io.File pomFile, $stack38, basedir, aggregatorFile, moduleFile, moduleFile#17, $u5, $u8;
        DefaultProjectBuilder this;
        org.apache.maven.project.DefaultProjectBuilder$InternalConfig config;
        org.apache.maven.model.building.ModelBuildingRequest $stack26, $stack27, $stack28, request;
        org.apache.maven.project.ProjectBuildingHelper $stack31;
        org.apache.maven.project.ProjectBuildingRequest $stack32;
        org.apache.maven.model.building.ModelBuilder $stack34;
        org.apache.maven.model.Model $stack36, $stack119, e#4;
        org.apache.maven.project.ReactorModelPool$Builder poolBuilder;
        java.nio.file.Path $stack39;
        boolean isRoot, recursive, $stack51, $stack57, $stack63, $stack64, $stack65, $stack74, noErrors, $stack48, $stack69;
        java.util.List interimResults, $stack46, results, $stack50, $stack87, $stack106, $stack117;
        java.util.Map projectIndex;
        java.util.Iterator l19, problem#26;
        java.util.Set aggregatorFiles;
        java.lang.Object $stack56, $stack89;
        char $stack58, $stack60;
        java.lang.String $stack59, $stack84, $stack103, $stack116, module;
        java.net.URI $stack67, $stack68;
        java.lang.StringBuilder $stack78, $stack79, $stack80, $stack81, $stack82, $stack83, $stack90, $stack98, $stack99, $stack100, $stack101, $stack102, $u6, $u9, $u10;
        org.apache.maven.model.building.ModelProblem$Version $stack85, $stack104;
        org.apache.maven.model.building.ModelProblem$Severity $stack86, $stack105;
        org.apache.maven.model.building.ModelProcessor $stack108;
        java.io.IOException $stack111;
        java.lang.Throwable $stack113;
        org.apache.maven.model.building.ModelBuildingResult result;
        org.apache.maven.project.MavenProject $u0;
        org.apache.maven.project.DefaultModelBuildingListener $u1;
        org.apache.maven.project.DefaultProjectBuildingResult $u2;
        org.apache.maven.project.DefaultProjectBuilder$InterimResult $u3;
        java.util.ArrayList $u4, $u12;
        org.apache.maven.model.building.DefaultModelProblem $u7, $u11;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r3, $r7, $r8;
        org.apache.maven.model.building.ModelBuildingListener $r2;
        org.apache.maven.model.building.ModelBuildingException $r4, $r5, $r6;

        this := @this: DefaultProjectBuilder;

        results := @parameter0: java.util.List;

        interimResults := @parameter1: java.util.List;

        projectIndex := @parameter2: java.util.Map;

        pomFile := @parameter3: java.io.File;

        aggregatorFiles := @parameter4: java.util.Set;

        isRoot := @parameter5: boolean;

        recursive := @parameter6: boolean;

        config := @parameter7: org.apache.maven.project.DefaultProjectBuilder$InternalConfig;

        poolBuilder := @parameter8: org.apache.maven.project.ReactorModelPool$Builder;

        noErrors = 1;

        $u0 = new org.apache.maven.project.MavenProject;

        specialinvoke $u0.<org.apache.maven.project.MavenProject: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.project.MavenProject: void setFile(java.io.File)>(pomFile);

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack26 = specialinvoke $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuildingRequest getModelBuildingRequest(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        $stack27 = interfaceinvoke $stack26.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setPomFile(java.io.File)>(pomFile);

        $stack28 = interfaceinvoke $stack27.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setTwoPhaseBuilding(boolean)>(1);

        request = interfaceinvoke $stack28.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setLocationTracking(boolean)>(1);

        $u1 = new org.apache.maven.project.DefaultModelBuildingListener;

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack31 = $r1.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingHelper projectBuildingHelper>;

        $stack32 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder$InternalConfig: org.apache.maven.project.ProjectBuildingRequest access$000(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>(config);

        specialinvoke $u1.<org.apache.maven.project.DefaultModelBuildingListener: void <init>(org.apache.maven.project.MavenProject,org.apache.maven.project.ProjectBuildingHelper,org.apache.maven.project.ProjectBuildingRequest)>($u0, $stack31, $stack32);

        $r2 = (org.apache.maven.model.building.ModelBuildingListener) $u1;

        interfaceinvoke request.<org.apache.maven.model.building.ModelBuildingRequest: org.apache.maven.model.building.ModelBuildingRequest setModelBuildingListener(org.apache.maven.model.building.ModelBuildingListener)>($r2);

     label01:
        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack34 = $r3.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuilder modelBuilder>;

        result = interfaceinvoke $stack34.<org.apache.maven.model.building.ModelBuilder: org.apache.maven.model.building.ModelBuildingResult build(org.apache.maven.model.building.ModelBuildingRequest)>(request);

     label02:
        goto label06;

     label03:
        $stack113 := @caughtexception;

        $r4 = (org.apache.maven.model.building.ModelBuildingException) $stack113;

        result = virtualinvoke $r4.<org.apache.maven.model.building.ModelBuildingException: org.apache.maven.model.building.ModelBuildingResult getResult()>();

        if result == null goto label04;

        $stack119 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getFileModel()>();

        if $stack119 != null goto label05;

     label04:
        $u2 = new org.apache.maven.project.DefaultProjectBuildingResult;

        $r5 = (org.apache.maven.model.building.ModelBuildingException) $stack113;

        $stack116 = virtualinvoke $r5.<org.apache.maven.model.building.ModelBuildingException: java.lang.String getModelId()>();

        $r6 = (org.apache.maven.model.building.ModelBuildingException) $stack113;

        $stack117 = virtualinvoke $r6.<org.apache.maven.model.building.ModelBuildingException: java.util.List getProblems()>();

        specialinvoke $u2.<org.apache.maven.project.DefaultProjectBuildingResult: void <init>(java.lang.String,java.io.File,java.util.List)>($stack116, pomFile, $stack117);

        interfaceinvoke results.<java.util.List: boolean add(java.lang.Object)>($u2);

        return 0;

     label05:
        noErrors = 0;

     label06:
        $stack36 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getFileModel()>();

        e#4 = virtualinvoke $stack36.<org.apache.maven.model.Model: org.apache.maven.model.Model clone()>();

        $stack38 = virtualinvoke e#4.<org.apache.maven.model.Model: java.io.File getPomFile()>();

        $stack39 = virtualinvoke $stack38.<java.io.File: java.nio.file.Path toPath()>();

        virtualinvoke poolBuilder.<org.apache.maven.project.ReactorModelPool$Builder: org.apache.maven.project.ReactorModelPool$Builder put(java.nio.file.Path,org.apache.maven.model.Model)>($stack39, e#4);

        $u3 = new org.apache.maven.project.DefaultProjectBuilder$InterimResult;

        specialinvoke $u3.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: void <init>(java.io.File,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelBuildingResult,org.apache.maven.project.DefaultModelBuildingListener,boolean)>(pomFile, request, result, $u1, isRoot);

        interfaceinvoke interimResults.<java.util.List: boolean add(java.lang.Object)>($u3);

        if recursive == 0 goto label20;

        basedir = virtualinvoke pomFile.<java.io.File: java.io.File getParentFile()>();

        $u4 = new java.util.ArrayList;

        specialinvoke $u4.<java.util.ArrayList: void <init>()>();

        $stack46 = virtualinvoke e#4.<org.apache.maven.model.Model: java.util.List getModules()>();

        l19 = interfaceinvoke $stack46.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack48 = interfaceinvoke l19.<java.util.Iterator: boolean hasNext()>();

        if $stack48 == 0 goto label19;

        $stack56 = interfaceinvoke l19.<java.util.Iterator: java.lang.Object next()>();

        module = (java.lang.String) $stack56;

        $stack57 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(module);

        if $stack57 == 0 goto label08;

        goto label07;

     label08:
        $stack58 = <java.io.File: char separatorChar>;

        $stack59 = virtualinvoke module.<java.lang.String: java.lang.String replace(char,char)>(92, $stack58);

        $stack60 = <java.io.File: char separatorChar>;

        module = virtualinvoke $stack59.<java.lang.String: java.lang.String replace(char,char)>(47, $stack60);

        $u5 = new java.io.File;

        specialinvoke $u5.<java.io.File: void <init>(java.io.File,java.lang.String)>(basedir, module);

        moduleFile = $u5;

        $stack63 = virtualinvoke $u5.<java.io.File: boolean isDirectory()>();

        if $stack63 == 0 goto label09;

        $r7 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack108 = $r7.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelProcessor modelProcessor>;

        moduleFile = interfaceinvoke $stack108.<org.apache.maven.model.building.ModelProcessor: java.io.File locatePom(java.io.File)>($u5);

     label09:
        $stack64 = virtualinvoke moduleFile.<java.io.File: boolean isFile()>();

        if $stack64 != 0 goto label10;

        $u7 = new org.apache.maven.model.building.DefaultModelProblem;

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack98 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Child module ");

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(moduleFile);

        $stack100 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pomFile);

        $stack102 = virtualinvoke $stack101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $stack103 = virtualinvoke $stack102.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack105 = <org.apache.maven.model.building.ModelProblem$Severity: org.apache.maven.model.building.ModelProblem$Severity ERROR>;

        $stack104 = <org.apache.maven.model.building.ModelProblem$Version: org.apache.maven.model.building.ModelProblem$Version BASE>;

        specialinvoke $u7.<org.apache.maven.model.building.DefaultModelProblem: void <init>(java.lang.String,org.apache.maven.model.building.ModelProblem$Severity,org.apache.maven.model.building.ModelProblem$Version,org.apache.maven.model.Model,int,int,java.lang.Exception)>($stack103, $stack105, $stack104, e#4, -1, -1, null);

        $stack106 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getProblems()>();

        interfaceinvoke $stack106.<java.util.List: boolean add(java.lang.Object)>($u7);

        noErrors = 0;

        goto label07;

     label10:
        $stack65 = staticinvoke <org.codehaus.plexus.util.Os: boolean isFamily(java.lang.String)>("windows");

        if $stack65 == 0 goto label14;

     label11:
        moduleFile#17 = virtualinvoke moduleFile.<java.io.File: java.io.File getCanonicalFile()>();

     label12:
        goto label15;

     label13:
        $stack111 := @caughtexception;

        moduleFile#17 = virtualinvoke moduleFile.<java.io.File: java.io.File getAbsoluteFile()>();

        goto label15;

     label14:
        $u8 = new java.io.File;

        $stack67 = virtualinvoke moduleFile.<java.io.File: java.net.URI toURI()>();

        $stack68 = virtualinvoke $stack67.<java.net.URI: java.net.URI normalize()>();

        specialinvoke $u8.<java.io.File: void <init>(java.net.URI)>($stack68);

        moduleFile#17 = $u8;

     label15:
        $stack69 = interfaceinvoke aggregatorFiles.<java.util.Set: boolean contains(java.lang.Object)>(moduleFile#17);

        if $stack69 == 0 goto label18;

        $u9 = new java.lang.StringBuilder;

        specialinvoke $u9.<java.lang.StringBuilder: void <init>(int)>(256);

        problem#26 = interfaceinvoke aggregatorFiles.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $stack74 = interfaceinvoke problem#26.<java.util.Iterator: boolean hasNext()>();

        if $stack74 == 0 goto label17;

        $stack89 = interfaceinvoke problem#26.<java.util.Iterator: java.lang.Object next()>();

        aggregatorFile = (java.io.File) $stack89;

        $stack90 = virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(aggregatorFile);

        virtualinvoke $stack90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        goto label16;

     label17:
        virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(moduleFile#17);

        $u11 = new org.apache.maven.model.building.DefaultModelProblem;

        $u10 = new java.lang.StringBuilder;

        specialinvoke $u10.<java.lang.StringBuilder: void <init>()>();

        $stack78 = virtualinvoke $u10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Child module ");

        $stack79 = virtualinvoke $stack78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(moduleFile#17);

        $stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pomFile);

        $stack82 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" forms aggregation cycle ");

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u9);

        $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack86 = <org.apache.maven.model.building.ModelProblem$Severity: org.apache.maven.model.building.ModelProblem$Severity ERROR>;

        $stack85 = <org.apache.maven.model.building.ModelProblem$Version: org.apache.maven.model.building.ModelProblem$Version BASE>;

        specialinvoke $u11.<org.apache.maven.model.building.DefaultModelProblem: void <init>(java.lang.String,org.apache.maven.model.building.ModelProblem$Severity,org.apache.maven.model.building.ModelProblem$Version,org.apache.maven.model.Model,int,int,java.lang.Exception)>($stack84, $stack86, $stack85, e#4, -1, -1, null);

        $stack87 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getProblems()>();

        interfaceinvoke $stack87.<java.util.List: boolean add(java.lang.Object)>($u11);

        noErrors = 0;

        goto label07;

     label18:
        interfaceinvoke $u4.<java.util.List: boolean add(java.lang.Object)>(moduleFile#17);

        goto label07;

     label19:
        $u12 = new java.util.ArrayList;

        specialinvoke $u12.<java.util.ArrayList: void <init>()>();

        $u3.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: java.util.List modules> = $u12;

        $stack50 = $u3.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: java.util.List modules>;

        $r8 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack51 = specialinvoke $r8.<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.util.List,java.util.Set,boolean,boolean,org.apache.maven.project.DefaultProjectBuilder$InternalConfig,org.apache.maven.project.ReactorModelPool$Builder)>(results, $stack50, projectIndex, $u4, aggregatorFiles, 0, recursive, config, poolBuilder);

        if $stack51 != 0 goto label20;

        noErrors = 0;

     label20:
        interfaceinvoke projectIndex.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(pomFile, $u0);

        return noErrors;

        catch org.apache.maven.model.building.ModelBuildingException from label01 to label02 with label03;
        catch java.io.IOException from label11 to label12 with label13;
    }

    private boolean build(java.util.List, java.util.List, java.util.Map, java.util.List, org.apache.maven.project.ProjectBuildingRequest, java.util.Map, org.eclipse.aether.RepositorySystemSession)
    {
        java.util.List interimResults, results, $stack25, projects, $stack32, $stack55, $stack62, $stack70;
        java.util.Iterator l9;
        boolean $stack16, $stack26, noErrors, $stack40, $stack29, $stack30;
        java.lang.Object $stack17;
        org.apache.maven.project.DefaultProjectBuilder$InterimResult interimResult;
        org.apache.maven.project.DefaultModelBuildingListener $stack18;
        org.apache.maven.project.MavenProject project;
        DefaultProjectBuilder this;
        org.apache.maven.model.building.ModelBuildingResult $stack20, $stack57, $stack59, result;
        org.apache.maven.model.building.ModelBuildingRequest $stack21;
        org.apache.maven.model.building.ModelBuilder $stack22;
        java.util.Map projectIndex, profilesXmls;
        org.apache.maven.project.ProjectBuildingRequest request;
        org.eclipse.aether.RepositorySystemSession session;
        java.lang.Throwable $stack51, $stack69;
        java.lang.String $stack53;
        java.io.File $stack54;
        org.apache.maven.model.Model $stack58, $stack60, $stack75;
        org.apache.maven.model.building.ModelProblem$Severity $stack73;
        org.apache.maven.project.DependencyResolutionResult resolutionResult;
        org.apache.maven.project.DefaultProjectBuildingResult iarte#33, $u2, $u3, $u4;
        org.apache.maven.model.building.DefaultModelProblem $u0;
        java.util.ArrayList $u1;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r3, $r4;
        java.lang.Exception $r2;
        org.apache.maven.model.building.ModelBuildingException $r5, $r6, $r7;

        this := @this: DefaultProjectBuilder;

        results := @parameter0: java.util.List;

        projects := @parameter1: java.util.List;

        projectIndex := @parameter2: java.util.Map;

        interimResults := @parameter3: java.util.List;

        request := @parameter4: org.apache.maven.project.ProjectBuildingRequest;

        profilesXmls := @parameter5: java.util.Map;

        session := @parameter6: org.eclipse.aether.RepositorySystemSession;

        noErrors = 1;

        l9 = interfaceinvoke interimResults.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack16 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label16;

        $stack17 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        interimResult = (org.apache.maven.project.DefaultProjectBuilder$InterimResult) $stack17;

        $stack18 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: org.apache.maven.project.DefaultModelBuildingListener listener>;

        project = virtualinvoke $stack18.<org.apache.maven.project.DefaultModelBuildingListener: org.apache.maven.project.MavenProject getProject()>();

     label02:
        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack22 = $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuilder modelBuilder>;

        $stack21 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: org.apache.maven.model.building.ModelBuildingRequest request>;

        $stack20 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: org.apache.maven.model.building.ModelBuildingResult result>;

        result = interfaceinvoke $stack22.<org.apache.maven.model.building.ModelBuilder: org.apache.maven.model.building.ModelBuildingResult build(org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelBuildingResult)>($stack21, $stack20);

     label03:
        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $r1.<org.apache.maven.project.DefaultProjectBuilder: void initProject(org.apache.maven.project.MavenProject,java.util.Map,boolean,org.apache.maven.model.building.ModelBuildingResult,java.util.Map,org.apache.maven.project.ProjectBuildingRequest)>(project, projectIndex, 1, result, profilesXmls, request);

     label04:
        goto label06;

     label05:
        $stack69 := @caughtexception;

        $stack70 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getProblems()>();

        $u0 = new org.apache.maven.model.building.DefaultModelProblem;

        $stack73 = <org.apache.maven.model.building.ModelProblem$Severity: org.apache.maven.model.building.ModelProblem$Severity ERROR>;

        $stack75 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getEffectiveModel()>();

        $r2 = (java.lang.Exception) $stack69;

        specialinvoke $u0.<org.apache.maven.model.building.DefaultModelProblem: void <init>(java.lang.String,org.apache.maven.model.building.ModelProblem$Severity,org.apache.maven.model.building.ModelProblem$Version,org.apache.maven.model.Model,int,int,java.lang.Exception)>(null, $stack73, null, $stack75, -1, -1, $r2);

        interfaceinvoke $stack70.<java.util.List: boolean add(java.lang.Object)>($u0);

     label06:
        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $stack25 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: java.util.List modules>;

        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack26 = specialinvoke $r3.<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.util.List,org.apache.maven.project.ProjectBuildingRequest,java.util.Map,org.eclipse.aether.RepositorySystemSession)>(results, $u1, projectIndex, $stack25, request, profilesXmls, session);

        if $stack26 == 0 goto label07;

        if noErrors == 0 goto label07;

        $stack40 = 1;

        goto label08;

     label07:
        $stack40 = 0;

     label08:
        noErrors = $stack40;

        interfaceinvoke projects.<java.util.List: boolean addAll(java.util.Collection)>($u1);

        interfaceinvoke projects.<java.util.List: boolean add(java.lang.Object)>(project);

        $stack29 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: boolean root>;

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setExecutionRoot(boolean)>($stack29);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setCollectedProjects(java.util.List)>($u1);

        resolutionResult = null;

        $stack30 = interfaceinvoke request.<org.apache.maven.project.ProjectBuildingRequest: boolean isResolveDependencies()>();

        if $stack30 == 0 goto label09;

        $r4 = (org.apache.maven.project.DefaultProjectBuilder) this;

        resolutionResult = specialinvoke $r4.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.DependencyResolutionResult resolveDependencies(org.apache.maven.project.MavenProject,org.eclipse.aether.RepositorySystemSession)>(project, session);

     label09:
        $u2 = new org.apache.maven.project.DefaultProjectBuildingResult;

        $stack32 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getProblems()>();

        specialinvoke $u2.<org.apache.maven.project.DefaultProjectBuildingResult: void <init>(org.apache.maven.project.MavenProject,java.util.List,org.apache.maven.project.DependencyResolutionResult)>(project, $stack32, resolutionResult);

        interfaceinvoke results.<java.util.List: boolean add(java.lang.Object)>($u2);

     label10:
        goto label15;

     label11:
        $stack51 := @caughtexception;

        if project == null goto label12;

        $stack57 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: org.apache.maven.model.building.ModelBuildingResult result>;

        $stack58 = interfaceinvoke $stack57.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getEffectiveModel()>();

        if $stack58 != null goto label13;

     label12:
        $u3 = new org.apache.maven.project.DefaultProjectBuildingResult;

        $r5 = (org.apache.maven.model.building.ModelBuildingException) $stack51;

        $stack53 = virtualinvoke $r5.<org.apache.maven.model.building.ModelBuildingException: java.lang.String getModelId()>();

        $stack54 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: java.io.File pomFile>;

        $r6 = (org.apache.maven.model.building.ModelBuildingException) $stack51;

        $stack55 = virtualinvoke $r6.<org.apache.maven.model.building.ModelBuildingException: java.util.List getProblems()>();

        specialinvoke $u3.<org.apache.maven.project.DefaultProjectBuildingResult: void <init>(java.lang.String,java.io.File,java.util.List)>($stack53, $stack54, $stack55);

        iarte#33 = $u3;

        goto label14;

     label13:
        $stack59 = interimResult.<org.apache.maven.project.DefaultProjectBuilder$InterimResult: org.apache.maven.model.building.ModelBuildingResult result>;

        $stack60 = interfaceinvoke $stack59.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getEffectiveModel()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setModel(org.apache.maven.model.Model)>($stack60);

        $u4 = new org.apache.maven.project.DefaultProjectBuildingResult;

        $r7 = (org.apache.maven.model.building.ModelBuildingException) $stack51;

        $stack62 = virtualinvoke $r7.<org.apache.maven.model.building.ModelBuildingException: java.util.List getProblems()>();

        specialinvoke $u4.<org.apache.maven.project.DefaultProjectBuildingResult: void <init>(org.apache.maven.project.MavenProject,java.util.List,org.apache.maven.project.DependencyResolutionResult)>(project, $stack62, null);

        iarte#33 = $u4;

     label14:
        interfaceinvoke results.<java.util.List: boolean add(java.lang.Object)>(iarte#33);

        noErrors = 0;

     label15:
        goto label01;

     label16:
        return noErrors;

        catch org.apache.maven.artifact.InvalidArtifactRTException from label03 to label04 with label05;
        catch org.apache.maven.model.building.ModelBuildingException from label02 to label10 with label11;
    }

    private void initProject(org.apache.maven.project.MavenProject, java.util.Map, boolean, org.apache.maven.model.building.ModelBuildingResult, java.util.Map, org.apache.maven.project.ProjectBuildingRequest)
    {
        org.apache.maven.model.building.ModelBuildingResult result;
        org.apache.maven.model.Model model, $stack19;
        org.apache.maven.project.MavenProject project;
        DefaultProjectBuilder this;
        java.util.Map projects, profilesXmls, $r9;
        boolean buildParentIfNotExisting, $stack45, $stack49, $stack60, $stack62, $stack78, $stack80, $stack100, $stack107, $stack41;
        org.apache.maven.project.ProjectBuildingRequest projectBuildingRequest;
        org.apache.maven.bridge.MavenRepositorySystem $stack20, $stack52, $stack64, $stack68, $stack82, $stack86, $stack109, $stack127, $stack132;
        java.lang.String $stack21, $stack22, $stack23, $stack25, $stack59, $stack61, $stack77, $stack79, $stack106, $stack110, $stack111, $stack124, $stack125, $stack126, $stack153, $stack154, $stack155, $stack160, $stack162, $stack167, $stack169, $stack31, modelId, version;
        org.apache.maven.artifact.Artifact projectArtifact, artifact;
        java.io.File $stack27;
        java.util.List $stack43, $stack47, $stack67, $stack71, $stack85, $stack89, $stack95, $stack96, $stack137, $stack138, $stack29, $stack32, $stack34, $stack37, $stack38, $stack39, artifact#68;
        org.apache.maven.model.DistributionManagement $stack55, $stack57, $stack72, $stack75, $stack53, $stack54;
        org.apache.maven.model.DeploymentRepository $stack56, $stack73, artifact#92;
        org.eclipse.aether.RepositorySystemSession $stack65, $stack69, $stack83, $stack87;
        org.apache.maven.artifact.repository.ArtifactRepository[] $stack66, $stack70, $stack84, $stack88;
        int $stack97;
        java.lang.Object $stack105, $stack122, $stack131, $stack136, $stack30, pp#72;
        java.lang.Throwable $stack156, $stack163;
        java.lang.StringBuilder $stack159, $stack161, $stack166, $stack168, $u6, $u8;
        org.apache.maven.model.Build build;
        java.util.Iterator pluginArtifacts, modelId#59, plugin#63, pp#69;
        org.apache.maven.model.Plugin plugin, $u3;
        org.apache.maven.model.ReportPlugin artifact;
        org.apache.maven.model.Extension artifact#70;
        org.apache.maven.model.DependencyManagement artifact#73;
        org.apache.maven.artifact.repository.ArtifactRepository version#93;
        java.util.ArrayList $u0;
        java.util.HashSet $u1, $u2, $u4;
        org.apache.maven.project.DefaultProjectBuilder$1 $u5;
        java.lang.IllegalStateException $u7, $u9;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r14, $r15;
        org.apache.maven.model.Repository $r10, $r13;

        this := @this: DefaultProjectBuilder;

        project := @parameter0: org.apache.maven.project.MavenProject;

        projects := @parameter1: java.util.Map;

        buildParentIfNotExisting := @parameter2: boolean;

        result := @parameter3: org.apache.maven.model.building.ModelBuildingResult;

        profilesXmls := @parameter4: java.util.Map;

        projectBuildingRequest := @parameter5: org.apache.maven.project.ProjectBuildingRequest;

        model = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getEffectiveModel()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setModel(org.apache.maven.model.Model)>(model);

        $stack19 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getFileModel()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setOriginalModel(org.apache.maven.model.Model)>($stack19);

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $r0.<org.apache.maven.project.DefaultProjectBuilder: void initParent(org.apache.maven.project.MavenProject,java.util.Map,boolean,org.apache.maven.model.building.ModelBuildingResult,org.apache.maven.project.ProjectBuildingRequest)>(project, projects, buildParentIfNotExisting, result, projectBuildingRequest);

        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack20 = $r1.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack22 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack23 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack25 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getPackaging()>();

        projectArtifact = virtualinvoke $stack20.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($stack21, $stack22, $stack23, null, $stack25);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setArtifact(org.apache.maven.artifact.Artifact)>(projectArtifact);

        $stack27 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        if $stack27 == null goto label01;

        if buildParentIfNotExisting == 0 goto label01;

        build = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack153 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getScriptSourceDirectory()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void addScriptSourceRoot(java.lang.String)>($stack153);

        $stack154 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getSourceDirectory()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void addCompileSourceRoot(java.lang.String)>($stack154);

        $stack155 = virtualinvoke build.<org.apache.maven.model.Build: java.lang.String getTestSourceDirectory()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void addTestCompileSourceRoot(java.lang.String)>($stack155);

     label01:
        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $stack29 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack30 = interfaceinvoke $stack29.<java.util.List: java.lang.Object get(int)>(0);

        $stack31 = (java.lang.String) $stack30;

        $stack32 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getActivePomProfiles(java.lang.String)>($stack31);

        interfaceinvoke $u0.<java.util.List: boolean addAll(java.util.Collection)>($stack32);

        $stack34 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getActiveExternalProfiles()>();

        interfaceinvoke $u0.<java.util.List: boolean addAll(java.util.Collection)>($stack34);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setActiveProfiles(java.util.List)>($u0);

        $stack37 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getActiveExternalProfiles()>();

        $r2 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack38 = specialinvoke $r2.<org.apache.maven.project.DefaultProjectBuilder: java.util.List getProfileIds(java.util.List)>($stack37);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setInjectedProfileIds(java.lang.String,java.util.List)>("external", $stack38);

        $stack39 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        pluginArtifacts = interfaceinvoke $stack39.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack41 = interfaceinvoke pluginArtifacts.<java.util.Iterator: boolean hasNext()>();

        if $stack41 == 0 goto label03;

        $stack136 = interfaceinvoke pluginArtifacts.<java.util.Iterator: java.lang.Object next()>();

        modelId = (java.lang.String) $stack136;

        $stack137 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getActivePomProfiles(java.lang.String)>(modelId);

        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack138 = specialinvoke $r3.<org.apache.maven.project.DefaultProjectBuilder: java.util.List getProfileIds(java.util.List)>($stack137);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setInjectedProfileIds(java.lang.String,java.util.List)>(modelId, $stack138);

        goto label02;

     label03:
        virtualinvoke project.<org.apache.maven.project.MavenProject: void setProjectBuildingRequest(org.apache.maven.project.ProjectBuildingRequest)>(projectBuildingRequest);

        $u1 = new java.util.HashSet;

        specialinvoke $u1.<java.util.HashSet: void <init>()>();

        $stack43 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        modelId#59 = interfaceinvoke $stack43.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $stack45 = interfaceinvoke modelId#59.<java.util.Iterator: boolean hasNext()>();

        if $stack45 == 0 goto label06;

        $stack131 = interfaceinvoke modelId#59.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack131;

        $r4 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack132 = $r4.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        artifact = virtualinvoke $stack132.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin)>(plugin);

        if artifact == null goto label05;

        interfaceinvoke $u1.<java.util.Set: boolean add(java.lang.Object)>(artifact);

     label05:
        goto label04;

     label06:
        virtualinvoke project.<org.apache.maven.project.MavenProject: void setPluginArtifacts(java.util.Set)>($u1);

        $u2 = new java.util.HashSet;

        specialinvoke $u2.<java.util.HashSet: void <init>()>();

        $stack47 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getReportPlugins()>();

        plugin#63 = interfaceinvoke $stack47.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack49 = interfaceinvoke plugin#63.<java.util.Iterator: boolean hasNext()>();

        if $stack49 == 0 goto label09;

        $stack122 = interfaceinvoke plugin#63.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.model.ReportPlugin) $stack122;

        $u3 = new org.apache.maven.model.Plugin;

        specialinvoke $u3.<org.apache.maven.model.Plugin: void <init>()>();

        $stack124 = virtualinvoke artifact.<org.apache.maven.model.ReportPlugin: java.lang.String getGroupId()>();

        virtualinvoke $u3.<org.apache.maven.model.Plugin: void setGroupId(java.lang.String)>($stack124);

        $stack125 = virtualinvoke artifact.<org.apache.maven.model.ReportPlugin: java.lang.String getArtifactId()>();

        virtualinvoke $u3.<org.apache.maven.model.Plugin: void setArtifactId(java.lang.String)>($stack125);

        $stack126 = virtualinvoke artifact.<org.apache.maven.model.ReportPlugin: java.lang.String getVersion()>();

        virtualinvoke $u3.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>($stack126);

        $r5 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack127 = $r5.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        artifact = virtualinvoke $stack127.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin)>($u3);

        if artifact == null goto label08;

        interfaceinvoke $u2.<java.util.Set: boolean add(java.lang.Object)>(artifact);

     label08:
        goto label07;

     label09:
        virtualinvoke project.<org.apache.maven.project.MavenProject: void setReportArtifacts(java.util.Set)>($u2);

        $u4 = new java.util.HashSet;

        specialinvoke $u4.<java.util.HashSet: void <init>()>();

        artifact#68 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getBuildExtensions()>();

        if artifact#68 == null goto label14;

        pp#69 = interfaceinvoke artifact#68.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $stack100 = interfaceinvoke pp#69.<java.util.Iterator: boolean hasNext()>();

        if $stack100 == 0 goto label14;

        $stack105 = interfaceinvoke pp#69.<java.util.Iterator: java.lang.Object next()>();

        artifact#70 = (org.apache.maven.model.Extension) $stack105;

        $stack106 = virtualinvoke artifact#70.<org.apache.maven.model.Extension: java.lang.String getVersion()>();

        $stack107 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack106);

        if $stack107 == 0 goto label11;

        version = "RELEASE";

        goto label12;

     label11:
        version = virtualinvoke artifact#70.<org.apache.maven.model.Extension: java.lang.String getVersion()>();

     label12:
        $r6 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack109 = $r6.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack110 = virtualinvoke artifact#70.<org.apache.maven.model.Extension: java.lang.String getGroupId()>();

        $stack111 = virtualinvoke artifact#70.<org.apache.maven.model.Extension: java.lang.String getArtifactId()>();

        artifact = virtualinvoke $stack109.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($stack110, $stack111, version, null, "jar");

        if artifact == null goto label13;

        interfaceinvoke $u4.<java.util.Set: boolean add(java.lang.Object)>(artifact);

     label13:
        goto label10;

     label14:
        virtualinvoke project.<org.apache.maven.project.MavenProject: void setExtensionArtifacts(java.util.Set)>($u4);

        pp#72 = null;

        $r7 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack52 = $r7.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        if $stack52 == null goto label16;

        artifact#73 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DependencyManagement getDependencyManagement()>();

        if artifact#73 == null goto label15;

        $stack95 = virtualinvoke artifact#73.<org.apache.maven.model.DependencyManagement: java.util.List getDependencies()>();

        if $stack95 == null goto label15;

        $stack96 = virtualinvoke artifact#73.<org.apache.maven.model.DependencyManagement: java.util.List getDependencies()>();

        $stack97 = interfaceinvoke $stack96.<java.util.List: int size()>();

        if $stack97 <= 0 goto label15;

        $u5 = new org.apache.maven.project.DefaultProjectBuilder$1;

        $r8 = (org.apache.maven.project.DefaultProjectBuilder) this;

        specialinvoke $u5.<org.apache.maven.project.DefaultProjectBuilder$1: void <init>(org.apache.maven.project.DefaultProjectBuilder,org.apache.maven.model.DependencyManagement)>($r8, artifact#73);

        pp#72 = $u5;

        goto label16;

     label15:
        pp#72 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

     label16:
        $r9 = (java.util.Map) pp#72;

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setManagedVersionMap(java.util.Map)>($r9);

        $stack53 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        if $stack53 == null goto label20;

        $stack72 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        $stack73 = virtualinvoke $stack72.<org.apache.maven.model.DistributionManagement: org.apache.maven.model.DeploymentRepository getRepository()>();

        if $stack73 == null goto label20;

     label17:
        $stack75 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        artifact#92 = virtualinvoke $stack75.<org.apache.maven.model.DistributionManagement: org.apache.maven.model.DeploymentRepository getRepository()>();

        $stack77 = virtualinvoke artifact#92.<org.apache.maven.model.DeploymentRepository: java.lang.String getId()>();

        $stack78 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack77);

        if $stack78 != 0 goto label18;

        $stack79 = virtualinvoke artifact#92.<org.apache.maven.model.DeploymentRepository: java.lang.String getUrl()>();

        $stack80 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack79);

        if $stack80 != 0 goto label18;

        $r10 = (org.apache.maven.model.Repository) artifact#92;

        version#93 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository)>($r10);

        $r11 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack82 = $r11.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack83 = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack84 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[1];

        $stack84[0] = version#93;

        $stack85 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack84);

        virtualinvoke $stack82.<org.apache.maven.bridge.MavenRepositorySystem: void injectProxy(org.eclipse.aether.RepositorySystemSession,java.util.List)>($stack83, $stack85);

        $r12 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack86 = $r12.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack87 = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack88 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[1];

        $stack88[0] = version#93;

        $stack89 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack88);

        virtualinvoke $stack86.<org.apache.maven.bridge.MavenRepositorySystem: void injectAuthentication(org.eclipse.aether.RepositorySystemSession,java.util.List)>($stack87, $stack89);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setReleaseArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)>(version#93);

     label18:
        goto label20;

     label19:
        $stack163 := @caughtexception;

        $u7 = new java.lang.IllegalStateException;

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack166 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create release distribution repository for ");

        $stack167 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack168 = virtualinvoke $stack166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack167);

        $stack169 = virtualinvoke $stack168.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($stack169, $stack163);

        throw $u7;

     label20:
        $stack54 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        if $stack54 == null goto label24;

        $stack55 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        $stack56 = virtualinvoke $stack55.<org.apache.maven.model.DistributionManagement: org.apache.maven.model.DeploymentRepository getSnapshotRepository()>();

        if $stack56 == null goto label24;

     label21:
        $stack57 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        artifact#92 = virtualinvoke $stack57.<org.apache.maven.model.DistributionManagement: org.apache.maven.model.DeploymentRepository getSnapshotRepository()>();

        $stack59 = virtualinvoke artifact#92.<org.apache.maven.model.DeploymentRepository: java.lang.String getId()>();

        $stack60 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack59);

        if $stack60 != 0 goto label22;

        $stack61 = virtualinvoke artifact#92.<org.apache.maven.model.DeploymentRepository: java.lang.String getUrl()>();

        $stack62 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack61);

        if $stack62 != 0 goto label22;

        $r13 = (org.apache.maven.model.Repository) artifact#92;

        version#93 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository)>($r13);

        $r14 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack64 = $r14.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack65 = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack66 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[1];

        $stack66[0] = version#93;

        $stack67 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack66);

        virtualinvoke $stack64.<org.apache.maven.bridge.MavenRepositorySystem: void injectProxy(org.eclipse.aether.RepositorySystemSession,java.util.List)>($stack65, $stack67);

        $r15 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack68 = $r15.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack69 = interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack70 = newarray (org.apache.maven.artifact.repository.ArtifactRepository)[1];

        $stack70[0] = version#93;

        $stack71 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack70);

        virtualinvoke $stack68.<org.apache.maven.bridge.MavenRepositorySystem: void injectAuthentication(org.eclipse.aether.RepositorySystemSession,java.util.List)>($stack69, $stack71);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setSnapshotArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)>(version#93);

     label22:
        goto label24;

     label23:
        $stack156 := @caughtexception;

        $u9 = new java.lang.IllegalStateException;

        $u8 = new java.lang.StringBuilder;

        specialinvoke $u8.<java.lang.StringBuilder: void <init>()>();

        $stack159 = virtualinvoke $u8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create snapshot distribution repository for ");

        $stack160 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack161 = virtualinvoke $stack159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack160);

        $stack162 = virtualinvoke $stack161.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($stack162, $stack156);

        throw $u9;

     label24:
        return;

        catch org.apache.maven.artifact.InvalidRepositoryException from label17 to label18 with label19;
        catch org.apache.maven.artifact.InvalidRepositoryException from label21 to label22 with label23;
    }

    private void initParent(org.apache.maven.project.MavenProject, java.util.Map, boolean, org.apache.maven.model.building.ModelBuildingResult, org.apache.maven.project.ProjectBuildingRequest)
    {
        org.apache.maven.model.building.ModelBuildingResult result;
        java.util.List $stack14, $stack21, $stack31, $stack38, $stack44;
        int $stack15;
        java.lang.String parentGroupId, parentVersion, $stack19, parentModelId, $stack40, $stack46, $stack54, $stack56, $stack60, $stack62, $stack69, $stack71, $stack75, $stack77;
        org.apache.maven.project.MavenProject project, parent;
        DefaultProjectBuilder this;
        org.apache.maven.bridge.MavenRepositorySystem $stack18;
        org.apache.maven.artifact.Artifact $stack20, e;
        java.lang.Object $stack22, $stack25, $stack39, $stack45;
        org.apache.maven.model.Model $stack23, $stack42;
        java.io.File parentPomFile, $stack27, $stack26;
        java.util.Map projects;
        boolean buildParentIfNotExisting, $stack41, $stack50, $stack65;
        org.apache.maven.project.ProjectBuildingRequest projectBuildingRequest;
        org.apache.maven.project.ProjectBuildingResult $stack34, $stack36;
        java.lang.Throwable $stack48, $stack63;
        org.codehaus.plexus.logging.Logger $stack49, $stack52, $stack58, $stack64, $stack67, $stack73;
        java.lang.StringBuilder $stack53, $stack55, $stack59, $stack61, $stack68, $stack70, $stack74, $stack76, $u0, $u1, $u2, $u3;
        org.apache.maven.project.DefaultProjectBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: DefaultProjectBuilder;

        project := @parameter0: org.apache.maven.project.MavenProject;

        projects := @parameter1: java.util.Map;

        buildParentIfNotExisting := @parameter2: boolean;

        result := @parameter3: org.apache.maven.model.building.ModelBuildingResult;

        projectBuildingRequest := @parameter4: org.apache.maven.project.ProjectBuildingRequest;

        $stack14 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack15 = interfaceinvoke $stack14.<java.util.List: int size()>();

        if $stack15 <= 1 goto label01;

        $stack38 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack39 = interfaceinvoke $stack38.<java.util.List: java.lang.Object get(int)>(1);

        $stack40 = (java.lang.String) $stack39;

        $stack41 = virtualinvoke $stack40.<java.lang.String: boolean isEmpty()>();

        if $stack41 != 0 goto label01;

        $stack44 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack45 = interfaceinvoke $stack44.<java.util.List: java.lang.Object get(int)>(1);

        $stack46 = (java.lang.String) $stack45;

        $stack42 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getRawModel(java.lang.String)>($stack46);

        goto label02;

     label01:
        $stack42 = null;

     label02:
        if $stack42 == null goto label14;

        parentGroupId = staticinvoke <org.apache.maven.project.DefaultProjectBuilder: java.lang.String inheritedGroupId(org.apache.maven.model.building.ModelBuildingResult,int)>(result, 1);

        parentVersion = staticinvoke <org.apache.maven.project.DefaultProjectBuilder: java.lang.String inheritedVersion(org.apache.maven.model.building.ModelBuildingResult,int)>(result, 1);

        $r0 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack18 = $r0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        $stack19 = virtualinvoke $stack42.<org.apache.maven.model.Model: java.lang.String getArtifactId()>();

        $stack20 = virtualinvoke $stack18.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createProjectArtifact(java.lang.String,java.lang.String,java.lang.String)>(parentGroupId, $stack19, parentVersion);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setParentArtifact(org.apache.maven.artifact.Artifact)>($stack20);

        $stack21 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack22 = interfaceinvoke $stack21.<java.util.List: java.lang.Object get(int)>(1);

        parentModelId = (java.lang.String) $stack22;

        $stack23 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getRawModel(java.lang.String)>(parentModelId);

        parentPomFile = virtualinvoke $stack23.<org.apache.maven.model.Model: java.io.File getPomFile()>();

        $stack25 = interfaceinvoke projects.<java.util.Map: java.lang.Object get(java.lang.Object)>(parentPomFile);

        parent = (org.apache.maven.project.MavenProject) $stack25;

        if parent != null goto label13;

        if buildParentIfNotExisting == 0 goto label13;

        $stack31 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemoteArtifactRepositories()>();

        interfaceinvoke projectBuildingRequest.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRemoteRepositories(java.util.List)>($stack31);

        if parentPomFile == null goto label08;

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setParentFile(java.io.File)>(parentPomFile);

     label03:
        $r1 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack36 = virtualinvoke $r1.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(parentPomFile, projectBuildingRequest);

        parent = interfaceinvoke $stack36.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

     label04:
        goto label13;

     label05:
        $stack63 := @caughtexception;

        $r2 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack64 = $r2.<org.apache.maven.project.DefaultProjectBuilder: org.codehaus.plexus.logging.Logger logger>;

        $stack65 = interfaceinvoke $stack64.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack65 == 0 goto label06;

        $r3 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack73 = $r3.<org.apache.maven.project.DefaultProjectBuilder: org.codehaus.plexus.logging.Logger logger>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack74 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to build parent project for ");

        $stack75 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack76 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack75);

        $stack77 = virtualinvoke $stack76.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack73.<org.codehaus.plexus.logging.Logger: void warn(java.lang.String,java.lang.Throwable)>($stack77, $stack63);

        goto label07;

     label06:
        $r4 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack67 = $r4.<org.apache.maven.project.DefaultProjectBuilder: org.codehaus.plexus.logging.Logger logger>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack68 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to build parent project for ");

        $stack69 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack70 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack69);

        $stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack67.<org.codehaus.plexus.logging.Logger: void warn(java.lang.String)>($stack71);

     label07:
        goto label13;

     label08:
        e = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getParentArtifact()>();

     label09:
        $r5 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack34 = virtualinvoke $r5.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.artifact.Artifact,org.apache.maven.project.ProjectBuildingRequest)>(e, projectBuildingRequest);

        parent = interfaceinvoke $stack34.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

     label10:
        goto label13;

     label11:
        $stack48 := @caughtexception;

        $r6 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack49 = $r6.<org.apache.maven.project.DefaultProjectBuilder: org.codehaus.plexus.logging.Logger logger>;

        $stack50 = interfaceinvoke $stack49.<org.codehaus.plexus.logging.Logger: boolean isDebugEnabled()>();

        if $stack50 == 0 goto label12;

        $r7 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack58 = $r7.<org.apache.maven.project.DefaultProjectBuilder: org.codehaus.plexus.logging.Logger logger>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack59 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to build parent project for ");

        $stack60 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60);

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack58.<org.codehaus.plexus.logging.Logger: void warn(java.lang.String,java.lang.Throwable)>($stack62, $stack48);

        goto label13;

     label12:
        $r8 = (org.apache.maven.project.DefaultProjectBuilder) this;

        $stack52 = $r8.<org.apache.maven.project.DefaultProjectBuilder: org.codehaus.plexus.logging.Logger logger>;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack53 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to build parent project for ");

        $stack54 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack55 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack54);

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack52.<org.codehaus.plexus.logging.Logger: void warn(java.lang.String)>($stack56);

     label13:
        virtualinvoke project.<org.apache.maven.project.MavenProject: void setParent(org.apache.maven.project.MavenProject)>(parent);

        $stack26 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        if $stack26 != null goto label14;

        if parent == null goto label14;

        $stack27 = virtualinvoke parent.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setParentFile(java.io.File)>($stack27);

     label14:
        return;

        catch org.apache.maven.project.ProjectBuildingException from label03 to label04 with label05;
        catch org.apache.maven.project.ProjectBuildingException from label09 to label10 with label11;
    }

    private static java.lang.String inheritedGroupId(org.apache.maven.model.building.ModelBuildingResult, int)
    {
        org.apache.maven.model.building.ModelBuildingResult result;
        java.util.List $stack5;
        int modelIndex, $stack10;
        java.lang.Object $stack6;
        java.lang.String modelId, $stack9, groupId, $stack11;
        boolean $stack7;
        org.apache.maven.model.Model model;

        result := @parameter0: org.apache.maven.model.building.ModelBuildingResult;

        modelIndex := @parameter1: int;

        groupId = null;

        $stack5 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack6 = interfaceinvoke $stack5.<java.util.List: java.lang.Object get(int)>(modelIndex);

        modelId = (java.lang.String) $stack6;

        $stack7 = virtualinvoke modelId.<java.lang.String: boolean isEmpty()>();

        if $stack7 != 0 goto label3;

        model = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getRawModel(java.lang.String)>(modelId);

        $stack9 = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        if $stack9 == null goto label1;

        $stack11 = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        goto label2;

     label1:
        $stack10 = modelIndex + 1;

        $stack11 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder: java.lang.String inheritedGroupId(org.apache.maven.model.building.ModelBuildingResult,int)>(result, $stack10);

     label2:
        groupId = $stack11;

     label3:
        return groupId;
    }

    private static java.lang.String inheritedVersion(org.apache.maven.model.building.ModelBuildingResult, int)
    {
        org.apache.maven.model.building.ModelBuildingResult result;
        java.util.List $stack5;
        int modelIndex, $stack10;
        java.lang.Object $stack6;
        java.lang.String modelId, $stack9, version, $stack11;
        boolean $stack7;
        org.apache.maven.model.Model model;

        result := @parameter0: org.apache.maven.model.building.ModelBuildingResult;

        modelIndex := @parameter1: int;

        version = null;

        $stack5 = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: java.util.List getModelIds()>();

        $stack6 = interfaceinvoke $stack5.<java.util.List: java.lang.Object get(int)>(modelIndex);

        modelId = (java.lang.String) $stack6;

        $stack7 = virtualinvoke modelId.<java.lang.String: boolean isEmpty()>();

        if $stack7 != 0 goto label3;

        model = interfaceinvoke result.<org.apache.maven.model.building.ModelBuildingResult: org.apache.maven.model.Model getRawModel(java.lang.String)>(modelId);

        $stack9 = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getVersion()>();

        if $stack9 == null goto label1;

        $stack11 = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getVersion()>();

        goto label2;

     label1:
        $stack10 = modelIndex + 1;

        $stack11 = staticinvoke <org.apache.maven.project.DefaultProjectBuilder: java.lang.String inheritedVersion(org.apache.maven.model.building.ModelBuildingResult,int)>(result, $stack10);

     label2:
        version = $stack11;

     label3:
        return version;
    }

    static org.apache.maven.bridge.MavenRepositorySystem access$500(org.apache.maven.project.DefaultProjectBuilder)
    {
        org.apache.maven.project.DefaultProjectBuilder x0;
        org.apache.maven.bridge.MavenRepositorySystem $stack1;

        x0 := @parameter0: org.apache.maven.project.DefaultProjectBuilder;

        $stack1 = x0.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.bridge.MavenRepositorySystem repositorySystem>;

        return $stack1;
    }

    static org.eclipse.aether.RepositorySystem access$600(org.apache.maven.project.DefaultProjectBuilder)
    {
        org.apache.maven.project.DefaultProjectBuilder x0;
        org.eclipse.aether.RepositorySystem $stack1;

        x0 := @parameter0: org.apache.maven.project.DefaultProjectBuilder;

        $stack1 = x0.<org.apache.maven.project.DefaultProjectBuilder: org.eclipse.aether.RepositorySystem repoSystem>;

        return $stack1;
    }
}
