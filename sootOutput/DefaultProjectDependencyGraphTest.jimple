public class DefaultProjectDependencyGraphTest extends java.lang.Object
{
    private final org.apache.maven.project.MavenProject aProject;
    private final org.apache.maven.project.MavenProject depender1;
    private final org.apache.maven.project.MavenProject depender2;
    private final org.apache.maven.project.MavenProject depender3;
    private final org.apache.maven.project.MavenProject depender4;
    private final org.apache.maven.project.MavenProject transitiveOnly;

    public void <init>()
    {
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack1, $stack3, $stack7, $stack9, $stack13, $stack15, $stack19, $stack21, $stack24, $stack28, $stack30, $stack34;
        org.apache.maven.model.Dependency[] $stack2, $stack8, $stack14, $stack20, $stack29;
        org.apache.maven.model.Dependency $stack5, $stack11, $stack17, $stack23, $stack26, $stack32;
        java.util.List $stack6, $stack12, $stack18, $stack27, $stack33;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: DefaultProjectDependencyGraphTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject createA()>();

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject> = $stack1;

        $stack2 = newarray (org.apache.maven.model.Dependency)[1];

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack3 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack5 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>($stack3);

        $stack2[0] = $stack5;

        $stack6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack2);

        $stack7 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject createProject(java.util.List,java.lang.String)>($stack6, "depender1");

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1> = $stack7;

        $stack8 = newarray (org.apache.maven.model.Dependency)[1];

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack11 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>($stack9);

        $stack8[0] = $stack11;

        $stack12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack8);

        $stack13 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject createProject(java.util.List,java.lang.String)>($stack12, "depender2");

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2> = $stack13;

        $stack14 = newarray (org.apache.maven.model.Dependency)[1];

        $r5 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack15 = $r5.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack17 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>($stack15);

        $stack14[0] = $stack17;

        $stack18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack14);

        $stack19 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject createProject(java.util.List,java.lang.String)>($stack18, "depender3");

        $r6 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $r6.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3> = $stack19;

        $stack20 = newarray (org.apache.maven.model.Dependency)[2];

        $r7 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack21 = $r7.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack23 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>($stack21);

        $stack20[0] = $stack23;

        $r8 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack24 = $r8.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack26 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>($stack24);

        $stack20[1] = $stack26;

        $stack27 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack20);

        $stack28 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject createProject(java.util.List,java.lang.String)>($stack27, "depender4");

        $r9 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $r9.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender4> = $stack28;

        $stack29 = newarray (org.apache.maven.model.Dependency)[1];

        $r10 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack30 = $r10.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack32 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)>($stack30);

        $stack29[0] = $stack32;

        $stack33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack29);

        $stack34 = staticinvoke <org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject createProject(java.util.List,java.lang.String)>($stack33, "depender5");

        $r11 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $r11.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject transitiveOnly> = $stack34;

        return;
    }

    public void testGetSortedProjects() throws org.apache.maven.project.DuplicateProjectException, org.codehaus.plexus.util.dag.CycleDetectedException
    {
        org.apache.maven.project.MavenProject[] $stack4;
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack5, $stack6, $stack9, $stack11;
        java.util.List $stack7, sortedProjects;
        java.lang.Object $stack10, $stack12;
        org.apache.maven.graph.DefaultProjectDependencyGraph $u0;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r3, $r4;
        org.apache.maven.execution.ProjectDependencyGraph $r2;

        this := @this: DefaultProjectDependencyGraphTest;

        $u0 = new org.apache.maven.graph.DefaultProjectDependencyGraph;

        $stack4 = newarray (org.apache.maven.project.MavenProject)[2];

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack4[0] = $stack5;

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack4[1] = $stack6;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        specialinvoke $u0.<org.apache.maven.graph.DefaultProjectDependencyGraph: void <init>(java.util.Collection)>($stack7);

        $r2 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        sortedProjects = interfaceinvoke $r2.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getSortedProjects()>();

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack10 = interfaceinvoke sortedProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack11 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack12 = interfaceinvoke sortedProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        return;
    }

    public void testVerifyExpectedParentStructure() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.execution.ProjectDependencyGraph graph;
        java.util.List sortedProjects;
        org.apache.maven.project.MavenProject $stack5, $stack7, $stack9, $stack11;
        java.lang.Object $stack6, $stack8, $stack10, $stack12;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4;

        this := @this: DefaultProjectDependencyGraphTest;

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        graph = specialinvoke $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.execution.ProjectDependencyGraph threeProjectsDependingOnASingle()>();

        sortedProjects = interfaceinvoke graph.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getSortedProjects()>();

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack6 = interfaceinvoke sortedProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack7 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack8 = interfaceinvoke sortedProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack10 = interfaceinvoke sortedProjects.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack11 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack12 = interfaceinvoke sortedProjects.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        return;
    }

    public void testVerifyThatDownstreamProjectsComeInSortedOrder() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.execution.ProjectDependencyGraph $stack2;
        org.apache.maven.project.MavenProject $stack3, $stack5, $stack7, $stack9;
        java.util.List downstreamProjects;
        java.lang.Object $stack6, $stack8, $stack10;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4;

        this := @this: DefaultProjectDependencyGraphTest;

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.execution.ProjectDependencyGraph threeProjectsDependingOnASingle()>();

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack3 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        downstreamProjects = interfaceinvoke $stack2.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack3, 1);

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack6 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack7 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack8 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack10 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        return;
    }

    public void testTransitivesInOrder() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        org.apache.maven.project.MavenProject[] $stack4;
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        java.util.List $stack10, downstreamProjects;
        java.lang.Object $stack14, $stack16, $stack18, $stack20;
        org.apache.maven.graph.DefaultProjectDependencyGraph $u0;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        org.apache.maven.execution.ProjectDependencyGraph $r6;

        this := @this: DefaultProjectDependencyGraphTest;

        $u0 = new org.apache.maven.graph.DefaultProjectDependencyGraph;

        $stack4 = newarray (org.apache.maven.project.MavenProject)[5];

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack4[0] = $stack5;

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender4>;

        $stack4[1] = $stack6;

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack7 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack4[2] = $stack7;

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack8 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack4[3] = $stack8;

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack4[4] = $stack9;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        specialinvoke $u0.<org.apache.maven.graph.DefaultProjectDependencyGraph: void <init>(java.util.Collection)>($stack10);

        $r5 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack11 = $r5.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $r6 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        downstreamProjects = interfaceinvoke $r6.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack11, 1);

        $r7 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack13 = $r7.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack14 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $r8 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack15 = $r8.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack16 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        $r9 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack17 = $r9.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender4>;

        $stack18 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, $stack18);

        $r10 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack19 = $r10.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack20 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        return;
    }

    public void testNonTransitivesInOrder() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        org.apache.maven.project.MavenProject[] $stack4;
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        java.util.List $stack10, downstreamProjects;
        java.lang.Object $stack14, $stack16, $stack18, $stack20;
        org.apache.maven.graph.DefaultProjectDependencyGraph $u0;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        org.apache.maven.execution.ProjectDependencyGraph $r6;

        this := @this: DefaultProjectDependencyGraphTest;

        $u0 = new org.apache.maven.graph.DefaultProjectDependencyGraph;

        $stack4 = newarray (org.apache.maven.project.MavenProject)[5];

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack4[0] = $stack5;

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender4>;

        $stack4[1] = $stack6;

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack7 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack4[2] = $stack7;

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack8 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack4[3] = $stack8;

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack4[4] = $stack9;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        specialinvoke $u0.<org.apache.maven.graph.DefaultProjectDependencyGraph: void <init>(java.util.Collection)>($stack10);

        $r5 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack11 = $r5.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $r6 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        downstreamProjects = interfaceinvoke $r6.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack11, 0);

        $r7 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack13 = $r7.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack14 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $r8 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack15 = $r8.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack16 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        $r9 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack17 = $r9.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender4>;

        $stack18 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, $stack18);

        $r10 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack19 = $r10.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack20 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        return;
    }

    public void testWithTransitiveOnly() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        org.apache.maven.project.MavenProject[] $stack4;
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        java.util.List $stack10, downstreamProjects;
        java.lang.Object $stack14, $stack16, $stack18, $stack20;
        org.apache.maven.graph.DefaultProjectDependencyGraph $u0;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        org.apache.maven.execution.ProjectDependencyGraph $r6;

        this := @this: DefaultProjectDependencyGraphTest;

        $u0 = new org.apache.maven.graph.DefaultProjectDependencyGraph;

        $stack4 = newarray (org.apache.maven.project.MavenProject)[5];

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack4[0] = $stack5;

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject transitiveOnly>;

        $stack4[1] = $stack6;

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack7 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack4[2] = $stack7;

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack8 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack4[3] = $stack8;

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack4[4] = $stack9;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        specialinvoke $u0.<org.apache.maven.graph.DefaultProjectDependencyGraph: void <init>(java.util.Collection)>($stack10);

        $r5 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack11 = $r5.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $r6 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        downstreamProjects = interfaceinvoke $r6.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack11, 1);

        $r7 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack13 = $r7.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack14 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $r8 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack15 = $r8.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack16 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        $r9 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack17 = $r9.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject transitiveOnly>;

        $stack18 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, $stack18);

        $r10 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack19 = $r10.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack20 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        return;
    }

    public void testWithMissingTransitiveOnly() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        org.apache.maven.project.MavenProject[] $stack4;
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack10, downstreamProjects;
        java.lang.Object $stack14, $stack16, $stack18;
        org.apache.maven.graph.DefaultProjectDependencyGraph $u0;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9;
        org.apache.maven.execution.ProjectDependencyGraph $r6;

        this := @this: DefaultProjectDependencyGraphTest;

        $u0 = new org.apache.maven.graph.DefaultProjectDependencyGraph;

        $stack4 = newarray (org.apache.maven.project.MavenProject)[5];

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack4[0] = $stack5;

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject transitiveOnly>;

        $stack4[1] = $stack6;

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack7 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack4[2] = $stack7;

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack8 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack4[3] = $stack8;

        $r4 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack9 = $r4.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack4[4] = $stack9;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        specialinvoke $u0.<org.apache.maven.graph.DefaultProjectDependencyGraph: void <init>(java.util.Collection)>($stack10);

        $r5 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack11 = $r5.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $r6 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        downstreamProjects = interfaceinvoke $r6.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack11, 0);

        $r7 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack13 = $r7.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack14 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $r8 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack15 = $r8.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack16 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        $r9 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack17 = $r9.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack18 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, $stack18);

        return;
    }

    public void testGetUpstreamProjects() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.execution.ProjectDependencyGraph graph;
        org.apache.maven.project.MavenProject $stack4, $stack6;
        java.util.List downstreamProjects;
        java.lang.Object $stack7;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2;

        this := @this: DefaultProjectDependencyGraphTest;

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        graph = specialinvoke $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.execution.ProjectDependencyGraph threeProjectsDependingOnASingle()>();

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack4 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        downstreamProjects = interfaceinvoke graph.<org.apache.maven.execution.ProjectDependencyGraph: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack4, 1);

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack7 = interfaceinvoke downstreamProjects.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        return;
    }

    private org.apache.maven.execution.ProjectDependencyGraph threeProjectsDependingOnASingle() throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        org.apache.maven.project.MavenProject[] $stack2;
        DefaultProjectDependencyGraphTest this;
        org.apache.maven.project.MavenProject $stack3, $stack4, $stack5, $stack6;
        java.util.List $stack7;
        org.apache.maven.graph.DefaultProjectDependencyGraph $u0;
        org.apache.maven.graph.DefaultProjectDependencyGraphTest $r0, $r1, $r2, $r3;
        org.apache.maven.execution.ProjectDependencyGraph $r4;

        this := @this: DefaultProjectDependencyGraphTest;

        $u0 = new org.apache.maven.graph.DefaultProjectDependencyGraph;

        $stack2 = newarray (org.apache.maven.project.MavenProject)[4];

        $r0 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack3 = $r0.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender1>;

        $stack2[0] = $stack3;

        $r1 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack4 = $r1.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender2>;

        $stack2[1] = $stack4;

        $r2 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack5 = $r2.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject depender3>;

        $stack2[2] = $stack5;

        $r3 = (org.apache.maven.graph.DefaultProjectDependencyGraphTest) this;

        $stack6 = $r3.<org.apache.maven.graph.DefaultProjectDependencyGraphTest: org.apache.maven.project.MavenProject aProject>;

        $stack2[3] = $stack6;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack2);

        specialinvoke $u0.<org.apache.maven.graph.DefaultProjectDependencyGraph: void <init>(java.util.Collection)>($stack7);

        $r4 = (org.apache.maven.execution.ProjectDependencyGraph) $u0;

        return $r4;
    }

    private static org.apache.maven.project.MavenProject createA()
    {
        org.apache.maven.project.MavenProject $stack1;

        $stack1 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack1.<org.apache.maven.project.MavenProject: void <init>()>();

        virtualinvoke $stack1.<org.apache.maven.project.MavenProject: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $stack1.<org.apache.maven.project.MavenProject: void setArtifactId(java.lang.String)>("A");

        virtualinvoke $stack1.<org.apache.maven.project.MavenProject: void setVersion(java.lang.String)>("1.2");

        return $stack1;
    }

    static org.apache.maven.model.Dependency toDependency(org.apache.maven.project.MavenProject)
    {
        org.apache.maven.model.Dependency $stack2;
        org.apache.maven.project.MavenProject mavenProject;
        java.lang.String $stack3, $stack4, $stack5;

        mavenProject := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = new org.apache.maven.model.Dependency;

        specialinvoke $stack2.<org.apache.maven.model.Dependency: void <init>()>();

        $stack3 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        virtualinvoke $stack2.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>($stack3);

        $stack4 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        virtualinvoke $stack2.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>($stack4);

        $stack5 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        virtualinvoke $stack2.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>($stack5);

        return $stack2;
    }

    private static org.apache.maven.project.MavenProject createProject(java.util.List, java.lang.String)
    {
        org.apache.maven.project.MavenProject $stack3;
        java.lang.String artifactId;
        java.util.List dependencies;

        dependencies := @parameter0: java.util.List;

        artifactId := @parameter1: java.lang.String;

        $stack3 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack3.<org.apache.maven.project.MavenProject: void <init>()>();

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setVersion(java.lang.String)>("1.2");

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setDependencies(java.util.List)>(dependencies);

        return $stack3;
    }
}
