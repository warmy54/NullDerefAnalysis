public class DefaultRuntimeInformationTest extends java.lang.Object
{
    org.apache.maven.rtinfo.RuntimeInformation rtInfo;

    public void <init>()
    {
        DefaultRuntimeInformationTest this;

        this := @this: DefaultRuntimeInformationTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetMavenVersion()
    {
        DefaultRuntimeInformationTest this;
        org.apache.maven.rtinfo.RuntimeInformation $stack2;
        java.lang.String mavenVersion;
        int $stack4;
        boolean $stack5;
        org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest $r0;

        this := @this: DefaultRuntimeInformationTest;

        $r0 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack2 = $r0.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        mavenVersion = interfaceinvoke $stack2.<org.apache.maven.rtinfo.RuntimeInformation: java.lang.String getMavenVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(mavenVersion);

        $stack4 = virtualinvoke mavenVersion.<java.lang.String: int length()>();

        if $stack4 <= 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack5);

        return;
    }

    public void testIsMavenVersion()
    {
        DefaultRuntimeInformationTest this;
        org.apache.maven.rtinfo.RuntimeInformation $stack1, $stack3, $stack5, $stack7;
        boolean $stack2, $stack4, $stack6, $stack8;
        org.junit.jupiter.api.function.Executable $stack10, $stack13, $stack16;
        org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: DefaultRuntimeInformationTest;

        $r0 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack1 = $r0.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        $stack2 = interfaceinvoke $stack1.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>("2.0");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack2);

        $r1 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack3 = $r1.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>("9.9");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack4);

        $r2 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack5 = $r2.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>("[2.0.11,2.1.0),[3.0,)");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $r3 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack7 = $r3.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        $stack8 = interfaceinvoke $stack7.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>("[9.0,)");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack8);

        $r4 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack10 = staticinvoke <DefaultRuntimeInformationTest$lambda_testIsMavenVersion_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest)>($r4);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/IllegalArgumentException;", $stack10, "Bad version range wasn\'t rejected");

        $r5 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack13 = staticinvoke <DefaultRuntimeInformationTest$lambda_testIsMavenVersion_1__310: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest)>($r5);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/IllegalArgumentException;", $stack13, "Bad version range wasn\'t rejected");

        $r6 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack16 = staticinvoke <DefaultRuntimeInformationTest$lambda_testIsMavenVersion_2__311: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest)>($r6);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/NullPointerException;", $stack16, "Bad version range wasn\'t rejected");

        return;
    }

    private void lambda$testIsMavenVersion$2() throws java.lang.Throwable
    {
        DefaultRuntimeInformationTest this;
        org.apache.maven.rtinfo.RuntimeInformation $stack1;
        org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest $r0;

        this := @this: DefaultRuntimeInformationTest;

        $r0 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack1 = $r0.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        interfaceinvoke $stack1.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>(null);

        return;
    }

    private void lambda$testIsMavenVersion$1() throws java.lang.Throwable
    {
        DefaultRuntimeInformationTest this;
        org.apache.maven.rtinfo.RuntimeInformation $stack1;
        org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest $r0;

        this := @this: DefaultRuntimeInformationTest;

        $r0 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack1 = $r0.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        interfaceinvoke $stack1.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>("");

        return;
    }

    private void lambda$testIsMavenVersion$0() throws java.lang.Throwable
    {
        DefaultRuntimeInformationTest this;
        org.apache.maven.rtinfo.RuntimeInformation $stack1;
        org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest $r0;

        this := @this: DefaultRuntimeInformationTest;

        $r0 = (org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest) this;

        $stack1 = $r0.<org.apache.maven.rtinfo.internal.DefaultRuntimeInformationTest: org.apache.maven.rtinfo.RuntimeInformation rtInfo>;

        interfaceinvoke $stack1.<org.apache.maven.rtinfo.RuntimeInformation: boolean isMavenVersion(java.lang.String)>("[3.0,");

        return;
    }
}
