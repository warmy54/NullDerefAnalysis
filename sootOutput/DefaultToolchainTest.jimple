public class DefaultToolchainTest extends java.lang.Object
{
    private org.codehaus.plexus.logging.Logger logger;
    private org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader reader;

    public void <init>()
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0;

        this := @this: DefaultToolchainTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader;

        specialinvoke $u0.<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: void <init>()>();

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader reader> = $u0;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        DefaultToolchainTest this;

        this := @this: DefaultToolchainTest;

        staticinvoke <org.mockito.MockitoAnnotations: void initMocks(java.lang.Object)>(this);

        return;
    }

    private org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel)
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.model.ToolchainModel model;
        org.codehaus.plexus.logging.Logger $stack3;
        org.apache.maven.toolchain.DefaultToolchainTest$1 $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;
        org.apache.maven.toolchain.DefaultToolchain $r2;

        this := @this: DefaultToolchainTest;

        model := @parameter0: org.apache.maven.toolchain.model.ToolchainModel;

        $u0 = new org.apache.maven.toolchain.DefaultToolchainTest$1;

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack3 = $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.codehaus.plexus.logging.Logger logger>;

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        specialinvoke $u0.<org.apache.maven.toolchain.DefaultToolchainTest$1: void <init>(org.apache.maven.toolchain.DefaultToolchainTest,org.apache.maven.toolchain.model.ToolchainModel,org.codehaus.plexus.logging.Logger)>($r1, model, $stack3);

        $r2 = (org.apache.maven.toolchain.DefaultToolchain) $u0;

        return $r2;
    }

    private org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel, java.lang.String)
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.model.ToolchainModel model;
        java.lang.String type;
        org.codehaus.plexus.logging.Logger $stack4;
        org.apache.maven.toolchain.DefaultToolchainTest$2 $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;
        org.apache.maven.toolchain.DefaultToolchain $r2;

        this := @this: DefaultToolchainTest;

        model := @parameter0: org.apache.maven.toolchain.model.ToolchainModel;

        type := @parameter1: java.lang.String;

        $u0 = new org.apache.maven.toolchain.DefaultToolchainTest$2;

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack4 = $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.codehaus.plexus.logging.Logger logger>;

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        specialinvoke $u0.<org.apache.maven.toolchain.DefaultToolchainTest$2: void <init>(org.apache.maven.toolchain.DefaultToolchainTest,org.apache.maven.toolchain.model.ToolchainModel,java.lang.String,org.codehaus.plexus.logging.Logger)>($r1, model, type, $stack4);

        $r2 = (org.apache.maven.toolchain.DefaultToolchain) $u0;

        return $r2;
    }

    public void testGetModel()
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.DefaultToolchain toolchain;
        org.apache.maven.toolchain.model.ToolchainModel $stack5, $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0;

        this := @this: DefaultToolchainTest;

        $u0 = new org.apache.maven.toolchain.model.ToolchainModel;

        specialinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void <init>()>();

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        toolchain = specialinvoke $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel)>($u0);

        $stack5 = virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: org.apache.maven.toolchain.model.ToolchainModel getModel()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u0, $stack5);

        return;
    }

    public void testGetType()
    {
        DefaultToolchainTest this;
        java.lang.String $stack6, $stack9;
        org.apache.maven.toolchain.DefaultToolchain toolchain;
        org.apache.maven.toolchain.model.ToolchainModel $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;

        this := @this: DefaultToolchainTest;

        $u0 = new org.apache.maven.toolchain.model.ToolchainModel;

        specialinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void <init>()>();

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        toolchain = specialinvoke $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel,java.lang.String)>($u0, "TYPE");

        $stack6 = virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: java.lang.String getType()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("TYPE", $stack6);

        virtualinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void setType(java.lang.String)>("MODEL_TYPE");

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        toolchain = specialinvoke $r1.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel)>($u0);

        $stack9 = virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: java.lang.String getType()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MODEL_TYPE", $stack9);

        return;
    }

    public void testGetLogger()
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.DefaultToolchain toolchain;
        org.codehaus.plexus.logging.Logger $stack5, $stack6;
        org.apache.maven.toolchain.model.ToolchainModel $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;

        this := @this: DefaultToolchainTest;

        $u0 = new org.apache.maven.toolchain.model.ToolchainModel;

        specialinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void <init>()>();

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        toolchain = specialinvoke $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel)>($u0);

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack5 = $r1.<org.apache.maven.toolchain.DefaultToolchainTest: org.codehaus.plexus.logging.Logger logger>;

        $stack6 = virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: org.codehaus.plexus.logging.Logger getLog()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        return;
    }

    public void testMissingRequirementProperty()
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.DefaultToolchain toolchain;
        java.util.Map $stack5;
        boolean $stack6;
        org.codehaus.plexus.logging.Logger $stack7, $stack9;
        java.lang.Object $stack8;
        org.apache.maven.toolchain.model.ToolchainModel $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;

        this := @this: DefaultToolchainTest;

        $u0 = new org.apache.maven.toolchain.model.ToolchainModel;

        specialinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void setType(java.lang.String)>("TYPE");

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        toolchain = specialinvoke $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel)>($u0);

        $stack5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("name", "John Doe");

        $stack6 = virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: boolean matchesRequirements(java.util.Map)>($stack5);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack6);

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack7 = $r1.<org.apache.maven.toolchain.DefaultToolchainTest: org.codehaus.plexus.logging.Logger logger>;

        $stack8 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack7);

        $stack9 = (org.codehaus.plexus.logging.Logger) $stack8;

        interfaceinvoke $stack9.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>("Toolchain type:TYPE{} is missing required property: name");

        return;
    }

    public void testNonMatchingRequirementProperty()
    {
        DefaultToolchainTest this;
        org.apache.maven.toolchain.DefaultToolchain toolchain;
        org.apache.maven.toolchain.RequirementMatcher $stack6;
        java.util.Map $stack7;
        boolean $stack8;
        org.codehaus.plexus.logging.Logger $stack9, $stack11;
        java.lang.Object $stack10;
        org.apache.maven.toolchain.model.ToolchainModel $u0;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;

        this := @this: DefaultToolchainTest;

        $u0 = new org.apache.maven.toolchain.model.ToolchainModel;

        specialinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.toolchain.model.ToolchainModel: void setType(java.lang.String)>("TYPE");

        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        toolchain = specialinvoke $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.DefaultToolchain newDefaultToolchain(org.apache.maven.toolchain.model.ToolchainModel)>($u0);

        $stack6 = staticinvoke <org.apache.maven.toolchain.RequirementMatcherFactory: org.apache.maven.toolchain.RequirementMatcher createExactMatcher(java.lang.String)>("Jane Doe");

        virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: void addProvideToken(java.lang.String,org.apache.maven.toolchain.RequirementMatcher)>("name", $stack6);

        $stack7 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("name", "John Doe");

        $stack8 = virtualinvoke toolchain.<org.apache.maven.toolchain.DefaultToolchain: boolean matchesRequirements(java.util.Map)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack8);

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack9 = $r1.<org.apache.maven.toolchain.DefaultToolchainTest: org.codehaus.plexus.logging.Logger logger>;

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack9);

        $stack11 = (org.codehaus.plexus.logging.Logger) $stack10;

        interfaceinvoke $stack11.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>("Toolchain type:TYPE{name = Jane Doe} doesn\'t match required property: name");

        return;
    }

    public void testEquals() throws java.lang.Exception
    {
        java.lang.Class $stack7, $stack9;
        java.io.InputStream jdksIS, jdksExtraIS;
        DefaultToolchainTest this;
        org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader $stack11, $stack13;
        java.util.List $stack16, $stack20;
        java.lang.Object $stack17, $stack21;
        org.apache.maven.toolchain.model.ToolchainModel $stack18, $stack22;
        java.lang.Throwable $stack24, $stack25, $stack27, $stack28;
        org.apache.maven.toolchain.model.PersistedToolchains jdks, jdksExtra;
        org.apache.maven.toolchain.java.DefaultJavaToolChain $u0, $u1;
        org.apache.maven.toolchain.DefaultToolchainTest $r0, $r1;

        this := @this: DefaultToolchainTest;

        $stack7 = class "Lorg/apache/maven/toolchain/model/ToolchainModel;";

        jdksIS = virtualinvoke $stack7.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("toolchains-jdks.xml");

     label01:
        $stack9 = class "Lorg/apache/maven/toolchain/model/ToolchainModel;";

        jdksExtraIS = virtualinvoke $stack9.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("toolchains-jdks-extra.xml");

     label02:
        $r0 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack11 = $r0.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader reader>;

        jdks = virtualinvoke $stack11.<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.InputStream)>(jdksIS);

        $r1 = (org.apache.maven.toolchain.DefaultToolchainTest) this;

        $stack13 = $r1.<org.apache.maven.toolchain.DefaultToolchainTest: org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader reader>;

        jdksExtra = virtualinvoke $stack13.<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.InputStream)>(jdksExtraIS);

        $u0 = new org.apache.maven.toolchain.java.DefaultJavaToolChain;

        $stack16 = virtualinvoke jdks.<org.apache.maven.toolchain.model.PersistedToolchains: java.util.List getToolchains()>();

        $stack17 = interfaceinvoke $stack16.<java.util.List: java.lang.Object get(int)>(0);

        $stack18 = (org.apache.maven.toolchain.model.ToolchainModel) $stack17;

        specialinvoke $u0.<org.apache.maven.toolchain.java.DefaultJavaToolChain: void <init>(org.apache.maven.toolchain.model.ToolchainModel,org.codehaus.plexus.logging.Logger)>($stack18, null);

        $u1 = new org.apache.maven.toolchain.java.DefaultJavaToolChain;

        $stack20 = virtualinvoke jdksExtra.<org.apache.maven.toolchain.model.PersistedToolchains: java.util.List getToolchains()>();

        $stack21 = interfaceinvoke $stack20.<java.util.List: java.lang.Object get(int)>(0);

        $stack22 = (org.apache.maven.toolchain.model.ToolchainModel) $stack21;

        specialinvoke $u1.<org.apache.maven.toolchain.java.DefaultJavaToolChain: void <init>(org.apache.maven.toolchain.model.ToolchainModel,org.codehaus.plexus.logging.Logger)>($stack22, null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u0, $u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotEquals(java.lang.Object,java.lang.Object)>($u0, $u1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotEquals(java.lang.Object,java.lang.Object)>($u1, $u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u1, $u1);

     label03:
        if jdksExtraIS == null goto label09;

        virtualinvoke jdksExtraIS.<java.io.InputStream: void close()>();

        goto label09;

     label04:
        $stack28 := @caughtexception;

        if jdksExtraIS == null goto label08;

     label05:
        virtualinvoke jdksExtraIS.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $stack27 := @caughtexception;

        virtualinvoke $stack28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack27);

     label08:
        throw $stack28;

     label09:
        if jdksIS == null goto label15;

        virtualinvoke jdksIS.<java.io.InputStream: void close()>();

        goto label15;

     label10:
        $stack25 := @caughtexception;

        if jdksIS == null goto label14;

     label11:
        virtualinvoke jdksIS.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $stack24 := @caughtexception;

        virtualinvoke $stack25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack24);

     label14:
        throw $stack25;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }
}
