public class DefaultToolchainsWriter extends java.lang.Object implements org.apache.maven.toolchain.io.ToolchainsWriter
{

    public void <init>()
    {
        DefaultToolchainsWriter this;

        this := @this: DefaultToolchainsWriter;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void write(java.io.Writer, java.util.Map, org.apache.maven.toolchain.model.PersistedToolchains) throws java.io.IOException
    {
        java.io.Writer output;
        org.apache.maven.toolchain.model.PersistedToolchains toolchains;
        org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer $stack9;
        java.lang.Throwable $stack10, $stack11;
        DefaultToolchainsWriter this;
        java.util.Map options;

        this := @this: DefaultToolchainsWriter;

        output := @parameter0: java.io.Writer;

        options := @parameter1: java.util.Map;

        toolchains := @parameter2: org.apache.maven.toolchain.model.PersistedToolchains;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(output, "output cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(toolchains, "toolchains cannot be null");

     label1:
        $stack9 = new org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer;

        specialinvoke $stack9.<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void <init>()>();

        virtualinvoke $stack9.<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void write(java.io.Writer,org.apache.maven.toolchain.model.PersistedToolchains)>(output, toolchains);

     label2:
        if output == null goto label8;

        virtualinvoke output.<java.io.Writer: void close()>();

        goto label8;

     label3:
        $stack11 := @caughtexception;

        if output == null goto label7;

     label4:
        virtualinvoke output.<java.io.Writer: void close()>();

     label5:
        goto label7;

     label6:
        $stack10 := @caughtexception;

        virtualinvoke $stack11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack10);

     label7:
        throw $stack11;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
}
