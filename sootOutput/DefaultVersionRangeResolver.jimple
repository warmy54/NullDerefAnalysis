public class DefaultVersionRangeResolver extends java.lang.Object implements org.eclipse.aether.impl.VersionRangeResolver, org.eclipse.aether.spi.locator.Service
{
    private static final java.lang.String MAVEN_METADATA_XML;
    private org.eclipse.aether.impl.MetadataResolver metadataResolver;
    private org.eclipse.aether.spi.synccontext.SyncContextFactory syncContextFactory;
    private org.eclipse.aether.impl.RepositoryEventDispatcher repositoryEventDispatcher;

    public void <init>()
    {
        DefaultVersionRangeResolver this;

        this := @this: DefaultVersionRangeResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(org.eclipse.aether.impl.MetadataResolver, org.eclipse.aether.spi.synccontext.SyncContextFactory, org.eclipse.aether.impl.RepositoryEventDispatcher)
    {
        DefaultVersionRangeResolver this;
        org.eclipse.aether.impl.MetadataResolver metadataResolver;
        org.eclipse.aether.spi.synccontext.SyncContextFactory syncContextFactory;
        org.eclipse.aether.impl.RepositoryEventDispatcher repositoryEventDispatcher;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0, $r1, $r2;

        this := @this: DefaultVersionRangeResolver;

        metadataResolver := @parameter0: org.eclipse.aether.impl.MetadataResolver;

        syncContextFactory := @parameter1: org.eclipse.aether.spi.synccontext.SyncContextFactory;

        repositoryEventDispatcher := @parameter2: org.eclipse.aether.impl.RepositoryEventDispatcher;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        virtualinvoke $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setMetadataResolver(org.eclipse.aether.impl.MetadataResolver)>(metadataResolver);

        $r1 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        virtualinvoke $r1.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setSyncContextFactory(org.eclipse.aether.spi.synccontext.SyncContextFactory)>(syncContextFactory);

        $r2 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        virtualinvoke $r2.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setRepositoryEventDispatcher(org.eclipse.aether.impl.RepositoryEventDispatcher)>(repositoryEventDispatcher);

        return;
    }

    public void initService(org.eclipse.aether.spi.locator.ServiceLocator)
    {
        DefaultVersionRangeResolver this;
        org.eclipse.aether.spi.locator.ServiceLocator locator;
        java.lang.Object $stack2, $stack5, $stack8;
        org.eclipse.aether.impl.MetadataResolver $stack3;
        org.eclipse.aether.spi.synccontext.SyncContextFactory $stack6;
        org.eclipse.aether.impl.RepositoryEventDispatcher $stack9;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0, $r1, $r2;

        this := @this: DefaultVersionRangeResolver;

        locator := @parameter0: org.eclipse.aether.spi.locator.ServiceLocator;

        $stack2 = interfaceinvoke locator.<org.eclipse.aether.spi.locator.ServiceLocator: java.lang.Object getService(java.lang.Class)>(class "Lorg/eclipse/aether/impl/MetadataResolver;");

        $stack3 = (org.eclipse.aether.impl.MetadataResolver) $stack2;

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        virtualinvoke $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setMetadataResolver(org.eclipse.aether.impl.MetadataResolver)>($stack3);

        $stack5 = interfaceinvoke locator.<org.eclipse.aether.spi.locator.ServiceLocator: java.lang.Object getService(java.lang.Class)>(class "Lorg/eclipse/aether/spi/synccontext/SyncContextFactory;");

        $stack6 = (org.eclipse.aether.spi.synccontext.SyncContextFactory) $stack5;

        $r1 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        virtualinvoke $r1.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setSyncContextFactory(org.eclipse.aether.spi.synccontext.SyncContextFactory)>($stack6);

        $stack8 = interfaceinvoke locator.<org.eclipse.aether.spi.locator.ServiceLocator: java.lang.Object getService(java.lang.Class)>(class "Lorg/eclipse/aether/impl/RepositoryEventDispatcher;");

        $stack9 = (org.eclipse.aether.impl.RepositoryEventDispatcher) $stack8;

        $r2 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        virtualinvoke $r2.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setRepositoryEventDispatcher(org.eclipse.aether.impl.RepositoryEventDispatcher)>($stack9);

        return;
    }

    public org.apache.maven.repository.internal.DefaultVersionRangeResolver setMetadataResolver(org.eclipse.aether.impl.MetadataResolver)
    {
        DefaultVersionRangeResolver this;
        org.eclipse.aether.impl.MetadataResolver metadataResolver, $stack3;
        java.lang.Object $stack2;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0, $r1;

        this := @this: DefaultVersionRangeResolver;

        metadataResolver := @parameter0: org.eclipse.aether.impl.MetadataResolver;

        $stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(metadataResolver, "metadataResolver cannot be null");

        $stack3 = (org.eclipse.aether.impl.MetadataResolver) $stack2;

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.impl.MetadataResolver metadataResolver> = $stack3;

        $r1 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        return $r1;
    }

    public org.apache.maven.repository.internal.DefaultVersionRangeResolver setSyncContextFactory(org.eclipse.aether.spi.synccontext.SyncContextFactory)
    {
        DefaultVersionRangeResolver this;
        org.eclipse.aether.spi.synccontext.SyncContextFactory syncContextFactory, $stack3;
        java.lang.Object $stack2;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0, $r1;

        this := @this: DefaultVersionRangeResolver;

        syncContextFactory := @parameter0: org.eclipse.aether.spi.synccontext.SyncContextFactory;

        $stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(syncContextFactory, "syncContextFactory cannot be null");

        $stack3 = (org.eclipse.aether.spi.synccontext.SyncContextFactory) $stack2;

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.spi.synccontext.SyncContextFactory syncContextFactory> = $stack3;

        $r1 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        return $r1;
    }

    public org.apache.maven.repository.internal.DefaultVersionRangeResolver setRepositoryEventDispatcher(org.eclipse.aether.impl.RepositoryEventDispatcher)
    {
        DefaultVersionRangeResolver this;
        org.eclipse.aether.impl.RepositoryEventDispatcher repositoryEventDispatcher, $stack3;
        java.lang.Object $stack2;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0, $r1;

        this := @this: DefaultVersionRangeResolver;

        repositoryEventDispatcher := @parameter0: org.eclipse.aether.impl.RepositoryEventDispatcher;

        $stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");

        $stack3 = (org.eclipse.aether.impl.RepositoryEventDispatcher) $stack2;

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.impl.RepositoryEventDispatcher repositoryEventDispatcher> = $stack3;

        $r1 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        return $r1;
    }

    public org.eclipse.aether.resolution.VersionRangeResult resolveVersionRange(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.VersionRangeRequest) throws org.eclipse.aether.resolution.VersionRangeResolutionException
    {
        org.eclipse.aether.resolution.VersionRangeRequest request;
        org.eclipse.aether.artifact.Artifact $stack13;
        java.lang.String $stack14, $stack26;
        org.eclipse.aether.version.VersionConstraint versionConstraint;
        org.eclipse.aether.version.VersionRange $stack17;
        DefaultVersionRangeResolver this;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.Set $stack20;
        java.util.Iterator l8;
        boolean $stack22, $stack28;
        java.lang.Object $stack24, $stack25, $stack31;
        java.util.Map$Entry v;
        org.eclipse.aether.repository.ArtifactRepository $stack32;
        org.eclipse.aether.version.Version $stack34, ver;
        java.lang.Throwable $stack37, $stack39, $r2;
        java.util.Map e#2;
        org.eclipse.aether.resolution.VersionRangeResult $u0;
        org.eclipse.aether.util.version.GenericVersionScheme $u1;
        org.eclipse.aether.resolution.VersionRangeResolutionException $u2;
        java.util.ArrayList $u3;
        org.eclipse.aether.version.VersionScheme $r0, $r4;
        java.lang.Exception $r1, $r5;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r3;

        this := @this: DefaultVersionRangeResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        request := @parameter1: org.eclipse.aether.resolution.VersionRangeRequest;

        $u0 = new org.eclipse.aether.resolution.VersionRangeResult;

        specialinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: void <init>(org.eclipse.aether.resolution.VersionRangeRequest)>(request);

        $u1 = new org.eclipse.aether.util.version.GenericVersionScheme;

        specialinvoke $u1.<org.eclipse.aether.util.version.GenericVersionScheme: void <init>()>();

     label01:
        $stack13 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack14 = interfaceinvoke $stack13.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        $r0 = (org.eclipse.aether.version.VersionScheme) $u1;

        versionConstraint = interfaceinvoke $r0.<org.eclipse.aether.version.VersionScheme: org.eclipse.aether.version.VersionConstraint parseVersionConstraint(java.lang.String)>($stack14);

     label02:
        goto label04;

     label03:
        $stack39 := @caughtexception;

        $r1 = (java.lang.Exception) $stack39;

        virtualinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult addException(java.lang.Exception)>($r1);

        $u2 = new org.eclipse.aether.resolution.VersionRangeResolutionException;

        specialinvoke $u2.<org.eclipse.aether.resolution.VersionRangeResolutionException: void <init>(org.eclipse.aether.resolution.VersionRangeResult)>($u0);

        $r2 = (java.lang.Throwable) $u2;

        throw $r2;

     label04:
        virtualinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult setVersionConstraint(org.eclipse.aether.version.VersionConstraint)>(versionConstraint);

        $stack17 = interfaceinvoke versionConstraint.<org.eclipse.aether.version.VersionConstraint: org.eclipse.aether.version.VersionRange getRange()>();

        if $stack17 != null goto label05;

        $stack34 = interfaceinvoke versionConstraint.<org.eclipse.aether.version.VersionConstraint: org.eclipse.aether.version.Version getVersion()>();

        virtualinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult addVersion(org.eclipse.aether.version.Version)>($stack34);

        goto label12;

     label05:
        $r3 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        e#2 = specialinvoke $r3.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: java.util.Map getVersions(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.VersionRangeResult,org.eclipse.aether.resolution.VersionRangeRequest)>(session, $u0, request);

        $u3 = new java.util.ArrayList;

        specialinvoke $u3.<java.util.ArrayList: void <init>()>();

        $stack20 = interfaceinvoke e#2.<java.util.Map: java.util.Set entrySet()>();

        l8 = interfaceinvoke $stack20.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $stack22 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label11;

        $stack24 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        v = (java.util.Map$Entry) $stack24;

     label07:
        $stack25 = interfaceinvoke v.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack26 = (java.lang.String) $stack25;

        $r4 = (org.eclipse.aether.version.VersionScheme) $u1;

        ver = interfaceinvoke $r4.<org.eclipse.aether.version.VersionScheme: org.eclipse.aether.version.Version parseVersion(java.lang.String)>($stack26);

        $stack28 = interfaceinvoke versionConstraint.<org.eclipse.aether.version.VersionConstraint: boolean containsVersion(org.eclipse.aether.version.Version)>(ver);

        if $stack28 == 0 goto label08;

        interfaceinvoke $u3.<java.util.List: boolean add(java.lang.Object)>(ver);

        $stack31 = interfaceinvoke v.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack32 = (org.eclipse.aether.repository.ArtifactRepository) $stack31;

        virtualinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult setRepository(org.eclipse.aether.version.Version,org.eclipse.aether.repository.ArtifactRepository)>(ver, $stack32);

     label08:
        goto label10;

     label09:
        $stack37 := @caughtexception;

        $r5 = (java.lang.Exception) $stack37;

        virtualinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult addException(java.lang.Exception)>($r5);

     label10:
        goto label06;

     label11:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($u3);

        virtualinvoke $u0.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult setVersions(java.util.List)>($u3);

     label12:
        return $u0;

        catch org.eclipse.aether.version.InvalidVersionSpecificationException from label01 to label02 with label03;
        catch org.eclipse.aether.version.InvalidVersionSpecificationException from label07 to label08 with label09;
    }

    private java.util.Map getVersions(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.VersionRangeResult, org.eclipse.aether.resolution.VersionRangeRequest)
    {
        org.eclipse.aether.resolution.VersionRangeRequest request;
        org.eclipse.aether.RequestTrace $stack16, trace;
        org.eclipse.aether.artifact.Artifact $stack20, $stack22, $stack63;
        java.lang.String $stack21, $stack23, $stack30, version, $stack74;
        org.eclipse.aether.metadata.Metadata$Nature $stack24;
        java.util.List $stack26, $stack32, $stack47, metadataResults#4, metadataRequest#6;
        int $stack27;
        boolean $stack34, $stack52, $stack66, $stack39, $stack49;
        DefaultVersionRangeResolver this;
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.impl.MetadataResolver $stack35;
        java.lang.Object $stack40, $stack51, $stack68, $stack72, version;
        org.eclipse.aether.resolution.VersionRangeResult result;
        java.lang.Exception $stack41;
        org.eclipse.aether.resolution.MetadataRequest $stack43, $u3, $u4;
        org.eclipse.aether.metadata.Metadata $stack45, $r0, $r1;
        org.apache.maven.artifact.repository.metadata.Versioning versioning;
        java.util.Iterator l14, metadataResults, metadataResult, metadataRequest#9;
        org.eclipse.aether.repository.WorkspaceRepository $stack69;
        org.eclipse.aether.repository.RemoteRepository repository;
        org.eclipse.aether.repository.WorkspaceReader repository#5;
        org.eclipse.aether.resolution.MetadataResult metadataResult#14;
        java.util.HashMap $u0;
        org.eclipse.aether.metadata.DefaultMetadata $u1;
        java.util.ArrayList $u2;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r2, $r3;
        org.eclipse.aether.repository.ArtifactRepository $r4;

        this := @this: DefaultVersionRangeResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        result := @parameter1: org.eclipse.aether.resolution.VersionRangeResult;

        request := @parameter2: org.eclipse.aether.resolution.VersionRangeRequest;

        $stack16 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: org.eclipse.aether.RequestTrace getTrace()>();

        trace = staticinvoke <org.eclipse.aether.RequestTrace: org.eclipse.aether.RequestTrace newChild(org.eclipse.aether.RequestTrace,java.lang.Object)>($stack16, request);

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $u1 = new org.eclipse.aether.metadata.DefaultMetadata;

        $stack20 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack21 = interfaceinvoke $stack20.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack22 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack23 = interfaceinvoke $stack22.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack24 = <org.eclipse.aether.metadata.Metadata$Nature: org.eclipse.aether.metadata.Metadata$Nature RELEASE_OR_SNAPSHOT>;

        specialinvoke $u1.<org.eclipse.aether.metadata.DefaultMetadata: void <init>(java.lang.String,java.lang.String,java.lang.String,org.eclipse.aether.metadata.Metadata$Nature)>($stack21, $stack23, "maven-metadata.xml", $stack24);

        $u2 = new java.util.ArrayList;

        $stack26 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: java.util.List getRepositories()>();

        $stack27 = interfaceinvoke $stack26.<java.util.List: int size()>();

        specialinvoke $u2.<java.util.ArrayList: void <init>(int)>($stack27);

        $u3 = new org.eclipse.aether.resolution.MetadataRequest;

        $stack30 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: java.lang.String getRequestContext()>();

        $r0 = (org.eclipse.aether.metadata.Metadata) $u1;

        specialinvoke $u3.<org.eclipse.aether.resolution.MetadataRequest: void <init>(org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.RemoteRepository,java.lang.String)>($r0, null, $stack30);

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>($u3);

        $stack32 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: java.util.List getRepositories()>();

        metadataResults = interfaceinvoke $stack32.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack34 = interfaceinvoke metadataResults.<java.util.Iterator: boolean hasNext()>();

        if $stack34 == 0 goto label02;

        $stack72 = interfaceinvoke metadataResults.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.eclipse.aether.repository.RemoteRepository) $stack72;

        $u4 = new org.eclipse.aether.resolution.MetadataRequest;

        $stack74 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: java.lang.String getRequestContext()>();

        $r1 = (org.eclipse.aether.metadata.Metadata) $u1;

        specialinvoke $u4.<org.eclipse.aether.resolution.MetadataRequest: void <init>(org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.RemoteRepository,java.lang.String)>($r1, repository, $stack74);

        virtualinvoke $u4.<org.eclipse.aether.resolution.MetadataRequest: org.eclipse.aether.resolution.MetadataRequest setDeleteLocalCopyIfMissing(boolean)>(1);

        virtualinvoke $u4.<org.eclipse.aether.resolution.MetadataRequest: org.eclipse.aether.resolution.MetadataRequest setTrace(org.eclipse.aether.RequestTrace)>(trace);

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>($u4);

        goto label01;

     label02:
        $r2 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $stack35 = $r2.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.impl.MetadataResolver metadataResolver>;

        metadataResults#4 = interfaceinvoke $stack35.<org.eclipse.aether.impl.MetadataResolver: java.util.List resolveMetadata(org.eclipse.aether.RepositorySystemSession,java.util.Collection)>(session, $u2);

        repository#5 = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.WorkspaceReader getWorkspaceReader()>();

        if repository#5 == null goto label04;

        $stack63 = virtualinvoke request.<org.eclipse.aether.resolution.VersionRangeRequest: org.eclipse.aether.artifact.Artifact getArtifact()>();

        metadataRequest#6 = interfaceinvoke repository#5.<org.eclipse.aether.repository.WorkspaceReader: java.util.List findVersions(org.eclipse.aether.artifact.Artifact)>($stack63);

        metadataResult = interfaceinvoke metadataRequest#6.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $stack66 = interfaceinvoke metadataResult.<java.util.Iterator: boolean hasNext()>();

        if $stack66 == 0 goto label04;

        $stack68 = interfaceinvoke metadataResult.<java.util.Iterator: java.lang.Object next()>();

        version = (java.lang.String) $stack68;

        $stack69 = interfaceinvoke repository#5.<org.eclipse.aether.repository.WorkspaceReader: org.eclipse.aether.repository.WorkspaceRepository getRepository()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(version, $stack69);

        goto label03;

     label04:
        metadataRequest#9 = interfaceinvoke metadataResults#4.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack39 = interfaceinvoke metadataRequest#9.<java.util.Iterator: boolean hasNext()>();

        if $stack39 == 0 goto label10;

        $stack40 = interfaceinvoke metadataRequest#9.<java.util.Iterator: java.lang.Object next()>();

        metadataResult#14 = (org.eclipse.aether.resolution.MetadataResult) $stack40;

        $stack41 = virtualinvoke metadataResult#14.<org.eclipse.aether.resolution.MetadataResult: java.lang.Exception getException()>();

        virtualinvoke result.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult addException(java.lang.Exception)>($stack41);

        $stack43 = virtualinvoke metadataResult#14.<org.eclipse.aether.resolution.MetadataResult: org.eclipse.aether.resolution.MetadataRequest getRequest()>();

        version = virtualinvoke $stack43.<org.eclipse.aether.resolution.MetadataRequest: org.eclipse.aether.repository.RemoteRepository getRepository()>();

        if version != null goto label06;

        version = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.LocalRepository getLocalRepository()>();

     label06:
        $stack45 = virtualinvoke metadataResult#14.<org.eclipse.aether.resolution.MetadataResult: org.eclipse.aether.metadata.Metadata getMetadata()>();

        $r3 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $r4 = (org.eclipse.aether.repository.ArtifactRepository) version;

        versioning = specialinvoke $r3.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.artifact.repository.metadata.Versioning readVersions(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,org.eclipse.aether.resolution.VersionRangeResult)>(session, trace, $stack45, $r4, result);

        $stack47 = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: java.util.List getVersions()>();

        l14 = interfaceinvoke $stack47.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack49 = interfaceinvoke l14.<java.util.Iterator: boolean hasNext()>();

        if $stack49 == 0 goto label09;

        $stack51 = interfaceinvoke l14.<java.util.Iterator: java.lang.Object next()>();

        version = (java.lang.String) $stack51;

        $stack52 = interfaceinvoke $u0.<java.util.Map: boolean containsKey(java.lang.Object)>(version);

        if $stack52 != 0 goto label08;

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(version, version);

     label08:
        goto label07;

     label09:
        goto label05;

     label10:
        return $u0;
    }

    private org.apache.maven.artifact.repository.metadata.Versioning readVersions(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.RequestTrace, org.eclipse.aether.metadata.Metadata, org.eclipse.aether.repository.ArtifactRepository, org.eclipse.aether.resolution.VersionRangeResult)
    {
        org.eclipse.aether.metadata.Metadata metadata;
        DefaultVersionRangeResolver this;
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.spi.synccontext.SyncContextFactory $stack12;
        java.util.Set $stack15;
        java.io.File $stack16, $stack17, $stack21;
        boolean $stack18;
        org.apache.maven.artifact.repository.metadata.Metadata $stack23;
        java.lang.Exception $stack25;
        org.eclipse.aether.RequestTrace trace;
        org.eclipse.aether.repository.ArtifactRepository repository;
        org.eclipse.aether.resolution.VersionRangeResult result;
        java.lang.Throwable $stack28, $stack29, $stack31, $stack32;
        org.apache.maven.artifact.repository.metadata.Versioning versioning, $stack11, $u2;
        org.eclipse.aether.SyncContext syncContext;
        java.io.FileInputStream $u0;
        org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader $u1;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0, $r1;

        this := @this: DefaultVersionRangeResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        trace := @parameter1: org.eclipse.aether.RequestTrace;

        metadata := @parameter2: org.eclipse.aether.metadata.Metadata;

        repository := @parameter3: org.eclipse.aether.repository.ArtifactRepository;

        result := @parameter4: org.eclipse.aether.resolution.VersionRangeResult;

        versioning = null;

     label01:
        if metadata == null goto label16;

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $stack12 = $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.spi.synccontext.SyncContextFactory syncContextFactory>;

        syncContext = interfaceinvoke $stack12.<org.eclipse.aether.spi.synccontext.SyncContextFactory: org.eclipse.aether.SyncContext newInstance(org.eclipse.aether.RepositorySystemSession,boolean)>(session, 1);

     label02:
        $stack15 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(metadata);

        interfaceinvoke syncContext.<org.eclipse.aether.SyncContext: void acquire(java.util.Collection,java.util.Collection)>(null, $stack15);

        $stack16 = interfaceinvoke metadata.<org.eclipse.aether.metadata.Metadata: java.io.File getFile()>();

        if $stack16 == null goto label10;

        $stack17 = interfaceinvoke metadata.<org.eclipse.aether.metadata.Metadata: java.io.File getFile()>();

        $stack18 = virtualinvoke $stack17.<java.io.File: boolean exists()>();

        if $stack18 == 0 goto label10;

        $u0 = new java.io.FileInputStream;

        $stack21 = interfaceinvoke metadata.<org.eclipse.aether.metadata.Metadata: java.io.File getFile()>();

        specialinvoke $u0.<java.io.FileInputStream: void <init>(java.io.File)>($stack21);

     label03:
        $u1 = new org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;

        specialinvoke $u1.<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: void <init>()>();

        $stack23 = virtualinvoke $u1.<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.InputStream,boolean)>($u0, 0);

        versioning = virtualinvoke $stack23.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

     label04:
        virtualinvoke $u0.<java.io.InputStream: void close()>();

        goto label10;

     label05:
        $stack32 := @caughtexception;

     label06:
        virtualinvoke $u0.<java.io.InputStream: void close()>();

     label07:
        goto label09;

     label08:
        $stack31 := @caughtexception;

        virtualinvoke $stack32.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack31);

     label09:
        throw $stack32;

     label10:
        if syncContext == null goto label16;

        interfaceinvoke syncContext.<org.eclipse.aether.SyncContext: void close()>();

        goto label16;

     label11:
        $stack29 := @caughtexception;

        if syncContext == null goto label15;

     label12:
        interfaceinvoke syncContext.<org.eclipse.aether.SyncContext: void close()>();

     label13:
        goto label15;

     label14:
        $stack28 := @caughtexception;

        virtualinvoke $stack29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack28);

     label15:
        throw $stack29;

     label16:
        goto label18;

     label17:
        $stack25 := @caughtexception;

        $r1 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        specialinvoke $r1.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: void invalidMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,java.lang.Exception)>(session, trace, metadata, repository, $stack25);

        virtualinvoke result.<org.eclipse.aether.resolution.VersionRangeResult: org.eclipse.aether.resolution.VersionRangeResult addException(java.lang.Exception)>($stack25);

     label18:
        if versioning == null goto label19;

        $stack11 = versioning;

        goto label20;

     label19:
        $u2 = new org.apache.maven.artifact.repository.metadata.Versioning;

        $stack11 = $u2;

        specialinvoke $u2.<org.apache.maven.artifact.repository.metadata.Versioning: void <init>()>();

     label20:
        return $stack11;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Exception from label01 to label16 with label17;
    }

    private void invalidMetadata(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.RequestTrace, org.eclipse.aether.metadata.Metadata, org.eclipse.aether.repository.ArtifactRepository, java.lang.Exception)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.RepositoryEvent$EventType $stack8;
        org.eclipse.aether.RequestTrace trace;
        org.eclipse.aether.metadata.Metadata metadata;
        java.lang.Exception exception;
        org.eclipse.aether.repository.ArtifactRepository repository;
        DefaultVersionRangeResolver this;
        org.eclipse.aether.impl.RepositoryEventDispatcher $stack13;
        org.eclipse.aether.RepositoryEvent $stack14;
        org.eclipse.aether.RepositoryEvent$Builder $u0;
        org.apache.maven.repository.internal.DefaultVersionRangeResolver $r0;

        this := @this: DefaultVersionRangeResolver;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        trace := @parameter1: org.eclipse.aether.RequestTrace;

        metadata := @parameter2: org.eclipse.aether.metadata.Metadata;

        repository := @parameter3: org.eclipse.aether.repository.ArtifactRepository;

        exception := @parameter4: java.lang.Exception;

        $u0 = new org.eclipse.aether.RepositoryEvent$Builder;

        $stack8 = <org.eclipse.aether.RepositoryEvent$EventType: org.eclipse.aether.RepositoryEvent$EventType METADATA_INVALID>;

        specialinvoke $u0.<org.eclipse.aether.RepositoryEvent$Builder: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RepositoryEvent$EventType)>(session, $stack8);

        virtualinvoke $u0.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setTrace(org.eclipse.aether.RequestTrace)>(trace);

        virtualinvoke $u0.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setMetadata(org.eclipse.aether.metadata.Metadata)>(metadata);

        virtualinvoke $u0.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setException(java.lang.Exception)>(exception);

        virtualinvoke $u0.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent$Builder setRepository(org.eclipse.aether.repository.ArtifactRepository)>(repository);

        $r0 = (org.apache.maven.repository.internal.DefaultVersionRangeResolver) this;

        $stack13 = $r0.<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.impl.RepositoryEventDispatcher repositoryEventDispatcher>;

        $stack14 = virtualinvoke $u0.<org.eclipse.aether.RepositoryEvent$Builder: org.eclipse.aether.RepositoryEvent build()>();

        interfaceinvoke $stack13.<org.eclipse.aether.impl.RepositoryEventDispatcher: void dispatch(org.eclipse.aether.RepositoryEvent)>($stack14);

        return;
    }

    public static void <clinit>()
    {
        <DefaultVersionRangeResolver: java.lang.String MAVEN_METADATA_XML> = "maven-metadata.xml";

        return;
    }
}
