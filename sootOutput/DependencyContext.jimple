public class DependencyContext extends java.lang.Object
{
    private static final java.util.Collection UNRESOLVED;
    private final org.apache.maven.project.MavenProject project;
    private final java.util.Collection scopesToCollectForCurrentProject;
    private final java.util.Collection scopesToResolveForCurrentProject;
    private final java.util.Collection scopesToCollectForAggregatedProjects;
    private final java.util.Collection scopesToResolveForAggregatedProjects;
    private volatile java.util.Collection lastDependencyArtifacts;
    private volatile int lastDependencyArtifactCount;

    public void <init>(org.apache.maven.project.MavenProject, java.util.Collection, java.util.Collection)
    {
        DependencyContext this;
        java.util.Collection $stack4, scopesToCollect, scopesToResolve;
        org.apache.maven.project.MavenProject project;
        java.util.Set $stack6, $stack8;
        java.util.TreeSet $u0, $u1;
        org.apache.maven.lifecycle.internal.DependencyContext $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: DependencyContext;

        project := @parameter0: org.apache.maven.project.MavenProject;

        scopesToCollect := @parameter1: java.util.Collection;

        scopesToResolve := @parameter2: java.util.Collection;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack4 = <org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection UNRESOLVED>;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts> = $stack4;

        $r1 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r1.<org.apache.maven.lifecycle.internal.DependencyContext: int lastDependencyArtifactCount> = -1;

        $r2 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r2.<org.apache.maven.lifecycle.internal.DependencyContext: org.apache.maven.project.MavenProject project> = project;

        $r3 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r3.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToCollectForCurrentProject> = scopesToCollect;

        $r4 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r4.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToResolveForCurrentProject> = scopesToResolve;

        $u0 = new java.util.TreeSet;

        specialinvoke $u0.<java.util.TreeSet: void <init>()>();

        $stack6 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($u0);

        $r5 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r5.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToCollectForAggregatedProjects> = $stack6;

        $u1 = new java.util.TreeSet;

        specialinvoke $u1.<java.util.TreeSet: void <init>()>();

        $stack8 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($u1);

        $r6 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r6.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToResolveForAggregatedProjects> = $stack8;

        return;
    }

    public org.apache.maven.project.MavenProject getProject()
    {
        DependencyContext this;
        org.apache.maven.project.MavenProject $stack1;
        org.apache.maven.lifecycle.internal.DependencyContext $r0;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: org.apache.maven.project.MavenProject project>;

        return $stack1;
    }

    public java.util.Collection getScopesToCollectForCurrentProject()
    {
        DependencyContext this;
        java.util.Collection $stack1;
        org.apache.maven.lifecycle.internal.DependencyContext $r0;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToCollectForCurrentProject>;

        return $stack1;
    }

    public java.util.Collection getScopesToResolveForCurrentProject()
    {
        DependencyContext this;
        java.util.Collection $stack1;
        org.apache.maven.lifecycle.internal.DependencyContext $r0;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToResolveForCurrentProject>;

        return $stack1;
    }

    public java.util.Collection getScopesToCollectForAggregatedProjects()
    {
        DependencyContext this;
        java.util.Collection $stack1;
        org.apache.maven.lifecycle.internal.DependencyContext $r0;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToCollectForAggregatedProjects>;

        return $stack1;
    }

    public java.util.Collection getScopesToResolveForAggregatedProjects()
    {
        DependencyContext this;
        java.util.Collection $stack1;
        org.apache.maven.lifecycle.internal.DependencyContext $r0;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToResolveForAggregatedProjects>;

        return $stack1;
    }

    public boolean isResolutionRequiredForCurrentProject()
    {
        DependencyContext this;
        org.apache.maven.project.MavenProject $stack1;
        java.util.Collection $stack2, $stack4, $stack6;
        java.util.Set $stack3;
        int $stack7, $stack8;
        boolean $stack5;
        org.apache.maven.lifecycle.internal.DependencyContext $r0, $r1, $r2, $r3, $r4;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack2 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts>;

        $r1 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r1.<org.apache.maven.lifecycle.internal.DependencyContext: org.apache.maven.project.MavenProject project>;

        $stack3 = virtualinvoke $stack1.<org.apache.maven.project.MavenProject: java.util.Set getDependencyArtifacts()>();

        if $stack2 != $stack3 goto label1;

        $r2 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack4 = $r2.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts>;

        if $stack4 == null goto label2;

        $r3 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack7 = $r3.<org.apache.maven.lifecycle.internal.DependencyContext: int lastDependencyArtifactCount>;

        $r4 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack6 = $r4.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts>;

        $stack8 = interfaceinvoke $stack6.<java.util.Collection: int size()>();

        if $stack7 == $stack8 goto label2;

     label1:
        $stack5 = 1;

        goto label3;

     label2:
        $stack5 = 0;

     label3:
        return $stack5;
    }

    public boolean isResolutionRequiredForAggregatedProjects(java.util.Collection, java.util.Collection)
    {
        DependencyContext this;
        java.util.Collection scopesToCollect, $stack4, scopesToResolve, $stack6;
        boolean $stack5, $stack7, $stack8;
        org.apache.maven.lifecycle.internal.DependencyContext $r0, $r1;

        this := @this: DependencyContext;

        scopesToCollect := @parameter0: java.util.Collection;

        scopesToResolve := @parameter1: java.util.Collection;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack4 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToCollectForAggregatedProjects>;

        $stack5 = interfaceinvoke $stack4.<java.util.Collection: boolean addAll(java.util.Collection)>(scopesToCollect);

        if $stack5 != 0 goto label1;

        $r1 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack6 = $r1.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection scopesToResolveForAggregatedProjects>;

        $stack7 = interfaceinvoke $stack6.<java.util.Collection: boolean addAll(java.util.Collection)>(scopesToResolve);

        if $stack7 == 0 goto label2;

     label1:
        $stack8 = 1;

        goto label3;

     label2:
        $stack8 = 0;

     label3:
        return $stack8;
    }

    public void synchronizeWithProjectState()
    {
        DependencyContext this;
        org.apache.maven.project.MavenProject $stack1;
        java.util.Set $stack2;
        java.util.Collection $stack3, $stack4;
        int $stack5;
        org.apache.maven.lifecycle.internal.DependencyContext $r0, $r1, $r2, $r3, $r4;

        this := @this: DependencyContext;

        $r0 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.DependencyContext: org.apache.maven.project.MavenProject project>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.project.MavenProject: java.util.Set getDependencyArtifacts()>();

        $r1 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r1.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts> = $stack2;

        $r2 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack3 = $r2.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts>;

        if $stack3 == null goto label1;

        $r3 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $stack4 = $r3.<org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection lastDependencyArtifacts>;

        $stack5 = interfaceinvoke $stack4.<java.util.Collection: int size()>();

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        $r4 = (org.apache.maven.lifecycle.internal.DependencyContext) this;

        $r4.<org.apache.maven.lifecycle.internal.DependencyContext: int lastDependencyArtifactCount> = $stack5;

        return;
    }

    static void <clinit>()
    {
        java.lang.Object[] $stack0;
        java.util.List $stack1;

        $stack0 = newarray (java.lang.Object)[0];

        $stack1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack0);

        <org.apache.maven.lifecycle.internal.DependencyContext: java.util.Collection UNRESOLVED> = $stack1;

        return;
    }
}
