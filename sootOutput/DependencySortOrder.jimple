public class DependencySortOrder extends java.lang.Object
{
    private final java.lang.String childElementNameList;
    private java.util.Collection childElementNames;

    public void <init>(java.lang.String)
    {
        DependencySortOrder this;
        java.lang.String childElementNameList, $stack2;
        sortpom.parameter.DependencySortOrder $r0;

        this := @this: DependencySortOrder;

        childElementNameList := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if childElementNameList != null goto label1;

        $stack2 = "";

        goto label2;

     label1:
        $stack2 = childElementNameList;

     label2:
        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $r0.<sortpom.parameter.DependencySortOrder: java.lang.String childElementNameList> = $stack2;

        return;
    }

    public java.util.Collection getChildElementNames()
    {
        DependencySortOrder this;
        java.util.Collection $stack1, $stack2;
        java.lang.String[] $stack3;
        java.util.List $stack4, $stack5;
        sortpom.parameter.DependencySortOrder $r0, $r1, $r2, $r3;

        this := @this: DependencySortOrder;

        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $stack1 = $r0.<sortpom.parameter.DependencySortOrder: java.util.Collection childElementNames>;

        if $stack1 != null goto label1;

        $r1 = (sortpom.parameter.DependencySortOrder) this;

        $stack3 = specialinvoke $r1.<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>();

        $stack4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack3);

        $stack5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack4);

        $r2 = (sortpom.parameter.DependencySortOrder) this;

        $r2.<sortpom.parameter.DependencySortOrder: java.util.Collection childElementNames> = $stack5;

     label1:
        $r3 = (sortpom.parameter.DependencySortOrder) this;

        $stack2 = $r3.<sortpom.parameter.DependencySortOrder: java.util.Collection childElementNames>;

        return $stack2;
    }

    private java.lang.String[] parseChildElementNameList()
    {
        DependencySortOrder this;
        java.lang.String $stack2, list;
        boolean $stack4;
        java.lang.String[] $stack5, $stack6;
        sortpom.parameter.DependencySortOrder $r0;

        this := @this: DependencySortOrder;

        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $stack2 = $r0.<sortpom.parameter.DependencySortOrder: java.lang.String childElementNameList>;

        list = virtualinvoke $stack2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s", "");

        $stack4 = virtualinvoke list.<java.lang.String: boolean isEmpty()>();

        if $stack4 == 0 goto label1;

        $stack6 = newarray (java.lang.String)[0];

        return $stack6;

     label1:
        $stack5 = virtualinvoke list.<java.lang.String: java.lang.String[] split(java.lang.String)>("[;,:]");

        return $stack5;
    }

    public boolean isDeprecatedValueTrue()
    {
        DependencySortOrder this;
        java.lang.String $stack1, $stack2;
        boolean $stack3;
        sortpom.parameter.DependencySortOrder $r0;

        this := @this: DependencySortOrder;

        $stack2 = "true";

        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $stack1 = $r0.<sortpom.parameter.DependencySortOrder: java.lang.String childElementNameList>;

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack1);

        return $stack3;
    }

    public boolean isDeprecatedValueFalse()
    {
        DependencySortOrder this;
        java.lang.String $stack1, $stack2;
        boolean $stack3;
        sortpom.parameter.DependencySortOrder $r0;

        this := @this: DependencySortOrder;

        $stack2 = "false";

        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $stack1 = $r0.<sortpom.parameter.DependencySortOrder: java.lang.String childElementNameList>;

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack1);

        return $stack3;
    }

    public boolean isNoSorting()
    {
        DependencySortOrder this;
        java.util.Collection $stack1;
        boolean $stack2;
        sortpom.parameter.DependencySortOrder $r0;

        this := @this: DependencySortOrder;

        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $stack1 = virtualinvoke $r0.<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>();

        $stack2 = interfaceinvoke $stack1.<java.util.Collection: boolean isEmpty()>();

        return $stack2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack2, $stack4, $stack5, $u0;
        DependencySortOrder this;
        java.util.Collection $stack3;
        java.lang.String $stack6;
        sortpom.parameter.DependencySortOrder $r0;

        this := @this: DependencySortOrder;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DependencySortOrder{childElementNames=");

        $r0 = (sortpom.parameter.DependencySortOrder) this;

        $stack3 = virtualinvoke $r0.<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack6;
    }
}
