class DependencySortOrderTest extends java.lang.Object
{

    void <init>()
    {
        DependencySortOrderTest this;

        this := @this: DependencySortOrderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void emptySortOrderShouldWork()
    {
        sortpom.parameter.DependencySortOrder $stack1, $stack4;
        java.lang.String $stack2, $stack5;
        org.hamcrest.Matcher $stack3, $stack6;
        DependencySortOrderTest this;

        this := @this: DependencySortOrderTest;

        $stack1 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack1.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>(null);

        $stack2 = virtualinvoke $stack1.<sortpom.parameter.DependencySortOrder: java.lang.String toString()>();

        $stack3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("DependencySortOrder{childElementNames=[]}");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack3);

        $stack4 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack4.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>("");

        $stack5 = virtualinvoke $stack4.<sortpom.parameter.DependencySortOrder: java.lang.String toString()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("DependencySortOrder{childElementNames=[]}");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    void emptySortOrderShouldNotSort()
    {
        sortpom.parameter.DependencySortOrder $stack1, $stack6;
        boolean $stack2, $stack7;
        java.lang.Boolean $stack3, $stack4, $stack8, $stack9;
        org.hamcrest.Matcher $stack5, $stack10;
        DependencySortOrderTest this;

        this := @this: DependencySortOrderTest;

        $stack1 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack1.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>(null);

        $stack2 = virtualinvoke $stack1.<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>();

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack2);

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack3, $stack5);

        $stack6 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack6.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>("");

        $stack7 = virtualinvoke $stack6.<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    void singleSortOrderShouldWork()
    {
        sortpom.parameter.DependencySortOrder $stack1, $stack4;
        java.lang.String $stack2;
        org.hamcrest.Matcher $stack3, $stack8;
        boolean $stack5;
        java.lang.Boolean $stack6, $stack7;
        DependencySortOrderTest this;

        this := @this: DependencySortOrderTest;

        $stack1 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack1.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>("Gurka");

        $stack2 = virtualinvoke $stack1.<sortpom.parameter.DependencySortOrder: java.lang.String toString()>();

        $stack3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("DependencySortOrder{childElementNames=[Gurka]}");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack3);

        $stack4 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack4.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>("Gurka");

        $stack5 = virtualinvoke $stack4.<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>();

        $stack6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack5);

        $stack7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack7);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack8);

        return;
    }

    void multipleSortOrderShouldWork()
    {
        sortpom.parameter.DependencySortOrder $stack1;
        java.lang.String $stack2;
        org.hamcrest.Matcher $stack3;
        DependencySortOrderTest this;

        this := @this: DependencySortOrderTest;

        $stack1 = new sortpom.parameter.DependencySortOrder;

        specialinvoke $stack1.<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>("Gurka,Tomat,Melon");

        $stack2 = virtualinvoke $stack1.<sortpom.parameter.DependencySortOrder: java.lang.String toString()>();

        $stack3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("DependencySortOrder{childElementNames=[Gurka, Tomat, Melon]}");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack3);

        return;
    }
}
