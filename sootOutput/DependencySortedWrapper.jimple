public class DependencySortedWrapper extends sortpom.wrapper.content.SortedWrapper
{
    private sortpom.wrapper.content.ChildElementSorter childElementSorter;

    public void <init>(org.jdom.Element, int)
    {
        DependencySortedWrapper this;
        org.jdom.Element element;
        int sortOrder;
        sortpom.wrapper.content.ChildElementSorter $stack3;
        sortpom.wrapper.content.DependencySortedWrapper $r0;

        this := @this: DependencySortedWrapper;

        element := @parameter0: org.jdom.Element;

        sortOrder := @parameter1: int;

        specialinvoke this.<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>(element, sortOrder);

        $stack3 = <sortpom.wrapper.content.ChildElementSorter: sortpom.wrapper.content.ChildElementSorter EMPTY_SORTER>;

        $r0 = (sortpom.wrapper.content.DependencySortedWrapper) this;

        $r0.<sortpom.wrapper.content.DependencySortedWrapper: sortpom.wrapper.content.ChildElementSorter childElementSorter> = $stack3;

        return;
    }

    public void setSortOrder(sortpom.parameter.DependencySortOrder)
    {
        DependencySortedWrapper this;
        org.jdom.Element $stack3;
        java.util.List children;
        sortpom.parameter.DependencySortOrder childElementNames;
        sortpom.wrapper.content.ChildElementSorter $u0;
        sortpom.wrapper.content.DependencySortedWrapper $r0, $r1;

        this := @this: DependencySortedWrapper;

        childElementNames := @parameter0: sortpom.parameter.DependencySortOrder;

        $r0 = (sortpom.wrapper.content.DependencySortedWrapper) this;

        $stack3 = virtualinvoke $r0.<sortpom.wrapper.content.DependencySortedWrapper: org.jdom.Element getContent()>();

        children = virtualinvoke $stack3.<org.jdom.Element: java.util.List getChildren()>();

        $u0 = new sortpom.wrapper.content.ChildElementSorter;

        specialinvoke $u0.<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>(childElementNames, children);

        $r1 = (sortpom.wrapper.content.DependencySortedWrapper) this;

        $r1.<sortpom.wrapper.content.DependencySortedWrapper: sortpom.wrapper.content.ChildElementSorter childElementSorter> = $u0;

        return;
    }

    public boolean isBefore(sortpom.wrapper.content.Wrapper)
    {
        sortpom.wrapper.content.Wrapper wrapper;
        boolean $stack2, $stack3, $stack5;
        DependencySortedWrapper this;
        sortpom.wrapper.content.DependencySortedWrapper $stack4, $r0;

        this := @this: DependencySortedWrapper;

        wrapper := @parameter0: sortpom.wrapper.content.Wrapper;

        $stack2 = wrapper instanceof sortpom.wrapper.content.DependencySortedWrapper;

        if $stack2 == 0 goto label1;

        $stack4 = (sortpom.wrapper.content.DependencySortedWrapper) wrapper;

        $r0 = (sortpom.wrapper.content.DependencySortedWrapper) this;

        $stack5 = specialinvoke $r0.<sortpom.wrapper.content.DependencySortedWrapper: boolean isBeforeDependencySortedWrapper(sortpom.wrapper.content.DependencySortedWrapper)>($stack4);

        return $stack5;

     label1:
        $stack3 = specialinvoke this.<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>(wrapper);

        return $stack3;
    }

    private boolean isBeforeDependencySortedWrapper(sortpom.wrapper.content.DependencySortedWrapper)
    {
        DependencySortedWrapper this;
        sortpom.wrapper.content.DependencySortedWrapper wrapper, $r0;
        sortpom.wrapper.content.ChildElementSorter $stack2, $stack3;
        boolean $stack4;

        this := @this: DependencySortedWrapper;

        wrapper := @parameter0: sortpom.wrapper.content.DependencySortedWrapper;

        $r0 = (sortpom.wrapper.content.DependencySortedWrapper) this;

        $stack3 = $r0.<sortpom.wrapper.content.DependencySortedWrapper: sortpom.wrapper.content.ChildElementSorter childElementSorter>;

        $stack2 = wrapper.<sortpom.wrapper.content.DependencySortedWrapper: sortpom.wrapper.content.ChildElementSorter childElementSorter>;

        $stack4 = virtualinvoke $stack3.<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>($stack2);

        return $stack4;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack2, $stack4, $stack5, $u0;
        DependencySortedWrapper this;
        sortpom.wrapper.content.ChildElementSorter $stack3;
        java.lang.String $stack6;
        sortpom.wrapper.content.DependencySortedWrapper $r0;

        this := @this: DependencySortedWrapper;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DependencySortedWrapper{childElementSorter=");

        $r0 = (sortpom.wrapper.content.DependencySortedWrapper) this;

        $stack3 = $r0.<sortpom.wrapper.content.DependencySortedWrapper: sortpom.wrapper.content.ChildElementSorter childElementSorter>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack6;
    }
}
