public class DistLocator extends java.lang.Object
{

    public void <init>()
    {
        DistLocator this;

        this := @this: DistLocator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File locate()
    {
        java.util.Map env;
        java.lang.Object envDist;
        java.io.File $stack7, location;
        java.lang.String $stack8;
        java.io.IOException $stack9;

     label1:
        env = staticinvoke <org.ooc.utils.ReadEnv: java.util.Map getEnv()>();

        envDist = interfaceinvoke env.<java.util.Map: java.lang.Object get(java.lang.Object)>("OOC_DIST");

        if envDist == null goto label3;

        $stack7 = new java.io.File;

        $stack8 = virtualinvoke envDist.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $stack7.<java.io.File: void <init>(java.lang.String)>($stack8);

     label2:
        return $stack7;

     label3:
        location = staticinvoke <org.ooc.libs.DistLocator: java.io.File tryUnderscore(java.util.Map)>(env);

        if location == null goto label5;

     label4:
        return location;

     label5:
        location = staticinvoke <org.ooc.libs.DistLocator: java.io.File tryClassPath()>();

        if location == null goto label7;

     label6:
        return location;

     label7:
        goto label9;

     label8:
        $stack9 := @caughtexception;

        virtualinvoke $stack9.<java.io.IOException: void printStackTrace()>();

     label9:
        return null;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }

    protected static java.io.File tryUnderscore(java.util.Map) throws java.io.IOException
    {
        java.util.Map env;
        java.lang.Object underscore;
        java.io.File $stack5, $stack11, $stack12, $stack13;
        java.lang.String $stack6, $stack7, $stack8, canonicalPath, $stack14;
        boolean $stack9, $stack15;

        env := @parameter0: java.util.Map;

        underscore = interfaceinvoke env.<java.util.Map: java.lang.Object get(java.lang.Object)>("_");

        if underscore == null goto label2;

        $stack5 = new java.io.File;

        $stack6 = virtualinvoke underscore.<java.lang.Object: java.lang.String toString()>();

        $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String trim()>();

        specialinvoke $stack5.<java.io.File: void <init>(java.lang.String)>($stack7);

        $stack8 = virtualinvoke $stack5.<java.io.File: java.lang.String getPath()>();

        $stack9 = virtualinvoke $stack8.<java.lang.String: boolean endsWith(java.lang.String)>("ooc");

        if $stack9 != 0 goto label1;

        $stack14 = virtualinvoke $stack5.<java.io.File: java.lang.String getPath()>();

        $stack15 = virtualinvoke $stack14.<java.lang.String: boolean endsWith(java.lang.String)>("ooc.exe");

        if $stack15 == 0 goto label2;

     label1:
        canonicalPath = virtualinvoke $stack5.<java.io.File: java.lang.String getCanonicalPath()>();

        $stack11 = new java.io.File;

        specialinvoke $stack11.<java.io.File: void <init>(java.lang.String)>(canonicalPath);

        $stack12 = virtualinvoke $stack11.<java.io.File: java.io.File getParentFile()>();

        $stack13 = virtualinvoke $stack12.<java.io.File: java.io.File getParentFile()>();

        return $stack13;

     label2:
        return null;
    }

    protected static java.io.File tryClassPath()
    {
        java.lang.String classPath, $stack9, token, base;
        java.util.StringTokenizer $stack8;
        boolean $stack10, $stack18;
        java.io.File $stack14, $stack16, idFile, $stack21, distribLocation;
        java.io.IOException $stack22;
        int i;

        classPath = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $stack8 = new java.util.StringTokenizer;

        $stack9 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $stack8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(classPath, $stack9);

     label1:
        $stack10 = virtualinvoke $stack8.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $stack10 == 0 goto label9;

        token = virtualinvoke $stack8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        base = "";

        i = 0;

     label2:
        if i >= 8 goto label8;

        base = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(base) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001../");

     label3:
        $stack14 = new java.io.File;

        specialinvoke $stack14.<java.io.File: void <init>(java.lang.String,java.lang.String)>(token, base);

        distribLocation = virtualinvoke $stack14.<java.io.File: java.io.File getCanonicalFile()>();

        $stack16 = new java.io.File;

        specialinvoke $stack16.<java.io.File: void <init>(java.io.File,java.lang.String)>(distribLocation, "sdk/ooc_sdk_id");

        idFile = staticinvoke <org.ooc.utils.FileUtils: java.io.File resolveRedundancies(java.io.File)>($stack16);

        $stack18 = virtualinvoke idFile.<java.io.File: boolean exists()>();

        if $stack18 == 0 goto label5;

        $stack21 = staticinvoke <org.ooc.utils.FileUtils: java.io.File resolveRedundancies(java.io.File)>(distribLocation);

     label4:
        return $stack21;

     label5:
        goto label7;

     label6:
        $stack22 := @caughtexception;

     label7:
        i = i + 1;

        goto label2;

     label8:
        goto label1;

     label9:
        return null;

        catch java.io.IOException from label3 to label4 with label6;
    }
}
