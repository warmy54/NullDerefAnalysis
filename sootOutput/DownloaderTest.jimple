public class DownloaderTest extends java.lang.Object
{
    public java.nio.file.Path testDir;
    private org.apache.maven.wrapper.DefaultDownloader download;
    private java.nio.file.Path downloadFile;
    private java.nio.file.Path rootDir;
    private java.net.URI sourceRoot;
    private java.nio.file.Path remoteFile;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        DownloaderTest this;

        this := @this: DownloaderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        DownloaderTest this;
        java.nio.file.Path $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack13;
        java.lang.String[] $stack8;
        java.util.List $stack10;
        java.nio.file.OpenOption[] $stack11;
        java.net.URI $stack14;
        org.apache.maven.wrapper.DefaultDownloader $u0;
        org.apache.maven.wrapper.DownloaderTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: DownloaderTest;

        $u0 = new org.apache.maven.wrapper.DefaultDownloader;

        specialinvoke $u0.<org.apache.maven.wrapper.DefaultDownloader: void <init>(java.lang.String,java.lang.String)>("mvnw", "aVersion");

        $r0 = (org.apache.maven.wrapper.DownloaderTest) this;

        $r0.<org.apache.maven.wrapper.DownloaderTest: org.apache.maven.wrapper.DefaultDownloader download> = $u0;

        $r1 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack2 = $r1.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path testDir>;

        $stack3 = interfaceinvoke $stack2.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("root");

        $r2 = (org.apache.maven.wrapper.DownloaderTest) this;

        $r2.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path rootDir> = $stack3;

        $r3 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack4 = $r3.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path rootDir>;

        $stack5 = interfaceinvoke $stack4.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file");

        $r4 = (org.apache.maven.wrapper.DownloaderTest) this;

        $r4.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path downloadFile> = $stack5;

        $r5 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack6 = $r5.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path testDir>;

        $stack7 = interfaceinvoke $stack6.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("remoteFile");

        $r6 = (org.apache.maven.wrapper.DownloaderTest) this;

        $r6.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path remoteFile> = $stack7;

        $r7 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack9 = $r7.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path remoteFile>;

        $stack8 = newarray (java.lang.String)[1];

        $stack8[0] = "sometext";

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack8);

        $stack11 = newarray (java.nio.file.OpenOption)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.file.OpenOption[])>($stack9, $stack10, $stack11);

        $r8 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack13 = $r8.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path remoteFile>;

        $stack14 = interfaceinvoke $stack13.<java.nio.file.Path: java.net.URI toUri()>();

        $r9 = (org.apache.maven.wrapper.DownloaderTest) this;

        $r9.<org.apache.maven.wrapper.DownloaderTest: java.net.URI sourceRoot> = $stack14;

        return;
    }

    public void testDownload() throws java.lang.Exception
    {
        boolean $stack1, $stack5, $stack14, $stack19;
        DownloaderTest this;
        java.nio.file.Path $stack2, $stack6, $stack13, $stack18;
        java.net.URI $stack3;
        org.apache.maven.wrapper.DefaultDownloader $stack4;
        java.util.List $stack8;
        java.util.stream.Stream $stack9;
        java.util.stream.Collector $stack10;
        java.lang.Object $stack11;
        java.nio.file.LinkOption[] $stack12, $stack17;
        java.lang.AssertionError $u0, $u1;
        org.apache.maven.wrapper.DownloaderTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: DownloaderTest;

        $stack1 = <org.apache.maven.wrapper.DownloaderTest: boolean $assertionsDisabled>;

        if $stack1 != 0 goto label1;

        $r0 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack18 = $r0.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path downloadFile>;

        $stack17 = newarray (java.nio.file.LinkOption)[0];

        $stack19 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack18, $stack17);

        if $stack19 == 0 goto label1;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label1:
        $r1 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack4 = $r1.<org.apache.maven.wrapper.DownloaderTest: org.apache.maven.wrapper.DefaultDownloader download>;

        $r2 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack3 = $r2.<org.apache.maven.wrapper.DownloaderTest: java.net.URI sourceRoot>;

        $r3 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack2 = $r3.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path downloadFile>;

        virtualinvoke $stack4.<org.apache.maven.wrapper.DefaultDownloader: void download(java.net.URI,java.nio.file.Path)>($stack3, $stack2);

        $stack5 = <org.apache.maven.wrapper.DownloaderTest: boolean $assertionsDisabled>;

        if $stack5 != 0 goto label2;

        $r4 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack13 = $r4.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path downloadFile>;

        $stack12 = newarray (java.nio.file.LinkOption)[0];

        $stack14 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack13, $stack12);

        if $stack14 != 0 goto label2;

        $u1 = new java.lang.AssertionError;

        specialinvoke $u1.<java.lang.AssertionError: void <init>()>();

        throw $u1;

     label2:
        $r5 = (org.apache.maven.wrapper.DownloaderTest) this;

        $stack6 = $r5.<org.apache.maven.wrapper.DownloaderTest: java.nio.file.Path downloadFile>;

        $stack8 = staticinvoke <java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path)>($stack6);

        $stack9 = interfaceinvoke $stack8.<java.util.List: java.util.stream.Stream stream()>();

        $stack10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining()>();

        $stack11 = interfaceinvoke $stack9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack10);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("sometext", $stack11);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/apache/maven/wrapper/DownloaderTest;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.apache.maven.wrapper.DownloaderTest: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
