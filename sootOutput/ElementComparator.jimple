public class ElementComparator extends java.lang.Object
{
    private final org.jdom.Element originalElement;
    private final org.jdom.Element newElement;

    public void <init>(org.jdom.Element, org.jdom.Element)
    {
        ElementComparator this;
        org.jdom.Element originalElement, newElement;
        sortpom.verify.ElementComparator $r0, $r1;

        this := @this: ElementComparator;

        originalElement := @parameter0: org.jdom.Element;

        newElement := @parameter1: org.jdom.Element;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (sortpom.verify.ElementComparator) this;

        $r0.<sortpom.verify.ElementComparator: org.jdom.Element originalElement> = originalElement;

        $r1 = (sortpom.verify.ElementComparator) this;

        $r1.<sortpom.verify.ElementComparator: org.jdom.Element newElement> = newElement;

        return;
    }

    public sortpom.util.XmlOrderedResult isElementOrdered()
    {
        ElementComparator this;
        org.jdom.Element $stack1, $stack3, $stack7, $stack9, $stack11, $stack14, $stack16, $stack18, $stack21, $stack23;
        java.lang.String $stack2, $stack4, $stack8, $stack15, $stack17, $stack19, $stack22, $stack24;
        boolean $stack5, $stack6;
        java.util.List $stack10, $stack12;
        sortpom.util.XmlOrderedResult $stack13, $stack20, $stack25;
        sortpom.verify.ElementComparator $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: ElementComparator;

        $r0 = (sortpom.verify.ElementComparator) this;

        $stack1 = $r0.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack2 = virtualinvoke $stack1.<org.jdom.Element: java.lang.String getName()>();

        $r1 = (sortpom.verify.ElementComparator) this;

        $stack3 = $r1.<sortpom.verify.ElementComparator: org.jdom.Element newElement>;

        $stack4 = virtualinvoke $stack3.<org.jdom.Element: java.lang.String getName()>();

        $stack5 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>($stack4);

        if $stack5 != 0 goto label1;

        $r2 = (sortpom.verify.ElementComparator) this;

        $stack21 = $r2.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack22 = virtualinvoke $stack21.<org.jdom.Element: java.lang.String getName()>();

        $r3 = (sortpom.verify.ElementComparator) this;

        $stack23 = $r3.<sortpom.verify.ElementComparator: org.jdom.Element newElement>;

        $stack24 = virtualinvoke $stack23.<org.jdom.Element: java.lang.String getName()>();

        $stack25 = staticinvoke <sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>($stack22, $stack24);

        return $stack25;

     label1:
        $r4 = (sortpom.verify.ElementComparator) this;

        $stack6 = specialinvoke $r4.<sortpom.verify.ElementComparator: boolean isEqualsIgnoringWhitespace()>();

        if $stack6 == 0 goto label2;

        $r5 = (sortpom.verify.ElementComparator) this;

        $stack14 = $r5.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack15 = virtualinvoke $stack14.<org.jdom.Element: java.lang.String getName()>();

        $r6 = (sortpom.verify.ElementComparator) this;

        $stack16 = $r6.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack17 = virtualinvoke $stack16.<org.jdom.Element: java.lang.String getText()>();

        $r7 = (sortpom.verify.ElementComparator) this;

        $stack18 = $r7.<sortpom.verify.ElementComparator: org.jdom.Element newElement>;

        $stack19 = virtualinvoke $stack18.<org.jdom.Element: java.lang.String getText()>();

        $stack20 = staticinvoke <sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>($stack15, $stack17, $stack19);

        return $stack20;

     label2:
        $r8 = (sortpom.verify.ElementComparator) this;

        $stack7 = $r8.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack8 = virtualinvoke $stack7.<org.jdom.Element: java.lang.String getName()>();

        $r9 = (sortpom.verify.ElementComparator) this;

        $stack9 = $r9.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack10 = virtualinvoke $stack9.<org.jdom.Element: java.util.List getChildren()>();

        $r10 = (sortpom.verify.ElementComparator) this;

        $stack11 = $r10.<sortpom.verify.ElementComparator: org.jdom.Element newElement>;

        $stack12 = virtualinvoke $stack11.<org.jdom.Element: java.util.List getChildren()>();

        $r11 = (sortpom.verify.ElementComparator) this;

        $stack13 = specialinvoke $r11.<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>($stack8, $stack10, $stack12);

        return $stack13;
    }

    private boolean isEqualsIgnoringWhitespace()
    {
        ElementComparator this;
        org.jdom.Element $stack1, $stack4;
        java.lang.String $stack2, $stack3, $stack5, $stack6;
        boolean $stack7, $stack8;
        sortpom.verify.ElementComparator $r0, $r1;

        this := @this: ElementComparator;

        $r0 = (sortpom.verify.ElementComparator) this;

        $stack1 = $r0.<sortpom.verify.ElementComparator: org.jdom.Element originalElement>;

        $stack2 = virtualinvoke $stack1.<org.jdom.Element: java.lang.String getText()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s", "");

        $r1 = (sortpom.verify.ElementComparator) this;

        $stack4 = $r1.<sortpom.verify.ElementComparator: org.jdom.Element newElement>;

        $stack5 = virtualinvoke $stack4.<org.jdom.Element: java.lang.String getText()>();

        $stack6 = virtualinvoke $stack5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s", "");

        $stack7 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        if $stack7 != 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        return $stack8;
    }

    private sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String, java.util.List, java.util.List)
    {
        java.util.List originalElementChildren, newElementChildren;
        int $stack8, $stack9, size, $stack11, $stack12, $stack14, $stack15, i;
        sortpom.util.XmlOrderedResult $stack13, $stack16, elementOrdered;
        java.lang.String name;
        sortpom.verify.ElementComparator $stack17;
        java.lang.Object $stack18, $stack20;
        org.jdom.Element $stack19, $stack21;
        boolean $stack23;
        ElementComparator this;

        this := @this: ElementComparator;

        name := @parameter0: java.lang.String;

        originalElementChildren := @parameter1: java.util.List;

        newElementChildren := @parameter2: java.util.List;

        $stack8 = interfaceinvoke originalElementChildren.<java.util.List: int size()>();

        $stack9 = interfaceinvoke newElementChildren.<java.util.List: int size()>();

        size = staticinvoke <java.lang.Math: int min(int,int)>($stack8, $stack9);

        i = 0;

     label1:
        if i >= size goto label3;

        $stack17 = new sortpom.verify.ElementComparator;

        $stack18 = interfaceinvoke originalElementChildren.<java.util.List: java.lang.Object get(int)>(i);

        $stack19 = (org.jdom.Element) $stack18;

        $stack20 = interfaceinvoke newElementChildren.<java.util.List: java.lang.Object get(int)>(i);

        $stack21 = (org.jdom.Element) $stack20;

        specialinvoke $stack17.<sortpom.verify.ElementComparator: void <init>(org.jdom.Element,org.jdom.Element)>($stack19, $stack21);

        elementOrdered = virtualinvoke $stack17.<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>();

        $stack23 = virtualinvoke elementOrdered.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        if $stack23 != 0 goto label2;

        return elementOrdered;

     label2:
        i = i + 1;

        goto label1;

     label3:
        $stack11 = interfaceinvoke originalElementChildren.<java.util.List: int size()>();

        $stack12 = interfaceinvoke newElementChildren.<java.util.List: int size()>();

        if $stack11 == $stack12 goto label4;

        $stack14 = interfaceinvoke originalElementChildren.<java.util.List: int size()>();

        $stack15 = interfaceinvoke newElementChildren.<java.util.List: int size()>();

        $stack16 = staticinvoke <sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>(name, $stack14, $stack15);

        return $stack16;

     label4:
        $stack13 = staticinvoke <sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult ordered()>();

        return $stack13;
    }
}
