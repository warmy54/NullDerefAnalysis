class ElementSortOrderMap extends java.lang.Object
{
    private final java.util.Map elementNameSortOrderMap;

    void <init>()
    {
        ElementSortOrderMap this;
        java.util.HashMap $u0;
        sortpom.wrapper.ElementSortOrderMap $r0;

        this := @this: ElementSortOrderMap;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r0 = (sortpom.wrapper.ElementSortOrderMap) this;

        $r0.<sortpom.wrapper.ElementSortOrderMap: java.util.Map elementNameSortOrderMap> = $u0;

        return;
    }

    public void addElement(org.jdom.Element, int)
    {
        org.jdom.Element element;
        java.lang.String deepName;
        ElementSortOrderMap this;
        int sortOrder;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        sortpom.wrapper.ElementSortOrderMap $r0;

        this := @this: ElementSortOrderMap;

        element := @parameter0: org.jdom.Element;

        sortOrder := @parameter1: int;

        deepName = staticinvoke <sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>(element);

        $r0 = (sortpom.wrapper.ElementSortOrderMap) this;

        $stack5 = $r0.<sortpom.wrapper.ElementSortOrderMap: java.util.Map elementNameSortOrderMap>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sortOrder);

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(deepName, $stack6);

        return;
    }

    public boolean containsElement(org.jdom.Element)
    {
        org.jdom.Element element;
        java.lang.String deepName;
        ElementSortOrderMap this;
        java.util.Map $stack4;
        boolean $stack5;
        sortpom.wrapper.ElementSortOrderMap $r0;

        this := @this: ElementSortOrderMap;

        element := @parameter0: org.jdom.Element;

        deepName = staticinvoke <sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>(element);

        $r0 = (sortpom.wrapper.ElementSortOrderMap) this;

        $stack4 = $r0.<sortpom.wrapper.ElementSortOrderMap: java.util.Map elementNameSortOrderMap>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: boolean containsKey(java.lang.Object)>(deepName);

        return $stack5;
    }

    public int getSortOrder(org.jdom.Element)
    {
        org.jdom.Element element;
        java.lang.String deepName;
        ElementSortOrderMap this;
        java.util.Map $stack4;
        java.lang.Object $stack5;
        java.lang.Integer $stack6;
        int $stack7;
        sortpom.wrapper.ElementSortOrderMap $r0;

        this := @this: ElementSortOrderMap;

        element := @parameter0: org.jdom.Element;

        deepName = staticinvoke <sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>(element);

        $r0 = (sortpom.wrapper.ElementSortOrderMap) this;

        $stack4 = $r0.<sortpom.wrapper.ElementSortOrderMap: java.util.Map elementNameSortOrderMap>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.lang.Object get(java.lang.Object)>(deepName);

        $stack6 = (java.lang.Integer) $stack5;

        $stack7 = virtualinvoke $stack6.<java.lang.Integer: int intValue()>();

        return $stack7;
    }
}
