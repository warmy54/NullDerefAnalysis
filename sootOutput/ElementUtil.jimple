final class ElementUtil extends java.lang.Object
{

    private void <init>()
    {
        ElementUtil this;

        this := @this: ElementUtil;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String getDeepName(org.jdom.Element)
    {
        org.jdom.Element element, $stack2;
        java.lang.StringBuilder $stack1, $stack4, $stack5, $stack7;
        java.lang.String $stack3, $stack6, $stack8;

        element := @parameter0: org.jdom.Element;

        if element != null goto label1;

        return "";

     label1:
        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke element.<org.jdom.Element: org.jdom.Element getParentElement()>();

        $stack3 = staticinvoke <sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>($stack2);

        $stack4 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $stack6 = virtualinvoke element.<org.jdom.Element: java.lang.String getName()>();

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack8;
    }

    static boolean isElementParentName(org.jdom.Element, java.lang.String)
    {
        org.jdom.Element element, parent;
        java.lang.String name;
        boolean $stack4;

        element := @parameter0: org.jdom.Element;

        name := @parameter1: java.lang.String;

        parent = virtualinvoke element.<org.jdom.Element: org.jdom.Element getParentElement()>();

        if parent != null goto label1;

        return 0;

     label1:
        $stack4 = staticinvoke <sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>(parent, name);

        return $stack4;
    }

    static boolean isElementName(org.jdom.Element, java.lang.String)
    {
        org.jdom.Element element;
        java.lang.String $stack2, name;
        boolean $stack3;

        element := @parameter0: org.jdom.Element;

        name := @parameter1: java.lang.String;

        $stack2 = virtualinvoke element.<org.jdom.Element: java.lang.String getName()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(name);

        return $stack3;
    }
}
