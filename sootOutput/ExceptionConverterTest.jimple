class ExceptionConverterTest extends java.lang.Object
{

    void <init>()
    {
        ExceptionConverterTest this;

        this := @this: ExceptionConverterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void noExceptionShouldRunJustFine() throws org.apache.maven.plugin.MojoFailureException
    {
        sortpom.exception.ExceptionConverter $stack2;
        java.lang.Runnable $stack3;
        org.hamcrest.Matcher $stack4, $stack5;
        ExceptionConverterTest this;

        this := @this: ExceptionConverterTest;

        $stack2 = new sortpom.exception.ExceptionConverter;

        $stack3 = staticinvoke <ExceptionConverterTest$lambda_noExceptionShouldRunJustFine_0__309: java.lang.Runnable bootstrap$()>();

        specialinvoke $stack2.<sortpom.exception.ExceptionConverter: void <init>(java.lang.Runnable)>($stack3);

        virtualinvoke $stack2.<sortpom.exception.ExceptionConverter: void executeAndConvertException()>();

        $stack4 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue()>();

        $stack5 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack5);

        return;
    }

    void failureExceptionShouldThrowMojoFailureException()
    {
        sortpom.exception.FailureException $stack4;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack6;
        org.apache.maven.plugin.MojoFailureException thrown;
        java.lang.String $stack8;
        org.hamcrest.Matcher $stack9, $stack10;
        ExceptionConverterTest this;

        this := @this: ExceptionConverterTest;

        $stack4 = new sortpom.exception.FailureException;

        specialinvoke $stack4.<sortpom.exception.FailureException: void <init>(java.lang.String)>("Gurka");

        testMethod = staticinvoke <ExceptionConverterTest$lambda_failureExceptionShouldThrowMojoFailureException_2__310: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.exception.FailureException)>($stack4);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/plugin/MojoFailureException;", testMethod);

        thrown = (org.apache.maven.plugin.MojoFailureException) $stack6;

        $stack8 = virtualinvoke thrown.<org.apache.maven.plugin.MojoFailureException: java.lang.String getMessage()>();

        $stack9 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Gurka");

        $stack10 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected message", $stack8, $stack10);

        return;
    }

    void failureExceptionShouldKeepCause()
    {
        java.lang.IllegalArgumentException $stack5;
        sortpom.exception.FailureException $stack6;
        org.junit.jupiter.api.function.Executable testMethod, $stack11, $stack13;
        java.lang.Throwable $stack8;
        org.apache.maven.plugin.MojoFailureException thrown;
        org.junit.jupiter.api.function.Executable[] $stack9;
        ExceptionConverterTest this;

        this := @this: ExceptionConverterTest;

        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not valid");

        $stack6 = new sortpom.exception.FailureException;

        specialinvoke $stack6.<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>("Gurka", $stack5);

        testMethod = staticinvoke <ExceptionConverterTest$lambda_failureExceptionShouldKeepCause_4__312: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.exception.FailureException)>($stack6);

        $stack8 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/plugin/MojoFailureException;", testMethod);

        thrown = (org.apache.maven.plugin.MojoFailureException) $stack8;

        $stack9 = newarray (org.junit.jupiter.api.function.Executable)[2];

        $stack11 = staticinvoke <ExceptionConverterTest$lambda_failureExceptionShouldKeepCause_5__314: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.plugin.MojoFailureException)>(thrown);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <ExceptionConverterTest$lambda_failureExceptionShouldKeepCause_6__315: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.plugin.MojoFailureException,java.lang.IllegalArgumentException)>(thrown, $stack5);

        $stack9[1] = $stack13;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertAll(org.junit.jupiter.api.function.Executable[])>($stack9);

        return;
    }

    private static void lambda$failureExceptionShouldKeepCause$6(org.apache.maven.plugin.MojoFailureException, java.lang.IllegalArgumentException) throws java.lang.Throwable
    {
        org.apache.maven.plugin.MojoFailureException thrown;
        java.lang.Throwable $stack3;
        java.lang.IllegalArgumentException cause;
        org.hamcrest.Matcher $stack4, $stack5;

        thrown := @parameter0: org.apache.maven.plugin.MojoFailureException;

        cause := @parameter1: java.lang.IllegalArgumentException;

        $stack3 = virtualinvoke thrown.<org.apache.maven.plugin.MojoFailureException: java.lang.Throwable getCause()>();

        $stack4 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(cause);

        $stack5 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected cause", $stack3, $stack5);

        return;
    }

    private static void lambda$failureExceptionShouldKeepCause$5(org.apache.maven.plugin.MojoFailureException) throws java.lang.Throwable
    {
        org.apache.maven.plugin.MojoFailureException thrown;
        java.lang.String $stack2;
        org.hamcrest.Matcher $stack3, $stack4;

        thrown := @parameter0: org.apache.maven.plugin.MojoFailureException;

        $stack2 = virtualinvoke thrown.<org.apache.maven.plugin.MojoFailureException: java.lang.String getMessage()>();

        $stack3 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Gurka");

        $stack4 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack3);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected message", $stack2, $stack4);

        return;
    }

    private static void lambda$failureExceptionShouldKeepCause$4(sortpom.exception.FailureException) throws java.lang.Throwable
    {
        sortpom.exception.ExceptionConverter $stack1;
        sortpom.exception.FailureException failureException;
        java.lang.Runnable $stack2;

        failureException := @parameter0: sortpom.exception.FailureException;

        $stack1 = new sortpom.exception.ExceptionConverter;

        $stack2 = staticinvoke <ExceptionConverterTest$lambda_failureExceptionShouldKeepCause_3__311: java.lang.Runnable bootstrap$(sortpom.exception.FailureException)>(failureException);

        specialinvoke $stack1.<sortpom.exception.ExceptionConverter: void <init>(java.lang.Runnable)>($stack2);

        virtualinvoke $stack1.<sortpom.exception.ExceptionConverter: void executeAndConvertException()>();

        return;
    }

    private static void lambda$failureExceptionShouldKeepCause$3(sortpom.exception.FailureException)
    {
        sortpom.exception.FailureException failureException;
        java.lang.Throwable $r0;

        failureException := @parameter0: sortpom.exception.FailureException;

        $r0 = (java.lang.Throwable) failureException;

        throw $r0;
    }

    private static void lambda$failureExceptionShouldThrowMojoFailureException$2(sortpom.exception.FailureException) throws java.lang.Throwable
    {
        sortpom.exception.ExceptionConverter $stack1;
        sortpom.exception.FailureException failureException;
        java.lang.Runnable $stack2;

        failureException := @parameter0: sortpom.exception.FailureException;

        $stack1 = new sortpom.exception.ExceptionConverter;

        $stack2 = staticinvoke <ExceptionConverterTest$lambda_failureExceptionShouldThrowMojoFailureException_1__313: java.lang.Runnable bootstrap$(sortpom.exception.FailureException)>(failureException);

        specialinvoke $stack1.<sortpom.exception.ExceptionConverter: void <init>(java.lang.Runnable)>($stack2);

        virtualinvoke $stack1.<sortpom.exception.ExceptionConverter: void executeAndConvertException()>();

        return;
    }

    private static void lambda$failureExceptionShouldThrowMojoFailureException$1(sortpom.exception.FailureException)
    {
        sortpom.exception.FailureException failureException;
        java.lang.Throwable $r0;

        failureException := @parameter0: sortpom.exception.FailureException;

        $r0 = (java.lang.Throwable) failureException;

        throw $r0;
    }

    private static void lambda$noExceptionShouldRunJustFine$0()
    {
        return;
    }
}
