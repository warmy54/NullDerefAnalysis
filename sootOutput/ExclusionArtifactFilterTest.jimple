public class ExclusionArtifactFilterTest extends java.lang.Object
{
    private org.apache.maven.artifact.Artifact artifact;

    public void <init>()
    {
        ExclusionArtifactFilterTest this;

        this := @this: ExclusionArtifactFilterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        ExclusionArtifactFilterTest this;
        java.lang.Object $stack1;
        org.apache.maven.artifact.Artifact $stack2, $stack3, $stack7;
        java.lang.String $stack4, $stack8;
        org.mockito.stubbing.OngoingStubbing $stack5, $stack9;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0, $r1, $r2;

        this := @this: ExclusionArtifactFilterTest;

        $stack1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/artifact/Artifact;");

        $stack2 = (org.apache.maven.artifact.Artifact) $stack1;

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact> = $stack2;

        $r1 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack3 = $r1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack5 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack4);

        interfaceinvoke $stack5.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("org.apache.maven");

        $r2 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack7 = $r2.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack8 = interfaceinvoke $stack7.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack8);

        interfaceinvoke $stack9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("maven-core");

        return;
    }

    public void testExcludeExact()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.maven");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-core");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testExcludeNoMatch()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.maven");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-model");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testExcludeGroupIdWildcard()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("*");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-core");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testExcludeGroupIdWildcardNoMatch()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("*");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-compat");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testExcludeArtifactIdWildcard()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.maven");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("*");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testExcludeArtifactIdWildcardNoMatch()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.groovy");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("*");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testExcludeAllWildcard()
    {
        java.util.List $stack5;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack6;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack9;
        org.hamcrest.Matcher $stack10;
        org.apache.maven.model.Exclusion $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("*");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("*");

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack5);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack6 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack7 = virtualinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    public void testMultipleExclusionsExcludeArtifactIdWildcard()
    {
        org.apache.maven.model.Exclusion[] $stack7;
        java.util.List $stack8;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack9;
        boolean $stack10;
        java.lang.Boolean $stack11, $stack12;
        org.hamcrest.Matcher $stack13;
        org.apache.maven.model.Exclusion $u0, $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u2;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.groovy");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("*");

        $u1 = new org.apache.maven.model.Exclusion;

        specialinvoke $u1.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.maven");

        virtualinvoke $u1.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-core");

        $u2 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack7 = newarray (org.apache.maven.model.Exclusion)[2];

        $stack7[0] = $u0;

        $stack7[1] = $u1;

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        specialinvoke $u2.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack8);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack9 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack10 = virtualinvoke $u2.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack9);

        $stack11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack10);

        $stack12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack13 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack12);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack11, $stack13);

        return;
    }

    public void testMultipleExclusionsExcludeGroupIdWildcard()
    {
        org.apache.maven.model.Exclusion[] $stack7;
        java.util.List $stack8;
        ExclusionArtifactFilterTest this;
        org.apache.maven.artifact.Artifact $stack9;
        boolean $stack10;
        java.lang.Boolean $stack11, $stack12;
        org.hamcrest.Matcher $stack13;
        org.apache.maven.model.Exclusion $u0, $u1;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u2;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest $r0;

        this := @this: ExclusionArtifactFilterTest;

        $u0 = new org.apache.maven.model.Exclusion;

        specialinvoke $u0.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("*");

        virtualinvoke $u0.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-model");

        $u1 = new org.apache.maven.model.Exclusion;

        specialinvoke $u1.<org.apache.maven.model.Exclusion: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Exclusion: void setGroupId(java.lang.String)>("org.apache.maven");

        virtualinvoke $u1.<org.apache.maven.model.Exclusion: void setArtifactId(java.lang.String)>("maven-core");

        $u2 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack7 = newarray (org.apache.maven.model.Exclusion)[2];

        $stack7[0] = $u0;

        $stack7[1] = $u1;

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        specialinvoke $u2.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack8);

        $r0 = (org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest) this;

        $stack9 = $r0.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilterTest: org.apache.maven.artifact.Artifact artifact>;

        $stack10 = virtualinvoke $u2.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>($stack9);

        $stack11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack10);

        $stack12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack13 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($stack12);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack11, $stack13);

        return;
    }
}
