class ExecutionEventLoggerTest extends java.lang.Object
{

    void <init>()
    {
        ExecutionEventLoggerTest this;

        this := @this: ExecutionEventLoggerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setUp()
    {
        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void setColorEnabled(boolean)>(0);

        return;
    }

    public static void tearDown()
    {
        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void setColorEnabled(boolean)>(1);

        return;
    }

    void testProjectStarted()
    {
        java.lang.Object $stack6, $stack13, $stack14, $stack35, $stack37, $stack39, $stack41;
        org.slf4j.Logger logger, $stack36, $stack38, $stack40, $stack42;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack10;
        org.mockito.stubbing.OngoingStubbing $stack9, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31;
        org.apache.maven.cli.event.ExecutionEventLogger $stack12;
        org.apache.maven.execution.ExecutionEvent event;
        org.apache.maven.project.MavenProject project, $stack30;
        java.lang.String $stack15, $stack18, $stack21, $stack24, $stack27;
        java.lang.Object[] $stack33;
        org.mockito.InOrder inOrder;
        ExecutionEventLoggerTest this;

        this := @this: ExecutionEventLoggerTest;

        $stack6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/slf4j/Logger;");

        logger = (org.slf4j.Logger) $stack6;

        $stack7 = interfaceinvoke logger.<org.slf4j.Logger: boolean isInfoEnabled()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack8);

        $stack10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $stack9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack10);

        $stack12 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack12.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger)>(logger);

        $stack13 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/execution/ExecutionEvent;");

        event = (org.apache.maven.execution.ExecutionEvent) $stack13;

        $stack14 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/project/MavenProject;");

        project = (org.apache.maven.project.MavenProject) $stack14;

        $stack15 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack16 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack15);

        interfaceinvoke $stack16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("org.apache.maven");

        $stack18 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack19 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack18);

        interfaceinvoke $stack19.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("maven-embedder");

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getPackaging()>();

        $stack22 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack21);

        interfaceinvoke $stack22.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("jar");

        $stack24 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getName()>();

        $stack25 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack24);

        interfaceinvoke $stack25.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("Apache Maven Embedder");

        $stack27 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack28 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack27);

        interfaceinvoke $stack28.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("3.5.4-SNAPSHOT");

        $stack30 = interfaceinvoke event.<org.apache.maven.execution.ExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack31 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack30);

        interfaceinvoke $stack31.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(project);

        virtualinvoke $stack12.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack33 = newarray (java.lang.Object)[1];

        $stack33[0] = logger;

        inOrder = staticinvoke <org.mockito.Mockito: org.mockito.InOrder inOrder(java.lang.Object[])>($stack33);

        $stack35 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack36 = (org.slf4j.Logger) $stack35;

        interfaceinvoke $stack36.<org.slf4j.Logger: void info(java.lang.String)>("");

        $stack37 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack38 = (org.slf4j.Logger) $stack37;

        interfaceinvoke $stack38.<org.slf4j.Logger: void info(java.lang.String)>("------------------< org.apache.maven:maven-embedder >-------------------");

        $stack39 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack40 = (org.slf4j.Logger) $stack39;

        interfaceinvoke $stack40.<org.slf4j.Logger: void info(java.lang.String)>("Building Apache Maven Embedder 3.5.4-SNAPSHOT");

        $stack41 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack42 = (org.slf4j.Logger) $stack41;

        interfaceinvoke $stack42.<org.slf4j.Logger: void info(java.lang.String)>("--------------------------------[ jar ]---------------------------------");

        return;
    }

    void testProjectStartedOverflow()
    {
        java.lang.Object $stack6, $stack13, $stack14, $stack35, $stack37, $stack39, $stack41;
        org.slf4j.Logger logger, $stack36, $stack38, $stack40, $stack42;
        boolean $stack7;
        java.lang.Boolean $stack8, $stack10;
        org.mockito.stubbing.OngoingStubbing $stack9, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31;
        org.apache.maven.cli.event.ExecutionEventLogger $stack12;
        org.apache.maven.execution.ExecutionEvent event;
        org.apache.maven.project.MavenProject project, $stack30;
        java.lang.String $stack15, $stack18, $stack21, $stack24, $stack27;
        java.lang.Object[] $stack33;
        org.mockito.InOrder inOrder;
        ExecutionEventLoggerTest this;

        this := @this: ExecutionEventLoggerTest;

        $stack6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/slf4j/Logger;");

        logger = (org.slf4j.Logger) $stack6;

        $stack7 = interfaceinvoke logger.<org.slf4j.Logger: boolean isInfoEnabled()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack8);

        $stack10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $stack9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack10);

        $stack12 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack12.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger)>(logger);

        $stack13 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/execution/ExecutionEvent;");

        event = (org.apache.maven.execution.ExecutionEvent) $stack13;

        $stack14 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/project/MavenProject;");

        project = (org.apache.maven.project.MavenProject) $stack14;

        $stack15 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack16 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack15);

        interfaceinvoke $stack16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("org.apache.maven.plugins.overflow");

        $stack18 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack19 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack18);

        interfaceinvoke $stack19.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("maven-project-info-reports-plugin");

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getPackaging()>();

        $stack22 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack21);

        interfaceinvoke $stack22.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("maven-plugin");

        $stack24 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getName()>();

        $stack25 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack24);

        interfaceinvoke $stack25.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("Apache Maven Project Info Reports Plugin");

        $stack27 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack28 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack27);

        interfaceinvoke $stack28.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("3.0.0-SNAPSHOT");

        $stack30 = interfaceinvoke event.<org.apache.maven.execution.ExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack31 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack30);

        interfaceinvoke $stack31.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(project);

        virtualinvoke $stack12.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack33 = newarray (java.lang.Object)[1];

        $stack33[0] = logger;

        inOrder = staticinvoke <org.mockito.Mockito: org.mockito.InOrder inOrder(java.lang.Object[])>($stack33);

        $stack35 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack36 = (org.slf4j.Logger) $stack35;

        interfaceinvoke $stack36.<org.slf4j.Logger: void info(java.lang.String)>("");

        $stack37 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack38 = (org.slf4j.Logger) $stack37;

        interfaceinvoke $stack38.<org.slf4j.Logger: void info(java.lang.String)>("--< org.apache.maven.plugins.overflow:maven-project-info-reports-plugin >--");

        $stack39 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack40 = (org.slf4j.Logger) $stack39;

        interfaceinvoke $stack40.<org.slf4j.Logger: void info(java.lang.String)>("Building Apache Maven Project Info Reports Plugin 3.0.0-SNAPSHOT");

        $stack41 = interfaceinvoke inOrder.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(logger);

        $stack42 = (org.slf4j.Logger) $stack41;

        interfaceinvoke $stack42.<org.slf4j.Logger: void info(java.lang.String)>("----------------------------[ maven-plugin ]----------------------------");

        return;
    }

    void testTerminalWidth()
    {
        java.lang.Object $stack4, $stack10, $stack11, $stack31, $stack34, $stack37, $stack40, $stack43;
        org.slf4j.Logger logger, $stack32, $stack35, $stack38, $stack41, $stack44;
        boolean $stack5;
        java.lang.Boolean $stack6, $stack8;
        org.mockito.stubbing.OngoingStubbing $stack7, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28;
        org.apache.maven.execution.ExecutionEvent event;
        org.apache.maven.project.MavenProject project, $stack27;
        java.lang.String $stack12, $stack15, $stack18, $stack21, $stack24;
        org.apache.maven.cli.event.ExecutionEventLogger $stack30, $stack33, $stack36, $stack39, $stack42;
        ExecutionEventLoggerTest this;

        this := @this: ExecutionEventLoggerTest;

        $stack4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/slf4j/Logger;");

        logger = (org.slf4j.Logger) $stack4;

        $stack5 = interfaceinvoke logger.<org.slf4j.Logger: boolean isInfoEnabled()>();

        $stack6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack5);

        $stack7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $stack7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack8);

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/execution/ExecutionEvent;");

        event = (org.apache.maven.execution.ExecutionEvent) $stack10;

        $stack11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/project/MavenProject;");

        project = (org.apache.maven.project.MavenProject) $stack11;

        $stack12 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack13 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack12);

        interfaceinvoke $stack13.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("org.apache.maven.plugins.overflow");

        $stack15 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack16 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack15);

        interfaceinvoke $stack16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("maven-project-info-reports-plugin");

        $stack18 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getPackaging()>();

        $stack19 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack18);

        interfaceinvoke $stack19.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("maven-plugin");

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getName()>();

        $stack22 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack21);

        interfaceinvoke $stack22.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("Apache Maven Project Info Reports Plugin");

        $stack24 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack25 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack24);

        interfaceinvoke $stack25.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("3.0.0-SNAPSHOT");

        $stack27 = interfaceinvoke event.<org.apache.maven.execution.ExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack28 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack27);

        interfaceinvoke $stack28.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(project);

        $stack30 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack30.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger,int)>(logger, -1);

        virtualinvoke $stack30.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack31 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(logger);

        $stack32 = (org.slf4j.Logger) $stack31;

        interfaceinvoke $stack32.<org.slf4j.Logger: void info(java.lang.String)>("----------------------------[ maven-plugin ]----------------------------");

        $stack33 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack33.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger,int)>(logger, 30);

        virtualinvoke $stack33.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack34 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(logger);

        $stack35 = (org.slf4j.Logger) $stack34;

        interfaceinvoke $stack35.<org.slf4j.Logger: void info(java.lang.String)>("------------------[ maven-plugin ]------------------");

        $stack36 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack36.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger,int)>(logger, 70);

        virtualinvoke $stack36.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack37 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(logger);

        $stack38 = (org.slf4j.Logger) $stack37;

        interfaceinvoke $stack38.<org.slf4j.Logger: void info(java.lang.String)>("-----------------------[ maven-plugin ]-----------------------");

        $stack39 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack39.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger,int)>(logger, 110);

        virtualinvoke $stack39.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack40 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(logger);

        $stack41 = (org.slf4j.Logger) $stack40;

        interfaceinvoke $stack41.<org.slf4j.Logger: void info(java.lang.String)>("-------------------------------------------[ maven-plugin ]-------------------------------------------");

        $stack42 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $stack42.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger,int)>(logger, 200);

        virtualinvoke $stack42.<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>(event);

        $stack43 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(logger);

        $stack44 = (org.slf4j.Logger) $stack43;

        interfaceinvoke $stack44.<org.slf4j.Logger: void info(java.lang.String)>("-----------------------------------------------------[ maven-plugin ]-----------------------------------------------------");

        return;
    }
}
