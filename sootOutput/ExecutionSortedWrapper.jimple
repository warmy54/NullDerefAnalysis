public class ExecutionSortedWrapper extends sortpom.wrapper.content.SortedWrapper
{
    private final sortpom.wrapper.content.Phase phase;
    private final java.lang.String id;

    public void <init>(org.jdom.Element, int)
    {
        ExecutionSortedWrapper this;
        org.jdom.Element element, $stack4;
        int sortOrder;
        java.util.List children;
        java.util.stream.Stream $stack6, $stack8, $stack10, $stack14, $stack16, $stack18;
        java.util.function.Predicate $stack7, $stack15;
        java.util.function.Function $stack9, $stack17;
        java.util.Optional $stack11, $stack19;
        java.lang.Object $stack12, $stack20;
        sortpom.wrapper.content.Phase $stack13;
        java.lang.String $stack21;
        sortpom.wrapper.content.ExecutionSortedWrapper $r0, $r1, $r2;

        this := @this: ExecutionSortedWrapper;

        element := @parameter0: org.jdom.Element;

        sortOrder := @parameter1: int;

        specialinvoke this.<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>(element, sortOrder);

        $r0 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $stack4 = virtualinvoke $r0.<sortpom.wrapper.content.ExecutionSortedWrapper: org.jdom.Element getContent()>();

        children = virtualinvoke $stack4.<org.jdom.Element: java.util.List getChildren()>();

        $stack6 = interfaceinvoke children.<java.util.List: java.util.stream.Stream stream()>();

        $stack7 = staticinvoke <ExecutionSortedWrapper$lambda_new_0__309: java.util.function.Predicate bootstrap$()>();

        $stack8 = interfaceinvoke $stack6.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack7);

        $stack9 = staticinvoke <ExecutionSortedWrapper$lambda_new_1__310: java.util.function.Function bootstrap$()>();

        $stack10 = interfaceinvoke $stack8.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack9);

        $stack11 = interfaceinvoke $stack10.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $stack12 = virtualinvoke $stack11.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $stack13 = (sortpom.wrapper.content.Phase) $stack12;

        $r1 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $r1.<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase phase> = $stack13;

        $stack14 = interfaceinvoke children.<java.util.List: java.util.stream.Stream stream()>();

        $stack15 = staticinvoke <ExecutionSortedWrapper$lambda_new_2__311: java.util.function.Predicate bootstrap$()>();

        $stack16 = interfaceinvoke $stack14.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack15);

        $stack17 = staticinvoke <ExecutionSortedWrapper$getTextTrim__312: java.util.function.Function bootstrap$()>();

        $stack18 = interfaceinvoke $stack16.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack17);

        $stack19 = interfaceinvoke $stack18.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $stack20 = virtualinvoke $stack19.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $stack21 = (java.lang.String) $stack20;

        $r2 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $r2.<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String id> = $stack21;

        return;
    }

    public boolean isBefore(sortpom.wrapper.content.Wrapper)
    {
        sortpom.wrapper.content.Wrapper wrapper;
        boolean $stack2, $stack3, $stack5;
        ExecutionSortedWrapper this;
        sortpom.wrapper.content.ExecutionSortedWrapper $stack4, $r0;

        this := @this: ExecutionSortedWrapper;

        wrapper := @parameter0: sortpom.wrapper.content.Wrapper;

        $stack2 = wrapper instanceof sortpom.wrapper.content.ExecutionSortedWrapper;

        if $stack2 == 0 goto label1;

        $stack4 = (sortpom.wrapper.content.ExecutionSortedWrapper) wrapper;

        $r0 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $stack5 = specialinvoke $r0.<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBeforeWrapper(sortpom.wrapper.content.ExecutionSortedWrapper)>($stack4);

        return $stack5;

     label1:
        $stack3 = specialinvoke this.<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>(wrapper);

        return $stack3;
    }

    private boolean isBeforeWrapper(sortpom.wrapper.content.ExecutionSortedWrapper)
    {
        ExecutionSortedWrapper this;
        sortpom.wrapper.content.ExecutionSortedWrapper wrapper, $r0, $r1;
        sortpom.wrapper.content.Phase $stack3, $stack4;
        int compare, $stack8;
        java.lang.String $stack6, $stack7;
        boolean $stack10, $stack9;

        this := @this: ExecutionSortedWrapper;

        wrapper := @parameter0: sortpom.wrapper.content.ExecutionSortedWrapper;

        $r0 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $stack4 = $r0.<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase phase>;

        $stack3 = wrapper.<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase phase>;

        compare = staticinvoke <sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>($stack4, $stack3);

        if compare == 0 goto label3;

        if compare >= 0 goto label1;

        $stack10 = 1;

        goto label2;

     label1:
        $stack10 = 0;

     label2:
        return $stack10;

     label3:
        $r1 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $stack7 = $r1.<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String id>;

        $stack6 = wrapper.<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String id>;

        $stack8 = virtualinvoke $stack7.<java.lang.String: int compareTo(java.lang.String)>($stack6);

        if $stack8 >= 0 goto label4;

        $stack9 = 1;

        goto label5;

     label4:
        $stack9 = 0;

     label5:
        return $stack9;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack2, $stack4, $stack5, $stack7, $stack8, $stack9, $u0;
        ExecutionSortedWrapper this;
        sortpom.wrapper.content.Phase $stack3;
        java.lang.String $stack6, $stack10;
        sortpom.wrapper.content.ExecutionSortedWrapper $r0, $r1;

        this := @this: ExecutionSortedWrapper;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ExecutionSortedWrapper{phase=");

        $r0 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $stack3 = $r0.<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase phase>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id=\'");

        $r1 = (sortpom.wrapper.content.ExecutionSortedWrapper) this;

        $stack6 = $r1.<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String id>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    private static boolean lambda$new$2(org.jdom.Element)
    {
        org.jdom.Element e;
        java.lang.String $stack1;
        boolean $stack2;

        e := @parameter0: org.jdom.Element;

        $stack1 = virtualinvoke e.<org.jdom.Element: java.lang.String getName()>();

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>("id");

        return $stack2;
    }

    private static sortpom.wrapper.content.Phase lambda$new$1(org.jdom.Element)
    {
        org.jdom.Element e;
        java.lang.String $stack1;
        sortpom.wrapper.content.Phase $stack2;

        e := @parameter0: org.jdom.Element;

        $stack1 = virtualinvoke e.<org.jdom.Element: java.lang.String getTextTrim()>();

        $stack2 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>($stack1);

        return $stack2;
    }

    private static boolean lambda$new$0(org.jdom.Element)
    {
        org.jdom.Element e;
        java.lang.String $stack1, $stack3;
        boolean $stack2, $stack4;

        e := @parameter0: org.jdom.Element;

        $stack1 = virtualinvoke e.<org.jdom.Element: java.lang.String getName()>();

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>("phase");

        if $stack2 == 0 goto label1;

        $stack3 = virtualinvoke e.<org.jdom.Element: java.lang.String getText()>();

        if $stack3 == null goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }
}
