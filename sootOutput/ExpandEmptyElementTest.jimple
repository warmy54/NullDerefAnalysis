class ExpandEmptyElementTest extends java.lang.Object
{

    void <init>()
    {
        ExpandEmptyElementTest this;

        this := @this: ExpandEmptyElementTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.stream.Stream testValues()
    {
        org.junit.jupiter.params.provider.Arguments[] $stack0;
        java.lang.Object[] $stack1, $stack4, $stack7, $stack10;
        org.junit.jupiter.params.provider.Arguments $stack3, $stack6, $stack9, $stack12;
        java.util.stream.Stream $stack13;

        $stack0 = newarray (org.junit.jupiter.params.provider.Arguments)[4];

        $stack1 = newarray (java.lang.Object)[3];

        $stack1[0] = "true";

        $stack1[1] = "true";

        $stack1[2] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Gurka></Gurka>\n";

        $stack3 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments arguments(java.lang.Object[])>($stack1);

        $stack0[0] = $stack3;

        $stack4 = newarray (java.lang.Object)[3];

        $stack4[0] = "false";

        $stack4[1] = "true";

        $stack4[2] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Gurka />\n";

        $stack6 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments arguments(java.lang.Object[])>($stack4);

        $stack0[1] = $stack6;

        $stack7 = newarray (java.lang.Object)[3];

        $stack7[0] = "false";

        $stack7[1] = "false";

        $stack7[2] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Gurka/>\n";

        $stack9 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments arguments(java.lang.Object[])>($stack7);

        $stack0[2] = $stack9;

        $stack10 = newarray (java.lang.Object)[3];

        $stack10[0] = "true";

        $stack10[1] = "false";

        $stack10[2] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Gurka></Gurka>\n";

        $stack12 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments arguments(java.lang.Object[])>($stack10);

        $stack0[3] = $stack12;

        $stack13 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($stack0);

        return $stack13;
    }

    void expandEmptyElementsAndKeepSpaceShouldAffectOutputXml(boolean, boolean, java.lang.String)
    {
        sortpom.XmlOutputGenerator $stack6;
        sortpom.parameter.PluginParameters$Builder $stack7, $stack8, $stack9, $stack10;
        boolean expandEmptyElements, spaceBeforeCloseEmptyElement;
        sortpom.parameter.PluginParameters $stack11;
        org.jdom.Document $stack12;
        java.lang.String actual, expectedValue;
        ExpandEmptyElementTest this;

        this := @this: ExpandEmptyElementTest;

        expandEmptyElements := @parameter0: boolean;

        spaceBeforeCloseEmptyElement := @parameter1: boolean;

        expectedValue := @parameter2: java.lang.String;

        $stack6 = new sortpom.XmlOutputGenerator;

        specialinvoke $stack6.<sortpom.XmlOutputGenerator: void <init>()>();

        $stack7 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack8 = virtualinvoke $stack7.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\n", expandEmptyElements, spaceBeforeCloseEmptyElement, 0);

        $stack10 = virtualinvoke $stack9.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(2, 0, 0);

        $stack11 = virtualinvoke $stack10.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        virtualinvoke $stack6.<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>($stack11);

        $stack12 = staticinvoke <sortpom.sort.XmlFragment: org.jdom.Document createXmlFragment()>();

        actual = virtualinvoke $stack6.<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>($stack12);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedValue, actual);

        return;
    }
}
