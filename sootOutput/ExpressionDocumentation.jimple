public class ExpressionDocumentation extends java.lang.Object implements java.io.Serializable
{
    private java.util.List expressions;
    private java.lang.String modelEncoding;
    private java.util.Map expressionsBySyntax;

    public void <init>()
    {
        ExpressionDocumentation this;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.lang.String modelEncoding> = "UTF-8";

        return;
    }

    public void addExpression(org.apache.maven.usability.plugin.Expression)
    {
        ExpressionDocumentation this;
        java.util.List $stack2;
        org.apache.maven.usability.plugin.Expression expression;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        expression := @parameter0: org.apache.maven.usability.plugin.Expression;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List getExpressions()>();

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(expression);

        return;
    }

    public java.util.List getExpressions()
    {
        ExpressionDocumentation this;
        java.util.List $stack1, $stack2;
        java.util.ArrayList $u0;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0, $r1, $r2;

        this := @this: ExpressionDocumentation;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack1 = $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List expressions>;

        if $stack1 != null goto label1;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $r1.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List expressions> = $u0;

     label1:
        $r2 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack2 = $r2.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List expressions>;

        return $stack2;
    }

    public java.lang.String getModelEncoding()
    {
        ExpressionDocumentation this;
        java.lang.String $stack1;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack1 = $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.lang.String modelEncoding>;

        return $stack1;
    }

    public void removeExpression(org.apache.maven.usability.plugin.Expression)
    {
        ExpressionDocumentation this;
        java.util.List $stack2;
        org.apache.maven.usability.plugin.Expression expression;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        expression := @parameter0: org.apache.maven.usability.plugin.Expression;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List getExpressions()>();

        interfaceinvoke $stack2.<java.util.List: boolean remove(java.lang.Object)>(expression);

        return;
    }

    public void setExpressions(java.util.List)
    {
        ExpressionDocumentation this;
        java.util.List expressions;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        expressions := @parameter0: java.util.List;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List expressions> = expressions;

        return;
    }

    public void setModelEncoding(java.lang.String)
    {
        ExpressionDocumentation this;
        java.lang.String modelEncoding;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        modelEncoding := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.lang.String modelEncoding> = modelEncoding;

        return;
    }

    public java.util.Map getExpressionsBySyntax()
    {
        ExpressionDocumentation this;
        java.util.Map $stack4, $stack13, $stack5;
        java.util.List expressions;
        boolean $stack9, $stack11;
        java.util.Iterator it;
        java.lang.Object $stack12;
        org.apache.maven.usability.plugin.Expression expr;
        java.lang.String $stack14;
        java.util.HashMap $u0;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0, $r1, $r2, $r3, $r4;

        this := @this: ExpressionDocumentation;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack4 = $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.Map expressionsBySyntax>;

        if $stack4 != null goto label2;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r1 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $r1.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.Map expressionsBySyntax> = $u0;

        $r2 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        expressions = virtualinvoke $r2.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.List getExpressions()>();

        if expressions == null goto label2;

        $stack9 = interfaceinvoke expressions.<java.util.List: boolean isEmpty()>();

        if $stack9 != 0 goto label2;

        it = interfaceinvoke expressions.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label2;

        $stack12 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        expr = (org.apache.maven.usability.plugin.Expression) $stack12;

        $r3 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack13 = $r3.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.Map expressionsBySyntax>;

        $stack14 = virtualinvoke expr.<org.apache.maven.usability.plugin.Expression: java.lang.String getSyntax()>();

        interfaceinvoke $stack13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack14, expr);

        goto label1;

     label2:
        $r4 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $stack5 = $r4.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.Map expressionsBySyntax>;

        return $stack5;
    }

    public void flushExpressionsBySyntax()
    {
        ExpressionDocumentation this;
        org.apache.maven.usability.plugin.ExpressionDocumentation $r0;

        this := @this: ExpressionDocumentation;

        $r0 = (org.apache.maven.usability.plugin.ExpressionDocumentation) this;

        $r0.<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.Map expressionsBySyntax> = null;

        return;
    }
}
