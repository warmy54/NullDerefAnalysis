public class ExpressionListFiller extends java.lang.Object
{

    public void <init>()
    {
        ExpressionListFiller this;

        this := @this: ExpressionListFiller;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean fill(org.ooc.frontend.model.Module, org.ubi.SourceReader, org.ooc.frontend.model.tokens.TokenReader, org.ooc.frontend.model.NodeList)
    {
        org.ooc.frontend.model.Module module;
        org.ubi.SourceReader sReader;
        org.ooc.frontend.model.tokens.TokenReader reader;
        org.ooc.frontend.model.NodeList list;
        boolean $stack4;

        module := @parameter0: org.ooc.frontend.model.Module;

        sReader := @parameter1: org.ubi.SourceReader;

        reader := @parameter2: org.ooc.frontend.model.tokens.TokenReader;

        list := @parameter3: org.ooc.frontend.model.NodeList;

        $stack4 = staticinvoke <org.ooc.frontend.parser.ExpressionListFiller: boolean fill(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader,org.ooc.frontend.model.NodeList,byte,byte)>(module, sReader, reader, list, 82, 83);

        return $stack4;
    }

    public static boolean fill(org.ooc.frontend.model.Module, org.ubi.SourceReader, org.ooc.frontend.model.tokens.TokenReader, org.ooc.frontend.model.NodeList, byte, byte)
    {
        org.ooc.frontend.model.tokens.TokenReader reader;
        int mark;
        boolean $stack10, $stack15, comma, $stack23;
        java.lang.Object $stack11, $stack25, $stack32;
        org.ooc.frontend.model.tokens.Token $stack12, $stack16, $stack28;
        byte opening, $stack13, closing, $stack17, $stack29;
        org.ooc.frontend.model.Module module;
        org.ubi.SourceReader sReader;
        org.ooc.frontend.model.Expression expr;
        org.ooc.frontend.model.NodeList list;
        org.ubi.Locatable $stack26, $stack33;
        org.ubi.FileLocation $stack27, $stack34;
        org.ubi.CompilationFailedError $u0, $u1;
        java.lang.Throwable $r0, $r1;
        org.ooc.frontend.model.Node $r2;

        module := @parameter0: org.ooc.frontend.model.Module;

        sReader := @parameter1: org.ubi.SourceReader;

        reader := @parameter2: org.ooc.frontend.model.tokens.TokenReader;

        list := @parameter3: org.ooc.frontend.model.NodeList;

        opening := @parameter4: byte;

        closing := @parameter5: byte;

        mark = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: int mark()>();

        $stack10 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: boolean hasNext()>();

        if $stack10 != 0 goto label01;

        return 0;

     label01:
        $stack11 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack12 = (org.ooc.frontend.model.tokens.Token) $stack11;

        $stack13 = $stack12.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack13 == opening goto label02;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return 0;

     label02:
        comma = 0;

     label03:
        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: boolean skipWhitespace()>();

        $stack15 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: boolean hasNext()>();

        if $stack15 != 0 goto label04;

        goto label11;

     label04:
        $stack16 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: org.ooc.frontend.model.tokens.Token peekWhiteless()>();

        $stack17 = $stack16.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack17 != closing goto label05;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: boolean skipWhitespace()>();

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void skip()>();

        goto label11;

     label05:
        if comma == 0 goto label06;

        $stack28 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: org.ooc.frontend.model.tokens.Token readWhiteless()>();

        $stack29 = $stack28.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack29 == 45 goto label08;

        $u0 = new org.ubi.CompilationFailedError;

        $stack32 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev(int)>(2);

        $stack33 = (org.ubi.Locatable) $stack32;

        $stack34 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack33);

        specialinvoke $u0.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack34, "Did you forget to close the parenthesis here?");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label06:
        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: boolean skipWhitespace()>();

        expr = staticinvoke <org.ooc.frontend.parser.ExpressionParser: org.ooc.frontend.model.Expression parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if expr != null goto label07;

        $u1 = new org.ubi.CompilationFailedError;

        $stack25 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object peek()>();

        $stack26 = (org.ubi.Locatable) $stack25;

        $stack27 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack26);

        specialinvoke $u1.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack27, "Expected expression as argument of function call");

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label07:
        $r2 = (org.ooc.frontend.model.Node) expr;

        virtualinvoke list.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r2);

     label08:
        if comma != 0 goto label09;

        $stack23 = 1;

        goto label10;

     label09:
        $stack23 = 0;

     label10:
        comma = $stack23;

        goto label03;

     label11:
        return 1;
    }
}
