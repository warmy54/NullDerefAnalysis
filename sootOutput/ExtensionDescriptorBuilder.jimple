public class ExtensionDescriptorBuilder extends java.lang.Object
{

    public void <init>()
    {
        ExtensionDescriptorBuilder this;

        this := @this: ExtensionDescriptorBuilder;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getExtensionDescriptorLocation()
    {
        ExtensionDescriptorBuilder this;

        this := @this: ExtensionDescriptorBuilder;

        return "META-INF/maven/extension.xml";
    }

    public org.apache.maven.project.ExtensionDescriptor build(java.io.File) throws java.io.IOException
    {
        java.io.File extensionJar, $u1;
        boolean $stack8, $stack11;
        ExtensionDescriptorBuilder this;
        java.lang.String $stack10, $stack17;
        java.lang.Throwable $stack22, $stack23, $stack25, $stack26, $stack28, $stack29;
        org.apache.maven.project.ExtensionDescriptor extensionDescriptor;
        java.util.zip.ZipEntry pluginDescriptorEntry;
        java.io.InputStream is;
        java.util.jar.JarFile $u0;
        java.io.FileInputStream $u2;
        java.io.BufferedInputStream $u3;
        org.apache.maven.project.ExtensionDescriptorBuilder $r0, $r1, $r2, $r3;

        this := @this: ExtensionDescriptorBuilder;

        extensionJar := @parameter0: java.io.File;

        extensionDescriptor = null;

        $stack8 = virtualinvoke extensionJar.<java.io.File: boolean isFile()>();

        if $stack8 == 0 goto label16;

        $u0 = new java.util.jar.JarFile;

        specialinvoke $u0.<java.util.jar.JarFile: void <init>(java.io.File,boolean)>(extensionJar, 0);

     label01:
        $r0 = (org.apache.maven.project.ExtensionDescriptorBuilder) this;

        $stack17 = virtualinvoke $r0.<org.apache.maven.project.ExtensionDescriptorBuilder: java.lang.String getExtensionDescriptorLocation()>();

        pluginDescriptorEntry = virtualinvoke $u0.<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($stack17);

        if pluginDescriptorEntry == null goto label09;

        is = virtualinvoke $u0.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(pluginDescriptorEntry);

     label02:
        $r1 = (org.apache.maven.project.ExtensionDescriptorBuilder) this;

        extensionDescriptor = virtualinvoke $r1.<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.InputStream)>(is);

     label03:
        if is == null goto label09;

        virtualinvoke is.<java.io.InputStream: void close()>();

        goto label09;

     label04:
        $stack29 := @caughtexception;

        if is == null goto label08;

     label05:
        virtualinvoke is.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $stack28 := @caughtexception;

        virtualinvoke $stack29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack28);

     label08:
        throw $stack29;

     label09:
        virtualinvoke $u0.<java.util.jar.JarFile: void close()>();

        goto label15;

     label10:
        $stack26 := @caughtexception;

     label11:
        virtualinvoke $u0.<java.util.jar.JarFile: void close()>();

     label12:
        goto label14;

     label13:
        $stack25 := @caughtexception;

        virtualinvoke $stack26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack25);

     label14:
        throw $stack26;

     label15:
        goto label24;

     label16:
        $u1 = new java.io.File;

        $r2 = (org.apache.maven.project.ExtensionDescriptorBuilder) this;

        $stack10 = virtualinvoke $r2.<org.apache.maven.project.ExtensionDescriptorBuilder: java.lang.String getExtensionDescriptorLocation()>();

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>(extensionJar, $stack10);

        $stack11 = virtualinvoke $u1.<java.io.File: boolean canRead()>();

        if $stack11 == 0 goto label24;

        $u3 = new java.io.BufferedInputStream;

        $u2 = new java.io.FileInputStream;

        specialinvoke $u2.<java.io.FileInputStream: void <init>(java.io.File)>($u1);

        specialinvoke $u3.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($u2);

     label17:
        $r3 = (org.apache.maven.project.ExtensionDescriptorBuilder) this;

        extensionDescriptor = virtualinvoke $r3.<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.InputStream)>($u3);

     label18:
        virtualinvoke $u3.<java.io.InputStream: void close()>();

        goto label24;

     label19:
        $stack23 := @caughtexception;

     label20:
        virtualinvoke $u3.<java.io.InputStream: void close()>();

     label21:
        goto label23;

     label22:
        $stack22 := @caughtexception;

        virtualinvoke $stack23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack22);

     label23:
        throw $stack23;

     label24:
        return extensionDescriptor;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    public org.apache.maven.project.ExtensionDescriptor build(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream is;
        org.codehaus.plexus.util.xml.XmlStreamReader $stack6;
        org.codehaus.plexus.util.xml.Xpp3Dom dom, $stack11, $stack13;
        java.lang.String $stack8, $stack9, $stack18, $stack21, $stack24;
        boolean $stack10;
        ExtensionDescriptorBuilder this;
        java.util.List $stack12, $stack14;
        java.lang.StringBuilder $stack17, $stack19, $stack20, $u2;
        java.lang.Throwable $stack22, $stack25;
        java.io.IOException $stack26, $u1, $u3;
        org.apache.maven.project.ExtensionDescriptor $u0;
        java.io.Reader $r0;
        org.codehaus.plexus.util.xml.pull.XmlPullParserException $r1;
        org.apache.maven.project.ExtensionDescriptorBuilder $r2, $r3;

        this := @this: ExtensionDescriptorBuilder;

        is := @parameter0: java.io.InputStream;

        $u0 = new org.apache.maven.project.ExtensionDescriptor;

        specialinvoke $u0.<org.apache.maven.project.ExtensionDescriptor: void <init>()>();

     label1:
        $stack6 = staticinvoke <org.codehaus.plexus.util.ReaderFactory: org.codehaus.plexus.util.xml.XmlStreamReader newXmlReader(java.io.InputStream)>(is);

        $r0 = (java.io.Reader) $stack6;

        dom = staticinvoke <org.codehaus.plexus.util.xml.Xpp3DomBuilder: org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.Reader)>($r0);

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

        $u1 = new java.io.IOException;

        $r1 = (org.codehaus.plexus.util.xml.pull.XmlPullParserException) $stack22;

        $stack24 = virtualinvoke $r1.<org.codehaus.plexus.util.xml.pull.XmlPullParserException: java.lang.String getMessage()>();

        specialinvoke $u1.<java.io.IOException: void <init>(java.lang.String)>($stack24);

        $stack25 = virtualinvoke $u1.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($stack22);

        $stack26 = (java.io.IOException) $stack25;

        throw $stack26;

     label4:
        $stack8 = "extension";

        $stack9 = virtualinvoke dom.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getName()>();

        $stack10 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>($stack9);

        if $stack10 != 0 goto label5;

        $u3 = new java.io.IOException;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected root element \"");

        $stack18 = virtualinvoke dom.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getName()>();

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", expected \"extension\"");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<java.io.IOException: void <init>(java.lang.String)>($stack21);

        throw $u3;

     label5:
        $stack11 = virtualinvoke dom.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>("exportedPackages");

        $r2 = (org.apache.maven.project.ExtensionDescriptorBuilder) this;

        $stack12 = specialinvoke $r2.<org.apache.maven.project.ExtensionDescriptorBuilder: java.util.List parseStrings(org.codehaus.plexus.util.xml.Xpp3Dom)>($stack11);

        virtualinvoke $u0.<org.apache.maven.project.ExtensionDescriptor: void setExportedPackages(java.util.List)>($stack12);

        $stack13 = virtualinvoke dom.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom getChild(java.lang.String)>("exportedArtifacts");

        $r3 = (org.apache.maven.project.ExtensionDescriptorBuilder) this;

        $stack14 = specialinvoke $r3.<org.apache.maven.project.ExtensionDescriptorBuilder: java.util.List parseStrings(org.codehaus.plexus.util.xml.Xpp3Dom)>($stack13);

        virtualinvoke $u0.<org.apache.maven.project.ExtensionDescriptor: void setExportedArtifacts(java.util.List)>($stack14);

        return $u0;

        catch org.codehaus.plexus.util.xml.pull.XmlPullParserException from label1 to label2 with label3;
    }

    private java.util.List parseStrings(org.codehaus.plexus.util.xml.Xpp3Dom)
    {
        org.codehaus.plexus.util.xml.Xpp3Dom dom, child;
        java.util.ArrayList $stack8, strings;
        org.codehaus.plexus.util.xml.Xpp3Dom[] l3;
        int l4, $stack15, l5;
        ExtensionDescriptorBuilder this;
        java.lang.String string;

        this := @this: ExtensionDescriptorBuilder;

        dom := @parameter0: org.codehaus.plexus.util.xml.Xpp3Dom;

        strings = null;

        if dom == null goto label3;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        strings = $stack8;

        l3 = virtualinvoke dom.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom[] getChildren()>();

        l4 = lengthof l3;

        l5 = 0;

     label1:
        if l5 >= l4 goto label3;

        child = l3[l5];

        string = virtualinvoke child.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getValue()>();

        if string == null goto label2;

        string = virtualinvoke string.<java.lang.String: java.lang.String trim()>();

        $stack15 = virtualinvoke string.<java.lang.String: int length()>();

        if $stack15 <= 0 goto label2;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(string);

     label2:
        l5 = l5 + 1;

        goto label1;

     label3:
        return strings;
    }
}
