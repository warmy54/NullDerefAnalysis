public class ExtensionDescriptorBuilderTest extends java.lang.Object
{
    private org.apache.maven.project.ExtensionDescriptorBuilder builder;

    public void <init>()
    {
        ExtensionDescriptorBuilderTest this;

        this := @this: ExtensionDescriptorBuilderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        ExtensionDescriptorBuilderTest this;
        org.apache.maven.project.ExtensionDescriptorBuilder $u0;
        org.apache.maven.project.ExtensionDescriptorBuilderTest $r0;

        this := @this: ExtensionDescriptorBuilderTest;

        $u0 = new org.apache.maven.project.ExtensionDescriptorBuilder;

        specialinvoke $u0.<org.apache.maven.project.ExtensionDescriptorBuilder: void <init>()>();

        $r0 = (org.apache.maven.project.ExtensionDescriptorBuilderTest) this;

        $r0.<org.apache.maven.project.ExtensionDescriptorBuilderTest: org.apache.maven.project.ExtensionDescriptorBuilder builder> = $u0;

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        ExtensionDescriptorBuilderTest this;
        org.apache.maven.project.ExtensionDescriptorBuilderTest $r0;

        this := @this: ExtensionDescriptorBuilderTest;

        $r0 = (org.apache.maven.project.ExtensionDescriptorBuilderTest) this;

        $r0.<org.apache.maven.project.ExtensionDescriptorBuilderTest: org.apache.maven.project.ExtensionDescriptorBuilder builder> = null;

        return;
    }

    private java.io.InputStream toStream(java.lang.String)
    {
        java.io.ByteArrayInputStream $stack2;
        java.lang.String xml;
        java.nio.charset.Charset $stack3;
        byte[] $stack4;
        ExtensionDescriptorBuilderTest this;

        this := @this: ExtensionDescriptorBuilderTest;

        xml := @parameter0: java.lang.String;

        $stack2 = new java.io.ByteArrayInputStream;

        $stack3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $stack4 = virtualinvoke xml.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack3);

        specialinvoke $stack2.<java.io.ByteArrayInputStream: void <init>(byte[])>($stack4);

        return $stack2;
    }

    public void testEmptyDescriptor() throws java.lang.Exception
    {
        ExtensionDescriptorBuilderTest this;
        org.apache.maven.project.ExtensionDescriptorBuilder $stack3;
        java.io.InputStream $stack4;
        org.apache.maven.project.ExtensionDescriptor ed;
        java.util.List $stack6, $stack7, $stack10, $stack11;
        org.hamcrest.Matcher $stack8, $stack9, $stack12, $stack13;
        org.apache.maven.project.ExtensionDescriptorBuilderTest $r0, $r1;

        this := @this: ExtensionDescriptorBuilderTest;

        $r0 = (org.apache.maven.project.ExtensionDescriptorBuilderTest) this;

        $stack3 = $r0.<org.apache.maven.project.ExtensionDescriptorBuilderTest: org.apache.maven.project.ExtensionDescriptorBuilder builder>;

        $r1 = (org.apache.maven.project.ExtensionDescriptorBuilderTest) this;

        $stack4 = specialinvoke $r1.<org.apache.maven.project.ExtensionDescriptorBuilderTest: java.io.InputStream toStream(java.lang.String)>("<extension></extension>");

        ed = virtualinvoke $stack3.<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.InputStream)>($stack4);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(ed);

        $stack6 = virtualinvoke ed.<org.apache.maven.project.ExtensionDescriptor: java.util.List getExportedPackages()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack6);

        $stack7 = virtualinvoke ed.<org.apache.maven.project.ExtensionDescriptor: java.util.List getExportedPackages()>();

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack8);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack9);

        $stack10 = virtualinvoke ed.<org.apache.maven.project.ExtensionDescriptor: java.util.List getExportedArtifacts()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack10);

        $stack11 = virtualinvoke ed.<org.apache.maven.project.ExtensionDescriptor: java.util.List getExportedArtifacts()>();

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $stack13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack12);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack11, $stack13);

        return;
    }

    public void testCompleteDescriptor() throws java.lang.Exception
    {
        ExtensionDescriptorBuilderTest this;
        org.apache.maven.project.ExtensionDescriptorBuilder $stack3;
        java.io.InputStream $stack4;
        org.apache.maven.project.ExtensionDescriptor ed;
        java.lang.String[] $stack6, $stack9;
        java.util.List $stack7, $stack8, $stack10, $stack11;
        org.apache.maven.project.ExtensionDescriptorBuilderTest $r0, $r1;

        this := @this: ExtensionDescriptorBuilderTest;

        $r0 = (org.apache.maven.project.ExtensionDescriptorBuilderTest) this;

        $stack3 = $r0.<org.apache.maven.project.ExtensionDescriptorBuilderTest: org.apache.maven.project.ExtensionDescriptorBuilder builder>;

        $r1 = (org.apache.maven.project.ExtensionDescriptorBuilderTest) this;

        $stack4 = specialinvoke $r1.<org.apache.maven.project.ExtensionDescriptorBuilderTest: java.io.InputStream toStream(java.lang.String)>("<?xml version=\'1.0\' encoding=\'UTF-8\'?><extension><exportedPackages><exportedPackage>a</exportedPackage><exportedPackage>b</exportedPackage><exportedPackage>c</exportedPackage></exportedPackages><exportedArtifacts><exportedArtifact>x</exportedArtifact><exportedArtifact>y</exportedArtifact><exportedArtifact> z </exportedArtifact></exportedArtifacts></extension>");

        ed = virtualinvoke $stack3.<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.InputStream)>($stack4);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(ed);

        $stack6 = newarray (java.lang.String)[3];

        $stack6[0] = "a";

        $stack6[1] = "b";

        $stack6[2] = "c";

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        $stack8 = virtualinvoke ed.<org.apache.maven.project.ExtensionDescriptor: java.util.List getExportedPackages()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = newarray (java.lang.String)[3];

        $stack9[0] = "x";

        $stack9[1] = "y";

        $stack9[2] = "z";

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        $stack11 = virtualinvoke ed.<org.apache.maven.project.ExtensionDescriptor: java.util.List getExportedArtifacts()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        return;
    }
}
