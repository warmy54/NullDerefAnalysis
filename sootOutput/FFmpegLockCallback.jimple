public class FFmpegLockCallback extends java.lang.Object
{
    private static boolean initialized;
    private static java.util.concurrent.atomic.AtomicInteger lockCounter;
    private static java.util.HashMap lockArray;
    private static org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int lockCallback;

    public void <init>()
    {
        FFmpegLockCallback this;

        this := @this: FFmpegLockCallback;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized void init()
    {
        boolean $stack0;
        org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int $stack1;

        $stack0 = <org.bytedeco.javacv.FFmpegLockCallback: boolean initialized>;

        if $stack0 != 0 goto label1;

        <org.bytedeco.javacv.FFmpegLockCallback: boolean initialized> = 1;

        $stack1 = <org.bytedeco.javacv.FFmpegLockCallback: org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int lockCallback>;

        staticinvoke <org.bytedeco.ffmpeg.global.avcodec: int av_lockmgr_register(org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int)>($stack1);

     label1:
        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$000()
    {
        java.util.concurrent.atomic.AtomicInteger $stack0;

        $stack0 = <org.bytedeco.javacv.FFmpegLockCallback: java.util.concurrent.atomic.AtomicInteger lockCounter>;

        return $stack0;
    }

    static java.util.HashMap access$100()
    {
        java.util.HashMap $stack0;

        $stack0 = <org.bytedeco.javacv.FFmpegLockCallback: java.util.HashMap lockArray>;

        return $stack0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $stack0;
        java.util.HashMap $stack1;
        org.bytedeco.javacv.FFmpegLockCallback$1 $stack2;
        org.bytedeco.javacpp.Pointer $stack3;
        org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int $stack4;

        <org.bytedeco.javacv.FFmpegLockCallback: boolean initialized> = 0;

        $stack0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $stack0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <org.bytedeco.javacv.FFmpegLockCallback: java.util.concurrent.atomic.AtomicInteger lockCounter> = $stack0;

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        <org.bytedeco.javacv.FFmpegLockCallback: java.util.HashMap lockArray> = $stack1;

        $stack2 = new org.bytedeco.javacv.FFmpegLockCallback$1;

        specialinvoke $stack2.<org.bytedeco.javacv.FFmpegLockCallback$1: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.bytedeco.javacv.FFmpegLockCallback$1: org.bytedeco.javacpp.Pointer retainReference()>();

        $stack4 = (org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int) $stack3;

        <org.bytedeco.javacv.FFmpegLockCallback: org.bytedeco.ffmpeg.avcodec.Cb_PointerPointer_int lockCallback> = $stack4;

        return;
    }
}
