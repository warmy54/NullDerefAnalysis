public class FileModelSourceTest extends java.lang.Object
{

    public void <init>()
    {
        FileModelSourceTest this;

        this := @this: FileModelSourceTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testEquals() throws java.lang.Exception
    {
        FileModelSourceTest this;
        java.io.File tempFile;
        boolean $stack5, $stack7, $stack8, $stack10;
        org.apache.maven.model.building.FileModelSource $u0, $u2;
        java.lang.Object $u1;
        org.apache.maven.model.building.FileModelSourceTest $r0;

        this := @this: FileModelSourceTest;

        $r0 = (org.apache.maven.model.building.FileModelSourceTest) this;

        tempFile = specialinvoke $r0.<org.apache.maven.model.building.FileModelSourceTest: java.io.File createTempFile(java.lang.String)>("pomTest");

        $u0 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u0.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>(tempFile);

        $stack5 = virtualinvoke $u0.<org.apache.maven.model.building.FileModelSource: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack5);

        $u1 = new java.lang.Object;

        specialinvoke $u1.<java.lang.Object: void <init>()>();

        $stack7 = virtualinvoke $u0.<org.apache.maven.model.building.FileModelSource: boolean equals(java.lang.Object)>($u1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack7);

        $stack8 = virtualinvoke $u0.<org.apache.maven.model.building.FileModelSource: boolean equals(java.lang.Object)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack8);

        $u2 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u2.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>(tempFile);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.building.FileModelSource: boolean equals(java.lang.Object)>($u2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        return;
    }

    public void testWindowsPaths() throws java.lang.Exception
    {
        boolean $stack6, $stack13;
        FileModelSourceTest this;
        java.io.File upperCaseFile, $u0;
        java.lang.String absolutePath, $stack10;
        org.apache.maven.model.building.FileModelSource $u1, $u2;
        org.apache.maven.model.building.FileModelSourceTest $r0;

        this := @this: FileModelSourceTest;

        $stack6 = <org.apache.commons.lang3.SystemUtils: boolean IS_OS_WINDOWS>;

        staticinvoke <org.junit.jupiter.api.Assumptions: void assumeTrue(boolean)>($stack6);

        $r0 = (org.apache.maven.model.building.FileModelSourceTest) this;

        upperCaseFile = specialinvoke $r0.<org.apache.maven.model.building.FileModelSourceTest: java.io.File createTempFile(java.lang.String)>("TESTE");

        absolutePath = virtualinvoke upperCaseFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $u0 = new java.io.File;

        $stack10 = virtualinvoke absolutePath.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack10);

        $u1 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u1.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>(upperCaseFile);

        $u2 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u2.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>($u0);

        $stack13 = virtualinvoke $u1.<org.apache.maven.model.building.FileModelSource: boolean equals(java.lang.Object)>($u2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack13);

        return;
    }

    private java.io.File createTempFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String name;
        java.io.File tempFile;
        FileModelSourceTest this;

        this := @this: FileModelSourceTest;

        name := @parameter0: java.lang.String;

        tempFile = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(name, ".xml");

        virtualinvoke tempFile.<java.io.File: void deleteOnExit()>();

        return tempFile;
    }
}
