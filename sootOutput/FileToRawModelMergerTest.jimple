public class FileToRawModelMergerTest extends java.lang.Object
{

    public void <init>()
    {
        FileToRawModelMergerTest this;

        this := @this: FileToRawModelMergerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testOverriddenMergeMethods()
    {
        java.lang.Class $stack3, $stack14;
        java.lang.reflect.Method[] $stack4, $stack15;
        java.util.stream.Stream $stack5, $stack7, $stack9, $stack11, $stack16, $stack18, $stack20;
        java.util.function.Predicate $stack6, $stack8, $stack19;
        java.util.function.Function $stack10, $stack17;
        java.util.stream.Collector $stack12, $stack21;
        java.lang.Object $stack13, $stack22;
        java.util.List methodNames, overriddenMethods;
        java.lang.String[] $stack23, $stack25;
        java.lang.Object[] $stack24;
        org.hamcrest.Matcher $stack26;
        FileToRawModelMergerTest this;

        this := @this: FileToRawModelMergerTest;

        $stack3 = class "Lorg/apache/maven/model/merge/ModelMerger;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $stack5 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($stack4);

        $stack6 = staticinvoke <FileToRawModelMergerTest$lambda_testOverriddenMergeMethods_0__309: java.util.function.Predicate bootstrap$()>();

        $stack7 = interfaceinvoke $stack5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack6);

        $stack8 = staticinvoke <FileToRawModelMergerTest$lambda_testOverriddenMergeMethods_1__310: java.util.function.Predicate bootstrap$()>();

        $stack9 = interfaceinvoke $stack7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack8);

        $stack10 = staticinvoke <FileToRawModelMergerTest$getName__311: java.util.function.Function bootstrap$()>();

        $stack11 = interfaceinvoke $stack9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack10);

        $stack12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $stack13 = interfaceinvoke $stack11.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack12);

        methodNames = (java.util.List) $stack13;

        $stack14 = class "Lorg/apache/maven/model/building/FileToRawModelMerger;";

        $stack15 = virtualinvoke $stack14.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $stack16 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($stack15);

        $stack17 = staticinvoke <FileToRawModelMergerTest$getName__312: java.util.function.Function bootstrap$()>();

        $stack18 = interfaceinvoke $stack16.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack17);

        $stack19 = staticinvoke <FileToRawModelMergerTest$lambda_testOverriddenMergeMethods_2__313: java.util.function.Predicate bootstrap$()>();

        $stack20 = interfaceinvoke $stack18.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack19);

        $stack21 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $stack22 = interfaceinvoke $stack20.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack21);

        overriddenMethods = (java.util.List) $stack22;

        $stack23 = newarray (java.lang.String)[0];

        $stack24 = interfaceinvoke methodNames.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack23);

        $stack25 = (java.lang.String[]) $stack24;

        $stack26 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItems(java.lang.Object[])>($stack25);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(overriddenMethods, $stack26);

        return;
    }

    private static boolean lambda$testOverriddenMergeMethods$2(java.lang.String)
    {
        java.lang.String m;
        boolean $stack1;

        m := @parameter0: java.lang.String;

        $stack1 = virtualinvoke m.<java.lang.String: boolean startsWith(java.lang.String)>("merge");

        return $stack1;
    }

    private static boolean lambda$testOverriddenMergeMethods$1(java.lang.reflect.Method)
    {
        java.lang.reflect.Method m, $stack16;
        java.lang.String $stack4, baseName, entity, $stack14;
        int $stack6, $stack7;
        java.lang.Class[] $stack9, $stack15;
        java.lang.StringBuilder $stack10, $stack12, $stack13;
        java.lang.Class $stack11;
        boolean $stack18, $stack22, $stack23;
        java.lang.reflect.ParameterizedType $stack19;
        java.lang.reflect.Type[] $stack20;
        java.lang.reflect.Type $stack21, returnType;
        java.lang.Exception $stack24;

        m := @parameter0: java.lang.reflect.Method;

        $stack4 = virtualinvoke m.<java.lang.reflect.Method: java.lang.String getName()>();

        baseName = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>(5);

        $stack6 = virtualinvoke baseName.<java.lang.String: int indexOf(int)>(95);

        $stack7 = $stack6 + 1;

        entity = virtualinvoke baseName.<java.lang.String: java.lang.String substring(int)>($stack7);

     label1:
        $stack9 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $stack11 = $stack9[0];

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(entity);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = newarray (java.lang.Class)[0];

        $stack16 = virtualinvoke $stack11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($stack14, $stack15);

        returnType = virtualinvoke $stack16.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $stack18 = returnType instanceof java.lang.reflect.ParameterizedType;

        if $stack18 == 0 goto label4;

        $stack19 = (java.lang.reflect.ParameterizedType) returnType;

        $stack20 = interfaceinvoke $stack19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $stack21 = $stack20[0];

        $stack22 = virtualinvoke $stack21.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $stack22 != 0 goto label2;

        $stack23 = 1;

        goto label3;

     label2:
        $stack23 = 0;

     label3:
        return $stack23;

     label4:
        return 0;

     label5:
        $stack24 := @caughtexception;

        return 0;

        catch java.lang.ReflectiveOperationException from label1 to label3 with label5;
        catch java.lang.SecurityException from label1 to label3 with label5;
    }

    private static boolean lambda$testOverriddenMergeMethods$0(java.lang.reflect.Method)
    {
        java.lang.reflect.Method m;
        java.lang.String $stack1;
        boolean $stack2;

        m := @parameter0: java.lang.reflect.Method;

        $stack1 = virtualinvoke m.<java.lang.reflect.Method: java.lang.String getName()>();

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>("merge");

        return $stack2;
    }
}
