public class FileUtils extends java.lang.Object
{

    public void <init>()
    {
        FileUtils this;

        this := @this: FileUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void deleteRecursive(java.io.File)
    {
        java.util.ArrayList $stack10, $stack11, $stack12;
        java.io.File file, child, toExplore;
        boolean $stack14, $stack16, $stack22, $stack26;
        java.lang.Object $stack17, $stack25;
        java.io.File[] l6;
        int l7, l8;
        java.util.Iterator l4;

        file := @parameter0: java.io.File;

        $stack10 = new java.util.ArrayList;

        specialinvoke $stack10.<java.util.ArrayList: void <init>()>();

        $stack11 = new java.util.ArrayList;

        specialinvoke $stack11.<java.util.ArrayList: void <init>()>();

        $stack12 = new java.util.ArrayList;

        specialinvoke $stack12.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $stack10.<java.util.List: boolean add(java.lang.Object)>(file);

     label1:
        $stack14 = interfaceinvoke $stack10.<java.util.List: boolean isEmpty()>();

        if $stack14 != 0 goto label6;

        interfaceinvoke $stack12.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $stack10);

        l4 = interfaceinvoke $stack10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack22 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label5;

        $stack25 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        toExplore = (java.io.File) $stack25;

        $stack26 = virtualinvoke toExplore.<java.io.File: boolean isDirectory()>();

        if $stack26 == 0 goto label4;

        l6 = virtualinvoke toExplore.<java.io.File: java.io.File[] listFiles()>();

        l7 = lengthof l6;

        l8 = 0;

     label3:
        if l8 >= l7 goto label4;

        child = l6[l8];

        interfaceinvoke $stack11.<java.util.List: void add(int,java.lang.Object)>(0, child);

        l8 = l8 + 1;

        goto label3;

     label4:
        goto label2;

     label5:
        interfaceinvoke $stack10.<java.util.List: void clear()>();

        interfaceinvoke $stack10.<java.util.List: boolean addAll(java.util.Collection)>($stack11);

        interfaceinvoke $stack11.<java.util.List: void clear()>();

        goto label1;

     label6:
        l4 = interfaceinvoke $stack12.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $stack16 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label8;

        $stack17 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        toExplore = (java.io.File) $stack17;

        virtualinvoke toExplore.<java.io.File: boolean delete()>();

        goto label7;

     label8:
        return;
    }

    public static void copy(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File destFile, sourceFile;
        boolean $stack5;
        java.io.FileInputStream $stack6;
        java.io.FileOutputStream $stack8;
        long $stack11;
        java.lang.Throwable $stack23;
        java.nio.channels.FileChannel source, destination;

        sourceFile := @parameter0: java.io.File;

        destFile := @parameter1: java.io.File;

        $stack5 = virtualinvoke destFile.<java.io.File: boolean exists()>();

        if $stack5 != 0 goto label1;

        virtualinvoke destFile.<java.io.File: boolean createNewFile()>();

     label1:
        source = null;

        destination = null;

     label2:
        $stack6 = new java.io.FileInputStream;

        specialinvoke $stack6.<java.io.FileInputStream: void <init>(java.io.File)>(sourceFile);

        source = virtualinvoke $stack6.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $stack8 = new java.io.FileOutputStream;

        specialinvoke $stack8.<java.io.FileOutputStream: void <init>(java.io.File)>(destFile);

        destination = virtualinvoke $stack8.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $stack11 = virtualinvoke source.<java.nio.channels.FileChannel: long size()>();

        virtualinvoke destination.<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>(source, 0L, $stack11);

     label3:
        if source == null goto label4;

        virtualinvoke source.<java.nio.channels.FileChannel: void close()>();

     label4:
        if destination == null goto label9;

        virtualinvoke destination.<java.nio.channels.FileChannel: void close()>();

        goto label9;

     label5:
        $stack23 := @caughtexception;

     label6:
        if source == null goto label7;

        virtualinvoke source.<java.nio.channels.FileChannel: void close()>();

     label7:
        if destination == null goto label8;

        virtualinvoke destination.<java.nio.channels.FileChannel: void close()>();

     label8:
        throw $stack23;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.String read(java.io.File) throws java.io.IOException
    {
        java.lang.StringBuilder $stack5;
        java.io.File file;
        long $stack6;
        int $stack7, $stack9;
        java.io.FileReader $stack8;
        char[] cbuf;
        java.lang.String $stack10;

        file := @parameter0: java.io.File;

        $stack5 = new java.lang.StringBuilder;

        $stack6 = virtualinvoke file.<java.io.File: long length()>();

        $stack7 = (int) $stack6;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>(int)>($stack7);

        $stack8 = new java.io.FileReader;

        specialinvoke $stack8.<java.io.FileReader: void <init>(java.io.File)>(file);

        cbuf = newarray (char)[4096];

     label1:
        $stack9 = virtualinvoke $stack8.<java.io.FileReader: int read(char[])>(cbuf);

        if $stack9 == -1 goto label2;

        virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(cbuf, 0, $stack9);

        goto label1;

     label2:
        virtualinvoke $stack8.<java.io.FileReader: void close()>();

        $stack10 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public static void write(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File file, $stack3;
        java.io.BufferedWriter $stack5;
        java.io.FileWriter $stack6;
        java.lang.String data;

        file := @parameter0: java.io.File;

        data := @parameter1: java.lang.String;

        $stack3 = virtualinvoke file.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $stack3.<java.io.File: boolean mkdirs()>();

        $stack5 = new java.io.BufferedWriter;

        $stack6 = new java.io.FileWriter;

        specialinvoke $stack6.<java.io.FileWriter: void <init>(java.io.File)>(file);

        specialinvoke $stack5.<java.io.BufferedWriter: void <init>(java.io.Writer)>($stack6);

        virtualinvoke $stack5.<java.io.BufferedWriter: void write(java.lang.String)>(data);

        virtualinvoke $stack5.<java.io.BufferedWriter: void close()>();

        return;
    }

    public static java.io.File resolveRedundancies(java.io.File)
    {
        java.io.File file, $stack22;
        java.lang.String path, $stack13, $stack14, $stack23, elem, $stack27, $stack29;
        java.util.ArrayList $stack11;
        java.util.StringTokenizer $stack12;
        boolean startsWithSeparator, $stack16, $stack35, $stack36, $stack39, $stack21;
        java.lang.StringBuffer $stack17;
        int $stack18, size, $stack41, $stack42, count;
        java.util.Iterator l8;
        java.lang.Object $stack24;

        file := @parameter0: java.io.File;

        path = virtualinvoke file.<java.io.File: java.lang.String getPath()>();

        $stack11 = new java.util.ArrayList;

        specialinvoke $stack11.<java.util.ArrayList: void <init>()>();

        $stack12 = new java.util.StringTokenizer;

        $stack13 = <java.io.File: java.lang.String separator>;

        specialinvoke $stack12.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(path, $stack13);

        $stack14 = <java.io.File: java.lang.String separator>;

        startsWithSeparator = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>($stack14);

     label01:
        $stack16 = virtualinvoke $stack12.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $stack16 == 0 goto label06;

        elem = virtualinvoke $stack12.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $stack35 = virtualinvoke elem.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $stack35 == 0 goto label03;

        $stack39 = interfaceinvoke $stack11.<java.util.List: boolean isEmpty()>();

        if $stack39 != 0 goto label02;

        $stack41 = interfaceinvoke $stack11.<java.util.List: int size()>();

        $stack42 = $stack41 - 1;

        interfaceinvoke $stack11.<java.util.List: java.lang.Object remove(int)>($stack42);

        goto label05;

     label02:
        interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>(elem);

        goto label05;

     label03:
        $stack36 = virtualinvoke elem.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $stack36 == 0 goto label04;

        goto label05;

     label04:
        interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>(elem);

     label05:
        goto label01;

     label06:
        $stack17 = new java.lang.StringBuffer;

        $stack18 = virtualinvoke path.<java.lang.String: int length()>();

        specialinvoke $stack17.<java.lang.StringBuffer: void <init>(int)>($stack18);

        if startsWithSeparator == 0 goto label07;

        $stack29 = <java.io.File: java.lang.String separator>;

        virtualinvoke $stack17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29);

     label07:
        size = interfaceinvoke $stack11.<java.util.List: int size()>();

        count = 0;

        l8 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $stack21 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label10;

        $stack24 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack24;

        virtualinvoke $stack17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(elem);

        count = count + 1;

        if count >= size goto label09;

        $stack27 = <java.io.File: java.lang.String separator>;

        virtualinvoke $stack17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack27);

     label09:
        goto label08;

     label10:
        $stack22 = new java.io.File;

        $stack23 = virtualinvoke $stack17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $stack22.<java.io.File: void <init>(java.lang.String)>($stack23);

        return $stack22;
    }
}
