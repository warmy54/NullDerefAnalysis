public class FilterHashEqualsTest extends java.lang.Object
{

    public void <init>()
    {
        FilterHashEqualsTest this;

        this := @this: FilterHashEqualsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testIncludesExcludesArtifactFilter()
    {
        java.lang.String[] $stack5, $stack14;
        java.util.List patterns, $stack15;
        org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter $stack7, $stack8, $stack13;
        boolean $stack9, $stack10, $stack16, $stack20, $stack19;
        int $stack11, $stack12, $stack17, $stack18;
        FilterHashEqualsTest this;

        this := @this: FilterHashEqualsTest;

        $stack5 = newarray (java.lang.String)[3];

        $stack5[0] = "c";

        $stack5[1] = "d";

        $stack5[2] = "e";

        patterns = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack5);

        $stack7 = new org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter;

        specialinvoke $stack7.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: void <init>(java.util.List)>(patterns);

        $stack8 = new org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter;

        specialinvoke $stack8.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: void <init>(java.util.List)>(patterns);

        $stack9 = virtualinvoke $stack7.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: boolean equals(java.lang.Object)>($stack8);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: boolean equals(java.lang.Object)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack7.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: int hashCode()>();

        $stack12 = virtualinvoke $stack8.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: int hashCode()>();

        if $stack11 != $stack12 goto label1;

        $stack20 = 1;

        goto label2;

     label1:
        $stack20 = 0;

     label2:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack20);

        $stack13 = new org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter;

        $stack14 = newarray (java.lang.String)[3];

        $stack14[0] = "d";

        $stack14[1] = "c";

        $stack14[2] = "e";

        $stack15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack14);

        specialinvoke $stack13.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: void <init>(java.util.List)>($stack15);

        $stack16 = virtualinvoke $stack7.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: boolean equals(java.lang.Object)>($stack13);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack16);

        $stack17 = virtualinvoke $stack7.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: int hashCode()>();

        $stack18 = virtualinvoke $stack13.<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: int hashCode()>();

        if $stack17 != $stack18 goto label3;

        $stack19 = 1;

        goto label4;

     label3:
        $stack19 = 0;

     label4:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack19);

        return;
    }
}
