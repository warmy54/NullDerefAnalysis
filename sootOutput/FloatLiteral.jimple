public class FloatLiteral extends org.ooc.frontend.model.Literal
{
    protected double value;
    public static org.ooc.frontend.model.Type type;

    public void <init>(double, org.ooc.frontend.model.tokens.Token)
    {
        FloatLiteral this;
        org.ooc.frontend.model.tokens.Token startToken;
        double value;
        org.ooc.frontend.model.FloatLiteral $r0;

        this := @this: FloatLiteral;

        value := @parameter0: double;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Literal: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.FloatLiteral) this;

        $r0.<org.ooc.frontend.model.FloatLiteral: double value> = value;

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        FloatLiteral this;
        org.ooc.frontend.model.Node oldie, kiddo;

        this := @this: FloatLiteral;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        return 0;
    }

    public org.ooc.frontend.model.Type getType()
    {
        org.ooc.frontend.model.Type $stack1;
        FloatLiteral this;

        this := @this: FloatLiteral;

        $stack1 = <org.ooc.frontend.model.FloatLiteral: org.ooc.frontend.model.Type type>;

        return $stack1;
    }

    public double getValue()
    {
        FloatLiteral this;
        double $stack1;
        org.ooc.frontend.model.FloatLiteral $r0;

        this := @this: FloatLiteral;

        $r0 = (org.ooc.frontend.model.FloatLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.FloatLiteral: double value>;

        return $stack1;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        FloatLiteral this;
        org.ooc.frontend.model.FloatLiteral $r0;

        this := @this: FloatLiteral;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.FloatLiteral) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.FloatLiteral)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        FloatLiteral this;
        org.ooc.frontend.Visitor visitor;

        this := @this: FloatLiteral;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        return;
    }

    public boolean hasChildren()
    {
        FloatLiteral this;

        this := @this: FloatLiteral;

        return 0;
    }

    public java.lang.String toString()
    {
        FloatLiteral this;
        double $stack1;
        java.lang.String $stack2;
        org.ooc.frontend.model.FloatLiteral $r0;

        this := @this: FloatLiteral;

        $r0 = (org.ooc.frontend.model.FloatLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.FloatLiteral: double value>;

        $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($stack1);

        return $stack2;
    }

    static void <clinit>()
    {
        org.ooc.frontend.model.Type $stack0;
        org.ooc.frontend.model.tokens.Token $stack1;

        $stack0 = new org.ooc.frontend.model.Type;

        $stack1 = <org.ooc.frontend.model.tokens.Token: org.ooc.frontend.model.tokens.Token defaultToken>;

        specialinvoke $stack0.<org.ooc.frontend.model.Type: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>("Float", $stack1);

        <org.ooc.frontend.model.FloatLiteral: org.ooc.frontend.model.Type type> = $stack0;

        return;
    }
}
