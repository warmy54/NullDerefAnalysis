public class For extends org.ooc.frontend.model.ControlStatement
{
    protected org.ooc.frontend.model.Statement init;
    protected org.ooc.frontend.model.Expression test;
    protected org.ooc.frontend.model.Statement iter;

    public void <init>(org.ooc.frontend.model.Statement, org.ooc.frontend.model.Expression, org.ooc.frontend.model.Statement, org.ooc.frontend.model.tokens.Token)
    {
        For this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Statement init, iter;
        org.ooc.frontend.model.Expression test;
        org.ooc.frontend.model.For $r0, $r1, $r2;

        this := @this: For;

        init := @parameter0: org.ooc.frontend.model.Statement;

        test := @parameter1: org.ooc.frontend.model.Expression;

        iter := @parameter2: org.ooc.frontend.model.Statement;

        startToken := @parameter3: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.ControlStatement: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.For) this;

        $r0.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement init> = init;

        $r1 = (org.ooc.frontend.model.For) this;

        $r1.<org.ooc.frontend.model.For: org.ooc.frontend.model.Expression test> = test;

        $r2 = (org.ooc.frontend.model.For) this;

        $r2.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement iter> = iter;

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        For this;
        org.ooc.frontend.model.Statement $stack3, $stack5, $stack6, $stack8;
        org.ooc.frontend.model.Expression $stack4, $stack7;
        org.ooc.frontend.model.For $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: For;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.For) this;

        $stack3 = $r0.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement init>;

        if oldie != $stack3 goto label1;

        $stack8 = (org.ooc.frontend.model.Statement) kiddo;

        $r1 = (org.ooc.frontend.model.For) this;

        $r1.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement init> = $stack8;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.For) this;

        $stack4 = $r2.<org.ooc.frontend.model.For: org.ooc.frontend.model.Expression test>;

        if oldie != $stack4 goto label2;

        $stack7 = (org.ooc.frontend.model.Expression) kiddo;

        $r3 = (org.ooc.frontend.model.For) this;

        $r3.<org.ooc.frontend.model.For: org.ooc.frontend.model.Expression test> = $stack7;

        return 1;

     label2:
        $r4 = (org.ooc.frontend.model.For) this;

        $stack5 = $r4.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement iter>;

        if oldie != $stack5 goto label3;

        $stack6 = (org.ooc.frontend.model.Statement) kiddo;

        $r5 = (org.ooc.frontend.model.For) this;

        $r5.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement iter> = $stack6;

        return 1;

     label3:
        return 0;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        For this;
        org.ooc.frontend.model.For $r0;

        this := @this: For;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.For) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.For)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        For this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Statement $stack2, $stack4;
        org.ooc.frontend.model.Expression $stack3;
        org.ooc.frontend.model.NodeList $stack5;
        org.ooc.frontend.model.For $r0, $r1, $r2, $r3;

        this := @this: For;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.For) this;

        $stack2 = $r0.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement init>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Statement: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.For) this;

        $stack3 = $r1.<org.ooc.frontend.model.For: org.ooc.frontend.model.Expression test>;

        virtualinvoke $stack3.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r2 = (org.ooc.frontend.model.For) this;

        $stack4 = $r2.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement iter>;

        virtualinvoke $stack4.<org.ooc.frontend.model.Statement: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r3 = (org.ooc.frontend.model.For) this;

        $stack5 = $r3.<org.ooc.frontend.model.For: org.ooc.frontend.model.NodeList body>;

        virtualinvoke $stack5.<org.ooc.frontend.model.NodeList: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        For this;

        this := @this: For;

        return 1;
    }

    public org.ooc.frontend.model.Statement getInit()
    {
        For this;
        org.ooc.frontend.model.Statement $stack1;
        org.ooc.frontend.model.For $r0;

        this := @this: For;

        $r0 = (org.ooc.frontend.model.For) this;

        $stack1 = $r0.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement init>;

        return $stack1;
    }

    public org.ooc.frontend.model.Expression getTest()
    {
        For this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.For $r0;

        this := @this: For;

        $r0 = (org.ooc.frontend.model.For) this;

        $stack1 = $r0.<org.ooc.frontend.model.For: org.ooc.frontend.model.Expression test>;

        return $stack1;
    }

    public org.ooc.frontend.model.Statement getIter()
    {
        For this;
        org.ooc.frontend.model.Statement $stack1;
        org.ooc.frontend.model.For $r0;

        this := @this: For;

        $r0 = (org.ooc.frontend.model.For) this;

        $stack1 = $r0.<org.ooc.frontend.model.For: org.ooc.frontend.model.Statement iter>;

        return $stack1;
    }
}
