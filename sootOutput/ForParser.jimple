public class ForParser extends java.lang.Object
{

    public void <init>()
    {
        ForParser this;

        this := @this: ForParser;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.ooc.frontend.model.Foreach parseForeach(org.ooc.frontend.model.Module, org.ubi.SourceReader, org.ooc.frontend.model.tokens.TokenReader)
    {
        org.ooc.frontend.model.tokens.TokenReader reader;
        int mark;
        java.lang.Object $stack9, $stack11, $stack15, $stack26, $stack36, $stack43, variable, $stack20;
        org.ooc.frontend.model.tokens.Token startToken, $stack12, $stack16, $stack21;
        byte $stack10, $stack13, $stack17, $stack22;
        org.ooc.frontend.model.Module module;
        org.ubi.SourceReader sReader;
        org.ooc.frontend.model.Expression collection, $r3;
        boolean $stack19, $stack29;
        org.ooc.frontend.model.NodeList $stack24;
        org.ubi.Locatable $stack27, $stack37, $stack44;
        org.ubi.FileLocation $stack28, $stack38, $stack45;
        org.ooc.frontend.model.Type $stack33;
        java.lang.String $stack34;
        org.ooc.frontend.model.VariableAccess varAcc;
        org.ubi.CompilationFailedError $u0, $u1, $u3;
        org.ooc.frontend.model.VariableDecl $u2;
        org.ooc.frontend.model.Foreach $u4;
        java.lang.Throwable $r0, $r1, $r2;

        module := @parameter0: org.ooc.frontend.model.Module;

        sReader := @parameter1: org.ubi.SourceReader;

        reader := @parameter2: org.ooc.frontend.model.tokens.TokenReader;

        mark = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: int mark()>();

        $stack9 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        startToken = (org.ooc.frontend.model.tokens.Token) $stack9;

        $stack10 = startToken.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack10 != 26 goto label7;

        $stack11 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack12 = (org.ooc.frontend.model.tokens.Token) $stack11;

        $stack13 = $stack12.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack13 == 82 goto label1;

        $u0 = new org.ubi.CompilationFailedError;

        $stack43 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack44 = (org.ubi.Locatable) $stack43;

        $stack45 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack44);

        specialinvoke $u0.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack45, "Expected opening parenthesis after for");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        variable = staticinvoke <org.ooc.frontend.parser.VariableDeclParser: org.ooc.frontend.model.VariableDecl parseSingle(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if variable != null goto label2;

        variable = staticinvoke <org.ooc.frontend.parser.AccessParser: org.ooc.frontend.model.VariableAccess parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if variable != null goto label2;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;

     label2:
        $stack15 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack16 = (org.ooc.frontend.model.tokens.Token) $stack15;

        $stack17 = $stack16.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack17 == 32 goto label3;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;

     label3:
        collection = staticinvoke <org.ooc.frontend.parser.ExpressionParser: org.ooc.frontend.model.Expression parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if collection != null goto label4;

        $u1 = new org.ubi.CompilationFailedError;

        $stack36 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object peek()>();

        $stack37 = (org.ubi.Locatable) $stack36;

        $stack38 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack37);

        specialinvoke $u1.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack38, "Expected expression after \'in\' keyword in a foreach");

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label4:
        $stack19 = variable instanceof org.ooc.frontend.model.VariableAccess;

        if $stack19 == 0 goto label5;

        $stack29 = collection instanceof org.ooc.frontend.model.RangeLiteral;

        if $stack29 == 0 goto label5;

        varAcc = (org.ooc.frontend.model.VariableAccess) variable;

        $u2 = new org.ooc.frontend.model.VariableDecl;

        $stack33 = <org.ooc.frontend.model.IntLiteral: org.ooc.frontend.model.Type type>;

        $stack34 = virtualinvoke varAcc.<org.ooc.frontend.model.VariableAccess: java.lang.String getName()>();

        specialinvoke $u2.<org.ooc.frontend.model.VariableDecl: void <init>(org.ooc.frontend.model.Type,java.lang.String,org.ooc.frontend.model.tokens.Token,org.ooc.frontend.model.Module)>($stack33, $stack34, startToken, module);

        variable = $u2;

     label5:
        $stack20 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack21 = (org.ooc.frontend.model.tokens.Token) $stack20;

        $stack22 = $stack21.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack22 == 83 goto label6;

        $u3 = new org.ubi.CompilationFailedError;

        $stack26 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack27 = (org.ubi.Locatable) $stack26;

        $stack28 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack27);

        specialinvoke $u3.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack28, "Expected closing parenthesis at the end of a foreach");

        $r2 = (java.lang.Throwable) $u3;

        throw $r2;

     label6:
        $u4 = new org.ooc.frontend.model.Foreach;

        $r3 = (org.ooc.frontend.model.Expression) variable;

        specialinvoke $u4.<org.ooc.frontend.model.Foreach: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($r3, collection, startToken);

        $stack24 = virtualinvoke $u4.<org.ooc.frontend.model.Foreach: org.ooc.frontend.model.NodeList getBody()>();

        staticinvoke <org.ooc.frontend.parser.ControlStatementFiller: void fill(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader,org.ooc.frontend.model.NodeList)>(module, sReader, reader, $stack24);

        return $u4;

     label7:
        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;
    }

    public static org.ooc.frontend.model.For parseRegularFor(org.ooc.frontend.model.Module, org.ubi.SourceReader, org.ooc.frontend.model.tokens.TokenReader)
    {
        org.ooc.frontend.model.tokens.TokenReader reader;
        int mark;
        java.lang.Object $stack10, $stack12, $stack16, $stack20, $stack24, $stack30, $stack34, $stack38, $stack42, $stack46;
        org.ooc.frontend.model.tokens.Token startToken, $stack13, $stack17, $stack21, $stack25;
        byte $stack11, $stack14, $stack18, $stack22, $stack26;
        org.ooc.frontend.model.Module module;
        org.ubi.SourceReader sReader;
        org.ooc.frontend.model.Statement init, iter;
        org.ooc.frontend.model.Expression test;
        org.ooc.frontend.model.NodeList $stack28;
        org.ubi.Locatable $stack31, $stack35, $stack39, $stack43, $stack47;
        org.ubi.FileLocation $stack32, $stack36, $stack40, $stack44, $stack48;
        org.ubi.CompilationFailedError $u0, $u1, $u2, $u3, $u4;
        org.ooc.frontend.model.For $u5;
        java.lang.Throwable $r0, $r1, $r2, $r3, $r4;

        module := @parameter0: org.ooc.frontend.model.Module;

        sReader := @parameter1: org.ubi.SourceReader;

        reader := @parameter2: org.ooc.frontend.model.tokens.TokenReader;

        mark = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: int mark()>();

        $stack10 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        startToken = (org.ooc.frontend.model.tokens.Token) $stack10;

        $stack11 = startToken.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack11 != 26 goto label8;

        $stack12 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack13 = (org.ooc.frontend.model.tokens.Token) $stack12;

        $stack14 = $stack13.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack14 == 82 goto label1;

        $u0 = new org.ubi.CompilationFailedError;

        $stack46 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack47 = (org.ubi.Locatable) $stack46;

        $stack48 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack47);

        specialinvoke $u0.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack48, "Expected opening parenthesis after for");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        init = staticinvoke <org.ooc.frontend.parser.StatementParser: org.ooc.frontend.model.Statement parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if init != null goto label2;

        $u1 = new org.ubi.CompilationFailedError;

        $stack42 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack43 = (org.ubi.Locatable) $stack42;

        $stack44 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack43);

        specialinvoke $u1.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack44, "Expected init statement here, inside a for");

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label2:
        $stack16 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack17 = (org.ooc.frontend.model.tokens.Token) $stack16;

        $stack18 = $stack17.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack18 == 51 goto label3;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;

     label3:
        test = staticinvoke <org.ooc.frontend.parser.ExpressionParser: org.ooc.frontend.model.Expression parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if test != null goto label4;

        $u2 = new org.ubi.CompilationFailedError;

        $stack38 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack39 = (org.ubi.Locatable) $stack38;

        $stack40 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack39);

        specialinvoke $u2.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack40, "Expected test expression here, inside a for");

        $r2 = (java.lang.Throwable) $u2;

        throw $r2;

     label4:
        $stack20 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack21 = (org.ooc.frontend.model.tokens.Token) $stack20;

        $stack22 = $stack21.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack22 == 51 goto label5;

        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;

     label5:
        iter = staticinvoke <org.ooc.frontend.parser.StatementParser: org.ooc.frontend.model.Statement parse(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader)>(module, sReader, reader);

        if iter != null goto label6;

        $u3 = new org.ubi.CompilationFailedError;

        $stack34 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack35 = (org.ubi.Locatable) $stack34;

        $stack36 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack35);

        specialinvoke $u3.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack36, "Expected iter statement here, inside a for");

        $r3 = (java.lang.Throwable) $u3;

        throw $r3;

     label6:
        $stack24 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object read()>();

        $stack25 = (org.ooc.frontend.model.tokens.Token) $stack24;

        $stack26 = $stack25.<org.ooc.frontend.model.tokens.Token: byte type>;

        if $stack26 == 83 goto label7;

        $u4 = new org.ubi.CompilationFailedError;

        $stack30 = virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: java.lang.Object prev()>();

        $stack31 = (org.ubi.Locatable) $stack30;

        $stack32 = virtualinvoke sReader.<org.ubi.SourceReader: org.ubi.FileLocation getLocation(org.ubi.Locatable)>($stack31);

        specialinvoke $u4.<org.ubi.CompilationFailedError: void <init>(org.ubi.FileLocation,java.lang.String)>($stack32, "Expected closing parenthesis at the end of a for");

        $r4 = (java.lang.Throwable) $u4;

        throw $r4;

     label7:
        $u5 = new org.ooc.frontend.model.For;

        specialinvoke $u5.<org.ooc.frontend.model.For: void <init>(org.ooc.frontend.model.Statement,org.ooc.frontend.model.Expression,org.ooc.frontend.model.Statement,org.ooc.frontend.model.tokens.Token)>(init, test, iter, startToken);

        $stack28 = virtualinvoke $u5.<org.ooc.frontend.model.For: org.ooc.frontend.model.NodeList getBody()>();

        staticinvoke <org.ooc.frontend.parser.ControlStatementFiller: void fill(org.ooc.frontend.model.Module,org.ubi.SourceReader,org.ooc.frontend.model.tokens.TokenReader,org.ooc.frontend.model.NodeList)>(module, sReader, reader, $stack28);

        return $u5;

     label8:
        virtualinvoke reader.<org.ooc.frontend.model.tokens.TokenReader: void reset(int)>(mark);

        return null;
    }
}
