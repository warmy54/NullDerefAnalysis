public class FuncType extends org.ooc.frontend.model.Type
{
    private org.ooc.frontend.model.FunctionDecl decl;

    private void <init>(org.ooc.frontend.model.tokens.Token)
    {
        FuncType this;
        org.ooc.frontend.model.tokens.Token startToken;

        this := @this: FuncType;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Type: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>("Func", startToken);

        return;
    }

    public void <init>(org.ooc.frontend.model.tokens.Token, org.ooc.frontend.model.FunctionDecl)
    {
        FuncType this;
        org.ooc.frontend.model.tokens.Token startToken, $stack13;
        org.ooc.frontend.model.FunctionDecl decl;
        java.util.LinkedHashMap $stack5;
        java.util.Collection $stack6;
        java.util.Iterator l3;
        boolean $stack8;
        java.lang.Object $stack9;
        org.ooc.frontend.model.TypeParam typeParam;
        org.ooc.frontend.model.NodeList $stack11;
        java.lang.String $stack12;
        org.ooc.frontend.model.VariableAccess $u0;
        org.ooc.frontend.model.FuncType $r0, $r1, $r2, $r4;
        org.ooc.frontend.model.Node $r3;
        org.ooc.frontend.model.Declaration $r5;

        this := @this: FuncType;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        decl := @parameter1: org.ooc.frontend.model.FunctionDecl;

        $r0 = (org.ooc.frontend.model.FuncType) this;

        specialinvoke $r0.<org.ooc.frontend.model.FuncType: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r1 = (org.ooc.frontend.model.FuncType) this;

        $r1.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl> = decl;

        $stack5 = virtualinvoke decl.<org.ooc.frontend.model.FunctionDecl: java.util.LinkedHashMap getTypeParams()>();

        $stack6 = virtualinvoke $stack5.<java.util.LinkedHashMap: java.util.Collection values()>();

        l3 = interfaceinvoke $stack6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label2;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        typeParam = (org.ooc.frontend.model.TypeParam) $stack9;

        $r2 = (org.ooc.frontend.model.FuncType) this;

        $stack11 = $r2.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.NodeList typeParams>;

        $u0 = new org.ooc.frontend.model.VariableAccess;

        $stack12 = virtualinvoke typeParam.<org.ooc.frontend.model.TypeParam: java.lang.String getName()>();

        $stack13 = typeParam.<org.ooc.frontend.model.TypeParam: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.VariableAccess: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>($stack12, $stack13);

        $r3 = (org.ooc.frontend.model.Node) $u0;

        virtualinvoke $stack11.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r3);

        goto label1;

     label2:
        $r4 = (org.ooc.frontend.model.FuncType) this;

        $r5 = (org.ooc.frontend.model.Declaration) decl;

        virtualinvoke $r4.<org.ooc.frontend.model.FuncType: void setRef(org.ooc.frontend.model.Declaration)>($r5);

        return;
    }

    public void <init>(org.ooc.frontend.model.tokens.Token, org.ooc.frontend.model.NodeList)
    {
        FuncType this;
        org.ooc.frontend.model.tokens.Token startToken, $stack19;
        org.ooc.frontend.model.FunctionDecl $stack7, $stack8, $stack16, $u0;
        org.ooc.frontend.model.NodeList typeParams;
        java.util.Iterator l3;
        boolean $stack10;
        java.lang.Object $stack13;
        org.ooc.frontend.model.Access typeParam;
        org.ooc.frontend.model.VariableAccess $stack14;
        java.lang.String name;
        java.util.LinkedHashMap $stack17;
        org.ooc.frontend.model.TypeParam $u1;
        org.ooc.frontend.model.FuncType $r0, $r1, $r2, $r3, $r4, $r5;
        org.ooc.frontend.model.Declaration $r6;

        this := @this: FuncType;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        typeParams := @parameter1: org.ooc.frontend.model.NodeList;

        $r0 = (org.ooc.frontend.model.FuncType) this;

        specialinvoke $r0.<org.ooc.frontend.model.FuncType: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $u0 = new org.ooc.frontend.model.FunctionDecl;

        specialinvoke $u0.<org.ooc.frontend.model.FunctionDecl: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,org.ooc.frontend.model.tokens.Token,org.ooc.frontend.model.Module)>("<function pointer>", "", 0, 0, 0, 1, startToken, null);

        $r1 = (org.ooc.frontend.model.FuncType) this;

        $r1.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl> = $u0;

        $r2 = (org.ooc.frontend.model.FuncType) this;

        $stack7 = $r2.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl>;

        virtualinvoke $stack7.<org.ooc.frontend.model.FunctionDecl: void setFromPointer(boolean)>(1);

        if typeParams == null goto label2;

        virtualinvoke typeParams.<org.ooc.frontend.model.NodeList: void addAll(org.ooc.frontend.model.NodeList)>(typeParams);

        l3 = virtualinvoke typeParams.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack10 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label2;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        typeParam = (org.ooc.frontend.model.Access) $stack13;

        $stack14 = (org.ooc.frontend.model.VariableAccess) typeParam;

        name = virtualinvoke $stack14.<org.ooc.frontend.model.VariableAccess: java.lang.String getName()>();

        $r3 = (org.ooc.frontend.model.FuncType) this;

        $stack16 = $r3.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl>;

        $stack17 = virtualinvoke $stack16.<org.ooc.frontend.model.FunctionDecl: java.util.LinkedHashMap getTypeParams()>();

        $u1 = new org.ooc.frontend.model.TypeParam;

        $stack19 = typeParam.<org.ooc.frontend.model.Access: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u1.<org.ooc.frontend.model.TypeParam: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>(name, $stack19);

        virtualinvoke $stack17.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, $u1);

        goto label1;

     label2:
        $r4 = (org.ooc.frontend.model.FuncType) this;

        $stack8 = $r4.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl>;

        $r5 = (org.ooc.frontend.model.FuncType) this;

        $r6 = (org.ooc.frontend.model.Declaration) $stack8;

        virtualinvoke $r5.<org.ooc.frontend.model.FuncType: void setRef(org.ooc.frontend.model.Declaration)>($r6);

        return;
    }

    public org.ooc.frontend.model.FunctionDecl getDecl()
    {
        FuncType this;
        org.ooc.frontend.model.FunctionDecl $stack1;
        org.ooc.frontend.model.FuncType $r0;

        this := @this: FuncType;

        $r0 = (org.ooc.frontend.model.FuncType) this;

        $stack1 = $r0.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl>;

        return $stack1;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack4;
        FuncType this;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.middle.hobgoblins.Resolver res;
        boolean fatal;

        this := @this: FuncType;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        $stack4 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack4;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        FuncType this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.FunctionDecl $stack2;
        org.ooc.frontend.model.FuncType $r0;

        this := @this: FuncType;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        specialinvoke this.<org.ooc.frontend.model.Type: void acceptChildren(org.ooc.frontend.Visitor)>(visitor);

        $r0 = (org.ooc.frontend.model.FuncType) this;

        $stack2 = $r0.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl>;

        virtualinvoke $stack2.<org.ooc.frontend.model.FunctionDecl: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        FuncType this;

        this := @this: FuncType;

        return 1;
    }

    public org.ooc.frontend.model.Type clone()
    {
        FuncType this;
        org.ooc.frontend.model.NodeList $stack3;
        org.ooc.frontend.model.tokens.Token $stack4;
        org.ooc.frontend.model.FunctionDecl $stack5;
        org.ooc.frontend.model.FuncType $u0, $r0, $r1, $r2;
        org.ooc.frontend.model.Type $r3;

        this := @this: FuncType;

        $u0 = new org.ooc.frontend.model.FuncType;

        $r0 = (org.ooc.frontend.model.FuncType) this;

        $stack4 = $r0.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.tokens.Token startToken>;

        $r1 = (org.ooc.frontend.model.FuncType) this;

        $stack3 = $r1.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.NodeList typeParams>;

        specialinvoke $u0.<org.ooc.frontend.model.FuncType: void <init>(org.ooc.frontend.model.tokens.Token,org.ooc.frontend.model.NodeList)>($stack4, $stack3);

        $r2 = (org.ooc.frontend.model.FuncType) this;

        $stack5 = $r2.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl>;

        $u0.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.FunctionDecl decl> = $stack5;

        $r3 = (org.ooc.frontend.model.Type) $u0;

        return $r3;
    }

    public java.lang.String toString()
    {
        FuncType this;
        java.lang.String $stack1, $stack2;

        this := @this: FuncType;

        $stack1 = specialinvoke this.<org.ooc.frontend.model.Type: java.lang.String toString()>();

        $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("FuncType|\u0001");

        return $stack2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        FuncType this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.FuncType $r0;

        this := @this: FuncType;

        $r0 = (org.ooc.frontend.model.FuncType) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.model.FuncType: org.ooc.frontend.model.Type clone()>();

        return $stack1;
    }
}
