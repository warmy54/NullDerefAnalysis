public class GeometricCalibrator extends java.lang.Object
{
    private org.bytedeco.javacv.GeometricCalibrator$Settings settings;
    org.bytedeco.javacv.MarkerDetector markerDetector;
    private org.bytedeco.javacv.MarkedPlane markedPlane;
    private org.bytedeco.javacv.ProjectiveDevice projectiveDevice;
    private java.util.LinkedList allObjectMarkers;
    private java.util.LinkedList allImageMarkers;
    private org.bytedeco.opencv.opencv_core.IplImage tempImage;
    private org.bytedeco.javacv.Marker[] lastDetectedMarkers;
    private org.bytedeco.opencv.opencv_core.CvMat warp;
    private org.bytedeco.opencv.opencv_core.CvMat prevWarp;
    private org.bytedeco.opencv.opencv_core.CvMat lastWarp;
    private org.bytedeco.opencv.opencv_core.CvMat warpSrcPts;
    private org.bytedeco.opencv.opencv_core.CvMat warpDstPts;
    private org.bytedeco.opencv.opencv_core.CvMat tempPts;
    static final boolean $assertionsDisabled;

    public void <init>(org.bytedeco.javacv.GeometricCalibrator$Settings, org.bytedeco.javacv.MarkerDetector$Settings, org.bytedeco.javacv.MarkedPlane, org.bytedeco.javacv.ProjectiveDevice)
    {
        GeometricCalibrator this;
        org.bytedeco.opencv.opencv_core.CvMat $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack27;
        org.bytedeco.javacv.GeometricCalibrator$Settings settings;
        org.bytedeco.javacv.MarkerDetector$Settings detectorSettings;
        org.bytedeco.javacv.MarkedPlane markedPlane;
        org.bytedeco.javacv.ProjectiveDevice projectiveDevice;
        org.bytedeco.opencv.opencv_core.IplImage $stack18, $stack20;
        int w, h;
        double[] $stack22;
        double $stack23, $stack24, $stack25, $stack26;
        java.util.LinkedList $u0, $u1;
        org.bytedeco.javacv.MarkerDetector $u2;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r18;
        org.bytedeco.opencv.opencv_core.CvArr $r15, $r17;

        this := @this: GeometricCalibrator;

        settings := @parameter0: org.bytedeco.javacv.GeometricCalibrator$Settings;

        detectorSettings := @parameter1: org.bytedeco.javacv.MarkerDetector$Settings;

        markedPlane := @parameter2: org.bytedeco.javacv.MarkedPlane;

        projectiveDevice := @parameter3: org.bytedeco.javacv.ProjectiveDevice;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.LinkedList;

        specialinvoke $u0.<java.util.LinkedList: void <init>()>();

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers> = $u0;

        $u1 = new java.util.LinkedList;

        specialinvoke $u1.<java.util.LinkedList: void <init>()>();

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r1.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers> = $u1;

        $r2 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r2.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage> = null;

        $r3 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r3.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers> = null;

        $stack9 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $r4 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r4.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warp> = $stack9;

        $stack10 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $r5 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r5.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat prevWarp> = $stack10;

        $stack11 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $r6 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r6.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat lastWarp> = $stack11;

        $stack12 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, 4, 6, 2);

        $r7 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r7.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpSrcPts> = $stack12;

        $stack13 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, 4, 6, 2);

        $r8 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r8.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpDstPts> = $stack13;

        $stack14 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, 4, 6, 2);

        $r9 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r9.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat tempPts> = $stack14;

        $r10 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r10.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.GeometricCalibrator$Settings settings> = settings;

        $u2 = new org.bytedeco.javacv.MarkerDetector;

        specialinvoke $u2.<org.bytedeco.javacv.MarkerDetector: void <init>(org.bytedeco.javacv.MarkerDetector$Settings)>(detectorSettings);

        $r11 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r11.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkerDetector markerDetector> = $u2;

        $r12 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r12.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane> = markedPlane;

        $r13 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r13.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice> = projectiveDevice;

        $r14 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack16 = $r14.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat prevWarp>;

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) $stack16;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetIdentity(org.bytedeco.opencv.opencv_core.CvArr)>($r15);

        $r16 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack17 = $r16.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat lastWarp>;

        $r17 = (org.bytedeco.opencv.opencv_core.CvArr) $stack17;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetIdentity(org.bytedeco.opencv.opencv_core.CvArr)>($r17);

        if markedPlane == null goto label1;

        $stack18 = virtualinvoke markedPlane.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.opencv.opencv_core.IplImage getImage()>();

        w = virtualinvoke $stack18.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack20 = virtualinvoke markedPlane.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.opencv.opencv_core.IplImage getImage()>();

        h = virtualinvoke $stack20.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $r18 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack27 = $r18.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpSrcPts>;

        $stack22 = newarray (double)[8];

        $stack22[0] = 0.0;

        $stack22[1] = 0.0;

        $stack23 = (double) w;

        $stack22[2] = $stack23;

        $stack22[3] = 0.0;

        $stack24 = (double) w;

        $stack22[4] = $stack24;

        $stack25 = (double) h;

        $stack22[5] = $stack25;

        $stack22[6] = 0.0;

        $stack26 = (double) h;

        $stack22[7] = $stack26;

        virtualinvoke $stack27.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack22);

     label1:
        return;
    }

    public org.bytedeco.javacv.MarkerDetector getMarkerDetector()
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.MarkerDetector $stack1;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack1 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkerDetector markerDetector>;

        return $stack1;
    }

    public org.bytedeco.javacv.MarkedPlane getMarkedPlane()
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.MarkedPlane $stack1;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack1 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        return $stack1;
    }

    public org.bytedeco.javacv.ProjectiveDevice getProjectiveDevice()
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.ProjectiveDevice $stack1;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack1 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice>;

        return $stack1;
    }

    public java.util.LinkedList getAllObjectMarkers()
    {
        GeometricCalibrator this;
        java.util.LinkedList $stack1;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack1 = $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        return $stack1;
    }

    public void setAllObjectMarkers(java.util.LinkedList)
    {
        GeometricCalibrator this;
        java.util.LinkedList allObjectMarkers;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        allObjectMarkers := @parameter0: java.util.LinkedList;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers> = allObjectMarkers;

        return;
    }

    public java.util.LinkedList getAllImageMarkers()
    {
        GeometricCalibrator this;
        java.util.LinkedList $stack1;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack1 = $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        return $stack1;
    }

    public void setAllImageMarkers(java.util.LinkedList)
    {
        GeometricCalibrator this;
        java.util.LinkedList allImageMarkers;
        org.bytedeco.javacv.GeometricCalibrator $r0;

        this := @this: GeometricCalibrator;

        allImageMarkers := @parameter0: java.util.LinkedList;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers> = allImageMarkers;

        return;
    }

    public org.bytedeco.javacv.Marker[] processImage(org.bytedeco.opencv.opencv_core.IplImage)
    {
        GeometricCalibrator this;
        org.bytedeco.opencv.opencv_core.IplImage image, $stack69, $stack83, $stack98, $stack75, $stack76, $stack77;
        org.bytedeco.javacv.ProjectiveDevice $stack8, $stack10;
        int $stack9, $stack11, $stack19, $stack23, $stack27, $stack54, $stack55, $stack56, imageSize, $stack84, $stack85, $stack99, $stack100, $stack70, $stack71, $stack74;
        org.bytedeco.javacv.MarkedPlane $stack12, $stack15, $stack24, $stack35;
        org.bytedeco.opencv.opencv_core.CvScalar $stack13, $stack16;
        double $stack14, $stack17, $stack25, $stack29, $stack30, $stack31, rmsePrev, rmseLast, $stack58, $stack59, $stack60, $stack63, $stack64, $stack65;
        byte $stack18, $stack32, $stack61, $stack66;
        boolean whiteMarkers, $stack101;
        org.bytedeco.javacv.MarkerDetector $stack20, $stack78;
        org.bytedeco.javacv.Marker[] $stack21, $stack22, $stack26, $stack34, $stack68, $stack79;
        org.bytedeco.javacv.GeometricCalibrator$Settings $stack28, $stack57, $stack62;
        org.bytedeco.opencv.opencv_core.CvMat $stack33, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack46, $stack47, $stack48, $stack49, $stack50, $stack52, $stack53;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r32, $r33, $r36, $r37, $r38, $r41, $r42, $r45, $r46, $r49, $r50, $r51;
        org.bytedeco.opencv.opencv_core.CvArr $r9, $r10, $r25, $r26, $r30, $r31, $r34, $r35, $r39, $r40, $r43, $r44, $r47, $r48;

        this := @this: GeometricCalibrator;

        image := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack8 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice>;

        $stack9 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack8.<org.bytedeco.javacv.ProjectiveDevice: int imageWidth> = $stack9;

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack10 = $r1.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice>;

        $stack11 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack10.<org.bytedeco.javacv.ProjectiveDevice: int imageHeight> = $stack11;

        $r2 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack12 = $r2.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        $stack13 = virtualinvoke $stack12.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.opencv.opencv_core.CvScalar getForegroundColor()>();

        $stack14 = virtualinvoke $stack13.<org.bytedeco.opencv.opencv_core.CvScalar: double magnitude()>();

        $r3 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack15 = $r3.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        $stack16 = virtualinvoke $stack15.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.opencv.opencv_core.CvScalar getBackgroundColor()>();

        $stack17 = virtualinvoke $stack16.<org.bytedeco.opencv.opencv_core.CvScalar: double magnitude()>();

        $stack18 = $stack14 cmpl $stack17;

        if $stack18 <= 0 goto label1;

        $stack101 = 1;

        goto label2;

     label1:
        $stack101 = 0;

     label2:
        whiteMarkers = $stack101;

        $stack19 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        if $stack19 <= 8 goto label5;

        $r4 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack69 = $r4.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage>;

        if $stack69 == null goto label3;

        $r5 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack83 = $r5.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage>;

        $stack84 = virtualinvoke $stack83.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack85 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        if $stack84 != $stack85 goto label3;

        $r6 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack98 = $r6.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage>;

        $stack99 = virtualinvoke $stack98.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack100 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        if $stack99 == $stack100 goto label4;

     label3:
        $stack70 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack71 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack74 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int origin()>();

        $stack75 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int,int)>($stack70, $stack71, 8, 1, $stack74);

        $r7 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r7.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage> = $stack75;

     label4:
        $r8 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack76 = $r8.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage>;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) image;

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) $stack76;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvConvertScale(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,double)>($r9, $r10, 0.00390625, 0.0);

        $r11 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack78 = $r11.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkerDetector markerDetector>;

        $r12 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack77 = $r12.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.IplImage tempImage>;

        $stack79 = virtualinvoke $stack78.<org.bytedeco.javacv.MarkerDetector: org.bytedeco.javacv.Marker[] detect(org.bytedeco.opencv.opencv_core.IplImage,boolean)>($stack77, whiteMarkers);

        $r13 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r13.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers> = $stack79;

        goto label6;

     label5:
        $r14 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack20 = $r14.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkerDetector markerDetector>;

        $stack21 = virtualinvoke $stack20.<org.bytedeco.javacv.MarkerDetector: org.bytedeco.javacv.Marker[] detect(org.bytedeco.opencv.opencv_core.IplImage,boolean)>(image, $stack101);

        $r15 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $r15.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers> = $stack21;

     label6:
        $r16 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack22 = $r16.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers>;

        $stack23 = lengthof $stack22;

        $stack25 = (double) $stack23;

        $r17 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack24 = $r17.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        $stack26 = virtualinvoke $stack24.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.javacv.Marker[] getMarkers()>();

        $stack27 = lengthof $stack26;

        $stack30 = (double) $stack27;

        $r18 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack28 = $r18.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.GeometricCalibrator$Settings settings>;

        $stack29 = $stack28.<org.bytedeco.javacv.GeometricCalibrator$Settings: double detectedBoardMin>;

        $stack31 = $stack30 * $stack29;

        $stack32 = $stack25 cmpg $stack31;

        if $stack32 >= 0 goto label7;

        return null;

     label7:
        $r19 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack35 = $r19.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        $r20 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack34 = $r20.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers>;

        $r21 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack33 = $r21.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warp>;

        virtualinvoke $stack35.<org.bytedeco.javacv.MarkedPlane: double getTotalWarp(org.bytedeco.javacv.Marker[],org.bytedeco.opencv.opencv_core.CvMat)>($stack34, $stack33);

        $r22 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack39 = $r22.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpSrcPts>;

        $r23 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack38 = $r23.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpDstPts>;

        $r24 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack37 = $r24.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warp>;

        $r25 = (org.bytedeco.opencv.opencv_core.CvArr) $stack39;

        $r26 = (org.bytedeco.opencv.opencv_core.CvArr) $stack38;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvPerspectiveTransform(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat)>($r25, $r26, $stack37);

        $r27 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack42 = $r27.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpSrcPts>;

        $r28 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack41 = $r28.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat tempPts>;

        $r29 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack40 = $r29.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat prevWarp>;

        $r30 = (org.bytedeco.opencv.opencv_core.CvArr) $stack42;

        $r31 = (org.bytedeco.opencv.opencv_core.CvArr) $stack41;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvPerspectiveTransform(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat)>($r30, $r31, $stack40);

        $r32 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack44 = $r32.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpDstPts>;

        $r33 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack43 = $r33.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat tempPts>;

        $r34 = (org.bytedeco.opencv.opencv_core.CvArr) $stack44;

        $r35 = (org.bytedeco.opencv.opencv_core.CvArr) $stack43;

        rmsePrev = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r34, $r35);

        $r36 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack48 = $r36.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpSrcPts>;

        $r37 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack47 = $r37.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat tempPts>;

        $r38 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack46 = $r38.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat lastWarp>;

        $r39 = (org.bytedeco.opencv.opencv_core.CvArr) $stack48;

        $r40 = (org.bytedeco.opencv.opencv_core.CvArr) $stack47;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvPerspectiveTransform(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat)>($r39, $r40, $stack46);

        $r41 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack50 = $r41.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warpDstPts>;

        $r42 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack49 = $r42.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat tempPts>;

        $r43 = (org.bytedeco.opencv.opencv_core.CvArr) $stack50;

        $r44 = (org.bytedeco.opencv.opencv_core.CvArr) $stack49;

        rmseLast = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r43, $r44);

        $r45 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack53 = $r45.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat warp>;

        $r46 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack52 = $r46.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat prevWarp>;

        $r47 = (org.bytedeco.opencv.opencv_core.CvArr) $stack53;

        $r48 = (org.bytedeco.opencv.opencv_core.CvArr) $stack52;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvCopy(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r47, $r48);

        $stack54 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack55 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack56 = $stack54 + $stack55;

        imageSize = $stack56 / 2;

        $r49 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack57 = $r49.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.GeometricCalibrator$Settings settings>;

        $stack59 = $stack57.<org.bytedeco.javacv.GeometricCalibrator$Settings: double patternSteadySize>;

        $stack58 = (double) imageSize;

        $stack60 = $stack59 * $stack58;

        $stack61 = rmsePrev cmpg $stack60;

        if $stack61 >= 0 goto label8;

        $r50 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack62 = $r50.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.GeometricCalibrator$Settings settings>;

        $stack64 = $stack62.<org.bytedeco.javacv.GeometricCalibrator$Settings: double patternMovedSize>;

        $stack63 = (double) imageSize;

        $stack65 = $stack64 * $stack63;

        $stack66 = rmseLast cmpl $stack65;

        if $stack66 <= 0 goto label8;

        $r51 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack68 = $r51.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers>;

        return $stack68;

     label8:
        return null;
    }

    public void drawMarkers(org.bytedeco.opencv.opencv_core.IplImage)
    {
        GeometricCalibrator this;
        org.bytedeco.opencv.opencv_core.IplImage image;
        org.bytedeco.javacv.Marker[] $stack2;
        org.bytedeco.javacv.MarkerDetector $stack3;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1;

        this := @this: GeometricCalibrator;

        image := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack3 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkerDetector markerDetector>;

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack2 = $r1.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers>;

        virtualinvoke $stack3.<org.bytedeco.javacv.MarkerDetector: void draw(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.javacv.Marker[])>(image, $stack2);

        return;
    }

    public void addMarkers()
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.MarkedPlane $stack1;
        org.bytedeco.javacv.Marker[] $stack2, $stack3;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1, $r2;

        this := @this: GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack1 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.javacv.Marker[] getMarkers()>();

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack3 = $r1.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.Marker[] lastDetectedMarkers>;

        $r2 = (org.bytedeco.javacv.GeometricCalibrator) this;

        virtualinvoke $r2.<org.bytedeco.javacv.GeometricCalibrator: void addMarkers(org.bytedeco.javacv.Marker[],org.bytedeco.javacv.Marker[])>($stack2, $stack3);

        return;
    }

    public void addMarkers(org.bytedeco.javacv.Marker[])
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.MarkedPlane $stack2;
        org.bytedeco.javacv.Marker[] $stack3, imageMarkers;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1;

        this := @this: GeometricCalibrator;

        imageMarkers := @parameter0: org.bytedeco.javacv.Marker[];

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack2 = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.MarkedPlane markedPlane>;

        $stack3 = virtualinvoke $stack2.<org.bytedeco.javacv.MarkedPlane: org.bytedeco.javacv.Marker[] getMarkers()>();

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        virtualinvoke $r1.<org.bytedeco.javacv.GeometricCalibrator: void addMarkers(org.bytedeco.javacv.Marker[],org.bytedeco.javacv.Marker[])>($stack3, imageMarkers);

        return;
    }

    public void addMarkers(org.bytedeco.javacv.Marker[], org.bytedeco.javacv.Marker[])
    {
        org.bytedeco.javacv.Marker[] objectMarkers, imageMarkers, om, im;
        int $stack15, $stack16, maxLength, l8, l12, $stack34, $stack35, i, l9, l13;
        GeometricCalibrator this;
        java.util.LinkedList $stack18, $stack20;
        org.bytedeco.opencv.opencv_core.CvMat $stack22, $stack23;
        java.lang.Object[] $stack24, $stack25;
        org.bytedeco.javacv.Marker m1, m2;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1, $r2, $r3;
        org.bytedeco.opencv.opencv_core.CvArr $r4, $r5;

        this := @this: GeometricCalibrator;

        objectMarkers := @parameter0: org.bytedeco.javacv.Marker[];

        imageMarkers := @parameter1: org.bytedeco.javacv.Marker[];

        $stack16 = lengthof objectMarkers;

        $stack15 = lengthof imageMarkers;

        maxLength = staticinvoke <java.lang.Math: int min(int,int)>($stack16, $stack15);

        om = newarray (org.bytedeco.javacv.Marker)[maxLength];

        im = newarray (org.bytedeco.javacv.Marker)[maxLength];

        i = 0;

        l8 = lengthof objectMarkers;

        l9 = 0;

     label1:
        if l9 >= l8 goto label5;

        m1 = objectMarkers[l9];

        l12 = lengthof imageMarkers;

        l13 = 0;

     label2:
        if l13 >= l12 goto label4;

        m2 = imageMarkers[l13];

        $stack35 = m1.<org.bytedeco.javacv.Marker: int id>;

        $stack34 = m2.<org.bytedeco.javacv.Marker: int id>;

        if $stack35 != $stack34 goto label3;

        om[i] = m1;

        im[i] = m2;

        i = i + 1;

        goto label4;

     label3:
        l13 = l13 + 1;

        goto label2;

     label4:
        l9 = l9 + 1;

        goto label1;

     label5:
        if i >= maxLength goto label6;

        $stack24 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(om, i);

        om = (org.bytedeco.javacv.Marker[]) $stack24;

        $stack25 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(im, i);

        im = (org.bytedeco.javacv.Marker[]) $stack25;

     label6:
        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack18 = $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        virtualinvoke $stack18.<java.util.LinkedList: boolean add(java.lang.Object)>(om);

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack20 = $r1.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        virtualinvoke $stack20.<java.util.LinkedList: boolean add(java.lang.Object)>(im);

        $r2 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack23 = $r2.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat prevWarp>;

        $r3 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack22 = $r3.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat lastWarp>;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) $stack23;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) $stack22;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvCopy(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r4, $r5);

        return;
    }

    public int getImageCount()
    {
        boolean $stack1;
        GeometricCalibrator this;
        java.util.LinkedList $stack2, $stack4, $stack6;
        int $stack3, $stack5, $stack7;
        java.lang.AssertionError $u0;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1, $r2;

        this := @this: GeometricCalibrator;

        $stack1 = <org.bytedeco.javacv.GeometricCalibrator: boolean $assertionsDisabled>;

        if $stack1 != 0 goto label1;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack4 = $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        $stack5 = virtualinvoke $stack4.<java.util.LinkedList: int size()>();

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack6 = $r1.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        $stack7 = virtualinvoke $stack6.<java.util.LinkedList: int size()>();

        if $stack5 == $stack7 goto label1;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label1:
        $r2 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack2 = $r2.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        $stack3 = virtualinvoke $stack2.<java.util.LinkedList: int size()>();

        return $stack3;
    }

    private org.bytedeco.opencv.opencv_core.Point3fVectorVector getObjectPoints(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat points, counts;
        java.nio.FloatBuffer pointsBuf;
        java.nio.IntBuffer countsBuf;
        int n, m, i, j;
        org.bytedeco.opencv.opencv_core.Point3fVectorVector $stack14;
        long $stack15, $stack18, $stack19, $stack24;
        org.bytedeco.opencv.opencv_core.Point3fVector $stack17;
        org.bytedeco.opencv.opencv_core.Point3f $stack23;
        float $stack25, $stack26, $stack27;
        GeometricCalibrator this;

        this := @this: GeometricCalibrator;

        points := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        counts := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        pointsBuf = virtualinvoke points.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        countsBuf = virtualinvoke counts.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        n = virtualinvoke counts.<org.bytedeco.opencv.opencv_core.CvMat: int length()>();

        $stack14 = new org.bytedeco.opencv.opencv_core.Point3fVectorVector;

        $stack15 = (long) n;

        specialinvoke $stack14.<org.bytedeco.opencv.opencv_core.Point3fVectorVector: void <init>(long)>($stack15);

        i = 0;

     label1:
        if i >= n goto label4;

        m = virtualinvoke countsBuf.<java.nio.IntBuffer: int get()>();

        $stack17 = new org.bytedeco.opencv.opencv_core.Point3fVector;

        $stack18 = (long) m;

        specialinvoke $stack17.<org.bytedeco.opencv.opencv_core.Point3fVector: void <init>(long)>($stack18);

        j = 0;

     label2:
        if j >= m goto label3;

        $stack24 = (long) j;

        $stack23 = new org.bytedeco.opencv.opencv_core.Point3f;

        $stack25 = virtualinvoke pointsBuf.<java.nio.FloatBuffer: float get()>();

        $stack26 = virtualinvoke pointsBuf.<java.nio.FloatBuffer: float get()>();

        $stack27 = virtualinvoke pointsBuf.<java.nio.FloatBuffer: float get()>();

        specialinvoke $stack23.<org.bytedeco.opencv.opencv_core.Point3f: void <init>(float,float,float)>($stack25, $stack26, $stack27);

        virtualinvoke $stack17.<org.bytedeco.opencv.opencv_core.Point3fVector: org.bytedeco.opencv.opencv_core.Point3fVector put(long,org.bytedeco.opencv.opencv_core.Point3f)>($stack24, $stack23);

        j = j + 1;

        goto label2;

     label3:
        $stack19 = (long) i;

        virtualinvoke $stack14.<org.bytedeco.opencv.opencv_core.Point3fVectorVector: org.bytedeco.opencv.opencv_core.Point3fVectorVector put(long,org.bytedeco.opencv.opencv_core.Point3fVector)>($stack19, $stack17);

        i = i + 1;

        goto label1;

     label4:
        return $stack14;
    }

    private org.bytedeco.opencv.opencv_core.Point2fVectorVector getImagePoints(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat points, counts;
        java.nio.FloatBuffer pointsBuf;
        java.nio.IntBuffer countsBuf;
        int n, m, i, j;
        org.bytedeco.opencv.opencv_core.Point2fVectorVector $stack14;
        long $stack15, $stack18, $stack19, $stack24;
        org.bytedeco.opencv.opencv_core.Point2fVector $stack17;
        org.bytedeco.opencv.opencv_core.Point2f $stack23;
        float $stack25, $stack26;
        GeometricCalibrator this;

        this := @this: GeometricCalibrator;

        points := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        counts := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        pointsBuf = virtualinvoke points.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        countsBuf = virtualinvoke counts.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        n = virtualinvoke counts.<org.bytedeco.opencv.opencv_core.CvMat: int length()>();

        $stack14 = new org.bytedeco.opencv.opencv_core.Point2fVectorVector;

        $stack15 = (long) n;

        specialinvoke $stack14.<org.bytedeco.opencv.opencv_core.Point2fVectorVector: void <init>(long)>($stack15);

        i = 0;

     label1:
        if i >= n goto label4;

        m = virtualinvoke countsBuf.<java.nio.IntBuffer: int get()>();

        $stack17 = new org.bytedeco.opencv.opencv_core.Point2fVector;

        $stack18 = (long) m;

        specialinvoke $stack17.<org.bytedeco.opencv.opencv_core.Point2fVector: void <init>(long)>($stack18);

        j = 0;

     label2:
        if j >= m goto label3;

        $stack24 = (long) j;

        $stack23 = new org.bytedeco.opencv.opencv_core.Point2f;

        $stack25 = virtualinvoke pointsBuf.<java.nio.FloatBuffer: float get()>();

        $stack26 = virtualinvoke pointsBuf.<java.nio.FloatBuffer: float get()>();

        specialinvoke $stack23.<org.bytedeco.opencv.opencv_core.Point2f: void <init>(float,float)>($stack25, $stack26);

        virtualinvoke $stack17.<org.bytedeco.opencv.opencv_core.Point2fVector: org.bytedeco.opencv.opencv_core.Point2fVector put(long,org.bytedeco.opencv.opencv_core.Point2f)>($stack24, $stack23);

        j = j + 1;

        goto label2;

     label3:
        $stack19 = (long) i;

        virtualinvoke $stack14.<org.bytedeco.opencv.opencv_core.Point2fVectorVector: org.bytedeco.opencv.opencv_core.Point2fVectorVector put(long,org.bytedeco.opencv.opencv_core.Point2fVector)>($stack19, $stack17);

        i = i + 1;

        goto label1;

     label4:
        return $stack14;
    }

    private org.bytedeco.opencv.opencv_core.CvMat[] getPoints(boolean)
    {
        boolean $stack16, $stack37, useCenters, $stack97, $stack112, $stack26, $stack35;
        GeometricCalibrator this;
        java.util.LinkedList $stack17, $stack19, $stack21, $stack27, $stack29, $stack128, $stack130;
        int $stack23, $stack47, $stack52, $stack58, $stack59, $stack66, $stack72, $stack73, $stack113, $stack123, $stack124, $stack129, $stack131, totalPointCount, n, j, c1#23;
        org.bytedeco.opencv.opencv_core.CvMat pointCounts, m1, m2;
        java.nio.IntBuffer pointCountsBuf;
        java.nio.FloatBuffer imagePointsBuf, n#16;
        org.bytedeco.opencv.opencv_core.CvMat[] $stack36;
        java.lang.Object $stack45, $stack46, $stack110, $stack111;
        org.bytedeco.javacv.Marker[] m1, m2;
        org.bytedeco.javacv.Marker $stack51, $stack57, $stack65, $stack71, $stack80, $stack89;
        double[] $stack53, $stack60, $stack67, $stack74, c2, c1;
        double $stack54, $stack61, $stack68, $stack75, $stack82, $stack85, $stack91, $stack94;
        float $stack55, $stack62, $stack69, $stack76, $stack83, $stack86, $stack92, $stack95;
        java.util.Iterator i1, i2;
        byte $stack116;
        java.lang.AssertionError $u0, $u1;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: GeometricCalibrator;

        useCenters := @parameter0: boolean;

        $stack16 = <org.bytedeco.javacv.GeometricCalibrator: boolean $assertionsDisabled>;

        if $stack16 != 0 goto label01;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack128 = $r0.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        $stack129 = virtualinvoke $stack128.<java.util.LinkedList: int size()>();

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack130 = $r1.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        $stack131 = virtualinvoke $stack130.<java.util.LinkedList: int size()>();

        if $stack129 == $stack131 goto label01;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label01:
        $r2 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack17 = $r2.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        i1 = virtualinvoke $stack17.<java.util.LinkedList: java.util.Iterator iterator()>();

        $r3 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack19 = $r3.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        i2 = virtualinvoke $stack19.<java.util.LinkedList: java.util.Iterator iterator()>();

        $r4 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack21 = $r4.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        $stack23 = virtualinvoke $stack21.<java.util.LinkedList: int size()>();

        pointCounts = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, $stack23, 4, 1);

        pointCountsBuf = virtualinvoke pointCounts.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        totalPointCount = 0;

     label02:
        $stack26 = interfaceinvoke i1.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label06;

        $stack97 = interfaceinvoke i2.<java.util.Iterator: boolean hasNext()>();

        if $stack97 == 0 goto label06;

        $stack110 = interfaceinvoke i1.<java.util.Iterator: java.lang.Object next()>();

        m1 = (org.bytedeco.javacv.Marker[]) $stack110;

        $stack111 = interfaceinvoke i2.<java.util.Iterator: java.lang.Object next()>();

        m2 = (org.bytedeco.javacv.Marker[]) $stack111;

        $stack112 = <org.bytedeco.javacv.GeometricCalibrator: boolean $assertionsDisabled>;

        if $stack112 != 0 goto label03;

        $stack124 = lengthof m1;

        $stack123 = lengthof m2;

        if $stack124 == $stack123 goto label03;

        $u1 = new java.lang.AssertionError;

        specialinvoke $u1.<java.lang.AssertionError: void <init>()>();

        throw $u1;

     label03:
        $stack113 = lengthof m1;

        if useCenters == 0 goto label04;

        $stack116 = 1;

        goto label05;

     label04:
        $stack116 = 4;

     label05:
        n = $stack113 * $stack116;

        virtualinvoke pointCountsBuf.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>(n);

        totalPointCount = totalPointCount + n;

        goto label02;

     label06:
        $r5 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack27 = $r5.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allObjectMarkers>;

        i1 = virtualinvoke $stack27.<java.util.LinkedList: java.util.Iterator iterator()>();

        $r6 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack29 = $r6.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        i2 = virtualinvoke $stack29.<java.util.LinkedList: java.util.Iterator iterator()>();

        m1 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, totalPointCount, 5, 3);

        m2 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, totalPointCount, 5, 2);

        n#16 = virtualinvoke m1.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        imagePointsBuf = virtualinvoke m2.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

     label07:
        $stack35 = interfaceinvoke i1.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label13;

        $stack37 = interfaceinvoke i2.<java.util.Iterator: boolean hasNext()>();

        if $stack37 == 0 goto label13;

        $stack45 = interfaceinvoke i1.<java.util.Iterator: java.lang.Object next()>();

        m1 = (org.bytedeco.javacv.Marker[]) $stack45;

        $stack46 = interfaceinvoke i2.<java.util.Iterator: java.lang.Object next()>();

        m2 = (org.bytedeco.javacv.Marker[]) $stack46;

        j = 0;

     label08:
        $stack47 = lengthof m1;

        if j >= $stack47 goto label12;

        if useCenters == 0 goto label09;

        $stack80 = m1[j];

        c1 = virtualinvoke $stack80.<org.bytedeco.javacv.Marker: double[] getCenter()>();

        $stack82 = c1[0];

        $stack83 = (float) $stack82;

        virtualinvoke n#16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack83);

        $stack85 = c1[1];

        $stack86 = (float) $stack85;

        virtualinvoke n#16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack86);

        virtualinvoke n#16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>(0.0F);

        $stack89 = m2[j];

        c2 = virtualinvoke $stack89.<org.bytedeco.javacv.Marker: double[] getCenter()>();

        $stack91 = c2[0];

        $stack92 = (float) $stack91;

        virtualinvoke imagePointsBuf.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack92);

        $stack94 = c2[1];

        $stack95 = (float) $stack94;

        virtualinvoke imagePointsBuf.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack95);

        goto label11;

     label09:
        c1#23 = 0;

     label10:
        if c1#23 >= 4 goto label11;

        $stack51 = m1[j];

        $stack53 = $stack51.<org.bytedeco.javacv.Marker: double[] corners>;

        $stack52 = 2 * c1#23;

        $stack54 = $stack53[$stack52];

        $stack55 = (float) $stack54;

        virtualinvoke n#16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack55);

        $stack57 = m1[j];

        $stack60 = $stack57.<org.bytedeco.javacv.Marker: double[] corners>;

        $stack58 = 2 * c1#23;

        $stack59 = $stack58 + 1;

        $stack61 = $stack60[$stack59];

        $stack62 = (float) $stack61;

        virtualinvoke n#16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack62);

        virtualinvoke n#16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>(0.0F);

        $stack65 = m2[j];

        $stack67 = $stack65.<org.bytedeco.javacv.Marker: double[] corners>;

        $stack66 = 2 * c1#23;

        $stack68 = $stack67[$stack66];

        $stack69 = (float) $stack68;

        virtualinvoke imagePointsBuf.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack69);

        $stack71 = m2[j];

        $stack74 = $stack71.<org.bytedeco.javacv.Marker: double[] corners>;

        $stack72 = 2 * c1#23;

        $stack73 = $stack72 + 1;

        $stack75 = $stack74[$stack73];

        $stack76 = (float) $stack75;

        virtualinvoke imagePointsBuf.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack76);

        c1#23 = c1#23 + 1;

        goto label10;

     label11:
        j = j + 1;

        goto label08;

     label12:
        goto label07;

     label13:
        $stack36 = newarray (org.bytedeco.opencv.opencv_core.CvMat)[3];

        $stack36[0] = m1;

        $stack36[1] = m2;

        $stack36[2] = pointCounts;

        return $stack36;
    }

    public static double[] computeReprojectionError(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat image_points, image_points2, rot_vects, point_counts, object_points, trans_vects, camera_matrix, dist_coeffs, per_view_errors, $u0, $u1, $u2, $u3, $u4;
        int $stack38, $stack39, $stack40, image_count, point_count, $stack55, $stack57, $stack59, $stack61, $stack63, points_so_far, i, j;
        java.nio.IntBuffer point_counts_buf;
        double[] $stack49;
        double $stack50, $stack51, $stack53, x1, y1, x2, y2, dx, dy, $stack78, $stack79, $stack80, $stack85, $stack86, $stack87, total_err, max_err, err;
        org.bytedeco.opencv.opencv_core.Mat $stack65, $stack66, $stack67, $stack68, $stack69, $stack70;
        byte $stack82;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        object_points := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        image_points := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        point_counts := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        camera_matrix := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        dist_coeffs := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        rot_vects := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        trans_vects := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        per_view_errors := @parameter7: org.bytedeco.opencv.opencv_core.CvMat;

        $stack38 = virtualinvoke image_points.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        $stack39 = virtualinvoke image_points.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        $stack40 = virtualinvoke image_points.<org.bytedeco.opencv.opencv_core.CvMat: int type()>();

        image_points2 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int)>($stack38, $stack39, $stack40);

        image_count = virtualinvoke rot_vects.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        points_so_far = 0;

        total_err = 0.0;

        max_err = 0.0;

        $u0 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u0.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        $u1 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u1.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        $u2 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u2.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        point_counts_buf = virtualinvoke point_counts.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        $u3 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u3.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        $u4 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u4.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        i = 0;

     label1:
        if i >= image_count goto label6;

        virtualinvoke $u0.<org.bytedeco.opencv.opencv_core.CvMat: void reset()>();

        virtualinvoke $u1.<org.bytedeco.opencv.opencv_core.CvMat: void reset()>();

        virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.CvMat: void reset()>();

        point_count = virtualinvoke point_counts_buf.<java.nio.IntBuffer: int get(int)>(i);

        $stack55 = points_so_far + point_count;

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) object_points;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetCols(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int)>($r0, $u0, points_so_far, $stack55);

        $stack57 = points_so_far + point_count;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) image_points;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetCols(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int)>($r1, $u1, points_so_far, $stack57);

        $stack59 = points_so_far + point_count;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) image_points2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetCols(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int)>($r2, $u2, points_so_far, $stack59);

        points_so_far = points_so_far + point_count;

        $stack61 = i + 1;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) rot_vects;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetRows(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int,int)>($r3, $u3, i, $stack61, 1);

        $stack63 = i + 1;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) trans_vects;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetRows(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int,int)>($r4, $u4, i, $stack63, 1);

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) $u0;

        $stack65 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r5);

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) $u3;

        $stack66 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r6);

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) $u4;

        $stack67 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r7);

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) camera_matrix;

        $stack68 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r8);

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) dist_coeffs;

        $stack69 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r9);

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) $u2;

        $stack70 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r10);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: void projectPoints(org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat)>($stack65, $stack66, $stack67, $stack68, $stack69, $stack70);

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) $u1;

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) $u2;

        err = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r11, $r12);

        err = err * err;

        if per_view_errors == null goto label2;

        $stack85 = (double) point_count;

        $stack86 = err / $stack85;

        $stack87 = staticinvoke <java.lang.Math: double sqrt(double)>($stack86);

        virtualinvoke per_view_errors.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack87);

     label2:
        total_err = total_err + err;

        j = 0;

     label3:
        if j >= point_count goto label5;

        x1 = virtualinvoke $u1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, j, 0);

        y1 = virtualinvoke $u1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, j, 1);

        x2 = virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, j, 0);

        y2 = virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, j, 1);

        dx = x1 - x2;

        dy = y1 - y2;

        $stack79 = dx * dx;

        $stack78 = dy * dy;

        $stack80 = $stack79 + $stack78;

        err = staticinvoke <java.lang.Math: double sqrt(double)>($stack80);

        $stack82 = err cmpl max_err;

        if $stack82 <= 0 goto label4;

        max_err = err;

     label4:
        j = j + 1;

        goto label3;

     label5:
        i = i + 1;

        goto label1;

     label6:
        $stack49 = newarray (double)[2];

        $stack50 = (double) points_so_far;

        $stack51 = total_err / $stack50;

        $stack53 = staticinvoke <java.lang.Math: double sqrt(double)>($stack51);

        $stack49[0] = $stack53;

        $stack49[1] = max_err;

        return $stack49;
    }

    public double[] calibrate(boolean)
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.ProjectiveDevice d;
        org.bytedeco.javacv.ProjectiveDevice$Settings $stack14;
        org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings dsettings;
        org.bytedeco.opencv.opencv_core.CvMat $stack15, $stack19, $stack20, $stack50, $stack51, $stack52, $stack54, $stack63, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74, $stack80, $stack81, $stack84, $stack85, $stack88, $stack136, $stack137, $stack142, $stack144, $stack18, $stack25, $stack26, $stack28, $stack35, $stack34, $stack38, $stack37, $stack43, $u0, $u1, $u7;
        boolean $stack17, useCenters, $stack130, $stack132, $stack133, $stack16;
        org.bytedeco.opencv.opencv_core.CvMat[] points;
        int n, $stack53, $stack55, $stack64, $stack67, $stack89, $stack138, $stack139, $stack24, $stack42, $stack41, $stack46, i;
        java.util.LinkedList $stack65, $stack23;
        double $stack76, $stack77, $stack141;
        long $stack78, $stack82, $stack48;
        org.bytedeco.opencv.opencv_core.Mat $stack79, $stack83, $stack44, $u4;
        byte $stack134, kn;
        org.bytedeco.opencv.opencv_core.Point3fVectorVector $stack36;
        org.bytedeco.opencv.opencv_core.Point2fVectorVector $stack39;
        double[] i#154;
        org.bytedeco.opencv.opencv_core.MatVector $u2, $u3;
        org.bytedeco.opencv.opencv_core.Size $u5;
        org.bytedeco.opencv.opencv_core.TermCriteria $u6;
        org.bytedeco.javacv.GeometricCalibrator $r0, $r3, $r6, $r7, $r8, $r19;
        org.bytedeco.opencv.opencv_core.CvArr $r1, $r2, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        this := @this: GeometricCalibrator;

        useCenters := @parameter0: boolean;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        d = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice>;

        $stack14 = virtualinvoke d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.javacv.ProjectiveDevice$Settings getSettings()>();

        dsettings = (org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings) $stack14;

        $stack15 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        if $stack15 != null goto label1;

        $stack136 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix> = $stack136;

        $stack137 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) $stack137;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetZero(org.bytedeco.opencv.opencv_core.CvArr)>($r1);

        $stack138 = dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: int flags>;

        $stack139 = $stack138 & 2;

        if $stack139 == 0 goto label1;

        $stack142 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack141 = dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: double initAspectRatio>;

        virtualinvoke $stack142.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(0, $stack141);

        $stack144 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        virtualinvoke $stack144.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(4, 1.0);

     label1:
        $stack16 = virtualinvoke dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: boolean isFixK3()>();

        if $stack16 == 0 goto label2;

        $stack134 = 4;

        goto label3;

     label2:
        $stack134 = 5;

     label3:
        kn = $stack134;

        $stack17 = virtualinvoke dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: boolean isRationalModel()>();

        if $stack17 == 0 goto label4;

        $stack130 = virtualinvoke dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: boolean isFixK4()>();

        if $stack130 != 0 goto label4;

        $stack132 = virtualinvoke dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: boolean isFixK4()>();

        if $stack132 != 0 goto label4;

        $stack133 = virtualinvoke dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: boolean isFixK5()>();

        if $stack133 != 0 goto label4;

        kn = 8;

     label4:
        $stack18 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        if $stack18 == null goto label5;

        $stack88 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $stack89 = virtualinvoke $stack88.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        if $stack89 == kn goto label6;

     label5:
        $stack19 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(1, kn);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs> = $stack19;

        $stack20 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) $stack20;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetZero(org.bytedeco.opencv.opencv_core.CvArr)>($r2);

     label6:
        $u0 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u0.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        $u1 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u1.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        $r3 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack23 = $r3.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        $stack24 = virtualinvoke $stack23.<java.util.LinkedList: int size()>();

        $stack25 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>($stack24, 6);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat extrParams> = $stack25;

        $stack26 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat extrParams>;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) $stack26;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetCols(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int)>($r4, $u0, 0, 3);

        $stack28 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat extrParams>;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) $stack28;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetCols(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int,int)>($r5, $u1, 3, 6);

        $r6 = (org.bytedeco.javacv.GeometricCalibrator) this;

        points = specialinvoke $r6.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat[] getPoints(boolean)>(useCenters);

        $u2 = new org.bytedeco.opencv.opencv_core.MatVector;

        specialinvoke $u2.<org.bytedeco.opencv.opencv_core.MatVector: void <init>()>();

        $u3 = new org.bytedeco.opencv.opencv_core.MatVector;

        specialinvoke $u3.<org.bytedeco.opencv.opencv_core.MatVector: void <init>()>();

        $u4 = new org.bytedeco.opencv.opencv_core.Mat;

        specialinvoke $u4.<org.bytedeco.opencv.opencv_core.Mat: void <init>()>();

        $stack35 = points[0];

        $stack34 = points[2];

        $r7 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack36 = specialinvoke $r7.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.Point3fVectorVector getObjectPoints(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>($stack35, $stack34);

        $stack38 = points[1];

        $stack37 = points[2];

        $r8 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack39 = specialinvoke $r8.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.Point2fVectorVector getImagePoints(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>($stack38, $stack37);

        $u5 = new org.bytedeco.opencv.opencv_core.Size;

        $stack42 = d.<org.bytedeco.javacv.ProjectiveDevice: int imageWidth>;

        $stack41 = d.<org.bytedeco.javacv.ProjectiveDevice: int imageHeight>;

        specialinvoke $u5.<org.bytedeco.opencv.opencv_core.Size: void <init>(int,int)>($stack42, $stack41);

        $stack43 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) $stack43;

        $stack44 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r9);

        $stack46 = dsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: int flags>;

        $u6 = new org.bytedeco.opencv.opencv_core.TermCriteria;

        specialinvoke $u6.<org.bytedeco.opencv.opencv_core.TermCriteria: void <init>(int,int,double)>(3, 30, 2.220446049250313E-16);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: double calibrateCamera(org.bytedeco.opencv.opencv_core.Point3fVectorVector,org.bytedeco.opencv.opencv_core.Point2fVectorVector,org.bytedeco.opencv.opencv_core.Size,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.MatVector,org.bytedeco.opencv.opencv_core.MatVector,int,org.bytedeco.opencv.opencv_core.TermCriteria)>($stack36, $stack39, $u5, $stack44, $u4, $u2, $u3, $stack46, $u6);

        $stack48 = virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.MatVector: long size()>();

        n = (int) $stack48;

        $u7 = new org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke $u7.<org.bytedeco.opencv.opencv_core.CvMat: void <init>()>();

        i = 0;

     label7:
        if i >= n goto label8;

        $stack78 = (long) i;

        $stack79 = virtualinvoke $u2.<org.bytedeco.opencv.opencv_core.MatVector: org.bytedeco.opencv.opencv_core.Mat get(long)>($stack78);

        $stack80 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvMat(org.bytedeco.opencv.opencv_core.Mat)>($stack79);

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) $u0;

        $stack81 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetRow(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int)>($r10, $u7, i);

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) $stack80;

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) $stack81;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvTranspose(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r11, $r12);

        $stack82 = (long) i;

        $stack83 = virtualinvoke $u3.<org.bytedeco.opencv.opencv_core.MatVector: org.bytedeco.opencv.opencv_core.Mat get(long)>($stack82);

        $stack84 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvMat(org.bytedeco.opencv.opencv_core.Mat)>($stack83);

        $r13 = (org.bytedeco.opencv.opencv_core.CvArr) $u1;

        $stack85 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvGetRow(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,int)>($r13, $u7, i);

        $r14 = (org.bytedeco.opencv.opencv_core.CvArr) $stack84;

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) $stack85;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvTranspose(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r14, $r15);

        i = i + 1;

        goto label7;

     label8:
        $stack50 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvMat cvMat(org.bytedeco.opencv.opencv_core.Mat)>($u4);

        $stack51 = virtualinvoke $stack50.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat clone()>();

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs> = $stack51;

        $stack52 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $r16 = (org.bytedeco.opencv.opencv_core.CvArr) $stack52;

        $stack53 = staticinvoke <org.bytedeco.opencv.global.opencv_core: int cvCheckArr(org.bytedeco.opencv.opencv_core.CvArr,int,double,double)>($r16, 2, 0.0, 0.0);

        if $stack53 == 0 goto label9;

        $stack54 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $r17 = (org.bytedeco.opencv.opencv_core.CvArr) $stack54;

        $stack55 = staticinvoke <org.bytedeco.opencv.global.opencv_core: int cvCheckArr(org.bytedeco.opencv.opencv_core.CvArr,int,double,double)>($r17, 2, 0.0, 0.0);

        if $stack55 == 0 goto label9;

        $stack63 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat extrParams>;

        $r18 = (org.bytedeco.opencv.opencv_core.CvArr) $stack63;

        $stack64 = staticinvoke <org.bytedeco.opencv.global.opencv_core: int cvCheckArr(org.bytedeco.opencv.opencv_core.CvArr,int,double,double)>($r18, 2, 0.0, 0.0);

        if $stack64 == 0 goto label9;

        $r19 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack65 = $r19.<org.bytedeco.javacv.GeometricCalibrator: java.util.LinkedList allImageMarkers>;

        $stack67 = virtualinvoke $stack65.<java.util.LinkedList: int size()>();

        $stack68 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(1, $stack67);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat reprojErrs> = $stack68;

        $stack74 = points[0];

        $stack73 = points[1];

        $stack72 = points[2];

        $stack71 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack70 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $stack69 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat reprojErrs>;

        i#154 = staticinvoke <org.bytedeco.javacv.GeometricCalibrator: double[] computeReprojectionError(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>($stack74, $stack73, $stack72, $stack71, $stack70, $u0, $u1, $stack69);

        $stack76 = i#154[0];

        d.<org.bytedeco.javacv.ProjectiveDevice: double avgReprojErr> = $stack76;

        $stack77 = i#154[1];

        d.<org.bytedeco.javacv.ProjectiveDevice: double maxReprojErr> = $stack77;

        return i#154;

     label9:
        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix> = null;

        d.<org.bytedeco.javacv.ProjectiveDevice: double avgReprojErr> = -1.0;

        d.<org.bytedeco.javacv.ProjectiveDevice: double maxReprojErr> = -1.0;

        return null;
    }

    public static double[] computeStereoError(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat imagePoints1, L1, L2, M1, D1, imagePoints2, M2, D2, F;
        int N, i;
        org.bytedeco.opencv.opencv_core.Mat $stack26, $stack27, $stack28, $stack29, $stack31, $stack32, $stack33, $stack34, $stack35, $stack37, $stack38, $stack40, $stack41, $stack42, $stack44, $stack45;
        double[] $stack46;
        double $stack47, $stack48, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, e1, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, e2, $stack67, $stack68, avgErr, maxErr, err;
        byte $stack70;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        imagePoints1 := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        imagePoints2 := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        M1 := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        D1 := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        M2 := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        D2 := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        F := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        N = virtualinvoke imagePoints1.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        L1 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, N, 5, 3);

        L2 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, N, 5, 3);

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) imagePoints1;

        $stack26 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r0);

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) imagePoints1;

        $stack27 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r1);

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) M1;

        $stack28 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r2);

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) D1;

        $stack29 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r3);

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) M1;

        $stack31 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r4);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: void undistortPoints(org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat)>($stack26, $stack27, $stack28, $stack29, null, $stack31);

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) imagePoints2;

        $stack32 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r5);

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) imagePoints2;

        $stack33 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r6);

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) M2;

        $stack34 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r7);

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) D2;

        $stack35 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r8);

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) M2;

        $stack37 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r9);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: void undistortPoints(org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat)>($stack32, $stack33, $stack34, $stack35, null, $stack37);

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) imagePoints1;

        $stack38 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r10);

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) F;

        $stack40 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r11);

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) L1;

        $stack41 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r12);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: void computeCorrespondEpilines(org.bytedeco.opencv.opencv_core.Mat,int,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat)>($stack38, 1, $stack40, $stack41);

        $r13 = (org.bytedeco.opencv.opencv_core.CvArr) imagePoints2;

        $stack42 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r13);

        $r14 = (org.bytedeco.opencv.opencv_core.CvArr) F;

        $stack44 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r14);

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) L2;

        $stack45 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r15);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: void computeCorrespondEpilines(org.bytedeco.opencv.opencv_core.Mat,int,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat)>($stack42, 2, $stack44, $stack45);

        avgErr = 0.0;

        maxErr = 0.0;

        i = 0;

     label1:
        if i >= N goto label3;

        $stack51 = virtualinvoke imagePoints1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 0);

        $stack52 = virtualinvoke L2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 0);

        $stack53 = $stack51 * $stack52;

        $stack54 = virtualinvoke imagePoints1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 1);

        $stack55 = virtualinvoke L2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 1);

        $stack56 = $stack54 * $stack55;

        $stack57 = $stack53 + $stack56;

        $stack58 = virtualinvoke L2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 2);

        e1 = $stack57 + $stack58;

        $stack59 = virtualinvoke imagePoints2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 0);

        $stack60 = virtualinvoke L1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 0);

        $stack61 = $stack59 * $stack60;

        $stack62 = virtualinvoke imagePoints2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 1);

        $stack63 = virtualinvoke L1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 1);

        $stack64 = $stack62 * $stack63;

        $stack65 = $stack61 + $stack64;

        $stack66 = virtualinvoke L1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int,int)>(0, i, 2);

        e2 = $stack65 + $stack66;

        $stack68 = e1 * e1;

        $stack67 = e2 * e2;

        err = $stack68 + $stack67;

        avgErr = avgErr + err;

        err = staticinvoke <java.lang.Math: double sqrt(double)>(err);

        $stack70 = err cmpl maxErr;

        if $stack70 <= 0 goto label2;

        maxErr = err;

     label2:
        i = i + 1;

        goto label1;

     label3:
        $stack46 = newarray (double)[2];

        $stack47 = (double) N;

        $stack48 = avgErr / $stack47;

        $stack50 = staticinvoke <java.lang.Math: double sqrt(double)>($stack48);

        $stack46[0] = $stack50;

        $stack46[1] = maxErr;

        return $stack46;
    }

    public double[] calibrateStereo(boolean, org.bytedeco.javacv.GeometricCalibrator)
    {
        GeometricCalibrator this;
        org.bytedeco.javacv.ProjectiveDevice d, dp;
        org.bytedeco.javacv.GeometricCalibrator peer, $r0, $r1, $r4, $r5, $r6;
        org.bytedeco.javacv.ProjectiveDevice$Settings $stack37, $stack38;
        org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings dsettings, dpsettings;
        boolean useCenters, $stack53;
        org.bytedeco.opencv.opencv_core.CvMat[] points1, points2;
        org.bytedeco.opencv.opencv_core.CvMat $stack41, $stack43, $stack45, $stack47, $stack49, $stack51, objectPointsMat, imagePoints1Mat, imagePoints2Mat, pointCountsMat, $stack88, $stack90, $stack92, $stack94, $stack96, $stack97, $stack98, $stack99, $stack100, $stack101, $stack102, $stack103, $stack107, $stack109, $stack111, $stack113, $stack118, $stack120, $stack122, $stack124, $stack129, $stack130, $stack131, $stack132, $stack133;
        java.nio.FloatBuffer objPts1, imgPts1, objPts2, imgPts2, objectPoints, imagePoints1, imagePoints2;
        java.nio.IntBuffer imgCount1, imgCount2, pointCounts;
        int $stack55, $stack56, $stack57, $stack60, $stack61, $stack62, $stack65, $stack66, $stack67, $stack70, $stack77, $stack78, $stack80, $stack81, $stack83, $stack84, $stack86, $stack116, $stack117, $stack127, start1, start2, $stack137, $stack138, $stack142, $stack144, $stack145, $stack147, $stack148, $stack152, $stack154, $stack155, $stack157, $stack158, $stack168, $stack171, $stack172, $stack175, $stack178, $stack179, $stack182, $stack183, end1, end2, i, $stack76, count, j, k;
        double[] $stack89, $stack93, i#13;
        org.bytedeco.opencv.opencv_core.Point3fVectorVector $stack104;
        org.bytedeco.opencv.opencv_core.Point2fVectorVector $stack105, $stack106;
        org.bytedeco.opencv.opencv_core.Mat $stack108, $stack110, $stack112, $stack114, $stack119, $stack121, $stack123, $stack125;
        double $stack135, $stack136;
        float x1, y1, z1, x2, y2, z2, $stack169, $stack173, $stack176, $stack180;
        byte $stack160, $stack163, $stack164;
        java.lang.AssertionError $u0;
        org.bytedeco.opencv.opencv_core.Size $u1;
        org.bytedeco.opencv.opencv_core.TermCriteria $u2;
        org.bytedeco.opencv.opencv_core.CvArr $r2, $r3, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        this := @this: GeometricCalibrator;

        useCenters := @parameter0: boolean;

        peer := @parameter1: org.bytedeco.javacv.GeometricCalibrator;

        $r0 = (org.bytedeco.javacv.GeometricCalibrator) this;

        d = $r0.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice>;

        dp = peer.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.javacv.ProjectiveDevice projectiveDevice>;

        $stack37 = virtualinvoke d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.javacv.ProjectiveDevice$Settings getSettings()>();

        dsettings = (org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings) $stack37;

        $stack38 = virtualinvoke dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.javacv.ProjectiveDevice$Settings getSettings()>();

        dpsettings = (org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings) $stack38;

        $r1 = (org.bytedeco.javacv.GeometricCalibrator) this;

        points1 = specialinvoke $r1.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat[] getPoints(boolean)>(useCenters);

        points2 = specialinvoke peer.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.CvMat[] getPoints(boolean)>(useCenters);

        $stack41 = points1[0];

        objPts1 = virtualinvoke $stack41.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        $stack43 = points1[1];

        imgPts1 = virtualinvoke $stack43.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        $stack45 = points1[2];

        imgCount1 = virtualinvoke $stack45.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        $stack47 = points2[0];

        objPts2 = virtualinvoke $stack47.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        $stack49 = points2[1];

        imgPts2 = virtualinvoke $stack49.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        $stack51 = points2[2];

        imgCount2 = virtualinvoke $stack51.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        $stack53 = <org.bytedeco.javacv.GeometricCalibrator: boolean $assertionsDisabled>;

        if $stack53 != 0 goto label1;

        $stack182 = virtualinvoke imgCount1.<java.nio.IntBuffer: int capacity()>();

        $stack183 = virtualinvoke imgCount2.<java.nio.IntBuffer: int capacity()>();

        if $stack182 == $stack183 goto label1;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label1:
        $stack55 = virtualinvoke objPts1.<java.nio.FloatBuffer: int capacity()>();

        $stack56 = virtualinvoke objPts2.<java.nio.FloatBuffer: int capacity()>();

        $stack57 = staticinvoke <java.lang.Math: int min(int,int)>($stack55, $stack56);

        objectPointsMat = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, $stack57, 5, 3);

        $stack60 = virtualinvoke imgPts1.<java.nio.FloatBuffer: int capacity()>();

        $stack61 = virtualinvoke imgPts2.<java.nio.FloatBuffer: int capacity()>();

        $stack62 = staticinvoke <java.lang.Math: int min(int,int)>($stack60, $stack61);

        imagePoints1Mat = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, $stack62, 5, 2);

        $stack65 = virtualinvoke imgPts1.<java.nio.FloatBuffer: int capacity()>();

        $stack66 = virtualinvoke imgPts2.<java.nio.FloatBuffer: int capacity()>();

        $stack67 = staticinvoke <java.lang.Math: int min(int,int)>($stack65, $stack66);

        imagePoints2Mat = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, $stack67, 5, 2);

        $stack70 = virtualinvoke imgCount1.<java.nio.IntBuffer: int capacity()>();

        pointCountsMat = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int,int,int)>(1, $stack70, 4, 1);

        objectPoints = virtualinvoke objectPointsMat.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        imagePoints1 = virtualinvoke imagePoints1Mat.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        imagePoints2 = virtualinvoke imagePoints2Mat.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.FloatBuffer getFloatBuffer()>();

        pointCounts = virtualinvoke pointCountsMat.<org.bytedeco.opencv.opencv_core.CvMat: java.nio.IntBuffer getIntBuffer()>();

        end1 = 0;

        end2 = 0;

        i = 0;

     label2:
        $stack76 = virtualinvoke imgCount1.<java.nio.IntBuffer: int capacity()>();

        if i >= $stack76 goto label9;

        start1 = end1;

        start2 = end2;

        $stack137 = virtualinvoke imgCount1.<java.nio.IntBuffer: int get(int)>(i);

        end1 = end1 + $stack137;

        $stack138 = virtualinvoke imgCount2.<java.nio.IntBuffer: int get(int)>(i);

        end2 = end2 + $stack138;

        count = 0;

        j = start1;

     label3:
        if j >= end1 goto label7;

        $stack142 = j * 3;

        x1 = virtualinvoke objPts1.<java.nio.FloatBuffer: float get(int)>($stack142);

        $stack144 = j * 3;

        $stack145 = $stack144 + 1;

        y1 = virtualinvoke objPts1.<java.nio.FloatBuffer: float get(int)>($stack145);

        $stack147 = j * 3;

        $stack148 = $stack147 + 2;

        z1 = virtualinvoke objPts1.<java.nio.FloatBuffer: float get(int)>($stack148);

        k = start2;

     label4:
        if k >= end2 goto label6;

        $stack152 = k * 3;

        x2 = virtualinvoke objPts2.<java.nio.FloatBuffer: float get(int)>($stack152);

        $stack154 = k * 3;

        $stack155 = $stack154 + 1;

        y2 = virtualinvoke objPts2.<java.nio.FloatBuffer: float get(int)>($stack155);

        $stack157 = k * 3;

        $stack158 = $stack157 + 2;

        z2 = virtualinvoke objPts2.<java.nio.FloatBuffer: float get(int)>($stack158);

        $stack160 = x1 cmpl x2;

        if $stack160 != 0 goto label5;

        $stack163 = y1 cmpl y2;

        if $stack163 != 0 goto label5;

        $stack164 = z1 cmpl z2;

        if $stack164 != 0 goto label5;

        virtualinvoke objectPoints.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>(x1);

        virtualinvoke objectPoints.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>(y1);

        virtualinvoke objectPoints.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>(z1);

        $stack168 = j * 2;

        $stack169 = virtualinvoke imgPts1.<java.nio.FloatBuffer: float get(int)>($stack168);

        virtualinvoke imagePoints1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack169);

        $stack171 = j * 2;

        $stack172 = $stack171 + 1;

        $stack173 = virtualinvoke imgPts1.<java.nio.FloatBuffer: float get(int)>($stack172);

        virtualinvoke imagePoints1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack173);

        $stack175 = k * 2;

        $stack176 = virtualinvoke imgPts2.<java.nio.FloatBuffer: float get(int)>($stack175);

        virtualinvoke imagePoints2.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack176);

        $stack178 = k * 2;

        $stack179 = $stack178 + 1;

        $stack180 = virtualinvoke imgPts2.<java.nio.FloatBuffer: float get(int)>($stack179);

        virtualinvoke imagePoints2.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack180);

        count = count + 1;

        goto label6;

     label5:
        k = k + 1;

        goto label4;

     label6:
        j = j + 1;

        goto label3;

     label7:
        if count <= 0 goto label8;

        virtualinvoke pointCounts.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>(count);

     label8:
        i = i + 1;

        goto label2;

     label9:
        $stack77 = virtualinvoke objectPoints.<java.nio.FloatBuffer: int position()>();

        $stack78 = $stack77 / 3;

        virtualinvoke objectPointsMat.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat cols(int)>($stack78);

        $stack80 = virtualinvoke imagePoints1.<java.nio.FloatBuffer: int position()>();

        $stack81 = $stack80 / 2;

        virtualinvoke imagePoints1Mat.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat cols(int)>($stack81);

        $stack83 = virtualinvoke imagePoints2.<java.nio.FloatBuffer: int position()>();

        $stack84 = $stack83 / 2;

        virtualinvoke imagePoints2Mat.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat cols(int)>($stack84);

        $stack86 = virtualinvoke pointCounts.<java.nio.IntBuffer: int position()>();

        virtualinvoke pointCountsMat.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat cols(int)>($stack86);

        $stack88 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat R> = $stack88;

        $stack90 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat R>;

        $stack89 = newarray (double)[9];

        $stack89[0] = 1.0;

        $stack89[1] = 0.0;

        $stack89[2] = 0.0;

        $stack89[3] = 0.0;

        $stack89[4] = 1.0;

        $stack89[5] = 0.0;

        $stack89[6] = 0.0;

        $stack89[7] = 0.0;

        $stack89[8] = 1.0;

        virtualinvoke $stack90.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack89);

        $stack92 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 1);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat T> = $stack92;

        $stack94 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat T>;

        $stack93 = newarray (double)[3];

        $stack93[0] = 0.0;

        $stack93[1] = 0.0;

        $stack93[2] = 0.0;

        virtualinvoke $stack94.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack93);

        $stack96 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat E> = $stack96;

        $stack97 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat E>;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) $stack97;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetZero(org.bytedeco.opencv.opencv_core.CvArr)>($r2);

        $stack98 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat F> = $stack98;

        $stack99 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat F>;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) $stack99;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetZero(org.bytedeco.opencv.opencv_core.CvArr)>($r3);

        $stack100 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat R> = $stack100;

        $stack101 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 1);

        dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat T> = $stack101;

        $stack102 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat E> = $stack102;

        $stack103 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat F> = $stack103;

        $r4 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack104 = specialinvoke $r4.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.Point3fVectorVector getObjectPoints(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(objectPointsMat, pointCountsMat);

        $r5 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack105 = specialinvoke $r5.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.Point2fVectorVector getImagePoints(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(imagePoints1Mat, pointCountsMat);

        $r6 = (org.bytedeco.javacv.GeometricCalibrator) this;

        $stack106 = specialinvoke $r6.<org.bytedeco.javacv.GeometricCalibrator: org.bytedeco.opencv.opencv_core.Point2fVectorVector getImagePoints(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(imagePoints2Mat, pointCountsMat);

        $stack107 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) $stack107;

        $stack108 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r7);

        $stack109 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) $stack109;

        $stack110 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r8);

        $stack111 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) $stack111;

        $stack112 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r9);

        $stack113 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) $stack113;

        $stack114 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r10);

        $u1 = new org.bytedeco.opencv.opencv_core.Size;

        $stack117 = d.<org.bytedeco.javacv.ProjectiveDevice: int imageWidth>;

        $stack116 = d.<org.bytedeco.javacv.ProjectiveDevice: int imageHeight>;

        specialinvoke $u1.<org.bytedeco.opencv.opencv_core.Size: void <init>(int,int)>($stack117, $stack116);

        $stack118 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat R>;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) $stack118;

        $stack119 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r11);

        $stack120 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat T>;

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) $stack120;

        $stack121 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r12);

        $stack122 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat E>;

        $r13 = (org.bytedeco.opencv.opencv_core.CvArr) $stack122;

        $stack123 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r13);

        $stack124 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat F>;

        $r14 = (org.bytedeco.opencv.opencv_core.CvArr) $stack124;

        $stack125 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.Mat cvarrToMat(org.bytedeco.opencv.opencv_core.CvArr)>($r14);

        $stack127 = dpsettings.<org.bytedeco.javacv.ProjectiveDevice$CalibrationSettings: int flags>;

        $u2 = new org.bytedeco.opencv.opencv_core.TermCriteria;

        specialinvoke $u2.<org.bytedeco.opencv.opencv_core.TermCriteria: void <init>(int,int,double)>(3, 100, 1.0E-6);

        staticinvoke <org.bytedeco.opencv.global.opencv_calib3d: double stereoCalibrate(org.bytedeco.opencv.opencv_core.Point3fVectorVector,org.bytedeco.opencv.opencv_core.Point2fVectorVector,org.bytedeco.opencv.opencv_core.Point2fVectorVector,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Size,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,org.bytedeco.opencv.opencv_core.Mat,int,org.bytedeco.opencv.opencv_core.TermCriteria)>($stack104, $stack105, $stack106, $stack108, $stack110, $stack112, $stack114, $u1, $stack119, $stack121, $stack123, $stack125, $stack127, $u2);

        d.<org.bytedeco.javacv.ProjectiveDevice: double avgEpipolarErr> = 0.0;

        d.<org.bytedeco.javacv.ProjectiveDevice: double maxEpipolarErr> = 0.0;

        $stack133 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack132 = d.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $stack131 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack130 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat distortionCoeffs>;

        $stack129 = dp.<org.bytedeco.javacv.ProjectiveDevice: org.bytedeco.opencv.opencv_core.CvMat F>;

        i#13 = staticinvoke <org.bytedeco.javacv.GeometricCalibrator: double[] computeStereoError(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(imagePoints1Mat, imagePoints2Mat, $stack133, $stack132, $stack131, $stack130, $stack129);

        $stack135 = i#13[0];

        dp.<org.bytedeco.javacv.ProjectiveDevice: double avgEpipolarErr> = $stack135;

        $stack136 = i#13[1];

        dp.<org.bytedeco.javacv.ProjectiveDevice: double maxEpipolarErr> = $stack136;

        return i#13;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/bytedeco/javacv/GeometricCalibrator;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.bytedeco.javacv.GeometricCalibrator: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
