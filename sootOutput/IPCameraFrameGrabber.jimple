public class IPCameraFrameGrabber extends org.bytedeco.javacv.FrameGrabber
{
    private static org.bytedeco.javacv.FrameGrabber$Exception loadingException;
    private final org.bytedeco.javacv.FrameConverter converter;
    private final java.net.URL url;
    private final int connectionTimeout;
    private final int readTimeout;
    private java.io.DataInputStream input;
    private byte[] pixelBuffer;
    private org.bytedeco.opencv.opencv_core.Mat decoded;

    public static void tryLoad() throws org.bytedeco.javacv.FrameGrabber$Exception
    {
        org.bytedeco.javacv.FrameGrabber$Exception $stack1, $stack3, $u1;
        java.lang.Throwable $stack4, $r0, $r1;
        java.lang.StringBuilder $stack7, $stack8, $u0;
        java.lang.String $stack9;

        $stack1 = <org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.javacv.FrameGrabber$Exception loadingException>;

        if $stack1 == null goto label1;

        $stack3 = <org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.javacv.FrameGrabber$Exception loadingException>;

        $r0 = (java.lang.Throwable) $stack3;

        throw $r0;

     label1:
        staticinvoke <org.bytedeco.javacpp.Loader: java.lang.String load(java.lang.Class)>(class "Lorg/bytedeco/opencv/global/opencv_highgui;");

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

        $u1 = new org.bytedeco.javacv.FrameGrabber$Exception;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(class "Lorg/bytedeco/javacv/IPCameraFrameGrabber;");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.bytedeco.javacv.FrameGrabber$Exception: void <init>(java.lang.String,java.lang.Throwable)>($stack9, $stack4);

        <org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.javacv.FrameGrabber$Exception loadingException> = $u1;

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void <init>(java.net.URL, int, int, java.util.concurrent.TimeUnit)
    {
        IPCameraFrameGrabber this;
        byte[] $stack6;
        java.net.URL url;
        java.util.concurrent.TimeUnit timeUnit, $stack8, $stack12;
        int startTimeout, $stack10, grabTimeout, $stack14;
        long $stack7, $stack9, $stack11, $stack13;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $u0;
        java.lang.IllegalArgumentException $u1;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.bytedeco.javacv.FrameConverter $r1;

        this := @this: IPCameraFrameGrabber;

        url := @parameter0: java.net.URL;

        startTimeout := @parameter1: int;

        grabTimeout := @parameter2: int;

        timeUnit := @parameter3: java.util.concurrent.TimeUnit;

        specialinvoke this.<org.bytedeco.javacv.FrameGrabber: void <init>()>();

        $u0 = new org.bytedeco.javacv.OpenCVFrameConverter$ToMat;

        specialinvoke $u0.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: void <init>()>();

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r1 = (org.bytedeco.javacv.FrameConverter) $u0;

        $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.javacv.FrameConverter converter> = $r1;

        $stack6 = newarray (byte)[1024];

        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] pixelBuffer> = $stack6;

        $r3 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r3.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.opencv.opencv_core.Mat decoded> = null;

        if url != null goto label1;

        $u1 = new java.lang.IllegalArgumentException;

        specialinvoke $u1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URL can not be null");

        throw $u1;

     label1:
        $r4 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r4.<org.bytedeco.javacv.IPCameraFrameGrabber: java.net.URL url> = url;

        if timeUnit == null goto label2;

        $stack8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $stack7 = (long) startTimeout;

        $stack9 = virtualinvoke $stack8.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack7, timeUnit);

        $stack10 = staticinvoke <org.bytedeco.javacv.IPCameraFrameGrabber: int toIntExact(long)>($stack9);

        $r5 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r5.<org.bytedeco.javacv.IPCameraFrameGrabber: int connectionTimeout> = $stack10;

        $stack12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $stack11 = (long) grabTimeout;

        $stack13 = virtualinvoke $stack12.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack11, timeUnit);

        $stack14 = staticinvoke <org.bytedeco.javacv.IPCameraFrameGrabber: int toIntExact(long)>($stack13);

        $r6 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r6.<org.bytedeco.javacv.IPCameraFrameGrabber: int readTimeout> = $stack14;

        goto label3;

     label2:
        $r7 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r7.<org.bytedeco.javacv.IPCameraFrameGrabber: int connectionTimeout> = -1;

        $r8 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r8.<org.bytedeco.javacv.IPCameraFrameGrabber: int readTimeout> = -1;

     label3:
        return;
    }

    public void <init>(java.lang.String, int, int, java.util.concurrent.TimeUnit) throws java.net.MalformedURLException
    {
        IPCameraFrameGrabber this;
        java.lang.String urlstr;
        int connectionTimeout, readTimeout;
        java.util.concurrent.TimeUnit timeUnit;
        java.net.URL $u0;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0;

        this := @this: IPCameraFrameGrabber;

        urlstr := @parameter0: java.lang.String;

        connectionTimeout := @parameter1: int;

        readTimeout := @parameter2: int;

        timeUnit := @parameter3: java.util.concurrent.TimeUnit;

        $u0 = new java.net.URL;

        specialinvoke $u0.<java.net.URL: void <init>(java.lang.String)>(urlstr);

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        specialinvoke $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: void <init>(java.net.URL,int,int,java.util.concurrent.TimeUnit)>($u0, connectionTimeout, readTimeout, timeUnit);

        return;
    }

    public void <init>(java.lang.String) throws java.net.MalformedURLException
    {
        IPCameraFrameGrabber this;
        java.lang.String urlstr;
        java.net.URL $u0;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0;

        this := @this: IPCameraFrameGrabber;

        urlstr := @parameter0: java.lang.String;

        $u0 = new java.net.URL;

        specialinvoke $u0.<java.net.URL: void <init>(java.lang.String)>(urlstr);

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        specialinvoke $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: void <init>(java.net.URL,int,int,java.util.concurrent.TimeUnit)>($u0, -1, -1, null);

        return;
    }

    public void start() throws org.bytedeco.javacv.FrameGrabber$Exception
    {
        IPCameraFrameGrabber this;
        java.net.URL $stack2;
        int $stack4, $stack5, $stack8, $stack11;
        java.io.InputStream $stack7;
        java.io.IOException $stack13;
        java.lang.String $stack15;
        java.net.URLConnection connection;
        java.io.DataInputStream $u0;
        org.bytedeco.javacv.FrameGrabber$Exception $u1;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r1, $r2, $r3, $r4, $r5;
        java.lang.Throwable $r6;

        this := @this: IPCameraFrameGrabber;

     label1:
        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack2 = $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: java.net.URL url>;

        connection = virtualinvoke $stack2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r1 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack4 = $r1.<org.bytedeco.javacv.IPCameraFrameGrabber: int connectionTimeout>;

        if $stack4 < 0 goto label2;

        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack11 = $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: int connectionTimeout>;

        virtualinvoke connection.<java.net.URLConnection: void setConnectTimeout(int)>($stack11);

     label2:
        $r3 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack5 = $r3.<org.bytedeco.javacv.IPCameraFrameGrabber: int readTimeout>;

        if $stack5 < 0 goto label3;

        $r4 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack8 = $r4.<org.bytedeco.javacv.IPCameraFrameGrabber: int readTimeout>;

        virtualinvoke connection.<java.net.URLConnection: void setReadTimeout(int)>($stack8);

     label3:
        $u0 = new java.io.DataInputStream;

        $stack7 = virtualinvoke connection.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $u0.<java.io.DataInputStream: void <init>(java.io.InputStream)>($stack7);

        $r5 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r5.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input> = $u0;

     label4:
        goto label6;

     label5:
        $stack13 := @caughtexception;

        $u1 = new org.bytedeco.javacv.FrameGrabber$Exception;

        $stack15 = virtualinvoke $stack13.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $u1.<org.bytedeco.javacv.FrameGrabber$Exception: void <init>(java.lang.String,java.lang.Throwable)>($stack15, $stack13);

        $r6 = (java.lang.Throwable) $u1;

        throw $r6;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public void stop() throws org.bytedeco.javacv.FrameGrabber$Exception
    {
        IPCameraFrameGrabber this;
        java.io.DataInputStream $stack3, $stack4;
        java.lang.Throwable $stack5, $r4;
        java.io.IOException $stack6;
        java.lang.String $stack8;
        org.bytedeco.javacv.FrameGrabber$Exception $u0;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r1, $r2, $r3, $r5, $r6;

        this := @this: IPCameraFrameGrabber;

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack3 = $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        if $stack3 == null goto label6;

     label1:
        $r1 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack4 = $r1.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        virtualinvoke $stack4.<java.io.DataInputStream: void close()>();

     label2:
        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input> = null;

        $r3 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        specialinvoke $r3.<org.bytedeco.javacv.IPCameraFrameGrabber: void releaseDecoded()>();

        goto label6;

     label3:
        $stack6 := @caughtexception;

        $u0 = new org.bytedeco.javacv.FrameGrabber$Exception;

        $stack8 = virtualinvoke $stack6.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $u0.<org.bytedeco.javacv.FrameGrabber$Exception: void <init>(java.lang.String,java.lang.Throwable)>($stack8, $stack6);

        $r4 = (java.lang.Throwable) $u0;

        throw $r4;

     label4:
        $stack5 := @caughtexception;

     label5:
        $r5 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r5.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input> = null;

        $r6 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        specialinvoke $r6.<org.bytedeco.javacv.IPCameraFrameGrabber: void releaseDecoded()>();

        throw $stack5;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public void trigger() throws org.bytedeco.javacv.FrameGrabber$Exception
    {
        IPCameraFrameGrabber this;

        this := @this: IPCameraFrameGrabber;

        return;
    }

    public org.bytedeco.javacv.Frame grab() throws org.bytedeco.javacv.FrameGrabber$Exception
    {
        IPCameraFrameGrabber this;
        int $stack7, $stack8;
        org.bytedeco.javacv.FrameConverter $stack9;
        org.bytedeco.opencv.opencv_core.Mat $stack10, $u1;
        org.bytedeco.javacv.Frame $stack11;
        java.io.IOException $stack12;
        java.lang.String $stack14;
        byte[] b;
        org.bytedeco.javacpp.BytePointer $u0;
        org.bytedeco.javacv.FrameGrabber$Exception $u2;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r2, $r3, $r4;
        org.bytedeco.javacpp.Pointer $r1;
        java.lang.Throwable $r5;

        this := @this: IPCameraFrameGrabber;

     label1:
        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        b = specialinvoke $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] readImage()>();

        $u1 = new org.bytedeco.opencv.opencv_core.Mat;

        $stack7 = lengthof b;

        $stack8 = <org.bytedeco.opencv.global.opencv_core: int CV_8UC1>;

        $u0 = new org.bytedeco.javacpp.BytePointer;

        specialinvoke $u0.<org.bytedeco.javacpp.BytePointer: void <init>(byte[])>(b);

        $r1 = (org.bytedeco.javacpp.Pointer) $u0;

        specialinvoke $u1.<org.bytedeco.opencv.opencv_core.Mat: void <init>(int,int,int,org.bytedeco.javacpp.Pointer)>(1, $stack7, $stack8, $r1);

        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        specialinvoke $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: void releaseDecoded()>();

        $r3 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack9 = $r3.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.javacv.FrameConverter converter>;

        $stack10 = staticinvoke <org.bytedeco.opencv.global.opencv_imgcodecs: org.bytedeco.opencv.opencv_core.Mat imdecode(org.bytedeco.opencv.opencv_core.Mat,int)>($u1, 1);

        $r4 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r4.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.opencv.opencv_core.Mat decoded> = $stack10;

        $stack11 = virtualinvoke $stack9.<org.bytedeco.javacv.FrameConverter: org.bytedeco.javacv.Frame convert(java.lang.Object)>($stack10);

     label2:
        return $stack11;

     label3:
        $stack12 := @caughtexception;

        $u2 = new org.bytedeco.javacv.FrameGrabber$Exception;

        $stack14 = virtualinvoke $stack12.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $u2.<org.bytedeco.javacv.FrameGrabber$Exception: void <init>(java.lang.String,java.lang.Throwable)>($stack14, $stack12);

        $r5 = (java.lang.Throwable) $u2;

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.awt.image.BufferedImage grabBufferedImage() throws java.io.IOException
    {
        IPCameraFrameGrabber this;
        byte[] $stack3;
        java.awt.image.BufferedImage bi;
        java.io.ByteArrayInputStream $u0;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0;

        this := @this: IPCameraFrameGrabber;

        $u0 = new java.io.ByteArrayInputStream;

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack3 = specialinvoke $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] readImage()>();

        specialinvoke $u0.<java.io.ByteArrayInputStream: void <init>(byte[])>($stack3);

        bi = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($u0);

        return bi;
    }

    private void releaseDecoded()
    {
        IPCameraFrameGrabber this;
        org.bytedeco.opencv.opencv_core.Mat $stack1, $stack2;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r1, $r2;

        this := @this: IPCameraFrameGrabber;

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack1 = $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.opencv.opencv_core.Mat decoded>;

        if $stack1 == null goto label1;

        $r1 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack2 = $r1.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.opencv.opencv_core.Mat decoded>;

        virtualinvoke $stack2.<org.bytedeco.opencv.opencv_core.Mat: void release()>();

        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.opencv.opencv_core.Mat decoded> = null;

     label1:
        return;
    }

    private byte[] readImage() throws java.io.IOException
    {
        IPCameraFrameGrabber this;
        java.lang.String $stack10, subheader, $stack14, $stack15;
        int c1, contentLength, $stack34, $stack42, $stack9, c, c0;
        byte[] $stack17, $stack27;
        java.io.DataInputStream $stack18, $stack19, $stack21, $stack23, $stack25, $stack33, $stack37, $stack41, $stack8;
        char $stack31, $stack35, $stack39, $stack43;
        java.lang.StringBuffer $u0;
        java.io.EOFException $u1;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: IPCameraFrameGrabber;

        $u0 = new java.lang.StringBuffer;

        specialinvoke $u0.<java.lang.StringBuffer: void <init>()>();

     label1:
        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack8 = $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        $stack9 = virtualinvoke $stack8.<java.io.DataInputStream: int read()>();

        if $stack9 == -1 goto label2;

        if $stack9 <= 0 goto label1;

        $stack31 = (char) $stack9;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack31);

        if $stack9 != 13 goto label1;

        $r1 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack33 = $r1.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        $stack34 = virtualinvoke $stack33.<java.io.DataInputStream: int read()>();

        $stack35 = (char) $stack34;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack35);

        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack37 = $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        c = virtualinvoke $stack37.<java.io.DataInputStream: int read()>();

        $stack39 = (char) c;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack39);

        if c != 13 goto label1;

        $r3 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack41 = $r3.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        $stack42 = virtualinvoke $stack41.<java.io.DataInputStream: int read()>();

        $stack43 = (char) $stack42;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack43);

        goto label2;

     label2:
        $stack10 = virtualinvoke $u0.<java.lang.StringBuffer: java.lang.String toString()>();

        subheader = virtualinvoke $stack10.<java.lang.String: java.lang.String toLowerCase()>();

        c0 = virtualinvoke subheader.<java.lang.String: int indexOf(java.lang.String)>("content-length: ");

        c1 = virtualinvoke subheader.<java.lang.String: int indexOf(int,int)>(13, c0);

        if c0 >= 0 goto label3;

        $u1 = new java.io.EOFException;

        specialinvoke $u1.<java.io.EOFException: void <init>(java.lang.String)>("The camera stream ended unexpectedly");

        throw $u1;

     label3:
        c0 = c0 + 16;

        $stack14 = virtualinvoke subheader.<java.lang.String: java.lang.String substring(int,int)>(c0, c1);

        $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String trim()>();

        contentLength = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack15);

        $r4 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        specialinvoke $r4.<org.bytedeco.javacv.IPCameraFrameGrabber: void ensureBufferCapacity(int)>(contentLength);

        $r5 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack18 = $r5.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        $r6 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack17 = $r6.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] pixelBuffer>;

        virtualinvoke $stack18.<java.io.DataInputStream: void readFully(byte[],int,int)>($stack17, 0, contentLength);

        $r7 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack19 = $r7.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        virtualinvoke $stack19.<java.io.DataInputStream: int read()>();

        $r8 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack21 = $r8.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        virtualinvoke $stack21.<java.io.DataInputStream: int read()>();

        $r9 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack23 = $r9.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        virtualinvoke $stack23.<java.io.DataInputStream: int read()>();

        $r10 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack25 = $r10.<org.bytedeco.javacv.IPCameraFrameGrabber: java.io.DataInputStream input>;

        virtualinvoke $stack25.<java.io.DataInputStream: int read()>();

        $r11 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack27 = $r11.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] pixelBuffer>;

        return $stack27;
    }

    public void release() throws org.bytedeco.javacv.FrameGrabber$Exception
    {
        IPCameraFrameGrabber this;

        this := @this: IPCameraFrameGrabber;

        return;
    }

    private void ensureBufferCapacity(int)
    {
        IPCameraFrameGrabber this;
        byte[] $stack3, $stack4, $stack6;
        int desiredCapacity, $stack5, capacity;
        org.bytedeco.javacv.IPCameraFrameGrabber $r0, $r1, $r2;

        this := @this: IPCameraFrameGrabber;

        desiredCapacity := @parameter0: int;

        $r0 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack3 = $r0.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] pixelBuffer>;

        capacity = lengthof $stack3;

     label1:
        if capacity >= desiredCapacity goto label2;

        capacity = capacity * 2;

        goto label1;

     label2:
        $r1 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $stack4 = $r1.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] pixelBuffer>;

        $stack5 = lengthof $stack4;

        if capacity <= $stack5 goto label3;

        $stack6 = newarray (byte)[capacity];

        $r2 = (org.bytedeco.javacv.IPCameraFrameGrabber) this;

        $r2.<org.bytedeco.javacv.IPCameraFrameGrabber: byte[] pixelBuffer> = $stack6;

     label3:
        return;
    }

    private static int toIntExact(long)
    {
        long value, $stack3;
        int $stack2, $stack5;
        byte $stack4;
        java.lang.ArithmeticException $stack6;

        value := @parameter0: long;

        $stack2 = (int) value;

        $stack3 = (long) $stack2;

        $stack4 = $stack3 cmp value;

        if $stack4 == 0 goto label1;

        $stack6 = new java.lang.ArithmeticException;

        specialinvoke $stack6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $stack6;

     label1:
        $stack5 = (int) value;

        return $stack5;
    }

    static void <clinit>()
    {
        <org.bytedeco.javacv.IPCameraFrameGrabber: org.bytedeco.javacv.FrameGrabber$Exception loadingException> = null;

        return;
    }
}
