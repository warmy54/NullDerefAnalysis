public class Icc extends org.ooc.frontend.compilers.Gcc
{

    public void <init>()
    {
        Icc this;

        this := @this: Icc;

        specialinvoke this.<org.ooc.frontend.compilers.Gcc: void <init>(java.lang.String)>("icc");

        return;
    }

    public void <init>(java.lang.String)
    {
        Icc this;
        java.lang.String executableName;

        this := @this: Icc;

        executableName := @parameter0: java.lang.String;

        specialinvoke this.<org.ooc.frontend.compilers.Gcc: void <init>(java.lang.String)>(executableName);

        return;
    }

    public void reset()
    {
        Icc this;
        java.util.List $stack1, $stack3;
        java.lang.String $stack2;
        org.ooc.frontend.compilers.Icc $r0, $r1, $r2;

        this := @this: Icc;

        $r0 = (org.ooc.frontend.compilers.Icc) this;

        $stack1 = $r0.<org.ooc.frontend.compilers.Icc: java.util.List command>;

        interfaceinvoke $stack1.<java.util.List: void clear()>();

        $r1 = (org.ooc.frontend.compilers.Icc) this;

        $stack3 = $r1.<org.ooc.frontend.compilers.Icc: java.util.List command>;

        $r2 = (org.ooc.frontend.compilers.Icc) this;

        $stack2 = $r2.<org.ooc.frontend.compilers.Icc: java.lang.String executablePath>;

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>($stack2);

        return;
    }

    public org.ooc.frontend.compilers.Icc clone()
    {
        org.ooc.frontend.compilers.Icc $stack1;
        Icc this;

        this := @this: Icc;

        $stack1 = new org.ooc.frontend.compilers.Icc;

        specialinvoke $stack1.<org.ooc.frontend.compilers.Icc: void <init>()>();

        return $stack1;
    }

    public volatile org.ooc.frontend.compilers.Gcc clone()
    {
        Icc this;
        org.ooc.frontend.compilers.Icc $stack1, $r0;
        org.ooc.frontend.compilers.Gcc $r1;

        this := @this: Icc;

        $r0 = (org.ooc.frontend.compilers.Icc) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.compilers.Icc: org.ooc.frontend.compilers.Icc clone()>();

        $r1 = (org.ooc.frontend.compilers.Gcc) $stack1;

        return $r1;
    }

    public volatile org.ooc.frontend.compilers.BaseCompiler clone()
    {
        Icc this;
        org.ooc.frontend.compilers.Icc $stack1, $r0;
        org.ooc.frontend.compilers.BaseCompiler $r1;

        this := @this: Icc;

        $r0 = (org.ooc.frontend.compilers.Icc) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.compilers.Icc: org.ooc.frontend.compilers.Icc clone()>();

        $r1 = (org.ooc.frontend.compilers.BaseCompiler) $stack1;

        return $r1;
    }

    public volatile org.ooc.frontend.compilers.AbstractCompiler clone()
    {
        Icc this;
        org.ooc.frontend.compilers.Icc $stack1, $r0;
        org.ooc.frontend.compilers.AbstractCompiler $r1;

        this := @this: Icc;

        $r0 = (org.ooc.frontend.compilers.Icc) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.compilers.Icc: org.ooc.frontend.compilers.Icc clone()>();

        $r1 = (org.ooc.frontend.compilers.AbstractCompiler) $stack1;

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        Icc this;
        org.ooc.frontend.compilers.Icc $stack1, $r0;

        this := @this: Icc;

        $r0 = (org.ooc.frontend.compilers.Icc) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.compilers.Icc: org.ooc.frontend.compilers.Icc clone()>();

        return $stack1;
    }
}
