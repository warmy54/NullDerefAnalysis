class IgnoreLineSeparatorsTest extends java.lang.Object
{

    void <init>()
    {
        IgnoreLineSeparatorsTest this;

        this := @this: IgnoreLineSeparatorsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void ignoringLineSeparatorsShouldNotSort() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        IgnoreLineSeparatorsTest this;

        this := @this: IgnoreLineSeparatorsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil ignoreLineSeparators(boolean)>(1);

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testNoSorting(java.lang.String)>("/ignore_line_separators_input.xml");

        return;
    }

    final void doNotIgnoreLineSeparatorsShouldSort() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        IgnoreLineSeparatorsTest this;

        this := @this: IgnoreLineSeparatorsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil ignoreLineSeparators(boolean)>(0);

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/ignore_line_separators_input.xml", "/ignore_line_separators_output.xml");

        return;
    }
}
