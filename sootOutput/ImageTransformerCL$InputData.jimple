public class ImageTransformerCL$InputData extends java.lang.Object
{
    public int pyramidLevel;
    public int roiX;
    public int roiY;
    public int roiWidth;
    public int roiHeight;
    public double zeroThreshold;
    public double outlierThreshold;
    com.jogamp.opencl.CLBuffer buffer;
    boolean autoWrite;

    public void <init>()
    {
        ImageTransformerCL$InputData this;
        org.bytedeco.javacv.ImageTransformerCL$InputData $r0;

        this := @this: ImageTransformerCL$InputData;

        $r0 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        specialinvoke $r0.<org.bytedeco.javacv.ImageTransformerCL$InputData: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        ImageTransformerCL$InputData this;
        boolean autoWrite;
        org.bytedeco.javacv.ImageTransformerCL$InputData $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: ImageTransformerCL$InputData;

        autoWrite := @parameter0: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r0.<org.bytedeco.javacv.ImageTransformerCL$InputData: int pyramidLevel> = 0;

        $r1 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r1.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiX> = 0;

        $r2 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r2.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiY> = 0;

        $r3 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r3.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiWidth> = 0;

        $r4 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r4.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiHeight> = 0;

        $r5 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r5.<org.bytedeco.javacv.ImageTransformerCL$InputData: double zeroThreshold> = 0.0;

        $r6 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r6.<org.bytedeco.javacv.ImageTransformerCL$InputData: double outlierThreshold> = 0.0;

        $r7 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r7.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer> = null;

        $r8 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r8.<org.bytedeco.javacv.ImageTransformerCL$InputData: boolean autoWrite> = 1;

        $r9 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r9.<org.bytedeco.javacv.ImageTransformerCL$InputData: boolean autoWrite> = autoWrite;

        return;
    }

    com.jogamp.opencl.CLBuffer getBuffer(org.bytedeco.javacv.JavaCVCL)
    {
        ImageTransformerCL$InputData this;
        com.jogamp.opencl.CLBuffer $stack3, $stack4, $stack8, $stack10, $stack17, $stack9;
        org.bytedeco.javacv.JavaCVCL context;
        com.jogamp.opencl.CLContext $stack5;
        com.jogamp.opencl.CLMemory$Mem[] $stack6;
        com.jogamp.opencl.CLMemory$Mem $stack7;
        long $stack18, $stack19;
        byte $stack20;
        org.bytedeco.javacv.ImageTransformerCL$InputData $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ImageTransformerCL$InputData;

        context := @parameter0: org.bytedeco.javacv.JavaCVCL;

        $r0 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack3 = $r0.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        if $stack3 == null goto label1;

        $r1 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack17 = $r1.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        $stack18 = virtualinvoke $stack17.<com.jogamp.opencl.CLBuffer: long getCLSize()>();

        $stack19 = (long) 16;

        $stack20 = $stack18 cmp $stack19;

        if $stack20 >= 0 goto label3;

     label1:
        $r2 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack4 = $r2.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        if $stack4 == null goto label2;

        $r3 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack10 = $r3.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        virtualinvoke $stack10.<com.jogamp.opencl.CLBuffer: void release()>();

     label2:
        $stack5 = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack6 = newarray (com.jogamp.opencl.CLMemory$Mem)[1];

        $stack7 = <com.jogamp.opencl.CLMemory$Mem: com.jogamp.opencl.CLMemory$Mem READ_ONLY>;

        $stack6[0] = $stack7;

        $stack8 = virtualinvoke $stack5.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLBuffer createByteBuffer(int,com.jogamp.opencl.CLMemory$Mem[])>(16, $stack6);

        $r4 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $r4.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer> = $stack8;

     label3:
        $r5 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack9 = $r5.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        return $stack9;
    }

    public com.jogamp.opencl.CLBuffer writeBuffer(org.bytedeco.javacv.JavaCVCL)
    {
        ImageTransformerCL$InputData this;
        org.bytedeco.javacv.JavaCVCL context;
        com.jogamp.opencl.CLBuffer $stack4, $stack19, $stack20;
        java.nio.Buffer $stack5;
        java.nio.ByteBuffer $stack6, byteBuffer, $stack9, $stack11, $stack14, $stack17;
        int $stack8, $stack10;
        double $stack12, $stack15;
        float $stack13, $stack16;
        org.bytedeco.javacv.ImageTransformerCL$InputData $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: ImageTransformerCL$InputData;

        context := @parameter0: org.bytedeco.javacv.JavaCVCL;

        $r0 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        virtualinvoke $r0.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer getBuffer(org.bytedeco.javacv.JavaCVCL)>(context);

        $r1 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack4 = $r1.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        $stack5 = virtualinvoke $stack4.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack6 = (java.nio.ByteBuffer) $stack5;

        byteBuffer = virtualinvoke $stack6.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();

        $r2 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack8 = $r2.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiY>;

        $stack9 = virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack8);

        $r3 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack10 = $r3.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiHeight>;

        $stack11 = virtualinvoke $stack9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack10);

        $r4 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack12 = $r4.<org.bytedeco.javacv.ImageTransformerCL$InputData: double zeroThreshold>;

        $stack13 = (float) $stack12;

        $stack14 = virtualinvoke $stack11.<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>($stack13);

        $r5 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack15 = $r5.<org.bytedeco.javacv.ImageTransformerCL$InputData: double outlierThreshold>;

        $stack16 = (float) $stack15;

        $stack17 = virtualinvoke $stack14.<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>($stack16);

        virtualinvoke $stack17.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();

        $r6 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack19 = $r6.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: void writeBuffer(com.jogamp.opencl.CLBuffer,boolean)>($stack19, 0);

        $r7 = (org.bytedeco.javacv.ImageTransformerCL$InputData) this;

        $stack20 = $r7.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer buffer>;

        return $stack20;
    }
}
