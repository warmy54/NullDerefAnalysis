class IndentationTest extends java.lang.Object
{

    void <init>()
    {
        IndentationTest this;

        this := @this: IndentationTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void differentIndentsShouldWork(int) throws java.lang.Exception
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6;
        int indent;
        java.lang.String expectedFile;
        sortpom.util.SortPomImplUtil $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;
        IndentationTest this;

        this := @this: IndentationTest;

        indent := @parameter0: int;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/SortModules_expectedIndent");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(indent);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        expectedFile = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack9 = virtualinvoke $stack8.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortProperties()>();

        $stack10 = virtualinvoke $stack9.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        $stack11 = virtualinvoke $stack10.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortModules()>();

        $stack12 = virtualinvoke $stack11.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack13 = virtualinvoke $stack12.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack14 = virtualinvoke $stack13.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(indent);

        virtualinvoke $stack14.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortModules_input.xml", expectedFile);

        return;
    }

    final void indentSchemaLocationShouldBeIndentTimesTwoPlusOne(int) throws java.lang.Exception
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6;
        int indent;
        java.lang.String expectedFile;
        sortpom.util.SortPomImplUtil $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15;
        IndentationTest this;

        this := @this: IndentationTest;

        indent := @parameter0: int;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/SortModules_expectedSchemaIndent");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(indent);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        expectedFile = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack9 = virtualinvoke $stack8.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortProperties()>();

        $stack10 = virtualinvoke $stack9.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        $stack11 = virtualinvoke $stack10.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortModules()>();

        $stack12 = virtualinvoke $stack11.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack13 = virtualinvoke $stack12.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack14 = virtualinvoke $stack13.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(indent);

        $stack15 = virtualinvoke $stack14.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil indentSchemaLocation()>();

        virtualinvoke $stack15.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortModules_input.xml", expectedFile);

        return;
    }

    void indentSchemaLocationShouldAddNewlineAndIndentation(int)
    {
        sortpom.XmlOutputGenerator $stack6;
        sortpom.parameter.PluginParameters$Builder $stack7, $stack8, $stack9, $stack10;
        int indent;
        sortpom.parameter.PluginParameters $stack11;
        org.jdom.Document $stack12;
        java.lang.String actual, indentChars, $stack28;
        IndentationTest this;
        java.lang.StringBuilder $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27;

        this := @this: IndentationTest;

        indent := @parameter0: int;

        $stack6 = new sortpom.XmlOutputGenerator;

        specialinvoke $stack6.<sortpom.XmlOutputGenerator: void <init>()>();

        $stack7 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack8 = virtualinvoke $stack7.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\n", 1, 1, 0);

        $stack10 = virtualinvoke $stack9.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(indent, 0, 1);

        $stack11 = virtualinvoke $stack10.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        virtualinvoke $stack6.<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>($stack11);

        $stack12 = staticinvoke <sortpom.sort.XmlFragment: org.jdom.Document createXmlProjectFragment()>();

        actual = virtualinvoke $stack6.<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>($stack12);

        indentChars = "";

        lookupswitch(indent)
        {
            case -1: goto label3;
            case 1: goto label1;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        indentChars = " ";

        goto label4;

     label2:
        indentChars = "    ";

        goto label4;

     label3:
        indentChars = "\t";

     label4:
        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indentChars);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indentChars);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">");

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indentChars);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<Gurka xmlns=\"\"></Gurka>");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</project>");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack28, actual);

        return;
    }

    void otherAttributeShouldNotBeIndented()
    {
        sortpom.XmlOutputGenerator $stack6;
        sortpom.parameter.PluginParameters$Builder $stack7, $stack8, $stack9, $stack10;
        sortpom.parameter.PluginParameters $stack11;
        org.jdom.Document xmlProjectFragment;
        org.jdom.Element $stack13, $stack14;
        java.lang.String actual, $stack31;
        java.lang.StringBuilder $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30;
        IndentationTest this;

        this := @this: IndentationTest;

        $stack6 = new sortpom.XmlOutputGenerator;

        specialinvoke $stack6.<sortpom.XmlOutputGenerator: void <init>()>();

        $stack7 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack8 = virtualinvoke $stack7.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\n", 1, 1, 0);

        $stack10 = virtualinvoke $stack9.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(2, 0, 1);

        $stack11 = virtualinvoke $stack10.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        virtualinvoke $stack6.<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>($stack11);

        xmlProjectFragment = staticinvoke <sortpom.sort.XmlFragment: org.jdom.Document createXmlProjectFragment()>();

        $stack13 = virtualinvoke xmlProjectFragment.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $stack14 = virtualinvoke $stack13.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Gurka");

        virtualinvoke $stack14.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("key", "value");

        actual = virtualinvoke $stack6.<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>(xmlProjectFragment);

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<Gurka xmlns=\"\" key=\"value\"></Gurka>");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</project>");

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, actual);

        return;
    }
}
