public class InstallerTest extends java.lang.Object
{
    public java.nio.file.Path temporaryFolder;
    private org.apache.maven.wrapper.Installer install;
    private java.nio.file.Path distributionDir;
    private java.nio.file.Path zipStore;
    private java.nio.file.Path mavenHomeDir;
    private java.nio.file.Path zipDestination;
    private org.apache.maven.wrapper.WrapperConfiguration configuration;
    private org.apache.maven.wrapper.Downloader download;
    private org.apache.maven.wrapper.PathAssembler pathAssembler;
    private org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution;

    public void <init>()
    {
        InstallerTest this;
        org.apache.maven.wrapper.WrapperConfiguration $u0;
        org.apache.maven.wrapper.InstallerTest $r0;

        this := @this: InstallerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.wrapper.WrapperConfiguration;

        specialinvoke $u0.<org.apache.maven.wrapper.WrapperConfiguration: void <init>()>();

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $r0.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration> = $u0;

        return;
    }

    public void setup() throws java.lang.Exception
    {
        InstallerTest this;
        org.apache.maven.wrapper.WrapperConfiguration $stack1, $stack2, $stack3, $stack4, $stack6, $stack7, $stack8, $stack39;
        java.nio.file.Path $stack9, $stack10, $stack12, $stack14, $stack15, $stack16, $stack17, $stack19, $stack21, $stack22, $stack30, $stack32, $stack35, $stack37;
        java.nio.file.attribute.FileAttribute[] $stack11, $stack18;
        java.lang.Object $stack23, $stack25, $stack27;
        org.apache.maven.wrapper.Downloader $stack24, $stack47;
        org.apache.maven.wrapper.PathAssembler $stack26, $stack40, $stack46;
        org.apache.maven.wrapper.PathAssembler$LocalDistribution $stack28, $stack29, $stack34, $stack41, $stack43;
        org.mockito.stubbing.OngoingStubbing $stack31, $stack36, $stack42;
        java.net.URI $u0;
        org.apache.maven.wrapper.Installer $u1;
        org.apache.maven.wrapper.InstallerTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;

        this := @this: InstallerTest;

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack1 = $r0.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack1.<org.apache.maven.wrapper.WrapperConfiguration: void setZipBase(java.lang.String)>("PROJECT");

        $r1 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack2 = $r1.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack2.<org.apache.maven.wrapper.WrapperConfiguration: void setZipPath(java.lang.String)>("someZipPath");

        $r2 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack3 = $r2.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack3.<org.apache.maven.wrapper.WrapperConfiguration: void setDistributionBase(java.lang.String)>("MAVEN_USER_HOME");

        $r3 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack4 = $r3.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack4.<org.apache.maven.wrapper.WrapperConfiguration: void setDistributionPath(java.lang.String)>("someDistPath");

        $r4 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack6 = $r4.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        $u0 = new java.net.URI;

        specialinvoke $u0.<java.net.URI: void <init>(java.lang.String)>("http://server/maven-0.9.zip");

        virtualinvoke $stack6.<org.apache.maven.wrapper.WrapperConfiguration: void setDistribution(java.net.URI)>($u0);

        $r5 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack7 = $r5.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack7.<org.apache.maven.wrapper.WrapperConfiguration: void setAlwaysDownload(boolean)>(0);

        $r6 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack8 = $r6.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack8.<org.apache.maven.wrapper.WrapperConfiguration: void setAlwaysUnpack(boolean)>(0);

        $r7 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack9 = $r7.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path temporaryFolder>;

        $stack10 = interfaceinvoke $stack9.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("someDistPath");

        $r8 = (org.apache.maven.wrapper.InstallerTest) this;

        $r8.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir> = $stack10;

        $r9 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack12 = $r9.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        $stack11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack12, $stack11);

        $r10 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack14 = $r10.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        $stack15 = interfaceinvoke $stack14.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("maven-0.9");

        $r11 = (org.apache.maven.wrapper.InstallerTest) this;

        $r11.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir> = $stack15;

        $r12 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack16 = $r12.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path temporaryFolder>;

        $stack17 = interfaceinvoke $stack16.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("zips");

        $r13 = (org.apache.maven.wrapper.InstallerTest) this;

        $r13.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipStore> = $stack17;

        $r14 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack19 = $r14.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipStore>;

        $stack18 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack19, $stack18);

        $r15 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack21 = $r15.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipStore>;

        $stack22 = interfaceinvoke $stack21.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("maven-0.9.zip");

        $r16 = (org.apache.maven.wrapper.InstallerTest) this;

        $r16.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination> = $stack22;

        $stack23 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/wrapper/Downloader;");

        $stack24 = (org.apache.maven.wrapper.Downloader) $stack23;

        $r17 = (org.apache.maven.wrapper.InstallerTest) this;

        $r17.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Downloader download> = $stack24;

        $stack25 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/wrapper/PathAssembler;");

        $stack26 = (org.apache.maven.wrapper.PathAssembler) $stack25;

        $r18 = (org.apache.maven.wrapper.InstallerTest) this;

        $r18.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler> = $stack26;

        $stack27 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/wrapper/PathAssembler$LocalDistribution;");

        $stack28 = (org.apache.maven.wrapper.PathAssembler$LocalDistribution) $stack27;

        $r19 = (org.apache.maven.wrapper.InstallerTest) this;

        $r19.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution> = $stack28;

        $r20 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack29 = $r20.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack30 = virtualinvoke $stack29.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getZipFile()>();

        $stack31 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack30);

        $r21 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack32 = $r21.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        interfaceinvoke $stack31.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack32);

        $r22 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack34 = $r22.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack35 = virtualinvoke $stack34.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getDistributionDir()>();

        $stack36 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack35);

        $r23 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack37 = $r23.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        interfaceinvoke $stack36.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack37);

        $r24 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack40 = $r24.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler>;

        $r25 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack39 = $r25.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        $stack41 = virtualinvoke $stack40.<org.apache.maven.wrapper.PathAssembler: org.apache.maven.wrapper.PathAssembler$LocalDistribution getDistribution(org.apache.maven.wrapper.WrapperConfiguration)>($stack39);

        $stack42 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack41);

        $r26 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack43 = $r26.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        interfaceinvoke $stack42.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack43);

        $u1 = new org.apache.maven.wrapper.Installer;

        $r27 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack47 = $r27.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Downloader download>;

        $r28 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack46 = $r28.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler>;

        specialinvoke $u1.<org.apache.maven.wrapper.Installer: void <init>(org.apache.maven.wrapper.Downloader,org.apache.maven.wrapper.PathAssembler)>($stack47, $stack46);

        $r29 = (org.apache.maven.wrapper.InstallerTest) this;

        $r29.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Installer install> = $u1;

        return;
    }

    private void createTestZip(java.nio.file.Path) throws java.lang.Exception
    {
        java.nio.file.Path zipDestination, $stack4, $stack7, explodedZipDir, mavenScript, $stack10;
        java.nio.file.attribute.FileAttribute[] $stack5, $stack11;
        InstallerTest this;
        java.lang.String[] $stack13;
        java.util.List $stack14;
        java.nio.file.OpenOption[] $stack15;
        org.apache.maven.wrapper.InstallerTest $r0, $r1;

        this := @this: InstallerTest;

        zipDestination := @parameter0: java.nio.file.Path;

        $stack4 = interfaceinvoke zipDestination.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $stack5 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack4, $stack5);

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack7 = $r0.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path temporaryFolder>;

        explodedZipDir = interfaceinvoke $stack7.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("explodedZip");

        mavenScript = interfaceinvoke explodedZipDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("maven-0.9/bin/mvn");

        $stack10 = interfaceinvoke mavenScript.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $stack11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack10, $stack11);

        $stack13 = newarray (java.lang.String)[1];

        $stack13[0] = "something";

        $stack14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack13);

        $stack15 = newarray (java.nio.file.OpenOption)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.file.OpenOption[])>(mavenScript, $stack14, $stack15);

        $r1 = (org.apache.maven.wrapper.InstallerTest) this;

        virtualinvoke $r1.<org.apache.maven.wrapper.InstallerTest: void zipTo(java.nio.file.Path,java.nio.file.Path)>(explodedZipDir, zipDestination);

        return;
    }

    public void testCreateDist() throws java.lang.Exception
    {
        InstallerTest this;
        org.apache.maven.wrapper.WrapperConfiguration $stack2, $stack14;
        org.apache.maven.wrapper.Installer $stack3;
        java.nio.file.Path homeDir, $stack5, $stack8, $stack12, $stack19, $stack20, $stack22, $stack23;
        java.nio.file.LinkOption[] $stack6, $stack9, $stack11;
        boolean $stack7, $stack10, $stack13;
        org.apache.maven.wrapper.PathAssembler $stack15;
        org.apache.maven.wrapper.PathAssembler$LocalDistribution $stack16, $stack17, $stack18, $stack21;
        org.apache.maven.wrapper.InstallerTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: InstallerTest;

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack3 = $r0.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Installer install>;

        $r1 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack2 = $r1.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        homeDir = virtualinvoke $stack3.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack2);

        $r2 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack5 = $r2.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, homeDir);

        $stack6 = newarray (java.nio.file.LinkOption)[0];

        $stack7 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(homeDir, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = interfaceinvoke homeDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("bin/mvn");

        $stack9 = newarray (java.nio.file.LinkOption)[0];

        $stack10 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack8, $stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $r3 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack12 = $r3.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $stack11 = newarray (java.nio.file.LinkOption)[0];

        $stack13 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack12, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $r4 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack16 = $r4.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $r5 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack15 = $r5.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler>;

        $r6 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack14 = $r6.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        $stack17 = virtualinvoke $stack15.<org.apache.maven.wrapper.PathAssembler: org.apache.maven.wrapper.PathAssembler$LocalDistribution getDistribution(org.apache.maven.wrapper.WrapperConfiguration)>($stack14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack17);

        $r7 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack19 = $r7.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        $r8 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack18 = $r8.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack20 = virtualinvoke $stack18.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getDistributionDir()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        $r9 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack22 = $r9.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $r10 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack21 = $r10.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack23 = virtualinvoke $stack21.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getZipFile()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack22, $stack23);

        return;
    }

    public void testCreateDistWithExistingDistribution() throws java.lang.Exception
    {
        InstallerTest this;
        java.nio.file.attribute.FileAttribute[] $stack3, $stack6, $stack11;
        java.nio.file.Path $stack4, $stack7, $stack9, someFile, homeDir, $stack16, $stack18, $stack20, $stack24, $stack31, $stack32, $stack34, $stack35;
        org.apache.maven.wrapper.WrapperConfiguration $stack13, $stack26;
        org.apache.maven.wrapper.Installer $stack14;
        java.nio.file.LinkOption[] $stack17, $stack21, $stack23;
        boolean $stack19, $stack22, $stack25;
        org.apache.maven.wrapper.PathAssembler $stack27;
        org.apache.maven.wrapper.PathAssembler$LocalDistribution $stack28, $stack29, $stack30, $stack33;
        org.apache.maven.wrapper.InstallerTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        this := @this: InstallerTest;

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack4 = $r0.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $stack3 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack4, $stack3);

        $r1 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack7 = $r1.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack6 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack7, $stack6);

        $r2 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack9 = $r2.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        someFile = interfaceinvoke $stack9.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("some-file");

        $stack11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(someFile, $stack11);

        $r3 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack14 = $r3.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Installer install>;

        $r4 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack13 = $r4.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        homeDir = virtualinvoke $stack14.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack13);

        $r5 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack16 = $r5.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, homeDir);

        $r6 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack18 = $r6.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack17 = newarray (java.nio.file.LinkOption)[0];

        $stack19 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($stack18, $stack17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        $stack20 = interfaceinvoke homeDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("some-file");

        $stack21 = newarray (java.nio.file.LinkOption)[0];

        $stack22 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack20, $stack21);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $r7 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack24 = $r7.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $stack23 = newarray (java.nio.file.LinkOption)[0];

        $stack25 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $r8 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack28 = $r8.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $r9 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack27 = $r9.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler>;

        $r10 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack26 = $r10.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        $stack29 = virtualinvoke $stack27.<org.apache.maven.wrapper.PathAssembler: org.apache.maven.wrapper.PathAssembler$LocalDistribution getDistribution(org.apache.maven.wrapper.WrapperConfiguration)>($stack26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack28, $stack29);

        $r11 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack31 = $r11.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        $r12 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack30 = $r12.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack32 = virtualinvoke $stack30.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getDistributionDir()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack32);

        $r13 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack34 = $r13.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $r14 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack33 = $r14.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack35 = virtualinvoke $stack33.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getZipFile()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack35);

        return;
    }

    public void testCreateDistWithExistingDistAndZipAndAlwaysUnpackTrue() throws java.lang.Exception
    {
        InstallerTest this;
        java.nio.file.Path $stack3, $stack5, $stack7, $stack8, $stack10, homeDir, $stack17, $stack19, $stack21, $stack25, $stack32, $stack33, $stack35, $stack36;
        java.nio.file.attribute.FileAttribute[] $stack4, $stack11;
        java.io.File garbage;
        org.apache.maven.wrapper.WrapperConfiguration $stack13, $stack14, $stack27;
        org.apache.maven.wrapper.Installer $stack15;
        java.nio.file.LinkOption[] $stack18, $stack22, $stack24;
        boolean $stack20, $stack23, $stack26;
        org.apache.maven.wrapper.PathAssembler $stack28;
        org.apache.maven.wrapper.PathAssembler$LocalDistribution $stack29, $stack30, $stack31, $stack34;
        org.apache.maven.wrapper.InstallerTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        this := @this: InstallerTest;

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack3 = $r0.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $r1 = (org.apache.maven.wrapper.InstallerTest) this;

        specialinvoke $r1.<org.apache.maven.wrapper.InstallerTest: void createTestZip(java.nio.file.Path)>($stack3);

        $r2 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack5 = $r2.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack4 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack5, $stack4);

        $r3 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack7 = $r3.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack8 = interfaceinvoke $stack7.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("garbage");

        garbage = interfaceinvoke $stack8.<java.nio.file.Path: java.io.File toFile()>();

        $stack10 = virtualinvoke garbage.<java.io.File: java.nio.file.Path toPath()>();

        $stack11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack10, $stack11);

        $r4 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack13 = $r4.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack13.<org.apache.maven.wrapper.WrapperConfiguration: void setAlwaysUnpack(boolean)>(1);

        $r5 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack15 = $r5.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Installer install>;

        $r6 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack14 = $r6.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        homeDir = virtualinvoke $stack15.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack14);

        $r7 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack17 = $r7.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, homeDir);

        $r8 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack19 = $r8.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack18 = newarray (java.nio.file.LinkOption)[0];

        $stack20 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($stack19, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = interfaceinvoke homeDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("garbage");

        $stack22 = newarray (java.nio.file.LinkOption)[0];

        $stack23 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack21, $stack22);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack23);

        $r9 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack25 = $r9.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $stack24 = newarray (java.nio.file.LinkOption)[0];

        $stack26 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack25, $stack24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $r10 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack29 = $r10.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $r11 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack28 = $r11.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler>;

        $r12 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack27 = $r12.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        $stack30 = virtualinvoke $stack28.<org.apache.maven.wrapper.PathAssembler: org.apache.maven.wrapper.PathAssembler$LocalDistribution getDistribution(org.apache.maven.wrapper.WrapperConfiguration)>($stack27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack29, $stack30);

        $r13 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack32 = $r13.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        $r14 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack31 = $r14.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack33 = virtualinvoke $stack31.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getDistributionDir()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack32, $stack33);

        $r15 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack35 = $r15.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $r16 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack34 = $r16.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack36 = virtualinvoke $stack34.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getZipFile()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack35, $stack36);

        return;
    }

    public void testCreateDistWithExistingZipAndDistAndAlwaysDownloadTrue() throws java.lang.Exception
    {
        InstallerTest this;
        java.nio.file.Path $stack3, $stack5, $stack7, $stack8, $stack10, homeDir, $stack17, $stack19, $stack21, $stack24, $stack28, $stack35, $stack36, $stack38, $stack39;
        java.nio.file.attribute.FileAttribute[] $stack4, $stack11;
        java.io.File garbage;
        org.apache.maven.wrapper.WrapperConfiguration $stack13, $stack14, $stack30;
        org.apache.maven.wrapper.Installer $stack15;
        java.nio.file.LinkOption[] $stack18, $stack22, $stack25, $stack27;
        boolean $stack20, $stack23, $stack26, $stack29;
        org.apache.maven.wrapper.PathAssembler $stack31;
        org.apache.maven.wrapper.PathAssembler$LocalDistribution $stack32, $stack33, $stack34, $stack37;
        org.apache.maven.wrapper.InstallerTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        this := @this: InstallerTest;

        $r0 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack3 = $r0.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $r1 = (org.apache.maven.wrapper.InstallerTest) this;

        specialinvoke $r1.<org.apache.maven.wrapper.InstallerTest: void createTestZip(java.nio.file.Path)>($stack3);

        $r2 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack5 = $r2.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack4 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack5, $stack4);

        $r3 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack7 = $r3.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack8 = interfaceinvoke $stack7.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("garbage");

        garbage = interfaceinvoke $stack8.<java.nio.file.Path: java.io.File toFile()>();

        $stack10 = virtualinvoke garbage.<java.io.File: java.nio.file.Path toPath()>();

        $stack11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack10, $stack11);

        $r4 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack13 = $r4.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        virtualinvoke $stack13.<org.apache.maven.wrapper.WrapperConfiguration: void setAlwaysUnpack(boolean)>(1);

        $r5 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack15 = $r5.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.Installer install>;

        $r6 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack14 = $r6.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        homeDir = virtualinvoke $stack15.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack14);

        $r7 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack17 = $r7.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, homeDir);

        $r8 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack19 = $r8.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path mavenHomeDir>;

        $stack18 = newarray (java.nio.file.LinkOption)[0];

        $stack20 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($stack19, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = interfaceinvoke homeDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("bin/mvn");

        $stack22 = newarray (java.nio.file.LinkOption)[0];

        $stack23 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack21, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = interfaceinvoke homeDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("garbage");

        $stack25 = newarray (java.nio.file.LinkOption)[0];

        $stack26 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack24, $stack25);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack26);

        $r9 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack28 = $r9.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $stack27 = newarray (java.nio.file.LinkOption)[0];

        $stack29 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($stack28, $stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $r10 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack32 = $r10.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $r11 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack31 = $r11.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler pathAssembler>;

        $r12 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack30 = $r12.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.WrapperConfiguration configuration>;

        $stack33 = virtualinvoke $stack31.<org.apache.maven.wrapper.PathAssembler: org.apache.maven.wrapper.PathAssembler$LocalDistribution getDistribution(org.apache.maven.wrapper.WrapperConfiguration)>($stack30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack32, $stack33);

        $r13 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack35 = $r13.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path distributionDir>;

        $r14 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack34 = $r14.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack36 = virtualinvoke $stack34.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getDistributionDir()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack35, $stack36);

        $r15 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack38 = $r15.<org.apache.maven.wrapper.InstallerTest: java.nio.file.Path zipDestination>;

        $r16 = (org.apache.maven.wrapper.InstallerTest) this;

        $stack37 = $r16.<org.apache.maven.wrapper.InstallerTest: org.apache.maven.wrapper.PathAssembler$LocalDistribution localDistribution>;

        $stack39 = virtualinvoke $stack37.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: java.nio.file.Path getZipFile()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack38, $stack39);

        return;
    }

    public void zipTo(java.nio.file.Path, java.nio.file.Path)
    {
        org.apache.tools.ant.taskdefs.Zip $stack5;
        java.nio.file.Path directoryToZip, zipFile;
        java.io.File $stack6, $stack7;
        org.apache.tools.ant.Project $stack8;
        org.apache.tools.ant.taskdefs.Zip$WhenEmpty $stack9;
        InstallerTest this;

        this := @this: InstallerTest;

        directoryToZip := @parameter0: java.nio.file.Path;

        zipFile := @parameter1: java.nio.file.Path;

        $stack5 = new org.apache.tools.ant.taskdefs.Zip;

        specialinvoke $stack5.<org.apache.tools.ant.taskdefs.Zip: void <init>()>();

        $stack6 = interfaceinvoke directoryToZip.<java.nio.file.Path: java.io.File toFile()>();

        virtualinvoke $stack5.<org.apache.tools.ant.taskdefs.Zip: void setBasedir(java.io.File)>($stack6);

        $stack7 = interfaceinvoke zipFile.<java.nio.file.Path: java.io.File toFile()>();

        virtualinvoke $stack5.<org.apache.tools.ant.taskdefs.Zip: void setDestFile(java.io.File)>($stack7);

        $stack8 = new org.apache.tools.ant.Project;

        specialinvoke $stack8.<org.apache.tools.ant.Project: void <init>()>();

        virtualinvoke $stack5.<org.apache.tools.ant.taskdefs.Zip: void setProject(org.apache.tools.ant.Project)>($stack8);

        $stack9 = new org.apache.tools.ant.taskdefs.Zip$WhenEmpty;

        specialinvoke $stack9.<org.apache.tools.ant.taskdefs.Zip$WhenEmpty: void <init>()>();

        virtualinvoke $stack9.<org.apache.tools.ant.taskdefs.Zip$WhenEmpty: void setValue(java.lang.String)>("create");

        virtualinvoke $stack5.<org.apache.tools.ant.taskdefs.Zip: void setWhenempty(org.apache.tools.ant.taskdefs.Zip$WhenEmpty)>($stack9);

        virtualinvoke $stack5.<org.apache.tools.ant.taskdefs.Zip: void execute()>();

        return;
    }
}
