final enum class InstructionType extends java.lang.Enum
{
    public static final enum sortpom.processinstruction.InstructionType IGNORE;
    public static final enum sortpom.processinstruction.InstructionType RESUME;
    static final java.util.regex.Pattern INSTRUCTION_PATTERN;
    static final java.util.regex.Pattern IGNORE_SECTIONS_PATTERN;
    static final java.util.regex.Pattern TOKEN_PATTERN;
    private static final sortpom.processinstruction.InstructionType[] $VALUES;

    public static sortpom.processinstruction.InstructionType[] values()
    {
        sortpom.processinstruction.InstructionType[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (sortpom.processinstruction.InstructionType[]) $stack1;

        return $stack2;
    }

    public static sortpom.processinstruction.InstructionType valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        sortpom.processinstruction.InstructionType $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lsortpom/processinstruction/InstructionType;", name);

        $stack2 = (sortpom.processinstruction.InstructionType) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        InstructionType this;
        java.lang.String l1;
        int l2;

        this := @this: InstructionType;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    public sortpom.processinstruction.InstructionType next()
    {
        InstructionType this;
        sortpom.processinstruction.InstructionType $stack1, $stack2, $stack3;

        this := @this: InstructionType;

        $stack1 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        if this != $stack1 goto label1;

        $stack3 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        return $stack3;

     label1:
        $stack2 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        return $stack2;
    }

    public static boolean containsType(java.lang.String)
    {
        sortpom.processinstruction.InstructionType $stack1, $stack4;
        java.lang.String $stack2, instruction, $stack5;
        boolean $stack3, $stack6, $stack7;

        instruction := @parameter0: java.lang.String;

        $stack1 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack2 = virtualinvoke $stack1.<sortpom.processinstruction.InstructionType: java.lang.String name()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(instruction);

        if $stack3 != 0 goto label1;

        $stack4 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack5 = virtualinvoke $stack4.<sortpom.processinstruction.InstructionType: java.lang.String name()>();

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(instruction);

        if $stack6 == 0 goto label2;

     label1:
        $stack7 = 1;

        goto label3;

     label2:
        $stack7 = 0;

     label3:
        return $stack7;
    }

    public boolean matches(java.lang.String)
    {
        InstructionType this;
        java.lang.String $stack2, instruction;
        boolean $stack3;
        sortpom.processinstruction.InstructionType $r0;

        this := @this: InstructionType;

        instruction := @parameter0: java.lang.String;

        $r0 = (sortpom.processinstruction.InstructionType) this;

        $stack2 = virtualinvoke $r0.<sortpom.processinstruction.InstructionType: java.lang.String name()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(instruction);

        return $stack3;
    }

    static void <clinit>()
    {
        sortpom.processinstruction.InstructionType $stack0, $stack1, $stack3, $stack4, $stack8, $stack11;
        sortpom.processinstruction.InstructionType[] $stack2;
        java.util.regex.Pattern $stack5, $stack15, $stack16;
        java.lang.StringBuilder $stack6, $stack7, $stack9, $stack10, $stack12, $stack13;
        java.lang.String $stack14;

        $stack0 = new sortpom.processinstruction.InstructionType;

        specialinvoke $stack0.<sortpom.processinstruction.InstructionType: void <init>(java.lang.String,int)>("IGNORE", 0);

        <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE> = $stack0;

        $stack1 = new sortpom.processinstruction.InstructionType;

        specialinvoke $stack1.<sortpom.processinstruction.InstructionType: void <init>(java.lang.String,int)>("RESUME", 1);

        <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME> = $stack1;

        $stack2 = newarray (sortpom.processinstruction.InstructionType)[2];

        $stack3 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack2[0] = $stack3;

        $stack4 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack2[1] = $stack4;

        <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] $VALUES> = $stack2;

        $stack5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)<\\?sortpom\\s+([\\w\"\'*= ]*)\\s*\\?>");

        <sortpom.processinstruction.InstructionType: java.util.regex.Pattern INSTRUCTION_PATTERN> = $stack5;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?is)<\\?sortpom\\s+");

        $stack8 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\s*\\?>.*?<\\?sortpom\\s+");

        $stack11 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\s*\\?>");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($stack14);

        <sortpom.processinstruction.InstructionType: java.util.regex.Pattern IGNORE_SECTIONS_PATTERN> = $stack15;

        $stack16 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)<\\?sortpom\\s+token=\'(\\d+)\'\\s*\\?>");

        <sortpom.processinstruction.InstructionType: java.util.regex.Pattern TOKEN_PATTERN> = $stack16;

        return;
    }
}
