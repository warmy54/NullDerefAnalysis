class InstructionTypeTest extends java.lang.Object
{

    void <init>()
    {
        InstructionTypeTest this;

        this := @this: InstructionTypeTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void nextAfterIgnoreShouldBeResume()
    {
        sortpom.processinstruction.InstructionType $stack1, $stack2, $stack3, $stack5, $stack6, $stack7, $stack8;
        org.hamcrest.Matcher $stack4, $stack9;
        InstructionTypeTest this;

        this := @this: InstructionTypeTest;

        $stack1 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack2 = virtualinvoke $stack1.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $stack3 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack3);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack4);

        $stack5 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack6 = virtualinvoke $stack5.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $stack7 = virtualinvoke $stack6.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $stack8 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack8);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack9);

        return;
    }

    void nextAfterResumeShouldBeIgnore()
    {
        sortpom.processinstruction.InstructionType $stack1, $stack2, $stack3, $stack5, $stack6, $stack7, $stack8;
        org.hamcrest.Matcher $stack4, $stack9;
        InstructionTypeTest this;

        this := @this: InstructionTypeTest;

        $stack1 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack2 = virtualinvoke $stack1.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $stack3 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack3);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack4);

        $stack5 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack6 = virtualinvoke $stack5.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $stack7 = virtualinvoke $stack6.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $stack8 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack8);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack9);

        return;
    }

    void testContainsType()
    {
        boolean $stack1, $stack5, $stack9, $stack13, $stack17, $stack21, $stack25, $stack29;
        java.lang.Boolean $stack2, $stack3, $stack6, $stack7, $stack10, $stack11, $stack14, $stack15, $stack18, $stack19, $stack22, $stack23, $stack26, $stack27, $stack30, $stack31;
        org.hamcrest.Matcher $stack4, $stack8, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32;
        InstructionTypeTest this;

        this := @this: InstructionTypeTest;

        $stack1 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("ignore");

        $stack2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack1);

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack3);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack4);

        $stack5 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("IGNORE");

        $stack6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack5);

        $stack7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack7);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack8);

        $stack9 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("IgNoRe");

        $stack10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack9);

        $stack11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        $stack13 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("resume");

        $stack14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack16 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack15);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack14, $stack16);

        $stack17 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("RESUME");

        $stack18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack17);

        $stack19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack19);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack18, $stack20);

        $stack21 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("rEsUmE");

        $stack22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack21);

        $stack23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack24 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack23);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack22, $stack24);

        $stack25 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("token");

        $stack26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack25);

        $stack27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack28 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack27);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack26, $stack28);

        $stack29 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>("gurka");

        $stack30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack29);

        $stack31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack32 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack31);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack30, $stack32);

        return;
    }

    void testMatches()
    {
        sortpom.processinstruction.InstructionType $stack1, $stack6, $stack11, $stack16, $stack21, $stack26, $stack31, $stack36;
        boolean $stack2, $stack7, $stack12, $stack17, $stack22, $stack27, $stack32, $stack37;
        java.lang.Boolean $stack3, $stack4, $stack8, $stack9, $stack13, $stack14, $stack18, $stack19, $stack23, $stack24, $stack28, $stack29, $stack33, $stack34, $stack38, $stack39;
        org.hamcrest.Matcher $stack5, $stack10, $stack15, $stack20, $stack25, $stack30, $stack35, $stack40;
        InstructionTypeTest this;

        this := @this: InstructionTypeTest;

        $stack1 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack2 = virtualinvoke $stack1.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("ignore");

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack2);

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack3, $stack5);

        $stack6 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack7 = virtualinvoke $stack6.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("IGNORE");

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        $stack11 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack12 = virtualinvoke $stack11.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("IgNoRe");

        $stack13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack12);

        $stack14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack14);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack13, $stack15);

        $stack16 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack17 = virtualinvoke $stack16.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("resume");

        $stack18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack17);

        $stack19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack19);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack18, $stack20);

        $stack21 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack22 = virtualinvoke $stack21.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("resume");

        $stack23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack22);

        $stack24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack24);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack23, $stack25);

        $stack26 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack27 = virtualinvoke $stack26.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("RESUME");

        $stack28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack27);

        $stack29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack30 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack29);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack28, $stack30);

        $stack31 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack32 = virtualinvoke $stack31.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("rEsUmE");

        $stack33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack32);

        $stack34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack35 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack34);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack33, $stack35);

        $stack36 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack37 = virtualinvoke $stack36.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>("token");

        $stack38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack37);

        $stack39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack40 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack39);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack38, $stack40);

        return;
    }
}
