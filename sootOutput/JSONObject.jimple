public class JSONObject extends java.lang.Object
{
    private java.util.Map map;
    public static final java.lang.Object NULL;

    public void <init>()
    {
        JSONObject this;
        java.util.HashMap $u0;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r0 = (org.json.JSONObject) this;

        $r0.<org.json.JSONObject: java.util.Map map> = $u0;

        return;
    }

    public void <init>(org.json.JSONObject, java.lang.String[]) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String[] names;
        int $stack4, i;
        org.json.JSONObject jo, $r0, $r1;
        java.lang.String $stack5, $stack6;
        java.lang.Object $stack7;

        this := @this: JSONObject;

        jo := @parameter0: org.json.JSONObject;

        names := @parameter1: java.lang.String[];

        $r0 = (org.json.JSONObject) this;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        i = 0;

     label1:
        $stack4 = lengthof names;

        if i >= $stack4 goto label2;

        $stack6 = names[i];

        $stack5 = names[i];

        $stack7 = virtualinvoke jo.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($stack5);

        $r1 = (org.json.JSONObject) this;

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>($stack6, $stack7);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.json.JSONTokener) throws org.json.JSONException
    {
        JSONObject this;
        org.json.JSONTokener x;
        char $stack4, $stack13, $stack18, c, $stack12;
        org.json.JSONException $stack6, $stack16, $stack17, $stack23;
        java.lang.Object $stack7, $stack10;
        java.lang.String key;
        org.json.JSONObject $r0, $r4;
        java.lang.Throwable $r1, $r2, $r3, $r5;

        this := @this: JSONObject;

        x := @parameter0: org.json.JSONTokener;

        $r0 = (org.json.JSONObject) this;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        $stack4 = virtualinvoke x.<org.json.JSONTokener: char nextClean()>();

        if $stack4 == 123 goto label01;

        $stack23 = virtualinvoke x.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("A JSONObject text must begin with \'{\'");

        $r1 = (java.lang.Throwable) $stack23;

        throw $r1;

     label01:
        c = virtualinvoke x.<org.json.JSONTokener: char nextClean()>();

        lookupswitch(c)
        {
            case 0: goto label02;
            case 125: goto label03;
            default: goto label04;
        };

     label02:
        $stack6 = virtualinvoke x.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("A JSONObject text must end with \'}\'");

        $r2 = (java.lang.Throwable) $stack6;

        throw $r2;

     label03:
        return;

     label04:
        virtualinvoke x.<org.json.JSONTokener: void back()>();

        $stack7 = virtualinvoke x.<org.json.JSONTokener: java.lang.Object nextValue()>();

        key = virtualinvoke $stack7.<java.lang.Object: java.lang.String toString()>();

        c = virtualinvoke x.<org.json.JSONTokener: char nextClean()>();

        if c != 61 goto label05;

        $stack18 = virtualinvoke x.<org.json.JSONTokener: char next()>();

        if $stack18 == 62 goto label06;

        virtualinvoke x.<org.json.JSONTokener: void back()>();

        goto label06;

     label05:
        if c == 58 goto label06;

        $stack17 = virtualinvoke x.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Expected a \':\' after a key");

        $r3 = (java.lang.Throwable) $stack17;

        throw $r3;

     label06:
        $stack10 = virtualinvoke x.<org.json.JSONTokener: java.lang.Object nextValue()>();

        $r4 = (org.json.JSONObject) this;

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>(key, $stack10);

        $stack12 = virtualinvoke x.<org.json.JSONTokener: char nextClean()>();

        lookupswitch($stack12)
        {
            case 44: goto label07;
            case 59: goto label07;
            case 125: goto label09;
            default: goto label10;
        };

     label07:
        $stack13 = virtualinvoke x.<org.json.JSONTokener: char nextClean()>();

        if $stack13 != 125 goto label08;

        return;

     label08:
        virtualinvoke x.<org.json.JSONTokener: void back()>();

        goto label01;

     label09:
        return;

     label10:
        $stack16 = virtualinvoke x.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Expected a \',\' or \'}\'");

        $r5 = (java.lang.Throwable) $stack16;

        throw $r5;
    }

    public void <init>(java.util.Map)
    {
        JSONObject this;
        java.util.Map map, $stack2;
        java.util.HashMap $u0;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        map := @parameter0: java.util.Map;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if map != null goto label1;

        $u0 = new java.util.HashMap;

        $stack2 = $u0;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        goto label2;

     label1:
        $stack2 = map;

     label2:
        $r0 = (org.json.JSONObject) this;

        $r0.<org.json.JSONObject: java.util.Map map> = $stack2;

        return;
    }

    public void <init>(java.util.Map, boolean)
    {
        JSONObject this;
        java.util.Map map, $stack13, $stack19;
        java.util.Set $stack6;
        java.util.Iterator i;
        boolean $stack8, $stack12, includeSuperClass;
        java.lang.Object $stack9, $stack10, $stack14, $stack16, $stack20, $stack21;
        java.util.Map$Entry e;
        java.lang.Class $stack11;
        java.util.HashMap $u0;
        org.json.JSONObject $u1, $r0, $r1, $r2;

        this := @this: JSONObject;

        map := @parameter0: java.util.Map;

        includeSuperClass := @parameter1: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r0 = (org.json.JSONObject) this;

        $r0.<org.json.JSONObject: java.util.Map map> = $u0;

        if map == null goto label4;

        $stack6 = interfaceinvoke map.<java.util.Map: java.util.Set entrySet()>();

        i = interfaceinvoke $stack6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label4;

        $stack9 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $stack9;

        $stack10 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack11 = virtualinvoke $stack10.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = staticinvoke <org.json.JSONObject: boolean isStandardProperty(java.lang.Class)>($stack11);

        if $stack12 == 0 goto label2;

        $r1 = (org.json.JSONObject) this;

        $stack19 = $r1.<org.json.JSONObject: java.util.Map map>;

        $stack20 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack21 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $stack19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack20, $stack21);

        goto label3;

     label2:
        $r2 = (org.json.JSONObject) this;

        $stack13 = $r2.<org.json.JSONObject: java.util.Map map>;

        $stack14 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        $u1 = new org.json.JSONObject;

        $stack16 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke $u1.<org.json.JSONObject: void <init>(java.lang.Object,boolean)>($stack16, includeSuperClass);

        interfaceinvoke $stack13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack14, $u1);

     label3:
        goto label1;

     label4:
        return;
    }

    public void <init>(java.lang.Object)
    {
        JSONObject this;
        java.lang.Object bean;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        bean := @parameter0: java.lang.Object;

        $r0 = (org.json.JSONObject) this;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        $r1 = (org.json.JSONObject) this;

        virtualinvoke $r1.<org.json.JSONObject: void populateInternalMap(java.lang.Object,boolean)>(bean, 0);

        return;
    }

    public void <init>(java.lang.Object, boolean)
    {
        JSONObject this;
        java.lang.Object bean;
        boolean includeSuperClass;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        bean := @parameter0: java.lang.Object;

        includeSuperClass := @parameter1: boolean;

        $r0 = (org.json.JSONObject) this;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        $r1 = (org.json.JSONObject) this;

        virtualinvoke $r1.<org.json.JSONObject: void populateInternalMap(java.lang.Object,boolean)>(bean, includeSuperClass);

        return;
    }

    private void populateInternalMap(java.lang.Object, boolean)
    {
        boolean includeSuperClassParam, $stack16, $stack20, $stack21, $stack24, $stack29, $stack33, $stack34, $stack35, $stack37, $stack41, includeSuperClass;
        java.lang.Object bean, result, $stack66;
        java.lang.Class klass, $stack32, $stack36, $stack38, $stack45;
        java.lang.ClassLoader $stack12, $stack46;
        java.lang.reflect.Method[] methods, $stack13;
        int $stack15, $stack26, $stack27, i, $stack14, $stack22;
        java.lang.String name, $stack40, $stack43, $stack69, $stack70, $stack71, key;
        char $stack23, $stack28;
        java.lang.Class[] $stack25;
        java.lang.Package $stack39;
        JSONObject this;
        java.util.Map $stack42, $stack48, $stack53, $stack56, $stack57, $stack61, $stack64, $stack67;
        java.util.Collection $stack60;
        java.lang.Exception $stack84;
        java.lang.reflect.Method method;
        java.lang.Object[] $stack30;
        org.json.JSONArray $u0, $u1;
        org.json.JSONObject $u2, $u3, $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.RuntimeException $u4;

        this := @this: JSONObject;

        bean := @parameter0: java.lang.Object;

        includeSuperClassParam := @parameter1: boolean;

        includeSuperClass = includeSuperClassParam;

        klass = virtualinvoke bean.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke klass.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $stack12 != null goto label01;

        includeSuperClass = 0;

     label01:
        if includeSuperClass == 0 goto label02;

        $stack13 = virtualinvoke klass.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        goto label03;

     label02:
        $stack13 = virtualinvoke klass.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label03:
        methods = $stack13;

        i = 0;

     label04:
        $stack14 = lengthof methods;

        if i >= $stack14 goto label20;

     label05:
        method = methods[i];

        $stack15 = virtualinvoke method.<java.lang.reflect.Method: int getModifiers()>();

        $stack16 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack15);

        if $stack16 == 0 goto label17;

        name = virtualinvoke method.<java.lang.reflect.Method: java.lang.String getName()>();

        key = "";

        $stack20 = virtualinvoke name.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $stack20 == 0 goto label06;

        key = virtualinvoke name.<java.lang.String: java.lang.String substring(int)>(3);

        goto label07;

     label06:
        $stack21 = virtualinvoke name.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $stack21 == 0 goto label07;

        key = virtualinvoke name.<java.lang.String: java.lang.String substring(int)>(2);

     label07:
        $stack22 = virtualinvoke key.<java.lang.String: int length()>();

        if $stack22 <= 0 goto label17;

        $stack23 = virtualinvoke key.<java.lang.String: char charAt(int)>(0);

        $stack24 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack23);

        if $stack24 == 0 goto label17;

        $stack25 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $stack26 = lengthof $stack25;

        if $stack26 != 0 goto label17;

        $stack27 = virtualinvoke key.<java.lang.String: int length()>();

        if $stack27 != 1 goto label08;

        key = virtualinvoke key.<java.lang.String: java.lang.String toLowerCase()>();

        goto label09;

     label08:
        $stack28 = virtualinvoke key.<java.lang.String: char charAt(int)>(1);

        $stack29 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack28);

        if $stack29 != 0 goto label09;

        $stack69 = virtualinvoke key.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $stack70 = virtualinvoke $stack69.<java.lang.String: java.lang.String toLowerCase()>();

        $stack71 = virtualinvoke key.<java.lang.String: java.lang.String substring(int)>(1);

        key = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack70, $stack71) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");

     label09:
        $stack30 = (java.lang.Object[]) null;

        result = virtualinvoke method.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(bean, $stack30);

        if result != null goto label10;

        $r0 = (org.json.JSONObject) this;

        $stack67 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack66 = <org.json.JSONObject: java.lang.Object NULL>;

        interfaceinvoke $stack67.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack66);

        goto label17;

     label10:
        $stack32 = virtualinvoke result.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: boolean isArray()>();

        if $stack33 == 0 goto label11;

        $r1 = (org.json.JSONObject) this;

        $stack64 = $r1.<org.json.JSONObject: java.util.Map map>;

        $u0 = new org.json.JSONArray;

        specialinvoke $u0.<org.json.JSONArray: void <init>(java.lang.Object,boolean)>(result, includeSuperClass);

        interfaceinvoke $stack64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u0);

        goto label17;

     label11:
        $stack34 = result instanceof java.util.Collection;

        if $stack34 == 0 goto label12;

        $r2 = (org.json.JSONObject) this;

        $stack61 = $r2.<org.json.JSONObject: java.util.Map map>;

        $u1 = new org.json.JSONArray;

        $stack60 = (java.util.Collection) result;

        specialinvoke $u1.<org.json.JSONArray: void <init>(java.lang.Object,boolean)>($stack60, includeSuperClass);

        interfaceinvoke $stack61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u1);

        goto label17;

     label12:
        $stack35 = result instanceof java.util.Map;

        if $stack35 == 0 goto label13;

        $r3 = (org.json.JSONObject) this;

        $stack57 = $r3.<org.json.JSONObject: java.util.Map map>;

        $u2 = new org.json.JSONObject;

        $stack56 = (java.util.Map) result;

        specialinvoke $u2.<org.json.JSONObject: void <init>(java.util.Map,boolean)>($stack56, includeSuperClass);

        interfaceinvoke $stack57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u2);

        goto label17;

     label13:
        $stack36 = virtualinvoke result.<java.lang.Object: java.lang.Class getClass()>();

        $stack37 = staticinvoke <org.json.JSONObject: boolean isStandardProperty(java.lang.Class)>($stack36);

        if $stack37 == 0 goto label14;

        $r4 = (org.json.JSONObject) this;

        $stack53 = $r4.<org.json.JSONObject: java.util.Map map>;

        interfaceinvoke $stack53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, result);

        goto label17;

     label14:
        $stack38 = virtualinvoke result.<java.lang.Object: java.lang.Class getClass()>();

        $stack39 = virtualinvoke $stack38.<java.lang.Class: java.lang.Package getPackage()>();

        $stack40 = virtualinvoke $stack39.<java.lang.Package: java.lang.String getName()>();

        $stack41 = virtualinvoke $stack40.<java.lang.String: boolean startsWith(java.lang.String)>("java");

        if $stack41 != 0 goto label15;

        $stack45 = virtualinvoke result.<java.lang.Object: java.lang.Class getClass()>();

        $stack46 = virtualinvoke $stack45.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $stack46 != null goto label16;

     label15:
        $r5 = (org.json.JSONObject) this;

        $stack42 = $r5.<org.json.JSONObject: java.util.Map map>;

        $stack43 = virtualinvoke result.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $stack42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack43);

        goto label17;

     label16:
        $r6 = (org.json.JSONObject) this;

        $stack48 = $r6.<org.json.JSONObject: java.util.Map map>;

        $u3 = new org.json.JSONObject;

        specialinvoke $u3.<org.json.JSONObject: void <init>(java.lang.Object,boolean)>(result, includeSuperClass);

        interfaceinvoke $stack48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u3);

     label17:
        goto label19;

     label18:
        $stack84 := @caughtexception;

        $u4 = new java.lang.RuntimeException;

        specialinvoke $u4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack84);

        throw $u4;

     label19:
        i = i + 1;

        goto label04;

     label20:
        return;

        catch java.lang.Exception from label05 to label17 with label18;
    }

    static boolean isStandardProperty(java.lang.Class)
    {
        java.lang.Class clazz;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        clazz := @parameter0: java.lang.Class;

        $stack1 = virtualinvoke clazz.<java.lang.Class: boolean isPrimitive()>();

        if $stack1 != 0 goto label1;

        $stack2 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Byte;");

        if $stack2 != 0 goto label1;

        $stack3 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Short;");

        if $stack3 != 0 goto label1;

        $stack4 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Integer;");

        if $stack4 != 0 goto label1;

        $stack5 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Long;");

        if $stack5 != 0 goto label1;

        $stack6 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Float;");

        if $stack6 != 0 goto label1;

        $stack7 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Double;");

        if $stack7 != 0 goto label1;

        $stack8 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Character;");

        if $stack8 != 0 goto label1;

        $stack9 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;");

        if $stack9 != 0 goto label1;

        $stack10 = virtualinvoke clazz.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Boolean;");

        if $stack10 == 0 goto label2;

     label1:
        $stack11 = 1;

        goto label3;

     label2:
        $stack11 = 0;

     label3:
        return $stack11;
    }

    public void <init>(java.lang.Object, java.lang.String[])
    {
        JSONObject this;
        java.lang.Object object, $stack10;
        java.lang.Class c;
        java.lang.String[] names;
        int $stack8, i;
        java.lang.String name;
        java.lang.reflect.Field $stack9;
        java.lang.Exception $stack14;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        object := @parameter0: java.lang.Object;

        names := @parameter1: java.lang.String[];

        $r0 = (org.json.JSONObject) this;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        c = virtualinvoke object.<java.lang.Object: java.lang.Class getClass()>();

        i = 0;

     label1:
        $stack8 = lengthof names;

        if i >= $stack8 goto label6;

        name = names[i];

     label2:
        $stack9 = virtualinvoke c.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(name);

        $stack10 = virtualinvoke $stack9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(object);

        $r1 = (org.json.JSONObject) this;

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>(name, $stack10);

     label3:
        goto label5;

     label4:
        $stack14 := @caughtexception;

     label5:
        i = i + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void <init>(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String source;
        org.json.JSONTokener $u0;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        source := @parameter0: java.lang.String;

        $u0 = new org.json.JSONTokener;

        specialinvoke $u0.<org.json.JSONTokener: void <init>(java.lang.String)>(source);

        $r0 = (org.json.JSONObject) this;

        specialinvoke $r0.<org.json.JSONObject: void <init>(org.json.JSONTokener)>($u0);

        return;
    }

    public org.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object value, o, $stack16;
        JSONObject this;
        java.lang.String key;
        boolean $stack5, $stack13;
        org.json.JSONArray $stack7, $stack8, $stack10, $u0, $u1;
        org.json.JSONObject $r0, $r1, $r2, $r3;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        staticinvoke <org.json.JSONObject: void testValidity(java.lang.Object)>(value);

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        if o != null goto label3;

        $stack13 = value instanceof org.json.JSONArray;

        if $stack13 == 0 goto label1;

        $u0 = new org.json.JSONArray;

        specialinvoke $u0.<org.json.JSONArray: void <init>()>();

        $stack16 = virtualinvoke $u0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(value);

        goto label2;

     label1:
        $stack16 = value;

     label2:
        $r1 = (org.json.JSONObject) this;

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $stack16);

        goto label5;

     label3:
        $stack5 = o instanceof org.json.JSONArray;

        if $stack5 == 0 goto label4;

        $stack10 = (org.json.JSONArray) o;

        virtualinvoke $stack10.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(value);

        goto label5;

     label4:
        $u1 = new org.json.JSONArray;

        specialinvoke $u1.<org.json.JSONArray: void <init>()>();

        $stack7 = virtualinvoke $u1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(o);

        $stack8 = virtualinvoke $stack7.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(value);

        $r2 = (org.json.JSONObject) this;

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $stack8);

     label5:
        $r3 = (org.json.JSONObject) this;

        return $r3;
    }

    public org.json.JSONObject append(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object value, o;
        JSONObject this;
        java.lang.String key, $stack7;
        boolean $stack5;
        org.json.JSONArray $stack8, $stack9, $stack12, $u0;
        org.json.JSONException $u1;
        org.json.JSONObject $r0, $r1, $r2, $r4;
        java.lang.Throwable $r3;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        staticinvoke <org.json.JSONObject: void testValidity(java.lang.Object)>(value);

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        if o != null goto label1;

        $u0 = new org.json.JSONArray;

        specialinvoke $u0.<org.json.JSONArray: void <init>()>();

        $stack12 = virtualinvoke $u0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(value);

        $r1 = (org.json.JSONObject) this;

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $stack12);

        goto label3;

     label1:
        $stack5 = o instanceof org.json.JSONArray;

        if $stack5 == 0 goto label2;

        $stack8 = (org.json.JSONArray) o;

        $stack9 = virtualinvoke $stack8.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(value);

        $r2 = (org.json.JSONObject) this;

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $stack9);

        goto label3;

     label2:
        $u1 = new org.json.JSONException;

        $stack7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(key) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("JSONObject[\u0001] is not a JSONArray.");

        specialinvoke $u1.<org.json.JSONException: void <init>(java.lang.String)>($stack7);

        $r3 = (java.lang.Throwable) $u1;

        throw $r3;

     label3:
        $r4 = (org.json.JSONObject) this;

        return $r4;
    }

    public static java.lang.String doubleToString(double)
    {
        double d;
        boolean $stack3, $stack4, $stack10, $stack11;
        int $stack6, $stack7, $stack9, $stack13, $stack14, $stack17, $stack18;
        java.lang.String s;

        d := @parameter0: double;

        $stack3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d);

        if $stack3 != 0 goto label1;

        $stack4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d);

        if $stack4 == 0 goto label2;

     label1:
        return "null";

     label2:
        s = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d);

        $stack6 = virtualinvoke s.<java.lang.String: int indexOf(int)>(46);

        if $stack6 <= 0 goto label5;

        $stack7 = virtualinvoke s.<java.lang.String: int indexOf(int)>(101);

        if $stack7 >= 0 goto label5;

        $stack9 = virtualinvoke s.<java.lang.String: int indexOf(int)>(69);

        if $stack9 >= 0 goto label5;

     label3:
        $stack10 = virtualinvoke s.<java.lang.String: boolean endsWith(java.lang.String)>("0");

        if $stack10 == 0 goto label4;

        $stack17 = virtualinvoke s.<java.lang.String: int length()>();

        $stack18 = $stack17 - 1;

        s = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(0, $stack18);

        goto label3;

     label4:
        $stack11 = virtualinvoke s.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $stack11 == 0 goto label5;

        $stack13 = virtualinvoke s.<java.lang.String: int length()>();

        $stack14 = $stack13 - 1;

        s = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(0, $stack14);

     label5:
        return s;
    }

    public java.lang.Object get(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key, $stack5, $stack6;
        java.lang.Object o;
        org.json.JSONException $u0;
        org.json.JSONObject $r0;
        java.lang.Throwable $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        if o != null goto label1;

        $u0 = new org.json.JSONException;

        $stack5 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>(key);

        $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("JSONObject[\u0001] not found.");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack6);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label1:
        return o;
    }

    public boolean getBoolean(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key, $stack11, $stack12, $stack13, $stack17;
        java.lang.Object o;
        java.lang.Boolean $stack4, $stack7;
        boolean $stack5, $stack6, $stack8, $stack9, $stack14, $stack18;
        org.json.JSONException $u0;
        org.json.JSONObject $r0;
        java.lang.Throwable $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

        $stack4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack5 = virtualinvoke o.<java.lang.Object: boolean equals(java.lang.Object)>($stack4);

        if $stack5 != 0 goto label1;

        $stack6 = o instanceof java.lang.String;

        if $stack6 == 0 goto label2;

        $stack17 = (java.lang.String) o;

        $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $stack18 == 0 goto label2;

     label1:
        return 0;

     label2:
        $stack7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack8 = virtualinvoke o.<java.lang.Object: boolean equals(java.lang.Object)>($stack7);

        if $stack8 != 0 goto label3;

        $stack9 = o instanceof java.lang.String;

        if $stack9 == 0 goto label4;

        $stack13 = (java.lang.String) o;

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $stack14 == 0 goto label4;

     label3:
        return 1;

     label4:
        $u0 = new org.json.JSONException;

        $stack11 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>(key);

        $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("JSONObject[\u0001] is not a Boolean.");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack12);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;
    }

    public double getDouble(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key, $stack6, $stack13, $stack14;
        java.lang.Object o;
        boolean $stack5;
        java.lang.Double $stack7;
        java.lang.Number $stack9;
        java.lang.Exception $stack11;
        double $stack8;
        org.json.JSONException $u0;
        org.json.JSONObject $r0;
        java.lang.Throwable $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

     label1:
        $stack5 = o instanceof java.lang.Number;

        if $stack5 == 0 goto label2;

        $stack9 = (java.lang.Number) o;

        $stack8 = virtualinvoke $stack9.<java.lang.Number: double doubleValue()>();

        goto label3;

     label2:
        $stack6 = (java.lang.String) o;

        $stack7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.Double: double doubleValue()>();

     label3:
        return $stack8;

     label4:
        $stack11 := @caughtexception;

        $u0 = new org.json.JSONException;

        $stack13 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>(key);

        $stack14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("JSONObject[\u0001] is not a number.");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack14);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getInt(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        java.lang.Object o;
        boolean $stack4;
        double $stack5;
        java.lang.Number $stack7;
        int $stack6;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

        $stack4 = o instanceof java.lang.Number;

        if $stack4 == 0 goto label1;

        $stack7 = (java.lang.Number) o;

        $stack6 = virtualinvoke $stack7.<java.lang.Number: int intValue()>();

        goto label2;

     label1:
        $r1 = (org.json.JSONObject) this;

        $stack5 = virtualinvoke $r1.<org.json.JSONObject: double getDouble(java.lang.String)>(key);

        $stack6 = (int) $stack5;

     label2:
        return $stack6;
    }

    public org.json.JSONArray getJSONArray(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key, $stack6, $stack7;
        java.lang.Object o;
        boolean $stack4;
        org.json.JSONArray $stack8;
        org.json.JSONException $u0;
        org.json.JSONObject $r0;
        java.lang.Throwable $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

        $stack4 = o instanceof org.json.JSONArray;

        if $stack4 == 0 goto label1;

        $stack8 = (org.json.JSONArray) o;

        return $stack8;

     label1:
        $u0 = new org.json.JSONException;

        $stack6 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>(key);

        $stack7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("JSONObject[\u0001] is not a JSONArray.");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack7);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;
    }

    public org.json.JSONObject getJSONObject(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key, $stack6, $stack7;
        java.lang.Object o;
        boolean $stack4;
        org.json.JSONObject $stack8, $r0;
        org.json.JSONException $u0;
        java.lang.Throwable $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

        $stack4 = o instanceof org.json.JSONObject;

        if $stack4 == 0 goto label1;

        $stack8 = (org.json.JSONObject) o;

        return $stack8;

     label1:
        $u0 = new org.json.JSONException;

        $stack6 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>(key);

        $stack7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("JSONObject[\u0001] is not a JSONObject.");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack7);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;
    }

    public long getLong(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        java.lang.Object o;
        boolean $stack4;
        double $stack5;
        java.lang.Number $stack7;
        long $stack6;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

        $stack4 = o instanceof java.lang.Number;

        if $stack4 == 0 goto label1;

        $stack7 = (java.lang.Number) o;

        $stack6 = virtualinvoke $stack7.<java.lang.Number: long longValue()>();

        goto label2;

     label1:
        $r1 = (org.json.JSONObject) this;

        $stack5 = virtualinvoke $r1.<org.json.JSONObject: double getDouble(java.lang.String)>(key);

        $stack6 = (long) $stack5;

     label2:
        return $stack6;
    }

    public static java.lang.String[] getNames(org.json.JSONObject)
    {
        org.json.JSONObject jo;
        int length, j;
        java.util.Iterator i;
        java.lang.String[] names;
        boolean $stack7;
        java.lang.Object $stack8;
        java.lang.String $stack9;

        jo := @parameter0: org.json.JSONObject;

        length = virtualinvoke jo.<org.json.JSONObject: int length()>();

        if length != 0 goto label1;

        return null;

     label1:
        i = virtualinvoke jo.<org.json.JSONObject: java.util.Iterator keys()>();

        names = newarray (java.lang.String)[length];

        j = 0;

     label2:
        $stack7 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $stack9 = (java.lang.String) $stack8;

        names[j] = $stack9;

        j = j + 1;

        goto label2;

     label3:
        return names;
    }

    public static java.lang.String[] getNames(java.lang.Object)
    {
        java.lang.Object object;
        java.lang.Class klass;
        java.lang.reflect.Field[] fields;
        int length, i;
        java.lang.String[] names;
        java.lang.reflect.Field $stack8;
        java.lang.String $stack9;

        object := @parameter0: java.lang.Object;

        if object != null goto label1;

        return null;

     label1:
        klass = virtualinvoke object.<java.lang.Object: java.lang.Class getClass()>();

        fields = virtualinvoke klass.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        length = lengthof fields;

        if length != 0 goto label2;

        return null;

     label2:
        names = newarray (java.lang.String)[length];

        i = 0;

     label3:
        if i >= length goto label4;

        $stack8 = fields[i];

        $stack9 = virtualinvoke $stack8.<java.lang.reflect.Field: java.lang.String getName()>();

        names[i] = $stack9;

        i = i + 1;

        goto label3;

     label4:
        return names;
    }

    public java.lang.String getString(java.lang.String) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key, $stack3;
        java.lang.Object $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(key);

        $stack3 = virtualinvoke $stack2.<java.lang.Object: java.lang.String toString()>();

        return $stack3;
    }

    public boolean has(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        java.util.Map $stack2;
        boolean $stack3;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(key);

        return $stack3;
    }

    public boolean isNull(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        java.lang.Object $stack2, $stack3;
        boolean $stack4;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $stack2 = <org.json.JSONObject: java.lang.Object NULL>;

        $r0 = (org.json.JSONObject) this;

        $stack3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        $stack4 = virtualinvoke $stack2.<java.lang.Object: boolean equals(java.lang.Object)>($stack3);

        return $stack4;
    }

    public java.util.Iterator keys()
    {
        JSONObject this;
        java.util.Map $stack1;
        java.util.Set $stack2;
        java.util.Iterator $stack3;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        $r0 = (org.json.JSONObject) this;

        $stack1 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: java.util.Set keySet()>();

        $stack3 = interfaceinvoke $stack2.<java.util.Set: java.util.Iterator iterator()>();

        return $stack3;
    }

    public int length()
    {
        JSONObject this;
        java.util.Map $stack1;
        int $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        $r0 = (org.json.JSONObject) this;

        $stack1 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public org.json.JSONArray names()
    {
        JSONObject this;
        java.util.Iterator keys;
        boolean $stack5;
        int $stack6;
        java.lang.Object $stack8;
        org.json.JSONArray $stack7, $u0;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        $u0 = new org.json.JSONArray;

        specialinvoke $u0.<org.json.JSONArray: void <init>()>();

        $r0 = (org.json.JSONObject) this;

        keys = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $stack5 = interfaceinvoke keys.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack8 = interfaceinvoke keys.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $u0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($stack8);

        goto label1;

     label2:
        $stack6 = virtualinvoke $u0.<org.json.JSONArray: int length()>();

        if $stack6 != 0 goto label3;

        $stack7 = null;

        goto label4;

     label3:
        $stack7 = $u0;

     label4:
        return $stack7;
    }

    public static java.lang.String numberToString(java.lang.Number) throws org.json.JSONException
    {
        java.lang.Number n;
        int $stack3, $stack4, $stack6, $stack10, $stack11, $stack14, $stack15;
        boolean $stack7, $stack8;
        java.lang.String s;
        org.json.JSONException $u0;
        java.lang.Throwable $r0;

        n := @parameter0: java.lang.Number;

        if n != null goto label1;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>("Null pointer");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        staticinvoke <org.json.JSONObject: void testValidity(java.lang.Object)>(n);

        s = virtualinvoke n.<java.lang.Object: java.lang.String toString()>();

        $stack3 = virtualinvoke s.<java.lang.String: int indexOf(int)>(46);

        if $stack3 <= 0 goto label4;

        $stack4 = virtualinvoke s.<java.lang.String: int indexOf(int)>(101);

        if $stack4 >= 0 goto label4;

        $stack6 = virtualinvoke s.<java.lang.String: int indexOf(int)>(69);

        if $stack6 >= 0 goto label4;

     label2:
        $stack7 = virtualinvoke s.<java.lang.String: boolean endsWith(java.lang.String)>("0");

        if $stack7 == 0 goto label3;

        $stack14 = virtualinvoke s.<java.lang.String: int length()>();

        $stack15 = $stack14 - 1;

        s = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(0, $stack15);

        goto label2;

     label3:
        $stack8 = virtualinvoke s.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $stack8 == 0 goto label4;

        $stack10 = virtualinvoke s.<java.lang.String: int length()>();

        $stack11 = $stack10 - 1;

        s = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11);

     label4:
        return s;
    }

    public java.lang.Object opt(java.lang.String)
    {
        java.lang.String key;
        JSONObject this;
        java.util.Map $stack2;
        java.lang.Object $stack3;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        if key != null goto label1;

        $stack3 = null;

        goto label2;

     label1:
        $r0 = (org.json.JSONObject) this;

        $stack2 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

     label2:
        return $stack3;
    }

    public boolean optBoolean(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        boolean $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>(key, 0);

        return $stack2;
    }

    public boolean optBoolean(java.lang.String, boolean)
    {
        JSONObject this;
        java.lang.String key;
        boolean $stack4, defaultValue;
        java.lang.Exception $stack5;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: boolean;

     label1:
        $r0 = (org.json.JSONObject) this;

        $stack4 = virtualinvoke $r0.<org.json.JSONObject: boolean getBoolean(java.lang.String)>(key);

     label2:
        return $stack4;

     label3:
        $stack5 := @caughtexception;

        return defaultValue;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.json.JSONObject put(java.lang.String, java.util.Collection) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        java.util.Collection value;
        org.json.JSONArray $u0;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.util.Collection;

        $u0 = new org.json.JSONArray;

        specialinvoke $u0.<org.json.JSONArray: void <init>(java.util.Collection)>(value);

        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $u0);

        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public double optDouble(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        double $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: double optDouble(java.lang.String,double)>(key, #NaN);

        return $stack2;
    }

    public double optDouble(java.lang.String, double)
    {
        JSONObject this;
        java.lang.String key, $stack8;
        boolean $stack6;
        java.lang.Number $stack10;
        java.lang.Exception $stack12;
        double defaultValue, $stack9;
        java.lang.Object o;
        java.lang.Double $u0;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: double;

     label1:
        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        $stack6 = o instanceof java.lang.Number;

        if $stack6 == 0 goto label2;

        $stack10 = (java.lang.Number) o;

        $stack9 = virtualinvoke $stack10.<java.lang.Number: double doubleValue()>();

        goto label3;

     label2:
        $u0 = new java.lang.Double;

        $stack8 = (java.lang.String) o;

        specialinvoke $u0.<java.lang.Double: void <init>(java.lang.String)>($stack8);

        $stack9 = virtualinvoke $u0.<java.lang.Double: double doubleValue()>();

     label3:
        return $stack9;

     label4:
        $stack12 := @caughtexception;

        return defaultValue;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int optInt(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        int $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: int optInt(java.lang.String,int)>(key, 0);

        return $stack2;
    }

    public int optInt(java.lang.String, int)
    {
        JSONObject this;
        java.lang.String key;
        int $stack4, defaultValue;
        java.lang.Exception $stack5;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: int;

     label1:
        $r0 = (org.json.JSONObject) this;

        $stack4 = virtualinvoke $r0.<org.json.JSONObject: int getInt(java.lang.String)>(key);

     label2:
        return $stack4;

     label3:
        $stack5 := @caughtexception;

        return defaultValue;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.json.JSONArray optJSONArray(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        java.lang.Object o;
        boolean $stack4;
        org.json.JSONArray $stack5;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        $stack4 = o instanceof org.json.JSONArray;

        if $stack4 == 0 goto label1;

        $stack5 = (org.json.JSONArray) o;

        goto label2;

     label1:
        $stack5 = null;

     label2:
        return $stack5;
    }

    public org.json.JSONObject optJSONObject(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        java.lang.Object o;
        boolean $stack4;
        org.json.JSONObject $stack5, $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        $stack4 = o instanceof org.json.JSONObject;

        if $stack4 == 0 goto label1;

        $stack5 = (org.json.JSONObject) o;

        goto label2;

     label1:
        $stack5 = null;

     label2:
        return $stack5;
    }

    public long optLong(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        long $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: long optLong(java.lang.String,long)>(key, 0L);

        return $stack2;
    }

    public long optLong(java.lang.String, long)
    {
        JSONObject this;
        java.lang.String key;
        long $stack5, defaultValue;
        java.lang.Exception $stack6;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: long;

     label1:
        $r0 = (org.json.JSONObject) this;

        $stack5 = virtualinvoke $r0.<org.json.JSONObject: long getLong(java.lang.String)>(key);

     label2:
        return $stack5;

     label3:
        $stack6 := @caughtexception;

        return defaultValue;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String optString(java.lang.String)
    {
        JSONObject this;
        java.lang.String key, $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>(key, "");

        return $stack2;
    }

    public java.lang.String optString(java.lang.String, java.lang.String)
    {
        JSONObject this;
        java.lang.String key, defaultValue, $stack5;
        java.lang.Object o;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        defaultValue := @parameter1: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        o = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        if o == null goto label1;

        $stack5 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $stack5 = defaultValue;

     label2:
        return $stack5;
    }

    public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        boolean value;
        java.lang.Boolean $stack3;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: boolean;

        if value == 0 goto label1;

        $stack3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $stack3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $stack3);

        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        double value;
        java.lang.Double $u0;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: double;

        $u0 = new java.lang.Double;

        specialinvoke $u0.<java.lang.Double: void <init>(double)>(value);

        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $u0);

        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public org.json.JSONObject put(java.lang.String, int) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        int value;
        java.lang.Integer $u0;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: int;

        $u0 = new java.lang.Integer;

        specialinvoke $u0.<java.lang.Integer: void <init>(int)>(value);

        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $u0);

        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public org.json.JSONObject put(java.lang.String, long) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        long value;
        java.lang.Long $u0;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: long;

        $u0 = new java.lang.Long;

        specialinvoke $u0.<java.lang.Long: void <init>(long)>(value);

        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $u0);

        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public org.json.JSONObject put(java.lang.String, java.util.Map) throws org.json.JSONException
    {
        JSONObject this;
        java.lang.String key;
        java.util.Map value;
        org.json.JSONObject $u0, $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.util.Map;

        $u0 = new org.json.JSONObject;

        specialinvoke $u0.<org.json.JSONObject: void <init>(java.lang.Object)>(value);

        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, $u0);

        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        java.lang.String key;
        java.lang.Object value;
        JSONObject this;
        java.util.Map $stack4;
        org.json.JSONException $u0;
        java.lang.Throwable $r0;
        org.json.JSONObject $r1, $r2, $r3;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        if key != null goto label1;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>("Null key.");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        if value == null goto label2;

        staticinvoke <org.json.JSONObject: void testValidity(java.lang.Object)>(value);

        $r1 = (org.json.JSONObject) this;

        $stack4 = $r1.<org.json.JSONObject: java.util.Map map>;

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);

        goto label3;

     label2:
        $r2 = (org.json.JSONObject) this;

        virtualinvoke $r2.<org.json.JSONObject: java.lang.Object remove(java.lang.String)>(key);

     label3:
        $r3 = (org.json.JSONObject) this;

        return $r3;
    }

    public org.json.JSONObject putOnce(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        java.lang.String key, $stack7;
        JSONObject this;
        java.lang.Object value, $stack4;
        org.json.JSONException $u0;
        org.json.JSONObject $r0, $r2, $r3;
        java.lang.Throwable $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        if key == null goto label2;

        if value == null goto label2;

        $r0 = (org.json.JSONObject) this;

        $stack4 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(key);

        if $stack4 == null goto label1;

        $u0 = new org.json.JSONException;

        $stack7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(key) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Duplicate key \"\u0001\"");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack7);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label1:
        $r2 = (org.json.JSONObject) this;

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, value);

     label2:
        $r3 = (org.json.JSONObject) this;

        return $r3;
    }

    public org.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        java.lang.String key;
        JSONObject this;
        java.lang.Object value;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        if key == null goto label1;

        if value == null goto label1;

        $r0 = (org.json.JSONObject) this;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(key, value);

     label1:
        $r1 = (org.json.JSONObject) this;

        return $r1;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.String string, $stack13, t, $stack28, $stack32, $stack33;
        int $stack7, len, $stack10, i, $stack30, $stack31;
        java.lang.StringBuffer $stack9;
        char b, c;

        string := @parameter0: java.lang.String;

        if string == null goto label01;

        $stack7 = virtualinvoke string.<java.lang.String: int length()>();

        if $stack7 != 0 goto label02;

     label01:
        return "\"\"";

     label02:
        c = 0;

        len = virtualinvoke string.<java.lang.String: int length()>();

        $stack9 = new java.lang.StringBuffer;

        $stack10 = len + 4;

        specialinvoke $stack9.<java.lang.StringBuffer: void <init>(int)>($stack10);

        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        i = 0;

     label03:
        if i >= len goto label17;

        b = c;

        c = virtualinvoke string.<java.lang.String: char charAt(int)>(i);

        lookupswitch(c)
        {
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label09;
            case 12: goto label10;
            case 13: goto label11;
            case 34: goto label04;
            case 47: goto label05;
            case 92: goto label04;
            default: goto label12;
        };

     label04:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        goto label16;

     label05:
        if b != 60 goto label06;

        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label06:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        goto label16;

     label07:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label16;

     label08:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label16;

     label09:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label16;

     label10:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label16;

     label11:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label16;

     label12:
        if c < 32 goto label14;

        if c < 128 goto label13;

        if c < 160 goto label14;

     label13:
        if c < 8192 goto label15;

        if c >= 8448 goto label15;

     label14:
        $stack28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c);

        t = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("000\u0001");

        $stack30 = virtualinvoke t.<java.lang.String: int length()>();

        $stack31 = $stack30 - 4;

        $stack32 = virtualinvoke t.<java.lang.String: java.lang.String substring(int)>($stack31);

        $stack33 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack32) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\\u\u0001");

        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack33);

        goto label16;

     label15:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

     label16:
        i = i + 1;

        goto label03;

     label17:
        virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $stack13 = virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack13;
    }

    public java.lang.Object remove(java.lang.String)
    {
        JSONObject this;
        java.lang.String key;
        java.util.Map $stack2;
        java.lang.Object $stack3;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        key := @parameter0: java.lang.String;

        $r0 = (org.json.JSONObject) this;

        $stack2 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(key);

        return $stack3;
    }

    public java.util.Iterator sortedKeys()
    {
        JSONObject this;
        java.util.Map $stack2;
        java.util.Set $stack3;
        java.util.Iterator $stack4;
        java.util.TreeSet $u0;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        $u0 = new java.util.TreeSet;

        $r0 = (org.json.JSONObject) this;

        $stack2 = $r0.<org.json.JSONObject: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $u0.<java.util.TreeSet: void <init>(java.util.Collection)>($stack3);

        $stack4 = virtualinvoke $u0.<java.util.TreeSet: java.util.Iterator iterator()>();

        return $stack4;
    }

    public static java.lang.Object stringToValue(java.lang.String)
    {
        java.lang.String s, $stack25;
        boolean $stack3, $stack4, $stack5, $stack6;
        char b, $stack23, $stack27;
        int $stack10, $stack12, $stack15, $stack19, $stack20, $stack22, $stack26, $stack8;
        java.lang.Long $stack13;
        long $stack14, $stack16;
        byte $stack17;
        java.lang.Integer $stack18, $stack21, $stack24;
        java.lang.Object $stack37;
        java.lang.Boolean $stack38, $stack39;
        java.lang.Exception $stack40, $stack42, $stack46;
        java.lang.Double $stack9;

        s := @parameter0: java.lang.String;

        $stack3 = virtualinvoke s.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $stack3 == 0 goto label01;

        return s;

     label01:
        $stack4 = virtualinvoke s.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $stack4 == 0 goto label02;

        $stack39 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $stack39;

     label02:
        $stack5 = virtualinvoke s.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $stack5 == 0 goto label03;

        $stack38 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $stack38;

     label03:
        $stack6 = virtualinvoke s.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("null");

        if $stack6 == 0 goto label04;

        $stack37 = <org.json.JSONObject: java.lang.Object NULL>;

        return $stack37;

     label04:
        b = virtualinvoke s.<java.lang.String: char charAt(int)>(0);

        if b < 48 goto label05;

        if b <= 57 goto label06;

     label05:
        if b == 46 goto label06;

        if b == 45 goto label06;

        if b != 43 goto label20;

     label06:
        if b != 48 goto label13;

        $stack20 = virtualinvoke s.<java.lang.String: int length()>();

        if $stack20 <= 2 goto label10;

        $stack23 = virtualinvoke s.<java.lang.String: char charAt(int)>(1);

        if $stack23 == 120 goto label07;

        $stack27 = virtualinvoke s.<java.lang.String: char charAt(int)>(1);

        if $stack27 != 88 goto label10;

     label07:
        $stack24 = new java.lang.Integer;

        $stack25 = virtualinvoke s.<java.lang.String: java.lang.String substring(int)>(2);

        $stack26 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($stack25, 16);

        specialinvoke $stack24.<java.lang.Integer: void <init>(int)>($stack26);

     label08:
        return $stack24;

     label09:
        $stack46 := @caughtexception;

        goto label13;

     label10:
        $stack21 = new java.lang.Integer;

        $stack22 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(s, 8);

        specialinvoke $stack21.<java.lang.Integer: void <init>(int)>($stack22);

     label11:
        return $stack21;

     label12:
        $stack42 := @caughtexception;

     label13:
        $stack8 = virtualinvoke s.<java.lang.String: int indexOf(int)>(46);

        if $stack8 > -1 goto label14;

        $stack10 = virtualinvoke s.<java.lang.String: int indexOf(int)>(101);

        if $stack10 > -1 goto label14;

        $stack12 = virtualinvoke s.<java.lang.String: int indexOf(int)>(69);

        if $stack12 <= -1 goto label16;

     label14:
        $stack9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(s);

     label15:
        return $stack9;

     label16:
        $stack13 = new java.lang.Long;

        specialinvoke $stack13.<java.lang.Long: void <init>(java.lang.String)>(s);

        $stack14 = virtualinvoke $stack13.<java.lang.Long: long longValue()>();

        $stack15 = virtualinvoke $stack13.<java.lang.Long: int intValue()>();

        $stack16 = (long) $stack15;

        $stack17 = $stack14 cmp $stack16;

        if $stack17 != 0 goto label18;

        $stack18 = new java.lang.Integer;

        $stack19 = virtualinvoke $stack13.<java.lang.Long: int intValue()>();

        specialinvoke $stack18.<java.lang.Integer: void <init>(int)>($stack19);

     label17:
        return $stack18;

     label18:
        return $stack13;

     label19:
        $stack40 := @caughtexception;

     label20:
        return s;

        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label15 with label19;
        catch java.lang.Exception from label16 to label17 with label19;
    }

    static void testValidity(java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object o;
        boolean $stack1, $stack2, $stack4, $stack7, $stack10, $stack13;
        java.lang.Float $stack3, $stack6;
        java.lang.Double $stack9, $stack12;
        org.json.JSONException $u0, $u1;
        java.lang.Throwable $r0, $r1;

        o := @parameter0: java.lang.Object;

        if o == null goto label4;

        $stack1 = o instanceof java.lang.Double;

        if $stack1 == 0 goto label2;

        $stack9 = (java.lang.Double) o;

        $stack10 = virtualinvoke $stack9.<java.lang.Double: boolean isInfinite()>();

        if $stack10 != 0 goto label1;

        $stack12 = (java.lang.Double) o;

        $stack13 = virtualinvoke $stack12.<java.lang.Double: boolean isNaN()>();

        if $stack13 == 0 goto label4;

     label1:
        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>("JSON does not allow non-finite numbers.");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label2:
        $stack2 = o instanceof java.lang.Float;

        if $stack2 == 0 goto label4;

        $stack3 = (java.lang.Float) o;

        $stack4 = virtualinvoke $stack3.<java.lang.Float: boolean isInfinite()>();

        if $stack4 != 0 goto label3;

        $stack6 = (java.lang.Float) o;

        $stack7 = virtualinvoke $stack6.<java.lang.Float: boolean isNaN()>();

        if $stack7 == 0 goto label4;

     label3:
        $u1 = new org.json.JSONException;

        specialinvoke $u1.<org.json.JSONException: void <init>(java.lang.String)>("JSON does not allow non-finite numbers.");

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label4:
        return;
    }

    public org.json.JSONArray toJSONArray(org.json.JSONArray) throws org.json.JSONException
    {
        org.json.JSONArray names, $u0;
        int $stack4, $stack6, i;
        JSONObject this;
        java.lang.String $stack7;
        java.lang.Object $stack8;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        names := @parameter0: org.json.JSONArray;

        if names == null goto label1;

        $stack4 = virtualinvoke names.<org.json.JSONArray: int length()>();

        if $stack4 != 0 goto label2;

     label1:
        return null;

     label2:
        $u0 = new org.json.JSONArray;

        specialinvoke $u0.<org.json.JSONArray: void <init>()>();

        i = 0;

     label3:
        $stack6 = virtualinvoke names.<org.json.JSONArray: int length()>();

        if i >= $stack6 goto label4;

        $stack7 = virtualinvoke names.<org.json.JSONArray: java.lang.String getString(int)>(i);

        $r0 = (org.json.JSONObject) this;

        $stack8 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($stack7);

        virtualinvoke $u0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($stack8);

        i = i + 1;

        goto label3;

     label4:
        return $u0;
    }

    public java.lang.String toString()
    {
        JSONObject this;
        boolean $stack6;
        java.lang.String $stack8, $stack11, $stack12, $stack17;
        int $stack9;
        java.lang.Object o, $stack16;
        java.util.Map $stack15;
        java.lang.Exception $stack29;
        java.util.Iterator keys;
        java.lang.StringBuffer $u0;
        org.json.JSONObject $r0, $r1;

        this := @this: JSONObject;

     label1:
        $r0 = (org.json.JSONObject) this;

        keys = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

        $u0 = new java.lang.StringBuffer;

        specialinvoke $u0.<java.lang.StringBuffer: void <init>(java.lang.String)>("{");

     label2:
        $stack6 = interfaceinvoke keys.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label4;

        $stack9 = virtualinvoke $u0.<java.lang.StringBuffer: int length()>();

        if $stack9 <= 1 goto label3;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label3:
        o = interfaceinvoke keys.<java.util.Iterator: java.lang.Object next()>();

        $stack11 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        $stack12 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($stack11);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack12);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r1 = (org.json.JSONObject) this;

        $stack15 = $r1.<org.json.JSONObject: java.util.Map map>;

        $stack16 = interfaceinvoke $stack15.<java.util.Map: java.lang.Object get(java.lang.Object)>(o);

        $stack17 = staticinvoke <org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>($stack16);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack17);

        goto label2;

     label4:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $stack8 = virtualinvoke $u0.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        return $stack8;

     label6:
        $stack29 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public java.lang.String toString(int) throws org.json.JSONException
    {
        JSONObject this;
        int indentFactor;
        java.lang.String $stack2;
        org.json.JSONObject $r0;

        this := @this: JSONObject;

        indentFactor := @parameter0: int;

        $r0 = (org.json.JSONObject) this;

        $stack2 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String toString(int,int)>(indentFactor, 0);

        return $stack2;
    }

    java.lang.String toString(int, int) throws org.json.JSONException
    {
        JSONObject this;
        int n, indent, indentFactor, newindent, $stack13, $stack24, j;
        java.util.Iterator keys;
        boolean $stack12;
        java.lang.String $stack26, $stack27, $stack32, $stack41, $stack42, $stack47, $stack15;
        java.util.Map $stack30, $stack45;
        java.lang.Object $stack31, $stack46, o;
        java.lang.StringBuffer $u0;
        org.json.JSONObject $r0, $r1, $r2, $r3;

        this := @this: JSONObject;

        indentFactor := @parameter0: int;

        indent := @parameter1: int;

        $r0 = (org.json.JSONObject) this;

        n = virtualinvoke $r0.<org.json.JSONObject: int length()>();

        if n != 0 goto label1;

        return "{}";

     label1:
        $r1 = (org.json.JSONObject) this;

        keys = virtualinvoke $r1.<org.json.JSONObject: java.util.Iterator sortedKeys()>();

        $u0 = new java.lang.StringBuffer;

        specialinvoke $u0.<java.lang.StringBuffer: void <init>(java.lang.String)>("{");

        newindent = indent + indentFactor;

        if n != 1 goto label2;

        o = interfaceinvoke keys.<java.util.Iterator: java.lang.Object next()>();

        $stack41 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        $stack42 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($stack41);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack42);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r2 = (org.json.JSONObject) this;

        $stack45 = $r2.<org.json.JSONObject: java.util.Map map>;

        $stack46 = interfaceinvoke $stack45.<java.util.Map: java.lang.Object get(java.lang.Object)>(o);

        $stack47 = staticinvoke <org.json.JSONObject: java.lang.String valueToString(java.lang.Object,int,int)>($stack46, indentFactor, indent);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack47);

        goto label9;

     label2:
        $stack12 = interfaceinvoke keys.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label7;

        o = interfaceinvoke keys.<java.util.Iterator: java.lang.Object next()>();

        $stack24 = virtualinvoke $u0.<java.lang.StringBuffer: int length()>();

        if $stack24 <= 1 goto label3;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",\n");

        goto label4;

     label3:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label4:
        j = 0;

     label5:
        if j >= newindent goto label6;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        j = j + 1;

        goto label5;

     label6:
        $stack26 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        $stack27 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($stack26);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack27);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r3 = (org.json.JSONObject) this;

        $stack30 = $r3.<org.json.JSONObject: java.util.Map map>;

        $stack31 = interfaceinvoke $stack30.<java.util.Map: java.lang.Object get(java.lang.Object)>(o);

        $stack32 = staticinvoke <org.json.JSONObject: java.lang.String valueToString(java.lang.Object,int,int)>($stack31, indentFactor, newindent);

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack32);

        goto label2;

     label7:
        $stack13 = virtualinvoke $u0.<java.lang.StringBuffer: int length()>();

        if $stack13 <= 1 goto label9;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        j = 0;

     label8:
        if j >= indent goto label9;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        j = j + 1;

        goto label8;

     label9:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $stack15 = virtualinvoke $u0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack15;
    }

    static java.lang.String valueToString(java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object value;
        boolean $stack3, $stack4, $stack5, $stack6, $stack8, $stack10, $stack11, $stack12, $stack14, $stack29;
        java.lang.Class $stack13;
        java.lang.String $stack15, $stack16, $stack18, $stack21, $stack24, $stack26, o, $stack31, $stack32, $stack7;
        java.util.Collection $stack20;
        java.util.Map $stack23;
        java.lang.Number $stack25;
        org.json.JSONString $stack27;
        java.lang.Exception $stack34;
        org.json.JSONException $u0, $u1;
        org.json.JSONObject $u2;
        org.json.JSONArray $u3, $u4;
        java.lang.Throwable $r0, $r1;

        value := @parameter0: java.lang.Object;

        if value == null goto label01;

        $stack3 = virtualinvoke value.<java.lang.Object: boolean equals(java.lang.Object)>(null);

        if $stack3 == 0 goto label02;

     label01:
        return "null";

     label02:
        $stack4 = value instanceof org.json.JSONString;

        if $stack4 == 0 goto label08;

     label03:
        $stack27 = (org.json.JSONString) value;

        o = interfaceinvoke $stack27.<org.json.JSONString: java.lang.String toJSONString()>();

     label04:
        goto label06;

     label05:
        $stack34 := @caughtexception;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.Throwable)>($stack34);

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label06:
        $stack29 = o instanceof java.lang.String;

        if $stack29 == 0 goto label07;

        $stack32 = (java.lang.String) o;

        return $stack32;

     label07:
        $u1 = new org.json.JSONException;

        $stack31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(o) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Bad value from toJSONString: \u0001");

        specialinvoke $u1.<org.json.JSONException: void <init>(java.lang.String)>($stack31);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label08:
        $stack5 = value instanceof java.lang.Number;

        if $stack5 == 0 goto label09;

        $stack25 = (java.lang.Number) value;

        $stack26 = staticinvoke <org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($stack25);

        return $stack26;

     label09:
        $stack6 = value instanceof java.lang.Boolean;

        if $stack6 != 0 goto label10;

        $stack8 = value instanceof org.json.JSONObject;

        if $stack8 != 0 goto label10;

        $stack10 = value instanceof org.json.JSONArray;

        if $stack10 == 0 goto label11;

     label10:
        $stack7 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>();

        return $stack7;

     label11:
        $stack11 = value instanceof java.util.Map;

        if $stack11 == 0 goto label12;

        $u2 = new org.json.JSONObject;

        $stack23 = (java.util.Map) value;

        specialinvoke $u2.<org.json.JSONObject: void <init>(java.lang.Object)>($stack23);

        $stack24 = virtualinvoke $u2.<org.json.JSONObject: java.lang.String toString()>();

        return $stack24;

     label12:
        $stack12 = value instanceof java.util.Collection;

        if $stack12 == 0 goto label13;

        $u3 = new org.json.JSONArray;

        $stack20 = (java.util.Collection) value;

        specialinvoke $u3.<org.json.JSONArray: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $u3.<org.json.JSONArray: java.lang.String toString()>();

        return $stack21;

     label13:
        $stack13 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>();

        $stack14 = virtualinvoke $stack13.<java.lang.Class: boolean isArray()>();

        if $stack14 == 0 goto label14;

        $u4 = new org.json.JSONArray;

        specialinvoke $u4.<org.json.JSONArray: void <init>(java.lang.Object)>(value);

        $stack18 = virtualinvoke $u4.<org.json.JSONArray: java.lang.String toString()>();

        return $stack18;

     label14:
        $stack15 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>();

        $stack16 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($stack15);

        return $stack16;

        catch java.lang.Exception from label03 to label04 with label05;
    }

    static java.lang.String valueToString(java.lang.Object, int, int) throws org.json.JSONException
    {
        java.lang.Object value;
        boolean $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack13, $stack33;
        java.lang.Class $stack12;
        java.lang.String $stack14, $stack15, $stack17, $stack20, $stack23, $stack25, $stack27, $stack28, $stack30, $stack34, o;
        org.json.JSONArray $stack16, $stack18, $stack24;
        int indentFactor, indent;
        java.util.Collection $stack19;
        org.json.JSONObject $stack21, $stack26;
        java.util.Map $stack22;
        java.lang.Number $stack29;
        org.json.JSONString $stack31;
        java.lang.Exception $stack36;

        value := @parameter0: java.lang.Object;

        indentFactor := @parameter1: int;

        indent := @parameter2: int;

        if value == null goto label01;

        $stack4 = virtualinvoke value.<java.lang.Object: boolean equals(java.lang.Object)>(null);

        if $stack4 == 0 goto label02;

     label01:
        return "null";

     label02:
        $stack5 = value instanceof org.json.JSONString;

        if $stack5 == 0 goto label04;

        $stack31 = (org.json.JSONString) value;

        o = interfaceinvoke $stack31.<org.json.JSONString: java.lang.String toJSONString()>();

        $stack33 = o instanceof java.lang.String;

        if $stack33 == 0 goto label04;

        $stack34 = (java.lang.String) o;

     label03:
        return $stack34;

     label04:
        goto label06;

     label05:
        $stack36 := @caughtexception;

     label06:
        $stack6 = value instanceof java.lang.Number;

        if $stack6 == 0 goto label07;

        $stack29 = (java.lang.Number) value;

        $stack30 = staticinvoke <org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($stack29);

        return $stack30;

     label07:
        $stack7 = value instanceof java.lang.Boolean;

        if $stack7 == 0 goto label08;

        $stack28 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>();

        return $stack28;

     label08:
        $stack8 = value instanceof org.json.JSONObject;

        if $stack8 == 0 goto label09;

        $stack26 = (org.json.JSONObject) value;

        $stack27 = virtualinvoke $stack26.<org.json.JSONObject: java.lang.String toString(int,int)>(indentFactor, indent);

        return $stack27;

     label09:
        $stack9 = value instanceof org.json.JSONArray;

        if $stack9 == 0 goto label10;

        $stack24 = (org.json.JSONArray) value;

        $stack25 = virtualinvoke $stack24.<org.json.JSONArray: java.lang.String toString(int,int)>(indentFactor, indent);

        return $stack25;

     label10:
        $stack10 = value instanceof java.util.Map;

        if $stack10 == 0 goto label11;

        $stack21 = new org.json.JSONObject;

        $stack22 = (java.util.Map) value;

        specialinvoke $stack21.<org.json.JSONObject: void <init>(java.lang.Object)>($stack22);

        $stack23 = virtualinvoke $stack21.<org.json.JSONObject: java.lang.String toString(int,int)>(indentFactor, indent);

        return $stack23;

     label11:
        $stack11 = value instanceof java.util.Collection;

        if $stack11 == 0 goto label12;

        $stack18 = new org.json.JSONArray;

        $stack19 = (java.util.Collection) value;

        specialinvoke $stack18.<org.json.JSONArray: void <init>(java.lang.Object)>($stack19);

        $stack20 = virtualinvoke $stack18.<org.json.JSONArray: java.lang.String toString(int,int)>(indentFactor, indent);

        return $stack20;

     label12:
        $stack12 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>();

        $stack13 = virtualinvoke $stack12.<java.lang.Class: boolean isArray()>();

        if $stack13 == 0 goto label13;

        $stack16 = new org.json.JSONArray;

        specialinvoke $stack16.<org.json.JSONArray: void <init>(java.lang.Object)>(value);

        $stack17 = virtualinvoke $stack16.<org.json.JSONArray: java.lang.String toString(int,int)>(indentFactor, indent);

        return $stack17;

     label13:
        $stack14 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>();

        $stack15 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($stack14);

        return $stack15;

        catch java.lang.Exception from label02 to label03 with label05;
    }

    public java.io.Writer write(java.io.Writer) throws org.json.JSONException
    {
        JSONObject this;
        java.util.Iterator keys;
        java.io.Writer writer;
        boolean $stack7, $stack13, $stack14, b;
        java.lang.Object k, v;
        java.lang.String $stack9, $stack10, $stack15;
        java.util.Map $stack11;
        org.json.JSONArray $stack17;
        org.json.JSONObject $stack20, $r0, $r1;
        java.io.IOException $stack30;
        org.json.JSONException $u0;
        java.lang.Throwable $r2;

        this := @this: JSONObject;

        writer := @parameter0: java.io.Writer;

     label1:
        b = 0;

        $r0 = (org.json.JSONObject) this;

        keys = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

        virtualinvoke writer.<java.io.Writer: void write(int)>(123);

     label2:
        $stack7 = interfaceinvoke keys.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label7;

        if b == 0 goto label3;

        virtualinvoke writer.<java.io.Writer: void write(int)>(44);

     label3:
        k = interfaceinvoke keys.<java.util.Iterator: java.lang.Object next()>();

        $stack9 = virtualinvoke k.<java.lang.Object: java.lang.String toString()>();

        $stack10 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($stack9);

        virtualinvoke writer.<java.io.Writer: void write(java.lang.String)>($stack10);

        virtualinvoke writer.<java.io.Writer: void write(int)>(58);

        $r1 = (org.json.JSONObject) this;

        $stack11 = $r1.<org.json.JSONObject: java.util.Map map>;

        v = interfaceinvoke $stack11.<java.util.Map: java.lang.Object get(java.lang.Object)>(k);

        $stack13 = v instanceof org.json.JSONObject;

        if $stack13 == 0 goto label4;

        $stack20 = (org.json.JSONObject) v;

        virtualinvoke $stack20.<org.json.JSONObject: java.io.Writer write(java.io.Writer)>(writer);

        goto label6;

     label4:
        $stack14 = v instanceof org.json.JSONArray;

        if $stack14 == 0 goto label5;

        $stack17 = (org.json.JSONArray) v;

        virtualinvoke $stack17.<org.json.JSONArray: java.io.Writer write(java.io.Writer)>(writer);

        goto label6;

     label5:
        $stack15 = staticinvoke <org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>(v);

        virtualinvoke writer.<java.io.Writer: void write(java.lang.String)>($stack15);

     label6:
        b = 1;

        goto label2;

     label7:
        virtualinvoke writer.<java.io.Writer: void write(int)>(125);

     label8:
        return writer;

     label9:
        $stack30 := @caughtexception;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.Throwable)>($stack30);

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

        catch java.io.IOException from label1 to label8 with label9;
    }

    static void <clinit>()
    {
        org.json.JSONObject$Null $stack0;

        $stack0 = new org.json.JSONObject$Null;

        specialinvoke $stack0.<org.json.JSONObject$Null: void <init>()>();

        <org.json.JSONObject: java.lang.Object NULL> = $stack0;

        return;
    }
}
