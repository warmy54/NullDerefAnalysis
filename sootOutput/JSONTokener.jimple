public class JSONTokener extends java.lang.Object
{
    private int index;
    private java.io.Reader reader;
    private char lastChar;
    private boolean useLastChar;

    public void <init>(java.io.Reader)
    {
        JSONTokener this;
        java.io.Reader reader, $stack3;
        boolean $stack2;
        java.io.BufferedReader $u0;
        org.json.JSONTokener $r0, $r1, $r2;

        this := @this: JSONTokener;

        reader := @parameter0: java.io.Reader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = virtualinvoke reader.<java.io.Reader: boolean markSupported()>();

        if $stack2 == 0 goto label1;

        $stack3 = reader;

        goto label2;

     label1:
        $u0 = new java.io.BufferedReader;

        $stack3 = $u0;

        specialinvoke $u0.<java.io.BufferedReader: void <init>(java.io.Reader)>(reader);

     label2:
        $r0 = (org.json.JSONTokener) this;

        $r0.<org.json.JSONTokener: java.io.Reader reader> = $stack3;

        $r1 = (org.json.JSONTokener) this;

        $r1.<org.json.JSONTokener: boolean useLastChar> = 0;

        $r2 = (org.json.JSONTokener) this;

        $r2.<org.json.JSONTokener: int index> = 0;

        return;
    }

    public void <init>(java.lang.String)
    {
        JSONTokener this;
        java.lang.String s;
        java.io.StringReader $u0;
        org.json.JSONTokener $r0;

        this := @this: JSONTokener;

        s := @parameter0: java.lang.String;

        $u0 = new java.io.StringReader;

        specialinvoke $u0.<java.io.StringReader: void <init>(java.lang.String)>(s);

        $r0 = (org.json.JSONTokener) this;

        specialinvoke $r0.<org.json.JSONTokener: void <init>(java.io.Reader)>($u0);

        return;
    }

    public void back() throws org.json.JSONException
    {
        JSONTokener this;
        boolean $stack1;
        int $stack3, $stack4, $stack5;
        org.json.JSONException $u0;
        org.json.JSONTokener $r0, $r1, $r3, $r4, $r5;
        java.lang.Throwable $r2;

        this := @this: JSONTokener;

        $r0 = (org.json.JSONTokener) this;

        $stack1 = $r0.<org.json.JSONTokener: boolean useLastChar>;

        if $stack1 != 0 goto label1;

        $r1 = (org.json.JSONTokener) this;

        $stack3 = $r1.<org.json.JSONTokener: int index>;

        if $stack3 > 0 goto label2;

     label1:
        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>("Stepping back two steps is not supported");

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label2:
        $r3 = (org.json.JSONTokener) this;

        $stack4 = $r3.<org.json.JSONTokener: int index>;

        $stack5 = $stack4 - 1;

        $r4 = (org.json.JSONTokener) this;

        $r4.<org.json.JSONTokener: int index> = $stack5;

        $r5 = (org.json.JSONTokener) this;

        $r5.<org.json.JSONTokener: boolean useLastChar> = 1;

        return;
    }

    public static int dehexchar(char)
    {
        char c;
        int $stack2, $stack5, $stack8;

        c := @parameter0: char;

        if c < 48 goto label1;

        if c > 57 goto label1;

        $stack8 = c - 48;

        return $stack8;

     label1:
        if c < 65 goto label2;

        if c > 70 goto label2;

        $stack5 = c - 55;

        return $stack5;

     label2:
        if c < 97 goto label3;

        if c > 102 goto label3;

        $stack2 = c - 87;

        return $stack2;

     label3:
        return -1;
    }

    public boolean more() throws org.json.JSONException
    {
        JSONTokener this;
        char nextChar;
        org.json.JSONTokener $r0, $r1;

        this := @this: JSONTokener;

        $r0 = (org.json.JSONTokener) this;

        nextChar = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if nextChar != 0 goto label1;

        return 0;

     label1:
        $r1 = (org.json.JSONTokener) this;

        virtualinvoke $r1.<org.json.JSONTokener: void back()>();

        return 1;
    }

    public char next() throws org.json.JSONException
    {
        JSONTokener this;
        boolean $stack3;
        java.io.Reader $stack4;
        int c, $stack6, $stack7, $stack12, $stack13;
        char $stack8, $stack9, $stack10, $stack11;
        java.io.IOException $stack15;
        org.json.JSONException $u0;
        org.json.JSONTokener $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        java.lang.Throwable $r7;

        this := @this: JSONTokener;

        $r0 = (org.json.JSONTokener) this;

        $stack3 = $r0.<org.json.JSONTokener: boolean useLastChar>;

        if $stack3 == 0 goto label2;

        $r1 = (org.json.JSONTokener) this;

        $r1.<org.json.JSONTokener: boolean useLastChar> = 0;

        $r2 = (org.json.JSONTokener) this;

        $stack10 = $r2.<org.json.JSONTokener: char lastChar>;

        if $stack10 == 0 goto label1;

        $r3 = (org.json.JSONTokener) this;

        $stack12 = $r3.<org.json.JSONTokener: int index>;

        $stack13 = $stack12 + 1;

        $r4 = (org.json.JSONTokener) this;

        $r4.<org.json.JSONTokener: int index> = $stack13;

     label1:
        $r5 = (org.json.JSONTokener) this;

        $stack11 = $r5.<org.json.JSONTokener: char lastChar>;

        return $stack11;

     label2:
        $r6 = (org.json.JSONTokener) this;

        $stack4 = $r6.<org.json.JSONTokener: java.io.Reader reader>;

        c = virtualinvoke $stack4.<java.io.Reader: int read()>();

     label3:
        goto label5;

     label4:
        $stack15 := @caughtexception;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.Throwable)>($stack15);

        $r7 = (java.lang.Throwable) $u0;

        throw $r7;

     label5:
        if c > 0 goto label6;

        $r8 = (org.json.JSONTokener) this;

        $r8.<org.json.JSONTokener: char lastChar> = 0;

        return 0;

     label6:
        $r9 = (org.json.JSONTokener) this;

        $stack6 = $r9.<org.json.JSONTokener: int index>;

        $stack7 = $stack6 + 1;

        $r10 = (org.json.JSONTokener) this;

        $r10.<org.json.JSONTokener: int index> = $stack7;

        $stack8 = (char) c;

        $r11 = (org.json.JSONTokener) this;

        $r11.<org.json.JSONTokener: char lastChar> = $stack8;

        $r12 = (org.json.JSONTokener) this;

        $stack9 = $r12.<org.json.JSONTokener: char lastChar>;

        return $stack9;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public char next(char) throws org.json.JSONException
    {
        JSONTokener this;
        char n, c;
        java.lang.String $stack4;
        org.json.JSONException $stack5;
        org.json.JSONTokener $r0, $r1;
        java.lang.Throwable $r2;

        this := @this: JSONTokener;

        c := @parameter0: char;

        $r0 = (org.json.JSONTokener) this;

        n = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if n == c goto label1;

        $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,char)>(c, n) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \'\u0001\' and instead saw \'\u0001\'");

        $r1 = (org.json.JSONTokener) this;

        $stack5 = virtualinvoke $r1.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>($stack4);

        $r2 = (java.lang.Throwable) $stack5;

        throw $r2;

     label1:
        return n;
    }

    public java.lang.String next(int) throws org.json.JSONException
    {
        int n, $stack6, $stack7, $stack8, $stack12, $stack14, pos;
        char[] buffer;
        JSONTokener this;
        boolean $stack5;
        char $stack9, $stack17;
        org.json.JSONException $stack11, $u0;
        java.io.Reader $stack13;
        java.io.IOException $stack18;
        java.lang.String $u1;
        org.json.JSONTokener $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r9;
        java.lang.Throwable $r4, $r8;

        this := @this: JSONTokener;

        n := @parameter0: int;

        if n != 0 goto label1;

        return "";

     label1:
        buffer = newarray (char)[n];

        pos = 0;

        $r0 = (org.json.JSONTokener) this;

        $stack5 = $r0.<org.json.JSONTokener: boolean useLastChar>;

        if $stack5 == 0 goto label2;

        $r1 = (org.json.JSONTokener) this;

        $r1.<org.json.JSONTokener: boolean useLastChar> = 0;

        $r2 = (org.json.JSONTokener) this;

        $stack17 = $r2.<org.json.JSONTokener: char lastChar>;

        buffer[0] = $stack17;

        pos = 1;

     label2:
        if pos >= n goto label3;

        $r3 = (org.json.JSONTokener) this;

        $stack13 = $r3.<org.json.JSONTokener: java.io.Reader reader>;

        $stack12 = n - pos;

        $stack14 = virtualinvoke $stack13.<java.io.Reader: int read(char[],int,int)>(buffer, pos, $stack12);

        if $stack14 == -1 goto label3;

        pos = pos + $stack14;

        goto label2;

     label3:
        goto label5;

     label4:
        $stack18 := @caughtexception;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.Throwable)>($stack18);

        $r4 = (java.lang.Throwable) $u0;

        throw $r4;

     label5:
        $r5 = (org.json.JSONTokener) this;

        $stack6 = $r5.<org.json.JSONTokener: int index>;

        $stack7 = $stack6 + pos;

        $r6 = (org.json.JSONTokener) this;

        $r6.<org.json.JSONTokener: int index> = $stack7;

        if pos >= n goto label6;

        $r7 = (org.json.JSONTokener) this;

        $stack11 = virtualinvoke $r7.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Substring bounds error");

        $r8 = (java.lang.Throwable) $stack11;

        throw $r8;

     label6:
        $stack8 = n - 1;

        $stack9 = buffer[$stack8];

        $r9 = (org.json.JSONTokener) this;

        $r9.<org.json.JSONTokener: char lastChar> = $stack9;

        $u1 = new java.lang.String;

        specialinvoke $u1.<java.lang.String: void <init>(char[])>(buffer);

        return $u1;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public char nextClean() throws org.json.JSONException
    {
        JSONTokener this;
        char c;
        org.json.JSONTokener $r0;

        this := @this: JSONTokener;

     label1:
        $r0 = (org.json.JSONTokener) this;

        c = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if c == 0 goto label2;

        if c <= 32 goto label3;

     label2:
        return c;

     label3:
        goto label1;
    }

    public java.lang.String nextString(char) throws org.json.JSONException
    {
        JSONTokener this;
        java.lang.String $stack7, $stack22;
        int $stack8;
        char $stack9, quote, c;
        org.json.JSONException $stack19, $stack20;
        java.lang.StringBuffer $u0;
        org.json.JSONTokener $r0, $r1, $r3, $r4, $r5;
        java.lang.Throwable $r2, $r6;

        this := @this: JSONTokener;

        quote := @parameter0: char;

        $u0 = new java.lang.StringBuffer;

        specialinvoke $u0.<java.lang.StringBuffer: void <init>()>();

     label01:
        $r0 = (org.json.JSONTokener) this;

        c = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        lookupswitch(c)
        {
            case 0: goto label02;
            case 10: goto label02;
            case 13: goto label02;
            case 92: goto label03;
            default: goto label12;
        };

     label02:
        $r1 = (org.json.JSONTokener) this;

        $stack20 = virtualinvoke $r1.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        $r2 = (java.lang.Throwable) $stack20;

        throw $r2;

     label03:
        $r3 = (org.json.JSONTokener) this;

        c = virtualinvoke $r3.<org.json.JSONTokener: char next()>();

        lookupswitch(c)
        {
            case 34: goto label10;
            case 39: goto label10;
            case 47: goto label10;
            case 92: goto label10;
            case 98: goto label04;
            case 102: goto label07;
            case 110: goto label06;
            case 114: goto label08;
            case 116: goto label05;
            case 117: goto label09;
            default: goto label11;
        };

     label04:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(8);

        goto label01;

     label05:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(9);

        goto label01;

     label06:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label01;

     label07:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(12);

        goto label01;

     label08:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(13);

        goto label01;

     label09:
        $r4 = (org.json.JSONTokener) this;

        $stack7 = virtualinvoke $r4.<org.json.JSONTokener: java.lang.String next(int)>(4);

        $stack8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($stack7, 16);

        $stack9 = (char) $stack8;

        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack9);

        goto label01;

     label10:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        goto label01;

     label11:
        $r5 = (org.json.JSONTokener) this;

        $stack19 = virtualinvoke $r5.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Illegal escape.");

        $r6 = (java.lang.Throwable) $stack19;

        throw $r6;

     label12:
        if c != quote goto label13;

        $stack22 = virtualinvoke $u0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack22;

     label13:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        goto label01;
    }

    public java.lang.String nextTo(char) throws org.json.JSONException
    {
        JSONTokener this;
        char c, d;
        java.lang.String $stack6, $stack7;
        java.lang.StringBuffer $u0;
        org.json.JSONTokener $r0, $r1;

        this := @this: JSONTokener;

        d := @parameter0: char;

        $u0 = new java.lang.StringBuffer;

        specialinvoke $u0.<java.lang.StringBuffer: void <init>()>();

     label1:
        $r0 = (org.json.JSONTokener) this;

        c = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if c == d goto label2;

        if c == 0 goto label2;

        if c == 10 goto label2;

        if c != 13 goto label4;

     label2:
        if c == 0 goto label3;

        $r1 = (org.json.JSONTokener) this;

        virtualinvoke $r1.<org.json.JSONTokener: void back()>();

     label3:
        $stack6 = virtualinvoke $u0.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String trim()>();

        return $stack7;

     label4:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        goto label1;
    }

    public java.lang.String nextTo(java.lang.String) throws org.json.JSONException
    {
        JSONTokener this;
        char c;
        java.lang.String delimiters, $stack7, $stack8;
        int $stack6;
        java.lang.StringBuffer $u0;
        org.json.JSONTokener $r0, $r1;

        this := @this: JSONTokener;

        delimiters := @parameter0: java.lang.String;

        $u0 = new java.lang.StringBuffer;

        specialinvoke $u0.<java.lang.StringBuffer: void <init>()>();

     label1:
        $r0 = (org.json.JSONTokener) this;

        c = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        $stack6 = virtualinvoke delimiters.<java.lang.String: int indexOf(int)>(c);

        if $stack6 >= 0 goto label2;

        if c == 0 goto label2;

        if c == 10 goto label2;

        if c != 13 goto label4;

     label2:
        if c == 0 goto label3;

        $r1 = (org.json.JSONTokener) this;

        virtualinvoke $r1.<org.json.JSONTokener: void back()>();

     label3:
        $stack7 = virtualinvoke $u0.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack8 = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>();

        return $stack8;

     label4:
        virtualinvoke $u0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        goto label1;
    }

    public java.lang.Object nextValue() throws org.json.JSONException
    {
        JSONTokener this;
        java.lang.String $stack7, $stack9, s, $stack14;
        boolean $stack11;
        java.lang.Object $stack12;
        org.json.JSONException $stack13;
        int $stack15;
        char c;
        org.json.JSONObject $u0;
        org.json.JSONArray $u1;
        java.lang.StringBuffer $u2;
        org.json.JSONTokener $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.Throwable $r9;

        this := @this: JSONTokener;

        $r0 = (org.json.JSONTokener) this;

        c = virtualinvoke $r0.<org.json.JSONTokener: char nextClean()>();

        lookupswitch(c)
        {
            case 34: goto label1;
            case 39: goto label1;
            case 40: goto label3;
            case 91: goto label3;
            case 123: goto label2;
            default: goto label4;
        };

     label1:
        $r1 = (org.json.JSONTokener) this;

        $stack7 = virtualinvoke $r1.<org.json.JSONTokener: java.lang.String nextString(char)>(c);

        return $stack7;

     label2:
        $r2 = (org.json.JSONTokener) this;

        virtualinvoke $r2.<org.json.JSONTokener: void back()>();

        $u0 = new org.json.JSONObject;

        $r3 = (org.json.JSONTokener) this;

        specialinvoke $u0.<org.json.JSONObject: void <init>(org.json.JSONTokener)>($r3);

        return $u0;

     label3:
        $r4 = (org.json.JSONTokener) this;

        virtualinvoke $r4.<org.json.JSONTokener: void back()>();

        $u1 = new org.json.JSONArray;

        $r5 = (org.json.JSONTokener) this;

        specialinvoke $u1.<org.json.JSONArray: void <init>(org.json.JSONTokener)>($r5);

        return $u1;

     label4:
        $u2 = new java.lang.StringBuffer;

        specialinvoke $u2.<java.lang.StringBuffer: void <init>()>();

     label5:
        if c < 32 goto label6;

        $stack14 = ",:]}/\\\"[{;=#";

        $stack15 = virtualinvoke $stack14.<java.lang.String: int indexOf(int)>(c);

        if $stack15 >= 0 goto label6;

        virtualinvoke $u2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        $r6 = (org.json.JSONTokener) this;

        c = virtualinvoke $r6.<org.json.JSONTokener: char next()>();

        goto label5;

     label6:
        $r7 = (org.json.JSONTokener) this;

        virtualinvoke $r7.<org.json.JSONTokener: void back()>();

        $stack9 = virtualinvoke $u2.<java.lang.StringBuffer: java.lang.String toString()>();

        s = virtualinvoke $stack9.<java.lang.String: java.lang.String trim()>();

        $stack11 = virtualinvoke s.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $stack11 == 0 goto label7;

        $r8 = (org.json.JSONTokener) this;

        $stack13 = virtualinvoke $r8.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Missing value");

        $r9 = (java.lang.Throwable) $stack13;

        throw $r9;

     label7:
        $stack12 = staticinvoke <org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>(s);

        return $stack12;
    }

    public char skipTo(char) throws org.json.JSONException
    {
        JSONTokener this;
        java.io.Reader $stack4, $stack8;
        char c, 'to';
        java.io.IOException $stack9;
        int startIndex;
        org.json.JSONException $u0;
        org.json.JSONTokener $r0, $r1, $r2, $r3, $r4, $r6;
        java.lang.Throwable $r5;

        this := @this: JSONTokener;

        'to' := @parameter0: char;

     label1:
        $r0 = (org.json.JSONTokener) this;

        startIndex = $r0.<org.json.JSONTokener: int index>;

        $r1 = (org.json.JSONTokener) this;

        $stack4 = $r1.<org.json.JSONTokener: java.io.Reader reader>;

        virtualinvoke $stack4.<java.io.Reader: void mark(int)>(2147483647);

     label2:
        $r2 = (org.json.JSONTokener) this;

        c = virtualinvoke $r2.<org.json.JSONTokener: char next()>();

        if c != 0 goto label4;

        $r3 = (org.json.JSONTokener) this;

        $stack8 = $r3.<org.json.JSONTokener: java.io.Reader reader>;

        virtualinvoke $stack8.<java.io.Reader: void reset()>();

        $r4 = (org.json.JSONTokener) this;

        $r4.<org.json.JSONTokener: int index> = startIndex;

     label3:
        return c;

     label4:
        if c != 'to' goto label2;

     label5:
        goto label7;

     label6:
        $stack9 := @caughtexception;

        $u0 = new org.json.JSONException;

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.Throwable)>($stack9);

        $r5 = (java.lang.Throwable) $u0;

        throw $r5;

     label7:
        $r6 = (org.json.JSONTokener) this;

        virtualinvoke $r6.<org.json.JSONTokener: void back()>();

        return c;

        catch java.io.IOException from label1 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public org.json.JSONException syntaxError(java.lang.String)
    {
        java.lang.String message, $stack3, $stack4;
        JSONTokener this;
        org.json.JSONException $u0;
        org.json.JSONTokener $r0;

        this := @this: JSONTokener;

        message := @parameter0: java.lang.String;

        $u0 = new org.json.JSONException;

        $r0 = (org.json.JSONTokener) this;

        $stack3 = virtualinvoke $r0.<org.json.JSONTokener: java.lang.String toString()>();

        $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(message, $stack3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");

        specialinvoke $u0.<org.json.JSONException: void <init>(java.lang.String)>($stack4);

        return $u0;
    }

    public java.lang.String toString()
    {
        JSONTokener this;
        int $stack1;
        java.lang.String $stack2;
        org.json.JSONTokener $r0;

        this := @this: JSONTokener;

        $r0 = (org.json.JSONTokener) this;

        $stack1 = $r0.<org.json.JSONTokener: int index>;

        $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>($stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" at character \u0001");

        return $stack2;
    }
}
