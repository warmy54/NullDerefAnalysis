public class Java2DFrameConverter extends org.bytedeco.javacv.FrameConverter
{
    public static final byte[] gamma22;
    public static final byte[] gamma22inv;
    protected java.awt.image.BufferedImage bufferedImage;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        Java2DFrameConverter this;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        specialinvoke this.<org.bytedeco.javacv.FrameConverter: void <init>()>();

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $r0.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage> = null;

        return;
    }

    public org.bytedeco.javacv.Frame convert(java.awt.image.BufferedImage)
    {
        Java2DFrameConverter this;
        java.awt.image.BufferedImage img;
        org.bytedeco.javacv.Frame $stack2;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        img := @parameter0: java.awt.image.BufferedImage;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack2 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame getFrame(java.awt.image.BufferedImage)>(img);

        return $stack2;
    }

    public java.awt.image.BufferedImage convert(org.bytedeco.javacv.Frame)
    {
        Java2DFrameConverter this;
        org.bytedeco.javacv.Frame frame;
        java.awt.image.BufferedImage $stack2;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack2 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame)>(frame);

        return $stack2;
    }

    public static java.awt.image.BufferedImage cloneBufferedImage(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage source, $stack5, $stack10;
        int type, $stack6, $stack7;
        java.awt.Graphics g;
        java.awt.image.ColorModel $stack11;
        java.awt.image.WritableRaster $stack12;
        boolean $stack13;

        source := @parameter0: java.awt.image.BufferedImage;

        if source != null goto label1;

        return null;

     label1:
        type = virtualinvoke source.<java.awt.image.BufferedImage: int getType()>();

        if type != 0 goto label2;

        $stack10 = new java.awt.image.BufferedImage;

        $stack11 = virtualinvoke source.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $stack12 = virtualinvoke source.<java.awt.image.BufferedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(null);

        $stack13 = virtualinvoke source.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        specialinvoke $stack10.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($stack11, $stack12, $stack13, null);

        return $stack10;

     label2:
        $stack5 = new java.awt.image.BufferedImage;

        $stack6 = virtualinvoke source.<java.awt.image.BufferedImage: int getWidth()>();

        $stack7 = virtualinvoke source.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $stack5.<java.awt.image.BufferedImage: void <init>(int,int,int)>($stack6, $stack7, type);

        g = virtualinvoke $stack5.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke g.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(source, 0, 0, null);

        virtualinvoke g.<java.awt.Graphics: void dispose()>();

        return $stack5;
    }

    public static int decodeGamma22(int)
    {
        int value, $stack1, $stack4;
        byte[] $stack2;
        byte $stack3;

        value := @parameter0: int;

        $stack2 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22>;

        $stack1 = value & 255;

        $stack3 = $stack2[$stack1];

        $stack4 = $stack3 & 255;

        return $stack4;
    }

    public static int encodeGamma22(int)
    {
        int value, $stack1, $stack4;
        byte[] $stack2;
        byte $stack3;

        value := @parameter0: int;

        $stack2 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22inv>;

        $stack1 = value & 255;

        $stack3 = $stack2[$stack1];

        $stack4 = $stack3 & 255;

        return $stack4;
    }

    public static void flipCopyWithGamma(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, boolean, double, boolean, int)
    {
        boolean $stack19, flip, signed;
        int srcStep, dstStep, channels, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack31, $stack41, $stack58, $stack62, $stack72, $stack80, $stack88, $stack89, $stack97, $stack101, $stack109, $stack115, $stack116, srcBufferIndex, dstBufferIndex, w, srcLine, dstLine, $stack21, srcBufferIndex#12, dstBufferIndex#13, x, z, out#24, in#37, $stack42;
        byte[] buffer, $stack46, $stack49, $stack75, $stack79;
        java.nio.ByteBuffer srcBuf, dstBuf;
        byte $stack32, $stack33, $stack34, $stack35, $stack59, $stack63, $stack64, $stack65, $stack66, $stack82, $stack98, $stack103, in, out, z#20;
        double gamma, $stack36, $stack37, $stack38, $stack39, $stack67, $stack68, $stack69, $stack70, $stack83, $stack84, $stack85, $stack86, $stack104, $stack105, $stack106, $stack107;
        long $stack40, $stack71, $stack87, $stack108;
        java.lang.AssertionError $stack130;

        srcBuf := @parameter0: java.nio.ByteBuffer;

        srcBufferIndex := @parameter1: int;

        srcStep := @parameter2: int;

        dstBuf := @parameter3: java.nio.ByteBuffer;

        dstBufferIndex := @parameter4: int;

        dstStep := @parameter5: int;

        signed := @parameter6: boolean;

        gamma := @parameter7: double;

        flip := @parameter8: boolean;

        channels := @parameter9: int;

        $stack19 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack19 != 0 goto label01;

        if srcBuf != dstBuf goto label01;

        $stack130 = new java.lang.AssertionError;

        specialinvoke $stack130.<java.lang.AssertionError: void <init>()>();

        throw $stack130;

     label01:
        w = staticinvoke <java.lang.Math: int min(int,int)>(srcStep, dstStep);

        srcLine = srcBufferIndex;

        dstLine = dstBufferIndex;

        buffer = newarray (byte)[channels];

     label02:
        $stack21 = virtualinvoke srcBuf.<java.nio.ByteBuffer: int capacity()>();

        if srcLine >= $stack21 goto label36;

        $stack22 = virtualinvoke dstBuf.<java.nio.ByteBuffer: int capacity()>();

        if dstLine >= $stack22 goto label36;

        if flip == 0 goto label03;

        $stack115 = virtualinvoke srcBuf.<java.nio.ByteBuffer: int capacity()>();

        $stack116 = $stack115 - srcLine;

        srcBufferIndex#12 = $stack116 - srcStep;

        goto label04;

     label03:
        srcBufferIndex#12 = srcLine;

     label04:
        dstBufferIndex#13 = dstLine;

        $stack23 = virtualinvoke srcBuf.<java.nio.ByteBuffer: int capacity()>();

        $stack24 = $stack23 - srcBufferIndex#12;

        $stack25 = staticinvoke <java.lang.Math: int min(int,int)>(w, $stack24);

        $stack26 = virtualinvoke dstBuf.<java.nio.ByteBuffer: int capacity()>();

        $stack27 = $stack26 - dstLine;

        w = staticinvoke <java.lang.Math: int min(int,int)>($stack25, $stack27);

        if signed == 0 goto label18;

        if channels <= 1 goto label13;

        x = 0;

     label05:
        if x >= w goto label12;

        z = 0;

     label06:
        if z >= channels goto label09;

        $stack101 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        in = virtualinvoke srcBuf.<java.nio.ByteBuffer: byte get(int)>($stack101);

        $stack103 = gamma cmpl 1.0;

        if $stack103 != 0 goto label07;

        out = (byte) in;

        goto label08;

     label07:
        $stack104 = (double) in;

        $stack105 = $stack104 / 127.0;

        $stack106 = staticinvoke <java.lang.Math: double pow(double,double)>($stack105, gamma);

        $stack107 = $stack106 * 127.0;

        $stack108 = staticinvoke <java.lang.Math: long round(double)>($stack107);

        $stack109 = (int) $stack108;

        out = (byte) $stack109;

     label08:
        buffer[z] = out;

        z = z + 1;

        goto label06;

     label09:
        z = channels - 1;

     label10:
        if z < 0 goto label11;

        $stack97 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack98 = buffer[z];

        virtualinvoke dstBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack97, $stack98);

        z = z + -1;

        goto label10;

     label11:
        x = x + channels;

        goto label05;

     label12:
        goto label35;

     label13:
        x = 0;

     label14:
        if x >= w goto label17;

        $stack80 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        z#20 = virtualinvoke srcBuf.<java.nio.ByteBuffer: byte get(int)>($stack80);

        $stack82 = gamma cmpl 1.0;

        if $stack82 != 0 goto label15;

        in = (byte) z#20;

        goto label16;

     label15:
        $stack83 = (double) z#20;

        $stack84 = $stack83 / 127.0;

        $stack85 = staticinvoke <java.lang.Math: double pow(double,double)>($stack84, gamma);

        $stack86 = $stack85 * 127.0;

        $stack87 = staticinvoke <java.lang.Math: long round(double)>($stack86);

        $stack88 = (int) $stack87;

        in = (byte) $stack88;

     label16:
        $stack89 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack89, in);

        x = x + 1;

        goto label14;

     label17:
        goto label35;

     label18:
        if channels <= 1 goto label29;

        x = 0;

     label19:
        if x >= w goto label28;

        z = 0;

     label20:
        if z >= channels goto label25;

        $stack62 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        $stack63 = virtualinvoke srcBuf.<java.nio.ByteBuffer: byte get(int)>($stack62);

        out#24 = $stack63 & 255;

        $stack64 = gamma cmpl 1.0;

        if $stack64 != 0 goto label21;

        in = (byte) out#24;

        goto label24;

     label21:
        $stack65 = gamma cmpl 2.2;

        if $stack65 != 0 goto label22;

        $stack79 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22>;

        in = $stack79[out#24];

        goto label24;

     label22:
        $stack66 = gamma cmpl 0.45454545454545453;

        if $stack66 != 0 goto label23;

        $stack75 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22inv>;

        in = $stack75[out#24];

        goto label24;

     label23:
        $stack67 = (double) out#24;

        $stack68 = $stack67 / 255.0;

        $stack69 = staticinvoke <java.lang.Math: double pow(double,double)>($stack68, gamma);

        $stack70 = $stack69 * 255.0;

        $stack71 = staticinvoke <java.lang.Math: long round(double)>($stack70);

        $stack72 = (int) $stack71;

        in = (byte) $stack72;

     label24:
        buffer[z] = in;

        z = z + 1;

        goto label20;

     label25:
        z = channels - 1;

     label26:
        if z < 0 goto label27;

        $stack58 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack59 = buffer[z];

        virtualinvoke dstBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack58, $stack59);

        z = z + -1;

        goto label26;

     label27:
        x = x + channels;

        goto label19;

     label28:
        goto label35;

     label29:
        x = 0;

     label30:
        if x >= w goto label35;

        $stack31 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        $stack32 = virtualinvoke srcBuf.<java.nio.ByteBuffer: byte get(int)>($stack31);

        in#37 = $stack32 & 255;

        $stack33 = gamma cmpl 1.0;

        if $stack33 != 0 goto label31;

        z#20 = (byte) in#37;

        goto label34;

     label31:
        $stack34 = gamma cmpl 2.2;

        if $stack34 != 0 goto label32;

        $stack49 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22>;

        z#20 = $stack49[in#37];

        goto label34;

     label32:
        $stack35 = gamma cmpl 0.45454545454545453;

        if $stack35 != 0 goto label33;

        $stack46 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22inv>;

        z#20 = $stack46[in#37];

        goto label34;

     label33:
        $stack36 = (double) in#37;

        $stack37 = $stack36 / 255.0;

        $stack38 = staticinvoke <java.lang.Math: double pow(double,double)>($stack37, gamma);

        $stack39 = $stack38 * 255.0;

        $stack40 = staticinvoke <java.lang.Math: long round(double)>($stack39);

        $stack41 = (int) $stack40;

        z#20 = (byte) $stack41;

     label34:
        $stack42 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack42, z#20);

        x = x + 1;

        goto label30;

     label35:
        srcLine = srcLine + srcStep;

        dstLine = dstLine + dstStep;

        goto label02;

     label36:
        return;
    }

    public static void flipCopyWithGamma(java.nio.ShortBuffer, int, int, java.nio.ShortBuffer, int, int, boolean, double, boolean, int)
    {
        boolean $stack19, flip, signed;
        int srcStep, dstStep, channels, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack31, $stack39, $stack40, $stack54, $stack58, $stack66, $stack72, $stack80, $stack81, $stack89, $stack93, $stack101, $stack107, $stack108, srcBufferIndex, dstBufferIndex, w, srcLine, dstLine, $stack21, srcBufferIndex#12, dstBufferIndex#13, x, z;
        short[] buffer;
        java.nio.ShortBuffer srcBuf, dstBuf;
        short $stack32, $stack55, $stack90, in, out, z#20;
        double gamma, $stack34, $stack35, $stack36, $stack37, $stack61, $stack62, $stack63, $stack64, $stack75, $stack76, $stack77, $stack78, $stack96, $stack97, $stack98, $stack99;
        byte $stack33, $stack60, $stack74, $stack95;
        long $stack38, $stack65, $stack79, $stack100;
        java.lang.AssertionError $stack122;

        srcBuf := @parameter0: java.nio.ShortBuffer;

        srcBufferIndex := @parameter1: int;

        srcStep := @parameter2: int;

        dstBuf := @parameter3: java.nio.ShortBuffer;

        dstBufferIndex := @parameter4: int;

        dstStep := @parameter5: int;

        signed := @parameter6: boolean;

        gamma := @parameter7: double;

        flip := @parameter8: boolean;

        channels := @parameter9: int;

        $stack19 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack19 != 0 goto label01;

        if srcBuf != dstBuf goto label01;

        $stack122 = new java.lang.AssertionError;

        specialinvoke $stack122.<java.lang.AssertionError: void <init>()>();

        throw $stack122;

     label01:
        w = staticinvoke <java.lang.Math: int min(int,int)>(srcStep, dstStep);

        srcLine = srcBufferIndex;

        dstLine = dstBufferIndex;

        buffer = newarray (short)[channels];

     label02:
        $stack21 = virtualinvoke srcBuf.<java.nio.ShortBuffer: int capacity()>();

        if srcLine >= $stack21 goto label32;

        $stack22 = virtualinvoke dstBuf.<java.nio.ShortBuffer: int capacity()>();

        if dstLine >= $stack22 goto label32;

        if flip == 0 goto label03;

        $stack107 = virtualinvoke srcBuf.<java.nio.ShortBuffer: int capacity()>();

        $stack108 = $stack107 - srcLine;

        srcBufferIndex#12 = $stack108 - srcStep;

        goto label04;

     label03:
        srcBufferIndex#12 = srcLine;

     label04:
        dstBufferIndex#13 = dstLine;

        $stack23 = virtualinvoke srcBuf.<java.nio.ShortBuffer: int capacity()>();

        $stack24 = $stack23 - srcBufferIndex#12;

        $stack25 = staticinvoke <java.lang.Math: int min(int,int)>(w, $stack24);

        $stack26 = virtualinvoke dstBuf.<java.nio.ShortBuffer: int capacity()>();

        $stack27 = $stack26 - dstLine;

        w = staticinvoke <java.lang.Math: int min(int,int)>($stack25, $stack27);

        if signed == 0 goto label18;

        if channels <= 1 goto label13;

        x = 0;

     label05:
        if x >= w goto label12;

        z = 0;

     label06:
        if z >= channels goto label09;

        $stack93 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        in = virtualinvoke srcBuf.<java.nio.ShortBuffer: short get(int)>($stack93);

        $stack95 = gamma cmpl 1.0;

        if $stack95 != 0 goto label07;

        out = (short) in;

        goto label08;

     label07:
        $stack96 = (double) in;

        $stack97 = $stack96 / 32767.0;

        $stack98 = staticinvoke <java.lang.Math: double pow(double,double)>($stack97, gamma);

        $stack99 = $stack98 * 32767.0;

        $stack100 = staticinvoke <java.lang.Math: long round(double)>($stack99);

        $stack101 = (int) $stack100;

        out = (short) $stack101;

     label08:
        buffer[z] = out;

        z = z + 1;

        goto label06;

     label09:
        z = channels - 1;

     label10:
        if z < 0 goto label11;

        $stack89 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack90 = buffer[z];

        virtualinvoke dstBuf.<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>($stack89, $stack90);

        z = z + -1;

        goto label10;

     label11:
        x = x + channels;

        goto label05;

     label12:
        goto label31;

     label13:
        x = 0;

     label14:
        if x >= w goto label17;

        $stack72 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        z#20 = virtualinvoke srcBuf.<java.nio.ShortBuffer: short get(int)>($stack72);

        $stack74 = gamma cmpl 1.0;

        if $stack74 != 0 goto label15;

        in = (short) z#20;

        goto label16;

     label15:
        $stack75 = (double) z#20;

        $stack76 = $stack75 / 32767.0;

        $stack77 = staticinvoke <java.lang.Math: double pow(double,double)>($stack76, gamma);

        $stack78 = $stack77 * 32767.0;

        $stack79 = staticinvoke <java.lang.Math: long round(double)>($stack78);

        $stack80 = (int) $stack79;

        in = (short) $stack80;

     label16:
        $stack81 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>($stack81, in);

        x = x + 1;

        goto label14;

     label17:
        goto label31;

     label18:
        if channels <= 1 goto label27;

        x = 0;

     label19:
        if x >= w goto label26;

        z = 0;

     label20:
        if z >= channels goto label23;

        $stack58 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        in = virtualinvoke srcBuf.<java.nio.ShortBuffer: short get(int)>($stack58);

        $stack60 = gamma cmpl 1.0;

        if $stack60 != 0 goto label21;

        out = (short) in;

        goto label22;

     label21:
        $stack61 = (double) in;

        $stack62 = $stack61 / 65535.0;

        $stack63 = staticinvoke <java.lang.Math: double pow(double,double)>($stack62, gamma);

        $stack64 = $stack63 * 65535.0;

        $stack65 = staticinvoke <java.lang.Math: long round(double)>($stack64);

        $stack66 = (int) $stack65;

        out = (short) $stack66;

     label22:
        buffer[z] = out;

        z = z + 1;

        goto label20;

     label23:
        z = channels - 1;

     label24:
        if z < 0 goto label25;

        $stack54 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack55 = buffer[z];

        virtualinvoke dstBuf.<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>($stack54, $stack55);

        z = z + -1;

        goto label24;

     label25:
        x = x + channels;

        goto label19;

     label26:
        goto label31;

     label27:
        x = 0;

     label28:
        if x >= w goto label31;

        $stack31 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        $stack32 = virtualinvoke srcBuf.<java.nio.ShortBuffer: short get(int)>($stack31);

        z = $stack32 & 65535;

        $stack33 = gamma cmpl 1.0;

        if $stack33 != 0 goto label29;

        in = (short) z;

        goto label30;

     label29:
        $stack34 = (double) z;

        $stack35 = $stack34 / 65535.0;

        $stack36 = staticinvoke <java.lang.Math: double pow(double,double)>($stack35, gamma);

        $stack37 = $stack36 * 65535.0;

        $stack38 = staticinvoke <java.lang.Math: long round(double)>($stack37);

        $stack39 = (int) $stack38;

        in = (short) $stack39;

     label30:
        $stack40 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>($stack40, in);

        x = x + 1;

        goto label28;

     label31:
        srcLine = srcLine + srcStep;

        dstLine = dstLine + dstStep;

        goto label02;

     label32:
        return;
    }

    public static void flipCopyWithGamma(java.nio.IntBuffer, int, int, java.nio.IntBuffer, int, int, double, boolean, int)
    {
        boolean $stack18, flip;
        int srcStep, dstStep, channels, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack30, $stack38, $stack52, $stack53, $stack56, $stack69, $stack70, srcBufferIndex, dstBufferIndex, w, srcLine, dstLine, $stack20, srcBufferIndex#12, dstBufferIndex#13, x, z, in, out;
        int[] buffer;
        java.nio.IntBuffer srcBuf, dstBuf;
        double gamma, $stack33, $stack34, $stack35, $stack36, $stack59, $stack60, $stack61, $stack62;
        byte $stack32, $stack58;
        long $stack37, $stack63;
        java.lang.AssertionError $stack85;

        srcBuf := @parameter0: java.nio.IntBuffer;

        srcBufferIndex := @parameter1: int;

        srcStep := @parameter2: int;

        dstBuf := @parameter3: java.nio.IntBuffer;

        dstBufferIndex := @parameter4: int;

        dstStep := @parameter5: int;

        gamma := @parameter6: double;

        flip := @parameter7: boolean;

        channels := @parameter8: int;

        $stack18 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack18 != 0 goto label01;

        if srcBuf != dstBuf goto label01;

        $stack85 = new java.lang.AssertionError;

        specialinvoke $stack85.<java.lang.AssertionError: void <init>()>();

        throw $stack85;

     label01:
        w = staticinvoke <java.lang.Math: int min(int,int)>(srcStep, dstStep);

        srcLine = srcBufferIndex;

        dstLine = dstBufferIndex;

        buffer = newarray (int)[channels];

     label02:
        $stack20 = virtualinvoke srcBuf.<java.nio.IntBuffer: int capacity()>();

        if srcLine >= $stack20 goto label18;

        $stack21 = virtualinvoke dstBuf.<java.nio.IntBuffer: int capacity()>();

        if dstLine >= $stack21 goto label18;

        if flip == 0 goto label03;

        $stack69 = virtualinvoke srcBuf.<java.nio.IntBuffer: int capacity()>();

        $stack70 = $stack69 - srcLine;

        srcBufferIndex#12 = $stack70 - srcStep;

        goto label04;

     label03:
        srcBufferIndex#12 = srcLine;

     label04:
        dstBufferIndex#13 = dstLine;

        $stack22 = virtualinvoke srcBuf.<java.nio.IntBuffer: int capacity()>();

        $stack23 = $stack22 - srcBufferIndex#12;

        $stack24 = staticinvoke <java.lang.Math: int min(int,int)>(w, $stack23);

        $stack25 = virtualinvoke dstBuf.<java.nio.IntBuffer: int capacity()>();

        $stack26 = $stack25 - dstLine;

        w = staticinvoke <java.lang.Math: int min(int,int)>($stack24, $stack26);

        if channels <= 1 goto label13;

        x = 0;

     label05:
        if x >= w goto label12;

        z = 0;

     label06:
        if z >= channels goto label09;

        $stack56 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        in = virtualinvoke srcBuf.<java.nio.IntBuffer: int get(int)>($stack56);

        $stack58 = gamma cmpl 1.0;

        if $stack58 != 0 goto label07;

        out = in;

        goto label08;

     label07:
        $stack59 = (double) in;

        $stack60 = $stack59 / 2.147483647E9;

        $stack61 = staticinvoke <java.lang.Math: double pow(double,double)>($stack60, gamma);

        $stack62 = $stack61 * 2.147483647E9;

        $stack63 = staticinvoke <java.lang.Math: long round(double)>($stack62);

        out = (int) $stack63;

     label08:
        buffer[z] = out;

        z = z + 1;

        goto label06;

     label09:
        z = channels - 1;

     label10:
        if z < 0 goto label11;

        $stack52 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack53 = buffer[z];

        virtualinvoke dstBuf.<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>($stack52, $stack53);

        z = z + -1;

        goto label10;

     label11:
        x = x + channels;

        goto label05;

     label12:
        goto label17;

     label13:
        x = 0;

     label14:
        if x >= w goto label17;

        $stack30 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        z = virtualinvoke srcBuf.<java.nio.IntBuffer: int get(int)>($stack30);

        $stack32 = gamma cmpl 1.0;

        if $stack32 != 0 goto label15;

        in = z;

        goto label16;

     label15:
        $stack33 = (double) z;

        $stack34 = $stack33 / 2.147483647E9;

        $stack35 = staticinvoke <java.lang.Math: double pow(double,double)>($stack34, gamma);

        $stack36 = $stack35 * 2.147483647E9;

        $stack37 = staticinvoke <java.lang.Math: long round(double)>($stack36);

        in = (int) $stack37;

     label16:
        $stack38 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>($stack38, in);

        x = x + 1;

        goto label14;

     label17:
        srcLine = srcLine + srcStep;

        dstLine = dstLine + dstStep;

        goto label02;

     label18:
        return;
    }

    public static void flipCopyWithGamma(java.nio.FloatBuffer, int, int, java.nio.FloatBuffer, int, int, double, boolean, int)
    {
        boolean $stack18, flip;
        int srcStep, dstStep, channels, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack30, $stack35, $stack49, $stack53, $stack63, $stack64, srcBufferIndex, dstBufferIndex, w, srcLine, dstLine, $stack20, srcBufferIndex#12, dstBufferIndex#13, x, z;
        float[] buffer;
        java.nio.FloatBuffer srcBuf, dstBuf;
        double gamma, $stack33, $stack34, $stack56, $stack57;
        byte $stack32, $stack55;
        float $stack50, in, out, z#20;
        java.lang.AssertionError $stack79;

        srcBuf := @parameter0: java.nio.FloatBuffer;

        srcBufferIndex := @parameter1: int;

        srcStep := @parameter2: int;

        dstBuf := @parameter3: java.nio.FloatBuffer;

        dstBufferIndex := @parameter4: int;

        dstStep := @parameter5: int;

        gamma := @parameter6: double;

        flip := @parameter7: boolean;

        channels := @parameter8: int;

        $stack18 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack18 != 0 goto label01;

        if srcBuf != dstBuf goto label01;

        $stack79 = new java.lang.AssertionError;

        specialinvoke $stack79.<java.lang.AssertionError: void <init>()>();

        throw $stack79;

     label01:
        w = staticinvoke <java.lang.Math: int min(int,int)>(srcStep, dstStep);

        srcLine = srcBufferIndex;

        dstLine = dstBufferIndex;

        buffer = newarray (float)[channels];

     label02:
        $stack20 = virtualinvoke srcBuf.<java.nio.FloatBuffer: int capacity()>();

        if srcLine >= $stack20 goto label18;

        $stack21 = virtualinvoke dstBuf.<java.nio.FloatBuffer: int capacity()>();

        if dstLine >= $stack21 goto label18;

        if flip == 0 goto label03;

        $stack63 = virtualinvoke srcBuf.<java.nio.FloatBuffer: int capacity()>();

        $stack64 = $stack63 - srcLine;

        srcBufferIndex#12 = $stack64 - srcStep;

        goto label04;

     label03:
        srcBufferIndex#12 = srcLine;

     label04:
        dstBufferIndex#13 = dstLine;

        $stack22 = virtualinvoke srcBuf.<java.nio.FloatBuffer: int capacity()>();

        $stack23 = $stack22 - srcBufferIndex#12;

        $stack24 = staticinvoke <java.lang.Math: int min(int,int)>(w, $stack23);

        $stack25 = virtualinvoke dstBuf.<java.nio.FloatBuffer: int capacity()>();

        $stack26 = $stack25 - dstLine;

        w = staticinvoke <java.lang.Math: int min(int,int)>($stack24, $stack26);

        if channels <= 1 goto label13;

        x = 0;

     label05:
        if x >= w goto label12;

        z = 0;

     label06:
        if z >= channels goto label09;

        $stack53 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        in = virtualinvoke srcBuf.<java.nio.FloatBuffer: float get(int)>($stack53);

        $stack55 = gamma cmpl 1.0;

        if $stack55 != 0 goto label07;

        out = in;

        goto label08;

     label07:
        $stack56 = (double) in;

        $stack57 = staticinvoke <java.lang.Math: double pow(double,double)>($stack56, gamma);

        out = (float) $stack57;

     label08:
        buffer[z] = out;

        z = z + 1;

        goto label06;

     label09:
        z = channels - 1;

     label10:
        if z < 0 goto label11;

        $stack49 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack50 = buffer[z];

        virtualinvoke dstBuf.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>($stack49, $stack50);

        z = z + -1;

        goto label10;

     label11:
        x = x + channels;

        goto label05;

     label12:
        goto label17;

     label13:
        x = 0;

     label14:
        if x >= w goto label17;

        $stack30 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        z#20 = virtualinvoke srcBuf.<java.nio.FloatBuffer: float get(int)>($stack30);

        $stack32 = gamma cmpl 1.0;

        if $stack32 != 0 goto label15;

        in = z#20;

        goto label16;

     label15:
        $stack33 = (double) z#20;

        $stack34 = staticinvoke <java.lang.Math: double pow(double,double)>($stack33, gamma);

        in = (float) $stack34;

     label16:
        $stack35 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>($stack35, in);

        x = x + 1;

        goto label14;

     label17:
        srcLine = srcLine + srcStep;

        dstLine = dstLine + dstStep;

        goto label02;

     label18:
        return;
    }

    public static void flipCopyWithGamma(java.nio.DoubleBuffer, int, int, java.nio.DoubleBuffer, int, int, double, boolean, int)
    {
        boolean $stack20, flip;
        int srcStep, dstStep, channels, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack32, $stack36, $stack50, $stack54, $stack63, $stack64, srcBufferIndex, dstBufferIndex, w, srcLine, dstLine, $stack22, srcBufferIndex#12, dstBufferIndex#13, x, z;
        double[] buffer;
        java.nio.DoubleBuffer srcBuf, dstBuf;
        double gamma, $stack51, in, out, z#19;
        byte $stack34, $stack56;
        java.lang.AssertionError $stack79;

        srcBuf := @parameter0: java.nio.DoubleBuffer;

        srcBufferIndex := @parameter1: int;

        srcStep := @parameter2: int;

        dstBuf := @parameter3: java.nio.DoubleBuffer;

        dstBufferIndex := @parameter4: int;

        dstStep := @parameter5: int;

        gamma := @parameter6: double;

        flip := @parameter7: boolean;

        channels := @parameter8: int;

        $stack20 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack20 != 0 goto label01;

        if srcBuf != dstBuf goto label01;

        $stack79 = new java.lang.AssertionError;

        specialinvoke $stack79.<java.lang.AssertionError: void <init>()>();

        throw $stack79;

     label01:
        w = staticinvoke <java.lang.Math: int min(int,int)>(srcStep, dstStep);

        srcLine = srcBufferIndex;

        dstLine = dstBufferIndex;

        buffer = newarray (double)[channels];

     label02:
        $stack22 = virtualinvoke srcBuf.<java.nio.DoubleBuffer: int capacity()>();

        if srcLine >= $stack22 goto label18;

        $stack23 = virtualinvoke dstBuf.<java.nio.DoubleBuffer: int capacity()>();

        if dstLine >= $stack23 goto label18;

        if flip == 0 goto label03;

        $stack63 = virtualinvoke srcBuf.<java.nio.DoubleBuffer: int capacity()>();

        $stack64 = $stack63 - srcLine;

        srcBufferIndex#12 = $stack64 - srcStep;

        goto label04;

     label03:
        srcBufferIndex#12 = srcLine;

     label04:
        dstBufferIndex#13 = dstLine;

        $stack24 = virtualinvoke srcBuf.<java.nio.DoubleBuffer: int capacity()>();

        $stack25 = $stack24 - srcBufferIndex#12;

        $stack26 = staticinvoke <java.lang.Math: int min(int,int)>(w, $stack25);

        $stack27 = virtualinvoke dstBuf.<java.nio.DoubleBuffer: int capacity()>();

        $stack28 = $stack27 - dstLine;

        w = staticinvoke <java.lang.Math: int min(int,int)>($stack26, $stack28);

        if channels <= 1 goto label13;

        x = 0;

     label05:
        if x >= w goto label12;

        z = 0;

     label06:
        if z >= channels goto label09;

        $stack54 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        in = virtualinvoke srcBuf.<java.nio.DoubleBuffer: double get(int)>($stack54);

        $stack56 = gamma cmpl 1.0;

        if $stack56 != 0 goto label07;

        out = in;

        goto label08;

     label07:
        out = staticinvoke <java.lang.Math: double pow(double,double)>(in, gamma);

     label08:
        buffer[z] = out;

        z = z + 1;

        goto label06;

     label09:
        z = channels - 1;

     label10:
        if z < 0 goto label11;

        $stack50 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        $stack51 = buffer[z];

        virtualinvoke dstBuf.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>($stack50, $stack51);

        z = z + -1;

        goto label10;

     label11:
        x = x + channels;

        goto label05;

     label12:
        goto label17;

     label13:
        x = 0;

     label14:
        if x >= w goto label17;

        $stack32 = srcBufferIndex#12;

        srcBufferIndex#12 = srcBufferIndex#12 + 1;

        z#19 = virtualinvoke srcBuf.<java.nio.DoubleBuffer: double get(int)>($stack32);

        $stack34 = gamma cmpl 1.0;

        if $stack34 != 0 goto label15;

        out = z#19;

        goto label16;

     label15:
        out = staticinvoke <java.lang.Math: double pow(double,double)>(z#19, gamma);

     label16:
        $stack36 = dstBufferIndex#13;

        dstBufferIndex#13 = dstBufferIndex#13 + 1;

        virtualinvoke dstBuf.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>($stack36, out);

        x = x + 1;

        goto label14;

     label17:
        srcLine = srcLine + srcStep;

        dstLine = dstLine + dstStep;

        goto label02;

     label18:
        return;
    }

    public static void applyGamma(org.bytedeco.javacv.Frame, double)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3;
        double gamma;
        int $stack4, $stack5;
        java.nio.Buffer $stack6;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        gamma := @parameter1: double;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack6 = $stack3[0];

        $stack5 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack4 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void applyGamma(java.nio.Buffer,int,int,double)>($stack6, $stack5, $stack4, gamma);

        return;
    }

    public static void applyGamma(java.nio.Buffer, int, int, double)
    {
        double gamma;
        byte $stack5;
        int depth, stride;
        java.nio.Buffer buffer;
        java.nio.DoubleBuffer $stack6, $stack7, $stack8;
        java.nio.FloatBuffer $stack9, $stack10, $stack11;
        java.nio.ShortBuffer $stack12, $stack13, $stack14, $stack21, $stack22, $stack23;
        java.nio.ByteBuffer $stack15, $stack16, $stack17, $stack18, $stack19, $stack20;
        java.nio.IntBuffer $stack24, $stack25, $stack26;
        boolean $stack27;
        java.lang.AssertionError $stack28;

        buffer := @parameter0: java.nio.Buffer;

        depth := @parameter1: int;

        stride := @parameter2: int;

        gamma := @parameter3: double;

        $stack5 = gamma cmpl 1.0;

        if $stack5 != 0 goto label01;

        return;

     label01:
        lookupswitch(depth)
        {
            case -32: goto label06;
            case -16: goto label05;
            case -8: goto label03;
            case 8: goto label02;
            case 16: goto label04;
            case 32: goto label07;
            case 64: goto label08;
            default: goto label09;
        };

     label02:
        $stack15 = (java.nio.ByteBuffer) buffer;

        $stack16 = virtualinvoke $stack15.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        $stack17 = (java.nio.ByteBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,boolean,double,boolean,int)>($stack16, 0, stride, $stack17, 0, stride, 0, gamma, 0, 0);

        goto label10;

     label03:
        $stack18 = (java.nio.ByteBuffer) buffer;

        $stack19 = virtualinvoke $stack18.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        $stack20 = (java.nio.ByteBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,boolean,double,boolean,int)>($stack19, 0, stride, $stack20, 0, stride, 1, gamma, 0, 0);

        goto label10;

     label04:
        $stack12 = (java.nio.ShortBuffer) buffer;

        $stack13 = virtualinvoke $stack12.<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>();

        $stack14 = (java.nio.ShortBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ShortBuffer,int,int,java.nio.ShortBuffer,int,int,boolean,double,boolean,int)>($stack13, 0, stride, $stack14, 0, stride, 0, gamma, 0, 0);

        goto label10;

     label05:
        $stack21 = (java.nio.ShortBuffer) buffer;

        $stack22 = virtualinvoke $stack21.<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>();

        $stack23 = (java.nio.ShortBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ShortBuffer,int,int,java.nio.ShortBuffer,int,int,boolean,double,boolean,int)>($stack22, 0, stride, $stack23, 0, stride, 1, gamma, 0, 0);

        goto label10;

     label06:
        $stack24 = (java.nio.IntBuffer) buffer;

        $stack25 = virtualinvoke $stack24.<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>();

        $stack26 = (java.nio.IntBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.IntBuffer,int,int,java.nio.IntBuffer,int,int,double,boolean,int)>($stack25, 0, stride, $stack26, 0, stride, gamma, 0, 0);

        goto label10;

     label07:
        $stack9 = (java.nio.FloatBuffer) buffer;

        $stack10 = virtualinvoke $stack9.<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>();

        $stack11 = (java.nio.FloatBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.FloatBuffer,int,int,java.nio.FloatBuffer,int,int,double,boolean,int)>($stack10, 0, stride, $stack11, 0, stride, gamma, 0, 0);

        goto label10;

     label08:
        $stack6 = (java.nio.DoubleBuffer) buffer;

        $stack7 = virtualinvoke $stack6.<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>();

        $stack8 = (java.nio.DoubleBuffer) buffer;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.DoubleBuffer,int,int,java.nio.DoubleBuffer,int,int,double,boolean,int)>($stack7, 0, stride, $stack8, 0, stride, gamma, 0, 0);

        goto label10;

     label09:
        $stack27 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack27 != 0 goto label10;

        $stack28 = new java.lang.AssertionError;

        specialinvoke $stack28.<java.lang.AssertionError: void <init>()>();

        throw $stack28;

     label10:
        return;
    }

    public static void copy(org.bytedeco.javacv.Frame, java.awt.image.BufferedImage)
    {
        org.bytedeco.javacv.Frame frame;
        java.awt.image.BufferedImage bufferedImage;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        bufferedImage := @parameter1: java.awt.image.BufferedImage;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void copy(org.bytedeco.javacv.Frame,java.awt.image.BufferedImage,double)>(frame, bufferedImage, 1.0);

        return;
    }

    public static void copy(org.bytedeco.javacv.Frame, java.awt.image.BufferedImage, double)
    {
        org.bytedeco.javacv.Frame frame;
        java.awt.image.BufferedImage bufferedImage;
        double gamma;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        bufferedImage := @parameter1: java.awt.image.BufferedImage;

        gamma := @parameter2: double;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void copy(org.bytedeco.javacv.Frame,java.awt.image.BufferedImage,double,boolean,java.awt.Rectangle)>(frame, bufferedImage, gamma, 0, null);

        return;
    }

    public static void copy(org.bytedeco.javacv.Frame, java.awt.image.BufferedImage, double, boolean, java.awt.Rectangle)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack18;
        java.awt.Rectangle roi;
        int $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, bufferIndex, $stack28, x, $stack29, y, $stack30, $stack31, start, $stack49, $stack53, $stack61, $stack65, $stack76, $stack78, $stack95, $stack99, $stack106, $stack110, $stack117, $stack121, $stack129, $stack142, step, channels, $stack37, $stack36, $stack125, $stack113, $stack102, stride, $stack81, $stack69, $stack57;
        java.awt.image.BufferedImage bufferedImage;
        java.awt.image.SampleModel sm;
        java.awt.image.WritableRaster r;
        java.awt.image.DataBuffer out;
        boolean $stack33, $stack34, $stack35, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, flipChannels, $stack72, $stack38;
        java.lang.AssertionError $stack45;
        java.awt.image.DataBufferUShort $stack46;
        java.nio.ShortBuffer $stack48, $stack50, $stack60, $stack62;
        double gamma;
        java.awt.image.DataBufferShort $stack58;
        java.awt.image.DataBufferInt $stack70;
        java.nio.IntBuffer $stack73, $stack74;
        java.nio.ByteBuffer $stack83, $stack84, $stack116, $stack118;
        java.awt.image.DataBufferFloat $stack92;
        java.nio.FloatBuffer $stack94, $stack96;
        java.awt.image.DataBufferDouble $stack103;
        java.nio.DoubleBuffer $stack105, $stack107;
        java.awt.image.DataBufferByte $stack114;
        java.awt.image.MultiPixelPackedSampleModel $stack126, $stack128;
        java.awt.image.SinglePixelPackedSampleModel $stack136;
        java.awt.image.ComponentSampleModel $stack138, $stack140;
        java.nio.Buffer in;
        byte[] a;
        double[] a#34;
        float[] a#36;
        int[] a#38;
        java.nio.ByteOrder $stack82;
        short[] a#48;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        bufferedImage := @parameter1: java.awt.image.BufferedImage;

        gamma := @parameter2: double;

        flipChannels := @parameter3: boolean;

        roi := @parameter4: java.awt.Rectangle;

        $stack18 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        in = $stack18[0];

        if roi != null goto label01;

        $stack142 = 0;

        goto label02;

     label01:
        $stack20 = roi.<java.awt.Rectangle: int y>;

        $stack19 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack24 = $stack20 * $stack19;

        $stack22 = roi.<java.awt.Rectangle: int x>;

        $stack21 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack23 = $stack22 * $stack21;

        $stack142 = $stack24 + $stack23;

     label02:
        bufferIndex = $stack142;

        sm = virtualinvoke bufferedImage.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        r = virtualinvoke bufferedImage.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        out = virtualinvoke r.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $stack28 = virtualinvoke r.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        x = neg $stack28;

        $stack29 = virtualinvoke r.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        y = neg $stack29;

        $stack30 = virtualinvoke sm.<java.awt.image.SampleModel: int getWidth()>();

        $stack31 = virtualinvoke sm.<java.awt.image.SampleModel: int getNumBands()>();

        step = $stack30 * $stack31;

        channels = virtualinvoke sm.<java.awt.image.SampleModel: int getNumBands()>();

        $stack33 = sm instanceof java.awt.image.ComponentSampleModel;

        if $stack33 == 0 goto label03;

        $stack138 = (java.awt.image.ComponentSampleModel) sm;

        step = virtualinvoke $stack138.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $stack140 = (java.awt.image.ComponentSampleModel) sm;

        channels = virtualinvoke $stack140.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        goto label05;

     label03:
        $stack34 = sm instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $stack34 == 0 goto label04;

        $stack136 = (java.awt.image.SinglePixelPackedSampleModel) sm;

        step = virtualinvoke $stack136.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        channels = 1;

        goto label05;

     label04:
        $stack35 = sm instanceof java.awt.image.MultiPixelPackedSampleModel;

        if $stack35 == 0 goto label05;

        $stack126 = (java.awt.image.MultiPixelPackedSampleModel) sm;

        step = virtualinvoke $stack126.<java.awt.image.MultiPixelPackedSampleModel: int getScanlineStride()>();

        $stack128 = (java.awt.image.MultiPixelPackedSampleModel) sm;

        $stack129 = virtualinvoke $stack128.<java.awt.image.MultiPixelPackedSampleModel: int getPixelBitStride()>();

        channels = $stack129 / 8;

     label05:
        $stack37 = y * step;

        $stack36 = x * channels;

        start = $stack37 + $stack36;

        $stack38 = out instanceof java.awt.image.DataBufferByte;

        if $stack38 == 0 goto label08;

        $stack114 = (java.awt.image.DataBufferByte) out;

        a = virtualinvoke $stack114.<java.awt.image.DataBufferByte: byte[] getData()>();

        $stack116 = (java.nio.ByteBuffer) in;

        $stack117 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack118 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(a);

        $stack121 = step;

        if flipChannels == 0 goto label06;

        $stack125 = channels;

        goto label07;

     label06:
        $stack125 = 0;

     label07:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,boolean,double,boolean,int)>($stack116, bufferIndex, $stack117, $stack118, start, $stack121, 0, gamma, 0, $stack125);

        goto label27;

     label08:
        $stack39 = out instanceof java.awt.image.DataBufferDouble;

        if $stack39 == 0 goto label11;

        $stack103 = (java.awt.image.DataBufferDouble) out;

        a#34 = virtualinvoke $stack103.<java.awt.image.DataBufferDouble: double[] getData()>();

        $stack105 = (java.nio.DoubleBuffer) in;

        $stack106 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack107 = staticinvoke <java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>(a#34);

        $stack110 = step;

        if flipChannels == 0 goto label09;

        $stack113 = channels;

        goto label10;

     label09:
        $stack113 = 0;

     label10:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.DoubleBuffer,int,int,java.nio.DoubleBuffer,int,int,double,boolean,int)>($stack105, bufferIndex, $stack106, $stack107, start, $stack110, gamma, 0, $stack113);

        goto label27;

     label11:
        $stack40 = out instanceof java.awt.image.DataBufferFloat;

        if $stack40 == 0 goto label14;

        $stack92 = (java.awt.image.DataBufferFloat) out;

        a#36 = virtualinvoke $stack92.<java.awt.image.DataBufferFloat: float[] getData()>();

        $stack94 = (java.nio.FloatBuffer) in;

        $stack95 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack96 = staticinvoke <java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>(a#36);

        $stack99 = step;

        if flipChannels == 0 goto label12;

        $stack102 = channels;

        goto label13;

     label12:
        $stack102 = 0;

     label13:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.FloatBuffer,int,int,java.nio.FloatBuffer,int,int,double,boolean,int)>($stack94, bufferIndex, $stack95, $stack96, start, $stack99, gamma, 0, $stack102);

        goto label27;

     label14:
        $stack41 = out instanceof java.awt.image.DataBufferInt;

        if $stack41 == 0 goto label20;

        $stack70 = (java.awt.image.DataBufferInt) out;

        a#38 = virtualinvoke $stack70.<java.awt.image.DataBufferInt: int[] getData()>();

        stride = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack72 = in instanceof java.nio.ByteBuffer;

        if $stack72 == 0 goto label17;

        $stack83 = (java.nio.ByteBuffer) in;

        if flipChannels == 0 goto label15;

        $stack82 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        goto label16;

     label15:
        $stack82 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

     label16:
        $stack84 = virtualinvoke $stack83.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($stack82);

        in = virtualinvoke $stack84.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        stride = stride / 4;

     label17:
        $stack73 = (java.nio.IntBuffer) in;

        $stack76 = stride;

        $stack74 = staticinvoke <java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>(a#38);

        $stack78 = step;

        if flipChannels == 0 goto label18;

        $stack81 = channels;

        goto label19;

     label18:
        $stack81 = 0;

     label19:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.IntBuffer,int,int,java.nio.IntBuffer,int,int,double,boolean,int)>($stack73, bufferIndex, $stack76, $stack74, start, $stack78, gamma, 0, $stack81);

        goto label27;

     label20:
        $stack42 = out instanceof java.awt.image.DataBufferShort;

        if $stack42 == 0 goto label23;

        $stack58 = (java.awt.image.DataBufferShort) out;

        a#48 = virtualinvoke $stack58.<java.awt.image.DataBufferShort: short[] getData()>();

        $stack60 = (java.nio.ShortBuffer) in;

        $stack61 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack62 = staticinvoke <java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>(a#48);

        $stack65 = step;

        if flipChannels == 0 goto label21;

        $stack69 = channels;

        goto label22;

     label21:
        $stack69 = 0;

     label22:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ShortBuffer,int,int,java.nio.ShortBuffer,int,int,boolean,double,boolean,int)>($stack60, bufferIndex, $stack61, $stack62, start, $stack65, 1, gamma, 0, $stack69);

        goto label27;

     label23:
        $stack43 = out instanceof java.awt.image.DataBufferUShort;

        if $stack43 == 0 goto label26;

        $stack46 = (java.awt.image.DataBufferUShort) out;

        a#48 = virtualinvoke $stack46.<java.awt.image.DataBufferUShort: short[] getData()>();

        $stack48 = (java.nio.ShortBuffer) in;

        $stack49 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack50 = staticinvoke <java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>(a#48);

        $stack53 = step;

        if flipChannels == 0 goto label24;

        $stack57 = channels;

        goto label25;

     label24:
        $stack57 = 0;

     label25:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ShortBuffer,int,int,java.nio.ShortBuffer,int,int,boolean,double,boolean,int)>($stack48, bufferIndex, $stack49, $stack50, start, $stack53, 0, gamma, 0, $stack57);

        goto label27;

     label26:
        $stack44 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack44 != 0 goto label27;

        $stack45 = new java.lang.AssertionError;

        specialinvoke $stack45.<java.lang.AssertionError: void <init>()>();

        throw $stack45;

     label27:
        return;
    }

    public static void copy(java.awt.image.BufferedImage, org.bytedeco.javacv.Frame)
    {
        java.awt.image.BufferedImage image;
        org.bytedeco.javacv.Frame frame;

        image := @parameter0: java.awt.image.BufferedImage;

        frame := @parameter1: org.bytedeco.javacv.Frame;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void copy(java.awt.image.BufferedImage,org.bytedeco.javacv.Frame,double)>(image, frame, 1.0);

        return;
    }

    public static void copy(java.awt.image.BufferedImage, org.bytedeco.javacv.Frame, double)
    {
        java.awt.image.BufferedImage image;
        org.bytedeco.javacv.Frame frame;
        double gamma;

        image := @parameter0: java.awt.image.BufferedImage;

        frame := @parameter1: org.bytedeco.javacv.Frame;

        gamma := @parameter2: double;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void copy(java.awt.image.BufferedImage,org.bytedeco.javacv.Frame,double,boolean,java.awt.Rectangle)>(image, frame, gamma, 0, null);

        return;
    }

    public static void copy(java.awt.image.BufferedImage, org.bytedeco.javacv.Frame, double, boolean, java.awt.Rectangle)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack18;
        java.awt.Rectangle roi;
        int $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, bufferIndex, $stack28, x, $stack29, y, $stack30, $stack31, start, $stack49, $stack52, $stack61, $stack64, $stack76, $stack78, $stack95, $stack98, $stack106, $stack109, $stack117, $stack120, $stack129, $stack142, step, channels, $stack37, $stack36, $stack125, $stack113, $stack102, stride, $stack81, $stack69, $stack57;
        java.awt.image.BufferedImage image;
        java.awt.image.SampleModel sm;
        java.awt.image.WritableRaster r;
        java.awt.image.DataBuffer in;
        boolean $stack33, $stack34, $stack35, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, flipChannels, $stack72, $stack38;
        java.lang.AssertionError $stack45;
        java.awt.image.DataBufferUShort $stack46;
        java.nio.ShortBuffer $stack48, $stack50, $stack60, $stack62;
        double gamma;
        java.awt.image.DataBufferShort $stack58;
        java.awt.image.DataBufferInt $stack70;
        java.nio.IntBuffer $stack73, $stack74;
        java.nio.ByteBuffer $stack83, $stack84, $stack116, $stack118;
        java.awt.image.DataBufferFloat $stack92;
        java.nio.FloatBuffer $stack94, $stack96;
        java.awt.image.DataBufferDouble $stack103;
        java.nio.DoubleBuffer $stack105, $stack107;
        java.awt.image.DataBufferByte $stack114;
        java.awt.image.MultiPixelPackedSampleModel $stack126, $stack128;
        java.awt.image.SinglePixelPackedSampleModel $stack136;
        java.awt.image.ComponentSampleModel $stack138, $stack140;
        java.nio.Buffer out;
        byte[] a;
        double[] a#34;
        float[] a#36;
        int[] a#38;
        java.nio.ByteOrder $stack82;
        short[] a#48;

        image := @parameter0: java.awt.image.BufferedImage;

        frame := @parameter1: org.bytedeco.javacv.Frame;

        gamma := @parameter2: double;

        flipChannels := @parameter3: boolean;

        roi := @parameter4: java.awt.Rectangle;

        $stack18 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        out = $stack18[0];

        if roi != null goto label01;

        $stack142 = 0;

        goto label02;

     label01:
        $stack20 = roi.<java.awt.Rectangle: int y>;

        $stack19 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack24 = $stack20 * $stack19;

        $stack22 = roi.<java.awt.Rectangle: int x>;

        $stack21 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack23 = $stack22 * $stack21;

        $stack142 = $stack24 + $stack23;

     label02:
        bufferIndex = $stack142;

        sm = virtualinvoke image.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        r = virtualinvoke image.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        in = virtualinvoke r.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $stack28 = virtualinvoke r.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        x = neg $stack28;

        $stack29 = virtualinvoke r.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        y = neg $stack29;

        $stack30 = virtualinvoke sm.<java.awt.image.SampleModel: int getWidth()>();

        $stack31 = virtualinvoke sm.<java.awt.image.SampleModel: int getNumBands()>();

        step = $stack30 * $stack31;

        channels = virtualinvoke sm.<java.awt.image.SampleModel: int getNumBands()>();

        $stack33 = sm instanceof java.awt.image.ComponentSampleModel;

        if $stack33 == 0 goto label03;

        $stack138 = (java.awt.image.ComponentSampleModel) sm;

        step = virtualinvoke $stack138.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $stack140 = (java.awt.image.ComponentSampleModel) sm;

        channels = virtualinvoke $stack140.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        goto label05;

     label03:
        $stack34 = sm instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $stack34 == 0 goto label04;

        $stack136 = (java.awt.image.SinglePixelPackedSampleModel) sm;

        step = virtualinvoke $stack136.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        channels = 1;

        goto label05;

     label04:
        $stack35 = sm instanceof java.awt.image.MultiPixelPackedSampleModel;

        if $stack35 == 0 goto label05;

        $stack126 = (java.awt.image.MultiPixelPackedSampleModel) sm;

        step = virtualinvoke $stack126.<java.awt.image.MultiPixelPackedSampleModel: int getScanlineStride()>();

        $stack128 = (java.awt.image.MultiPixelPackedSampleModel) sm;

        $stack129 = virtualinvoke $stack128.<java.awt.image.MultiPixelPackedSampleModel: int getPixelBitStride()>();

        channels = $stack129 / 8;

     label05:
        $stack37 = y * step;

        $stack36 = x * channels;

        start = $stack37 + $stack36;

        $stack38 = in instanceof java.awt.image.DataBufferByte;

        if $stack38 == 0 goto label08;

        $stack114 = (java.awt.image.DataBufferByte) in;

        a = virtualinvoke $stack114.<java.awt.image.DataBufferByte: byte[] getData()>();

        $stack116 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(a);

        $stack120 = step;

        $stack118 = (java.nio.ByteBuffer) out;

        $stack117 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        if flipChannels == 0 goto label06;

        $stack125 = channels;

        goto label07;

     label06:
        $stack125 = 0;

     label07:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,boolean,double,boolean,int)>($stack116, start, $stack120, $stack118, bufferIndex, $stack117, 0, gamma, 0, $stack125);

        goto label27;

     label08:
        $stack39 = in instanceof java.awt.image.DataBufferDouble;

        if $stack39 == 0 goto label11;

        $stack103 = (java.awt.image.DataBufferDouble) in;

        a#34 = virtualinvoke $stack103.<java.awt.image.DataBufferDouble: double[] getData()>();

        $stack105 = staticinvoke <java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>(a#34);

        $stack109 = step;

        $stack107 = (java.nio.DoubleBuffer) out;

        $stack106 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        if flipChannels == 0 goto label09;

        $stack113 = channels;

        goto label10;

     label09:
        $stack113 = 0;

     label10:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.DoubleBuffer,int,int,java.nio.DoubleBuffer,int,int,double,boolean,int)>($stack105, start, $stack109, $stack107, bufferIndex, $stack106, gamma, 0, $stack113);

        goto label27;

     label11:
        $stack40 = in instanceof java.awt.image.DataBufferFloat;

        if $stack40 == 0 goto label14;

        $stack92 = (java.awt.image.DataBufferFloat) in;

        a#36 = virtualinvoke $stack92.<java.awt.image.DataBufferFloat: float[] getData()>();

        $stack94 = staticinvoke <java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>(a#36);

        $stack98 = step;

        $stack96 = (java.nio.FloatBuffer) out;

        $stack95 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        if flipChannels == 0 goto label12;

        $stack102 = channels;

        goto label13;

     label12:
        $stack102 = 0;

     label13:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.FloatBuffer,int,int,java.nio.FloatBuffer,int,int,double,boolean,int)>($stack94, start, $stack98, $stack96, bufferIndex, $stack95, gamma, 0, $stack102);

        goto label27;

     label14:
        $stack41 = in instanceof java.awt.image.DataBufferInt;

        if $stack41 == 0 goto label20;

        $stack70 = (java.awt.image.DataBufferInt) in;

        a#38 = virtualinvoke $stack70.<java.awt.image.DataBufferInt: int[] getData()>();

        stride = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack72 = out instanceof java.nio.ByteBuffer;

        if $stack72 == 0 goto label17;

        $stack83 = (java.nio.ByteBuffer) out;

        if flipChannels == 0 goto label15;

        $stack82 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        goto label16;

     label15:
        $stack82 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

     label16:
        $stack84 = virtualinvoke $stack83.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($stack82);

        out = virtualinvoke $stack84.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        stride = stride / 4;

     label17:
        $stack73 = staticinvoke <java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>(a#38);

        $stack76 = step;

        $stack74 = (java.nio.IntBuffer) out;

        $stack78 = stride;

        if flipChannels == 0 goto label18;

        $stack81 = channels;

        goto label19;

     label18:
        $stack81 = 0;

     label19:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.IntBuffer,int,int,java.nio.IntBuffer,int,int,double,boolean,int)>($stack73, start, $stack76, $stack74, bufferIndex, $stack78, gamma, 0, $stack81);

        goto label27;

     label20:
        $stack42 = in instanceof java.awt.image.DataBufferShort;

        if $stack42 == 0 goto label23;

        $stack58 = (java.awt.image.DataBufferShort) in;

        a#48 = virtualinvoke $stack58.<java.awt.image.DataBufferShort: short[] getData()>();

        $stack60 = staticinvoke <java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>(a#48);

        $stack64 = step;

        $stack62 = (java.nio.ShortBuffer) out;

        $stack61 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        if flipChannels == 0 goto label21;

        $stack69 = channels;

        goto label22;

     label21:
        $stack69 = 0;

     label22:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ShortBuffer,int,int,java.nio.ShortBuffer,int,int,boolean,double,boolean,int)>($stack60, start, $stack64, $stack62, bufferIndex, $stack61, 1, gamma, 0, $stack69);

        goto label27;

     label23:
        $stack43 = in instanceof java.awt.image.DataBufferUShort;

        if $stack43 == 0 goto label26;

        $stack46 = (java.awt.image.DataBufferUShort) in;

        a#48 = virtualinvoke $stack46.<java.awt.image.DataBufferUShort: short[] getData()>();

        $stack48 = staticinvoke <java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>(a#48);

        $stack52 = step;

        $stack50 = (java.nio.ShortBuffer) out;

        $stack49 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        if flipChannels == 0 goto label24;

        $stack57 = channels;

        goto label25;

     label24:
        $stack57 = 0;

     label25:
        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void flipCopyWithGamma(java.nio.ShortBuffer,int,int,java.nio.ShortBuffer,int,int,boolean,double,boolean,int)>($stack48, start, $stack52, $stack50, bufferIndex, $stack49, 0, gamma, 0, $stack57);

        goto label27;

     label26:
        $stack44 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack44 != 0 goto label27;

        $stack45 = new java.lang.AssertionError;

        specialinvoke $stack45.<java.lang.AssertionError: void <init>()>();

        throw $stack45;

     label27:
        return;
    }

    public static int getBufferedImageType(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame frame;
        int $stack2, $stack3, $stack4, $stack5, $stack7, $stack9, $stack10, $stack12, $stack13, $stack14;
        byte type;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        type = 0;

        $stack2 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack2 != 1 goto label3;

        $stack12 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack12 == 8 goto label1;

        $stack13 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack13 != -8 goto label2;

     label1:
        type = 10;

        goto label7;

     label2:
        $stack14 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack14 != 16 goto label7;

        type = 11;

        goto label7;

     label3:
        $stack3 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack3 != 3 goto label5;

        $stack9 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack9 == 8 goto label4;

        $stack10 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack10 != -8 goto label7;

     label4:
        type = 5;

        goto label7;

     label5:
        $stack4 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack4 != 4 goto label7;

        $stack5 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack5 == 8 goto label6;

        $stack7 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack7 != -8 goto label7;

     label6:
        type = 6;

     label7:
        return type;
    }

    public java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame)
    {
        Java2DFrameConverter this;
        org.bytedeco.javacv.Frame frame;
        java.awt.image.BufferedImage $stack2;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack2 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame,double)>(frame, 1.0);

        return $stack2;
    }

    public java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame, double)
    {
        Java2DFrameConverter this;
        org.bytedeco.javacv.Frame frame;
        double gamma;
        java.awt.image.BufferedImage $stack4;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        gamma := @parameter1: double;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack4 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame,double,boolean,java.awt.color.ColorSpace)>(frame, gamma, 0, null);

        return $stack4;
    }

    public java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame, double, boolean, java.awt.color.ColorSpace)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack11;
        int type, $stack19, $stack20, $stack21, $stack26, $stack27, $stack28, $stack29, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack48, $stack49, $stack50, $stack51, $stack55, $stack56, $stack57, $stack58, $stack62, $stack63, $stack64, $stack65, $stack69, $stack70, $stack71, $stack72, $stack76, $stack77, $stack78, $stack79, $stack124, $stack125, $stack129, $stack130, $stack133, $stack134, $stack136, $stack23;
        Java2DFrameConverter this;
        java.awt.image.BufferedImage $stack13, $stack16, $stack17, $stack128, $stack132, $stack135, $stack123, $stack14, $stack15, $u0, $u15;
        double gamma;
        boolean flipChannels, $stack22, $stack39, alpha;
        int[] $stack94, $stack109, $stack118, offsets;
        java.awt.color.ColorSpace cs;
        java.awt.image.ComponentColorModel cm, $u2, $u4, $u6, $u8, $u10, $u12;
        java.awt.image.WritableRaster wr;
        java.lang.AssertionError $u1, $u14;
        java.awt.image.ComponentSampleModel $u3, $u5, $u7, $u9, $u11, $u13;
        org.bytedeco.javacv.Java2DFrameConverter $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: Java2DFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        gamma := @parameter1: double;

        flipChannels := @parameter2: boolean;

        cs := @parameter3: java.awt.color.ColorSpace;

        if frame == null goto label01;

        $stack11 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack11 != null goto label02;

     label01:
        return null;

     label02:
        type = staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: int getBufferedImageType(org.bytedeco.javacv.Frame)>(frame);

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack13 = $r0.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        if $stack13 == null goto label03;

        $r1 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack128 = $r1.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        $stack129 = virtualinvoke $stack128.<java.awt.image.BufferedImage: int getWidth()>();

        $stack130 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        if $stack129 != $stack130 goto label03;

        $r2 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack132 = $r2.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        $stack133 = virtualinvoke $stack132.<java.awt.image.BufferedImage: int getHeight()>();

        $stack134 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        if $stack133 != $stack134 goto label03;

        $r3 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack135 = $r3.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        $stack136 = virtualinvoke $stack135.<java.awt.image.BufferedImage: int getType()>();

        if $stack136 == type goto label07;

     label03:
        if type == 0 goto label04;

        if cs == null goto label05;

     label04:
        $stack123 = null;

        goto label06;

     label05:
        $u0 = new java.awt.image.BufferedImage;

        $stack123 = $u0;

        $stack125 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack124 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        specialinvoke $u0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($stack125, $stack124, type);

     label06:
        $r4 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $r4.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage> = $stack123;

     label07:
        $r5 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack14 = $r5.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        if $stack14 != null goto label23;

        alpha = 0;

        offsets = null;

        $stack19 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack19 != 1 goto label09;

        alpha = 0;

        if cs != null goto label08;

        cs = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

     label08:
        $stack118 = newarray (int)[1];

        $stack118[0] = 0;

        offsets = $stack118;

        goto label14;

     label09:
        $stack20 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack20 != 3 goto label11;

        alpha = 0;

        if cs != null goto label10;

        cs = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

     label10:
        $stack109 = newarray (int)[3];

        $stack109[0] = 2;

        $stack109[1] = 1;

        $stack109[2] = 0;

        offsets = $stack109;

        goto label14;

     label11:
        $stack21 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack21 != 4 goto label13;

        alpha = 1;

        if cs != null goto label12;

        cs = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

     label12:
        $stack94 = newarray (int)[4];

        $stack94[0] = 0;

        $stack94[1] = 1;

        $stack94[2] = 2;

        $stack94[3] = 3;

        offsets = $stack94;

        goto label14;

     label13:
        $stack22 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack22 != 0 goto label14;

        $u1 = new java.lang.AssertionError;

        specialinvoke $u1.<java.lang.AssertionError: void <init>()>();

        throw $u1;

     label14:
        cm = null;

        wr = null;

        $stack23 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack23 == 8 goto label15;

        $stack33 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack33 != -8 goto label16;

     label15:
        $u2 = new java.awt.image.ComponentColorModel;

        specialinvoke $u2.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(cs, alpha, 0, 1, 0);

        cm = $u2;

        $u3 = new java.awt.image.ComponentSampleModel;

        $stack29 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack28 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack27 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack26 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        specialinvoke $u3.<java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>(0, $stack29, $stack28, $stack27, $stack26, offsets);

        wr = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($u3, null);

        goto label22;

     label16:
        $stack34 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack34 != 16 goto label17;

        $u4 = new java.awt.image.ComponentColorModel;

        specialinvoke $u4.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(cs, alpha, 0, 1, 1);

        cm = $u4;

        $u5 = new java.awt.image.ComponentSampleModel;

        $stack79 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack78 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack77 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack76 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        specialinvoke $u5.<java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>(1, $stack79, $stack78, $stack77, $stack76, offsets);

        wr = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($u5, null);

        goto label22;

     label17:
        $stack35 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack35 != -16 goto label18;

        $u6 = new java.awt.image.ComponentColorModel;

        specialinvoke $u6.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(cs, alpha, 0, 1, 2);

        cm = $u6;

        $u7 = new java.awt.image.ComponentSampleModel;

        $stack72 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack71 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack70 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack69 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        specialinvoke $u7.<java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>(2, $stack72, $stack71, $stack70, $stack69, offsets);

        wr = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($u7, null);

        goto label22;

     label18:
        $stack36 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack36 != -32 goto label19;

        $u8 = new java.awt.image.ComponentColorModel;

        specialinvoke $u8.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(cs, alpha, 0, 1, 3);

        cm = $u8;

        $u9 = new java.awt.image.ComponentSampleModel;

        $stack65 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack64 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack63 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack62 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        specialinvoke $u9.<java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>(3, $stack65, $stack64, $stack63, $stack62, offsets);

        wr = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($u9, null);

        goto label22;

     label19:
        $stack37 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack37 != 32 goto label20;

        $u10 = new java.awt.image.ComponentColorModel;

        specialinvoke $u10.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(cs, alpha, 0, 1, 4);

        cm = $u10;

        $u11 = new java.awt.image.ComponentSampleModel;

        $stack58 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack57 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack56 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack55 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        specialinvoke $u11.<java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>(4, $stack58, $stack57, $stack56, $stack55, offsets);

        wr = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($u11, null);

        goto label22;

     label20:
        $stack38 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack38 != 64 goto label21;

        $u12 = new java.awt.image.ComponentColorModel;

        specialinvoke $u12.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(cs, alpha, 0, 1, 5);

        cm = $u12;

        $u13 = new java.awt.image.ComponentSampleModel;

        $stack51 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack50 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack49 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack48 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        specialinvoke $u13.<java.awt.image.ComponentSampleModel: void <init>(int,int,int,int,int,int[])>(5, $stack51, $stack50, $stack49, $stack48, offsets);

        wr = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($u13, null);

        goto label22;

     label21:
        $stack39 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack39 != 0 goto label22;

        $u14 = new java.lang.AssertionError;

        specialinvoke $u14.<java.lang.AssertionError: void <init>()>();

        throw $u14;

     label22:
        $u15 = new java.awt.image.BufferedImage;

        specialinvoke $u15.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(cm, wr, 0, null);

        $r6 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $r6.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage> = $u15;

     label23:
        $r7 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack15 = $r7.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        if $stack15 == null goto label24;

        $r8 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack17 = $r8.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void copy(org.bytedeco.javacv.Frame,java.awt.image.BufferedImage,double,boolean,java.awt.Rectangle)>(frame, $stack17, gamma, flipChannels, null);

     label24:
        $r9 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack16 = $r9.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage bufferedImage>;

        return $stack16;
    }

    public org.bytedeco.javacv.Frame getFrame(java.awt.image.BufferedImage)
    {
        Java2DFrameConverter this;
        java.awt.image.BufferedImage image;
        org.bytedeco.javacv.Frame $stack2;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        image := @parameter0: java.awt.image.BufferedImage;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack2 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame getFrame(java.awt.image.BufferedImage,double)>(image, 1.0);

        return $stack2;
    }

    public org.bytedeco.javacv.Frame getFrame(java.awt.image.BufferedImage, double)
    {
        Java2DFrameConverter this;
        java.awt.image.BufferedImage image;
        double gamma;
        org.bytedeco.javacv.Frame $stack4;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        image := @parameter0: java.awt.image.BufferedImage;

        gamma := @parameter1: double;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack4 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame getFrame(java.awt.image.BufferedImage,double,boolean)>(image, gamma, 0);

        return $stack4;
    }

    public org.bytedeco.javacv.Frame getFrame(java.awt.image.BufferedImage, double, boolean)
    {
        java.awt.image.BufferedImage image;
        java.awt.image.SampleModel sm;
        int $stack10, $stack11, $stack15, $stack16, $stack32, $stack33, $stack36, $stack37, $stack39, $stack41, numChannels;
        Java2DFrameConverter this;
        double gamma;
        boolean flipChannels, $stack43;
        org.bytedeco.javacv.Frame $stack19, $stack31, $stack35, $stack38, $stack40, $stack12, $stack13, $stack17, $stack18, $u1;
        byte depth;
        java.lang.AssertionError $u0;
        org.bytedeco.javacv.Java2DFrameConverter $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: Java2DFrameConverter;

        image := @parameter0: java.awt.image.BufferedImage;

        gamma := @parameter1: double;

        flipChannels := @parameter2: boolean;

        if image != null goto label01;

        return null;

     label01:
        sm = virtualinvoke image.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        depth = 0;

        numChannels = virtualinvoke sm.<java.awt.image.SampleModel: int getNumBands()>();

        $stack10 = virtualinvoke image.<java.awt.image.BufferedImage: int getType()>();

        tableswitch($stack10)
        {
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label02;
            default: goto label03;
        };

     label02:
        depth = 8;

        numChannels = 4;

     label03:
        if depth == 0 goto label04;

        if numChannels != 0 goto label12;

     label04:
        $stack11 = virtualinvoke sm.<java.awt.image.SampleModel: int getDataType()>();

        tableswitch($stack11)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            default: goto label11;
        };

     label05:
        depth = 8;

        goto label12;

     label06:
        depth = 16;

        goto label12;

     label07:
        depth = -16;

        goto label12;

     label08:
        depth = -32;

        goto label12;

     label09:
        depth = 32;

        goto label12;

     label10:
        depth = 64;

        goto label12;

     label11:
        $stack43 = <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled>;

        if $stack43 != 0 goto label12;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label12:
        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack12 = $r0.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        if $stack12 == null goto label13;

        $r1 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack31 = $r1.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack32 = $stack31.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack33 = virtualinvoke image.<java.awt.image.BufferedImage: int getWidth()>();

        if $stack32 != $stack33 goto label13;

        $r2 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack35 = $r2.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack36 = $stack35.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack37 = virtualinvoke image.<java.awt.image.BufferedImage: int getHeight()>();

        if $stack36 != $stack37 goto label13;

        $r3 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack38 = $r3.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack39 = $stack38.<org.bytedeco.javacv.Frame: int imageDepth>;

        if $stack39 != depth goto label13;

        $r4 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack40 = $r4.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack41 = $stack40.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack41 == numChannels goto label15;

     label13:
        $r5 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack13 = $r5.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        if $stack13 == null goto label14;

        $r6 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack19 = $r6.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        virtualinvoke $stack19.<org.bytedeco.javacv.Frame: void close()>();

     label14:
        $u1 = new org.bytedeco.javacv.Frame;

        $stack15 = virtualinvoke image.<java.awt.image.BufferedImage: int getWidth()>();

        $stack16 = virtualinvoke image.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $u1.<org.bytedeco.javacv.Frame: void <init>(int,int,int,int)>($stack15, $stack16, depth, numChannels);

        $r7 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $r7.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame> = $u1;

     label15:
        $r8 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack17 = $r8.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: void copy(java.awt.image.BufferedImage,org.bytedeco.javacv.Frame,double,boolean,java.awt.Rectangle)>(image, $stack17, gamma, flipChannels, null);

        $r9 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack18 = $r9.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame frame>;

        return $stack18;
    }

    public volatile java.lang.Object convert(org.bytedeco.javacv.Frame)
    {
        Java2DFrameConverter this;
        org.bytedeco.javacv.Frame l1;
        java.awt.image.BufferedImage $stack2;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        l1 := @parameter0: org.bytedeco.javacv.Frame;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack2 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage convert(org.bytedeco.javacv.Frame)>(l1);

        return $stack2;
    }

    public volatile org.bytedeco.javacv.Frame convert(java.lang.Object)
    {
        Java2DFrameConverter this;
        java.lang.Object l1;
        java.awt.image.BufferedImage $stack2;
        org.bytedeco.javacv.Frame $stack3;
        org.bytedeco.javacv.Java2DFrameConverter $r0;

        this := @this: Java2DFrameConverter;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (java.awt.image.BufferedImage) l1;

        $r0 = (org.bytedeco.javacv.Java2DFrameConverter) this;

        $stack3 = virtualinvoke $r0.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame convert(java.awt.image.BufferedImage)>($stack2);

        return $stack3;
    }

    static void <clinit>()
    {
        java.lang.Class $stack1;
        boolean $stack2, $stack23;
        byte[] $stack3, $stack4, $stack7, $stack15;
        double $stack5, $stack6, $stack8, $stack9, $stack13, $stack14, $stack16, $stack17;
        long $stack10, $stack18;
        int $stack11, $stack19, i;
        byte $stack12, $stack20;

        $stack1 = class "Lorg/bytedeco/javacv/Java2DFrameConverter;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack2 != 0 goto label1;

        $stack23 = 1;

        goto label2;

     label1:
        $stack23 = 0;

     label2:
        <org.bytedeco.javacv.Java2DFrameConverter: boolean $assertionsDisabled> = $stack23;

        $stack3 = newarray (byte)[256];

        <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22> = $stack3;

        $stack4 = newarray (byte)[256];

        <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22inv> = $stack4;

        i = 0;

     label3:
        if i >= 256 goto label4;

        $stack7 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22>;

        $stack5 = (double) i;

        $stack6 = $stack5 / 255.0;

        $stack8 = staticinvoke <java.lang.Math: double pow(double,double)>($stack6, 2.2);

        $stack9 = $stack8 * 255.0;

        $stack10 = staticinvoke <java.lang.Math: long round(double)>($stack9);

        $stack11 = (int) $stack10;

        $stack12 = (byte) $stack11;

        $stack7[i] = $stack12;

        $stack15 = <org.bytedeco.javacv.Java2DFrameConverter: byte[] gamma22inv>;

        $stack13 = (double) i;

        $stack14 = $stack13 / 255.0;

        $stack16 = staticinvoke <java.lang.Math: double pow(double,double)>($stack14, 0.45454545454545453);

        $stack17 = $stack16 * 255.0;

        $stack18 = staticinvoke <java.lang.Math: long round(double)>($stack17);

        $stack19 = (int) $stack18;

        $stack20 = (byte) $stack19;

        $stack15[i] = $stack20;

        i = i + 1;

        goto label3;

     label4:
        return;
    }
}
