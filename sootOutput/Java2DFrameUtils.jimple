public class Java2DFrameUtils extends java.lang.Object
{
    private static org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv;
    private static org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv;
    private static org.bytedeco.javacv.Java2DFrameConverter biConv;

    public void <init>()
    {
        Java2DFrameUtils this;

        this := @this: Java2DFrameUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.image.BufferedImage deepCopy(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage source, $stack1;

        source := @parameter0: java.awt.image.BufferedImage;

        $stack1 = staticinvoke <org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage cloneBufferedImage(java.awt.image.BufferedImage)>(source);

        return $stack1;
    }

    public static synchronized java.awt.image.BufferedImage toBufferedImage(org.bytedeco.opencv.opencv_core.IplImage)
    {
        org.bytedeco.opencv.opencv_core.IplImage src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack1;
        org.bytedeco.javacv.Java2DFrameConverter $stack2;
        org.bytedeco.javacv.Frame $stack3, $stack4;
        java.awt.image.BufferedImage $stack5, $stack6;

        src := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        $stack2 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv>;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv>;

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.IplImage)>(src);

        $stack4 = virtualinvoke $stack3.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        $stack5 = virtualinvoke $stack2.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame)>($stack4);

        $stack6 = staticinvoke <org.bytedeco.javacv.Java2DFrameUtils: java.awt.image.BufferedImage deepCopy(java.awt.image.BufferedImage)>($stack5);

        return $stack6;
    }

    public static synchronized java.awt.image.BufferedImage toBufferedImage(org.bytedeco.opencv.opencv_core.Mat)
    {
        org.bytedeco.opencv.opencv_core.Mat src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack1;
        org.bytedeco.javacv.Java2DFrameConverter $stack2;
        org.bytedeco.javacv.Frame $stack3, $stack4;
        java.awt.image.BufferedImage $stack5, $stack6;

        src := @parameter0: org.bytedeco.opencv.opencv_core.Mat;

        $stack2 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv>;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv>;

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.Mat)>(src);

        $stack4 = virtualinvoke $stack3.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        $stack5 = virtualinvoke $stack2.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame)>($stack4);

        $stack6 = staticinvoke <org.bytedeco.javacv.Java2DFrameUtils: java.awt.image.BufferedImage deepCopy(java.awt.image.BufferedImage)>($stack5);

        return $stack6;
    }

    public static synchronized java.awt.image.BufferedImage toBufferedImage(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame src, $stack2;
        org.bytedeco.javacv.Java2DFrameConverter $stack1;
        java.awt.image.BufferedImage $stack3, $stack4;

        src := @parameter0: org.bytedeco.javacv.Frame;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv>;

        $stack2 = virtualinvoke src.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.Java2DFrameConverter: java.awt.image.BufferedImage getBufferedImage(org.bytedeco.javacv.Frame)>($stack2);

        $stack4 = staticinvoke <org.bytedeco.javacv.Java2DFrameUtils: java.awt.image.BufferedImage deepCopy(java.awt.image.BufferedImage)>($stack3);

        return $stack4;
    }

    public static synchronized org.bytedeco.opencv.opencv_core.IplImage toIplImage(org.bytedeco.opencv.opencv_core.Mat)
    {
        org.bytedeco.opencv.opencv_core.Mat src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack1;
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack2;
        org.bytedeco.javacv.Frame $stack3;
        org.bytedeco.opencv.opencv_core.IplImage $stack4, $stack5;

        src := @parameter0: org.bytedeco.opencv.opencv_core.Mat;

        $stack2 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv>;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv>;

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.Mat)>(src);

        $stack4 = virtualinvoke $stack2.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: org.bytedeco.opencv.opencv_core.IplImage convertToIplImage(org.bytedeco.javacv.Frame)>($stack3);

        $stack5 = virtualinvoke $stack4.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage clone()>();

        return $stack5;
    }

    public static synchronized org.bytedeco.opencv.opencv_core.IplImage toIplImage(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack1;
        org.bytedeco.opencv.opencv_core.IplImage $stack2, $stack3;

        src := @parameter0: org.bytedeco.javacv.Frame;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: org.bytedeco.opencv.opencv_core.IplImage convertToIplImage(org.bytedeco.javacv.Frame)>(src);

        $stack3 = virtualinvoke $stack2.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage clone()>();

        return $stack3;
    }

    public static synchronized org.bytedeco.opencv.opencv_core.IplImage toIplImage(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage src;
        org.bytedeco.javacv.Java2DFrameConverter $stack1;
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack2;
        org.bytedeco.javacv.Frame $stack3;
        org.bytedeco.opencv.opencv_core.IplImage $stack4, $stack5;

        src := @parameter0: java.awt.image.BufferedImage;

        $stack2 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv>;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv>;

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame convert(java.awt.image.BufferedImage)>(src);

        $stack4 = virtualinvoke $stack2.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: org.bytedeco.opencv.opencv_core.IplImage convertToIplImage(org.bytedeco.javacv.Frame)>($stack3);

        $stack5 = virtualinvoke $stack4.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage clone()>();

        return $stack5;
    }

    public static synchronized org.bytedeco.opencv.opencv_core.Mat toMat(org.bytedeco.opencv.opencv_core.IplImage)
    {
        org.bytedeco.opencv.opencv_core.IplImage src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack1;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack2;
        org.bytedeco.javacv.Frame $stack3, $stack4;
        org.bytedeco.opencv.opencv_core.Mat $stack5;

        src := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        $stack2 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv>;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv>;

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.IplImage)>(src);

        $stack4 = virtualinvoke $stack3.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        $stack5 = virtualinvoke $stack2.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.opencv.opencv_core.Mat convertToMat(org.bytedeco.javacv.Frame)>($stack4);

        return $stack5;
    }

    public static synchronized org.bytedeco.opencv.opencv_core.Mat toMat(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack1;
        org.bytedeco.opencv.opencv_core.Mat $stack2, $stack3;

        src := @parameter0: org.bytedeco.javacv.Frame;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.opencv.opencv_core.Mat convertToMat(org.bytedeco.javacv.Frame)>(src);

        $stack3 = virtualinvoke $stack2.<org.bytedeco.opencv.opencv_core.Mat: org.bytedeco.opencv.opencv_core.Mat clone()>();

        return $stack3;
    }

    public static synchronized org.bytedeco.opencv.opencv_core.Mat toMat(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage src;
        org.bytedeco.javacv.Java2DFrameConverter $stack1;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack2;
        org.bytedeco.javacv.Frame $stack3;
        org.bytedeco.opencv.opencv_core.Mat $stack4, $stack5;

        src := @parameter0: java.awt.image.BufferedImage;

        $stack2 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv>;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv>;

        $stack3 = virtualinvoke $stack1.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame convert(java.awt.image.BufferedImage)>(src);

        $stack4 = virtualinvoke $stack2.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.opencv.opencv_core.Mat convertToMat(org.bytedeco.javacv.Frame)>($stack3);

        $stack5 = virtualinvoke $stack4.<org.bytedeco.opencv.opencv_core.Mat: org.bytedeco.opencv.opencv_core.Mat clone()>();

        return $stack5;
    }

    public static synchronized org.bytedeco.javacv.Frame toFrame(org.bytedeco.opencv.opencv_core.IplImage)
    {
        org.bytedeco.opencv.opencv_core.IplImage src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack1;
        org.bytedeco.javacv.Frame $stack2, $stack3;

        src := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.IplImage)>(src);

        $stack3 = virtualinvoke $stack2.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        return $stack3;
    }

    public static synchronized org.bytedeco.javacv.Frame toFrame(org.bytedeco.opencv.opencv_core.Mat)
    {
        org.bytedeco.opencv.opencv_core.Mat src;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack1;
        org.bytedeco.javacv.Frame $stack2, $stack3;

        src := @parameter0: org.bytedeco.opencv.opencv_core.Mat;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.Mat)>(src);

        $stack3 = virtualinvoke $stack2.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        return $stack3;
    }

    public static synchronized org.bytedeco.javacv.Frame toFrame(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage src;
        org.bytedeco.javacv.Java2DFrameConverter $stack1;
        org.bytedeco.javacv.Frame $stack2, $stack3;

        src := @parameter0: java.awt.image.BufferedImage;

        $stack1 = <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.Java2DFrameConverter: org.bytedeco.javacv.Frame convert(java.awt.image.BufferedImage)>(src);

        $stack3 = virtualinvoke $stack2.<org.bytedeco.javacv.Frame: org.bytedeco.javacv.Frame clone()>();

        return $stack3;
    }

    static void <clinit>()
    {
        org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage $stack0;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack1;
        org.bytedeco.javacv.Java2DFrameConverter $stack2;

        $stack0 = new org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage;

        specialinvoke $stack0.<org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage: void <init>()>();

        <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToIplImage iplConv> = $stack0;

        $stack1 = new org.bytedeco.javacv.OpenCVFrameConverter$ToMat;

        specialinvoke $stack1.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: void <init>()>();

        <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.OpenCVFrameConverter$ToMat matConv> = $stack1;

        $stack2 = new org.bytedeco.javacv.Java2DFrameConverter;

        specialinvoke $stack2.<org.bytedeco.javacv.Java2DFrameConverter: void <init>()>();

        <org.bytedeco.javacv.Java2DFrameUtils: org.bytedeco.javacv.Java2DFrameConverter biConv> = $stack2;

        return;
    }
}
