public class JavaCV extends java.lang.Object
{
    public static final double SQRT2;
    public static final double FLT_EPSILON;
    public static final double DBL_EPSILON;
    private static java.lang.ThreadLocal moments;
    private static java.lang.ThreadLocal A8x8;
    private static java.lang.ThreadLocal b8x1;
    private static java.lang.ThreadLocal x8x1;
    private static java.lang.ThreadLocal A3x3;
    private static java.lang.ThreadLocal b3x1;
    private static java.lang.ThreadLocal n3x1;
    private static java.lang.ThreadLocal H3x3;
    private static java.lang.ThreadLocal M3x2;
    private static java.lang.ThreadLocal S2x2;
    private static java.lang.ThreadLocal U3x2;
    private static java.lang.ThreadLocal V2x2;
    private static java.lang.ThreadLocal R13x3;
    private static java.lang.ThreadLocal R23x3;
    private static java.lang.ThreadLocal t13x1;
    private static java.lang.ThreadLocal t23x1;
    private static java.lang.ThreadLocal n13x1;
    private static java.lang.ThreadLocal n23x1;
    private static java.lang.ThreadLocal H13x3;
    private static java.lang.ThreadLocal H23x3;
    private static java.lang.ThreadLocal S3x3;
    private static java.lang.ThreadLocal U3x3;
    private static java.lang.ThreadLocal V3x3;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        JavaCV this;

        this := @this: JavaCV;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static double distanceToLine(double, double, double, double, double, double)
    {
        double x2, x1, y2, y1, $stack24, $stack25, d2, x3, $stack26, y3, $stack27, $stack28, $stack29, $stack30, u, $stack31, x, $stack32, y, $stack33, $stack34, $stack35, dx, dy;

        x1 := @parameter0: double;

        y1 := @parameter1: double;

        x2 := @parameter2: double;

        y2 := @parameter3: double;

        x3 := @parameter4: double;

        y3 := @parameter5: double;

        dx = x2 - x1;

        dy = y2 - y1;

        $stack25 = dx * dx;

        $stack24 = dy * dy;

        d2 = $stack25 + $stack24;

        $stack26 = x3 - x1;

        $stack29 = $stack26 * dx;

        $stack27 = y3 - y1;

        $stack28 = $stack27 * dy;

        $stack30 = $stack29 + $stack28;

        u = $stack30 / d2;

        $stack31 = u * dx;

        x = x1 + $stack31;

        $stack32 = u * dy;

        y = y1 + $stack32;

        dx = x - x3;

        dy = y - y3;

        $stack34 = dx * dx;

        $stack33 = dy * dy;

        $stack35 = $stack34 + $stack33;

        return $stack35;
    }

    public static org.bytedeco.opencv.opencv_core.CvBox2D boundedRect(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvBox2D)
    {
        org.bytedeco.opencv.opencv_core.CvMat contour;
        int contourLength, $stack55, $stack57, $stack58, $stack62, k, $stack63, $stack65, $stack66, $stack68, $stack70, $stack71, i, j;
        java.lang.ThreadLocal $stack40;
        java.lang.Object $stack41;
        org.bytedeco.opencv.opencv_imgproc.CvMoments m;
        double $stack43, inv_m00, $stack44, centerX, $stack45, centerY, x2, y2, x3, y3, x4, y4, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, d, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, ua, $stack86, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, ub, $stack98;
        float[] pts;
        org.bytedeco.opencv.opencv_core.CvBox2D box;
        org.bytedeco.opencv.opencv_core.CvPoint2D32f center;
        org.bytedeco.opencv.opencv_core.CvSize2D32f size, $stack51;
        float $stack49, $stack50, $stack52, $stack53, $stack56, $stack59, scale;
        byte $stack93, $stack96, $stack97, $stack99;
        org.bytedeco.opencv.opencv_core.CvArr $r0;

        contour := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        box := @parameter1: org.bytedeco.opencv.opencv_core.CvBox2D;

        contourLength = virtualinvoke contour.<org.bytedeco.opencv.opencv_core.CvMat: int length()>();

        $stack40 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal moments>;

        $stack41 = virtualinvoke $stack40.<java.lang.ThreadLocal: java.lang.Object get()>();

        m = (org.bytedeco.opencv.opencv_imgproc.CvMoments) $stack41;

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) contour;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvMoments(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_imgproc.CvMoments,int)>($r0, m, 0);

        $stack43 = virtualinvoke m.<org.bytedeco.opencv.opencv_imgproc.CvMoments: double m00()>();

        inv_m00 = 1.0 / $stack43;

        $stack44 = virtualinvoke m.<org.bytedeco.opencv.opencv_imgproc.CvMoments: double m10()>();

        centerX = $stack44 * inv_m00;

        $stack45 = virtualinvoke m.<org.bytedeco.opencv.opencv_imgproc.CvMoments: double m01()>();

        centerY = $stack45 * inv_m00;

        pts = newarray (float)[8];

        center = virtualinvoke box.<org.bytedeco.opencv.opencv_core.CvBox2D: org.bytedeco.opencv.opencv_core.CvPoint2D32f center()>();

        size = virtualinvoke box.<org.bytedeco.opencv.opencv_core.CvBox2D: org.bytedeco.opencv.opencv_core.CvSize2D32f size()>();

        virtualinvoke center.<org.bytedeco.opencv.opencv_core.CvPoint2D32f: org.bytedeco.opencv.opencv_core.CvPoint2D32f put(double,double)>(centerX, centerY);

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvBoxPoints(org.bytedeco.opencv.opencv_core.CvBox2D,float[])>(box, pts);

        scale = #InfinityF;

        i = 0;

     label1:
        if i >= 4 goto label5;

        $stack55 = 2 * i;

        $stack56 = pts[$stack55];

        x2 = (double) $stack56;

        $stack57 = 2 * i;

        $stack58 = $stack57 + 1;

        $stack59 = pts[$stack58];

        y2 = (double) $stack59;

        j = 0;

     label2:
        if j >= contourLength goto label4;

        $stack62 = j + 1;

        k = $stack62 % contourLength;

        $stack63 = 2 * j;

        x3 = virtualinvoke contour.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack63);

        $stack65 = 2 * j;

        $stack66 = $stack65 + 1;

        y3 = virtualinvoke contour.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack66);

        $stack68 = 2 * k;

        x4 = virtualinvoke contour.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack68);

        $stack70 = 2 * k;

        $stack71 = $stack70 + 1;

        y4 = virtualinvoke contour.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack71);

        $stack74 = y4 - y3;

        $stack73 = x2 - centerX;

        $stack78 = $stack74 * $stack73;

        $stack76 = x4 - x3;

        $stack75 = y2 - centerY;

        $stack77 = $stack76 * $stack75;

        d = $stack78 - $stack77;

        $stack80 = x4 - x3;

        $stack79 = centerY - y3;

        $stack84 = $stack80 * $stack79;

        $stack82 = y4 - y3;

        $stack81 = centerX - x3;

        $stack83 = $stack82 * $stack81;

        $stack85 = $stack84 - $stack83;

        ua = $stack85 / d;

        $stack87 = x2 - centerX;

        $stack86 = centerY - y3;

        $stack91 = $stack87 * $stack86;

        $stack89 = y2 - centerY;

        $stack88 = centerX - x3;

        $stack90 = $stack89 * $stack88;

        $stack92 = $stack91 - $stack90;

        ub = $stack92 / d;

        $stack93 = ub cmpl 0.0;

        if $stack93 < 0 goto label3;

        $stack96 = ub cmpg 1.0;

        if $stack96 > 0 goto label3;

        $stack97 = ua cmpl 0.0;

        if $stack97 < 0 goto label3;

        $stack98 = (double) scale;

        $stack99 = ua cmpg $stack98;

        if $stack99 >= 0 goto label3;

        scale = (float) ua;

     label3:
        j = j + 1;

        goto label2;

     label4:
        i = i + 1;

        goto label1;

     label5:
        $stack49 = virtualinvoke size.<org.bytedeco.opencv.opencv_core.CvSize2D32f: float width()>();

        $stack50 = scale * $stack49;

        $stack51 = virtualinvoke size.<org.bytedeco.opencv.opencv_core.CvSize2D32f: org.bytedeco.opencv.opencv_core.CvSize2D32f width(float)>($stack50);

        $stack52 = virtualinvoke size.<org.bytedeco.opencv.opencv_core.CvSize2D32f: float height()>();

        $stack53 = scale * $stack52;

        virtualinvoke $stack51.<org.bytedeco.opencv.opencv_core.CvSize2D32f: org.bytedeco.opencv.opencv_core.CvSize2D32f height(float)>($stack53);

        return box;
    }

    public static org.bytedeco.opencv.opencv_core.CvRect boundingRect(double[], org.bytedeco.opencv.opencv_core.CvRect, int, int, int, int)
    {
        double[] contour;
        int $stack19, $stack20, $stack21, padX, alignX, $stack29, $stack30, padY, alignY, $stack38, $stack39, $stack47, $stack48, width, $stack49, $stack57, $stack58, $stack61, $stack63, $stack65, $stack66, $stack67, i, x#9, y#10;
        org.bytedeco.opencv.opencv_core.CvRect rect, $stack59, $stack60, $stack62, $stack64;
        double $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, minX, minY, maxX, maxY, x, y;

        contour := @parameter0: double[];

        rect := @parameter1: org.bytedeco.opencv.opencv_core.CvRect;

        padX := @parameter2: int;

        padY := @parameter3: int;

        alignX := @parameter4: int;

        alignY := @parameter5: int;

        minX = contour[0];

        minY = contour[1];

        maxX = contour[0];

        maxY = contour[1];

        i = 1;

     label1:
        $stack19 = lengthof contour;

        $stack20 = $stack19 / 2;

        if i >= $stack20 goto label2;

        $stack65 = 2 * i;

        x = contour[$stack65];

        $stack66 = 2 * i;

        $stack67 = $stack66 + 1;

        y = contour[$stack67];

        minX = staticinvoke <java.lang.Math: double min(double,double)>(minX, x);

        minY = staticinvoke <java.lang.Math: double min(double,double)>(minY, y);

        maxX = staticinvoke <java.lang.Math: double max(double,double)>(maxX, x);

        maxY = staticinvoke <java.lang.Math: double max(double,double)>(maxY, y);

        i = i + 1;

        goto label1;

     label2:
        $stack21 = virtualinvoke rect.<org.bytedeco.opencv.opencv_core.CvRect: int x()>();

        $stack24 = (double) $stack21;

        $stack22 = (double) padX;

        $stack23 = minX - $stack22;

        $stack25 = staticinvoke <java.lang.Math: double max(double,double)>($stack24, $stack23);

        $stack26 = (double) alignX;

        $stack27 = $stack25 / $stack26;

        $stack28 = staticinvoke <java.lang.Math: double floor(double)>($stack27);

        $stack29 = (int) $stack28;

        i = $stack29 * alignX;

        $stack30 = virtualinvoke rect.<org.bytedeco.opencv.opencv_core.CvRect: int y()>();

        $stack33 = (double) $stack30;

        $stack31 = (double) padY;

        $stack32 = minY - $stack31;

        $stack34 = staticinvoke <java.lang.Math: double max(double,double)>($stack33, $stack32);

        $stack35 = (double) alignY;

        $stack36 = $stack34 / $stack35;

        $stack37 = staticinvoke <java.lang.Math: double floor(double)>($stack36);

        $stack38 = (int) $stack37;

        x#9 = $stack38 * alignY;

        $stack39 = virtualinvoke rect.<org.bytedeco.opencv.opencv_core.CvRect: int width()>();

        $stack42 = (double) $stack39;

        $stack40 = (double) padX;

        $stack41 = maxX + $stack40;

        $stack43 = staticinvoke <java.lang.Math: double min(double,double)>($stack42, $stack41);

        $stack44 = (double) alignX;

        $stack45 = $stack43 / $stack44;

        $stack46 = staticinvoke <java.lang.Math: double ceil(double)>($stack45);

        $stack47 = (int) $stack46;

        $stack48 = $stack47 * alignX;

        width = $stack48 - i;

        $stack49 = virtualinvoke rect.<org.bytedeco.opencv.opencv_core.CvRect: int height()>();

        $stack52 = (double) $stack49;

        $stack50 = (double) padY;

        $stack51 = maxY + $stack50;

        $stack53 = staticinvoke <java.lang.Math: double min(double,double)>($stack52, $stack51);

        $stack54 = (double) alignY;

        $stack55 = $stack53 / $stack54;

        $stack56 = staticinvoke <java.lang.Math: double ceil(double)>($stack55);

        $stack57 = (int) $stack56;

        $stack58 = $stack57 * alignY;

        y#10 = $stack58 - x#9;

        $stack59 = virtualinvoke rect.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect x(int)>(i);

        $stack60 = virtualinvoke $stack59.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect y(int)>(x#9);

        $stack61 = staticinvoke <java.lang.Math: int max(int,int)>(0, width);

        $stack62 = virtualinvoke $stack60.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect width(int)>($stack61);

        $stack63 = staticinvoke <java.lang.Math: int max(int,int)>(0, y#10);

        $stack64 = virtualinvoke $stack62.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect height(int)>($stack63);

        return $stack64;
    }

    public static org.bytedeco.opencv.opencv_core.CvMat getPerspectiveTransform(double[], double[], org.bytedeco.opencv.opencv_core.CvMat)
    {
        java.lang.ThreadLocal $stack7, $stack9, $stack11;
        java.lang.Object $stack8, $stack10, $stack12;
        org.bytedeco.opencv.opencv_core.CvMat A, b, x, map_matrix;
        double[] $stack14, src, dst;
        int $stack17, $stack18, $stack20, $stack22, $stack23, $stack24, $stack26, $stack28, $stack29, $stack30, $stack32, $stack34, $stack35, $stack36, $stack37, $stack39, $stack41, $stack42, $stack44, $stack45, $stack46, $stack48, $stack49, $stack51, $stack52, $stack54, $stack55, $stack57, $stack58, $stack59, $stack61, $stack62, $stack63, $stack65, $stack66, $stack67, $stack69, $stack70, $stack72, $stack76, $stack78, $stack79, $stack80, $stack82, $stack86, $stack88, $stack89, $stack90, $stack92, $stack93, $stack97, $stack99, $stack100, $stack101, $stack102, $stack104, $stack105, $stack109, $stack111, $stack114, $stack115, $stack117, i;
        double $stack19, $stack25, $stack31, $stack38, $stack71, $stack73, $stack74, $stack75, $stack81, $stack83, $stack84, $stack85, $stack91, $stack94, $stack95, $stack96, $stack103, $stack106, $stack107, $stack108, $stack112, $stack116;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2;

        src := @parameter0: double[];

        dst := @parameter1: double[];

        map_matrix := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        $stack7 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal A8x8>;

        $stack8 = virtualinvoke $stack7.<java.lang.ThreadLocal: java.lang.Object get()>();

        A = (org.bytedeco.opencv.opencv_core.CvMat) $stack8;

        $stack9 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal b8x1>;

        $stack10 = virtualinvoke $stack9.<java.lang.ThreadLocal: java.lang.Object get()>();

        b = (org.bytedeco.opencv.opencv_core.CvMat) $stack10;

        $stack11 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal x8x1>;

        $stack12 = virtualinvoke $stack11.<java.lang.ThreadLocal: java.lang.Object get()>();

        x = (org.bytedeco.opencv.opencv_core.CvMat) $stack12;

        i = 0;

     label1:
        if i >= 4 goto label2;

        $stack17 = i * 8;

        $stack20 = $stack17 + 0;

        $stack18 = i * 2;

        $stack19 = src[$stack18];

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack20, $stack19);

        $stack22 = i + 4;

        $stack23 = $stack22 * 8;

        $stack26 = $stack23 + 3;

        $stack24 = i * 2;

        $stack25 = src[$stack24];

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack26, $stack25);

        $stack28 = i * 8;

        $stack32 = $stack28 + 1;

        $stack29 = i * 2;

        $stack30 = $stack29 + 1;

        $stack31 = src[$stack30];

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack32, $stack31);

        $stack34 = i + 4;

        $stack35 = $stack34 * 8;

        $stack39 = $stack35 + 4;

        $stack36 = i * 2;

        $stack37 = $stack36 + 1;

        $stack38 = src[$stack37];

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack39, $stack38);

        $stack41 = i * 8;

        $stack42 = $stack41 + 2;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack42, 1.0);

        $stack44 = i + 4;

        $stack45 = $stack44 * 8;

        $stack46 = $stack45 + 5;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack46, 1.0);

        $stack48 = i * 8;

        $stack49 = $stack48 + 3;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack49, 0.0);

        $stack51 = i * 8;

        $stack52 = $stack51 + 4;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack52, 0.0);

        $stack54 = i * 8;

        $stack55 = $stack54 + 5;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack55, 0.0);

        $stack57 = i + 4;

        $stack58 = $stack57 * 8;

        $stack59 = $stack58 + 0;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack59, 0.0);

        $stack61 = i + 4;

        $stack62 = $stack61 * 8;

        $stack63 = $stack62 + 1;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack63, 0.0);

        $stack65 = i + 4;

        $stack66 = $stack65 * 8;

        $stack67 = $stack66 + 2;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack67, 0.0);

        $stack69 = i * 8;

        $stack76 = $stack69 + 6;

        $stack70 = i * 2;

        $stack71 = src[$stack70];

        $stack74 = neg $stack71;

        $stack72 = i * 2;

        $stack73 = dst[$stack72];

        $stack75 = $stack74 * $stack73;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack76, $stack75);

        $stack78 = i * 8;

        $stack86 = $stack78 + 7;

        $stack79 = i * 2;

        $stack80 = $stack79 + 1;

        $stack81 = src[$stack80];

        $stack84 = neg $stack81;

        $stack82 = i * 2;

        $stack83 = dst[$stack82];

        $stack85 = $stack84 * $stack83;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack86, $stack85);

        $stack88 = i + 4;

        $stack89 = $stack88 * 8;

        $stack97 = $stack89 + 6;

        $stack90 = i * 2;

        $stack91 = src[$stack90];

        $stack95 = neg $stack91;

        $stack92 = i * 2;

        $stack93 = $stack92 + 1;

        $stack94 = dst[$stack93];

        $stack96 = $stack95 * $stack94;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack97, $stack96);

        $stack99 = i + 4;

        $stack100 = $stack99 * 8;

        $stack109 = $stack100 + 7;

        $stack101 = i * 2;

        $stack102 = $stack101 + 1;

        $stack103 = src[$stack102];

        $stack107 = neg $stack103;

        $stack104 = i * 2;

        $stack105 = $stack104 + 1;

        $stack106 = dst[$stack105];

        $stack108 = $stack107 * $stack106;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack109, $stack108);

        $stack111 = i * 2;

        $stack112 = dst[$stack111];

        virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack112);

        $stack117 = i + 4;

        $stack114 = i * 2;

        $stack115 = $stack114 + 1;

        $stack116 = dst[$stack115];

        virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>($stack117, $stack116);

        i = i + 1;

        goto label1;

     label2:
        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) b;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) x;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: int cvSolve(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, $r2, 0);

        $stack14 = virtualinvoke x.<org.bytedeco.opencv.opencv_core.CvMat: double[] get()>();

        virtualinvoke map_matrix.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack14);

        virtualinvoke map_matrix.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(8, 1.0);

        return map_matrix;
    }

    public static void perspectiveTransform(double[], double[], org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat map_matrix;
        double[] mat, src, dst;
        int $stack12, $stack13, $stack22, $stack41, j;
        double x, y, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, w;
        byte $stack21;

        src := @parameter0: double[];

        dst := @parameter1: double[];

        map_matrix := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        mat = virtualinvoke map_matrix.<org.bytedeco.opencv.opencv_core.CvMat: double[] get()>();

        j = 0;

     label1:
        $stack12 = lengthof src;

        if j >= $stack12 goto label4;

        x = src[j];

        $stack13 = j + 1;

        y = src[$stack13];

        $stack14 = mat[6];

        $stack17 = x * $stack14;

        $stack15 = mat[7];

        $stack16 = y * $stack15;

        $stack19 = $stack17 + $stack16;

        $stack18 = mat[8];

        w = $stack19 + $stack18;

        $stack20 = staticinvoke <java.lang.Math: double abs(double)>(w);

        $stack21 = $stack20 cmpl 1.1920928955078125E-7;

        if $stack21 <= 0 goto label2;

        w = 1.0 / w;

        $stack25 = mat[0];

        $stack28 = x * $stack25;

        $stack26 = mat[1];

        $stack27 = y * $stack26;

        $stack30 = $stack28 + $stack27;

        $stack29 = mat[2];

        $stack31 = $stack30 + $stack29;

        $stack32 = $stack31 * w;

        dst[j] = $stack32;

        $stack41 = j + 1;

        $stack33 = mat[3];

        $stack36 = x * $stack33;

        $stack34 = mat[4];

        $stack35 = y * $stack34;

        $stack38 = $stack36 + $stack35;

        $stack37 = mat[5];

        $stack39 = $stack38 + $stack37;

        $stack40 = $stack39 * w;

        dst[$stack41] = $stack40;

        goto label3;

     label2:
        $stack22 = j + 1;

        dst[$stack22] = 0.0;

        dst[j] = 0.0;

     label3:
        j = j + 2;

        goto label1;

     label4:
        return;
    }

    public static org.bytedeco.opencv.opencv_core.CvMat getPlaneParameters(double[], double[], org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        java.lang.ThreadLocal $stack12, $stack14;
        java.lang.Object $stack13, $stack15;
        org.bytedeco.opencv.opencv_core.CvMat A, b, invSrcK, dstK, n, t, R;
        double[] x, y, src, dst;
        double $stack19, $stack21, $stack22, $stack23, $stack25, $stack26, $stack27, $stack30, $stack32, $stack33, $stack34, $stack37, $stack38, $stack39, $stack42, $stack44, $stack45, $stack46, $stack47, $stack49, $stack51, $stack52, $stack53, $stack56, $stack57, $stack58, $stack59, $stack61, $stack62, $stack63, $stack64, $stack66, $stack67, $stack68, $stack71, $stack72, $stack73, $stack74, $stack75, $stack76;
        int $stack20, $stack24, $stack31, $stack35, $stack36, $stack43, $stack50, $stack54, $stack55, $stack60, $stack65, $stack69, $stack70, i;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4;

        src := @parameter0: double[];

        dst := @parameter1: double[];

        invSrcK := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        dstK := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        R := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        t := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        n := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        $stack12 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal A3x3>;

        $stack13 = virtualinvoke $stack12.<java.lang.ThreadLocal: java.lang.Object get()>();

        A = (org.bytedeco.opencv.opencv_core.CvMat) $stack13;

        $stack14 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal b3x1>;

        $stack15 = virtualinvoke $stack14.<java.lang.ThreadLocal: java.lang.Object get()>();

        b = (org.bytedeco.opencv.opencv_core.CvMat) $stack15;

        x = newarray (double)[6];

        y = newarray (double)[6];

        staticinvoke <org.bytedeco.javacv.JavaCV: void perspectiveTransform(double[],double[],org.bytedeco.opencv.opencv_core.CvMat)>(src, x, invSrcK);

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) dstK;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r0, $r1);

        staticinvoke <org.bytedeco.javacv.JavaCV: void perspectiveTransform(double[],double[],org.bytedeco.opencv.opencv_core.CvMat)>(dst, y, A);

        i = 0;

     label1:
        if i >= 3 goto label2;

        $stack19 = virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack20 = i * 2;

        $stack21 = y[$stack20];

        $stack22 = $stack19 * $stack21;

        $stack23 = virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack26 = $stack22 - $stack23;

        $stack24 = i * 2;

        $stack25 = x[$stack24];

        $stack27 = $stack26 * $stack25;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,int,double)>(i, 0, $stack27);

        $stack30 = virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack31 = i * 2;

        $stack32 = y[$stack31];

        $stack33 = $stack30 * $stack32;

        $stack34 = virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack38 = $stack33 - $stack34;

        $stack35 = i * 2;

        $stack36 = $stack35 + 1;

        $stack37 = x[$stack36];

        $stack39 = $stack38 * $stack37;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,int,double)>(i, 1, $stack39);

        $stack42 = virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack43 = i * 2;

        $stack44 = y[$stack43];

        $stack45 = $stack42 * $stack44;

        $stack46 = virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack47 = $stack45 - $stack46;

        virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,int,double)>(i, 2, $stack47);

        $stack49 = virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(2, 0);

        $stack50 = i * 2;

        $stack51 = x[$stack50];

        $stack52 = $stack49 * $stack51;

        $stack53 = virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(2, 1);

        $stack54 = i * 2;

        $stack55 = $stack54 + 1;

        $stack56 = x[$stack55];

        $stack57 = $stack53 * $stack56;

        $stack58 = $stack52 + $stack57;

        $stack59 = virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(2, 2);

        $stack62 = $stack58 + $stack59;

        $stack60 = i * 2;

        $stack61 = y[$stack60];

        $stack63 = $stack62 * $stack61;

        $stack64 = virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(0, 0);

        $stack65 = i * 2;

        $stack66 = x[$stack65];

        $stack67 = $stack64 * $stack66;

        $stack68 = virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(0, 1);

        $stack69 = i * 2;

        $stack70 = $stack69 + 1;

        $stack71 = x[$stack70];

        $stack72 = $stack68 * $stack71;

        $stack73 = $stack67 + $stack72;

        $stack74 = virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(0, 2);

        $stack75 = $stack73 + $stack74;

        $stack76 = $stack63 - $stack75;

        virtualinvoke b.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack76);

        i = i + 1;

        goto label1;

     label2:
        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) b;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) n;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: int cvSolve(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r2, $r3, $r4, 0);

        return n;
    }

    public static org.bytedeco.opencv.opencv_core.CvMat getPerspectiveTransform(double[], double[], org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        java.lang.ThreadLocal $stack8;
        java.lang.Object $stack9;
        org.bytedeco.opencv.opencv_core.CvMat n, invSrcK, dstK, R, t, H;
        double[] src, dst;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        src := @parameter0: double[];

        dst := @parameter1: double[];

        invSrcK := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        dstK := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        R := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        t := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        H := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        $stack8 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal n3x1>;

        $stack9 = virtualinvoke $stack8.<java.lang.ThreadLocal: java.lang.Object get()>();

        n = (org.bytedeco.opencv.opencv_core.CvMat) $stack9;

        staticinvoke <org.bytedeco.javacv.JavaCV: org.bytedeco.opencv.opencv_core.CvMat getPlaneParameters(double[],double[],org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(src, dst, invSrcK, dstK, R, t, n);

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) t;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) n;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) R;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, -1.0, $r2, 1.0, $r3, 2);

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) dstK;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r4, $r5, $r6);

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) invSrcK;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r7, $r8, $r9);

        return H;
    }

    public static void perspectiveTransform(double[], double[], org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, boolean)
    {
        java.lang.ThreadLocal $stack9;
        java.lang.Object $stack10;
        org.bytedeco.opencv.opencv_core.CvMat H, t, n, R, dstK, invSrcK;
        boolean invert;
        double[] src, dst;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        src := @parameter0: double[];

        dst := @parameter1: double[];

        invSrcK := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        dstK := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        R := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        t := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        n := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        invert := @parameter7: boolean;

        $stack9 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal H3x3>;

        $stack10 = virtualinvoke $stack9.<java.lang.ThreadLocal: java.lang.Object get()>();

        H = (org.bytedeco.opencv.opencv_core.CvMat) $stack10;

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) t;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) n;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) R;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, -1.0, $r2, 1.0, $r3, 2);

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) dstK;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r4, $r5, $r6);

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) invSrcK;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r7, $r8, $r9);

        if invert == 0 goto label1;

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r10, $r11);

     label1:
        staticinvoke <org.bytedeco.javacv.JavaCV: void perspectiveTransform(double[],double[],org.bytedeco.opencv.opencv_core.CvMat)>(src, dst, H);

        return;
    }

    public static void HtoRt(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        java.lang.ThreadLocal $stack9, $stack11, $stack13, $stack15;
        java.lang.Object $stack10, $stack12, $stack14, $stack16;
        org.bytedeco.opencv.opencv_core.CvMat M, S, U, V, H, t, R;
        double[] $stack17, $stack32, $stack43;
        double $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, lambda, $stack34, $stack35, $stack37, $stack38, $stack40, $stack41, $stack45, $stack47, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack57, $stack59, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack69, $stack71, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        H := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        R := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        t := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        $stack9 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal M3x2>;

        $stack10 = virtualinvoke $stack9.<java.lang.ThreadLocal: java.lang.Object get()>();

        M = (org.bytedeco.opencv.opencv_core.CvMat) $stack10;

        $stack11 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal S2x2>;

        $stack12 = virtualinvoke $stack11.<java.lang.ThreadLocal: java.lang.Object get()>();

        S = (org.bytedeco.opencv.opencv_core.CvMat) $stack12;

        $stack13 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal U3x2>;

        $stack14 = virtualinvoke $stack13.<java.lang.ThreadLocal: java.lang.Object get()>();

        U = (org.bytedeco.opencv.opencv_core.CvMat) $stack14;

        $stack15 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal V2x2>;

        $stack16 = virtualinvoke $stack15.<java.lang.ThreadLocal: java.lang.Object get()>();

        V = (org.bytedeco.opencv.opencv_core.CvMat) $stack16;

        $stack17 = newarray (double)[6];

        $stack19 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack17[0] = $stack19;

        $stack21 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack17[1] = $stack21;

        $stack23 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(3);

        $stack17[2] = $stack23;

        $stack25 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack17[3] = $stack25;

        $stack27 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(6);

        $stack17[4] = $stack27;

        $stack29 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(7);

        $stack17[5] = $stack29;

        virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack17);

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) M;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) S;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) U;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) V;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSVD(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, $r2, $r3, 4);

        lambda = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(3);

        $stack32 = newarray (double)[3];

        $stack34 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack35 = $stack34 / lambda;

        $stack32[0] = $stack35;

        $stack37 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack38 = $stack37 / lambda;

        $stack32[1] = $stack38;

        $stack40 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(8);

        $stack41 = $stack40 / lambda;

        $stack32[2] = $stack41;

        virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack32);

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) U;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) V;

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) M;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r4, $r5, $r6);

        $stack43 = newarray (double)[9];

        $stack45 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack43[0] = $stack45;

        $stack47 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack43[1] = $stack47;

        $stack49 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack50 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack51 = $stack49 * $stack50;

        $stack52 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(3);

        $stack53 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack54 = $stack52 * $stack53;

        $stack55 = $stack51 - $stack54;

        $stack43[2] = $stack55;

        $stack57 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack43[3] = $stack57;

        $stack59 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(3);

        $stack43[4] = $stack59;

        $stack61 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack62 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack63 = $stack61 * $stack62;

        $stack64 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack65 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack66 = $stack64 * $stack65;

        $stack67 = $stack63 - $stack66;

        $stack43[5] = $stack67;

        $stack69 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack43[6] = $stack69;

        $stack71 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack43[7] = $stack71;

        $stack73 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack74 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(3);

        $stack75 = $stack73 * $stack74;

        $stack76 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack77 = virtualinvoke M.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack78 = $stack76 * $stack77;

        $stack79 = $stack75 - $stack78;

        $stack43[8] = $stack79;

        virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack43);

        return;
    }

    public static double HnToRt(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        java.lang.ThreadLocal $stack26, $stack28, $stack30, $stack32, $stack34, $stack36, $stack38, $stack40, $stack42, $stack44, $stack46;
        java.lang.Object $stack27, $stack29, $stack31, $stack33, $stack35, $stack37, $stack39, $stack41, $stack43, $stack45, $stack47;
        org.bytedeco.opencv.opencv_core.CvMat S, U, V, H, R1, R2, t1, t2, n1, n2, H1, H2, n, R, t;
        double $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack60, $stack61, $stack64, $stack65, $stack68, $stack69, $stack72, $stack73, $stack76, $stack77, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, d, $stack88, $stack89, $stack90, $stack92, $stack93, $stack94, $stack96, $stack97, $stack98, err2, $stack116, $stack117, $stack118, $stack119, $stack120, $stack121, $stack124, $stack126, $stack127, $stack128, $stack129, $stack130, $stack133, $stack135, $stack136, $stack137, $stack138, $stack139, $stack142, $stack143, $stack144, $stack145, $stack146, $stack147, $stack150, $stack152, $stack153, $stack154, $stack155, $stack156, $stack159, $stack161, $stack162, $stack163, $stack164, $stack165, i#2, err;
        double[] $stack86, $stack99, $stack101;
        byte $stack105;
        int $stack125, $stack134, $stack151, $stack160, i;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        H := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        n := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        R := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        t := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        $stack26 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal S3x3>;

        $stack27 = virtualinvoke $stack26.<java.lang.ThreadLocal: java.lang.Object get()>();

        S = (org.bytedeco.opencv.opencv_core.CvMat) $stack27;

        $stack28 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal U3x3>;

        $stack29 = virtualinvoke $stack28.<java.lang.ThreadLocal: java.lang.Object get()>();

        U = (org.bytedeco.opencv.opencv_core.CvMat) $stack29;

        $stack30 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal V3x3>;

        $stack31 = virtualinvoke $stack30.<java.lang.ThreadLocal: java.lang.Object get()>();

        V = (org.bytedeco.opencv.opencv_core.CvMat) $stack31;

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) S;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) U;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) V;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSVD(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, $r2, $r3, 0);

        $stack32 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal R13x3>;

        $stack33 = virtualinvoke $stack32.<java.lang.ThreadLocal: java.lang.Object get()>();

        R1 = (org.bytedeco.opencv.opencv_core.CvMat) $stack33;

        $stack34 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal R23x3>;

        $stack35 = virtualinvoke $stack34.<java.lang.ThreadLocal: java.lang.Object get()>();

        R2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack35;

        $stack36 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal t13x1>;

        $stack37 = virtualinvoke $stack36.<java.lang.ThreadLocal: java.lang.Object get()>();

        t1 = (org.bytedeco.opencv.opencv_core.CvMat) $stack37;

        $stack38 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal t23x1>;

        $stack39 = virtualinvoke $stack38.<java.lang.ThreadLocal: java.lang.Object get()>();

        t2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack39;

        $stack40 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal n13x1>;

        $stack41 = virtualinvoke $stack40.<java.lang.ThreadLocal: java.lang.Object get()>();

        n1 = (org.bytedeco.opencv.opencv_core.CvMat) $stack41;

        $stack42 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal n23x1>;

        $stack43 = virtualinvoke $stack42.<java.lang.ThreadLocal: java.lang.Object get()>();

        n2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack43;

        $stack44 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal H13x3>;

        $stack45 = virtualinvoke $stack44.<java.lang.ThreadLocal: java.lang.Object get()>();

        H1 = (org.bytedeco.opencv.opencv_core.CvMat) $stack45;

        $stack46 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal H23x3>;

        $stack47 = virtualinvoke $stack46.<java.lang.ThreadLocal: java.lang.Object get()>();

        H2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack47;

        staticinvoke <org.bytedeco.javacv.JavaCV: double homogToRt(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(S, U, V, R1, t1, n1, R2, t2, n2);

        $stack50 = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack51 = 1.0 / $stack50;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) R1;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) H1;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r4, $r5, $stack51, null, 0.0, $r6, 1);

        $stack53 = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack54 = 1.0 / $stack53;

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) R2;

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) H2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r7, $r8, $stack54, null, 0.0, $r9, 1);

        $stack56 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack57 = $stack56 - 1.0;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(0, $stack57);

        $stack60 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack61 = $stack60 - 1.0;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(4, $stack61);

        $stack64 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(8);

        $stack65 = $stack64 - 1.0;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(8, $stack65);

        $stack68 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack69 = $stack68 - 1.0;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(0, $stack69);

        $stack72 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        $stack73 = $stack72 - 1.0;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(4, $stack73);

        $stack76 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(8);

        $stack77 = $stack76 - 1.0;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(8, $stack77);

        $stack79 = virtualinvoke n.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack80 = staticinvoke <java.lang.Math: double abs(double)>($stack79);

        $stack81 = virtualinvoke n.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack82 = staticinvoke <java.lang.Math: double abs(double)>($stack81);

        $stack83 = $stack80 + $stack82;

        $stack84 = virtualinvoke n.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack85 = staticinvoke <java.lang.Math: double abs(double)>($stack84);

        d = $stack83 + $stack85;

        $stack86 = newarray (double)[3];

        $stack88 = virtualinvoke n.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack89 = staticinvoke <java.lang.Math: double signum(double)>($stack88);

        $stack90 = neg $stack89;

        $stack86[0] = $stack90;

        $stack92 = virtualinvoke n.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack93 = staticinvoke <java.lang.Math: double signum(double)>($stack92);

        $stack94 = neg $stack93;

        $stack86[1] = $stack94;

        $stack96 = virtualinvoke n.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack97 = staticinvoke <java.lang.Math: double signum(double)>($stack96);

        $stack98 = neg $stack97;

        $stack86[2] = $stack98;

        $stack99 = newarray (double)[3];

        $stack99[0] = 0.0;

        $stack99[1] = 0.0;

        $stack99[2] = 0.0;

        virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack99);

        $stack101 = newarray (double)[3];

        $stack101[0] = 0.0;

        $stack101[1] = 0.0;

        $stack101[2] = 0.0;

        virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack101);

        i = 0;

     label1:
        if i >= 3 goto label2;

        $stack116 = virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack117 = $stack86[i];

        $stack118 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(i);

        $stack119 = $stack117 * $stack118;

        $stack120 = $stack119 / d;

        $stack121 = $stack116 + $stack120;

        virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(0, $stack121);

        $stack124 = virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack126 = $stack86[i];

        $stack125 = i + 3;

        $stack127 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack125);

        $stack128 = $stack126 * $stack127;

        $stack129 = $stack128 / d;

        $stack130 = $stack124 + $stack129;

        virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(1, $stack130);

        $stack133 = virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack135 = $stack86[i];

        $stack134 = i + 6;

        $stack136 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack134);

        $stack137 = $stack135 * $stack136;

        $stack138 = $stack137 / d;

        $stack139 = $stack133 + $stack138;

        virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack139);

        $stack142 = virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack143 = $stack86[i];

        $stack144 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(i);

        $stack145 = $stack143 * $stack144;

        $stack146 = $stack145 / d;

        $stack147 = $stack142 + $stack146;

        virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(0, $stack147);

        $stack150 = virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack152 = $stack86[i];

        $stack151 = i + 3;

        $stack153 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack151);

        $stack154 = $stack152 * $stack153;

        $stack155 = $stack154 / d;

        $stack156 = $stack150 + $stack155;

        virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(1, $stack156);

        $stack159 = virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack161 = $stack86[i];

        $stack160 = i + 6;

        $stack162 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack160);

        $stack163 = $stack161 * $stack162;

        $stack164 = $stack163 / d;

        $stack165 = $stack159 + $stack164;

        virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack165);

        i = i + 1;

        goto label1;

     label2:
        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) t1;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) n;

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) H1;

        $r13 = (org.bytedeco.opencv.opencv_core.CvArr) H1;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r10, $r11, 1.0, $r12, 1.0, $r13, 2);

        $r14 = (org.bytedeco.opencv.opencv_core.CvArr) t2;

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) n;

        $r16 = (org.bytedeco.opencv.opencv_core.CvArr) H2;

        $r17 = (org.bytedeco.opencv.opencv_core.CvArr) H2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r14, $r15, 1.0, $r16, 1.0, $r17, 2);

        $r18 = (org.bytedeco.opencv.opencv_core.CvArr) H1;

        i#2 = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr)>($r18);

        $r19 = (org.bytedeco.opencv.opencv_core.CvArr) H2;

        err2 = staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvNorm(org.bytedeco.opencv.opencv_core.CvArr)>($r19);

        $stack105 = i#2 cmpg err2;

        if $stack105 >= 0 goto label5;

        if R == null goto label3;

        virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(org.bytedeco.opencv.opencv_core.CvMat)>(R1);

     label3:
        if t == null goto label4;

        virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(org.bytedeco.opencv.opencv_core.CvMat)>(t1);

     label4:
        err = i#2;

        goto label8;

     label5:
        if R == null goto label6;

        virtualinvoke R.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(org.bytedeco.opencv.opencv_core.CvMat)>(R2);

     label6:
        if t == null goto label7;

        virtualinvoke t.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(org.bytedeco.opencv.opencv_core.CvMat)>(t2);

     label7:
        err = err2;

     label8:
        return err;
    }

    public static double homogToRt(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        java.lang.ThreadLocal $stack12, $stack14, $stack16;
        java.lang.Object $stack13, $stack15, $stack17;
        org.bytedeco.opencv.opencv_core.CvMat S, U, V, H, R1, t1, n1, R2, t2, n2;
        double zeta;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3;

        H := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        R1 := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        t1 := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        n1 := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        R2 := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        t2 := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        n2 := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        $stack12 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal S3x3>;

        $stack13 = virtualinvoke $stack12.<java.lang.ThreadLocal: java.lang.Object get()>();

        S = (org.bytedeco.opencv.opencv_core.CvMat) $stack13;

        $stack14 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal U3x3>;

        $stack15 = virtualinvoke $stack14.<java.lang.ThreadLocal: java.lang.Object get()>();

        U = (org.bytedeco.opencv.opencv_core.CvMat) $stack15;

        $stack16 = <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal V3x3>;

        $stack17 = virtualinvoke $stack16.<java.lang.ThreadLocal: java.lang.Object get()>();

        V = (org.bytedeco.opencv.opencv_core.CvMat) $stack17;

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) H;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) S;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) U;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) V;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSVD(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, $r2, $r3, 0);

        zeta = staticinvoke <org.bytedeco.javacv.JavaCV: double homogToRt(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(S, U, V, R1, t1, n1, R2, t2, n2);

        return zeta;
    }

    public static double homogToRt(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat S, R1, U, V, R2, n1, n2, t1, t2;
        double $stack29, $stack30, s1, $stack31, $stack32, s3, zeta, $stack33, $stack34, a1, $stack36, $stack37, b1, $stack40, $stack41, $stack42, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack52, $stack53, $stack54, $stack55, $stack56, $stack59, $stack60, $stack61, $stack62, $stack63, $stack67, $stack69, $stack71, $stack74, $stack76, $stack78, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, $stack86, $stack88, $stack89, $stack90, $stack91, $stack92, $stack93, $stack94, $stack95, $stack97, $stack98, $stack99, $stack100, $stack101, $stack102, $stack103, $stack104, $stack106, $stack107, $stack108, $stack109, $stack110, $stack111, $stack112, $stack113, $stack116, $stack118, $stack121, $stack122, $stack125, $stack126, $stack129, $stack130, $stack133, $stack134, sign1, sign2;
        double[] ab, cd, ef, $stack51, $stack58, $stack65, $stack72;
        byte $stack117, $stack119;
        int i;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        S := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        U := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        V := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        R1 := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        t1 := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        n1 := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        R2 := @parameter6: org.bytedeco.opencv.opencv_core.CvMat;

        t2 := @parameter7: org.bytedeco.opencv.opencv_core.CvMat;

        n2 := @parameter8: org.bytedeco.opencv.opencv_core.CvMat;

        $stack29 = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack30 = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        s1 = $stack29 / $stack30;

        $stack31 = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(8);

        $stack32 = virtualinvoke S.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(4);

        s3 = $stack31 / $stack32;

        zeta = s1 - s3;

        $stack33 = s3 * s3;

        $stack34 = 1.0 - $stack33;

        a1 = staticinvoke <java.lang.Math: double sqrt(double)>($stack34);

        $stack36 = s1 * s1;

        $stack37 = $stack36 - 1.0;

        b1 = staticinvoke <java.lang.Math: double sqrt(double)>($stack37);

        ab = staticinvoke <org.bytedeco.javacv.JavaCV: double[] unitize(double,double)>(a1, b1);

        $stack40 = s1 * s3;

        $stack42 = 1.0 + $stack40;

        $stack41 = a1 * b1;

        cd = staticinvoke <org.bytedeco.javacv.JavaCV: double[] unitize(double,double)>($stack42, $stack41);

        $stack44 = ab[1];

        $stack45 = neg $stack44;

        $stack49 = $stack45 / s1;

        $stack46 = ab[0];

        $stack47 = neg $stack46;

        $stack48 = $stack47 / s3;

        ef = staticinvoke <org.bytedeco.javacv.JavaCV: double[] unitize(double,double)>($stack49, $stack48);

        $stack51 = newarray (double)[9];

        $stack52 = cd[0];

        $stack51[0] = $stack52;

        $stack51[1] = 0.0;

        $stack53 = cd[1];

        $stack51[2] = $stack53;

        $stack51[3] = 0.0;

        $stack51[4] = 1.0;

        $stack51[5] = 0.0;

        $stack54 = cd[1];

        $stack55 = neg $stack54;

        $stack51[6] = $stack55;

        $stack51[7] = 0.0;

        $stack56 = cd[0];

        $stack51[8] = $stack56;

        virtualinvoke R1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack51);

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) U;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) R1;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) R1;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, 1.0, null, 0.0, $r2, 0);

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) R1;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) V;

        $r5 = (org.bytedeco.opencv.opencv_core.CvArr) R1;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r3, $r4, 1.0, null, 0.0, $r5, 2);

        $stack58 = newarray (double)[9];

        $stack59 = cd[0];

        $stack58[0] = $stack59;

        $stack58[1] = 0.0;

        $stack60 = cd[1];

        $stack61 = neg $stack60;

        $stack58[2] = $stack61;

        $stack58[3] = 0.0;

        $stack58[4] = 1.0;

        $stack58[5] = 0.0;

        $stack62 = cd[1];

        $stack58[6] = $stack62;

        $stack58[7] = 0.0;

        $stack63 = cd[0];

        $stack58[8] = $stack63;

        virtualinvoke R2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack58);

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) U;

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) R2;

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) R2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r6, $r7, 1.0, null, 0.0, $r8, 0);

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) R2;

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) V;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) R2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvGEMM(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,double,org.bytedeco.opencv.opencv_core.CvArr,int)>($r9, $r10, 1.0, null, 0.0, $r11, 2);

        $stack65 = newarray (double)[3];

        $stack67 = virtualinvoke V.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack65[0] = $stack67;

        $stack69 = virtualinvoke V.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(3);

        $stack65[1] = $stack69;

        $stack71 = virtualinvoke V.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(6);

        $stack65[2] = $stack71;

        $stack72 = newarray (double)[3];

        $stack74 = virtualinvoke V.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack72[0] = $stack74;

        $stack76 = virtualinvoke V.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack72[1] = $stack76;

        $stack78 = virtualinvoke V.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(8);

        $stack72[2] = $stack78;

        sign1 = 1.0;

        sign2 = 1.0;

        i = 2;

     label1:
        if i < 0 goto label4;

        $stack80 = ab[1];

        $stack79 = $stack65[i];

        $stack84 = $stack80 * $stack79;

        $stack82 = ab[0];

        $stack81 = $stack72[i];

        $stack83 = $stack82 * $stack81;

        $stack85 = $stack84 - $stack83;

        $stack86 = sign1 * $stack85;

        virtualinvoke n1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack86);

        $stack89 = ab[1];

        $stack88 = $stack65[i];

        $stack93 = $stack89 * $stack88;

        $stack91 = ab[0];

        $stack90 = $stack72[i];

        $stack92 = $stack91 * $stack90;

        $stack94 = $stack93 + $stack92;

        $stack95 = sign2 * $stack94;

        virtualinvoke n2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack95);

        $stack98 = ef[0];

        $stack97 = $stack65[i];

        $stack102 = $stack98 * $stack97;

        $stack100 = ef[1];

        $stack99 = $stack72[i];

        $stack101 = $stack100 * $stack99;

        $stack103 = $stack102 + $stack101;

        $stack104 = sign1 * $stack103;

        virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack104);

        $stack107 = ef[0];

        $stack106 = $stack65[i];

        $stack111 = $stack107 * $stack106;

        $stack109 = ef[1];

        $stack108 = $stack72[i];

        $stack110 = $stack109 * $stack108;

        $stack112 = $stack111 - $stack110;

        $stack113 = sign2 * $stack112;

        virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(i, $stack113);

        if i != 2 goto label3;

        $stack116 = virtualinvoke n1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack117 = $stack116 cmpg 0.0;

        if $stack117 >= 0 goto label2;

        $stack129 = virtualinvoke n1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack130 = neg $stack129;

        virtualinvoke n1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack130);

        $stack133 = virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack134 = neg $stack133;

        virtualinvoke t1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack134);

        sign1 = -1.0;

     label2:
        $stack118 = virtualinvoke n2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack119 = $stack118 cmpg 0.0;

        if $stack119 >= 0 goto label3;

        $stack121 = virtualinvoke n2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack122 = neg $stack121;

        virtualinvoke n2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack122);

        $stack125 = virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack126 = neg $stack125;

        virtualinvoke t2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack126);

        sign2 = -1.0;

     label3:
        i = i + -1;

        goto label1;

     label4:
        return zeta;
    }

    public static double[] unitize(double, double)
    {
        double $stack6, $stack7, $stack8, norm, a, b;
        byte $stack10;
        double[] $stack11;

        a := @parameter0: double;

        b := @parameter1: double;

        $stack7 = a * a;

        $stack6 = b * b;

        $stack8 = $stack7 + $stack6;

        norm = staticinvoke <java.lang.Math: double sqrt(double)>($stack8);

        $stack10 = norm cmpl 1.1920928955078125E-7;

        if $stack10 <= 0 goto label1;

        a = a / norm;

        b = b / norm;

     label1:
        $stack11 = newarray (double)[2];

        $stack11[0] = a;

        $stack11[1] = b;

        return $stack11;
    }

    public static void adaptiveThreshold(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, boolean, int, int, double, double)
    {
        int w, h, srcChannels, srcDepth, dstDepth, srcStep, dstStep, sumStep, sqSumStep, windowMax, windowMin, $stack45, $stack46, $stack48, $stack47, $stack49, $stack51, $stack52, $stack53, $stack55, $stack60, $stack62, $stack63, $stack65, $stack64, $stack66, $stack68, $stack69, $stack70, $stack72, $stack77;
        org.bytedeco.opencv.opencv_core.IplImage dstImage, sumImage, sqSumImage, $stack162, srcImage;
        java.nio.ByteBuffer srcBuf, dstBuf;
        java.nio.DoubleBuffer sumBuf, sqSumBuf;
        double totalVar, varMultiplier, targetVar, k, $stack50, $stack54, $stack56, $stack57, $stack58, $stack59, totalMean, $stack61, $stack67, $stack71, $stack73, $stack74, $stack75, $stack76, totalSqMean, $stack78, $stack79;
        boolean invert;
        byte $stack164;
        org.bytedeco.javacv.JavaCV$1 $u0;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3, $r4;
        org.bytedeco.javacv.Parallel$Looper $r5;

        srcImage := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        sumImage := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        sqSumImage := @parameter2: org.bytedeco.opencv.opencv_core.IplImage;

        dstImage := @parameter3: org.bytedeco.opencv.opencv_core.IplImage;

        invert := @parameter4: boolean;

        windowMax := @parameter5: int;

        windowMin := @parameter6: int;

        varMultiplier := @parameter7: double;

        k := @parameter8: double;

        w = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        h = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        srcChannels = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        srcDepth = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        dstDepth = virtualinvoke dstImage.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        if srcChannels <= 1 goto label3;

        if dstDepth != 8 goto label3;

        $stack162 = srcImage;

        if srcChannels != 4 goto label1;

        $stack164 = 11;

        goto label2;

     label1:
        $stack164 = 6;

     label2:
        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) $stack162;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) dstImage;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvCvtColor(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, $stack164);

        srcImage = dstImage;

     label3:
        srcBuf = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        dstBuf = virtualinvoke dstImage.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        sumBuf = virtualinvoke sumImage.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.DoubleBuffer getDoubleBuffer()>();

        sqSumBuf = virtualinvoke sqSumImage.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.DoubleBuffer getDoubleBuffer()>();

        srcStep = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        dstStep = virtualinvoke dstImage.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        sumStep = virtualinvoke sumImage.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        sqSumStep = virtualinvoke sqSumImage.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) srcImage;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) sumImage;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) sqSumImage;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvIntegral(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r2, $r3, $r4, null);

        $stack45 = h - 1;

        $stack46 = $stack45 * sumStep;

        $stack48 = $stack46 / 8;

        $stack47 = w - 1;

        $stack49 = $stack48 + $stack47;

        $stack50 = virtualinvoke sumBuf.<java.nio.DoubleBuffer: double get(int)>($stack49);

        $stack51 = h - 1;

        $stack52 = $stack51 * sumStep;

        $stack53 = $stack52 / 8;

        $stack54 = virtualinvoke sumBuf.<java.nio.DoubleBuffer: double get(int)>($stack53);

        $stack56 = $stack50 - $stack54;

        $stack55 = w - 1;

        $stack57 = virtualinvoke sumBuf.<java.nio.DoubleBuffer: double get(int)>($stack55);

        $stack58 = $stack56 - $stack57;

        $stack59 = virtualinvoke sumBuf.<java.nio.DoubleBuffer: double get(int)>(0);

        totalMean = $stack58 + $stack59;

        $stack60 = w * h;

        $stack61 = (double) $stack60;

        totalMean = totalMean / $stack61;

        $stack62 = h - 1;

        $stack63 = $stack62 * sqSumStep;

        $stack65 = $stack63 / 8;

        $stack64 = w - 1;

        $stack66 = $stack65 + $stack64;

        $stack67 = virtualinvoke sqSumBuf.<java.nio.DoubleBuffer: double get(int)>($stack66);

        $stack68 = h - 1;

        $stack69 = $stack68 * sqSumStep;

        $stack70 = $stack69 / 8;

        $stack71 = virtualinvoke sqSumBuf.<java.nio.DoubleBuffer: double get(int)>($stack70);

        $stack73 = $stack67 - $stack71;

        $stack72 = w - 1;

        $stack74 = virtualinvoke sqSumBuf.<java.nio.DoubleBuffer: double get(int)>($stack72);

        $stack75 = $stack73 - $stack74;

        $stack76 = virtualinvoke sqSumBuf.<java.nio.DoubleBuffer: double get(int)>(0);

        totalSqMean = $stack75 + $stack76;

        $stack77 = w * h;

        $stack78 = (double) $stack77;

        totalSqMean = totalSqMean / $stack78;

        $stack79 = totalMean * totalMean;

        totalVar = totalSqMean - $stack79;

        targetVar = totalVar * varMultiplier;

        $u0 = new org.bytedeco.javacv.JavaCV$1;

        specialinvoke $u0.<org.bytedeco.javacv.JavaCV$1: void <init>(int,int,int,int,java.nio.DoubleBuffer,int,java.nio.DoubleBuffer,int,double,int,java.nio.ByteBuffer,int,boolean,double,java.nio.ByteBuffer,int)>(w, windowMax, windowMin, h, sumBuf, sumStep, sqSumBuf, sqSumStep, targetVar, srcDepth, srcBuf, srcStep, invert, k, dstBuf, dstStep);

        $r5 = (org.bytedeco.javacv.Parallel$Looper) $u0;

        staticinvoke <org.bytedeco.javacv.Parallel: void loop(int,int,org.bytedeco.javacv.Parallel$Looper)>(0, h, $r5);

        return;
    }

    public static void hysteresisThreshold(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, double, double, double)
    {
        double highThresh, lowThresh, maxValue, $stack29;
        long $stack27, $stack28, $stack30, $stack32;
        int highThreshold, lowThreshold, $stack31, $stack33, srcStep, dstStep, $stack40, $stack42, $stack45, $stack47, $stack48, $stack50, $stack55, $stack56, $stack58, $stack61, $stack63, $stack65, $stack66, $stack70, $stack71, $stack72, $stack78, $stack79, $stack81, $stack83, $stack86, $stack87, $stack91, $stack92, $stack93, $stack99, $stack100, $stack102, $stack103, $stack104, $stack106, $stack108, $stack109, $stack111, $stack116, $stack117, $stack118, $stack120, $stack126, $stack127, $stack129, $stack131, $stack133, $stack136, $stack137, $stack139, $stack141, $stack143, $stack148, $stack150, $stack151, $stack153, $stack154, $stack155, $stack157, $stack160, $stack162, $stack163, $stack165, $stack166, $stack167, $stack169, $stack170, $stack178, $stack180, $stack182, $stack184, $stack186, $stack187, $stack189, $stack190, $stack191, $stack193, $stack194, $stack196, $stack197, $stack198, $stack209, $stack211, $stack213, $stack215, $stack222, $stack224, $stack226, $stack228, $stack230, $stack232, $stack234, $stack235, $stack237, $stack242, $stack244, $stack246, $stack248, $stack251, height, width, srcIndex, dstIndex, in, i#9, $stack44, $stack52, $stack159, $stack200, $stack172, $stack60, $stack89, $stack68;
        byte medValue, highValue, $stack41, $stack46, $stack57, $stack59, $stack62, $stack64, $stack67, $stack73, $stack80, $stack84, $stack88, $stack94, $stack101, $stack105, $stack110, $stack119, $stack128, $stack134, $stack138, $stack149, $stack161, $stack185, prev4, $stack233, prev, prev2, prev3;
        org.bytedeco.opencv.opencv_core.IplImage srcImage, dstImage;
        java.nio.ByteBuffer srcData, dstData;

        srcImage := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        dstImage := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        highThresh := @parameter2: double;

        lowThresh := @parameter3: double;

        maxValue := @parameter4: double;

        $stack27 = staticinvoke <java.lang.Math: long round(double)>(highThresh);

        highThreshold = (int) $stack27;

        $stack28 = staticinvoke <java.lang.Math: long round(double)>(lowThresh);

        lowThreshold = (int) $stack28;

        $stack29 = maxValue / 2.0;

        $stack30 = staticinvoke <java.lang.Math: long round(double)>($stack29);

        $stack31 = (int) $stack30;

        medValue = (byte) $stack31;

        $stack32 = staticinvoke <java.lang.Math: long round(double)>(maxValue);

        $stack33 = (int) $stack32;

        highValue = (byte) $stack33;

        height = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        width = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        srcData = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        dstData = virtualinvoke dstImage.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        srcStep = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        dstStep = virtualinvoke dstImage.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        srcIndex = 0;

        dstIndex = 0;

        $stack40 = 0 + 0;

        $stack41 = virtualinvoke srcData.<java.nio.ByteBuffer: byte get(int)>($stack40);

        in = $stack41 & 255;

        if in < highThreshold goto label01;

        $stack251 = 0 + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack251, highValue);

        goto label03;

     label01:
        if in >= lowThreshold goto label02;

        $stack248 = 0 + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack248, 0);

        goto label03;

     label02:
        $stack42 = 0 + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack42, medValue);

     label03:
        i#9 = 1;

     label04:
        $stack44 = width - 1;

        if i#9 >= $stack44 goto label09;

        $stack232 = 0 + i#9;

        $stack233 = virtualinvoke srcData.<java.nio.ByteBuffer: byte get(int)>($stack232);

        in = $stack233 & 255;

        if in < highThreshold goto label05;

        $stack246 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack246, highValue);

        goto label08;

     label05:
        if in >= lowThreshold goto label06;

        $stack244 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack244, 0);

        goto label08;

     label06:
        $stack234 = 0 + i#9;

        $stack235 = $stack234 - 1;

        prev = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack235);

        if prev != highValue goto label07;

        $stack242 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack242, highValue);

        goto label08;

     label07:
        $stack237 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack237, medValue);

     label08:
        i#9 = i#9 + 1;

        goto label04;

     label09:
        i#9 = width - 1;

        $stack45 = 0 + i#9;

        $stack46 = virtualinvoke srcData.<java.nio.ByteBuffer: byte get(int)>($stack45);

        in = $stack46 & 255;

        if in < highThreshold goto label10;

        $stack230 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack230, highValue);

        goto label13;

     label10:
        if in >= lowThreshold goto label11;

        $stack228 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack228, 0);

        goto label13;

     label11:
        $stack47 = 0 + i#9;

        $stack48 = $stack47 - 1;

        prev = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack48);

        if prev != highValue goto label12;

        $stack226 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack226, highValue);

        goto label13;

     label12:
        $stack50 = 0 + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack50, medValue);

     label13:
        height = height + -1;

     label14:
        $stack52 = height;

        height = height + -1;

        if $stack52 <= 0 goto label32;

        srcIndex = srcIndex + srcStep;

        dstIndex = dstIndex + dstStep;

        $stack148 = srcIndex + 0;

        $stack149 = virtualinvoke srcData.<java.nio.ByteBuffer: byte get(int)>($stack148);

        in = $stack149 & 255;

        if in < highThreshold goto label15;

        $stack224 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack224, highValue);

        goto label19;

     label15:
        if in >= lowThreshold goto label16;

        $stack222 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack222, 0);

        goto label19;

     label16:
        $stack150 = dstIndex + 0;

        $stack151 = $stack150 - dstStep;

        prev = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack151);

        $stack153 = dstIndex + 0;

        $stack154 = $stack153 - dstStep;

        $stack155 = $stack154 + 1;

        prev2 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack155);

        if prev == highValue goto label17;

        if prev2 != highValue goto label18;

     label17:
        $stack157 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack157, highValue);

        goto label19;

     label18:
        $stack215 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack215, medValue);

     label19:
        i#9 = 1;

     label20:
        $stack159 = width - 1;

        if i#9 >= $stack159 goto label26;

        $stack184 = srcIndex + i#9;

        $stack185 = virtualinvoke srcData.<java.nio.ByteBuffer: byte get(int)>($stack184);

        in = $stack185 & 255;

        if in < highThreshold goto label21;

        $stack213 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack213, highValue);

        goto label25;

     label21:
        if in >= lowThreshold goto label22;

        $stack211 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack211, 0);

        goto label25;

     label22:
        $stack186 = dstIndex + i#9;

        $stack187 = $stack186 - 1;

        prev = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack187);

        $stack189 = dstIndex + i#9;

        $stack190 = $stack189 - dstStep;

        $stack191 = $stack190 - 1;

        prev2 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack191);

        $stack193 = dstIndex + i#9;

        $stack194 = $stack193 - dstStep;

        prev3 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack194);

        $stack196 = dstIndex + i#9;

        $stack197 = $stack196 - dstStep;

        $stack198 = $stack197 + 1;

        prev4 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack198);

        if prev == highValue goto label23;

        if prev2 == highValue goto label23;

        if prev3 == highValue goto label23;

        if prev4 != highValue goto label24;

     label23:
        $stack200 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack200, highValue);

        goto label25;

     label24:
        $stack209 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack209, medValue);

     label25:
        i#9 = i#9 + 1;

        goto label20;

     label26:
        i#9 = width - 1;

        $stack160 = srcIndex + i#9;

        $stack161 = virtualinvoke srcData.<java.nio.ByteBuffer: byte get(int)>($stack160);

        in = $stack161 & 255;

        if in < highThreshold goto label27;

        $stack182 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack182, highValue);

        goto label14;

     label27:
        if in >= lowThreshold goto label28;

        $stack180 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack180, 0);

        goto label14;

     label28:
        $stack162 = dstIndex + i#9;

        $stack163 = $stack162 - 1;

        prev = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack163);

        $stack165 = dstIndex + i#9;

        $stack166 = $stack165 - dstStep;

        $stack167 = $stack166 - 1;

        prev2 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack167);

        $stack169 = dstIndex + i#9;

        $stack170 = $stack169 - dstStep;

        prev3 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack170);

        if prev == highValue goto label29;

        if prev2 == highValue goto label29;

        if prev3 != highValue goto label30;

     label29:
        $stack172 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack172, highValue);

        goto label31;

     label30:
        $stack178 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack178, medValue);

     label31:
        goto label14;

     label32:
        height = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        width = virtualinvoke srcImage.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack55 = height - 1;

        dstIndex = $stack55 * dstStep;

        i#9 = width - 1;

        $stack56 = dstIndex + i#9;

        $stack57 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack56);

        if $stack57 != medValue goto label33;

        $stack143 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack143, 0);

     label33:
        i#9 = width - 2;

     label34:
        if i#9 <= 0 goto label37;

        $stack133 = dstIndex + i#9;

        $stack134 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack133);

        if $stack134 != medValue goto label36;

        $stack136 = dstIndex + i#9;

        $stack137 = $stack136 + 1;

        $stack138 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack137);

        if $stack138 != highValue goto label35;

        $stack141 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack141, highValue);

        goto label36;

     label35:
        $stack139 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack139, 0);

     label36:
        i#9 = i#9 + -1;

        goto label34;

     label37:
        $stack58 = dstIndex + 0;

        $stack59 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack58);

        if $stack59 != medValue goto label39;

        $stack126 = dstIndex + 0;

        $stack127 = $stack126 + 1;

        $stack128 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack127);

        if $stack128 != highValue goto label38;

        $stack131 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack131, highValue);

        goto label39;

     label38:
        $stack129 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack129, 0);

     label39:
        height = height + -1;

     label40:
        $stack60 = height;

        height = height + -1;

        if $stack60 <= 0 goto label51;

        dstIndex = dstIndex - dstStep;

        i#9 = width - 1;

        $stack61 = dstIndex + i#9;

        $stack62 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack61);

        if $stack62 != medValue goto label43;

        $stack108 = dstIndex + i#9;

        $stack109 = $stack108 + dstStep;

        $stack110 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack109);

        if $stack110 == highValue goto label41;

        $stack116 = dstIndex + i#9;

        $stack117 = $stack116 + dstStep;

        $stack118 = $stack117 - 1;

        $stack119 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack118);

        if $stack119 != highValue goto label42;

     label41:
        $stack111 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack111, highValue);

        goto label43;

     label42:
        $stack120 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack120, 0);

     label43:
        i#9 = width - 2;

     label44:
        if i#9 <= 0 goto label48;

        $stack83 = dstIndex + i#9;

        $stack84 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack83);

        if $stack84 != medValue goto label47;

        $stack86 = dstIndex + i#9;

        $stack87 = $stack86 + 1;

        $stack88 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack87);

        if $stack88 == highValue goto label45;

        $stack91 = dstIndex + i#9;

        $stack92 = $stack91 + dstStep;

        $stack93 = $stack92 + 1;

        $stack94 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack93);

        if $stack94 == highValue goto label45;

        $stack99 = dstIndex + i#9;

        $stack100 = $stack99 + dstStep;

        $stack101 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack100);

        if $stack101 == highValue goto label45;

        $stack102 = dstIndex + i#9;

        $stack103 = $stack102 + dstStep;

        $stack104 = $stack103 - 1;

        $stack105 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack104);

        if $stack105 != highValue goto label46;

     label45:
        $stack89 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack89, highValue);

        goto label47;

     label46:
        $stack106 = dstIndex + i#9;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack106, 0);

     label47:
        i#9 = i#9 + -1;

        goto label44;

     label48:
        $stack63 = dstIndex + 0;

        $stack64 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack63);

        if $stack64 != medValue goto label40;

        $stack65 = dstIndex + 0;

        $stack66 = $stack65 + 1;

        $stack67 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack66);

        if $stack67 == highValue goto label49;

        $stack70 = dstIndex + 0;

        $stack71 = $stack70 + dstStep;

        $stack72 = $stack71 + 1;

        $stack73 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack72);

        if $stack73 == highValue goto label49;

        $stack78 = dstIndex + 0;

        $stack79 = $stack78 + dstStep;

        $stack80 = virtualinvoke dstData.<java.nio.ByteBuffer: byte get(int)>($stack79);

        if $stack80 != highValue goto label50;

     label49:
        $stack68 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack68, highValue);

        goto label40;

     label50:
        $stack81 = dstIndex + 0;

        virtualinvoke dstData.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>($stack81, 0);

        goto label40;

     label51:
        return;
    }

    public static void clamp(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, double, double)
    {
        org.bytedeco.opencv.opencv_core.IplImage src, dst;
        int $stack9, $stack12, $stack21, $stack32, $stack34, $stack38, $stack45, $stack47, $stack51, $stack58, $stack59, $stack63, $stack69, $stack74, $stack81, $stack86, i;
        double $stack13, max, $stack14, min, $stack15, $stack23, $stack24, $stack25, $stack35, $stack36, $stack37, $stack48, $stack49, $stack50, $stack60, $stack61, $stack62, $stack71, $stack72, $stack73, $stack83, $stack84, $stack85;
        float $stack22, $stack26;
        short $stack33, $stack39, $stack70, $stack75;
        byte $stack46, $stack52, $stack82, $stack87;
        boolean $stack91;
        java.lang.AssertionError $stack92;
        java.nio.ByteBuffer sb, db;
        java.nio.ShortBuffer sb#4, db#5;
        java.nio.FloatBuffer sb#7, db#8;
        java.nio.IntBuffer sb#16, db#17;
        java.nio.DoubleBuffer sb#19, db#20;

        src := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        dst := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        min := @parameter2: double;

        max := @parameter3: double;

        $stack9 = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        lookupswitch($stack9)
        {
            case -2147483640: goto label10;
            case -2147483632: goto label13;
            case -2147483616: goto label16;
            case 8: goto label01;
            case 16: goto label04;
            case 32: goto label07;
            case 64: goto label19;
            default: goto label22;
        };

     label01:
        sb = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        db = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        i = 0;

     label02:
        $stack45 = virtualinvoke sb.<java.nio.ByteBuffer: int capacity()>();

        if i >= $stack45 goto label03;

        $stack46 = virtualinvoke sb.<java.nio.ByteBuffer: byte get(int)>(i);

        $stack47 = $stack46 & 255;

        $stack48 = (double) $stack47;

        $stack49 = staticinvoke <java.lang.Math: double min(double,double)>($stack48, max);

        $stack50 = staticinvoke <java.lang.Math: double max(double,double)>($stack49, min);

        $stack51 = (int) $stack50;

        $stack52 = (byte) $stack51;

        virtualinvoke db.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(i, $stack52);

        i = i + 1;

        goto label02;

     label03:
        goto label23;

     label04:
        sb#4 = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ShortBuffer getShortBuffer()>();

        db#5 = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ShortBuffer getShortBuffer()>();

        i = 0;

     label05:
        $stack32 = virtualinvoke sb#4.<java.nio.ShortBuffer: int capacity()>();

        if i >= $stack32 goto label06;

        $stack33 = virtualinvoke sb#4.<java.nio.ShortBuffer: short get(int)>(i);

        $stack34 = $stack33 & 65535;

        $stack35 = (double) $stack34;

        $stack36 = staticinvoke <java.lang.Math: double min(double,double)>($stack35, max);

        $stack37 = staticinvoke <java.lang.Math: double max(double,double)>($stack36, min);

        $stack38 = (int) $stack37;

        $stack39 = (short) $stack38;

        virtualinvoke db#5.<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>(i, $stack39);

        i = i + 1;

        goto label05;

     label06:
        goto label23;

     label07:
        sb#7 = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.FloatBuffer getFloatBuffer()>();

        db#8 = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.FloatBuffer getFloatBuffer()>();

        i = 0;

     label08:
        $stack21 = virtualinvoke sb#7.<java.nio.FloatBuffer: int capacity()>();

        if i >= $stack21 goto label09;

        $stack22 = virtualinvoke sb#7.<java.nio.FloatBuffer: float get(int)>(i);

        $stack23 = (double) $stack22;

        $stack24 = staticinvoke <java.lang.Math: double min(double,double)>($stack23, max);

        $stack25 = staticinvoke <java.lang.Math: double max(double,double)>($stack24, min);

        $stack26 = (float) $stack25;

        virtualinvoke db#8.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(i, $stack26);

        i = i + 1;

        goto label08;

     label09:
        goto label23;

     label10:
        sb = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        db = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        i = 0;

     label11:
        $stack81 = virtualinvoke sb.<java.nio.ByteBuffer: int capacity()>();

        if i >= $stack81 goto label12;

        $stack82 = virtualinvoke sb.<java.nio.ByteBuffer: byte get(int)>(i);

        $stack83 = (double) $stack82;

        $stack84 = staticinvoke <java.lang.Math: double min(double,double)>($stack83, max);

        $stack85 = staticinvoke <java.lang.Math: double max(double,double)>($stack84, min);

        $stack86 = (int) $stack85;

        $stack87 = (byte) $stack86;

        virtualinvoke db.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(i, $stack87);

        i = i + 1;

        goto label11;

     label12:
        goto label23;

     label13:
        sb#4 = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ShortBuffer getShortBuffer()>();

        db#5 = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ShortBuffer getShortBuffer()>();

        i = 0;

     label14:
        $stack69 = virtualinvoke sb#4.<java.nio.ShortBuffer: int capacity()>();

        if i >= $stack69 goto label15;

        $stack70 = virtualinvoke sb#4.<java.nio.ShortBuffer: short get(int)>(i);

        $stack71 = (double) $stack70;

        $stack72 = staticinvoke <java.lang.Math: double min(double,double)>($stack71, max);

        $stack73 = staticinvoke <java.lang.Math: double max(double,double)>($stack72, min);

        $stack74 = (int) $stack73;

        $stack75 = (short) $stack74;

        virtualinvoke db#5.<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>(i, $stack75);

        i = i + 1;

        goto label14;

     label15:
        goto label23;

     label16:
        sb#16 = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.IntBuffer getIntBuffer()>();

        db#17 = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.IntBuffer getIntBuffer()>();

        i = 0;

     label17:
        $stack58 = virtualinvoke sb#16.<java.nio.IntBuffer: int capacity()>();

        if i >= $stack58 goto label18;

        $stack59 = virtualinvoke sb#16.<java.nio.IntBuffer: int get(int)>(i);

        $stack60 = (double) $stack59;

        $stack61 = staticinvoke <java.lang.Math: double min(double,double)>($stack60, max);

        $stack62 = staticinvoke <java.lang.Math: double max(double,double)>($stack61, min);

        $stack63 = (int) $stack62;

        virtualinvoke db#17.<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>(i, $stack63);

        i = i + 1;

        goto label17;

     label18:
        goto label23;

     label19:
        sb#19 = virtualinvoke src.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.DoubleBuffer getDoubleBuffer()>();

        db#20 = virtualinvoke dst.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.DoubleBuffer getDoubleBuffer()>();

        i = 0;

     label20:
        $stack12 = virtualinvoke sb#19.<java.nio.DoubleBuffer: int capacity()>();

        if i >= $stack12 goto label21;

        $stack13 = virtualinvoke sb#19.<java.nio.DoubleBuffer: double get(int)>(i);

        $stack14 = staticinvoke <java.lang.Math: double min(double,double)>($stack13, max);

        $stack15 = staticinvoke <java.lang.Math: double max(double,double)>($stack14, min);

        virtualinvoke db#20.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>(i, $stack15);

        i = i + 1;

        goto label20;

     label21:
        goto label23;

     label22:
        $stack91 = <org.bytedeco.javacv.JavaCV: boolean $assertionsDisabled>;

        if $stack91 != 0 goto label23;

        $stack92 = new java.lang.AssertionError;

        specialinvoke $stack92.<java.lang.AssertionError: void <init>()>();

        throw $stack92;

     label23:
        return;
    }

    public static double norm(double[])
    {
        double[] v;
        double $stack1;

        v := @parameter0: double[];

        $stack1 = staticinvoke <org.bytedeco.javacv.JavaCV: double norm(double[],double)>(v, 2.0);

        return $stack1;
    }

    public static double norm(double[], double)
    {
        double p, $stack14, $stack16, $stack17, $stack30, $stack33, norm, e;
        byte $stack10, $stack11, $stack12, $stack13, $stack22, $stack26;
        double[] v;
        int l6, l7;

        v := @parameter0: double[];

        p := @parameter1: double;

        norm = 0.0;

        $stack10 = p cmpl 1.0;

        if $stack10 != 0 goto label03;

        l6 = lengthof v;

        l7 = 0;

     label01:
        if l7 >= l6 goto label02;

        e = v[l7];

        $stack33 = staticinvoke <java.lang.Math: double abs(double)>(e);

        norm = norm + $stack33;

        l7 = l7 + 1;

        goto label01;

     label02:
        goto label17;

     label03:
        $stack11 = p cmpl 2.0;

        if $stack11 != 0 goto label06;

        l6 = lengthof v;

        l7 = 0;

     label04:
        if l7 >= l6 goto label05;

        e = v[l7];

        $stack30 = e * e;

        norm = norm + $stack30;

        l7 = l7 + 1;

        goto label04;

     label05:
        norm = staticinvoke <java.lang.Math: double sqrt(double)>(norm);

        goto label17;

     label06:
        $stack12 = p cmpl #Infinity;

        if $stack12 != 0 goto label10;

        l6 = lengthof v;

        l7 = 0;

     label07:
        if l7 >= l6 goto label09;

        e = v[l7];

        e = staticinvoke <java.lang.Math: double abs(double)>(e);

        $stack26 = e cmpl norm;

        if $stack26 <= 0 goto label08;

        norm = e;

     label08:
        l7 = l7 + 1;

        goto label07;

     label09:
        goto label17;

     label10:
        $stack13 = p cmpl #-Infinity;

        if $stack13 != 0 goto label14;

        norm = 1.7976931348623157E308;

        l6 = lengthof v;

        l7 = 0;

     label11:
        if l7 >= l6 goto label13;

        e = v[l7];

        e = staticinvoke <java.lang.Math: double abs(double)>(e);

        $stack22 = e cmpg norm;

        if $stack22 >= 0 goto label12;

        norm = e;

     label12:
        l7 = l7 + 1;

        goto label11;

     label13:
        goto label17;

     label14:
        l6 = lengthof v;

        l7 = 0;

     label15:
        if l7 >= l6 goto label16;

        e = v[l7];

        $stack16 = staticinvoke <java.lang.Math: double abs(double)>(e);

        $stack17 = staticinvoke <java.lang.Math: double pow(double,double)>($stack16, p);

        norm = norm + $stack17;

        l7 = l7 + 1;

        goto label15;

     label16:
        $stack14 = 1.0 / p;

        norm = staticinvoke <java.lang.Math: double pow(double,double)>(norm, $stack14);

     label17:
        return norm;
    }

    public static double norm(org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat A;
        double $stack1;

        A := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        $stack1 = staticinvoke <org.bytedeco.javacv.JavaCV: double norm(org.bytedeco.opencv.opencv_core.CvMat,double)>(A, 2.0);

        return $stack1;
    }

    public static double norm(org.bytedeco.opencv.opencv_core.CvMat, double)
    {
        org.bytedeco.opencv.opencv_core.CvMat A;
        double p, $stack3;

        A := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        p := @parameter1: double;

        $stack3 = staticinvoke <org.bytedeco.javacv.JavaCV: double norm(org.bytedeco.opencv.opencv_core.CvMat,double,org.bytedeco.opencv.opencv_core.CvMat)>(A, p, null);

        return $stack3;
    }

    public static double norm(org.bytedeco.opencv.opencv_core.CvMat, double, org.bytedeco.opencv.opencv_core.CvMat)
    {
        double p, $stack23, $stack24, $stack48, $stack49, norm, n;
        byte $stack12, $stack13, $stack14;
        boolean $stack15;
        org.bytedeco.opencv.opencv_core.CvMat A, W;
        int $stack27, $stack28, $stack32, $stack42, cols, rows, j, i;
        java.lang.AssertionError $u0;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1;

        A := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        p := @parameter1: double;

        W := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        norm = -1.0;

        $stack12 = p cmpl 1.0;

        if $stack12 != 0 goto label05;

        cols = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        rows = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        j = 0;

     label01:
        if j >= cols goto label04;

        n = 0.0;

        i = 0;

     label02:
        if i >= rows goto label03;

        $stack48 = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(i, j);

        $stack49 = staticinvoke <java.lang.Math: double abs(double)>($stack48);

        n = n + $stack49;

        i = i + 1;

        goto label02;

     label03:
        norm = staticinvoke <java.lang.Math: double max(double,double)>(n, norm);

        j = j + 1;

        goto label01;

     label04:
        goto label14;

     label05:
        $stack13 = p cmpl 2.0;

        if $stack13 != 0 goto label08;

        $stack27 = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        $stack28 = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        cols = staticinvoke <java.lang.Math: int min(int,int)>($stack27, $stack28);

        if W == null goto label06;

        $stack32 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        if $stack32 != cols goto label06;

        $stack42 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        if $stack42 == 1 goto label07;

     label06:
        W = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(cols, 1);

     label07:
        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) W;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSVD(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, null, null, 0);

        norm = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        goto label14;

     label08:
        $stack14 = p cmpl #Infinity;

        if $stack14 != 0 goto label13;

        cols = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        rows = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        j = 0;

     label09:
        if j >= cols goto label12;

        n = 0.0;

        i = 0;

     label10:
        if i >= rows goto label11;

        $stack23 = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: double get(int,int)>(j, i);

        $stack24 = staticinvoke <java.lang.Math: double abs(double)>($stack23);

        n = n + $stack24;

        i = i + 1;

        goto label10;

     label11:
        norm = staticinvoke <java.lang.Math: double max(double,double)>(n, norm);

        j = j + 1;

        goto label09;

     label12:
        goto label14;

     label13:
        $stack15 = <org.bytedeco.javacv.JavaCV: boolean $assertionsDisabled>;

        if $stack15 != 0 goto label14;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label14:
        return norm;
    }

    public static double cond(org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.CvMat A;
        double $stack1;

        A := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        $stack1 = staticinvoke <org.bytedeco.javacv.JavaCV: double cond(org.bytedeco.opencv.opencv_core.CvMat,double)>(A, 2.0);

        return $stack1;
    }

    public static double cond(org.bytedeco.opencv.opencv_core.CvMat, double)
    {
        org.bytedeco.opencv.opencv_core.CvMat A;
        double p, $stack3;

        A := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        p := @parameter1: double;

        $stack3 = staticinvoke <org.bytedeco.javacv.JavaCV: double cond(org.bytedeco.opencv.opencv_core.CvMat,double,org.bytedeco.opencv.opencv_core.CvMat)>(A, p, null);

        return $stack3;
    }

    public static double cond(org.bytedeco.opencv.opencv_core.CvMat, double, org.bytedeco.opencv.opencv_core.CvMat)
    {
        double p, cond, $stack33, $stack36, $stack14, $stack15;
        byte $stack9;
        org.bytedeco.opencv.opencv_core.CvMat A, W;
        int cols, $stack16, $stack28, $stack29, $stack30, $stack37, $stack51, size, $stack34, $stack35;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1, $r2, $r3;

        A := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        p := @parameter1: double;

        W := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        $stack9 = p cmpl 2.0;

        if $stack9 != 0 goto label3;

        $stack29 = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        $stack30 = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        size = staticinvoke <java.lang.Math: int min(int,int)>($stack29, $stack30);

        if W == null goto label1;

        $stack37 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        if $stack37 != size goto label1;

        $stack51 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        if $stack51 == 1 goto label2;

     label1:
        W = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(size, 1);

     label2:
        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) W;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSVD(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r0, $r1, null, null, 0);

        $stack33 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack34 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int length()>();

        $stack35 = $stack34 - 1;

        $stack36 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>($stack35);

        cond = $stack33 / $stack36;

        goto label6;

     label3:
        size = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        cols = virtualinvoke A.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        if W == null goto label4;

        $stack16 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int rows()>();

        if $stack16 != size goto label4;

        $stack28 = virtualinvoke W.<org.bytedeco.opencv.opencv_core.CvMat: int cols()>();

        if $stack28 == cols goto label5;

     label4:
        W = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(size, cols);

     label5:
        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) A;

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) W;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r2, $r3);

        $stack14 = staticinvoke <org.bytedeco.javacv.JavaCV: double norm(org.bytedeco.opencv.opencv_core.CvMat,double)>(A, p);

        $stack15 = staticinvoke <org.bytedeco.javacv.JavaCV: double norm(org.bytedeco.opencv.opencv_core.CvMat,double)>(W, p);

        cond = $stack14 * $stack15;

     label6:
        return cond;
    }

    public static double median(double[])
    {
        double[] doubles, sorted;
        java.lang.Object $stack2;
        int $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack11, $stack12;
        double $stack7, $stack13, $stack14, $stack15, $stack16;

        doubles := @parameter0: double[];

        $stack2 = virtualinvoke doubles.<java.lang.Object: java.lang.Object clone()>();

        sorted = (double[]) $stack2;

        staticinvoke <java.util.Arrays: void sort(double[])>(sorted);

        $stack3 = lengthof doubles;

        $stack4 = $stack3 % 2;

        if $stack4 != 0 goto label1;

        $stack8 = lengthof doubles;

        $stack9 = $stack8 / 2;

        $stack10 = $stack9 - 1;

        $stack14 = sorted[$stack10];

        $stack11 = lengthof doubles;

        $stack12 = $stack11 / 2;

        $stack13 = sorted[$stack12];

        $stack15 = $stack14 + $stack13;

        $stack16 = $stack15 / 2.0;

        return $stack16;

     label1:
        $stack5 = lengthof doubles;

        $stack6 = $stack5 / 2;

        $stack7 = sorted[$stack6];

        return $stack7;
    }

    public static java.lang.Object median(java.lang.Object[])
    {
        java.lang.Object[] objects, sorted;
        java.lang.Object $stack2, $stack5;
        int $stack3, $stack4;

        objects := @parameter0: java.lang.Object[];

        $stack2 = virtualinvoke objects.<java.lang.Object: java.lang.Object clone()>();

        sorted = (java.lang.Object[]) $stack2;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(sorted);

        $stack3 = lengthof sorted;

        $stack4 = $stack3 / 2;

        $stack5 = sorted[$stack4];

        return $stack5;
    }

    public static void fractalTriangleWave(double[], int, int, double)
    {
        double[] line;
        int i, j;
        double a;

        line := @parameter0: double[];

        i := @parameter1: int;

        j := @parameter2: int;

        a := @parameter3: double;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, i, j, a, -1);

        return;
    }

    public static void fractalTriangleWave(double[], int, int, double, int)
    {
        int j, i, $stack7, $stack8, m, roughness, $stack17, $stack18, $stack19;
        double[] line;
        double $stack9, $stack10, $stack11, a, $stack12, $stack13, $stack14, $stack15, $stack16;

        line := @parameter0: double[];

        i := @parameter1: int;

        j := @parameter2: int;

        a := @parameter3: double;

        roughness := @parameter4: int;

        $stack7 = j - i;

        $stack8 = $stack7 / 2;

        m = $stack8 + i;

        if i == j goto label1;

        if i != m goto label2;

     label1:
        return;

     label2:
        $stack10 = line[i];

        $stack9 = line[j];

        $stack11 = $stack10 + $stack9;

        $stack12 = $stack11 / 2.0;

        $stack13 = $stack12 + a;

        line[m] = $stack13;

        if roughness <= 0 goto label3;

        $stack19 = lengthof line;

        $stack17 = j - i;

        $stack18 = roughness * $stack17;

        if $stack19 <= $stack18 goto label3;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, i, m, 0.0, roughness);

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, m, j, 0.0, roughness);

        goto label4;

     label3:
        $stack14 = a / 1.4142135623730951;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, i, m, $stack14, roughness);

        $stack15 = neg a;

        $stack16 = $stack15 / 1.4142135623730951;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, m, j, $stack16, roughness);

     label4:
        return;
    }

    public static void fractalTriangleWave(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.CvMat)
    {
        org.bytedeco.opencv.opencv_core.IplImage image;
        org.bytedeco.opencv.opencv_core.CvMat H;

        image := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        H := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvMat,int)>(image, H, -1);

        return;
    }

    public static void fractalTriangleWave(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.CvMat, int)
    {
        boolean $stack22;
        org.bytedeco.opencv.opencv_core.IplImage image;
        int $stack23, $stack24, roughness, $stack25, $stack26, $stack27, $stack28, $stack29, channels, step, xi2, $stack72, $stack73, $stack76, $stack77, $stack78, $stack89, $stack90, $stack91, $stack92, $stack94, $stack98, $stack125, $stack126, $stack127, $stack129, $stack130, $stack134, height, width, start, y, x, z;
        double[] line, $stack30, h, $stack37;
        org.bytedeco.opencv.opencv_core.IplROI $stack35, $stack120, $stack122, $stack124, $stack128;
        java.nio.FloatBuffer fb;
        org.bytedeco.opencv.opencv_core.CvMat H;
        double $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack68, $stack69, $stack71, xn, $stack74, $stack75, $stack79, $stack80, $stack81, $stack82, $stack83, $stack85, $stack86, $stack88, $stack99, $stack102, sum, x2;
        byte $stack70;
        float $stack93;
        java.lang.AssertionError $u0;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r1;

        image := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        H := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        roughness := @parameter2: int;

        $stack22 = <org.bytedeco.javacv.JavaCV: boolean $assertionsDisabled>;

        if $stack22 != 0 goto label01;

        $stack134 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        if $stack134 == 32 goto label01;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label01:
        $stack23 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        line = newarray (double)[$stack23];

        $stack24 = lengthof line;

        $stack25 = $stack24 / 2;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, 0, $stack25, 1.0, roughness);

        $stack26 = lengthof line;

        $stack29 = $stack26 / 2;

        $stack27 = lengthof line;

        $stack28 = $stack27 - 1;

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(double[],int,int,double,int)>(line, $stack29, $stack28, -1.0, roughness);

        $stack30 = newarray (double)[2];

        $stack30[0] = 1.7976931348623157E308;

        $stack30[1] = 4.9E-324;

        height = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        width = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        channels = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        step = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        start = 0;

        $stack35 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        if $stack35 == null goto label02;

        $stack120 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        height = virtualinvoke $stack120.<org.bytedeco.opencv.opencv_core.IplROI: int height()>();

        $stack122 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        width = virtualinvoke $stack122.<org.bytedeco.opencv.opencv_core.IplROI: int width()>();

        $stack124 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        $stack125 = virtualinvoke $stack124.<org.bytedeco.opencv.opencv_core.IplROI: int yOffset()>();

        $stack126 = $stack125 * step;

        $stack127 = $stack126 / 4;

        $stack128 = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        $stack129 = virtualinvoke $stack128.<org.bytedeco.opencv.opencv_core.IplROI: int xOffset()>();

        $stack130 = $stack129 * channels;

        start = $stack127 + $stack130;

     label02:
        fb = virtualinvoke image.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.FloatBuffer getFloatBuffer(int)>(start);

        if H != null goto label03;

        $stack37 = null;

        goto label04;

     label03:
        $stack37 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double[] get()>();

     label04:
        h = $stack37;

        y = 0;

     label05:
        if y >= height goto label14;

        x = 0;

     label06:
        if x >= width goto label13;

        z = 0;

     label07:
        if z >= channels goto label12;

        if h != null goto label08;

        $stack102 = line[x];

        sum = 0.0 + $stack102;

        goto label11;

     label08:
        $stack53 = h[0];

        $stack52 = (double) x;

        $stack57 = $stack53 * $stack52;

        $stack55 = h[1];

        $stack54 = (double) y;

        $stack56 = $stack55 * $stack54;

        $stack59 = $stack57 + $stack56;

        $stack58 = h[2];

        $stack69 = $stack59 + $stack58;

        $stack61 = h[6];

        $stack60 = (double) x;

        $stack65 = $stack61 * $stack60;

        $stack63 = h[7];

        $stack62 = (double) y;

        $stack64 = $stack63 * $stack62;

        $stack67 = $stack65 + $stack64;

        $stack66 = h[8];

        $stack68 = $stack67 + $stack66;

        x2 = $stack69 / $stack68;

     label09:
        $stack70 = x2 cmpg 0.0;

        if $stack70 >= 0 goto label10;

        $stack98 = lengthof line;

        $stack99 = (double) $stack98;

        x2 = x2 + $stack99;

        goto label09;

     label10:
        xi2 = (int) x2;

        $stack71 = (double) xi2;

        xn = x2 - $stack71;

        $stack72 = lengthof line;

        $stack73 = xi2 % $stack72;

        $stack75 = line[$stack73];

        $stack74 = 1.0 - xn;

        $stack81 = $stack75 * $stack74;

        $stack77 = xi2 + 1;

        $stack76 = lengthof line;

        $stack78 = $stack77 % $stack76;

        $stack79 = line[$stack78];

        $stack80 = $stack79 * xn;

        $stack82 = $stack81 + $stack80;

        sum = 0.0 + $stack82;

     label11:
        $stack83 = $stack30[0];

        $stack85 = staticinvoke <java.lang.Math: double min(double,double)>($stack83, sum);

        $stack30[0] = $stack85;

        $stack86 = $stack30[1];

        $stack88 = staticinvoke <java.lang.Math: double max(double,double)>($stack86, sum);

        $stack30[1] = $stack88;

        $stack89 = y * step;

        $stack91 = $stack89 / 4;

        $stack90 = x * channels;

        $stack92 = $stack91 + $stack90;

        $stack94 = $stack92 + z;

        $stack93 = (float) sum;

        virtualinvoke fb.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>($stack94, $stack93);

        z = z + 1;

        goto label07;

     label12:
        x = x + 1;

        goto label06;

     label13:
        y = y + 1;

        goto label05;

     label14:
        $stack39 = $stack30[1];

        $stack38 = $stack30[0];

        $stack40 = $stack39 - $stack38;

        $stack47 = 1.0 / $stack40;

        $stack41 = $stack30[0];

        $stack45 = neg $stack41;

        $stack43 = $stack30[1];

        $stack42 = $stack30[0];

        $stack44 = $stack43 - $stack42;

        $stack46 = $stack45 / $stack44;

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) image;

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) image;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvConvertScale(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,double)>($r0, $r1, $stack47, $stack46);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Class $stack2;
        java.lang.Package $stack3;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack9;
        java.io.PrintStream $stack6;
        java.lang.String $stack10, version;
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        $stack2 = class "Lorg/bytedeco/javacv/JavaCV;";

        $stack3 = virtualinvoke $stack2.<java.lang.Class: java.lang.Package getPackage()>();

        version = virtualinvoke $stack3.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if version != null goto label1;

        version = "unknown";

     label1:
        $stack6 = <java.lang.System: java.io.PrintStream out>;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JavaCV version ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nCopyright (C) 2009-2018 Samuel Audet <samuel.audet@gmail.com>\nProject site: https://github.com/bytedeco/javacv");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.String)>($stack10);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack25;
        java.lang.ThreadLocal $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24;

        <JavaCV: double DBL_EPSILON> = 2.220446049250313E-16;

        <JavaCV: double FLT_EPSILON> = 1.1920928955078125E-7;

        <JavaCV: double SQRT2> = 1.4142135623730951;

        $stack0 = class "Lorg/bytedeco/javacv/JavaCV;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack25 = 1;

        goto label2;

     label1:
        $stack25 = 0;

     label2:
        <org.bytedeco.javacv.JavaCV: boolean $assertionsDisabled> = $stack25;

        $stack2 = staticinvoke <org.bytedeco.opencv.opencv_imgproc.CvMoments: java.lang.ThreadLocal createThreadLocal()>();

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal moments> = $stack2;

        $stack3 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(8, 8);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal A8x8> = $stack3;

        $stack4 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(8, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal b8x1> = $stack4;

        $stack5 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(8, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal x8x1> = $stack5;

        $stack6 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal A3x3> = $stack6;

        $stack7 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal b3x1> = $stack7;

        $stack8 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal n3x1> = $stack8;

        $stack9 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal H3x3> = $stack9;

        $stack10 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 2);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal M3x2> = $stack10;

        $stack11 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(2, 2);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal S2x2> = $stack11;

        $stack12 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 2);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal U3x2> = $stack12;

        $stack13 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(2, 2);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal V2x2> = $stack13;

        $stack14 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal R13x3> = $stack14;

        $stack15 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal R23x3> = $stack15;

        $stack16 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal t13x1> = $stack16;

        $stack17 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal t23x1> = $stack17;

        $stack18 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal n13x1> = $stack18;

        $stack19 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal n23x1> = $stack19;

        $stack20 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal H13x3> = $stack20;

        $stack21 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal H23x3> = $stack21;

        $stack22 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal S3x3> = $stack22;

        $stack23 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal U3x3> = $stack23;

        $stack24 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.JavaCV: java.lang.ThreadLocal V3x3> = $stack24;

        return;
    }
}
