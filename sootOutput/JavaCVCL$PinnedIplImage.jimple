class JavaCVCL$PinnedIplImage extends org.bytedeco.opencv.opencv_core.IplImage
{
    final com.jogamp.opencl.CLBuffer pinnedBuffer;
    final org.bytedeco.javacv.JavaCVCL this$0;

    void <init>(org.bytedeco.javacv.JavaCVCL, int, int, int, int)
    {
        JavaCVCL$PinnedIplImage this;
        org.bytedeco.javacv.JavaCVCL this$0;
        int width, height, depth, channels, $stack10;
        org.bytedeco.opencv.opencv_core.CvSize $stack7, $stack8, $u0;
        org.bytedeco.opencv.opencv_core.IplImage $stack9;
        com.jogamp.opencl.CLBuffer $stack11;
        java.nio.ByteBuffer $stack13;
        org.bytedeco.javacpp.BytePointer $u1;
        org.bytedeco.javacv.JavaCVCL$PinnedIplImage $r0, $r2, $r3, $r4, $r5;
        org.bytedeco.javacpp.Pointer $r1;

        this := @this: JavaCVCL$PinnedIplImage;

        this$0 := @parameter0: org.bytedeco.javacv.JavaCVCL;

        width := @parameter1: int;

        height := @parameter2: int;

        depth := @parameter3: int;

        channels := @parameter4: int;

        $r0 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $r0.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: org.bytedeco.javacv.JavaCVCL this$0> = this$0;

        $u0 = new org.bytedeco.opencv.opencv_core.CvSize;

        specialinvoke $u0.<org.bytedeco.opencv.opencv_core.CvSize: void <init>()>();

        $stack7 = virtualinvoke $u0.<org.bytedeco.opencv.opencv_core.CvSize: org.bytedeco.opencv.opencv_core.CvSize width(int)>(width);

        $stack8 = virtualinvoke $stack7.<org.bytedeco.opencv.opencv_core.CvSize: org.bytedeco.opencv.opencv_core.CvSize height(int)>(height);

        $stack9 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.IplImage cvCreateImageHeader(org.bytedeco.opencv.opencv_core.CvSize,int,int)>($stack8, depth, channels);

        $r1 = (org.bytedeco.javacpp.Pointer) $stack9;

        specialinvoke this.<org.bytedeco.opencv.opencv_core.IplImage: void <init>(org.bytedeco.javacpp.Pointer)>($r1);

        $r2 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack10 = virtualinvoke $r2.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: int imageSize()>();

        $stack11 = virtualinvoke this$0.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLBuffer createPinnedBuffer(int)>($stack10);

        $r3 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $r3.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: com.jogamp.opencl.CLBuffer pinnedBuffer> = $stack11;

        $u1 = new org.bytedeco.javacpp.BytePointer;

        $r4 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack13 = virtualinvoke $r4.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: java.nio.ByteBuffer getByteBuffer()>();

        specialinvoke $u1.<org.bytedeco.javacpp.BytePointer: void <init>(java.nio.ByteBuffer)>($stack13);

        $r5 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        virtualinvoke $r5.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: org.bytedeco.opencv.opencv_core.IplImage imageData(org.bytedeco.javacpp.BytePointer)>($u1);

        return;
    }

    public com.jogamp.opencl.CLBuffer getCLBuffer()
    {
        JavaCVCL$PinnedIplImage this;
        com.jogamp.opencl.CLBuffer $stack1;
        org.bytedeco.javacv.JavaCVCL$PinnedIplImage $r0;

        this := @this: JavaCVCL$PinnedIplImage;

        $r0 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack1 = $r0.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: com.jogamp.opencl.CLBuffer pinnedBuffer>;

        return $stack1;
    }

    public java.nio.ByteBuffer getByteBuffer()
    {
        JavaCVCL$PinnedIplImage this;
        com.jogamp.opencl.CLBuffer $stack1;
        java.nio.Buffer $stack2;
        java.nio.ByteBuffer $stack3;
        org.bytedeco.javacv.JavaCVCL$PinnedIplImage $r0;

        this := @this: JavaCVCL$PinnedIplImage;

        $r0 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack1 = $r0.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: com.jogamp.opencl.CLBuffer pinnedBuffer>;

        $stack2 = virtualinvoke $stack1.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack3 = (java.nio.ByteBuffer) $stack2;

        return $stack3;
    }

    public void release()
    {
        JavaCVCL$PinnedIplImage this;
        org.bytedeco.javacv.JavaCVCL $stack1;
        com.jogamp.opencl.CLCommandQueue $stack2;
        com.jogamp.opencl.CLBuffer $stack3, $stack6;
        java.nio.ByteBuffer $stack4;
        org.bytedeco.javacv.JavaCVCL$PinnedIplImage $r0, $r1, $r2, $r4;
        com.jogamp.opencl.CLMemory $r3;

        this := @this: JavaCVCL$PinnedIplImage;

        $r0 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack1 = $r0.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: org.bytedeco.javacv.JavaCVCL this$0>;

        $stack2 = staticinvoke <org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLCommandQueue access$000(org.bytedeco.javacv.JavaCVCL)>($stack1);

        $r1 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack3 = $r1.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: com.jogamp.opencl.CLBuffer pinnedBuffer>;

        $r2 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack4 = virtualinvoke $r2.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: java.nio.ByteBuffer getByteBuffer()>();

        $r3 = (com.jogamp.opencl.CLMemory) $stack3;

        virtualinvoke $stack2.<com.jogamp.opencl.CLCommandQueue: com.jogamp.opencl.CLCommandQueue putUnmapMemory(com.jogamp.opencl.CLMemory,java.nio.Buffer)>($r3, $stack4);

        $r4 = (org.bytedeco.javacv.JavaCVCL$PinnedIplImage) this;

        $stack6 = $r4.<org.bytedeco.javacv.JavaCVCL$PinnedIplImage: com.jogamp.opencl.CLBuffer pinnedBuffer>;

        virtualinvoke $stack6.<com.jogamp.opencl.CLBuffer: void release()>();

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvReleaseImageHeader(org.bytedeco.opencv.opencv_core.IplImage)>(this);

        return;
    }
}
