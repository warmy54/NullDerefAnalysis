class JavaFXFrameConverter$FramePixelReader extends java.lang.Object implements javafx.scene.image.PixelReader
{
    org.bytedeco.javacv.Frame frame;
    final org.bytedeco.javacv.JavaFXFrameConverter this$0;

    void <init>(org.bytedeco.javacv.JavaFXFrameConverter, org.bytedeco.javacv.Frame)
    {
        JavaFXFrameConverter$FramePixelReader this;
        org.bytedeco.javacv.JavaFXFrameConverter this$0;
        org.bytedeco.javacv.Frame f;
        org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader $r0, $r1;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        this$0 := @parameter0: org.bytedeco.javacv.JavaFXFrameConverter;

        f := @parameter1: org.bytedeco.javacv.Frame;

        $r0 = (org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader) this;

        $r0.<org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader: org.bytedeco.javacv.JavaFXFrameConverter this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r1 = (org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader) this;

        $r1.<org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader: org.bytedeco.javacv.Frame frame> = f;

        return;
    }

    public javafx.scene.image.PixelFormat getPixelFormat()
    {
        java.lang.UnsupportedOperationException $stack1;
        JavaFXFrameConverter$FramePixelReader this;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        $stack1 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getPixelFormat not supported yet.");

        throw $stack1;
    }

    public int getArgb(int, int)
    {
        java.lang.UnsupportedOperationException $stack3;
        JavaFXFrameConverter$FramePixelReader this;
        int x, y;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        x := @parameter0: int;

        y := @parameter1: int;

        $stack3 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getArgb not supported yet.");

        throw $stack3;
    }

    public javafx.scene.paint.Color getColor(int, int)
    {
        java.lang.UnsupportedOperationException $stack3;
        JavaFXFrameConverter$FramePixelReader this;
        int x, y;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        x := @parameter0: int;

        y := @parameter1: int;

        $stack3 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getColor not supported yet.");

        throw $stack3;
    }

    public void getPixels(int, int, int, int, javafx.scene.image.WritablePixelFormat, java.nio.Buffer, int)
    {
        JavaFXFrameConverter$FramePixelReader this;
        org.bytedeco.javacv.Frame $stack14, $stack15, $stack19;
        int fss, $stack16, y, h, $stack22, x, w, $stack23, base, $stack27, $stack28, $stack31, $stack32, $stack33, $stack36, $stack37, $stack38, scanlineStride, i, j;
        java.nio.Buffer buffer, $stack21;
        boolean $stack17;
        java.nio.ByteBuffer bb, b;
        java.nio.Buffer[] $stack20;
        byte $stack29, $stack34, $stack39;
        javafx.scene.image.WritablePixelFormat pixelformat;
        java.lang.UnsupportedOperationException $u0, $u1;
        org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader $r0, $r1, $r2;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        x := @parameter0: int;

        y := @parameter1: int;

        w := @parameter2: int;

        h := @parameter3: int;

        pixelformat := @parameter4: javafx.scene.image.WritablePixelFormat;

        buffer := @parameter5: java.nio.Buffer;

        scanlineStride := @parameter6: int;

        $r0 = (org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader) this;

        $stack14 = $r0.<org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader: org.bytedeco.javacv.Frame frame>;

        fss = $stack14.<org.bytedeco.javacv.Frame: int imageStride>;

        $r1 = (org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader) this;

        $stack15 = $r1.<org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader: org.bytedeco.javacv.Frame frame>;

        $stack16 = $stack15.<org.bytedeco.javacv.Frame: int imageChannels>;

        if $stack16 == 3 goto label1;

        $u0 = new java.lang.UnsupportedOperationException;

        specialinvoke $u0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("We only support frames with imageChannels = 3 (BGR)");

        throw $u0;

     label1:
        $stack17 = buffer instanceof java.nio.ByteBuffer;

        if $stack17 == 0 goto label6;

        bb = (java.nio.ByteBuffer) buffer;

        $r2 = (org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader) this;

        $stack19 = $r2.<org.bytedeco.javacv.JavaFXFrameConverter$FramePixelReader: org.bytedeco.javacv.Frame frame>;

        $stack20 = $stack19.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack21 = $stack20[0];

        b = (java.nio.ByteBuffer) $stack21;

        i = y;

     label2:
        $stack22 = y + h;

        if i >= $stack22 goto label5;

        j = x;

     label3:
        $stack23 = x + w;

        if j >= $stack23 goto label4;

        base = 3 * j;

        $stack27 = fss * i;

        $stack28 = $stack27 + base;

        $stack29 = virtualinvoke b.<java.nio.ByteBuffer: byte get(int)>($stack28);

        virtualinvoke bb.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack29);

        $stack31 = fss * i;

        $stack32 = $stack31 + base;

        $stack33 = $stack32 + 1;

        $stack34 = virtualinvoke b.<java.nio.ByteBuffer: byte get(int)>($stack33);

        virtualinvoke bb.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack34);

        $stack36 = fss * i;

        $stack37 = $stack36 + base;

        $stack38 = $stack37 + 2;

        $stack39 = virtualinvoke b.<java.nio.ByteBuffer: byte get(int)>($stack38);

        virtualinvoke bb.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack39);

        virtualinvoke bb.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(-1);

        j = j + 1;

        goto label3;

     label4:
        i = i + 1;

        goto label2;

     label5:
        goto label7;

     label6:
        $u1 = new java.lang.UnsupportedOperationException;

        specialinvoke $u1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("We only support bytebuffers at the moment");

        throw $u1;

     label7:
        return;
    }

    public void getPixels(int, int, int, int, javafx.scene.image.WritablePixelFormat, byte[], int, int)
    {
        java.lang.UnsupportedOperationException $stack9;
        JavaFXFrameConverter$FramePixelReader this;
        int x, y, w, h, offset, scanlineStride;
        javafx.scene.image.WritablePixelFormat pixelformat;
        byte[] buffer;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        x := @parameter0: int;

        y := @parameter1: int;

        w := @parameter2: int;

        h := @parameter3: int;

        pixelformat := @parameter4: javafx.scene.image.WritablePixelFormat;

        buffer := @parameter5: byte[];

        offset := @parameter6: int;

        scanlineStride := @parameter7: int;

        $stack9 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getPixels<ByteBuffer> Not supported yet.");

        throw $stack9;
    }

    public void getPixels(int, int, int, int, javafx.scene.image.WritablePixelFormat, int[], int, int)
    {
        java.lang.UnsupportedOperationException $stack9;
        JavaFXFrameConverter$FramePixelReader this;
        int x, y, w, h, offset, scanlineStride;
        javafx.scene.image.WritablePixelFormat pixelformat;
        int[] buffer;

        this := @this: JavaFXFrameConverter$FramePixelReader;

        x := @parameter0: int;

        y := @parameter1: int;

        w := @parameter2: int;

        h := @parameter3: int;

        pixelformat := @parameter4: javafx.scene.image.WritablePixelFormat;

        buffer := @parameter5: int[];

        offset := @parameter6: int;

        scanlineStride := @parameter7: int;

        $stack9 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getPixels<IntBuffer>Not supported yet.");

        throw $stack9;
    }
}
