class KeepBlankLinesTest extends java.lang.Object
{

    void <init>()
    {
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void emptyRowsInSimplePomShouldBePreserved() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2, $stack3;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/EmptyRow_input.xml", "src/test/resources/EmptyRow_expected.xml");

        return;
    }

    final void emptyRowsInLargePomShouldBePreserved1() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2, $stack3;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Real1_input.xml", "src/test/resources/Real1_expected_keepBlankLines.xml");

        return;
    }

    final void emptyRowsInLargePomShouldBePreservedAndIndented1() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2, $stack3, $stack4;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil indentBlankLines()>();

        virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Real1_input.xml", "src/test/resources/Real1_expected_keepBlankLines_indented.xml");

        return;
    }

    final void emptyRowsInLargePomShouldBePreserved2() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Real1_input.xml", "/Real1_expected_keepBlankLines.xml");

        return;
    }

    final void emptyRowsInLargePomShouldBePreservedAndIndented2() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil indentBLankLines()>();

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Real1_input.xml", "/Real1_expected_keepBlankLines_indented.xml");

        return;
    }

    final void simpleLineBreaksShouldNotBePreserved() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/LineBreak_input.xml", "src/test/resources/Character_expected.xml");

        return;
    }

    final void allLineBreaksInXmlShouldBeNewlines() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack2, $stack3, $stack4;
        java.lang.String actual;
        org.hamcrest.Matcher $stack6, $stack7;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack2 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\n");

        actual = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>("src/test/resources/LineBreak_N_input.xml");

        $stack6 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>("</groupId>\n  <artifactId>whitespace-test</artifactId>\n  <version>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack6);

        $stack7 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>(",\nembedded,\nand");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack7);

        return;
    }

    final void allLineBreaksInXmlShouldBeCarriageReturnNewlines() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack2, $stack3, $stack4;
        java.lang.String actual;
        org.hamcrest.Matcher $stack6, $stack7;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack2 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\r\n");

        actual = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>("src/test/resources/LineBreak_N_input.xml");

        $stack6 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>("</groupId>\r\n  <artifactId>whitespace-test</artifactId>\r\n  <version>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack6);

        $stack7 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>(",\r\nembedded,\r\nand");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack7);

        return;
    }

    final void allLineBreaksInXmlShouldBeCarriageReturn() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack2, $stack3, $stack4;
        java.lang.String actual;
        org.hamcrest.Matcher $stack6, $stack7;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack2 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\r");

        actual = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>("src/test/resources/LineBreak_N_input.xml");

        $stack6 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>("</groupId>\r  <artifactId>whitespace-test</artifactId>\r  <version>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack6);

        $stack7 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>(",\rembedded,\rand");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack7);

        return;
    }

    final void allLineBreaksInXmlShouldBeNewlines2() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack2, $stack3, $stack4;
        java.lang.String actual;
        org.hamcrest.Matcher $stack6, $stack7;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack2 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\n");

        actual = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>("src/test/resources/LineBreak_RN_input.xml");

        $stack6 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>("</groupId>\n  <artifactId>whitespace-test</artifactId>\n  <version>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack6);

        $stack7 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>(",\nembedded,\nand");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack7);

        return;
    }

    final void allLineBreaksInXmlShouldBeCarriageReturnNewlines2() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack2, $stack3, $stack4;
        java.lang.String actual;
        org.hamcrest.Matcher $stack6, $stack7;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack2 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\r\n");

        actual = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>("src/test/resources/LineBreak_RN_input.xml");

        $stack6 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>("</groupId>\r\n  <artifactId>whitespace-test</artifactId>\r\n  <version>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack6);

        $stack7 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>(",\r\nembedded,\r\nand");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack7);

        return;
    }

    final void allLineBreaksInXmlShouldBeCarriageReturn2() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack2, $stack3, $stack4;
        java.lang.String actual;
        org.hamcrest.Matcher $stack6, $stack7;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack2 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\r");

        actual = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>("src/test/resources/LineBreak_RN_input.xml");

        $stack6 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>("</groupId>\r  <artifactId>whitespace-test</artifactId>\r  <version>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack6);

        $stack7 = staticinvoke <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>(",\rembedded,\rand");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(actual, $stack7);

        return;
    }

    final void artifactIdsWithLineBreaksShouldBeTrimmedBeforeSorting() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;
        KeepBlankLinesTest this;

        this := @this: KeepBlankLinesTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)>("\n");

        $stack3 = virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil keepBlankLines()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil expandEmptyElements(boolean)>(0);

        $stack5 = virtualinvoke $stack4.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil sortModules()>();

        $stack6 = virtualinvoke $stack5.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil sortDependencies(java.lang.String)>("scope,groupId,artifactId");

        $stack7 = virtualinvoke $stack6.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil sortProperties()>();

        $stack8 = virtualinvoke $stack7.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        $stack9 = virtualinvoke $stack8.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil noSpaceBeforeCloseEmptyElement()>();

        virtualinvoke $stack9.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/LineBreak_input3.xml", "src/test/resources/LineBreak_expected3.xml");

        return;
    }
}
