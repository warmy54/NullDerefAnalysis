public class Lifecycle extends java.lang.Object
{
    private java.lang.String id;
    private java.util.Map lifecyclePhases;

    public void <init>()
    {
        Lifecycle this;

        this := @this: Lifecycle;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getId()
    {
        Lifecycle this;
        java.lang.String $stack1;
        org.apache.maven.lifecycle.mapping.Lifecycle $r0;

        this := @this: Lifecycle;

        $r0 = (org.apache.maven.lifecycle.mapping.Lifecycle) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.mapping.Lifecycle: java.lang.String id>;

        return $stack1;
    }

    public java.util.Map getLifecyclePhases()
    {
        Lifecycle this;
        java.util.Map $stack1;
        org.apache.maven.lifecycle.mapping.Lifecycle $r0;

        this := @this: Lifecycle;

        $r0 = (org.apache.maven.lifecycle.mapping.Lifecycle) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.mapping.Lifecycle: java.util.Map lifecyclePhases>;

        return $stack1;
    }

    public void setId(java.lang.String)
    {
        Lifecycle this;
        java.lang.String id;
        org.apache.maven.lifecycle.mapping.Lifecycle $r0;

        this := @this: Lifecycle;

        id := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.lifecycle.mapping.Lifecycle) this;

        $r0.<org.apache.maven.lifecycle.mapping.Lifecycle: java.lang.String id> = id;

        return;
    }

    public void setLifecyclePhases(java.util.Map)
    {
        Lifecycle this;
        java.util.Map lifecyclePhases;
        org.apache.maven.lifecycle.mapping.Lifecycle $r0;

        this := @this: Lifecycle;

        lifecyclePhases := @parameter0: java.util.Map;

        $r0 = (org.apache.maven.lifecycle.mapping.Lifecycle) this;

        $r0.<org.apache.maven.lifecycle.mapping.Lifecycle: java.util.Map lifecyclePhases> = lifecyclePhases;

        return;
    }

    public java.util.Map getPhases()
    {
        Lifecycle this;
        java.util.Map lphases, $stack19;
        boolean $stack6, $stack10;
        java.util.Set $stack8;
        java.util.Iterator l3;
        java.lang.Object $stack11, $stack12, $stack14;
        java.util.Map$Entry e;
        java.lang.String $stack13, $stack16;
        org.apache.maven.lifecycle.mapping.LifecyclePhase $stack15;
        java.util.LinkedHashMap $u0;
        org.apache.maven.lifecycle.mapping.Lifecycle $r0;

        this := @this: Lifecycle;

        $r0 = (org.apache.maven.lifecycle.mapping.Lifecycle) this;

        lphases = virtualinvoke $r0.<org.apache.maven.lifecycle.mapping.Lifecycle: java.util.Map getLifecyclePhases()>();

        if lphases != null goto label1;

        return null;

     label1:
        $stack6 = interfaceinvoke lphases.<java.util.Map: boolean isEmpty()>();

        if $stack6 == 0 goto label2;

        $stack19 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $stack19;

     label2:
        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        $stack8 = interfaceinvoke lphases.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack10 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label4;

        $stack11 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $stack11;

        $stack12 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack13 = (java.lang.String) $stack12;

        $stack14 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack15 = (org.apache.maven.lifecycle.mapping.LifecyclePhase) $stack14;

        $stack16 = virtualinvoke $stack15.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.lang.String toString()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack13, $stack16);

        goto label3;

     label4:
        return $u0;
    }

    public void setPhases(java.util.Map)
    {
        java.util.Map phases;
        java.util.Set $stack6;
        java.util.Iterator l3;
        boolean $stack8;
        Lifecycle this;
        java.lang.Object $stack9, $stack10, $stack13;
        java.util.Map$Entry e;
        java.lang.String $stack12, $stack14;
        java.util.LinkedHashMap $u0;
        org.apache.maven.lifecycle.mapping.LifecyclePhase $u1;
        org.apache.maven.lifecycle.mapping.Lifecycle $r0;

        this := @this: Lifecycle;

        phases := @parameter0: java.util.Map;

        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        $stack6 = interfaceinvoke phases.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label2;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $stack9;

        $stack10 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.String) $stack10;

        $u1 = new org.apache.maven.lifecycle.mapping.LifecyclePhase;

        $stack13 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack14 = (java.lang.String) $stack13;

        specialinvoke $u1.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void <init>(java.lang.String)>($stack14);

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack12, $u1);

        goto label1;

     label2:
        $r0 = (org.apache.maven.lifecycle.mapping.Lifecycle) this;

        virtualinvoke $r0.<org.apache.maven.lifecycle.mapping.Lifecycle: void setLifecyclePhases(java.util.Map)>($u0);

        return;
    }
}
