class LifecycleExecutorTest$1 extends java.lang.Object implements org.apache.maven.execution.ProjectDependencyGraph
{
    final org.apache.maven.execution.MavenSession val$session;
    final org.apache.maven.lifecycle.LifecycleExecutorTest this$0;

    void <init>(org.apache.maven.lifecycle.LifecycleExecutorTest, org.apache.maven.execution.MavenSession)
    {
        LifecycleExecutorTest$1 this;
        org.apache.maven.lifecycle.LifecycleExecutorTest this$0;
        org.apache.maven.execution.MavenSession l2;
        org.apache.maven.lifecycle.LifecycleExecutorTest$1 $r0, $r1;

        this := @this: LifecycleExecutorTest$1;

        this$0 := @parameter0: org.apache.maven.lifecycle.LifecycleExecutorTest;

        l2 := @parameter1: org.apache.maven.execution.MavenSession;

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$1) this;

        $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$1: org.apache.maven.lifecycle.LifecycleExecutorTest this$0> = this$0;

        $r1 = (org.apache.maven.lifecycle.LifecycleExecutorTest$1) this;

        $r1.<org.apache.maven.lifecycle.LifecycleExecutorTest$1: org.apache.maven.execution.MavenSession val$session> = l2;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject, boolean)
    {
        java.util.List $stack3;
        LifecycleExecutorTest$1 this;
        org.apache.maven.project.MavenProject project;
        boolean transitive;

        this := @this: LifecycleExecutorTest$1;

        project := @parameter0: org.apache.maven.project.MavenProject;

        transitive := @parameter1: boolean;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack3;
    }

    public java.util.List getAllProjects()
    {
        LifecycleExecutorTest$1 this;
        org.apache.maven.execution.MavenSession $stack1;
        java.util.List $stack2;
        org.apache.maven.lifecycle.LifecycleExecutorTest$1 $r0;

        this := @this: LifecycleExecutorTest$1;

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$1) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$1: org.apache.maven.execution.MavenSession val$session>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.execution.MavenSession: java.util.List getAllProjects()>();

        return $stack2;
    }

    public java.util.List getSortedProjects()
    {
        LifecycleExecutorTest$1 this;
        org.apache.maven.execution.MavenSession $stack1;
        org.apache.maven.project.MavenProject $stack2;
        java.util.List $stack3;
        org.apache.maven.lifecycle.LifecycleExecutorTest$1 $r0;

        this := @this: LifecycleExecutorTest$1;

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$1) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$1: org.apache.maven.execution.MavenSession val$session>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($stack2);

        return $stack3;
    }

    public java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject, boolean)
    {
        java.util.List $stack3;
        LifecycleExecutorTest$1 this;
        org.apache.maven.project.MavenProject project;
        boolean transitive;

        this := @this: LifecycleExecutorTest$1;

        project := @parameter0: org.apache.maven.project.MavenProject;

        transitive := @parameter1: boolean;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack3;
    }
}
