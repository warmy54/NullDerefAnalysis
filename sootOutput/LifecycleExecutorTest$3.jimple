class LifecycleExecutorTest$3 extends java.lang.Object implements org.apache.maven.execution.ProjectExecutionListener
{
    final java.util.List val$log;
    final org.apache.maven.lifecycle.LifecycleExecutorTest this$0;

    void <init>(org.apache.maven.lifecycle.LifecycleExecutorTest, java.util.List)
    {
        LifecycleExecutorTest$3 this;
        org.apache.maven.lifecycle.LifecycleExecutorTest this$0;
        java.util.List l2;
        org.apache.maven.lifecycle.LifecycleExecutorTest$3 $r0, $r1;

        this := @this: LifecycleExecutorTest$3;

        this$0 := @parameter0: org.apache.maven.lifecycle.LifecycleExecutorTest;

        l2 := @parameter1: java.util.List;

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$3) this;

        $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$3: org.apache.maven.lifecycle.LifecycleExecutorTest this$0> = this$0;

        $r1 = (org.apache.maven.lifecycle.LifecycleExecutorTest$3) this;

        $r1.<org.apache.maven.lifecycle.LifecycleExecutorTest$3: java.util.List val$log> = l2;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void beforeProjectExecution(org.apache.maven.execution.ProjectExecutionEvent) throws org.apache.maven.lifecycle.LifecycleExecutionException
    {
        org.apache.maven.execution.ProjectExecutionEvent event;
        org.apache.maven.execution.MavenSession $stack2;
        org.apache.maven.project.MavenProject $stack3, $stack9;
        java.util.List $stack4, $stack7;
        java.lang.Throwable $stack5;
        LifecycleExecutorTest$3 this;
        java.lang.StringBuilder $stack8, $stack11, $u0;
        java.lang.String $stack10, $stack12;
        org.apache.maven.lifecycle.LifecycleExecutorTest$3 $r0;

        this := @this: LifecycleExecutorTest$3;

        event := @parameter0: org.apache.maven.execution.ProjectExecutionEvent;

        $stack2 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.execution.MavenSession getSession()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack3);

        $stack4 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.util.List getExecutionPlan()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack4);

        $stack5 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.lang.Throwable getCause()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack5);

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$3) this;

        $stack7 = $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$3: java.util.List val$log>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beforeProjectExecution ");

        $stack9 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack10 = virtualinvoke $stack9.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack11 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>($stack12);

        return;
    }

    public void beforeProjectLifecycleExecution(org.apache.maven.execution.ProjectExecutionEvent) throws org.apache.maven.lifecycle.LifecycleExecutionException
    {
        org.apache.maven.execution.ProjectExecutionEvent event;
        org.apache.maven.execution.MavenSession $stack2;
        org.apache.maven.project.MavenProject $stack3, $stack9;
        java.util.List $stack4, $stack7;
        java.lang.Throwable $stack5;
        LifecycleExecutorTest$3 this;
        java.lang.StringBuilder $stack8, $stack11, $u0;
        java.lang.String $stack10, $stack12;
        org.apache.maven.lifecycle.LifecycleExecutorTest$3 $r0;

        this := @this: LifecycleExecutorTest$3;

        event := @parameter0: org.apache.maven.execution.ProjectExecutionEvent;

        $stack2 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.execution.MavenSession getSession()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack3);

        $stack4 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.util.List getExecutionPlan()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack5 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.lang.Throwable getCause()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack5);

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$3) this;

        $stack7 = $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$3: java.util.List val$log>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beforeProjectLifecycleExecution ");

        $stack9 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack10 = virtualinvoke $stack9.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack11 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>($stack12);

        return;
    }

    public void afterProjectExecutionSuccess(org.apache.maven.execution.ProjectExecutionEvent) throws org.apache.maven.lifecycle.LifecycleExecutionException
    {
        org.apache.maven.execution.ProjectExecutionEvent event;
        org.apache.maven.execution.MavenSession $stack2;
        org.apache.maven.project.MavenProject $stack3, $stack9;
        java.util.List $stack4, $stack7;
        java.lang.Throwable $stack5;
        LifecycleExecutorTest$3 this;
        java.lang.StringBuilder $stack8, $stack11, $u0;
        java.lang.String $stack10, $stack12;
        org.apache.maven.lifecycle.LifecycleExecutorTest$3 $r0;

        this := @this: LifecycleExecutorTest$3;

        event := @parameter0: org.apache.maven.execution.ProjectExecutionEvent;

        $stack2 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.execution.MavenSession getSession()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack3);

        $stack4 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.util.List getExecutionPlan()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack5 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.lang.Throwable getCause()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack5);

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$3) this;

        $stack7 = $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$3: java.util.List val$log>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("afterProjectExecutionSuccess ");

        $stack9 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack10 = virtualinvoke $stack9.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack11 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>($stack12);

        return;
    }

    public void afterProjectExecutionFailure(org.apache.maven.execution.ProjectExecutionEvent)
    {
        org.apache.maven.execution.ProjectExecutionEvent event;
        org.apache.maven.execution.MavenSession $stack2;
        org.apache.maven.project.MavenProject $stack3, $stack9;
        java.util.List $stack4, $stack7;
        java.lang.Throwable $stack5;
        LifecycleExecutorTest$3 this;
        java.lang.StringBuilder $stack8, $stack11, $u0;
        java.lang.String $stack10, $stack12;
        org.apache.maven.lifecycle.LifecycleExecutorTest$3 $r0;

        this := @this: LifecycleExecutorTest$3;

        event := @parameter0: org.apache.maven.execution.ProjectExecutionEvent;

        $stack2 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.execution.MavenSession getSession()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack3);

        $stack4 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.util.List getExecutionPlan()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack4);

        $stack5 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: java.lang.Throwable getCause()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack5);

        $r0 = (org.apache.maven.lifecycle.LifecycleExecutorTest$3) this;

        $stack7 = $r0.<org.apache.maven.lifecycle.LifecycleExecutorTest$3: java.util.List val$log>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("afterProjectExecutionFailure ");

        $stack9 = virtualinvoke event.<org.apache.maven.execution.ProjectExecutionEvent: org.apache.maven.project.MavenProject getProject()>();

        $stack10 = virtualinvoke $stack9.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack11 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>($stack12);

        return;
    }
}
