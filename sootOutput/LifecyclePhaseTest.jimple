public class LifecyclePhaseTest extends java.lang.Object
{

    public void <init>()
    {
        LifecyclePhaseTest this;

        this := @this: LifecyclePhaseTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testToString()
    {
        org.apache.maven.lifecycle.mapping.LifecyclePhase $stack4;
        java.lang.String $stack6, $stack11, $stack16;
        org.apache.maven.lifecycle.mapping.LifecycleMojo $stack7, $stack12;
        org.apache.maven.lifecycle.mapping.LifecycleMojo[] $stack8, $stack13;
        java.util.List $stack9, $stack14;
        LifecyclePhaseTest this;

        this := @this: LifecyclePhaseTest;

        $stack4 = new org.apache.maven.lifecycle.mapping.LifecyclePhase;

        specialinvoke $stack4.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void <init>()>();

        $stack6 = virtualinvoke $stack4.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack7 = new org.apache.maven.lifecycle.mapping.LifecycleMojo;

        specialinvoke $stack7.<org.apache.maven.lifecycle.mapping.LifecycleMojo: void <init>()>();

        virtualinvoke $stack7.<org.apache.maven.lifecycle.mapping.LifecycleMojo: void setGoal(java.lang.String)>("jar:jar");

        $stack8 = newarray (org.apache.maven.lifecycle.mapping.LifecycleMojo)[1];

        $stack8[0] = $stack7;

        $stack9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack8);

        virtualinvoke $stack4.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void setMojos(java.util.List)>($stack9);

        $stack11 = virtualinvoke $stack4.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar:jar", $stack11);

        $stack12 = new org.apache.maven.lifecycle.mapping.LifecycleMojo;

        specialinvoke $stack12.<org.apache.maven.lifecycle.mapping.LifecycleMojo: void <init>()>();

        virtualinvoke $stack12.<org.apache.maven.lifecycle.mapping.LifecycleMojo: void setGoal(java.lang.String)>("war:war");

        $stack13 = newarray (org.apache.maven.lifecycle.mapping.LifecycleMojo)[2];

        $stack13[0] = $stack7;

        $stack13[1] = $stack12;

        $stack14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack13);

        virtualinvoke $stack4.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void setMojos(java.util.List)>($stack14);

        $stack16 = virtualinvoke $stack4.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar:jar,war:war", $stack16);

        return;
    }

    public void testSet()
    {
        org.apache.maven.lifecycle.mapping.LifecyclePhase $stack5;
        java.util.List $stack6, $stack7, $stack9, mojos;
        int $stack10, $stack13;
        java.lang.Object $stack14, $stack17;
        org.apache.maven.lifecycle.mapping.LifecycleMojo mojo1, mojo2;
        java.lang.String $stack16, $stack19;
        LifecyclePhaseTest this;

        this := @this: LifecyclePhaseTest;

        $stack5 = new org.apache.maven.lifecycle.mapping.LifecyclePhase;

        specialinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void <init>()>();

        $stack6 = virtualinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.util.List getMojos()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack6);

        virtualinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void set(java.lang.String)>("");

        $stack7 = virtualinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.util.List getMojos()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack9 = virtualinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.util.List getMojos()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack10);

        virtualinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: void set(java.lang.String)>("jar:jar, war:war");

        mojos = virtualinvoke $stack5.<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.util.List getMojos()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(mojos);

        $stack13 = interfaceinvoke mojos.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack13);

        $stack14 = interfaceinvoke mojos.<java.util.List: java.lang.Object get(int)>(0);

        mojo1 = (org.apache.maven.lifecycle.mapping.LifecycleMojo) $stack14;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(mojo1);

        $stack16 = virtualinvoke mojo1.<org.apache.maven.lifecycle.mapping.LifecycleMojo: java.lang.String getGoal()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar:jar", $stack16);

        $stack17 = interfaceinvoke mojos.<java.util.List: java.lang.Object get(int)>(1);

        mojo2 = (org.apache.maven.lifecycle.mapping.LifecycleMojo) $stack17;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(mojo2);

        $stack19 = virtualinvoke mojo2.<org.apache.maven.lifecycle.mapping.LifecycleMojo: java.lang.String getGoal()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("war:war", $stack19);

        return;
    }
}
