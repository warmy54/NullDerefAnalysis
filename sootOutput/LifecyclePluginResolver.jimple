public class LifecyclePluginResolver extends java.lang.Object
{
    private final org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver;

    public void <init>(org.apache.maven.plugin.version.PluginVersionResolver)
    {
        LifecyclePluginResolver this;
        org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver;
        org.apache.maven.lifecycle.internal.LifecyclePluginResolver $r0;

        this := @this: LifecyclePluginResolver;

        pluginVersionResolver := @parameter0: org.apache.maven.plugin.version.PluginVersionResolver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.LifecyclePluginResolver) this;

        $r0.<org.apache.maven.lifecycle.internal.LifecyclePluginResolver: org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver> = pluginVersionResolver;

        return;
    }

    public void resolveMissingPluginVersions(org.apache.maven.project.MavenProject, org.apache.maven.execution.MavenSession) throws org.apache.maven.plugin.version.PluginVersionResolutionException
    {
        org.apache.maven.project.MavenProject project;
        java.util.List $stack9, $stack13, $stack25, $stack37;
        boolean $stack11, $stack15;
        java.lang.Object $stack16, $stack20, $stack29;
        java.lang.String $stack17, $stack19, $stack21, $stack22, $stack28, $stack30, $stack31, $stack32, $stack40;
        org.apache.maven.execution.MavenSession session;
        org.eclipse.aether.RepositorySystemSession $stack24, $stack36;
        LifecyclePluginResolver this;
        org.apache.maven.plugin.version.PluginVersionResolver $stack26, $stack38;
        org.apache.maven.plugin.version.PluginVersionResult $stack27, $stack39;
        java.util.Iterator pluginManagement, plugin#5;
        org.apache.maven.model.Plugin plugin, request;
        org.apache.maven.model.PluginManagement pluginManagement#4;
        java.util.HashMap $u0;
        org.apache.maven.plugin.version.DefaultPluginVersionRequest $u1, $u2;
        org.apache.maven.lifecycle.internal.LifecyclePluginResolver $r0, $r2;
        org.apache.maven.plugin.version.PluginVersionRequest $r1, $r3;

        this := @this: LifecyclePluginResolver;

        project := @parameter0: org.apache.maven.project.MavenProject;

        session := @parameter1: org.apache.maven.execution.MavenSession;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>(int)>(64);

        $stack9 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        pluginManagement = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke pluginManagement.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label3;

        $stack29 = interfaceinvoke pluginManagement.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack29;

        $stack30 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        if $stack30 != null goto label2;

        $u1 = new org.apache.maven.plugin.version.DefaultPluginVersionRequest;

        $stack36 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack37 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        specialinvoke $u1.<org.apache.maven.plugin.version.DefaultPluginVersionRequest: void <init>(org.apache.maven.model.Plugin,org.eclipse.aether.RepositorySystemSession,java.util.List)>(plugin, $stack36, $stack37);

        $r0 = (org.apache.maven.lifecycle.internal.LifecyclePluginResolver) this;

        $stack38 = $r0.<org.apache.maven.lifecycle.internal.LifecyclePluginResolver: org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver>;

        $r1 = (org.apache.maven.plugin.version.PluginVersionRequest) $u1;

        $stack39 = interfaceinvoke $stack38.<org.apache.maven.plugin.version.PluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolve(org.apache.maven.plugin.version.PluginVersionRequest)>($r1);

        $stack40 = interfaceinvoke $stack39.<org.apache.maven.plugin.version.PluginVersionResult: java.lang.String getVersion()>();

        virtualinvoke plugin.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>($stack40);

     label2:
        $stack31 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getKey()>();

        $stack32 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        interfaceinvoke $u0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack31, $stack32);

        goto label1;

     label3:
        pluginManagement#4 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.PluginManagement getPluginManagement()>();

        if pluginManagement#4 == null goto label6;

        $stack13 = virtualinvoke pluginManagement#4.<org.apache.maven.model.PluginManagement: java.util.List getPlugins()>();

        plugin#5 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack15 = interfaceinvoke plugin#5.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label6;

        $stack16 = interfaceinvoke plugin#5.<java.util.Iterator: java.lang.Object next()>();

        request = (org.apache.maven.model.Plugin) $stack16;

        $stack17 = virtualinvoke request.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        if $stack17 != null goto label5;

        $stack19 = virtualinvoke request.<org.apache.maven.model.Plugin: java.lang.String getKey()>();

        $stack20 = interfaceinvoke $u0.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack19);

        $stack21 = (java.lang.String) $stack20;

        virtualinvoke request.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>($stack21);

        $stack22 = virtualinvoke request.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        if $stack22 != null goto label5;

        $u2 = new org.apache.maven.plugin.version.DefaultPluginVersionRequest;

        $stack24 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $stack25 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        specialinvoke $u2.<org.apache.maven.plugin.version.DefaultPluginVersionRequest: void <init>(org.apache.maven.model.Plugin,org.eclipse.aether.RepositorySystemSession,java.util.List)>(request, $stack24, $stack25);

        $r2 = (org.apache.maven.lifecycle.internal.LifecyclePluginResolver) this;

        $stack26 = $r2.<org.apache.maven.lifecycle.internal.LifecyclePluginResolver: org.apache.maven.plugin.version.PluginVersionResolver pluginVersionResolver>;

        $r3 = (org.apache.maven.plugin.version.PluginVersionRequest) $u2;

        $stack27 = interfaceinvoke $stack26.<org.apache.maven.plugin.version.PluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolve(org.apache.maven.plugin.version.PluginVersionRequest)>($r3);

        $stack28 = interfaceinvoke $stack27.<org.apache.maven.plugin.version.PluginVersionResult: java.lang.String getVersion()>();

        virtualinvoke request.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>($stack28);

     label5:
        goto label4;

     label6:
        return;
    }
}
