public class Line extends org.ooc.frontend.model.Node
{
    protected org.ooc.frontend.model.Statement statement;

    public void <init>(org.ooc.frontend.model.Statement)
    {
        Line this;
        org.ooc.frontend.model.Statement statement;
        org.ooc.frontend.model.tokens.Token $stack2;
        org.ooc.frontend.model.Line $r0;

        this := @this: Line;

        statement := @parameter0: org.ooc.frontend.model.Statement;

        $stack2 = statement.<org.ooc.frontend.model.Statement: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke this.<org.ooc.frontend.model.Node: void <init>(org.ooc.frontend.model.tokens.Token)>($stack2);

        $r0 = (org.ooc.frontend.model.Line) this;

        $r0.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement statement> = statement;

        return;
    }

    public org.ooc.frontend.model.Statement getStatement()
    {
        Line this;
        org.ooc.frontend.model.Statement $stack1;
        org.ooc.frontend.model.Line $r0;

        this := @this: Line;

        $r0 = (org.ooc.frontend.model.Line) this;

        $stack1 = $r0.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement statement>;

        return $stack1;
    }

    public void setStatement(org.ooc.frontend.model.Statement)
    {
        Line this;
        org.ooc.frontend.model.Statement statement;
        org.ooc.frontend.model.Line $r0;

        this := @this: Line;

        statement := @parameter0: org.ooc.frontend.model.Statement;

        $r0 = (org.ooc.frontend.model.Line) this;

        $r0.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement statement> = statement;

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Line this;
        org.ooc.frontend.model.Line $r0;

        this := @this: Line;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Line) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Line)>($r0);

        return;
    }

    public boolean hasChildren()
    {
        Line this;

        this := @this: Line;

        return 1;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        Line this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Statement $stack2;
        org.ooc.frontend.model.Line $r0;

        this := @this: Line;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Line) this;

        $stack2 = $r0.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement statement>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Statement: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        Line this;
        org.ooc.frontend.model.Statement $stack3, $stack4;
        org.ooc.frontend.model.Line $r0, $r1;

        this := @this: Line;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.Line) this;

        $stack3 = $r0.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement statement>;

        if oldie != $stack3 goto label1;

        $stack4 = (org.ooc.frontend.model.Statement) kiddo;

        $r1 = (org.ooc.frontend.model.Line) this;

        $r1.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement statement> = $stack4;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        Line this;
        java.lang.Class $stack1;
        java.lang.String $stack2, $stack4;
        org.ooc.frontend.model.Statement $stack3;
        org.ooc.frontend.model.Line $r0;

        this := @this: Line;

        $stack1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0 = (org.ooc.frontend.model.Line) this;

        $stack3 = virtualinvoke $r0.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement getStatement()>();

        $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,org.ooc.frontend.model.Statement)>($stack2, $stack3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");

        return $stack4;
    }
}
