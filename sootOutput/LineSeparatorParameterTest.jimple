class LineSeparatorParameterTest extends java.lang.Object
{

    void <init>()
    {
        LineSeparatorParameterTest this;

        this := @this: LineSeparatorParameterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void lineSeparatorWithSomethingElseShouldThrowException()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        LineSeparatorParameterTest this;

        this := @this: LineSeparatorParameterTest;

        testMethod = staticinvoke <LineSeparatorParameterTest$lambda_lineSeparatorWithSomethingElseShouldThrowException_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack4;

        $stack5 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("LineSeparator must be either \\n, \\r or \\r\\n, but separator characters were [42, 42, 42]");

        $stack7 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testCharInput()
    {
        sortpom.parameter.PluginParameters$Builder $stack2, $stack3, $stack8, $stack9, $stack14, $stack15;
        sortpom.parameter.PluginParameters $stack4, $stack10, $stack16;
        sortpom.parameter.LineSeparatorUtil $stack5, $stack11, $stack17;
        java.lang.String $stack6, $stack12, $stack18;
        LineSeparatorParameterTest this;

        this := @this: LineSeparatorParameterTest;

        $stack2 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack3 = virtualinvoke $stack2.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\n", 1, 1, 1);

        $stack4 = virtualinvoke $stack3.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $stack5 = $stack4.<sortpom.parameter.PluginParameters: sortpom.parameter.LineSeparatorUtil lineSeparatorUtil>;

        $stack6 = virtualinvoke $stack5.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\n", $stack6);

        $stack8 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\r", 1, 1, 1);

        $stack10 = virtualinvoke $stack9.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $stack11 = $stack10.<sortpom.parameter.PluginParameters: sortpom.parameter.LineSeparatorUtil lineSeparatorUtil>;

        $stack12 = virtualinvoke $stack11.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\r", $stack12);

        $stack14 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack15 = virtualinvoke $stack14.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\r\n", 1, 1, 1);

        $stack16 = virtualinvoke $stack15.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $stack17 = $stack16.<sortpom.parameter.PluginParameters: sortpom.parameter.LineSeparatorUtil lineSeparatorUtil>;

        $stack18 = virtualinvoke $stack17.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\r\n", $stack18);

        return;
    }

    private static java.util.stream.Stream provideSeparators()
    {
        org.junit.jupiter.params.provider.Arguments[] $stack0;
        java.lang.Object[] $stack1, $stack4, $stack7, $stack10;
        org.junit.jupiter.params.provider.Arguments $stack3, $stack6, $stack9, $stack12;
        java.util.stream.Stream $stack13;

        $stack0 = newarray (org.junit.jupiter.params.provider.Arguments)[4];

        $stack1 = newarray (java.lang.Object)[2];

        $stack1[0] = "\nn";

        $stack1[1] = "[10, 110]";

        $stack3 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments of(java.lang.Object[])>($stack1);

        $stack0[0] = $stack3;

        $stack4 = newarray (java.lang.Object)[2];

        $stack4[0] = "\n\n";

        $stack4[1] = "[10, 10]";

        $stack6 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments of(java.lang.Object[])>($stack4);

        $stack0[1] = $stack6;

        $stack7 = newarray (java.lang.Object)[2];

        $stack7[0] = "gurka";

        $stack7[1] = "[103, 117, 114, 107, 97]";

        $stack9 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments of(java.lang.Object[])>($stack7);

        $stack0[2] = $stack9;

        $stack10 = newarray (java.lang.Object)[2];

        $stack10[0] = "";

        $stack10[1] = "[]";

        $stack12 = staticinvoke <org.junit.jupiter.params.provider.Arguments: org.junit.jupiter.params.provider.Arguments of(java.lang.Object[])>($stack10);

        $stack0[3] = $stack12;

        $stack13 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($stack0);

        return $stack13;
    }

    void testFailedInput(java.lang.String, java.lang.String)
    {
        java.lang.String lineSeparator, $stack7, expectedChars, $stack11;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack6;
        sortpom.exception.FailureException thrown;
        java.lang.StringBuilder $stack8, $stack9, $stack10;
        org.hamcrest.Matcher $stack12, $stack13;
        LineSeparatorParameterTest this;

        this := @this: LineSeparatorParameterTest;

        lineSeparator := @parameter0: java.lang.String;

        expectedChars := @parameter1: java.lang.String;

        testMethod = staticinvoke <LineSeparatorParameterTest$lambda_testFailedInput_1__310: org.junit.jupiter.api.function.Executable bootstrap$(java.lang.String)>(lineSeparator);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack6;

        $stack7 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LineSeparator must be either \\n, \\r or \\r\\n, but separator characters were ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expectedChars);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>($stack11);

        $stack13 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack12);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack13);

        return;
    }

    void testMixedInput()
    {
        sortpom.parameter.LineSeparatorUtil $stack1, $stack4;
        java.lang.String $stack3, $stack6;
        LineSeparatorParameterTest this;

        this := @this: LineSeparatorParameterTest;

        $stack1 = new sortpom.parameter.LineSeparatorUtil;

        specialinvoke $stack1.<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>("\\r\n");

        $stack3 = virtualinvoke $stack1.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\r\n", $stack3);

        $stack4 = new sortpom.parameter.LineSeparatorUtil;

        specialinvoke $stack4.<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>("\r\\n");

        $stack6 = virtualinvoke $stack4.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\r\n", $stack6);

        return;
    }

    void testStringInput()
    {
        sortpom.parameter.LineSeparatorUtil $stack1, $stack4, $stack7;
        java.lang.String $stack3, $stack6, $stack9;
        LineSeparatorParameterTest this;

        this := @this: LineSeparatorParameterTest;

        $stack1 = new sortpom.parameter.LineSeparatorUtil;

        specialinvoke $stack1.<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>("\\n");

        $stack3 = virtualinvoke $stack1.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\n", $stack3);

        $stack4 = new sortpom.parameter.LineSeparatorUtil;

        specialinvoke $stack4.<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>("\\r");

        $stack6 = virtualinvoke $stack4.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\r", $stack6);

        $stack7 = new sortpom.parameter.LineSeparatorUtil;

        specialinvoke $stack7.<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>("\\r\\n");

        $stack9 = virtualinvoke $stack7.<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("\r\n", $stack9);

        return;
    }

    private static void lambda$testFailedInput$1(java.lang.String) throws java.lang.Throwable
    {
        sortpom.parameter.PluginParameters$Builder $stack1;
        java.lang.String lineSeparator;

        lineSeparator := @parameter0: java.lang.String;

        $stack1 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        virtualinvoke $stack1.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>(lineSeparator, 1, 1, 1);

        return;
    }

    private static void lambda$lineSeparatorWithSomethingElseShouldThrowException$0() throws java.lang.Throwable
    {
        sortpom.parameter.PluginParameters$Builder $stack0, $stack1, $stack2;

        $stack0 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack1 = virtualinvoke $stack0.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $stack2 = virtualinvoke $stack1.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("***", 0, 1, 0);

        virtualinvoke $stack2.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(2, 0, 0);

        return;
    }
}
