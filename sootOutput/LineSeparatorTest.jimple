class LineSeparatorTest extends java.lang.Object
{

    void <init>()
    {
        LineSeparatorTest this;

        this := @this: LineSeparatorTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void formattingXmlWithLineEndingsShouldResultInOneLineBreakAtEnd(java.lang.String)
    {
        sortpom.XmlOutputGenerator $stack4;
        sortpom.parameter.PluginParameters$Builder $stack5, $stack6, $stack7, $stack8;
        java.lang.String lineSeparator, actual, $stack17;
        sortpom.parameter.PluginParameters $stack9;
        org.jdom.Document $stack10;
        java.lang.StringBuilder $stack12, $stack13, $stack14, $stack15, $stack16;
        LineSeparatorTest this;

        this := @this: LineSeparatorTest;

        lineSeparator := @parameter0: java.lang.String;

        $stack4 = new sortpom.XmlOutputGenerator;

        specialinvoke $stack4.<sortpom.XmlOutputGenerator: void <init>()>();

        $stack5 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack6 = virtualinvoke $stack5.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $stack7 = virtualinvoke $stack6.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>(lineSeparator, 0, 1, 0);

        $stack8 = virtualinvoke $stack7.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(2, 0, 0);

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        virtualinvoke $stack4.<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>($stack9);

        $stack10 = staticinvoke <sortpom.sort.XmlFragment: org.jdom.Document createXmlFragment()>();

        actual = virtualinvoke $stack4.<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>($stack10);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lineSeparator);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<Gurka />");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lineSeparator);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, actual);

        return;
    }
}
