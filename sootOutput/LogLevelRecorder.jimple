public class LogLevelRecorder extends java.lang.Object
{
    private static final java.util.Map ACCEPTED_LEVELS;
    private final org.slf4j.event.Level logThreshold;
    private boolean metThreshold;

    public void <init>(java.lang.String)
    {
        LogLevelRecorder this;
        java.lang.String threshold;
        org.slf4j.event.Level $stack2;
        org.apache.maven.logwrapper.LogLevelRecorder $r0, $r1, $r2;

        this := @this: LogLevelRecorder;

        threshold := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $r0.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold> = 0;

        $r1 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $stack2 = specialinvoke $r1.<org.apache.maven.logwrapper.LogLevelRecorder: org.slf4j.event.Level determineThresholdLevel(java.lang.String)>(threshold);

        $r2 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $r2.<org.apache.maven.logwrapper.LogLevelRecorder: org.slf4j.event.Level logThreshold> = $stack2;

        return;
    }

    private org.slf4j.event.Level determineThresholdLevel(java.lang.String)
    {
        java.lang.String input, message;
        java.util.Map $stack4;
        java.lang.Object $stack5;
        org.slf4j.event.Level result;
        java.lang.Object[] $stack6;
        java.lang.IllegalArgumentException $stack8;
        LogLevelRecorder this;

        this := @this: LogLevelRecorder;

        input := @parameter0: java.lang.String;

        $stack4 = <org.apache.maven.logwrapper.LogLevelRecorder: java.util.Map ACCEPTED_LEVELS>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.lang.Object get(java.lang.Object)>(input);

        result = (org.slf4j.event.Level) $stack5;

        if result != null goto label1;

        $stack6 = newarray (java.lang.Object)[1];

        $stack6[0] = input;

        message = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is not a valid log severity threshold. Valid severities are WARN/WARNING and ERROR.", $stack6);

        $stack8 = new java.lang.IllegalArgumentException;

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(message);

        throw $stack8;

     label1:
        return result;
    }

    public void record(org.slf4j.event.Level)
    {
        LogLevelRecorder this;
        boolean $stack2;
        org.slf4j.event.Level logLevel, $stack4;
        int $stack3, $stack5;
        org.apache.maven.logwrapper.LogLevelRecorder $r0, $r1, $r2;

        this := @this: LogLevelRecorder;

        logLevel := @parameter0: org.slf4j.event.Level;

        $r0 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $stack2 = $r0.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold>;

        if $stack2 != 0 goto label1;

        $stack3 = virtualinvoke logLevel.<org.slf4j.event.Level: int toInt()>();

        $r1 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $stack4 = $r1.<org.apache.maven.logwrapper.LogLevelRecorder: org.slf4j.event.Level logThreshold>;

        $stack5 = virtualinvoke $stack4.<org.slf4j.event.Level: int toInt()>();

        if $stack3 < $stack5 goto label1;

        $r2 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $r2.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold> = 1;

     label1:
        return;
    }

    public boolean metThreshold()
    {
        LogLevelRecorder this;
        boolean $stack1;
        org.apache.maven.logwrapper.LogLevelRecorder $r0;

        this := @this: LogLevelRecorder;

        $r0 = (org.apache.maven.logwrapper.LogLevelRecorder) this;

        $stack1 = $r0.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold>;

        return $stack1;
    }

    static void <clinit>()
    {
        java.util.HashMap $stack0;
        org.slf4j.event.Level $stack1, $stack4, $stack7;
        java.util.Map $stack2, $stack5, $stack8;

        $stack0 = new java.util.HashMap;

        specialinvoke $stack0.<java.util.HashMap: void <init>()>();

        <org.apache.maven.logwrapper.LogLevelRecorder: java.util.Map ACCEPTED_LEVELS> = $stack0;

        $stack2 = <org.apache.maven.logwrapper.LogLevelRecorder: java.util.Map ACCEPTED_LEVELS>;

        $stack1 = <org.slf4j.event.Level: org.slf4j.event.Level WARN>;

        interfaceinvoke $stack2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("WARN", $stack1);

        $stack5 = <org.apache.maven.logwrapper.LogLevelRecorder: java.util.Map ACCEPTED_LEVELS>;

        $stack4 = <org.slf4j.event.Level: org.slf4j.event.Level WARN>;

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("WARNING", $stack4);

        $stack8 = <org.apache.maven.logwrapper.LogLevelRecorder: java.util.Map ACCEPTED_LEVELS>;

        $stack7 = <org.slf4j.event.Level: org.slf4j.event.Level ERROR>;

        interfaceinvoke $stack8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR", $stack7);

        return;
    }
}
