public class LogLevelRecorderTest extends java.lang.Object
{

    public void <init>()
    {
        LogLevelRecorderTest this;

        this := @this: LogLevelRecorderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void createsLogLevelRecorder()
    {
        org.apache.maven.logwrapper.LogLevelRecorder $stack2;
        org.slf4j.event.Level $stack3;
        boolean $stack4;
        LogLevelRecorderTest this;

        this := @this: LogLevelRecorderTest;

        $stack2 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack2.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("WARN");

        $stack3 = <org.slf4j.event.Level: org.slf4j.event.Level ERROR>;

        virtualinvoke $stack2.<org.apache.maven.logwrapper.LogLevelRecorder: void record(org.slf4j.event.Level)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

        return;
    }

    public void failsOnLowerThanWarn()
    {
        org.junit.jupiter.api.function.Executable $stack2;
        LogLevelRecorderTest this;

        this := @this: LogLevelRecorderTest;

        $stack2 = staticinvoke <LogLevelRecorderTest$lambda_failsOnLowerThanWarn_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/IllegalArgumentException;", $stack2);

        return;
    }

    public void createsLogLevelRecorderWithWarning()
    {
        org.apache.maven.logwrapper.LogLevelRecorder $stack2;
        org.slf4j.event.Level $stack3;
        boolean $stack4;
        LogLevelRecorderTest this;

        this := @this: LogLevelRecorderTest;

        $stack2 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack2.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("WARNING");

        $stack3 = <org.slf4j.event.Level: org.slf4j.event.Level ERROR>;

        virtualinvoke $stack2.<org.apache.maven.logwrapper.LogLevelRecorder: void record(org.slf4j.event.Level)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

        return;
    }

    public void failsOnUnknownLogLevel()
    {
        org.junit.jupiter.api.function.Executable $stack4;
        java.lang.Throwable thrown;
        java.lang.String message;
        org.hamcrest.Matcher $stack7, $stack8, $stack9, $stack10;
        LogLevelRecorderTest this;

        this := @this: LogLevelRecorderTest;

        $stack4 = staticinvoke <LogLevelRecorderTest$lambda_failsOnUnknownLogLevel_1__310: org.junit.jupiter.api.function.Executable bootstrap$()>();

        thrown = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/IllegalArgumentException;", $stack4);

        message = virtualinvoke thrown.<java.lang.Throwable: java.lang.String getMessage()>();

        $stack7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("SEVERE is not a valid log severity threshold");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(message, $stack7);

        $stack8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("WARN");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(message, $stack8);

        $stack9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("WARNING");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(message, $stack9);

        $stack10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("ERROR");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(message, $stack10);

        return;
    }

    private static void lambda$failsOnUnknownLogLevel$1() throws java.lang.Throwable
    {
        org.apache.maven.logwrapper.LogLevelRecorder $stack0;

        $stack0 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack0.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("SEVERE");

        return;
    }

    private static void lambda$failsOnLowerThanWarn$0() throws java.lang.Throwable
    {
        org.apache.maven.logwrapper.LogLevelRecorder $stack0;

        $stack0 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack0.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("INFO");

        return;
    }
}
