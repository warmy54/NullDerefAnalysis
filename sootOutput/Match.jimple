public class Match extends org.ooc.frontend.model.Expression implements org.ooc.frontend.model.interfaces.MustBeResolved
{
    private org.ooc.frontend.model.Type type;
    protected org.ooc.frontend.model.NodeList cases;
    protected org.ooc.frontend.model.Expression expr;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        Match this;
        org.ooc.frontend.model.tokens.Token startToken, $stack5;
        org.ooc.frontend.model.Expression expr, $r2;
        org.ooc.frontend.model.BoolLiteral $u0;
        org.ooc.frontend.model.NodeList $u1;
        org.ooc.frontend.model.Match $r0, $r1, $r3, $r4;

        this := @this: Match;

        expr := @parameter0: org.ooc.frontend.model.Expression;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        if expr != null goto label1;

        $u0 = new org.ooc.frontend.model.BoolLiteral;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack5 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.BoolLiteral: void <init>(boolean,org.ooc.frontend.model.tokens.Token)>(1, $stack5);

        $r1 = (org.ooc.frontend.model.Match) this;

        $r2 = (org.ooc.frontend.model.Expression) $u0;

        $r1.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr> = $r2;

        goto label2;

     label1:
        $r3 = (org.ooc.frontend.model.Match) this;

        $r3.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr> = expr;

     label2:
        $u1 = new org.ooc.frontend.model.NodeList;

        specialinvoke $u1.<org.ooc.frontend.model.NodeList: void <init>()>();

        $r4 = (org.ooc.frontend.model.Match) this;

        $r4.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases> = $u1;

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        Match this;
        org.ooc.frontend.model.Expression $stack3, $stack4;
        org.ooc.frontend.model.Match $r0, $r1;

        this := @this: Match;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack3 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr>;

        if oldie != $stack3 goto label1;

        $stack4 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.Match) this;

        $r1.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr> = $stack4;

        return 1;

     label1:
        return 0;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Match this;
        org.ooc.frontend.model.Match $r0;

        this := @this: Match;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Match) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Match)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        Match this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2;
        org.ooc.frontend.model.NodeList $stack3;
        org.ooc.frontend.model.Match $r0, $r1;

        this := @this: Match;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack2 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.Match) this;

        $stack3 = $r1.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases>;

        virtualinvoke $stack3.<org.ooc.frontend.model.NodeList: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        Match this;

        this := @this: Match;

        return 1;
    }

    public org.ooc.frontend.model.NodeList getCases()
    {
        Match this;
        org.ooc.frontend.model.NodeList $stack1;
        org.ooc.frontend.model.Match $r0;

        this := @this: Match;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack1 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases>;

        return $stack1;
    }

    public org.ooc.frontend.model.Expression getExpr()
    {
        Match this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Match $r0;

        this := @this: Match;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack1 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr>;

        return $stack1;
    }

    public org.ooc.frontend.model.Type getType()
    {
        Match this;
        org.ooc.frontend.model.Type $stack1;
        org.ooc.frontend.model.Match $r0;

        this := @this: Match;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack1 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type type>;

        return $stack1;
    }

    public boolean isResolved()
    {
        Match this;

        this := @this: Match;

        return 0;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.Node parent, $stack19, $stack23, $stack27, $r3, $r8, $r18, $r19;
        Match this;
        org.ooc.frontend.model.Type $stack8, $stack9, $stack14, $stack24;
        boolean $stack10, $stack11, $stack12, $stack29, fatal;
        java.lang.String $stack15;
        org.ooc.frontend.model.tokens.Token $stack16, $stack18, $stack26;
        int $stack22;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack31, $stack21;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.VariableDecl vDecl, $u2;
        org.ooc.middle.OocCompilationError $u0;
        org.ooc.frontend.model.VariableAccess $u1, $u3;
        org.ooc.frontend.model.Match $r0, $r1, $r2, $r5, $r7, $r9, $r10, $r11, $r12, $r14, $r16, $r17;
        java.lang.Throwable $r4;
        org.ooc.frontend.model.Statement $r6, $r13, $r15;

        this := @this: Match;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        parent = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack8 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type type>;

        if $stack8 != null goto label1;

        $r1 = (org.ooc.frontend.model.Match) this;

        virtualinvoke $r1.<org.ooc.frontend.model.Match: void resolveType(org.ooc.frontend.model.NodeList,org.ooc.middle.hobgoblins.Resolver,boolean)>(stack, res, fatal);

     label1:
        $r2 = (org.ooc.frontend.model.Match) this;

        $stack9 = $r2.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type type>;

        if $stack9 != null goto label3;

        $stack29 = parent instanceof org.ooc.frontend.model.Line;

        if $stack29 != 0 goto label3;

        if fatal == 0 goto label2;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r3 = (org.ooc.frontend.model.Node) this;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r3, stack, "Couldn\'t figure out type of match");

        $r4 = (java.lang.Throwable) $u0;

        throw $r4;

     label2:
        $stack31 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response LOOP>;

        return $stack31;

     label3:
        $stack10 = parent instanceof org.ooc.frontend.model.Line;

        if $stack10 == 0 goto label4;

        goto label7;

     label4:
        $stack11 = parent instanceof org.ooc.frontend.model.VariableDecl;

        if $stack11 == 0 goto label5;

        $stack22 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/VariableDecl;");

        $stack23 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack22);

        vDecl = (org.ooc.frontend.model.VariableDecl) $stack23;

        $stack24 = virtualinvoke vDecl.<org.ooc.frontend.model.VariableDecl: org.ooc.frontend.model.Type getType()>();

        virtualinvoke vDecl.<org.ooc.frontend.model.VariableDecl: void setType(org.ooc.frontend.model.Type)>($stack24);

        $r5 = (org.ooc.frontend.model.Match) this;

        $r6 = (org.ooc.frontend.model.Statement) this;

        virtualinvoke $r5.<org.ooc.frontend.model.Match: void addAfterLine(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.Statement)>(stack, $r6);

        $u1 = new org.ooc.frontend.model.VariableAccess;

        $stack26 = parent.<org.ooc.frontend.model.Node: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u1.<org.ooc.frontend.model.VariableAccess: void <init>(org.ooc.frontend.model.VariableDecl,org.ooc.frontend.model.tokens.Token)>(vDecl, $stack26);

        $r7 = (org.ooc.frontend.model.Match) this;

        virtualinvoke $r7.<org.ooc.frontend.model.Match: void toAssign(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.VariableAccess)>(stack, $u1);

        $stack27 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r8 = (org.ooc.frontend.model.Node) this;

        virtualinvoke $stack27.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r8, null);

        goto label7;

     label5:
        $stack12 = parent instanceof org.ooc.frontend.model.Assignment;

        if $stack12 == 0 goto label6;

        goto label7;

     label6:
        $u2 = new org.ooc.frontend.model.VariableDecl;

        $r9 = (org.ooc.frontend.model.Match) this;

        $stack14 = virtualinvoke $r9.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type getType()>();

        $r10 = (org.ooc.frontend.model.Match) this;

        $stack15 = virtualinvoke $r10.<org.ooc.frontend.model.Match: java.lang.String generateTempName(java.lang.String,org.ooc.frontend.model.NodeList)>("match", stack);

        $r11 = (org.ooc.frontend.model.Match) this;

        $stack16 = $r11.<org.ooc.frontend.model.Match: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u2.<org.ooc.frontend.model.VariableDecl: void <init>(org.ooc.frontend.model.Type,java.lang.String,org.ooc.frontend.model.tokens.Token,org.ooc.frontend.model.Module)>($stack14, $stack15, $stack16, null);

        $r12 = (org.ooc.frontend.model.Match) this;

        $r13 = (org.ooc.frontend.model.Statement) $u2;

        virtualinvoke $r12.<org.ooc.frontend.model.Match: void addBeforeLine(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.Statement)>(stack, $r13);

        $r14 = (org.ooc.frontend.model.Match) this;

        $r15 = (org.ooc.frontend.model.Statement) this;

        virtualinvoke $r14.<org.ooc.frontend.model.Match: void addBeforeLine(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.Statement)>(stack, $r15);

        $u3 = new org.ooc.frontend.model.VariableAccess;

        $r16 = (org.ooc.frontend.model.Match) this;

        $stack18 = $r16.<org.ooc.frontend.model.Match: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u3.<org.ooc.frontend.model.VariableAccess: void <init>(org.ooc.frontend.model.VariableDecl,org.ooc.frontend.model.tokens.Token)>($u2, $stack18);

        $r17 = (org.ooc.frontend.model.Match) this;

        virtualinvoke $r17.<org.ooc.frontend.model.Match: void toAssign(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.VariableAccess)>(stack, $u3);

        $stack19 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $r18 = (org.ooc.frontend.model.Node) this;

        $r19 = (org.ooc.frontend.model.Node) $u3;

        virtualinvoke $stack19.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r18, $r19);

     label7:
        $stack21 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack21;
    }

    private void resolveType(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        org.ooc.frontend.model.NodeList stack, $stack11, $stack13, $stack15, $stack17;
        int funcIndex, returnIndex;
        Match this;
        boolean $stack12, $stack16, $stack21, $stack27, fatal;
        org.ooc.frontend.model.Node $stack14, $stack18, $stack25;
        org.ooc.frontend.model.Line $stack19;
        org.ooc.frontend.model.Statement statement;
        org.ooc.frontend.model.Expression $stack22;
        org.ooc.frontend.model.Type $stack23, $stack26, $stack28, $stack10;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.FunctionDecl funcDecl;
        org.ooc.frontend.model.Case funcDecl#8;
        org.ooc.frontend.model.Match $r0, $r1, $r2, $r3, $r4;

        this := @this: Match;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        funcIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/FunctionDecl;");

        returnIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/ValuedReturn;");

        if funcIndex == -1 goto label1;

        if returnIndex == -1 goto label1;

        $stack25 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(funcIndex);

        funcDecl = (org.ooc.frontend.model.FunctionDecl) $stack25;

        $stack26 = virtualinvoke funcDecl.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.Type getReturnType()>();

        $stack27 = virtualinvoke $stack26.<org.ooc.frontend.model.Type: boolean isGeneric()>();

        if $stack27 == 0 goto label1;

        $stack28 = virtualinvoke funcDecl.<org.ooc.frontend.model.FunctionDecl: org.ooc.frontend.model.Type getReturnType()>();

        $r0 = (org.ooc.frontend.model.Match) this;

        $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type type> = $stack28;

     label1:
        $r1 = (org.ooc.frontend.model.Match) this;

        $stack10 = $r1.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type type>;

        if $stack10 != null goto label5;

        $r2 = (org.ooc.frontend.model.Match) this;

        $stack11 = $r2.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases>;

        $stack12 = virtualinvoke $stack11.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack12 == 0 goto label2;

        return;

     label2:
        $r3 = (org.ooc.frontend.model.Match) this;

        $stack13 = $r3.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases>;

        $stack14 = virtualinvoke $stack13.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        funcDecl#8 = (org.ooc.frontend.model.Case) $stack14;

        $stack15 = virtualinvoke funcDecl#8.<org.ooc.frontend.model.Case: org.ooc.frontend.model.NodeList getBody()>();

        $stack16 = virtualinvoke $stack15.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack16 == 0 goto label3;

        return;

     label3:
        $stack17 = virtualinvoke funcDecl#8.<org.ooc.frontend.model.Case: org.ooc.frontend.model.NodeList getBody()>();

        $stack18 = virtualinvoke $stack17.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getFirst()>();

        $stack19 = (org.ooc.frontend.model.Line) $stack18;

        statement = virtualinvoke $stack19.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement getStatement()>();

        $stack21 = statement instanceof org.ooc.frontend.model.Expression;

        if $stack21 != 0 goto label4;

        return;

     label4:
        $stack22 = (org.ooc.frontend.model.Expression) statement;

        $stack23 = virtualinvoke $stack22.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        $r4 = (org.ooc.frontend.model.Match) this;

        $r4.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Type type> = $stack23;

     label5:
        return;
    }

    private void toAssign(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.VariableAccess) throws org.ooc.middle.OocCompilationError
    {
        Match this;
        org.ooc.frontend.model.NodeList $stack6, $stack10, $stack12, $stack16, stack;
        java.util.Iterator l3;
        boolean $stack8, $stack11, $stack15;
        java.lang.Object $stack9;
        org.ooc.frontend.model.Case case1;
        org.ooc.frontend.model.Node $stack13, $r1, $r3, $r7, $r8;
        org.ooc.frontend.model.Line last, $u3;
        org.ooc.frontend.model.Statement $stack14, $stack19, $r6;
        org.ooc.frontend.model.VariableAccess varAcc;
        org.ooc.frontend.model.tokens.Token $stack20;
        org.ooc.frontend.model.Expression $stack21, $r5;
        org.ooc.middle.OocCompilationError $u0, $u1;
        org.ooc.frontend.model.Assignment $u2;
        org.ooc.frontend.model.Match $r0;
        java.lang.Throwable $r2, $r4;

        this := @this: Match;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        varAcc := @parameter1: org.ooc.frontend.model.VariableAccess;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack6 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases>;

        l3 = virtualinvoke $stack6.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label4;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        case1 = (org.ooc.frontend.model.Case) $stack9;

        $stack10 = virtualinvoke case1.<org.ooc.frontend.model.Case: org.ooc.frontend.model.NodeList getBody()>();

        $stack11 = virtualinvoke $stack10.<org.ooc.frontend.model.NodeList: boolean isEmpty()>();

        if $stack11 == 0 goto label2;

        $u0 = new org.ooc.middle.OocCompilationError;

        $r1 = (org.ooc.frontend.model.Node) case1;

        specialinvoke $u0.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r1, stack, "Empty case in a match used as an expression!");

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label2:
        $stack12 = virtualinvoke case1.<org.ooc.frontend.model.Case: org.ooc.frontend.model.NodeList getBody()>();

        $stack13 = virtualinvoke $stack12.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node getLast()>();

        last = (org.ooc.frontend.model.Line) $stack13;

        $stack14 = virtualinvoke last.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement getStatement()>();

        $stack15 = $stack14 instanceof org.ooc.frontend.model.Expression;

        if $stack15 != 0 goto label3;

        $u1 = new org.ooc.middle.OocCompilationError;

        $r3 = (org.ooc.frontend.model.Node) case1;

        specialinvoke $u1.<org.ooc.middle.OocCompilationError: void <init>(org.ooc.frontend.model.Node,org.ooc.frontend.model.NodeList,java.lang.String)>($r3, stack, "In a match used as an expression, last statement of a case isn\'t an expression!");

        $r4 = (java.lang.Throwable) $u1;

        throw $r4;

     label3:
        $stack16 = virtualinvoke case1.<org.ooc.frontend.model.Case: org.ooc.frontend.model.NodeList getBody()>();

        $u3 = new org.ooc.frontend.model.Line;

        $u2 = new org.ooc.frontend.model.Assignment;

        $stack19 = virtualinvoke last.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement getStatement()>();

        $stack21 = (org.ooc.frontend.model.Expression) $stack19;

        $stack20 = last.<org.ooc.frontend.model.Line: org.ooc.frontend.model.tokens.Token startToken>;

        $r5 = (org.ooc.frontend.model.Expression) varAcc;

        specialinvoke $u2.<org.ooc.frontend.model.Assignment: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>($r5, $stack21, $stack20);

        $r6 = (org.ooc.frontend.model.Statement) $u2;

        specialinvoke $u3.<org.ooc.frontend.model.Line: void <init>(org.ooc.frontend.model.Statement)>($r6);

        $r7 = (org.ooc.frontend.model.Node) last;

        $r8 = (org.ooc.frontend.model.Node) $u3;

        virtualinvoke $stack16.<org.ooc.frontend.model.NodeList: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r7, $r8);

        goto label1;

     label4:
        return;
    }

    public java.lang.String toString()
    {
        Match this;
        org.ooc.frontend.model.NodeList $stack1;
        org.ooc.frontend.model.Expression $stack2;
        int $stack3;
        java.lang.String $stack4;
        org.ooc.frontend.model.Match $r0, $r1;

        this := @this: Match;

        $r0 = (org.ooc.frontend.model.Match) this;

        $stack2 = $r0.<org.ooc.frontend.model.Match: org.ooc.frontend.model.Expression expr>;

        $r1 = (org.ooc.frontend.model.Match) this;

        $stack1 = $r1.<org.ooc.frontend.model.Match: org.ooc.frontend.model.NodeList cases>;

        $stack3 = virtualinvoke $stack1.<org.ooc.frontend.model.NodeList: int size()>();

        $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression,int)>($stack2, $stack3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("match \u0001, with \u0001 cases");

        return $stack4;
    }
}
