public class MavenCli extends java.lang.Object
{
    public static final java.lang.String LOCAL_REPO_PROPERTY;
    public static final java.lang.String MULTIMODULE_PROJECT_DIRECTORY;
    public static final java.lang.String USER_HOME;
    public static final java.io.File USER_MAVEN_CONFIGURATION_HOME;
    public static final java.io.File DEFAULT_USER_TOOLCHAINS_FILE;
    public static final java.io.File DEFAULT_GLOBAL_TOOLCHAINS_FILE;
    private static final java.lang.String EXT_CLASS_PATH;
    private static final java.lang.String EXTENSIONS_FILENAME;
    private static final java.lang.String MVN_MAVEN_CONFIG;
    public static final java.lang.String STYLE_COLOR_PROPERTY;
    private org.codehaus.plexus.classworlds.ClassWorld classWorld;
    private org.codehaus.plexus.logging.LoggerManager plexusLoggerManager;
    private org.slf4j.ILoggerFactory slf4jLoggerFactory;
    private org.slf4j.Logger slf4jLogger;
    private org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher;
    private org.apache.maven.model.building.ModelProcessor modelProcessor;
    private org.apache.maven.Maven maven;
    private org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator;
    private org.apache.maven.toolchain.building.ToolchainsBuilder toolchainsBuilder;
    private org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher dispatcher;
    private java.util.Map configurationProcessors;
    private org.apache.maven.cli.CLIManager cliManager;
    private static final java.util.regex.Pattern LAST_ANSI_SEQUENCE;
    private static final java.lang.String ANSI_RESET;

    public void <init>()
    {
        MavenCli this;
        org.apache.maven.cli.MavenCli $r0;

        this := @this: MavenCli;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r0.<org.apache.maven.cli.MavenCli: void <init>(org.codehaus.plexus.classworlds.ClassWorld)>(null);

        return;
    }

    public void <init>(org.codehaus.plexus.classworlds.ClassWorld)
    {
        MavenCli this;
        org.codehaus.plexus.classworlds.ClassWorld classWorld;
        org.apache.maven.cli.MavenCli $r0;

        this := @this: MavenCli;

        classWorld := @parameter0: org.codehaus.plexus.classworlds.ClassWorld;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $r0.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld> = classWorld;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        int result;

        args := @parameter0: java.lang.String[];

        result = staticinvoke <org.apache.maven.cli.MavenCli: int main(java.lang.String[],org.codehaus.plexus.classworlds.ClassWorld)>(args, null);

        staticinvoke <java.lang.System: void exit(int)>(result);

        return;
    }

    public static int main(java.lang.String[], org.codehaus.plexus.classworlds.ClassWorld)
    {
        org.apache.maven.cli.MavenCli $stack4;
        org.apache.maven.cli.CliRequest $stack5;
        java.lang.String[] args;
        org.codehaus.plexus.classworlds.ClassWorld classWorld;
        int result;

        args := @parameter0: java.lang.String[];

        classWorld := @parameter1: org.codehaus.plexus.classworlds.ClassWorld;

        $stack4 = new org.apache.maven.cli.MavenCli;

        specialinvoke $stack4.<org.apache.maven.cli.MavenCli: void <init>()>();

        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void systemInstall()>();

        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void registerShutdownHook()>();

        $stack5 = new org.apache.maven.cli.CliRequest;

        specialinvoke $stack5.<org.apache.maven.cli.CliRequest: void <init>(java.lang.String[],org.codehaus.plexus.classworlds.ClassWorld)>(args, classWorld);

        result = virtualinvoke $stack4.<org.apache.maven.cli.MavenCli: int doMain(org.apache.maven.cli.CliRequest)>($stack5);

        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void systemUninstall()>();

        return result;
    }

    public static int doMain(java.lang.String[], org.codehaus.plexus.classworlds.ClassWorld)
    {
        org.apache.maven.cli.MavenCli $stack3;
        org.apache.maven.cli.CliRequest $stack4;
        java.lang.String[] args;
        org.codehaus.plexus.classworlds.ClassWorld classWorld;
        int $stack5;

        args := @parameter0: java.lang.String[];

        classWorld := @parameter1: org.codehaus.plexus.classworlds.ClassWorld;

        $stack3 = new org.apache.maven.cli.MavenCli;

        specialinvoke $stack3.<org.apache.maven.cli.MavenCli: void <init>()>();

        $stack4 = new org.apache.maven.cli.CliRequest;

        specialinvoke $stack4.<org.apache.maven.cli.CliRequest: void <init>(java.lang.String[],org.codehaus.plexus.classworlds.ClassWorld)>(args, classWorld);

        $stack5 = virtualinvoke $stack3.<org.apache.maven.cli.MavenCli: int doMain(org.apache.maven.cli.CliRequest)>($stack4);

        return $stack5;
    }

    public int doMain(java.lang.String[], java.lang.String, java.io.PrintStream, java.io.PrintStream)
    {
        java.io.PrintStream oldout, olderr, stdout, stderr;
        MavenCli this;
        org.codehaus.plexus.classworlds.ClassWorld $stack19, $stack22, $stack24, $stack26, $stack37, $stack47, $stack61, $stack63, $stack68;
        java.lang.String[] args;
        java.lang.String workingDirectory, realmId, $stack53;
        java.util.Collection $stack27, $stack48, $stack69;
        java.util.Iterator l10, l15, cliRequest;
        boolean $stack29, $stack35, $stack50, $stack57, $stack60;
        java.lang.Object $stack33, $stack52, $stack58;
        org.codehaus.plexus.classworlds.realm.ClassRealm realm;
        java.lang.Throwable $stack56, $stack62, $stack72;
        java.util.Set realms;
        int realm;
        java.util.HashSet $u0;
        org.apache.maven.cli.CliRequest $u1;
        java.util.ArrayList $u2, $u3;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: MavenCli;

        args := @parameter0: java.lang.String[];

        workingDirectory := @parameter1: java.lang.String;

        stdout := @parameter2: java.io.PrintStream;

        stderr := @parameter3: java.io.PrintStream;

        oldout = <java.lang.System: java.io.PrintStream out>;

        olderr = <java.lang.System: java.io.PrintStream err>;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack19 = $r0.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        if $stack19 == null goto label03;

        $u0 = new java.util.HashSet;

        specialinvoke $u0.<java.util.HashSet: void <init>()>();

        realms = $u0;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack47 = $r1.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $stack48 = virtualinvoke $stack47.<org.codehaus.plexus.classworlds.ClassWorld: java.util.Collection getRealms()>();

        cliRequest = interfaceinvoke $stack48.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack50 = interfaceinvoke cliRequest.<java.util.Iterator: boolean hasNext()>();

        if $stack50 == 0 goto label02;

        $stack52 = interfaceinvoke cliRequest.<java.util.Iterator: java.lang.Object next()>();

        realm = (org.codehaus.plexus.classworlds.realm.ClassRealm) $stack52;

        $stack53 = virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: java.lang.String getId()>();

        interfaceinvoke $u0.<java.util.Set: boolean add(java.lang.Object)>($stack53);

        goto label01;

     label02:
        goto label04;

     label03:
        realms = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label04:
        if stdout == null goto label05;

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>(stdout);

     label05:
        if stderr == null goto label06;

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>(stderr);

     label06:
        $u1 = new org.apache.maven.cli.CliRequest;

        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack22 = $r2.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        specialinvoke $u1.<org.apache.maven.cli.CliRequest: void <init>(java.lang.String[],org.codehaus.plexus.classworlds.ClassWorld)>(args, $stack22);

        $u1.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory> = workingDirectory;

        $r3 = (org.apache.maven.cli.MavenCli) this;

        realm = virtualinvoke $r3.<org.apache.maven.cli.MavenCli: int doMain(org.apache.maven.cli.CliRequest)>($u1);

     label07:
        $r4 = (org.apache.maven.cli.MavenCli) this;

        $stack24 = $r4.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        if $stack24 == null goto label13;

        $u2 = new java.util.ArrayList;

        $r5 = (org.apache.maven.cli.MavenCli) this;

        $stack26 = $r5.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $stack27 = virtualinvoke $stack26.<org.codehaus.plexus.classworlds.ClassWorld: java.util.Collection getRealms()>();

        specialinvoke $u2.<java.util.ArrayList: void <init>(java.util.Collection)>($stack27);

        l10 = virtualinvoke $u2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $stack29 = interfaceinvoke l10.<java.util.Iterator: boolean hasNext()>();

        if $stack29 == 0 goto label13;

        $stack33 = interfaceinvoke l10.<java.util.Iterator: java.lang.Object next()>();

        realm = (org.codehaus.plexus.classworlds.realm.ClassRealm) $stack33;

        realmId = virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: java.lang.String getId()>();

        $stack35 = interfaceinvoke realms.<java.util.Set: boolean contains(java.lang.Object)>(realmId);

        if $stack35 != 0 goto label12;

     label09:
        $r6 = (org.apache.maven.cli.MavenCli) this;

        $stack37 = $r6.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        virtualinvoke $stack37.<org.codehaus.plexus.classworlds.ClassWorld: void disposeRealm(java.lang.String)>(realmId);

     label10:
        goto label12;

     label11:
        $stack72 := @caughtexception;

     label12:
        goto label08;

     label13:
        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>(oldout);

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>(olderr);

        return realm;

     label14:
        $stack62 := @caughtexception;

     label15:
        $r7 = (org.apache.maven.cli.MavenCli) this;

        $stack63 = $r7.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        if $stack63 == null goto label21;

        $u3 = new java.util.ArrayList;

        $r8 = (org.apache.maven.cli.MavenCli) this;

        $stack68 = $r8.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $stack69 = virtualinvoke $stack68.<org.codehaus.plexus.classworlds.ClassWorld: java.util.Collection getRealms()>();

        specialinvoke $u3.<java.util.ArrayList: void <init>(java.util.Collection)>($stack69);

        l15 = virtualinvoke $u3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label16:
        $stack57 = interfaceinvoke l15.<java.util.Iterator: boolean hasNext()>();

        if $stack57 == 0 goto label21;

        $stack58 = interfaceinvoke l15.<java.util.Iterator: java.lang.Object next()>();

        realm = (org.codehaus.plexus.classworlds.realm.ClassRealm) $stack58;

        realmId = virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: java.lang.String getId()>();

        $stack60 = interfaceinvoke realms.<java.util.Set: boolean contains(java.lang.Object)>(realmId);

        if $stack60 != 0 goto label20;

     label17:
        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack61 = $r9.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        virtualinvoke $stack61.<org.codehaus.plexus.classworlds.ClassWorld: void disposeRealm(java.lang.String)>(realmId);

     label18:
        goto label20;

     label19:
        $stack56 := @caughtexception;

     label20:
        goto label16;

     label21:
        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>(oldout);

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>(olderr);

        throw $stack62;

        catch org.codehaus.plexus.classworlds.realm.NoSuchRealmException from label09 to label10 with label11;
        catch java.lang.Throwable from label04 to label07 with label14;
        catch org.codehaus.plexus.classworlds.realm.NoSuchRealmException from label17 to label18 with label19;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public int doMain(org.apache.maven.cli.CliRequest)
    {
        MavenCli this;
        org.apache.maven.cli.CliRequest cliRequest;
        java.lang.Throwable $stack10, $stack16, $stack20, $stack22;
        java.lang.Exception $stack12;
        boolean $stack13, $stack17;
        org.slf4j.Logger $stack14, $stack18;
        org.codehaus.plexus.PlexusContainer localContainer;
        int e, l4;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16;
        org.apache.maven.cli.MavenCli$ExitException $r14;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        localContainer = null;

     label01:
        $r0 = (org.apache.maven.cli.MavenCli) this;

        virtualinvoke $r0.<org.apache.maven.cli.MavenCli: void initialize(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r1 = (org.apache.maven.cli.MavenCli) this;

        virtualinvoke $r1.<org.apache.maven.cli.MavenCli: void cli(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r2 = (org.apache.maven.cli.MavenCli) this;

        virtualinvoke $r2.<org.apache.maven.cli.MavenCli: void properties(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r3 = (org.apache.maven.cli.MavenCli) this;

        virtualinvoke $r3.<org.apache.maven.cli.MavenCli: void logging(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r4 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r4.<org.apache.maven.cli.MavenCli: void informativeCommands(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r5 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r5.<org.apache.maven.cli.MavenCli: void version(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r6 = (org.apache.maven.cli.MavenCli) this;

        localContainer = virtualinvoke $r6.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.PlexusContainer container(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r7 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r7.<org.apache.maven.cli.MavenCli: void commands(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r8 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r8.<org.apache.maven.cli.MavenCli: void configure(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r9 = (org.apache.maven.cli.MavenCli) this;

        virtualinvoke $r9.<org.apache.maven.cli.MavenCli: void toolchains(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r10 = (org.apache.maven.cli.MavenCli) this;

        virtualinvoke $r10.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequest populateRequest(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r11 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r11.<org.apache.maven.cli.MavenCli: void encryption(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r12 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r12.<org.apache.maven.cli.MavenCli: void repository(org.apache.maven.cli.CliRequest)>(cliRequest);

        $r13 = (org.apache.maven.cli.MavenCli) this;

        e = specialinvoke $r13.<org.apache.maven.cli.MavenCli: int execute(org.apache.maven.cli.CliRequest)>(cliRequest);

     label02:
        if localContainer == null goto label03;

        interfaceinvoke localContainer.<org.codehaus.plexus.PlexusContainer: void dispose()>();

     label03:
        return e;

     label04:
        $stack22 := @caughtexception;

        $r14 = (org.apache.maven.cli.MavenCli$ExitException) $stack22;

        l4 = $r14.<org.apache.maven.cli.MavenCli$ExitException: int exitCode>;

     label05:
        if localContainer == null goto label06;

        interfaceinvoke localContainer.<org.codehaus.plexus.PlexusContainer: void dispose()>();

     label06:
        return l4;

     label07:
        $stack20 := @caughtexception;

     label08:
        if localContainer == null goto label09;

        interfaceinvoke localContainer.<org.codehaus.plexus.PlexusContainer: void dispose()>();

     label09:
        return 1;

     label10:
        $stack16 := @caughtexception;

        $r15 = (org.apache.maven.cli.MavenCli) this;

        $stack18 = $r15.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack17 = cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors>;

        staticinvoke <org.apache.maven.cli.CLIReportingUtils: void showError(org.slf4j.Logger,java.lang.String,java.lang.Throwable,boolean)>($stack18, "ABORTED", $stack16, $stack17);

     label11:
        if localContainer == null goto label12;

        interfaceinvoke localContainer.<org.codehaus.plexus.PlexusContainer: void dispose()>();

     label12:
        return 2;

     label13:
        $stack12 := @caughtexception;

        $r16 = (org.apache.maven.cli.MavenCli) this;

        $stack14 = $r16.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack13 = cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors>;

        staticinvoke <org.apache.maven.cli.CLIReportingUtils: void showError(org.slf4j.Logger,java.lang.String,java.lang.Throwable,boolean)>($stack14, "Error executing Maven.", $stack12, $stack13);

     label14:
        if localContainer == null goto label15;

        interfaceinvoke localContainer.<org.codehaus.plexus.PlexusContainer: void dispose()>();

     label15:
        return 1;

     label16:
        $stack10 := @caughtexception;

     label17:
        if localContainer == null goto label18;

        interfaceinvoke localContainer.<org.codehaus.plexus.PlexusContainer: void dispose()>();

     label18:
        throw $stack10;

        catch org.apache.maven.cli.MavenCli$ExitException from label01 to label02 with label04;
        catch org.apache.commons.cli.UnrecognizedOptionException from label01 to label02 with label07;
        catch org.apache.maven.BuildAbort from label01 to label02 with label10;
        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    void initialize(org.apache.maven.cli.CliRequest) throws org.apache.maven.cli.MavenCli$ExitException
    {
        org.apache.maven.cli.CliRequest cliRequest;
        java.lang.String $stack5, $stack10, $stack21, basedirProperty;
        java.io.File $stack6, $stack14, $stack24, $u1, $u2;
        java.lang.Object[] $stack17;
        java.io.PrintStream $stack18;
        java.io.IOException $stack23;
        MavenCli this;
        org.apache.maven.cli.MavenCli$ExitException $u0;
        java.lang.Throwable $r0;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack5 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        if $stack5 != null goto label1;

        $stack21 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory> = $stack21;

     label1:
        $stack6 = cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory>;

        if $stack6 != null goto label6;

        basedirProperty = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("maven.multiModuleProjectDirectory");

        if basedirProperty != null goto label2;

        $stack18 = <java.lang.System: java.io.PrintStream err>;

        $stack17 = newarray (java.lang.Object)[1];

        $stack17[0] = "maven.multiModuleProjectDirectory";

        virtualinvoke $stack18.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("-D%s system property is not set.", $stack17);

        $u0 = new org.apache.maven.cli.MavenCli$ExitException;

        specialinvoke $u0.<org.apache.maven.cli.MavenCli$ExitException: void <init>(int)>(1);

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label2:
        $u1 = new java.io.File;

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>(basedirProperty);

     label3:
        $stack14 = virtualinvoke $u1.<java.io.File: java.io.File getCanonicalFile()>();

        cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory> = $stack14;

     label4:
        goto label6;

     label5:
        $stack23 := @caughtexception;

        $stack24 = virtualinvoke $u1.<java.io.File: java.io.File getAbsoluteFile()>();

        cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory> = $stack24;

     label6:
        basedirProperty = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("maven.home");

        if basedirProperty == null goto label7;

        $u2 = new java.io.File;

        specialinvoke $u2.<java.io.File: void <init>(java.lang.String)>(basedirProperty);

        $stack10 = virtualinvoke $u2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("maven.home", $stack10);

     label7:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    void cli(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        MavenCli this;
        org.apache.maven.cli.CliRequest cliRequest;
        java.io.File $stack11, $u3;
        boolean $stack12, $stack24, $stack31, $stack38;
        java.lang.String[] $stack13, $stack17, $stack25, $stack28;
        org.apache.maven.cli.CLIManager $stack14, $stack18, $stack26, $stack49, $stack58, $u1;
        org.apache.commons.cli.CommandLine $stack15, $stack16, $stack19, mavenConfig;
        java.nio.file.Path $stack20;
        java.nio.charset.Charset $stack21;
        java.util.List $stack22, unrecongized#4;
        java.lang.Object[] $stack27;
        java.lang.StringBuilder $stack34, $stack35, $stack44, $stack46, $stack53, $stack55, $u4, $u6, $u7;
        java.lang.String $stack36, arg, $stack45, $stack47, $stack54, $stack56;
        java.lang.Object $stack37;
        java.lang.Throwable $stack41, $stack50, $r4;
        java.io.PrintStream $stack43, $stack48, $stack52, $stack57;
        java.util.Iterator unrecongized;
        org.apache.maven.cli.logging.Slf4jStdoutLogger $u0;
        java.util.ArrayList $u2;
        org.apache.commons.cli.ParseException $u5, $r5, $r10;
        org.apache.maven.cli.MavenCli $r0, $r2, $r3, $r6, $r7, $r8, $r9, $r11;
        org.slf4j.Logger $r1;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $u0 = new org.apache.maven.cli.logging.Slf4jStdoutLogger;

        specialinvoke $u0.<org.apache.maven.cli.logging.Slf4jStdoutLogger: void <init>()>();

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $r1 = (org.slf4j.Logger) $u0;

        $r0.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger> = $r1;

        $u1 = new org.apache.maven.cli.CLIManager;

        specialinvoke $u1.<org.apache.maven.cli.CLIManager: void <init>()>();

        $r2 = (org.apache.maven.cli.MavenCli) this;

        $r2.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager> = $u1;

        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        mavenConfig = null;

     label01:
        $u3 = new java.io.File;

        $stack11 = cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory>;

        specialinvoke $u3.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack11, ".mvn/maven.config");

        $stack12 = virtualinvoke $u3.<java.io.File: boolean isFile()>();

        if $stack12 == 0 goto label05;

        $stack20 = virtualinvoke $u3.<java.io.File: java.nio.file.Path toPath()>();

        $stack21 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $stack22 = staticinvoke <java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path,java.nio.charset.Charset)>($stack20, $stack21);

        unrecongized = interfaceinvoke $stack22.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack24 = interfaceinvoke unrecongized.<java.util.Iterator: boolean hasNext()>();

        if $stack24 == 0 goto label04;

        $stack37 = interfaceinvoke unrecongized.<java.util.Iterator: java.lang.Object next()>();

        arg = (java.lang.String) $stack37;

        $stack38 = virtualinvoke arg.<java.lang.String: boolean isEmpty()>();

        if $stack38 != 0 goto label03;

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>(arg);

     label03:
        goto label02;

     label04:
        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack26 = $r3.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager>;

        $stack25 = newarray (java.lang.String)[0];

        $stack27 = interfaceinvoke $u2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack25);

        $stack28 = (java.lang.String[]) $stack27;

        mavenConfig = virtualinvoke $stack26.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.CommandLine parse(java.lang.String[])>($stack28);

        unrecongized#4 = virtualinvoke mavenConfig.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        $stack31 = interfaceinvoke unrecongized#4.<java.util.List: boolean isEmpty()>();

        if $stack31 != 0 goto label05;

        $u5 = new org.apache.commons.cli.ParseException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized maven.config entries: ");

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(unrecongized#4);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u5.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($stack36);

        $r4 = (java.lang.Throwable) $u5;

        throw $r4;

     label05:
        goto label07;

     label06:
        $stack50 := @caughtexception;

        $stack52 = <java.lang.System: java.io.PrintStream err>;

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack53 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse maven.config: ");

        $r5 = (org.apache.commons.cli.ParseException) $stack50;

        $stack54 = virtualinvoke $r5.<org.apache.commons.cli.ParseException: java.lang.String getMessage()>();

        $stack55 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack54);

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack52.<java.io.PrintStream: void println(java.lang.String)>($stack56);

        $r6 = (org.apache.maven.cli.MavenCli) this;

        $stack58 = $r6.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager>;

        $stack57 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack58.<org.apache.maven.cli.CLIManager: void displayHelp(java.io.PrintStream)>($stack57);

        throw $stack50;

     label07:
        if mavenConfig != null goto label08;

        $r7 = (org.apache.maven.cli.MavenCli) this;

        $stack18 = $r7.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager>;

        $stack17 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String[] args>;

        $stack19 = virtualinvoke $stack18.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.CommandLine parse(java.lang.String[])>($stack17);

        cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine> = $stack19;

        goto label09;

     label08:
        $r8 = (org.apache.maven.cli.MavenCli) this;

        $stack14 = $r8.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager>;

        $stack13 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String[] args>;

        $stack15 = virtualinvoke $stack14.<org.apache.maven.cli.CLIManager: org.apache.commons.cli.CommandLine parse(java.lang.String[])>($stack13);

        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack16 = specialinvoke $r9.<org.apache.maven.cli.MavenCli: org.apache.commons.cli.CommandLine cliMerge(org.apache.commons.cli.CommandLine,org.apache.commons.cli.CommandLine)>($stack15, mavenConfig);

        cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine> = $stack16;

     label09:
        goto label11;

     label10:
        $stack41 := @caughtexception;

        $stack43 = <java.lang.System: java.io.PrintStream err>;

        $u7 = new java.lang.StringBuilder;

        specialinvoke $u7.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke $u7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse command line options: ");

        $r10 = (org.apache.commons.cli.ParseException) $stack41;

        $stack45 = virtualinvoke $r10.<org.apache.commons.cli.ParseException: java.lang.String getMessage()>();

        $stack46 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack45);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack43.<java.io.PrintStream: void println(java.lang.String)>($stack47);

        $r11 = (org.apache.maven.cli.MavenCli) this;

        $stack49 = $r11.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager>;

        $stack48 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack49.<org.apache.maven.cli.CLIManager: void displayHelp(java.io.PrintStream)>($stack48);

        throw $stack41;

     label11:
        return;

        catch org.apache.commons.cli.ParseException from label01 to label05 with label06;
        catch org.apache.commons.cli.ParseException from label07 to label09 with label10;
    }

    private void informativeCommands(org.apache.maven.cli.CliRequest) throws org.apache.maven.cli.MavenCli$ExitException
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine $stack2, $stack4, $stack6;
        boolean $stack3, $stack5, $stack7;
        java.io.PrintStream $stack8, $stack11, $stack14;
        java.lang.String $stack9, $stack12;
        MavenCli this;
        org.apache.maven.cli.CLIManager $stack15;
        org.apache.maven.cli.MavenCli$ExitException $u0, $u1;
        org.apache.maven.cli.MavenCli $r0;
        java.lang.Throwable $r1, $r2;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack2 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack3 = virtualinvoke $stack2.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(104);

        if $stack3 == 0 goto label1;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack15 = $r0.<org.apache.maven.cli.MavenCli: org.apache.maven.cli.CLIManager cliManager>;

        $stack14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack15.<org.apache.maven.cli.CLIManager: void displayHelp(java.io.PrintStream)>($stack14);

        $u0 = new org.apache.maven.cli.MavenCli$ExitException;

        specialinvoke $u0.<org.apache.maven.cli.MavenCli$ExitException: void <init>(int)>(0);

        $r1 = (java.lang.Throwable) $u0;

        throw $r1;

     label1:
        $stack4 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack5 = virtualinvoke $stack4.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(118);

        if $stack5 == 0 goto label4;

        $stack6 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack7 = virtualinvoke $stack6.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(113);

        if $stack7 == 0 goto label2;

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        $stack12 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String showVersionMinimal()>();

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.String)>($stack12);

        goto label3;

     label2:
        $stack8 = <java.lang.System: java.io.PrintStream out>;

        $stack9 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String showVersion()>();

        virtualinvoke $stack8.<java.io.PrintStream: void println(java.lang.String)>($stack9);

     label3:
        $u1 = new org.apache.maven.cli.MavenCli$ExitException;

        specialinvoke $u1.<org.apache.maven.cli.MavenCli$ExitException: void <init>(int)>(0);

        $r2 = (java.lang.Throwable) $u1;

        throw $r2;

     label4:
        return;
    }

    private org.apache.commons.cli.CommandLine cliMerge(org.apache.commons.cli.CommandLine, org.apache.commons.cli.CommandLine)
    {
        org.apache.commons.cli.CommandLine$Builder $stack9;
        org.apache.commons.cli.CommandLine mavenArgs, mavenConfig, $stack17;
        java.util.ArrayList $stack12;
        boolean $stack16, $stack26;
        java.lang.Object $stack18;
        java.lang.String $stack24, $stack25, arg;
        MavenCli this;
        java.lang.String[] setPropertyOptions;
        int l5, opt, arg#12;
        org.apache.commons.cli.Option[] l5#10;
        org.apache.commons.cli.Option opt#13;
        java.util.Iterator l5#18;

        this := @this: MavenCli;

        mavenArgs := @parameter0: org.apache.commons.cli.CommandLine;

        mavenConfig := @parameter1: org.apache.commons.cli.CommandLine;

        $stack9 = new org.apache.commons.cli.CommandLine$Builder;

        specialinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: void <init>()>();

        setPropertyOptions = virtualinvoke mavenArgs.<org.apache.commons.cli.CommandLine: java.lang.String[] getArgs()>();

        l5 = lengthof setPropertyOptions;

        opt = 0;

     label01:
        if opt >= l5 goto label02;

        arg = setPropertyOptions[opt];

        virtualinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: org.apache.commons.cli.CommandLine$Builder addArg(java.lang.String)>(arg);

        opt = opt + 1;

        goto label01;

     label02:
        setPropertyOptions = virtualinvoke mavenConfig.<org.apache.commons.cli.CommandLine: java.lang.String[] getArgs()>();

        l5 = lengthof setPropertyOptions;

        opt = 0;

     label03:
        if opt >= l5 goto label04;

        arg = setPropertyOptions[opt];

        virtualinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: org.apache.commons.cli.CommandLine$Builder addArg(java.lang.String)>(arg);

        opt = opt + 1;

        goto label03;

     label04:
        $stack12 = new java.util.ArrayList;

        specialinvoke $stack12.<java.util.ArrayList: void <init>()>();

        l5#10 = virtualinvoke mavenArgs.<org.apache.commons.cli.CommandLine: org.apache.commons.cli.Option[] getOptions()>();

        opt = lengthof l5#10;

        arg#12 = 0;

     label05:
        if arg#12 >= opt goto label08;

        opt#13 = l5#10[arg#12];

        $stack24 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(68);

        $stack25 = virtualinvoke opt#13.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        $stack26 = virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>($stack25);

        if $stack26 == 0 goto label06;

        interfaceinvoke $stack12.<java.util.List: boolean add(java.lang.Object)>(opt#13);

        goto label07;

     label06:
        virtualinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: org.apache.commons.cli.CommandLine$Builder addOption(org.apache.commons.cli.Option)>(opt#13);

     label07:
        arg#12 = arg#12 + 1;

        goto label05;

     label08:
        l5#10 = virtualinvoke mavenConfig.<org.apache.commons.cli.CommandLine: org.apache.commons.cli.Option[] getOptions()>();

        opt = lengthof l5#10;

        arg#12 = 0;

     label09:
        if arg#12 >= opt goto label10;

        opt#13 = l5#10[arg#12];

        virtualinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: org.apache.commons.cli.CommandLine$Builder addOption(org.apache.commons.cli.Option)>(opt#13);

        arg#12 = arg#12 + 1;

        goto label09;

     label10:
        l5#18 = interfaceinvoke $stack12.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $stack16 = interfaceinvoke l5#18.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label12;

        $stack18 = interfaceinvoke l5#18.<java.util.Iterator: java.lang.Object next()>();

        opt#13 = (org.apache.commons.cli.Option) $stack18;

        virtualinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: org.apache.commons.cli.CommandLine$Builder addOption(org.apache.commons.cli.Option)>(opt#13);

        goto label11;

     label12:
        $stack17 = virtualinvoke $stack9.<org.apache.commons.cli.CommandLine$Builder: org.apache.commons.cli.CommandLine build()>();

        return $stack17;
    }

    void logging(org.apache.maven.cli.CliRequest)
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine $stack6, $stack33, $stack51, $stack82, $stack110, $stack117, $stack122, $stack17, $stack80, $stack21, $stack28, $stack30;
        boolean $stack7, $stack8, $stack13, $stack14, $stack36, $stack65, $stack68, $stack70, $stack74, $stack77, $stack79, $stack83, $stack86, $stack90, $stack111, $stack118, $stack123, $stack124, $stack119, $stack9, $stack112, $stack20, $stack81, $stack22, $stack29, $stack31;
        MavenCli this;
        org.slf4j.ILoggerFactory $stack10, $stack11, $stack35, $stack41, $stack47, $stack24;
        org.apache.maven.cli.logging.Slf4jConfiguration slf4jConfiguration;
        org.slf4j.Logger $stack32, $stack38, $stack49, $stack27;
        java.lang.Class $stack37, $stack42, $stack25;
        java.lang.String $stack40, $stack43, $stack52, $stack53, $stack64, $stack67, $stack69, $stack73, $stack76, $stack78, $stack85, $stack89, $stack96, styleColor, $stack19, $stack26, logFile#99;
        org.apache.maven.logwrapper.MavenSlf4jWrapperFactory $stack48;
        java.lang.StringBuilder $stack93, $stack94, $stack95, $u0;
        org.apache.maven.execution.MavenExecutionRequest $stack97, $stack107;
        org.apache.maven.cli.logging.Slf4jConfiguration$Level $stack99, $stack109;
        java.io.FileNotFoundException $stack127;
        java.util.Properties $stack15;
        java.io.File logFile, $u2;
        java.lang.IllegalArgumentException $u1;
        java.io.FileOutputStream $u3;
        java.io.PrintStream $u4;
        org.apache.maven.cli.logging.Slf4jLoggerManager $u5;
        org.apache.maven.logwrapper.LogLevelRecorder $u6;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.codehaus.plexus.logging.LoggerManager $r3;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack6 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack7 = virtualinvoke $stack6.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(88);

        if $stack7 != 0 goto label01;

        $stack122 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack123 = virtualinvoke $stack122.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("debug");

        if $stack123 == 0 goto label02;

     label01:
        $stack124 = 1;

        goto label03;

     label02:
        $stack124 = 0;

     label03:
        cliRequest.<org.apache.maven.cli.CliRequest: boolean verbose> = $stack124;

        $stack8 = cliRequest.<org.apache.maven.cli.CliRequest: boolean verbose>;

        if $stack8 != 0 goto label04;

        $stack117 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack118 = virtualinvoke $stack117.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(113);

        if $stack118 == 0 goto label04;

        $stack119 = 1;

        goto label05;

     label04:
        $stack119 = 0;

     label05:
        cliRequest.<org.apache.maven.cli.CliRequest: boolean quiet> = $stack119;

        $stack9 = cliRequest.<org.apache.maven.cli.CliRequest: boolean verbose>;

        if $stack9 != 0 goto label06;

        $stack110 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack111 = virtualinvoke $stack110.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(101);

        if $stack111 == 0 goto label07;

     label06:
        $stack112 = 1;

        goto label08;

     label07:
        $stack112 = 0;

     label08:
        cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors> = $stack112;

        $stack10 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $r0.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory> = $stack10;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack11 = $r1.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        slf4jConfiguration = staticinvoke <org.apache.maven.cli.logging.Slf4jConfigurationFactory: org.apache.maven.cli.logging.Slf4jConfiguration getConfiguration(org.slf4j.ILoggerFactory)>($stack11);

        $stack13 = cliRequest.<org.apache.maven.cli.CliRequest: boolean verbose>;

        if $stack13 == 0 goto label09;

        $stack107 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        interfaceinvoke $stack107.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLoggingLevel(int)>(0);

        $stack109 = <org.apache.maven.cli.logging.Slf4jConfiguration$Level: org.apache.maven.cli.logging.Slf4jConfiguration$Level DEBUG>;

        interfaceinvoke slf4jConfiguration.<org.apache.maven.cli.logging.Slf4jConfiguration: void setRootLoggerLevel(org.apache.maven.cli.logging.Slf4jConfiguration$Level)>($stack109);

        goto label10;

     label09:
        $stack14 = cliRequest.<org.apache.maven.cli.CliRequest: boolean quiet>;

        if $stack14 == 0 goto label10;

        $stack97 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        interfaceinvoke $stack97.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLoggingLevel(int)>(3);

        $stack99 = <org.apache.maven.cli.logging.Slf4jConfiguration$Level: org.apache.maven.cli.logging.Slf4jConfiguration$Level ERROR>;

        interfaceinvoke slf4jConfiguration.<org.apache.maven.cli.logging.Slf4jConfiguration: void setRootLoggerLevel(org.apache.maven.cli.logging.Slf4jConfiguration$Level)>($stack99);

     label10:
        $stack15 = virtualinvoke cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties getUserProperties()>();

        styleColor = virtualinvoke $stack15.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("style.color", "auto");

        $stack17 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        styleColor = virtualinvoke $stack17.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("color", styleColor);

        $stack19 = "always";

        $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack20 != 0 goto label11;

        $stack64 = "yes";

        $stack65 = virtualinvoke $stack64.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack65 != 0 goto label11;

        $stack67 = "force";

        $stack68 = virtualinvoke $stack67.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack68 == 0 goto label12;

     label11:
        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void setColorEnabled(boolean)>(1);

        goto label17;

     label12:
        $stack69 = "never";

        $stack70 = virtualinvoke $stack69.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack70 != 0 goto label13;

        $stack73 = "no";

        $stack74 = virtualinvoke $stack73.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack74 != 0 goto label13;

        $stack76 = "none";

        $stack77 = virtualinvoke $stack76.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack77 == 0 goto label14;

     label13:
        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void setColorEnabled(boolean)>(0);

        goto label17;

     label14:
        $stack78 = "auto";

        $stack79 = virtualinvoke $stack78.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack79 != 0 goto label15;

        $stack85 = "tty";

        $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack86 != 0 goto label15;

        $stack89 = "if-tty";

        $stack90 = virtualinvoke $stack89.<java.lang.String: boolean equals(java.lang.Object)>(styleColor);

        if $stack90 != 0 goto label15;

        $u1 = new java.lang.IllegalArgumentException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack93 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid color configuration value \'");

        $stack94 = virtualinvoke $stack93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(styleColor);

        $stack95 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Supported are \'auto\', \'always\', \'never\'.");

        $stack96 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack96);

        throw $u1;

     label15:
        $stack80 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack81 = virtualinvoke $stack80.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(66);

        if $stack81 != 0 goto label16;

        $stack82 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack83 = virtualinvoke $stack82.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("l");

        if $stack83 == 0 goto label17;

     label16:
        staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: void setColorEnabled(boolean)>(0);

     label17:
        $stack21 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack22 = virtualinvoke $stack21.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("l");

        if $stack22 == 0 goto label21;

        $u2 = new java.io.File;

        $stack51 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack52 = virtualinvoke $stack51.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("l");

        specialinvoke $u2.<java.io.File: void <init>(java.lang.String)>($stack52);

        $stack53 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        logFile = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u2, $stack53);

     label18:
        $u4 = new java.io.PrintStream;

        $u3 = new java.io.FileOutputStream;

        specialinvoke $u3.<java.io.FileOutputStream: void <init>(java.io.File)>(logFile);

        specialinvoke $u4.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u3);

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($u4);

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>($u4);

     label19:
        goto label21;

     label20:
        $stack127 := @caughtexception;

     label21:
        interfaceinvoke slf4jConfiguration.<org.apache.maven.cli.logging.Slf4jConfiguration: void activate()>();

        $u5 = new org.apache.maven.cli.logging.Slf4jLoggerManager;

        specialinvoke $u5.<org.apache.maven.cli.logging.Slf4jLoggerManager: void <init>()>();

        $r2 = (org.apache.maven.cli.MavenCli) this;

        $r3 = (org.codehaus.plexus.logging.LoggerManager) $u5;

        $r2.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.logging.LoggerManager plexusLoggerManager> = $r3;

        $r4 = (org.apache.maven.cli.MavenCli) this;

        $stack24 = $r4.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        $stack25 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack26 = virtualinvoke $stack25.<java.lang.Class: java.lang.String getName()>();

        $stack27 = interfaceinvoke $stack24.<org.slf4j.ILoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($stack26);

        $r5 = (org.apache.maven.cli.MavenCli) this;

        $r5.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger> = $stack27;

        $stack28 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack29 = virtualinvoke $stack28.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("fos");

        if $stack29 == 0 goto label23;

        $stack33 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        logFile#99 = virtualinvoke $stack33.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("fos");

        $r6 = (org.apache.maven.cli.MavenCli) this;

        $stack35 = $r6.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        $stack36 = $stack35 instanceof org.apache.maven.logwrapper.MavenSlf4jWrapperFactory;

        if $stack36 == 0 goto label22;

        $u6 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $u6.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>(logFile#99);

        $r7 = (org.apache.maven.cli.MavenCli) this;

        $stack47 = $r7.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        $stack48 = (org.apache.maven.logwrapper.MavenSlf4jWrapperFactory) $stack47;

        interfaceinvoke $stack48.<org.apache.maven.logwrapper.MavenSlf4jWrapperFactory: void setLogLevelRecorder(org.apache.maven.logwrapper.LogLevelRecorder)>($u6);

        $r8 = (org.apache.maven.cli.MavenCli) this;

        $stack49 = $r8.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack49.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Enabled to break the build on log level {}.", logFile#99);

        goto label23;

     label22:
        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack38 = $r9.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack37 = class "Lorg/apache/maven/logwrapper/MavenSlf4jWrapperFactory;";

        $stack40 = virtualinvoke $stack37.<java.lang.Class: java.lang.String getName()>();

        $r10 = (org.apache.maven.cli.MavenCli) this;

        $stack41 = $r10.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        $stack42 = virtualinvoke $stack41.<java.lang.Object: java.lang.Class getClass()>();

        $stack43 = virtualinvoke $stack42.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $stack38.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Expected LoggerFactory to be of type \'{}\', but found \'{}\' instead. The --fail-on-severity flag will not take effect.", $stack40, $stack43);

     label23:
        $stack30 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack31 = virtualinvoke $stack30.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("debug");

        if $stack31 == 0 goto label24;

        $r11 = (org.apache.maven.cli.MavenCli) this;

        $stack32 = $r11.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack32.<org.slf4j.Logger: void warn(java.lang.String)>("The option \'--debug\' is deprecated and may be repurposed as Java debug in a future version. Use -X/--verbose instead.");

     label24:
        return;

        catch java.io.FileNotFoundException from label18 to label19 with label20;
    }

    private void version(org.apache.maven.cli.CliRequest)
    {
        org.apache.maven.cli.CliRequest cliRequest;
        boolean $stack2, $stack6;
        java.io.PrintStream $stack3;
        java.lang.String $stack4;
        org.apache.commons.cli.CommandLine $stack5;
        MavenCli this;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack2 = cliRequest.<org.apache.maven.cli.CliRequest: boolean verbose>;

        if $stack2 != 0 goto label1;

        $stack5 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack6 = virtualinvoke $stack5.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(86);

        if $stack6 == 0 goto label2;

     label1:
        $stack3 = <java.lang.System: java.io.PrintStream out>;

        $stack4 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String showVersion()>();

        virtualinvoke $stack3.<java.io.PrintStream: void println(java.lang.String)>($stack4);

     label2:
        return;
    }

    private void commands(org.apache.maven.cli.CliRequest)
    {
        org.apache.maven.cli.CliRequest cliRequest;
        boolean $stack3, $stack7, $stack11, $stack16, $stack17, $stack13;
        org.apache.maven.execution.MavenExecutionRequest $stack4, $stack8;
        java.lang.String $stack5, $stack6, $stack9, $stack10, $stack21, $stack26, $stack31, $stack36, $stack54, $stack55;
        MavenCli this;
        org.slf4j.Logger $stack14, $stack53, $stack56, $stack58, $stack59, $stack12;
        org.apache.maven.shared.utils.logging.MessageBuilder buff, $stack22, $stack27, $stack32, $stack37, $stack40, $stack43, $stack46, $stack49;
        org.apache.maven.shared.utils.logging.LoggerLevelRenderer $stack20, $stack25, $stack30, $stack35;
        java.lang.Character $stack23, $stack28, $stack33, $stack38, $stack41, $stack44, $stack47, $stack50;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack3 = cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors>;

        if $stack3 == 0 goto label1;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack59 = $r0.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack59.<org.slf4j.Logger: void info(java.lang.String)>("Error stacktraces are turned on.");

     label1:
        $stack5 = "warn";

        $stack4 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack6 = interfaceinvoke $stack4.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getGlobalChecksumPolicy()>();

        $stack7 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label2;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack58 = $r1.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack58.<org.slf4j.Logger: void info(java.lang.String)>("Disabling strict checksum verification on all artifact downloads.");

        goto label3;

     label2:
        $stack9 = "fail";

        $stack8 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack10 = interfaceinvoke $stack8.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getGlobalChecksumPolicy()>();

        $stack11 = virtualinvoke $stack9.<java.lang.String: boolean equals(java.lang.Object)>($stack10);

        if $stack11 == 0 goto label3;

        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack56 = $r2.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack56.<org.slf4j.Logger: void info(java.lang.String)>("Enabling strict checksum verification on all artifact downloads.");

     label3:
        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack12 = $r3.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $stack13 == 0 goto label6;

        $r4 = (org.apache.maven.cli.MavenCli) this;

        $stack14 = $r4.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack16 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: boolean isColorEnabled()>();

        if $stack16 == 0 goto label4;

        $stack55 = "color";

        goto label5;

     label4:
        $stack55 = "plain";

     label5:
        interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Message scheme: {}", $stack55);

        $stack17 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: boolean isColorEnabled()>();

        if $stack17 == 0 goto label6;

        buff = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.CharSequence)>("Message styles: ");

        $stack20 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.LoggerLevelRenderer level()>();

        $stack21 = interfaceinvoke $stack20.<org.apache.maven.shared.utils.logging.LoggerLevelRenderer: java.lang.String debug(java.lang.String)>("debug");

        $stack22 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.CharSequence)>($stack21);

        $stack23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack22.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack23);

        $stack25 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.LoggerLevelRenderer level()>();

        $stack26 = interfaceinvoke $stack25.<org.apache.maven.shared.utils.logging.LoggerLevelRenderer: java.lang.String info(java.lang.String)>("info");

        $stack27 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.CharSequence)>($stack26);

        $stack28 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack27.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack28);

        $stack30 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.LoggerLevelRenderer level()>();

        $stack31 = interfaceinvoke $stack30.<org.apache.maven.shared.utils.logging.LoggerLevelRenderer: java.lang.String warning(java.lang.String)>("warning");

        $stack32 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.CharSequence)>($stack31);

        $stack33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack32.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack33);

        $stack35 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.LoggerLevelRenderer level()>();

        $stack36 = interfaceinvoke $stack35.<org.apache.maven.shared.utils.logging.LoggerLevelRenderer: java.lang.String error(java.lang.String)>("error");

        $stack37 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.CharSequence)>($stack36);

        $stack38 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack37.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack38);

        $stack40 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder success(java.lang.Object)>("success");

        $stack41 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack40.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack41);

        $stack43 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder failure(java.lang.Object)>("failure");

        $stack44 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack43.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack44);

        $stack46 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>("strong");

        $stack47 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack46.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack47);

        $stack49 = interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder mojo(java.lang.Object)>("mojo");

        $stack50 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        interfaceinvoke $stack49.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.Object)>($stack50);

        interfaceinvoke buff.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder project(java.lang.Object)>("project");

        $r5 = (org.apache.maven.cli.MavenCli) this;

        $stack53 = $r5.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack54 = virtualinvoke buff.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $stack53.<org.slf4j.Logger: void debug(java.lang.String)>($stack54);

     label6:
        return;
    }

    void properties(org.apache.maven.cli.CliRequest)
    {
        org.apache.maven.cli.CliRequest cliRequest;
        java.util.Properties $stack2, $stack3;
        org.apache.commons.cli.CommandLine $stack4;
        MavenCli this;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack4 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack3 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties systemProperties>;

        $stack2 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties userProperties>;

        staticinvoke <org.apache.maven.cli.MavenCli: void populateProperties(org.apache.commons.cli.CommandLine,java.util.Properties,java.util.Properties)>($stack4, $stack3, $stack2);

        return;
    }

    org.codehaus.plexus.PlexusContainer container(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.codehaus.plexus.classworlds.ClassWorld $stack14, $stack15, $stack21, $stack24, $stack95, $u0;
        MavenCli this;
        java.util.List extClassPath, extensions;
        org.apache.maven.extension.internal.CoreExtensionEntry coreEntry, extension;
        java.util.Set $stack19, $stack32, $stack34, $stack90, $stack92;
        org.codehaus.plexus.classworlds.realm.ClassRealm containerRealm, $stack44, $stack81, coreRealm;
        org.codehaus.plexus.ContainerConfiguration $stack25, $stack26, $stack27, $stack28, $stack29, cc;
        java.lang.Object[] $stack39, $stack82;
        java.lang.Thread $stack43, $stack122;
        org.codehaus.plexus.logging.LoggerManager $stack45, $stack48;
        boolean $stack47, $stack36;
        org.apache.maven.execution.MavenExecutionRequest $stack49;
        int $stack50;
        java.lang.Object $stack51, $stack70, $stack72, $stack76, $stack78, $stack80, $stack89, $stack98;
        org.apache.maven.eventspy.internal.EventSpyDispatcher $stack52, $stack65;
        java.lang.String $stack56, $stack68;
        java.util.Properties $stack58, $stack60, $stack63;
        org.slf4j.ILoggerFactory $stack66;
        java.lang.Class $stack67;
        org.slf4j.Logger $stack69;
        org.apache.maven.Maven $stack71;
        org.apache.maven.execution.MavenExecutionRequestPopulator $stack73;
        org.apache.maven.model.building.ModelProcessor $stack74;
        java.util.Map $stack75, extension#13;
        org.apache.maven.toolchain.building.ToolchainsBuilder $stack77;
        org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher $stack79;
        java.util.Collection $stack96;
        java.util.Iterator $stack97, exports, eventSpyContext;
        java.lang.ClassLoader $stack123, $r5;
        org.codehaus.plexus.DefaultContainerConfiguration $u1;
        java.util.HashSet $u2, $u3;
        org.apache.maven.extension.internal.CoreExports $u4;
        org.apache.maven.cli.MavenCli$1 $u5;
        org.codehaus.plexus.DefaultPlexusContainer $u6;
        org.apache.maven.session.scope.internal.SessionScopeModule $u7;
        org.apache.maven.execution.scope.internal.MojoExecutionScopeModule $u8;
        org.apache.maven.cli.event.DefaultEventSpyContext $u9;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r3, $r6, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24;
        com.google.inject.Module[] $r4, $r9;
        org.codehaus.plexus.PlexusContainer $r7, $r8, $r11, $r20, $r25;
        org.apache.maven.eventspy.EventSpy$Context $r14;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack14 = cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        if $stack14 != null goto label1;

        $u0 = new org.codehaus.plexus.classworlds.ClassWorld;

        $stack122 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $stack123 = virtualinvoke $stack122.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke $u0.<org.codehaus.plexus.classworlds.ClassWorld: void <init>(java.lang.String,java.lang.ClassLoader)>("plexus.core", $stack123);

        cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld> = $u0;

     label1:
        $stack15 = cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        coreRealm = virtualinvoke $stack15.<org.codehaus.plexus.classworlds.ClassWorld: org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm(java.lang.String)>("plexus.core");

        if coreRealm != null goto label2;

        $stack95 = cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $stack96 = virtualinvoke $stack95.<org.codehaus.plexus.classworlds.ClassWorld: java.util.Collection getRealms()>();

        $stack97 = interfaceinvoke $stack96.<java.util.Collection: java.util.Iterator iterator()>();

        $stack98 = interfaceinvoke $stack97.<java.util.Iterator: java.lang.Object next()>();

        coreRealm = (org.codehaus.plexus.classworlds.realm.ClassRealm) $stack98;

     label2:
        $r0 = (org.apache.maven.cli.MavenCli) this;

        extClassPath = specialinvoke $r0.<org.apache.maven.cli.MavenCli: java.util.List parseExtClasspath(org.apache.maven.cli.CliRequest)>(cliRequest);

        coreEntry = staticinvoke <org.apache.maven.extension.internal.CoreExtensionEntry: org.apache.maven.extension.internal.CoreExtensionEntry discoverFrom(org.codehaus.plexus.classworlds.realm.ClassRealm)>(coreRealm);

        $stack19 = virtualinvoke coreEntry.<org.apache.maven.extension.internal.CoreExtensionEntry: java.util.Set getExportedArtifacts()>();

        $r1 = (org.apache.maven.cli.MavenCli) this;

        extensions = specialinvoke $r1.<org.apache.maven.cli.MavenCli: java.util.List loadCoreExtensions(org.apache.maven.cli.CliRequest,org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Set)>(cliRequest, coreRealm, $stack19);

        $stack21 = cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $r2 = (org.apache.maven.cli.MavenCli) this;

        containerRealm = specialinvoke $r2.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.realm.ClassRealm setupContainerRealm(org.codehaus.plexus.classworlds.ClassWorld,org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.List,java.util.List)>($stack21, coreRealm, extClassPath, extensions);

        $u1 = new org.codehaus.plexus.DefaultContainerConfiguration;

        specialinvoke $u1.<org.codehaus.plexus.DefaultContainerConfiguration: void <init>()>();

        $stack24 = cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $stack25 = virtualinvoke $u1.<org.codehaus.plexus.DefaultContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setClassWorld(org.codehaus.plexus.classworlds.ClassWorld)>($stack24);

        $stack26 = interfaceinvoke $stack25.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(containerRealm);

        $stack27 = interfaceinvoke $stack26.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setClassPathScanning(java.lang.String)>("index");

        $stack28 = interfaceinvoke $stack27.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setAutoWiring(boolean)>(1);

        $stack29 = interfaceinvoke $stack28.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setJSR250Lifecycle(boolean)>(1);

        cc = interfaceinvoke $stack29.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setName(java.lang.String)>("maven");

        $u2 = new java.util.HashSet;

        $stack32 = virtualinvoke coreEntry.<org.apache.maven.extension.internal.CoreExtensionEntry: java.util.Set getExportedArtifacts()>();

        specialinvoke $u2.<java.util.HashSet: void <init>(java.util.Collection)>($stack32);

        $u3 = new java.util.HashSet;

        $stack34 = virtualinvoke coreEntry.<org.apache.maven.extension.internal.CoreExtensionEntry: java.util.Set getExportedPackages()>();

        specialinvoke $u3.<java.util.HashSet: void <init>(java.util.Collection)>($stack34);

        exports = interfaceinvoke extensions.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack36 = interfaceinvoke exports.<java.util.Iterator: boolean hasNext()>();

        if $stack36 == 0 goto label4;

        $stack89 = interfaceinvoke exports.<java.util.Iterator: java.lang.Object next()>();

        extension = (org.apache.maven.extension.internal.CoreExtensionEntry) $stack89;

        $stack90 = virtualinvoke extension.<org.apache.maven.extension.internal.CoreExtensionEntry: java.util.Set getExportedArtifacts()>();

        interfaceinvoke $u2.<java.util.Set: boolean addAll(java.util.Collection)>($stack90);

        $stack92 = virtualinvoke extension.<org.apache.maven.extension.internal.CoreExtensionEntry: java.util.Set getExportedPackages()>();

        interfaceinvoke $u3.<java.util.Set: boolean addAll(java.util.Collection)>($stack92);

        goto label3;

     label4:
        $u4 = new org.apache.maven.extension.internal.CoreExports;

        specialinvoke $u4.<org.apache.maven.extension.internal.CoreExports: void <init>(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Set,java.util.Set)>(containerRealm, $u2, $u3);

        $u6 = new org.codehaus.plexus.DefaultPlexusContainer;

        $stack39 = newarray (com.google.inject.Module)[1];

        $u5 = new org.apache.maven.cli.MavenCli$1;

        $r3 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $u5.<org.apache.maven.cli.MavenCli$1: void <init>(org.apache.maven.cli.MavenCli,org.apache.maven.extension.internal.CoreExports)>($r3, $u4);

        $stack39[0] = $u5;

        $r4 = (com.google.inject.Module[]) $stack39;

        specialinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: void <init>(org.codehaus.plexus.ContainerConfiguration,com.google.inject.Module[])>(cc, $r4);

        virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm setLookupRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(null);

        $stack43 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $stack44 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm getContainerRealm()>();

        $r5 = (java.lang.ClassLoader) $stack44;

        virtualinvoke $stack43.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r5);

        $r6 = (org.apache.maven.cli.MavenCli) this;

        $stack45 = $r6.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.logging.LoggerManager plexusLoggerManager>;

        virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: void setLoggerManager(org.codehaus.plexus.logging.LoggerManager)>($stack45);

        eventSpyContext = interfaceinvoke extensions.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack47 = interfaceinvoke eventSpyContext.<java.util.Iterator: boolean hasNext()>();

        if $stack47 == 0 goto label6;

        $stack80 = interfaceinvoke eventSpyContext.<java.util.Iterator: java.lang.Object next()>();

        extension = (org.apache.maven.extension.internal.CoreExtensionEntry) $stack80;

        $stack81 = virtualinvoke extension.<org.apache.maven.extension.internal.CoreExtensionEntry: org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()>();

        $stack82 = newarray (com.google.inject.Module)[2];

        $u7 = new org.apache.maven.session.scope.internal.SessionScopeModule;

        $r7 = (org.codehaus.plexus.PlexusContainer) $u6;

        specialinvoke $u7.<org.apache.maven.session.scope.internal.SessionScopeModule: void <init>(org.codehaus.plexus.PlexusContainer)>($r7);

        $stack82[0] = $u7;

        $u8 = new org.apache.maven.execution.scope.internal.MojoExecutionScopeModule;

        $r8 = (org.codehaus.plexus.PlexusContainer) $u6;

        specialinvoke $u8.<org.apache.maven.execution.scope.internal.MojoExecutionScopeModule: void <init>(org.codehaus.plexus.PlexusContainer)>($r8);

        $stack82[1] = $u8;

        $r9 = (com.google.inject.Module[]) $stack82;

        virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.util.List discoverComponents(org.codehaus.plexus.classworlds.realm.ClassRealm,com.google.inject.Module[])>($stack81, $r9);

        goto label5;

     label6:
        $r10 = (org.apache.maven.cli.MavenCli) this;

        $r11 = (org.codehaus.plexus.PlexusContainer) $u6;

        virtualinvoke $r10.<org.apache.maven.cli.MavenCli: void customizeContainer(org.codehaus.plexus.PlexusContainer)>($r11);

        $stack48 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.logging.LoggerManager getLoggerManager()>();

        $stack49 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack50 = interfaceinvoke $stack49.<org.apache.maven.execution.MavenExecutionRequest: int getLoggingLevel()>();

        interfaceinvoke $stack48.<org.codehaus.plexus.logging.LoggerManager: void setThresholds(int)>($stack50);

        $stack51 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/eventspy/internal/EventSpyDispatcher;");

        $stack52 = (org.apache.maven.eventspy.internal.EventSpyDispatcher) $stack51;

        $r12 = (org.apache.maven.cli.MavenCli) this;

        $r12.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher> = $stack52;

        $u9 = new org.apache.maven.cli.event.DefaultEventSpyContext;

        specialinvoke $u9.<org.apache.maven.cli.event.DefaultEventSpyContext: void <init>()>();

        extension#13 = virtualinvoke $u9.<org.apache.maven.cli.event.DefaultEventSpyContext: java.util.Map getData()>();

        interfaceinvoke extension#13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("plexus", $u6);

        $stack56 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        interfaceinvoke extension#13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("workingDirectory", $stack56);

        $stack58 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties systemProperties>;

        interfaceinvoke extension#13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("systemProperties", $stack58);

        $stack60 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties userProperties>;

        interfaceinvoke extension#13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("userProperties", $stack60);

        $stack63 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.util.Properties getBuildProperties()>();

        interfaceinvoke extension#13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("versionProperties", $stack63);

        $r13 = (org.apache.maven.cli.MavenCli) this;

        $stack65 = $r13.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        $r14 = (org.apache.maven.eventspy.EventSpy$Context) $u9;

        virtualinvoke $stack65.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void init(org.apache.maven.eventspy.EventSpy$Context)>($r14);

        $r15 = (org.apache.maven.cli.MavenCli) this;

        $stack66 = $r15.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        $stack67 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack68 = virtualinvoke $stack67.<java.lang.Class: java.lang.String getName()>();

        $stack69 = interfaceinvoke $stack66.<org.slf4j.ILoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($stack68);

        $r16 = (org.apache.maven.cli.MavenCli) this;

        $r16.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger> = $stack69;

        $stack70 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/Maven;");

        $stack71 = (org.apache.maven.Maven) $stack70;

        $r17 = (org.apache.maven.cli.MavenCli) this;

        $r17.<org.apache.maven.cli.MavenCli: org.apache.maven.Maven maven> = $stack71;

        $stack72 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/execution/MavenExecutionRequestPopulator;");

        $stack73 = (org.apache.maven.execution.MavenExecutionRequestPopulator) $stack72;

        $r18 = (org.apache.maven.cli.MavenCli) this;

        $r18.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator> = $stack73;

        $r19 = (org.apache.maven.cli.MavenCli) this;

        $r20 = (org.codehaus.plexus.PlexusContainer) $u6;

        $stack74 = virtualinvoke $r19.<org.apache.maven.cli.MavenCli: org.apache.maven.model.building.ModelProcessor createModelProcessor(org.codehaus.plexus.PlexusContainer)>($r20);

        $r21 = (org.apache.maven.cli.MavenCli) this;

        $r21.<org.apache.maven.cli.MavenCli: org.apache.maven.model.building.ModelProcessor modelProcessor> = $stack74;

        $stack75 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.util.Map lookupMap(java.lang.Class)>(class "Lorg/apache/maven/cli/configuration/ConfigurationProcessor;");

        $r22 = (org.apache.maven.cli.MavenCli) this;

        $r22.<org.apache.maven.cli.MavenCli: java.util.Map configurationProcessors> = $stack75;

        $stack76 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/toolchain/building/ToolchainsBuilder;");

        $stack77 = (org.apache.maven.toolchain.building.ToolchainsBuilder) $stack76;

        $r23 = (org.apache.maven.cli.MavenCli) this;

        $r23.<org.apache.maven.cli.MavenCli: org.apache.maven.toolchain.building.ToolchainsBuilder toolchainsBuilder> = $stack77;

        $stack78 = virtualinvoke $u6.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class,java.lang.String)>(class "Lorg/sonatype/plexus/components/sec/dispatcher/SecDispatcher;", "maven");

        $stack79 = (org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher) $stack78;

        $r24 = (org.apache.maven.cli.MavenCli) this;

        $r24.<org.apache.maven.cli.MavenCli: org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher dispatcher> = $stack79;

        $r25 = (org.codehaus.plexus.PlexusContainer) $u6;

        return $r25;
    }

    private java.util.List loadCoreExtensions(org.apache.maven.cli.CliRequest, org.codehaus.plexus.classworlds.realm.ClassRealm, java.util.Set)
    {
        org.apache.maven.cli.CliRequest cliRequest;
        java.io.File $stack12, $stack14, $u0;
        boolean $stack15, $stack17;
        MavenCli this;
        org.codehaus.plexus.classworlds.ClassWorld $stack19;
        org.codehaus.plexus.ContainerConfiguration $stack20, $stack21, $stack22, $stack23, $stack24, cc;
        org.codehaus.plexus.classworlds.realm.ClassRealm containerRealm, $stack36;
        java.lang.Object[] $stack27;
        org.codehaus.plexus.logging.LoggerManager $stack31, $stack32;
        org.apache.maven.execution.MavenExecutionRequest $stack33, $stack40, request;
        int $stack34;
        java.lang.Thread $stack35;
        java.lang.Object $stack37, $stack45;
        org.apache.maven.execution.MavenExecutionRequestPopulator $stack38, $stack43;
        java.util.Map $stack39;
        org.apache.maven.cli.internal.BootstrapCoreExtensionManager resolver;
        java.util.Set providedArtifacts;
        java.util.List $stack46, l10, $stack48, $stack49, $stack50, $stack53, extensions;
        java.lang.Exception $stack51;
        org.slf4j.Logger $stack52;
        java.lang.RuntimeException $stack54;
        java.lang.Throwable $stack55;
        org.codehaus.plexus.DefaultContainerConfiguration $u1;
        org.apache.maven.cli.MavenCli$2 $u2;
        org.codehaus.plexus.DefaultPlexusContainer $u3;
        org.apache.maven.cli.MavenCli $r0, $r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        com.google.inject.Module[] $r2;
        java.lang.ClassLoader $r4;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        containerRealm := @parameter1: org.codehaus.plexus.classworlds.realm.ClassRealm;

        providedArtifacts := @parameter2: java.util.Set;

        $stack12 = cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory>;

        if $stack12 != null goto label01;

        $stack50 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack50;

     label01:
        $u0 = new java.io.File;

        $stack14 = cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory>;

        specialinvoke $u0.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack14, ".mvn/extensions.xml");

        $stack15 = virtualinvoke $u0.<java.io.File: boolean isFile()>();

        if $stack15 != 0 goto label02;

        $stack49 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack49;

     label02:
        $r0 = (org.apache.maven.cli.MavenCli) this;

        extensions = specialinvoke $r0.<org.apache.maven.cli.MavenCli: java.util.List readCoreExtensionsDescriptor(java.io.File)>($u0);

        $stack17 = interfaceinvoke extensions.<java.util.List: boolean isEmpty()>();

        if $stack17 == 0 goto label04;

        $stack48 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label03:
        return $stack48;

     label04:
        $u1 = new org.codehaus.plexus.DefaultContainerConfiguration;

        specialinvoke $u1.<org.codehaus.plexus.DefaultContainerConfiguration: void <init>()>();

        $stack19 = cliRequest.<org.apache.maven.cli.CliRequest: org.codehaus.plexus.classworlds.ClassWorld classWorld>;

        $stack20 = virtualinvoke $u1.<org.codehaus.plexus.DefaultContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setClassWorld(org.codehaus.plexus.classworlds.ClassWorld)>($stack19);

        $stack21 = interfaceinvoke $stack20.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(containerRealm);

        $stack22 = interfaceinvoke $stack21.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setClassPathScanning(java.lang.String)>("index");

        $stack23 = interfaceinvoke $stack22.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setAutoWiring(boolean)>(1);

        $stack24 = interfaceinvoke $stack23.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setJSR250Lifecycle(boolean)>(1);

        cc = interfaceinvoke $stack24.<org.codehaus.plexus.ContainerConfiguration: org.codehaus.plexus.ContainerConfiguration setName(java.lang.String)>("maven");

        $u3 = new org.codehaus.plexus.DefaultPlexusContainer;

        $stack27 = newarray (com.google.inject.Module)[1];

        $u2 = new org.apache.maven.cli.MavenCli$2;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $u2.<org.apache.maven.cli.MavenCli$2: void <init>(org.apache.maven.cli.MavenCli)>($r1);

        $stack27[0] = $u2;

        $r2 = (com.google.inject.Module[]) $stack27;

        specialinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: void <init>(org.codehaus.plexus.ContainerConfiguration,com.google.inject.Module[])>(cc, $r2);

     label05:
        virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm setLookupRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(null);

        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack31 = $r3.<org.apache.maven.cli.MavenCli: org.codehaus.plexus.logging.LoggerManager plexusLoggerManager>;

        virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: void setLoggerManager(org.codehaus.plexus.logging.LoggerManager)>($stack31);

        $stack32 = virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.logging.LoggerManager getLoggerManager()>();

        $stack33 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack34 = interfaceinvoke $stack33.<org.apache.maven.execution.MavenExecutionRequest: int getLoggingLevel()>();

        interfaceinvoke $stack32.<org.codehaus.plexus.logging.LoggerManager: void setThresholds(int)>($stack34);

        $stack35 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $stack36 = virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm getContainerRealm()>();

        $r4 = (java.lang.ClassLoader) $stack36;

        virtualinvoke $stack35.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r4);

        $stack37 = virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/execution/MavenExecutionRequestPopulator;");

        $stack38 = (org.apache.maven.execution.MavenExecutionRequestPopulator) $stack37;

        $r5 = (org.apache.maven.cli.MavenCli) this;

        $r5.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator> = $stack38;

        $stack39 = virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: java.util.Map lookupMap(java.lang.Class)>(class "Lorg/apache/maven/cli/configuration/ConfigurationProcessor;");

        $r6 = (org.apache.maven.cli.MavenCli) this;

        $r6.<org.apache.maven.cli.MavenCli: java.util.Map configurationProcessors> = $stack39;

        $r7 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r7.<org.apache.maven.cli.MavenCli: void configure(org.apache.maven.cli.CliRequest)>(cliRequest);

        $stack40 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        request = staticinvoke <org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest copy(org.apache.maven.execution.MavenExecutionRequest)>($stack40);

        $r8 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r8.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequest populateRequest(org.apache.maven.cli.CliRequest,org.apache.maven.execution.MavenExecutionRequest)>(cliRequest, request);

        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack43 = $r9.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator>;

        request = interfaceinvoke $stack43.<org.apache.maven.execution.MavenExecutionRequestPopulator: org.apache.maven.execution.MavenExecutionRequest populateDefaults(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $stack45 = virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/cli/internal/BootstrapCoreExtensionManager;");

        resolver = (org.apache.maven.cli.internal.BootstrapCoreExtensionManager) $stack45;

        $stack46 = virtualinvoke resolver.<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: java.util.List loadCoreExtensions(org.apache.maven.execution.MavenExecutionRequest,java.util.Set,java.util.List)>(request, providedArtifacts, extensions);

        l10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack46);

     label06:
        $r10 = (org.apache.maven.cli.MavenCli) this;

        $r10.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator> = null;

        virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: void dispose()>();

     label07:
        return l10;

     label08:
        $stack55 := @caughtexception;

     label09:
        $r11 = (org.apache.maven.cli.MavenCli) this;

        $r11.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator> = null;

        virtualinvoke $u3.<org.codehaus.plexus.DefaultPlexusContainer: void dispose()>();

        throw $stack55;

     label10:
        $stack54 := @caughtexception;

        throw $stack54;

     label11:
        $stack51 := @caughtexception;

        $r12 = (org.apache.maven.cli.MavenCli) this;

        $stack52 = $r12.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack52.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to read extensions descriptor from \'{}\'", $u0, $stack51);

        $stack53 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack53;

        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.RuntimeException from label02 to label03 with label10;
        catch java.lang.RuntimeException from label04 to label07 with label10;
        catch java.lang.RuntimeException from label08 to label10 with label10;
        catch java.lang.Exception from label02 to label03 with label11;
        catch java.lang.Exception from label04 to label07 with label11;
        catch java.lang.Exception from label08 to label10 with label11;
    }

    private java.util.List readCoreExtensionsDescriptor(java.io.File) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException
    {
        org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader $stack6;
        java.io.BufferedInputStream $stack7;
        java.io.FileInputStream $stack8;
        java.io.File extensionsFile;
        org.apache.maven.cli.internal.extension.model.CoreExtensions $stack9;
        java.lang.Throwable $stack11, $stack12;
        MavenCli this;
        java.util.List l4;

        this := @this: MavenCli;

        extensionsFile := @parameter0: java.io.File;

        $stack6 = new org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader;

        specialinvoke $stack6.<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: void <init>()>();

        $stack7 = new java.io.BufferedInputStream;

        $stack8 = new java.io.FileInputStream;

        specialinvoke $stack8.<java.io.FileInputStream: void <init>(java.io.File)>(extensionsFile);

        specialinvoke $stack7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($stack8);

     label1:
        $stack9 = virtualinvoke $stack6.<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtensions read(java.io.InputStream)>($stack7);

        l4 = virtualinvoke $stack9.<org.apache.maven.cli.internal.extension.model.CoreExtensions: java.util.List getExtensions()>();

     label2:
        virtualinvoke $stack7.<java.io.InputStream: void close()>();

        return l4;

     label3:
        $stack12 := @caughtexception;

     label4:
        virtualinvoke $stack7.<java.io.InputStream: void close()>();

     label5:
        goto label7;

     label6:
        $stack11 := @caughtexception;

        virtualinvoke $stack12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack11);

     label7:
        throw $stack12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private org.codehaus.plexus.classworlds.realm.ClassRealm setupContainerRealm(org.codehaus.plexus.classworlds.ClassWorld, org.codehaus.plexus.classworlds.realm.ClassRealm, java.util.List, java.util.List) throws java.lang.Exception
    {
        java.util.List extClassPath, extensions, $stack19;
        boolean $stack12, $stack21, $stack26, $stack27, $stack37, $stack18;
        org.codehaus.plexus.classworlds.ClassWorld classWorld;
        org.codehaus.plexus.classworlds.realm.ClassRealm extRealm, coreRealm, realm;
        MavenCli this;
        org.slf4j.Logger $stack14, $stack33;
        java.lang.String $stack16, $stack29, exportedPackage;
        java.lang.Object $stack22, $stack30, $stack32;
        java.util.Set exportedPackages;
        java.util.Iterator l10, l6;
        java.net.URI $stack34;
        java.net.URL $stack35;
        java.io.File file;
        org.apache.maven.extension.internal.CoreExtensionEntry file#8;
        org.apache.maven.cli.MavenCli $r0, $r1;
        java.lang.ClassLoader $r2, $r3;

        this := @this: MavenCli;

        classWorld := @parameter0: org.codehaus.plexus.classworlds.ClassWorld;

        coreRealm := @parameter1: org.codehaus.plexus.classworlds.realm.ClassRealm;

        extClassPath := @parameter2: java.util.List;

        extensions := @parameter3: java.util.List;

        $stack12 = interfaceinvoke extClassPath.<java.util.List: boolean isEmpty()>();

        if $stack12 == 0 goto label1;

        $stack37 = interfaceinvoke extensions.<java.util.List: boolean isEmpty()>();

        if $stack37 != 0 goto label9;

     label1:
        extRealm = virtualinvoke classWorld.<org.codehaus.plexus.classworlds.ClassWorld: org.codehaus.plexus.classworlds.realm.ClassRealm newRealm(java.lang.String,java.lang.ClassLoader)>("maven.ext", null);

        virtualinvoke extRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void setParentRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)>(coreRealm);

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack14 = $r0.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack16 = virtualinvoke extRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: java.lang.String getId()>();

        interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Populating class realm \'{}\'", $stack16);

        l6 = interfaceinvoke extClassPath.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack18 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label3;

        $stack32 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        file = (java.io.File) $stack32;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack33 = $r1.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack33.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("  included \'{}\'", file);

        $stack34 = virtualinvoke file.<java.io.File: java.net.URI toURI()>();

        $stack35 = virtualinvoke $stack34.<java.net.URI: java.net.URL toURL()>();

        virtualinvoke extRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void addURL(java.net.URL)>($stack35);

        goto label2;

     label3:
        $stack19 = staticinvoke <org.apache.maven.cli.MavenCli: java.util.List reverse(java.util.List)>(extensions);

        l6 = interfaceinvoke $stack19.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack21 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label8;

        $stack22 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        file#8 = (org.apache.maven.extension.internal.CoreExtensionEntry) $stack22;

        exportedPackages = virtualinvoke file#8.<org.apache.maven.extension.internal.CoreExtensionEntry: java.util.Set getExportedPackages()>();

        realm = virtualinvoke file#8.<org.apache.maven.extension.internal.CoreExtensionEntry: org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()>();

        l10 = interfaceinvoke exportedPackages.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $stack26 = interfaceinvoke l10.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label6;

        $stack30 = interfaceinvoke l10.<java.util.Iterator: java.lang.Object next()>();

        exportedPackage = (java.lang.String) $stack30;

        $r2 = (java.lang.ClassLoader) realm;

        virtualinvoke extRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void importFrom(java.lang.ClassLoader,java.lang.String)>($r2, exportedPackage);

        goto label5;

     label6:
        $stack27 = interfaceinvoke exportedPackages.<java.util.Set: boolean isEmpty()>();

        if $stack27 == 0 goto label7;

        $stack29 = virtualinvoke realm.<org.codehaus.plexus.classworlds.realm.ClassRealm: java.lang.String getId()>();

        $r3 = (java.lang.ClassLoader) realm;

        virtualinvoke extRealm.<org.codehaus.plexus.classworlds.realm.ClassRealm: void importFrom(java.lang.ClassLoader,java.lang.String)>($r3, $stack29);

     label7:
        goto label4;

     label8:
        return extRealm;

     label9:
        return coreRealm;
    }

    private static java.util.List reverse(java.util.List)
    {
        java.util.ArrayList $stack2;
        java.util.List list;

        list := @parameter0: java.util.List;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>(java.util.Collection)>(list);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($stack2);

        return $stack2;
    }

    private java.util.List parseExtClasspath(org.apache.maven.cli.CliRequest)
    {
        org.apache.maven.cli.CliRequest cliRequest;
        java.util.Properties $stack9, $stack23;
        boolean $stack12;
        java.lang.String $stack13, jar, $stack17, extClassPath;
        java.lang.String[] l4;
        int l5, l6;
        java.io.File file, $u1;
        MavenCli this;
        org.slf4j.Logger $stack19;
        java.util.ArrayList $u0;
        org.apache.maven.cli.MavenCli $r0;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack9 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties userProperties>;

        extClassPath = virtualinvoke $stack9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("maven.ext.class.path");

        if extClassPath != null goto label1;

        $stack23 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties systemProperties>;

        extClassPath = virtualinvoke $stack23.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("maven.ext.class.path");

     label1:
        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $stack12 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>(extClassPath);

        if $stack12 == 0 goto label3;

        $stack13 = <java.io.File: java.lang.String pathSeparator>;

        l4 = staticinvoke <org.codehaus.plexus.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(extClassPath, $stack13);

        l5 = lengthof l4;

        l6 = 0;

     label2:
        if l6 >= l5 goto label3;

        jar = l4[l6];

        $u1 = new java.io.File;

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>(jar);

        $stack17 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        file = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u1, $stack17);

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack19 = $r0.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("  included \'{}\'", file);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(file);

        l6 = l6 + 1;

        goto label2;

     label3:
        return $u0;
    }

    private void encryption(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine $stack9, $stack11, $stack13, $stack52;
        boolean $stack10, $stack12, $stack17;
        MavenCli this;
        org.sonatype.plexus.components.sec.dispatcher.model.SettingsSecurity sec;
        java.lang.String masterPasswd, $stack23, $stack29, $stack33, $stack35, passwd, $stack56, cons#34, password#41, master;
        java.io.PrintStream $stack22, $stack55;
        java.lang.StringBuilder $stack27, $stack28, $stack34, $stack36, $u2, $u3;
        java.lang.Object[] $stack45, $stack59;
        java.io.Console cons;
        char[] $stack60, $stack46;
        org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher $stack15;
        org.sonatype.plexus.components.cipher.DefaultPlexusCipher $u0, $u5;
        org.apache.maven.cli.MavenCli$ExitException $u1, $u6;
        java.lang.IllegalStateException $u4;
        java.lang.Throwable $r0, $r2;
        org.apache.maven.cli.MavenCli $r1;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack9 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack10 = virtualinvoke $stack9.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("emp");

        if $stack10 == 0 goto label04;

        $stack52 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        passwd = virtualinvoke $stack52.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("emp");

        if passwd != null goto label03;

        cons = staticinvoke <java.lang.System: java.io.Console console()>();

        if cons != null goto label01;

        $stack60 = null;

        goto label02;

     label01:
        $stack59 = newarray (java.lang.Object)[0];

        $stack60 = virtualinvoke cons.<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>("Master password: ", $stack59);

     label02:
        if $stack60 == null goto label03;

        passwd = staticinvoke <java.lang.String: java.lang.String copyValueOf(char[])>($stack60);

        staticinvoke <java.util.Arrays: void fill(char[],char)>($stack60, 32);

     label03:
        $u0 = new org.sonatype.plexus.components.cipher.DefaultPlexusCipher;

        specialinvoke $u0.<org.sonatype.plexus.components.cipher.DefaultPlexusCipher: void <init>()>();

        $stack55 = <java.lang.System: java.io.PrintStream out>;

        $stack56 = virtualinvoke $u0.<org.sonatype.plexus.components.cipher.DefaultPlexusCipher: java.lang.String encryptAndDecorate(java.lang.String,java.lang.String)>(passwd, "settings.security");

        virtualinvoke $stack55.<java.io.PrintStream: void println(java.lang.String)>($stack56);

        $u1 = new org.apache.maven.cli.MavenCli$ExitException;

        specialinvoke $u1.<org.apache.maven.cli.MavenCli$ExitException: void <init>(int)>(0);

        $r0 = (java.lang.Throwable) $u1;

        throw $r0;

     label04:
        $stack11 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack12 = virtualinvoke $stack11.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("ep");

        if $stack12 == 0 goto label11;

        $stack13 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        passwd = virtualinvoke $stack13.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("ep");

        if passwd != null goto label07;

        cons = staticinvoke <java.lang.System: java.io.Console console()>();

        if cons != null goto label05;

        $stack46 = null;

        goto label06;

     label05:
        $stack45 = newarray (java.lang.Object)[0];

        $stack46 = virtualinvoke cons.<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>("Password: ", $stack45);

     label06:
        if $stack46 == null goto label07;

        passwd = staticinvoke <java.lang.String: java.lang.String copyValueOf(char[])>($stack46);

        staticinvoke <java.util.Arrays: void fill(char[],char)>($stack46, 32);

     label07:
        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack15 = $r1.<org.apache.maven.cli.MavenCli: org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher dispatcher>;

        cons#34 = virtualinvoke $stack15.<org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher: java.lang.String getConfigurationFile()>();

        $stack17 = virtualinvoke cons#34.<java.lang.String: boolean startsWith(java.lang.String)>("~");

        if $stack17 == 0 goto label08;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack33 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $stack34 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke cons#34.<java.lang.String: java.lang.String substring(int)>(1);

        $stack36 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

        cons#34 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        password#41 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("settings.security", cons#34);

        master = null;

        sec = staticinvoke <org.sonatype.plexus.components.sec.dispatcher.SecUtil: org.sonatype.plexus.components.sec.dispatcher.model.SettingsSecurity read(java.lang.String,boolean)>(password#41, 1);

        if sec == null goto label09;

        master = virtualinvoke sec.<org.sonatype.plexus.components.sec.dispatcher.model.SettingsSecurity: java.lang.String getMaster()>();

     label09:
        if master != null goto label10;

        $u4 = new java.lang.IllegalStateException;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack27 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Master password is not set in the setting security file: ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(password#41);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack29);

        throw $u4;

     label10:
        $u5 = new org.sonatype.plexus.components.cipher.DefaultPlexusCipher;

        specialinvoke $u5.<org.sonatype.plexus.components.cipher.DefaultPlexusCipher: void <init>()>();

        masterPasswd = virtualinvoke $u5.<org.sonatype.plexus.components.cipher.DefaultPlexusCipher: java.lang.String decryptDecorated(java.lang.String,java.lang.String)>(master, "settings.security");

        $stack22 = <java.lang.System: java.io.PrintStream out>;

        $stack23 = virtualinvoke $u5.<org.sonatype.plexus.components.cipher.DefaultPlexusCipher: java.lang.String encryptAndDecorate(java.lang.String,java.lang.String)>(passwd, masterPasswd);

        virtualinvoke $stack22.<java.io.PrintStream: void println(java.lang.String)>($stack23);

        $u6 = new org.apache.maven.cli.MavenCli$ExitException;

        specialinvoke $u6.<org.apache.maven.cli.MavenCli$ExitException: void <init>(int)>(0);

        $r2 = (java.lang.Throwable) $u6;

        throw $r2;

     label11:
        return;
    }

    private void repository(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine $stack2;
        boolean $stack3, $stack6;
        org.apache.maven.execution.MavenExecutionRequest $stack4;
        MavenCli this;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack2 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack3 = virtualinvoke $stack2.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("llr");

        if $stack3 != 0 goto label1;

        $stack6 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("maven.legacyLocalRepo");

        if $stack6 == 0 goto label2;

     label1:
        $stack4 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        interfaceinvoke $stack4.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setUseLegacyLocalRepository(boolean)>(1);

     label2:
        return;
    }

    private int execute(org.apache.maven.cli.CliRequest) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        MavenCli this;
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.maven.execution.MavenExecutionRequest $stack10, request, $stack13, $stack85, $stack34;
        org.apache.maven.execution.MavenExecutionRequestPopulator $stack11;
        org.eclipse.aether.RepositoryCache $stack14, $r1;
        org.apache.maven.eventspy.internal.EventSpyDispatcher $stack15, $stack18, $stack19;
        org.apache.maven.Maven $stack16;
        org.apache.maven.execution.MavenExecutionResult result;
        boolean $stack20, $stack26, $stack28, $stack30, $stack31, $stack32, $stack33, $stack45, $stack56, $stack78, $stack79, $stack37;
        java.util.List $stack24, sortedProjects#6;
        org.slf4j.Logger $stack27, $stack29, $stack38, $stack52, $stack53, $stack59, $stack66, $stack71;
        java.util.function.Function $stack41;
        java.util.Comparator $stack42;
        java.lang.Object $stack43, $stack44, $stack58, $stack62, $stack64, $stack76;
        java.lang.StringBuilder $stack49, $stack50, $u4;
        java.lang.String $stack51, summary#8, $stack35, $stack36;
        java.util.Set $stack54;
        org.apache.maven.shared.utils.logging.MessageBuilder $stack61, $stack63, $stack68, $stack69, $stack73, $stack74;
        org.apache.maven.lifecycle.LifecycleExecutionException $stack81;
        org.apache.maven.project.MavenProject $stack82, exception#7;
        java.util.Iterator sortedProjects;
        java.lang.Throwable exception;
        org.apache.maven.exception.ExceptionSummary summary;
        java.util.Map$Entry exception#5;
        org.eclipse.aether.DefaultRepositoryCache $u0;
        org.apache.maven.exception.DefaultExceptionHandler $u1;
        java.util.LinkedHashMap $u2;
        java.util.ArrayList $u3;
        org.apache.maven.cli.MavenCli $r0, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.apache.maven.exception.ExceptionHandler $r6;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack11 = $r0.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator>;

        $stack10 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        request = interfaceinvoke $stack11.<org.apache.maven.execution.MavenExecutionRequestPopulator: org.apache.maven.execution.MavenExecutionRequest populateDefaults(org.apache.maven.execution.MavenExecutionRequest)>($stack10);

        $stack13 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack14 = interfaceinvoke $stack13.<org.apache.maven.execution.MavenExecutionRequest: org.eclipse.aether.RepositoryCache getRepositoryCache()>();

        if $stack14 != null goto label01;

        $stack85 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $u0 = new org.eclipse.aether.DefaultRepositoryCache;

        specialinvoke $u0.<org.eclipse.aether.DefaultRepositoryCache: void <init>()>();

        $r1 = (org.eclipse.aether.RepositoryCache) $u0;

        interfaceinvoke $stack85.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setRepositoryCache(org.eclipse.aether.RepositoryCache)>($r1);

     label01:
        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack15 = $r2.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        virtualinvoke $stack15.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>(request);

        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack16 = $r3.<org.apache.maven.cli.MavenCli: org.apache.maven.Maven maven>;

        result = interfaceinvoke $stack16.<org.apache.maven.Maven: org.apache.maven.execution.MavenExecutionResult execute(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r4 = (org.apache.maven.cli.MavenCli) this;

        $stack18 = $r4.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        virtualinvoke $stack18.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>(result);

        $r5 = (org.apache.maven.cli.MavenCli) this;

        $stack19 = $r5.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        virtualinvoke $stack19.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void close()>();

        $stack20 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: boolean hasExceptions()>();

        if $stack20 == 0 goto label12;

        $u1 = new org.apache.maven.exception.DefaultExceptionHandler;

        specialinvoke $u1.<org.apache.maven.exception.DefaultExceptionHandler: void <init>()>();

        $u2 = new java.util.LinkedHashMap;

        specialinvoke $u2.<java.util.LinkedHashMap: void <init>()>();

        $u3 = new java.util.ArrayList;

        specialinvoke $u3.<java.util.ArrayList: void <init>()>();

        $stack24 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: java.util.List getExceptions()>();

        sortedProjects = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack26 = interfaceinvoke sortedProjects.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label04;

        $stack76 = interfaceinvoke sortedProjects.<java.util.Iterator: java.lang.Object next()>();

        exception = (java.lang.Throwable) $stack76;

        $r6 = (org.apache.maven.exception.ExceptionHandler) $u1;

        summary = interfaceinvoke $r6.<org.apache.maven.exception.ExceptionHandler: org.apache.maven.exception.ExceptionSummary handleException(java.lang.Throwable)>(exception);

        $stack78 = cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors>;

        $r7 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r7.<org.apache.maven.cli.MavenCli: void logSummary(org.apache.maven.exception.ExceptionSummary,java.util.Map,java.lang.String,boolean)>(summary, $u2, "", $stack78);

        $stack79 = exception instanceof org.apache.maven.lifecycle.LifecycleExecutionException;

        if $stack79 == 0 goto label03;

        $stack81 = (org.apache.maven.lifecycle.LifecycleExecutionException) exception;

        $stack82 = virtualinvoke $stack81.<org.apache.maven.lifecycle.LifecycleExecutionException: org.apache.maven.project.MavenProject getProject()>();

        interfaceinvoke $u3.<java.util.List: boolean add(java.lang.Object)>($stack82);

     label03:
        goto label02;

     label04:
        $r8 = (org.apache.maven.cli.MavenCli) this;

        $stack27 = $r8.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack27.<org.slf4j.Logger: void error(java.lang.String)>("");

        $stack28 = cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors>;

        if $stack28 != 0 goto label05;

        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack71 = $r9.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack73 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack74 = interfaceinvoke $stack73.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>("-e");

        interfaceinvoke $stack71.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("To see the full stack trace of the errors, re-run Maven with the \'{}\' switch", $stack74);

     label05:
        $r10 = (org.apache.maven.cli.MavenCli) this;

        $stack29 = $r10.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack30 = interfaceinvoke $stack29.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $stack30 != 0 goto label06;

        $r11 = (org.apache.maven.cli.MavenCli) this;

        $stack66 = $r11.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack68 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack69 = interfaceinvoke $stack68.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>("-X");

        interfaceinvoke $stack66.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Re-run Maven using the \'{}\' switch to enable verbose output", $stack69);

     label06:
        $stack31 = interfaceinvoke $u2.<java.util.Map: boolean isEmpty()>();

        if $stack31 != 0 goto label08;

        $r12 = (org.apache.maven.cli.MavenCli) this;

        $stack52 = $r12.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack52.<org.slf4j.Logger: void error(java.lang.String)>("");

        $r13 = (org.apache.maven.cli.MavenCli) this;

        $stack53 = $r13.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack53.<org.slf4j.Logger: void error(java.lang.String)>("For more information about the errors and possible solutions, please read the following articles:");

        $stack54 = interfaceinvoke $u2.<java.util.Map: java.util.Set entrySet()>();

        sortedProjects = interfaceinvoke $stack54.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack56 = interfaceinvoke sortedProjects.<java.util.Iterator: boolean hasNext()>();

        if $stack56 == 0 goto label08;

        $stack58 = interfaceinvoke sortedProjects.<java.util.Iterator: java.lang.Object next()>();

        exception#5 = (java.util.Map$Entry) $stack58;

        $r14 = (org.apache.maven.cli.MavenCli) this;

        $stack59 = $r14.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack61 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack62 = interfaceinvoke exception#5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack63 = interfaceinvoke $stack61.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>($stack62);

        $stack64 = interfaceinvoke exception#5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $stack59.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("{} {}", $stack63, $stack64);

        goto label07;

     label08:
        $stack32 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: boolean canResume()>();

        if $stack32 == 0 goto label09;

        $r15 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r15.<org.apache.maven.cli.MavenCli: void logBuildResumeHint(java.lang.String)>("mvn <args> -r");

        goto label10;

     label09:
        $stack33 = interfaceinvoke $u3.<java.util.List: boolean isEmpty()>();

        if $stack33 != 0 goto label10;

        sortedProjects#6 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: java.util.List getTopologicallySortedProjects()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(sortedProjects#6);

        $stack41 = staticinvoke <MavenCli$indexOf__310: java.util.function.Function bootstrap$(java.util.List)>(sortedProjects#6);

        $stack42 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($stack41);

        interfaceinvoke $u3.<java.util.List: void sort(java.util.Comparator)>($stack42);

        $stack43 = interfaceinvoke $u3.<java.util.List: java.lang.Object get(int)>(0);

        exception#7 = (org.apache.maven.project.MavenProject) $stack43;

        $stack44 = interfaceinvoke sortedProjects#6.<java.util.List: java.lang.Object get(int)>(0);

        $stack45 = virtualinvoke exception#7.<org.apache.maven.project.MavenProject: boolean equals(java.lang.Object)>($stack44);

        if $stack45 != 0 goto label10;

        $r16 = (org.apache.maven.cli.MavenCli) this;

        summary#8 = virtualinvoke $r16.<org.apache.maven.cli.MavenCli: java.lang.String getResumeFromSelector(java.util.List,org.apache.maven.project.MavenProject)>(sortedProjects#6, exception#7);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mvn <args> -rf ");

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(summary#8);

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r17.<org.apache.maven.cli.MavenCli: void logBuildResumeHint(java.lang.String)>($stack51);

     label10:
        $stack35 = "FAIL_NEVER";

        $stack34 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack36 = interfaceinvoke $stack34.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getReactorFailureBehavior()>();

        $stack37 = virtualinvoke $stack35.<java.lang.String: boolean equals(java.lang.Object)>($stack36);

        if $stack37 == 0 goto label11;

        $r18 = (org.apache.maven.cli.MavenCli) this;

        $stack38 = $r18.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack38.<org.slf4j.Logger: void info(java.lang.String)>("Build failures were ignored.");

        return 0;

     label11:
        return 1;

     label12:
        return 0;
    }

    private void logBuildResumeHint(java.lang.String)
    {
        MavenCli this;
        org.slf4j.Logger $stack2, $stack3, $stack4;
        org.apache.maven.shared.utils.logging.MessageBuilder $stack5, $stack6, $stack7;
        java.lang.String resumeBuildHint, $stack8;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2;

        this := @this: MavenCli;

        resumeBuildHint := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack2 = $r0.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack2.<org.slf4j.Logger: void error(java.lang.String)>("");

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack3 = $r1.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack3.<org.slf4j.Logger: void error(java.lang.String)>("After correcting the problems, you can resume the build with the command");

        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack4 = $r2.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack5 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack6 = interfaceinvoke $stack5.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder a(java.lang.CharSequence)>("  ");

        $stack7 = interfaceinvoke $stack6.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>(resumeBuildHint);

        $stack8 = virtualinvoke $stack7.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $stack4.<org.slf4j.Logger: void error(java.lang.String)>($stack8);

        return;
    }

    java.lang.String getResumeFromSelector(java.util.List, org.apache.maven.project.MavenProject)
    {
        java.util.List mavenProjects;
        java.util.stream.Stream $stack4, $stack6;
        org.apache.maven.project.MavenProject firstFailedProject;
        java.util.function.Predicate $stack5;
        long $stack7;
        byte $stack8;
        java.lang.StringBuilder $stack9, $stack10, $stack12, $stack14, $stack16, $stack17, $stack19;
        java.lang.String $stack11, $stack13, $stack15, $stack18, $stack20;
        MavenCli this;
        boolean $stack21;

        this := @this: MavenCli;

        mavenProjects := @parameter0: java.util.List;

        firstFailedProject := @parameter1: org.apache.maven.project.MavenProject;

        $stack4 = interfaceinvoke mavenProjects.<java.util.List: java.util.stream.Stream stream()>();

        $stack5 = staticinvoke <MavenCli$lambda_getResumeFromSelector_0__311: java.util.function.Predicate bootstrap$(org.apache.maven.project.MavenProject)>(firstFailedProject);

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack5);

        $stack7 = interfaceinvoke $stack6.<java.util.stream.Stream: long count()>();

        $stack8 = $stack7 cmp 1L;

        if $stack8 <= 0 goto label1;

        $stack21 = 1;

        goto label2;

     label1:
        $stack21 = 0;

     label2:
        if $stack21 == 0 goto label3;

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke firstFailedProject.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack18 = virtualinvoke firstFailedProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack20;

     label3:
        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack11 = virtualinvoke firstFailedProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack13;
    }

    private void logSummary(org.apache.maven.exception.ExceptionSummary, java.util.Map, java.lang.String, boolean)
    {
        org.apache.maven.exception.ExceptionSummary summary, line#56;
        java.lang.String $stack13, $stack30, $stack63, $stack87, $stack98, indent, referenceKey, msg, currentColor, line, nextColor, $stack39, $stack58, indent#54;
        boolean $stack14, $stack25, showErrors, $stack35, $stack52, $stack64, $stack16, $stack40;
        java.lang.String[] lines;
        java.lang.StringBuilder $stack20, $stack21, $stack29, $stack31, $stack38, $stack41, $stack70, $stack71, $stack74, $stack81, $stack82, $stack85, $stack92, $stack95, $stack96, $stack37, $u0, $u1, $u2, $u3, $u4, $u5;
        java.util.List $stack23;
        java.lang.Object $stack26, $stack88;
        MavenCli this;
        java.util.Map references;
        java.util.regex.Pattern $stack33;
        java.util.regex.Matcher matcher;
        int $stack43, $stack44, $stack68, $stack93, $stack94, i, $stack18;
        org.slf4j.Logger $stack45, $stack48;
        java.lang.Throwable $stack49, $stack51;
        org.apache.maven.shared.utils.logging.MessageBuilder $stack72, $stack73, $stack83, $stack84;
        java.util.Iterator i#55;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2;

        this := @this: MavenCli;

        summary := @parameter0: org.apache.maven.exception.ExceptionSummary;

        references := @parameter1: java.util.Map;

        indent := @parameter2: java.lang.String;

        showErrors := @parameter3: boolean;

        referenceKey = "";

        $stack13 = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.lang.String getReference()>();

        $stack14 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack13);

        if $stack14 == 0 goto label01;

        $stack87 = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.lang.String getReference()>();

        $stack88 = interfaceinvoke references.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack87);

        referenceKey = (java.lang.String) $stack88;

        if referenceKey != null goto label01;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack92 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Help ");

        $stack93 = interfaceinvoke references.<java.util.Map: int size()>();

        $stack94 = $stack93 + 1;

        $stack95 = virtualinvoke $stack92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack94);

        $stack96 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        referenceKey = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack98 = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.lang.String getReference()>();

        interfaceinvoke references.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack98, referenceKey);

     label01:
        msg = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.lang.String getMessage()>();

        $stack16 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>(referenceKey);

        if $stack16 == 0 goto label03;

        $stack68 = virtualinvoke msg.<java.lang.String: int indexOf(int)>(10);

        if $stack68 >= 0 goto label02;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack81 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $stack82 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $stack83 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack84 = interfaceinvoke $stack83.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>(referenceKey);

        $stack85 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack84);

        msg = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label03;

     label02:
        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack70 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n-> ");

        $stack72 = staticinvoke <org.apache.maven.shared.utils.logging.MessageUtils: org.apache.maven.shared.utils.logging.MessageBuilder buffer()>();

        $stack73 = interfaceinvoke $stack72.<org.apache.maven.shared.utils.logging.MessageBuilder: org.apache.maven.shared.utils.logging.MessageBuilder strong(java.lang.Object)>(referenceKey);

        $stack74 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack73);

        msg = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        lines = virtualinvoke msg.<java.lang.String: java.lang.String[] split(java.lang.String)>("(\r\n)|(\r)|(\n)");

        currentColor = "";

        i = 0;

     label04:
        $stack18 = lengthof lines;

        if i >= $stack18 goto label11;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(currentColor);

        $stack30 = lines[i];

        $stack31 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack30);

        line = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack33 = <org.apache.maven.cli.MavenCli: java.util.regex.Pattern LAST_ANSI_SEQUENCE>;

        matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(line);

        nextColor = "";

        $stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean find()>();

        if $stack35 == 0 goto label05;

        nextColor = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $stack63 = "\u001b[m";

        $stack64 = virtualinvoke $stack63.<java.lang.String: boolean equals(java.lang.Object)>(nextColor);

        if $stack64 == 0 goto label05;

        nextColor = "";

     label05:
        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indent);

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(line);

        $stack39 = "";

        $stack40 = virtualinvoke $stack39.<java.lang.String: boolean equals(java.lang.Object)>(nextColor);

        if $stack40 == 0 goto label06;

        $stack58 = "";

        goto label07;

     label06:
        $stack58 = "\u001b[m";

     label07:
        $stack41 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack58);

        line = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack43 = lengthof lines;

        $stack44 = $stack43 - 1;

        if i != $stack44 goto label09;

        if showErrors != 0 goto label08;

        $stack51 = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.lang.Throwable getException()>();

        $stack52 = $stack51 instanceof org.apache.maven.InternalErrorException;

        if $stack52 == 0 goto label09;

     label08:
        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack48 = $r0.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack49 = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.lang.Throwable getException()>();

        interfaceinvoke $stack48.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>(line, $stack49);

        goto label10;

     label09:
        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack45 = $r1.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack45.<org.slf4j.Logger: void error(java.lang.String)>(line);

     label10:
        currentColor = nextColor;

        i = i + 1;

        goto label04;

     label11:
        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indent);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        indent#54 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack23 = virtualinvoke summary.<org.apache.maven.exception.ExceptionSummary: java.util.List getChildren()>();

        i#55 = interfaceinvoke $stack23.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $stack25 = interfaceinvoke i#55.<java.util.Iterator: boolean hasNext()>();

        if $stack25 == 0 goto label13;

        $stack26 = interfaceinvoke i#55.<java.util.Iterator: java.lang.Object next()>();

        line#56 = (org.apache.maven.exception.ExceptionSummary) $stack26;

        $r2 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r2.<org.apache.maven.cli.MavenCli: void logSummary(org.apache.maven.exception.ExceptionSummary,java.util.Map,java.lang.String,boolean)>(line#56, references, indent#54, showErrors);

        goto label12;

     label13:
        return;
    }

    private void configure(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        org.apache.maven.cli.CliRequest cliRequest;
        MavenCli this;
        org.apache.maven.eventspy.internal.EventSpyDispatcher $stack8;
        org.apache.maven.execution.MavenExecutionRequest $stack9;
        java.util.Map $stack11, $stack19, $stack37, $stack46;
        int $stack12, userSuppliedConfigurationProcessorCount;
        java.lang.Object[] $stack14, $stack30;
        java.lang.Integer $stack17;
        java.lang.String $stack18, $stack24, $stack34, $stack35, hint, configurationProcessor;
        java.util.Set $stack20, $stack38;
        boolean $stack22, $stack27, $stack40, $stack43;
        java.lang.Object $stack25, $stack26, $stack29, $stack41, $stack42, $stack45, $stack47;
        org.apache.maven.cli.configuration.ConfigurationProcessor configurationProcessor, $stack48;
        java.lang.Class $stack33;
        java.util.Iterator sb, entry#6;
        java.util.Map$Entry entry, hint#7;
        java.lang.StringBuilder $u0;
        java.lang.Exception $u1;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r3, $r4;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack9 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack8 = $r0.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        interfaceinvoke $stack9.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setEventSpyDispatcher(org.apache.maven.eventspy.internal.EventSpyDispatcher)>($stack8);

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack11 = $r1.<org.apache.maven.cli.MavenCli: java.util.Map configurationProcessors>;

        $stack12 = interfaceinvoke $stack11.<java.util.Map: int size()>();

        userSuppliedConfigurationProcessorCount = $stack12 - 1;

        if userSuppliedConfigurationProcessorCount != 0 goto label1;

        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack46 = $r2.<org.apache.maven.cli.MavenCli: java.util.Map configurationProcessors>;

        $stack47 = interfaceinvoke $stack46.<java.util.Map: java.lang.Object get(java.lang.Object)>("settings");

        $stack48 = (org.apache.maven.cli.configuration.ConfigurationProcessor) $stack47;

        interfaceinvoke $stack48.<org.apache.maven.cli.configuration.ConfigurationProcessor: void process(org.apache.maven.cli.CliRequest)>(cliRequest);

        goto label9;

     label1:
        if userSuppliedConfigurationProcessorCount != 1 goto label5;

        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack37 = $r3.<org.apache.maven.cli.MavenCli: java.util.Map configurationProcessors>;

        $stack38 = interfaceinvoke $stack37.<java.util.Map: java.util.Set entrySet()>();

        sb = interfaceinvoke $stack38.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack40 = interfaceinvoke sb.<java.util.Iterator: boolean hasNext()>();

        if $stack40 == 0 goto label4;

        $stack41 = interfaceinvoke sb.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack41;

        $stack42 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        hint = (java.lang.String) $stack42;

        $stack43 = virtualinvoke hint.<java.lang.String: boolean equals(java.lang.Object)>("settings");

        if $stack43 != 0 goto label3;

        $stack45 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        configurationProcessor = (org.apache.maven.cli.configuration.ConfigurationProcessor) $stack45;

        interfaceinvoke configurationProcessor.<org.apache.maven.cli.configuration.ConfigurationProcessor: void process(org.apache.maven.cli.CliRequest)>(cliRequest);

     label3:
        goto label2;

     label4:
        goto label9;

     label5:
        if userSuppliedConfigurationProcessorCount <= 1 goto label9;

        $u0 = new java.lang.StringBuilder;

        $stack14 = newarray (java.lang.Object)[1];

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(userSuppliedConfigurationProcessorCount);

        $stack14[0] = $stack17;

        $stack18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%nThere can only be one user supplied ConfigurationProcessor, there are %s:%n%n", $stack14);

        specialinvoke $u0.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18);

        $r4 = (org.apache.maven.cli.MavenCli) this;

        $stack19 = $r4.<org.apache.maven.cli.MavenCli: java.util.Map configurationProcessors>;

        $stack20 = interfaceinvoke $stack19.<java.util.Map: java.util.Set entrySet()>();

        entry#6 = interfaceinvoke $stack20.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $stack22 = interfaceinvoke entry#6.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label8;

        $stack25 = interfaceinvoke entry#6.<java.util.Iterator: java.lang.Object next()>();

        hint#7 = (java.util.Map$Entry) $stack25;

        $stack26 = interfaceinvoke hint#7.<java.util.Map$Entry: java.lang.Object getKey()>();

        configurationProcessor = (java.lang.String) $stack26;

        $stack27 = virtualinvoke configurationProcessor.<java.lang.String: boolean equals(java.lang.Object)>("settings");

        if $stack27 != 0 goto label7;

        $stack29 = interfaceinvoke hint#7.<java.util.Map$Entry: java.lang.Object getValue()>();

        configurationProcessor = (org.apache.maven.cli.configuration.ConfigurationProcessor) $stack29;

        $stack30 = newarray (java.lang.Object)[1];

        $stack33 = virtualinvoke configurationProcessor.<java.lang.Object: java.lang.Class getClass()>();

        $stack34 = virtualinvoke $stack33.<java.lang.Class: java.lang.String getName()>();

        $stack30[0] = $stack34;

        $stack35 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s%n", $stack30);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

     label7:
        goto label6;

     label8:
        $u1 = new java.lang.Exception;

        $stack24 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.Exception: void <init>(java.lang.String)>($stack24);

        throw $u1;

     label9:
        return;
    }

    void toolchains(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine $stack8, $stack10, $stack75, $stack91;
        boolean $stack9, $stack11, $stack17, $stack18, $stack36, $stack38, $stack43, $stack79, $stack95;
        org.apache.maven.execution.MavenExecutionRequest $stack12, $stack14, $stack32;
        MavenCli this;
        org.apache.maven.eventspy.internal.EventSpyDispatcher $stack19, $stack30;
        org.slf4j.Logger $stack20, $stack24, $stack37, $stack39, $stack40, $stack44, $stack46;
        org.apache.maven.building.Source $stack22, $stack26, $r0, $r1;
        java.lang.Object $stack23, $stack27, $stack45;
        org.apache.maven.toolchain.building.ToolchainsBuilder $stack28;
        org.apache.maven.toolchain.building.ToolchainsBuildingResult toolchainsResult;
        org.apache.maven.execution.MavenExecutionRequestPopulator $stack31;
        org.apache.maven.toolchain.model.PersistedToolchains $stack33;
        java.util.List $stack35, $stack41;
        java.util.Iterator l6;
        org.apache.maven.building.Problem problem;
        java.lang.String $stack48, $stack49, $stack76, $stack77, $stack89, $stack92, $stack93, $stack102;
        java.lang.StringBuilder $stack87, $stack88, $stack100, $stack101, $u1, $u4;
        java.io.File userToolchainsFile, globalToolchainsFile, $u0, $u3;
        java.io.FileNotFoundException $u2, $u5;
        org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest $u6;
        org.apache.maven.building.FileSource $u7, $u8;
        org.apache.maven.cli.MavenCli $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        org.apache.maven.toolchain.building.ToolchainsBuildingRequest $r8;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack8 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack9 = virtualinvoke $stack8.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(116);

        if $stack9 == 0 goto label1;

        $u0 = new java.io.File;

        $stack91 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack92 = virtualinvoke $stack91.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(116);

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack92);

        $stack93 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        userToolchainsFile = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u0, $stack93);

        $stack95 = virtualinvoke userToolchainsFile.<java.io.File: boolean isFile()>();

        if $stack95 != 0 goto label2;

        $u2 = new java.io.FileNotFoundException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack100 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified user toolchains file does not exist: ");

        $stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(userToolchainsFile);

        $stack102 = virtualinvoke $stack101.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($stack102);

        throw $u2;

     label1:
        userToolchainsFile = <org.apache.maven.cli.MavenCli: java.io.File DEFAULT_USER_TOOLCHAINS_FILE>;

     label2:
        $stack10 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack11 = virtualinvoke $stack10.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("gt");

        if $stack11 == 0 goto label3;

        $u3 = new java.io.File;

        $stack75 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        $stack76 = virtualinvoke $stack75.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("gt");

        specialinvoke $u3.<java.io.File: void <init>(java.lang.String)>($stack76);

        $stack77 = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        globalToolchainsFile = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u3, $stack77);

        $stack79 = virtualinvoke globalToolchainsFile.<java.io.File: boolean isFile()>();

        if $stack79 != 0 goto label4;

        $u5 = new java.io.FileNotFoundException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack87 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified global toolchains file does not exist: ");

        $stack88 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(globalToolchainsFile);

        $stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($stack89);

        throw $u5;

     label3:
        globalToolchainsFile = <org.apache.maven.cli.MavenCli: java.io.File DEFAULT_GLOBAL_TOOLCHAINS_FILE>;

     label4:
        $stack12 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        interfaceinvoke $stack12.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGlobalToolchainsFile(java.io.File)>(globalToolchainsFile);

        $stack14 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        interfaceinvoke $stack14.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setUserToolchainsFile(java.io.File)>(userToolchainsFile);

        $u6 = new org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest;

        specialinvoke $u6.<org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest: void <init>()>();

        $stack17 = virtualinvoke globalToolchainsFile.<java.io.File: boolean isFile()>();

        if $stack17 == 0 goto label5;

        $u7 = new org.apache.maven.building.FileSource;

        specialinvoke $u7.<org.apache.maven.building.FileSource: void <init>(java.io.File)>(globalToolchainsFile);

        $r0 = (org.apache.maven.building.Source) $u7;

        virtualinvoke $u6.<org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest: org.apache.maven.toolchain.building.ToolchainsBuildingRequest setGlobalToolchainsSource(org.apache.maven.building.Source)>($r0);

     label5:
        $stack18 = virtualinvoke userToolchainsFile.<java.io.File: boolean isFile()>();

        if $stack18 == 0 goto label6;

        $u8 = new org.apache.maven.building.FileSource;

        specialinvoke $u8.<org.apache.maven.building.FileSource: void <init>(java.io.File)>(userToolchainsFile);

        $r1 = (org.apache.maven.building.Source) $u8;

        virtualinvoke $u6.<org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest: org.apache.maven.toolchain.building.ToolchainsBuildingRequest setUserToolchainsSource(org.apache.maven.building.Source)>($r1);

     label6:
        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack19 = $r2.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        virtualinvoke $stack19.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>($u6);

        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack20 = $r3.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack22 = virtualinvoke $u6.<org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest: org.apache.maven.building.Source getGlobalToolchainsSource()>();

        $r4 = (org.apache.maven.cli.MavenCli) this;

        $stack23 = specialinvoke $r4.<org.apache.maven.cli.MavenCli: java.lang.Object getLocation(org.apache.maven.building.Source,java.io.File)>($stack22, globalToolchainsFile);

        interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading global toolchains from \'{}\'", $stack23);

        $r5 = (org.apache.maven.cli.MavenCli) this;

        $stack24 = $r5.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack26 = virtualinvoke $u6.<org.apache.maven.toolchain.building.DefaultToolchainsBuildingRequest: org.apache.maven.building.Source getUserToolchainsSource()>();

        $r6 = (org.apache.maven.cli.MavenCli) this;

        $stack27 = specialinvoke $r6.<org.apache.maven.cli.MavenCli: java.lang.Object getLocation(org.apache.maven.building.Source,java.io.File)>($stack26, userToolchainsFile);

        interfaceinvoke $stack24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading user toolchains from \'{}\'", $stack27);

        $r7 = (org.apache.maven.cli.MavenCli) this;

        $stack28 = $r7.<org.apache.maven.cli.MavenCli: org.apache.maven.toolchain.building.ToolchainsBuilder toolchainsBuilder>;

        $r8 = (org.apache.maven.toolchain.building.ToolchainsBuildingRequest) $u6;

        toolchainsResult = interfaceinvoke $stack28.<org.apache.maven.toolchain.building.ToolchainsBuilder: org.apache.maven.toolchain.building.ToolchainsBuildingResult build(org.apache.maven.toolchain.building.ToolchainsBuildingRequest)>($r8);

        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack30 = $r9.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        virtualinvoke $stack30.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>(toolchainsResult);

        $r10 = (org.apache.maven.cli.MavenCli) this;

        $stack31 = $r10.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequestPopulator executionRequestPopulator>;

        $stack32 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $stack33 = interfaceinvoke toolchainsResult.<org.apache.maven.toolchain.building.ToolchainsBuildingResult: org.apache.maven.toolchain.model.PersistedToolchains getEffectiveToolchains()>();

        interfaceinvoke $stack31.<org.apache.maven.execution.MavenExecutionRequestPopulator: org.apache.maven.execution.MavenExecutionRequest populateFromToolchains(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.toolchain.model.PersistedToolchains)>($stack32, $stack33);

        $stack35 = interfaceinvoke toolchainsResult.<org.apache.maven.toolchain.building.ToolchainsBuildingResult: java.util.List getProblems()>();

        $stack36 = interfaceinvoke $stack35.<java.util.List: boolean isEmpty()>();

        if $stack36 != 0 goto label9;

        $r11 = (org.apache.maven.cli.MavenCli) this;

        $stack37 = $r11.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack38 = interfaceinvoke $stack37.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $stack38 == 0 goto label9;

        $r12 = (org.apache.maven.cli.MavenCli) this;

        $stack39 = $r12.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack39.<org.slf4j.Logger: void warn(java.lang.String)>("");

        $r13 = (org.apache.maven.cli.MavenCli) this;

        $stack40 = $r13.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack40.<org.slf4j.Logger: void warn(java.lang.String)>("Some problems were encountered while building the effective toolchains");

        $stack41 = interfaceinvoke toolchainsResult.<org.apache.maven.toolchain.building.ToolchainsBuildingResult: java.util.List getProblems()>();

        l6 = interfaceinvoke $stack41.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $stack43 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack43 == 0 goto label8;

        $stack45 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        problem = (org.apache.maven.building.Problem) $stack45;

        $r14 = (org.apache.maven.cli.MavenCli) this;

        $stack46 = $r14.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        $stack48 = interfaceinvoke problem.<org.apache.maven.building.Problem: java.lang.String getMessage()>();

        $stack49 = interfaceinvoke problem.<org.apache.maven.building.Problem: java.lang.String getLocation()>();

        interfaceinvoke $stack46.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("{} @ {}", $stack48, $stack49);

        goto label7;

     label8:
        $r15 = (org.apache.maven.cli.MavenCli) this;

        $stack44 = $r15.<org.apache.maven.cli.MavenCli: org.slf4j.Logger slf4jLogger>;

        interfaceinvoke $stack44.<org.slf4j.Logger: void warn(java.lang.String)>("");

     label9:
        return;
    }

    private java.lang.Object getLocation(org.apache.maven.building.Source, java.io.File)
    {
        org.apache.maven.building.Source source;
        java.io.File defaultLocation;
        java.lang.String $stack3;
        MavenCli this;

        this := @this: MavenCli;

        source := @parameter0: org.apache.maven.building.Source;

        defaultLocation := @parameter1: java.io.File;

        if source == null goto label1;

        $stack3 = interfaceinvoke source.<org.apache.maven.building.Source: java.lang.String getLocation()>();

        return $stack3;

     label1:
        return defaultLocation;
    }

    protected org.apache.maven.execution.MavenExecutionRequest populateRequest(org.apache.maven.cli.CliRequest)
    {
        MavenCli this;
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.maven.execution.MavenExecutionRequest $stack2, $stack3;
        org.apache.maven.cli.MavenCli $r0;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        $stack2 = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest request>;

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequest populateRequest(org.apache.maven.cli.CliRequest,org.apache.maven.execution.MavenExecutionRequest)>(cliRequest, $stack2);

        return $stack3;
    }

    private org.apache.maven.execution.MavenExecutionRequest populateRequest(org.apache.maven.cli.CliRequest, org.apache.maven.execution.MavenExecutionRequest)
    {
        MavenCli this;
        org.slf4j.ILoggerFactory $stack10;
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine commandLine;
        java.lang.String workingDirectory, $stack23, $stack34, localRepositoryPath, threadConfiguration, $stack49, $stack54, $stack63, $stack64;
        boolean quiet, verbose, $stack11, $stack67;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.io.File baseDirectory, $stack41, $stack42, $stack48, $stack78, $stack79, $stack100, $stack101, $u0;
        java.util.function.Consumer $stack17, $stack20, $stack27, $stack30, $stack33, $stack53;
        java.util.List $stack21;
        java.util.Properties $stack37, $stack39;
        org.eclipse.aether.transfer.TransferListener $stack44;
        org.apache.maven.execution.ExecutionListener $stack46;
        int $stack68, $stack73;
        org.apache.maven.execution.ProjectActivation $stack58;
        org.apache.maven.execution.ProfileActivation $stack59;
        org.apache.maven.cli.MavenCli $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        this := @this: MavenCli;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        request := @parameter1: org.apache.maven.execution.MavenExecutionRequest;

        $stack10 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $r0.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory> = $stack10;

        commandLine = cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine commandLine>;

        workingDirectory = cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String workingDirectory>;

        quiet = cliRequest.<org.apache.maven.cli.CliRequest: boolean quiet>;

        verbose = cliRequest.<org.apache.maven.cli.CliRequest: boolean verbose>;

        $stack11 = cliRequest.<org.apache.maven.cli.CliRequest: boolean showErrors>;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setShowErrors(boolean)>($stack11);

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>(workingDirectory, "");

        baseDirectory = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(request);

        $stack17 = staticinvoke <MavenCli$setInteractiveMode__312: java.util.function.Consumer bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r1 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r1.<org.apache.maven.cli.MavenCli: void disableOnPresentOption(org.apache.commons.cli.CommandLine,char,java.util.function.Consumer)>(commandLine, 66, $stack17);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(request);

        $stack20 = staticinvoke <MavenCli$setNoSnapshotUpdates__313: java.util.function.Consumer bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r2 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r2.<org.apache.maven.cli.MavenCli: void enableOnPresentOption(org.apache.commons.cli.CommandLine,java.lang.String,java.util.function.Consumer)>(commandLine, "nsu", $stack20);

        $stack21 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGoals(java.util.List)>($stack21);

        $r3 = (org.apache.maven.cli.MavenCli) this;

        $stack23 = specialinvoke $r3.<org.apache.maven.cli.MavenCli: java.lang.String determineReactorFailureBehaviour(org.apache.commons.cli.CommandLine)>(commandLine);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setReactorFailureBehavior(java.lang.String)>($stack23);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(request);

        $stack27 = staticinvoke <MavenCli$setRecursive__314: java.util.function.Consumer bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r4 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r4.<org.apache.maven.cli.MavenCli: void disableOnPresentOption(org.apache.commons.cli.CommandLine,char,java.util.function.Consumer)>(commandLine, 78, $stack27);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(request);

        $stack30 = staticinvoke <MavenCli$setOffline__315: java.util.function.Consumer bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r5 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r5.<org.apache.maven.cli.MavenCli: void enableOnPresentOption(org.apache.commons.cli.CommandLine,char,java.util.function.Consumer)>(commandLine, 111, $stack30);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(request);

        $stack33 = staticinvoke <MavenCli$setUpdateSnapshots__316: java.util.function.Consumer bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r6 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r6.<org.apache.maven.cli.MavenCli: void enableOnPresentOption(org.apache.commons.cli.CommandLine,char,java.util.function.Consumer)>(commandLine, 85, $stack33);

        $r7 = (org.apache.maven.cli.MavenCli) this;

        $stack34 = specialinvoke $r7.<org.apache.maven.cli.MavenCli: java.lang.String determineGlobalCheckPolicy(org.apache.commons.cli.CommandLine)>(commandLine);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGlobalChecksumPolicy(java.lang.String)>($stack34);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setBaseDirectory(java.io.File)>(baseDirectory);

        $stack37 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties systemProperties>;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setSystemProperties(java.util.Properties)>($stack37);

        $stack39 = cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties userProperties>;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setUserProperties(java.util.Properties)>($stack39);

        $stack41 = cliRequest.<org.apache.maven.cli.CliRequest: java.io.File multiModuleProjectDirectory>;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: void setMultiModuleProjectDirectory(java.io.File)>($stack41);

        $r8 = (org.apache.maven.cli.MavenCli) this;

        $stack42 = specialinvoke $r8.<org.apache.maven.cli.MavenCli: java.io.File determinePom(org.apache.commons.cli.CommandLine,java.lang.String,java.io.File)>(commandLine, workingDirectory, baseDirectory);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setPom(java.io.File)>($stack42);

        $r9 = (org.apache.maven.cli.MavenCli) this;

        $stack44 = specialinvoke $r9.<org.apache.maven.cli.MavenCli: org.eclipse.aether.transfer.TransferListener determineTransferListener(boolean,boolean,org.apache.commons.cli.CommandLine,org.apache.maven.execution.MavenExecutionRequest)>(quiet, verbose, commandLine, request);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setTransferListener(org.eclipse.aether.transfer.TransferListener)>($stack44);

        $r10 = (org.apache.maven.cli.MavenCli) this;

        $stack46 = specialinvoke $r10.<org.apache.maven.cli.MavenCli: org.apache.maven.execution.ExecutionListener determineExecutionListener()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setExecutionListener(org.apache.maven.execution.ExecutionListener)>($stack46);

        $stack48 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        if $stack48 == null goto label1;

        $stack78 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack79 = virtualinvoke $stack78.<java.io.File: java.io.File getParentFile()>();

        if $stack79 == null goto label1;

        $stack100 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack101 = virtualinvoke $stack100.<java.io.File: java.io.File getParentFile()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setBaseDirectory(java.io.File)>($stack101);

     label1:
        $stack49 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("rf");

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setResumeFrom(java.lang.String)>($stack49);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(request);

        $stack53 = staticinvoke <MavenCli$setResume__317: java.util.function.Consumer bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $r11 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r11.<org.apache.maven.cli.MavenCli: void enableOnPresentOption(org.apache.commons.cli.CommandLine,java.lang.String,java.util.function.Consumer)>(commandLine, "r", $stack53);

        $r12 = (org.apache.maven.cli.MavenCli) this;

        $stack54 = specialinvoke $r12.<org.apache.maven.cli.MavenCli: java.lang.String determineMakeBehavior(org.apache.commons.cli.CommandLine)>(commandLine);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setMakeBehavior(java.lang.String)>($stack54);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setCacheNotFound(boolean)>(1);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setCacheTransferError(boolean)>(0);

        $stack58 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.ProjectActivation getProjectActivation()>();

        staticinvoke <org.apache.maven.cli.MavenCli: void performProjectActivation(org.apache.commons.cli.CommandLine,org.apache.maven.execution.ProjectActivation)>(commandLine, $stack58);

        $stack59 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.ProfileActivation getProfileActivation()>();

        staticinvoke <org.apache.maven.cli.MavenCli: void performProfileActivation(org.apache.commons.cli.CommandLine,org.apache.maven.execution.ProfileActivation)>(commandLine, $stack59);

        $r13 = (org.apache.maven.cli.MavenCli) this;

        localRepositoryPath = specialinvoke $r13.<org.apache.maven.cli.MavenCli: java.lang.String determineLocalRepositoryPath(org.apache.maven.execution.MavenExecutionRequest)>(request);

        if localRepositoryPath == null goto label2;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepositoryPath(java.lang.String)>(localRepositoryPath);

     label2:
        threadConfiguration = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("T");

        if threadConfiguration == null goto label4;

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setBuilderId(java.lang.String)>("multithreaded");

        $stack67 = virtualinvoke threadConfiguration.<java.lang.String: boolean contains(java.lang.CharSequence)>("C");

        if $stack67 == 0 goto label3;

        $r14 = (org.apache.maven.cli.MavenCli) this;

        $stack73 = virtualinvoke $r14.<org.apache.maven.cli.MavenCli: int calculateDegreeOfConcurrencyWithCoreMultiplier(java.lang.String)>(threadConfiguration);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: void setDegreeOfConcurrency(int)>($stack73);

        goto label4;

     label3:
        $stack68 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(threadConfiguration);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: void setDegreeOfConcurrency(int)>($stack68);

     label4:
        $stack63 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.lang.String getBuilderId()>();

        $stack64 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("b", $stack63);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setBuilderId(java.lang.String)>($stack64);

        return request;
    }

    private java.lang.String determineLocalRepositoryPath(org.apache.maven.execution.MavenExecutionRequest)
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        java.util.Properties $stack3, $stack5;
        java.lang.String userDefinedLocalRepo, $stack6;
        MavenCli this;

        this := @this: MavenCli;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $stack3 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.Properties getUserProperties()>();

        userDefinedLocalRepo = virtualinvoke $stack3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("maven.repo.local");

        if userDefinedLocalRepo == null goto label1;

        return userDefinedLocalRepo;

     label1:
        $stack5 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.util.Properties getSystemProperties()>();

        $stack6 = virtualinvoke $stack5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("maven.repo.local");

        return $stack6;
    }

    private java.io.File determinePom(org.apache.commons.cli.CommandLine, java.lang.String, java.io.File)
    {
        org.apache.commons.cli.CommandLine commandLine;
        boolean $stack6, $stack10, $stack14;
        MavenCli this;
        org.apache.maven.model.building.ModelProcessor $stack7, $stack8;
        java.io.File baseDirectory, pom, $u0, $u1;
        java.lang.String workingDirectory, alternatePomFile;
        org.apache.maven.cli.MavenCli $r0, $r1;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        workingDirectory := @parameter1: java.lang.String;

        baseDirectory := @parameter2: java.io.File;

        alternatePomFile = null;

        $stack6 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(102);

        if $stack6 == 0 goto label1;

        alternatePomFile = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(102);

     label1:
        if alternatePomFile == null goto label3;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>(alternatePomFile);

        pom = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u0, workingDirectory);

        $stack14 = virtualinvoke pom.<java.io.File: boolean isDirectory()>();

        if $stack14 == 0 goto label2;

        $u1 = new java.io.File;

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>(pom, "pom.xml");

        pom = $u1;

     label2:
        return pom;

     label3:
        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack7 = $r0.<org.apache.maven.cli.MavenCli: org.apache.maven.model.building.ModelProcessor modelProcessor>;

        if $stack7 == null goto label4;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack8 = $r1.<org.apache.maven.cli.MavenCli: org.apache.maven.model.building.ModelProcessor modelProcessor>;

        pom = interfaceinvoke $stack8.<org.apache.maven.model.building.ModelProcessor: java.io.File locatePom(java.io.File)>(baseDirectory);

        $stack10 = virtualinvoke pom.<java.io.File: boolean isFile()>();

        if $stack10 == 0 goto label4;

        return pom;

     label4:
        return null;
    }

    static void performProjectActivation(org.apache.commons.cli.CommandLine, org.apache.maven.execution.ProjectActivation)
    {
        org.apache.commons.cli.CommandLine commandLine;
        boolean $stack14, optional, active, $stack33;
        java.lang.String[] optionValues, l7;
        int $stack16, l4, l8, l5, l9;
        java.lang.String optionValue, token, $stack28, selector;
        char $stack21, $stack35, $stack36, $stack23;
        org.apache.maven.execution.ProjectActivation projectActivation;
        byte $stack27;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        projectActivation := @parameter1: org.apache.maven.execution.ProjectActivation;

        $stack14 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("pl");

        if $stack14 == 0 goto label13;

        optionValues = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>("pl");

        if optionValues == null goto label01;

        $stack16 = lengthof optionValues;

        if $stack16 != 0 goto label02;

     label01:
        return;

     label02:
        l4 = lengthof optionValues;

        l5 = 0;

     label03:
        if l5 >= l4 goto label13;

        optionValue = optionValues[l5];

        l7 = virtualinvoke optionValue.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l8 = lengthof l7;

        l9 = 0;

     label04:
        if l9 >= l8 goto label12;

        token = l7[l9];

        selector = virtualinvoke token.<java.lang.String: java.lang.String trim()>();

        active = 1;

        $stack21 = virtualinvoke selector.<java.lang.String: char charAt(int)>(0);

        if $stack21 == 45 goto label05;

        $stack35 = virtualinvoke selector.<java.lang.String: char charAt(int)>(0);

        if $stack35 != 33 goto label06;

     label05:
        active = 0;

        selector = virtualinvoke selector.<java.lang.String: java.lang.String substring(int)>(1);

        goto label07;

     label06:
        $stack36 = virtualinvoke token.<java.lang.String: char charAt(int)>(0);

        if $stack36 != 43 goto label07;

        selector = virtualinvoke selector.<java.lang.String: java.lang.String substring(int)>(1);

     label07:
        $stack23 = virtualinvoke selector.<java.lang.String: char charAt(int)>(0);

        if $stack23 != 63 goto label08;

        $stack33 = 1;

        goto label09;

     label08:
        $stack33 = 0;

     label09:
        optional = $stack33;

        $stack28 = selector;

        if $stack33 == 0 goto label10;

        $stack27 = 1;

        goto label11;

     label10:
        $stack27 = 0;

     label11:
        selector = virtualinvoke $stack28.<java.lang.String: java.lang.String substring(int)>($stack27);

        virtualinvoke projectActivation.<org.apache.maven.execution.ProjectActivation: void addProjectActivation(java.lang.String,boolean,boolean)>(selector, active, optional);

        l9 = l9 + 1;

        goto label04;

     label12:
        l5 = l5 + 1;

        goto label03;

     label13:
        return;
    }

    static void performProfileActivation(org.apache.commons.cli.CommandLine, org.apache.maven.execution.ProfileActivation)
    {
        org.apache.commons.cli.CommandLine commandLine;
        boolean $stack14, optional, active, $stack33;
        java.lang.String[] optionValues, l7;
        int $stack16, l4, l8, l5, l9;
        java.lang.String optionValue, token, $stack28, profileId;
        char $stack21, $stack35, $stack36, $stack23;
        org.apache.maven.execution.ProfileActivation profileActivation;
        byte $stack27;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        profileActivation := @parameter1: org.apache.maven.execution.ProfileActivation;

        $stack14 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(80);

        if $stack14 == 0 goto label13;

        optionValues = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(char)>(80);

        if optionValues == null goto label01;

        $stack16 = lengthof optionValues;

        if $stack16 != 0 goto label02;

     label01:
        return;

     label02:
        l4 = lengthof optionValues;

        l5 = 0;

     label03:
        if l5 >= l4 goto label13;

        optionValue = optionValues[l5];

        l7 = virtualinvoke optionValue.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l8 = lengthof l7;

        l9 = 0;

     label04:
        if l9 >= l8 goto label12;

        token = l7[l9];

        profileId = virtualinvoke token.<java.lang.String: java.lang.String trim()>();

        active = 1;

        $stack21 = virtualinvoke profileId.<java.lang.String: char charAt(int)>(0);

        if $stack21 == 45 goto label05;

        $stack35 = virtualinvoke profileId.<java.lang.String: char charAt(int)>(0);

        if $stack35 != 33 goto label06;

     label05:
        active = 0;

        profileId = virtualinvoke profileId.<java.lang.String: java.lang.String substring(int)>(1);

        goto label07;

     label06:
        $stack36 = virtualinvoke token.<java.lang.String: char charAt(int)>(0);

        if $stack36 != 43 goto label07;

        profileId = virtualinvoke profileId.<java.lang.String: java.lang.String substring(int)>(1);

     label07:
        $stack23 = virtualinvoke profileId.<java.lang.String: char charAt(int)>(0);

        if $stack23 != 63 goto label08;

        $stack33 = 1;

        goto label09;

     label08:
        $stack33 = 0;

     label09:
        optional = $stack33;

        $stack28 = profileId;

        if $stack33 == 0 goto label10;

        $stack27 = 1;

        goto label11;

     label10:
        $stack27 = 0;

     label11:
        profileId = virtualinvoke $stack28.<java.lang.String: java.lang.String substring(int)>($stack27);

        virtualinvoke profileActivation.<org.apache.maven.execution.ProfileActivation: void addProfileActivation(java.lang.String,boolean,boolean)>(profileId, active, optional);

        l9 = l9 + 1;

        goto label04;

     label12:
        l5 = l5 + 1;

        goto label03;

     label13:
        return;
    }

    private org.apache.maven.execution.ExecutionListener determineExecutionListener()
    {
        MavenCli this;
        org.apache.maven.eventspy.internal.EventSpyDispatcher $stack3, $stack4;
        org.apache.maven.execution.ExecutionListener $stack5, $r2, $r3;
        org.apache.maven.cli.event.ExecutionEventLogger $u0;
        org.apache.maven.cli.MavenCli $r0, $r1;

        this := @this: MavenCli;

        $u0 = new org.apache.maven.cli.event.ExecutionEventLogger;

        specialinvoke $u0.<org.apache.maven.cli.event.ExecutionEventLogger: void <init>()>();

        $r0 = (org.apache.maven.cli.MavenCli) this;

        $stack3 = $r0.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        if $stack3 == null goto label1;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack4 = $r1.<org.apache.maven.cli.MavenCli: org.apache.maven.eventspy.internal.EventSpyDispatcher eventSpyDispatcher>;

        $r2 = (org.apache.maven.execution.ExecutionListener) $u0;

        $stack5 = virtualinvoke $stack4.<org.apache.maven.eventspy.internal.EventSpyDispatcher: org.apache.maven.execution.ExecutionListener chainListener(org.apache.maven.execution.ExecutionListener)>($r2);

        return $stack5;

     label1:
        $r3 = (org.apache.maven.execution.ExecutionListener) $u0;

        return $r3;
    }

    private java.lang.String determineReactorFailureBehaviour(org.apache.commons.cli.CommandLine)
    {
        org.apache.commons.cli.CommandLine commandLine;
        boolean $stack2, $stack3, $stack4;
        MavenCli this;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        $stack2 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("ff");

        if $stack2 == 0 goto label1;

        return "FAIL_FAST";

     label1:
        $stack3 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("fae");

        if $stack3 == 0 goto label2;

        return "FAIL_AT_END";

     label2:
        $stack4 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("fn");

        if $stack4 == 0 goto label3;

        return "FAIL_NEVER";

     label3:
        return "FAIL_FAST";
    }

    private org.eclipse.aether.transfer.TransferListener determineTransferListener(boolean, boolean, org.apache.commons.cli.CommandLine, org.apache.maven.execution.MavenExecutionRequest)
    {
        boolean quiet, $stack6, $stack7, $stack9, verbose;
        org.apache.commons.cli.CommandLine commandLine;
        org.apache.maven.execution.MavenExecutionRequest request;
        MavenCli this;
        org.eclipse.aether.transfer.TransferListener $stack8, $stack11, $r0;
        org.apache.maven.cli.transfer.QuietMavenTransferListener $u0;
        org.apache.maven.cli.MavenCli $r1, $r2;

        this := @this: MavenCli;

        quiet := @parameter0: boolean;

        verbose := @parameter1: boolean;

        commandLine := @parameter2: org.apache.commons.cli.CommandLine;

        request := @parameter3: org.apache.maven.execution.MavenExecutionRequest;

        if quiet != 0 goto label1;

        $stack6 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("ntp");

        if $stack6 == 0 goto label2;

     label1:
        $u0 = new org.apache.maven.cli.transfer.QuietMavenTransferListener;

        specialinvoke $u0.<org.apache.maven.cli.transfer.QuietMavenTransferListener: void <init>()>();

        $r0 = (org.eclipse.aether.transfer.TransferListener) $u0;

        return $r0;

     label2:
        $stack7 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: boolean isInteractiveMode()>();

        if $stack7 == 0 goto label3;

        $stack9 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("l");

        if $stack9 != 0 goto label3;

        $r1 = (org.apache.maven.cli.MavenCli) this;

        $stack11 = virtualinvoke $r1.<org.apache.maven.cli.MavenCli: org.eclipse.aether.transfer.TransferListener getConsoleTransferListener(boolean)>(verbose);

        return $stack11;

     label3:
        $r2 = (org.apache.maven.cli.MavenCli) this;

        $stack8 = virtualinvoke $r2.<org.apache.maven.cli.MavenCli: org.eclipse.aether.transfer.TransferListener getBatchTransferListener()>();

        return $stack8;
    }

    private java.lang.String determineMakeBehavior(org.apache.commons.cli.CommandLine)
    {
        org.apache.commons.cli.CommandLine cl;
        boolean $stack2, $stack3, $stack4, $stack5, $stack7, $stack10;
        MavenCli this;

        this := @this: MavenCli;

        cl := @parameter0: org.apache.commons.cli.CommandLine;

        $stack2 = virtualinvoke cl.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("am");

        if $stack2 == 0 goto label1;

        $stack10 = virtualinvoke cl.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("amd");

        if $stack10 != 0 goto label1;

        return "make-upstream";

     label1:
        $stack3 = virtualinvoke cl.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("am");

        if $stack3 != 0 goto label2;

        $stack7 = virtualinvoke cl.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("amd");

        if $stack7 == 0 goto label2;

        return "make-downstream";

     label2:
        $stack4 = virtualinvoke cl.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("am");

        if $stack4 == 0 goto label3;

        $stack5 = virtualinvoke cl.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("amd");

        if $stack5 == 0 goto label3;

        return "make-both";

     label3:
        return null;
    }

    private java.lang.String determineGlobalCheckPolicy(org.apache.commons.cli.CommandLine)
    {
        org.apache.commons.cli.CommandLine commandLine;
        boolean $stack2, $stack3;
        MavenCli this;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        $stack2 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(67);

        if $stack2 == 0 goto label1;

        return "fail";

     label1:
        $stack3 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(99);

        if $stack3 == 0 goto label2;

        return "warn";

     label2:
        return null;
    }

    private void disableOnPresentOption(org.apache.commons.cli.CommandLine, java.lang.String, java.util.function.Consumer)
    {
        org.apache.commons.cli.CommandLine commandLine;
        java.lang.String option;
        boolean $stack4;
        java.util.function.Consumer setting;
        java.lang.Boolean $stack5;
        MavenCli this;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        option := @parameter1: java.lang.String;

        setting := @parameter2: java.util.function.Consumer;

        $stack4 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>(option);

        if $stack4 == 0 goto label1;

        $stack5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke setting.<java.util.function.Consumer: void accept(java.lang.Object)>($stack5);

     label1:
        return;
    }

    private void disableOnPresentOption(org.apache.commons.cli.CommandLine, char, java.util.function.Consumer)
    {
        MavenCli this;
        org.apache.commons.cli.CommandLine commandLine;
        char option;
        java.lang.String $stack4;
        java.util.function.Consumer setting;
        org.apache.maven.cli.MavenCli $r0;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        option := @parameter1: char;

        setting := @parameter2: java.util.function.Consumer;

        $stack4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(option);

        $r0 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r0.<org.apache.maven.cli.MavenCli: void disableOnPresentOption(org.apache.commons.cli.CommandLine,java.lang.String,java.util.function.Consumer)>(commandLine, $stack4, setting);

        return;
    }

    private void enableOnPresentOption(org.apache.commons.cli.CommandLine, java.lang.String, java.util.function.Consumer)
    {
        org.apache.commons.cli.CommandLine commandLine;
        java.lang.String option;
        boolean $stack4;
        java.util.function.Consumer setting;
        java.lang.Boolean $stack5;
        MavenCli this;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        option := @parameter1: java.lang.String;

        setting := @parameter2: java.util.function.Consumer;

        $stack4 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>(option);

        if $stack4 == 0 goto label1;

        $stack5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke setting.<java.util.function.Consumer: void accept(java.lang.Object)>($stack5);

     label1:
        return;
    }

    private void enableOnPresentOption(org.apache.commons.cli.CommandLine, char, java.util.function.Consumer)
    {
        MavenCli this;
        org.apache.commons.cli.CommandLine commandLine;
        char option;
        java.lang.String $stack4;
        java.util.function.Consumer setting;
        org.apache.maven.cli.MavenCli $r0;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        option := @parameter1: char;

        setting := @parameter2: java.util.function.Consumer;

        $stack4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(option);

        $r0 = (org.apache.maven.cli.MavenCli) this;

        specialinvoke $r0.<org.apache.maven.cli.MavenCli: void enableOnPresentOption(org.apache.commons.cli.CommandLine,java.lang.String,java.util.function.Consumer)>(commandLine, $stack4, setting);

        return;
    }

    private void enableOnAbsentOption(org.apache.commons.cli.CommandLine, char, java.util.function.Consumer)
    {
        org.apache.commons.cli.CommandLine commandLine;
        char option;
        boolean $stack4;
        java.util.function.Consumer setting;
        java.lang.Boolean $stack5;
        MavenCli this;

        this := @this: MavenCli;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        option := @parameter1: char;

        setting := @parameter2: java.util.function.Consumer;

        $stack4 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(option);

        if $stack4 != 0 goto label1;

        $stack5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke setting.<java.util.function.Consumer: void accept(java.lang.Object)>($stack5);

     label1:
        return;
    }

    int calculateDegreeOfConcurrencyWithCoreMultiplier(java.lang.String)
    {
        java.lang.Runtime $stack3;
        int procs, $stack9;
        java.lang.String threadConfiguration, $stack5;
        float $stack6, $stack7, $stack8;
        MavenCli this;

        this := @this: MavenCli;

        threadConfiguration := @parameter0: java.lang.String;

        $stack3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        procs = virtualinvoke $stack3.<java.lang.Runtime: int availableProcessors()>();

        $stack5 = virtualinvoke threadConfiguration.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("C", "");

        $stack6 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($stack5);

        $stack7 = (float) procs;

        $stack8 = $stack6 * $stack7;

        $stack9 = (int) $stack8;

        return $stack9;
    }

    static void populateProperties(org.apache.commons.cli.CommandLine, java.util.Properties, java.util.Properties)
    {
        java.util.Properties systemProperties, userProperties, defStrs#9;
        org.apache.commons.cli.CommandLine commandLine;
        boolean $stack8;
        java.lang.String defStr, mavenVersion#16, mavenBuildVersion#27;
        java.lang.String[] defStrs;
        int mavenBuildVersion, l6;

        commandLine := @parameter0: org.apache.commons.cli.CommandLine;

        systemProperties := @parameter1: java.util.Properties;

        userProperties := @parameter2: java.util.Properties;

        staticinvoke <org.apache.maven.properties.internal.EnvironmentUtils: void addEnvVars(java.util.Properties)>(systemProperties);

        $stack8 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(68);

        if $stack8 == 0 goto label2;

        defStrs = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(char)>(68);

        if defStrs == null goto label2;

        mavenBuildVersion = lengthof defStrs;

        l6 = 0;

     label1:
        if l6 >= mavenBuildVersion goto label2;

        defStr = defStrs[l6];

        staticinvoke <org.apache.maven.cli.MavenCli: void setCliProperty(java.lang.String,java.util.Properties)>(defStr, userProperties);

        l6 = l6 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.maven.properties.internal.SystemProperties: void addSystemProperties(java.util.Properties)>(systemProperties);

        defStrs#9 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.util.Properties getBuildProperties()>();

        mavenVersion#16 = virtualinvoke defStrs#9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");

        virtualinvoke systemProperties.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("maven.version", mavenVersion#16);

        mavenBuildVersion#27 = staticinvoke <org.apache.maven.cli.CLIReportingUtils: java.lang.String createMavenVersionString(java.util.Properties)>(defStrs#9);

        virtualinvoke systemProperties.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("maven.build.version", mavenBuildVersion#27);

        return;
    }

    private static void setCliProperty(java.lang.String, java.util.Properties)
    {
        java.lang.String property, $stack6, name, value;
        int i, $stack8;
        java.util.Properties properties;

        property := @parameter0: java.lang.String;

        properties := @parameter1: java.util.Properties;

        i = virtualinvoke property.<java.lang.String: int indexOf(int)>(61);

        if i > 0 goto label1;

        name = virtualinvoke property.<java.lang.String: java.lang.String trim()>();

        value = "true";

        goto label2;

     label1:
        $stack6 = virtualinvoke property.<java.lang.String: java.lang.String substring(int,int)>(0, i);

        name = virtualinvoke $stack6.<java.lang.String: java.lang.String trim()>();

        $stack8 = i + 1;

        value = virtualinvoke property.<java.lang.String: java.lang.String substring(int)>($stack8);

     label2:
        virtualinvoke properties.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(name, value);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>(name, value);

        return;
    }

    protected org.eclipse.aether.transfer.TransferListener getConsoleTransferListener(boolean)
    {
        boolean printResourceNames;
        java.io.PrintStream $stack3;
        MavenCli this;
        org.apache.maven.cli.transfer.ConsoleMavenTransferListener $u0;
        org.eclipse.aether.transfer.TransferListener $r0;

        this := @this: MavenCli;

        printResourceNames := @parameter0: boolean;

        $u0 = new org.apache.maven.cli.transfer.ConsoleMavenTransferListener;

        $stack3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $u0.<org.apache.maven.cli.transfer.ConsoleMavenTransferListener: void <init>(java.io.PrintStream,boolean)>($stack3, printResourceNames);

        $r0 = (org.eclipse.aether.transfer.TransferListener) $u0;

        return $r0;
    }

    protected org.eclipse.aether.transfer.TransferListener getBatchTransferListener()
    {
        MavenCli this;
        org.apache.maven.cli.transfer.Slf4jMavenTransferListener $u0;
        org.eclipse.aether.transfer.TransferListener $r0;

        this := @this: MavenCli;

        $u0 = new org.apache.maven.cli.transfer.Slf4jMavenTransferListener;

        specialinvoke $u0.<org.apache.maven.cli.transfer.Slf4jMavenTransferListener: void <init>()>();

        $r0 = (org.eclipse.aether.transfer.TransferListener) $u0;

        return $r0;
    }

    protected void customizeContainer(org.codehaus.plexus.PlexusContainer)
    {
        MavenCli this;
        org.codehaus.plexus.PlexusContainer container;

        this := @this: MavenCli;

        container := @parameter0: org.codehaus.plexus.PlexusContainer;

        return;
    }

    protected org.apache.maven.model.building.ModelProcessor createModelProcessor(org.codehaus.plexus.PlexusContainer) throws org.codehaus.plexus.component.repository.exception.ComponentLookupException
    {
        org.codehaus.plexus.PlexusContainer container;
        java.lang.Object $stack2;
        org.apache.maven.model.building.ModelProcessor $stack3;
        MavenCli this;

        this := @this: MavenCli;

        container := @parameter0: org.codehaus.plexus.PlexusContainer;

        $stack2 = interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/model/building/ModelProcessor;");

        $stack3 = (org.apache.maven.model.building.ModelProcessor) $stack2;

        return $stack3;
    }

    private static boolean lambda$getResumeFromSelector$0(org.apache.maven.project.MavenProject, org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject firstFailedProject, project;
        java.lang.String $stack2, $stack3;
        boolean $stack4;

        firstFailedProject := @parameter0: org.apache.maven.project.MavenProject;

        project := @parameter1: org.apache.maven.project.MavenProject;

        $stack2 = virtualinvoke firstFailedProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack4 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>($stack3);

        return $stack4;
    }

    static org.slf4j.ILoggerFactory access$000(org.apache.maven.cli.MavenCli)
    {
        org.apache.maven.cli.MavenCli x0;
        org.slf4j.ILoggerFactory $stack1;

        x0 := @parameter0: org.apache.maven.cli.MavenCli;

        $stack1 = x0.<org.apache.maven.cli.MavenCli: org.slf4j.ILoggerFactory slf4jLoggerFactory>;

        return $stack1;
    }

    static void <clinit>()
    {
        java.lang.String $stack0, $stack2, $stack6;
        java.io.File $stack1, $stack3, $stack4, $stack5;
        java.util.regex.Pattern $stack7;

        <MavenCli: java.lang.String ANSI_RESET> = "\u001b[m";

        <MavenCli: java.lang.String STYLE_COLOR_PROPERTY> = "style.color";

        <MavenCli: java.lang.String MVN_MAVEN_CONFIG> = ".mvn/maven.config";

        <MavenCli: java.lang.String EXTENSIONS_FILENAME> = ".mvn/extensions.xml";

        <MavenCli: java.lang.String EXT_CLASS_PATH> = "maven.ext.class.path";

        <MavenCli: java.lang.String MULTIMODULE_PROJECT_DIRECTORY> = "maven.multiModuleProjectDirectory";

        <MavenCli: java.lang.String LOCAL_REPO_PROPERTY> = "maven.repo.local";

        $stack0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        <org.apache.maven.cli.MavenCli: java.lang.String USER_HOME> = $stack0;

        $stack1 = new java.io.File;

        $stack2 = <org.apache.maven.cli.MavenCli: java.lang.String USER_HOME>;

        specialinvoke $stack1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack2, ".m2");

        <org.apache.maven.cli.MavenCli: java.io.File USER_MAVEN_CONFIGURATION_HOME> = $stack1;

        $stack3 = new java.io.File;

        $stack4 = <org.apache.maven.cli.MavenCli: java.io.File USER_MAVEN_CONFIGURATION_HOME>;

        specialinvoke $stack3.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack4, "toolchains.xml");

        <org.apache.maven.cli.MavenCli: java.io.File DEFAULT_USER_TOOLCHAINS_FILE> = $stack3;

        $stack5 = new java.io.File;

        $stack6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("maven.conf");

        specialinvoke $stack5.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack6, "toolchains.xml");

        <org.apache.maven.cli.MavenCli: java.io.File DEFAULT_GLOBAL_TOOLCHAINS_FILE> = $stack5;

        $stack7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\u001b\\[[;\\d]*[ -/]*[@-~])[^\u001b]*$");

        <org.apache.maven.cli.MavenCli: java.util.regex.Pattern LAST_ANSI_SEQUENCE> = $stack7;

        return;
    }
}
