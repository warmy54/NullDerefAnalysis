public class MavenLifecycleParticipantTest extends org.apache.maven.AbstractCoreMavenComponentTestCase
{
    private static final java.lang.String INJECTED_ARTIFACT_ID;

    public void <init>()
    {
        MavenLifecycleParticipantTest this;

        this := @this: MavenLifecycleParticipantTest;

        specialinvoke this.<org.apache.maven.AbstractCoreMavenComponentTestCase: void <init>()>();

        return;
    }

    protected java.lang.String getProjectsDirectory()
    {
        MavenLifecycleParticipantTest this;

        this := @this: MavenLifecycleParticipantTest;

        return "src/test/projects/lifecycle-listener";
    }

    public void testDependencyInjection() throws java.lang.Exception
    {
        MavenLifecycleParticipantTest this;
        org.codehaus.plexus.PlexusContainer container;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack12;
        java.lang.Object $stack13, $stack32;
        org.apache.maven.Maven maven;
        java.io.File pom;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.lang.String[] $stack16;
        java.util.List $stack17, $stack21;
        org.apache.maven.execution.MavenExecutionResult result;
        boolean $stack20;
        java.lang.String $stack22, $stack26, $stack34;
        org.apache.maven.project.MavenProject project;
        java.util.Properties $stack25;
        java.util.Set $stack28;
        int $stack30;
        org.apache.maven.artifact.Artifact $stack33;
        org.codehaus.plexus.component.repository.ComponentDescriptor $u0;
        java.util.ArrayList $u1;
        org.apache.maven.MavenLifecycleParticipantTest $r0, $r1, $r2;

        this := @this: MavenLifecycleParticipantTest;

        $r0 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        container = virtualinvoke $r0.<org.apache.maven.MavenLifecycleParticipantTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $u0 = new org.codehaus.plexus.component.repository.ComponentDescriptor;

        $stack12 = interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm getContainerRealm()>();

        specialinvoke $u0.<org.codehaus.plexus.component.repository.ComponentDescriptor: void <init>(java.lang.Class,org.codehaus.plexus.classworlds.realm.ClassRealm)>(class "Lorg/apache/maven/MavenLifecycleParticipantTest$InjectDependencyLifecycleListener;", $stack12);

        virtualinvoke $u0.<org.codehaus.plexus.component.repository.ComponentDescriptor: void setRoleClass(java.lang.Class)>(class "Lorg/apache/maven/AbstractMavenLifecycleParticipant;");

        interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: void addComponentDescriptor(org.codehaus.plexus.component.repository.ComponentDescriptor)>($u0);

        $stack13 = interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/Maven;");

        maven = (org.apache.maven.Maven) $stack13;

        $r1 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        pom = virtualinvoke $r1.<org.apache.maven.MavenLifecycleParticipantTest: java.io.File getProject(java.lang.String)>("lifecycle-listener-dependency-injection");

        $r2 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        request = virtualinvoke $r2.<org.apache.maven.MavenLifecycleParticipantTest: org.apache.maven.execution.MavenExecutionRequest createMavenExecutionRequest(java.io.File)>(pom);

        $stack16 = newarray (java.lang.String)[1];

        $stack16[0] = "validate";

        $stack17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack16);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGoals(java.util.List)>($stack17);

        result = interfaceinvoke maven.<org.apache.maven.Maven: org.apache.maven.execution.MavenExecutionResult execute(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $stack20 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: boolean hasExceptions()>();

        $stack21 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: java.util.List getExceptions()>();

        $stack22 = virtualinvoke $stack21.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack20, $stack22);

        project = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: org.apache.maven.project.MavenProject getProject()>();

        $stack25 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Properties getProperties()>();

        $stack26 = virtualinvoke $stack25.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("foo");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack26);

        $u1 = new java.util.ArrayList;

        $stack28 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        specialinvoke $u1.<java.util.ArrayList: void <init>(java.util.Collection)>($stack28);

        $stack30 = virtualinvoke $u1.<java.util.ArrayList: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack30);

        $stack32 = virtualinvoke $u1.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $stack33 = (org.apache.maven.artifact.Artifact) $stack32;

        $stack34 = interfaceinvoke $stack33.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("injected", $stack34);

        return;
    }

    public void testReactorDependencyInjection() throws java.lang.Exception
    {
        MavenLifecycleParticipantTest this;
        java.util.List reactorOrder, $stack4;
        java.lang.String[] $stack3;
        org.apache.maven.MavenLifecycleParticipantTest $r0;

        this := @this: MavenLifecycleParticipantTest;

        $r0 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        reactorOrder = specialinvoke $r0.<org.apache.maven.MavenLifecycleParticipantTest: java.util.List getReactorOrder(java.lang.String,java.lang.Class)>("lifecycle-participant-reactor-dependency-injection", class "Lorg/apache/maven/MavenLifecycleParticipantTest$InjectReactorDependency;");

        $stack3 = newarray (java.lang.String)[3];

        $stack3[0] = "parent";

        $stack3[1] = "module-b";

        $stack3[2] = "module-a";

        $stack4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, reactorOrder);

        return;
    }

    private java.util.List getReactorOrder(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        MavenLifecycleParticipantTest this;
        org.codehaus.plexus.PlexusContainer container;
        java.lang.Class participant;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack14;
        java.lang.Object $stack15, $stack29;
        org.apache.maven.Maven maven;
        java.lang.String testProject, $stack24, $stack30;
        java.io.File pom;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.lang.String[] $stack18;
        java.util.List $stack19, $stack23, $stack26;
        org.apache.maven.execution.MavenExecutionResult result;
        boolean $stack22, $stack28;
        java.util.Iterator l10;
        org.apache.maven.project.MavenProject project;
        org.codehaus.plexus.component.repository.ComponentDescriptor $u0;
        java.util.ArrayList $u1;
        org.apache.maven.MavenLifecycleParticipantTest $r0, $r1, $r2;

        this := @this: MavenLifecycleParticipantTest;

        testProject := @parameter0: java.lang.String;

        participant := @parameter1: java.lang.Class;

        $r0 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        container = virtualinvoke $r0.<org.apache.maven.MavenLifecycleParticipantTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $u0 = new org.codehaus.plexus.component.repository.ComponentDescriptor;

        $stack14 = interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: org.codehaus.plexus.classworlds.realm.ClassRealm getContainerRealm()>();

        specialinvoke $u0.<org.codehaus.plexus.component.repository.ComponentDescriptor: void <init>(java.lang.Class,org.codehaus.plexus.classworlds.realm.ClassRealm)>(participant, $stack14);

        virtualinvoke $u0.<org.codehaus.plexus.component.repository.ComponentDescriptor: void setRoleClass(java.lang.Class)>(class "Lorg/apache/maven/AbstractMavenLifecycleParticipant;");

        interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: void addComponentDescriptor(org.codehaus.plexus.component.repository.ComponentDescriptor)>($u0);

        $stack15 = interfaceinvoke container.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/Maven;");

        maven = (org.apache.maven.Maven) $stack15;

        $r1 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        pom = virtualinvoke $r1.<org.apache.maven.MavenLifecycleParticipantTest: java.io.File getProject(java.lang.String)>(testProject);

        $r2 = (org.apache.maven.MavenLifecycleParticipantTest) this;

        request = virtualinvoke $r2.<org.apache.maven.MavenLifecycleParticipantTest: org.apache.maven.execution.MavenExecutionRequest createMavenExecutionRequest(java.io.File)>(pom);

        $stack18 = newarray (java.lang.String)[1];

        $stack18[0] = "validate";

        $stack19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack18);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGoals(java.util.List)>($stack19);

        result = interfaceinvoke maven.<org.apache.maven.Maven: org.apache.maven.execution.MavenExecutionResult execute(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $stack22 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: boolean hasExceptions()>();

        $stack23 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: java.util.List getExceptions()>();

        $stack24 = virtualinvoke $stack23.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack22, $stack24);

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $stack26 = interfaceinvoke result.<org.apache.maven.execution.MavenExecutionResult: java.util.List getTopologicallySortedProjects()>();

        l10 = interfaceinvoke $stack26.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack28 = interfaceinvoke l10.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label2;

        $stack29 = interfaceinvoke l10.<java.util.Iterator: java.lang.Object next()>();

        project = (org.apache.maven.project.MavenProject) $stack29;

        $stack30 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>($stack30);

        goto label1;

     label2:
        return $u1;
    }

    public static void <clinit>()
    {
        <MavenLifecycleParticipantTest: java.lang.String INJECTED_ARTIFACT_ID> = "injected";

        return;
    }
}
