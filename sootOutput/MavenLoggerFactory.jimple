public class MavenLoggerFactory extends org.slf4j.impl.SimpleLoggerFactory implements org.apache.maven.logwrapper.MavenSlf4jWrapperFactory
{
    private org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder;

    public void <init>()
    {
        MavenLoggerFactory this;
        org.slf4j.impl.MavenLoggerFactory $r0;

        this := @this: MavenLoggerFactory;

        specialinvoke this.<org.slf4j.impl.SimpleLoggerFactory: void <init>()>();

        $r0 = (org.slf4j.impl.MavenLoggerFactory) this;

        $r0.<org.slf4j.impl.MavenLoggerFactory: org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder> = null;

        return;
    }

    public void setLogLevelRecorder(org.apache.maven.logwrapper.LogLevelRecorder)
    {
        MavenLoggerFactory this;
        org.apache.maven.logwrapper.LogLevelRecorder $stack2, logLevelRecorder;
        java.lang.IllegalStateException $u0;
        org.slf4j.impl.MavenLoggerFactory $r0, $r1;

        this := @this: MavenLoggerFactory;

        logLevelRecorder := @parameter0: org.apache.maven.logwrapper.LogLevelRecorder;

        $r0 = (org.slf4j.impl.MavenLoggerFactory) this;

        $stack2 = $r0.<org.slf4j.impl.MavenLoggerFactory: org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder>;

        if $stack2 == null goto label1;

        $u0 = new java.lang.IllegalStateException;

        specialinvoke $u0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("LogLevelRecorder has already been set.");

        throw $u0;

     label1:
        $r1 = (org.slf4j.impl.MavenLoggerFactory) this;

        $r1.<org.slf4j.impl.MavenLoggerFactory: org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder> = logLevelRecorder;

        return;
    }

    public java.util.Optional getLogLevelRecorder()
    {
        MavenLoggerFactory this;
        org.apache.maven.logwrapper.LogLevelRecorder $stack1;
        java.util.Optional $stack2;
        org.slf4j.impl.MavenLoggerFactory $r0;

        this := @this: MavenLoggerFactory;

        $r0 = (org.slf4j.impl.MavenLoggerFactory) this;

        $stack1 = $r0.<org.slf4j.impl.MavenLoggerFactory: org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder>;

        $stack2 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($stack1);

        return $stack2;
    }

    public org.slf4j.Logger getLogger(java.lang.String)
    {
        MavenLoggerFactory this;
        java.lang.String name;
        java.util.concurrent.ConcurrentMap $stack5, $stack8;
        java.lang.Object $stack6, $stack9;
        org.slf4j.Logger simpleLogger, newInstance, oldInstance, $stack10;
        org.slf4j.impl.MavenLoggerFactory $r0, $r1, $r2;

        this := @this: MavenLoggerFactory;

        name := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.MavenLoggerFactory) this;

        $stack5 = $r0.<org.slf4j.impl.MavenLoggerFactory: java.util.concurrent.ConcurrentMap loggerMap>;

        $stack6 = interfaceinvoke $stack5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(name);

        simpleLogger = (org.slf4j.Logger) $stack6;

        if simpleLogger == null goto label1;

        return simpleLogger;

     label1:
        $r1 = (org.slf4j.impl.MavenLoggerFactory) this;

        newInstance = specialinvoke $r1.<org.slf4j.impl.MavenLoggerFactory: org.slf4j.Logger getNewLoggingInstance(java.lang.String)>(name);

        $r2 = (org.slf4j.impl.MavenLoggerFactory) this;

        $stack8 = $r2.<org.slf4j.impl.MavenLoggerFactory: java.util.concurrent.ConcurrentMap loggerMap>;

        $stack9 = interfaceinvoke $stack8.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(name, newInstance);

        oldInstance = (org.slf4j.Logger) $stack9;

        if oldInstance != null goto label2;

        $stack10 = newInstance;

        goto label3;

     label2:
        $stack10 = oldInstance;

     label3:
        return $stack10;
    }

    private org.slf4j.Logger getNewLoggingInstance(java.lang.String)
    {
        MavenLoggerFactory this;
        org.apache.maven.logwrapper.LogLevelRecorder $stack2, $stack4;
        java.lang.String name;
        org.slf4j.impl.MavenSimpleLogger $u0;
        org.slf4j.impl.MavenFailOnSeverityLogger $u1;
        org.slf4j.impl.MavenLoggerFactory $r0, $r2;
        org.slf4j.Logger $r1, $r3;

        this := @this: MavenLoggerFactory;

        name := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.MavenLoggerFactory) this;

        $stack2 = $r0.<org.slf4j.impl.MavenLoggerFactory: org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder>;

        if $stack2 != null goto label1;

        $u0 = new org.slf4j.impl.MavenSimpleLogger;

        specialinvoke $u0.<org.slf4j.impl.MavenSimpleLogger: void <init>(java.lang.String)>(name);

        $r1 = (org.slf4j.Logger) $u0;

        return $r1;

     label1:
        $u1 = new org.slf4j.impl.MavenFailOnSeverityLogger;

        $r2 = (org.slf4j.impl.MavenLoggerFactory) this;

        $stack4 = $r2.<org.slf4j.impl.MavenLoggerFactory: org.apache.maven.logwrapper.LogLevelRecorder logLevelRecorder>;

        specialinvoke $u1.<org.slf4j.impl.MavenFailOnSeverityLogger: void <init>(java.lang.String,org.apache.maven.logwrapper.LogLevelRecorder)>(name, $stack4);

        $r3 = (org.slf4j.Logger) $u1;

        return $r3;
    }
}
