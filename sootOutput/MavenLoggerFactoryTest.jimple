public class MavenLoggerFactoryTest extends java.lang.Object
{

    public void <init>()
    {
        MavenLoggerFactoryTest this;

        this := @this: MavenLoggerFactoryTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void createsSimpleLogger()
    {
        org.slf4j.impl.MavenLoggerFactory $stack3;
        org.slf4j.Logger logger;
        org.hamcrest.Matcher $stack5;
        MavenLoggerFactoryTest this;

        this := @this: MavenLoggerFactoryTest;

        $stack3 = new org.slf4j.impl.MavenLoggerFactory;

        specialinvoke $stack3.<org.slf4j.impl.MavenLoggerFactory: void <init>()>();

        logger = virtualinvoke $stack3.<org.slf4j.impl.MavenLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("Test");

        $stack5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/slf4j/impl/MavenSimpleLogger;");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(logger, $stack5);

        return;
    }

    public void loggerCachingWorks()
    {
        org.slf4j.impl.MavenLoggerFactory $stack5;
        org.slf4j.Logger logger, logger2, differentLogger;
        MavenLoggerFactoryTest this;

        this := @this: MavenLoggerFactoryTest;

        $stack5 = new org.slf4j.impl.MavenLoggerFactory;

        specialinvoke $stack5.<org.slf4j.impl.MavenLoggerFactory: void <init>()>();

        logger = virtualinvoke $stack5.<org.slf4j.impl.MavenLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("Test");

        logger2 = virtualinvoke $stack5.<org.slf4j.impl.MavenLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("Test");

        differentLogger = virtualinvoke $stack5.<org.slf4j.impl.MavenLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("TestWithDifferentName");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(logger);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(differentLogger);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertSame(java.lang.Object,java.lang.Object)>(logger, logger2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotSame(java.lang.Object,java.lang.Object)>(logger, differentLogger);

        return;
    }

    public void reportsWhenFailOnSeverityThresholdHasBeenHit()
    {
        org.slf4j.impl.MavenLoggerFactory $stack4;
        org.apache.maven.logwrapper.LogLevelRecorder $stack5, logLevelRecorder;
        java.util.Optional $stack6, $stack8;
        boolean $stack7, $stack11, $stack12, $stack13, $stack14;
        java.lang.Object $stack9;
        org.slf4j.Logger $stack10;
        org.slf4j.impl.MavenFailOnSeverityLogger logger;
        MavenLoggerFactoryTest this;

        this := @this: MavenLoggerFactoryTest;

        $stack4 = new org.slf4j.impl.MavenLoggerFactory;

        specialinvoke $stack4.<org.slf4j.impl.MavenLoggerFactory: void <init>()>();

        $stack5 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack5.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("ERROR");

        virtualinvoke $stack4.<org.slf4j.impl.MavenLoggerFactory: void setLogLevelRecorder(org.apache.maven.logwrapper.LogLevelRecorder)>($stack5);

        $stack6 = virtualinvoke $stack4.<org.slf4j.impl.MavenLoggerFactory: java.util.Optional getLogLevelRecorder()>();

        $stack7 = virtualinvoke $stack6.<java.util.Optional: boolean isPresent()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack7);

        $stack8 = virtualinvoke $stack4.<org.slf4j.impl.MavenLoggerFactory: java.util.Optional getLogLevelRecorder()>();

        $stack9 = virtualinvoke $stack8.<java.util.Optional: java.lang.Object get()>();

        logLevelRecorder = (org.apache.maven.logwrapper.LogLevelRecorder) $stack9;

        $stack10 = virtualinvoke $stack4.<org.slf4j.impl.MavenLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("Test");

        logger = (org.slf4j.impl.MavenFailOnSeverityLogger) $stack10;

        $stack11 = virtualinvoke logLevelRecorder.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack11);

        virtualinvoke logger.<org.slf4j.impl.MavenFailOnSeverityLogger: void warn(java.lang.String)>("This should not hit the fail threshold");

        $stack12 = virtualinvoke logLevelRecorder.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack12);

        virtualinvoke logger.<org.slf4j.impl.MavenFailOnSeverityLogger: void error(java.lang.String)>("This should hit the fail threshold");

        $stack13 = virtualinvoke logLevelRecorder.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack13);

        virtualinvoke logger.<org.slf4j.impl.MavenFailOnSeverityLogger: void warn(java.lang.String)>("This should not reset the fail threshold");

        $stack14 = virtualinvoke logLevelRecorder.<org.apache.maven.logwrapper.LogLevelRecorder: boolean metThreshold()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        return;
    }

    public void failOnSeverityThresholdCanOnlyBeSetOnce()
    {
        org.slf4j.impl.MavenLoggerFactory $stack2;
        org.apache.maven.logwrapper.LogLevelRecorder $stack3;
        org.junit.jupiter.api.function.Executable $stack5;
        MavenLoggerFactoryTest this;

        this := @this: MavenLoggerFactoryTest;

        $stack2 = new org.slf4j.impl.MavenLoggerFactory;

        specialinvoke $stack2.<org.slf4j.impl.MavenLoggerFactory: void <init>()>();

        $stack3 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack3.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("WARN");

        virtualinvoke $stack2.<org.slf4j.impl.MavenLoggerFactory: void setLogLevelRecorder(org.apache.maven.logwrapper.LogLevelRecorder)>($stack3);

        $stack5 = staticinvoke <MavenLoggerFactoryTest$lambda_failOnSeverityThresholdCanOnlyBeSetOnce_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.slf4j.impl.MavenLoggerFactory)>($stack2);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/IllegalStateException;", $stack5);

        return;
    }

    private static void lambda$failOnSeverityThresholdCanOnlyBeSetOnce$0(org.slf4j.impl.MavenLoggerFactory) throws java.lang.Throwable
    {
        org.slf4j.impl.MavenLoggerFactory mavenLoggerFactory;
        org.apache.maven.logwrapper.LogLevelRecorder $stack1;

        mavenLoggerFactory := @parameter0: org.slf4j.impl.MavenLoggerFactory;

        $stack1 = new org.apache.maven.logwrapper.LogLevelRecorder;

        specialinvoke $stack1.<org.apache.maven.logwrapper.LogLevelRecorder: void <init>(java.lang.String)>("ERROR");

        virtualinvoke mavenLoggerFactory.<org.slf4j.impl.MavenLoggerFactory: void setLogLevelRecorder(org.apache.maven.logwrapper.LogLevelRecorder)>($stack1);

        return;
    }
}
