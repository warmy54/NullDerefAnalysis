class MavenLoggerTest extends java.lang.Object
{
    private final org.apache.maven.plugin.logging.Log logMock;
    private sortpom.logger.MavenLogger mavenLogger;

    void <init>()
    {
        MavenLoggerTest this;
        java.lang.Object $stack1;
        org.apache.maven.plugin.logging.Log $stack2;
        sortpom.logger.MavenLoggerTest $r0;

        this := @this: MavenLoggerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/plugin/logging/Log;");

        $stack2 = (org.apache.maven.plugin.logging.Log) $stack1;

        $r0 = (sortpom.logger.MavenLoggerTest) this;

        $r0.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock> = $stack2;

        return;
    }

    void setUp()
    {
        MavenLoggerTest this;
        org.apache.maven.plugin.logging.Log $stack2;
        sortpom.logger.MavenLogger $u0;
        sortpom.logger.MavenLoggerTest $r0, $r1;

        this := @this: MavenLoggerTest;

        $u0 = new sortpom.logger.MavenLogger;

        $r0 = (sortpom.logger.MavenLoggerTest) this;

        $stack2 = $r0.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        specialinvoke $u0.<sortpom.logger.MavenLogger: void <init>(org.apache.maven.plugin.logging.Log)>($stack2);

        $r1 = (sortpom.logger.MavenLoggerTest) this;

        $r1.<sortpom.logger.MavenLoggerTest: sortpom.logger.MavenLogger mavenLogger> = $u0;

        return;
    }

    void warnShouldOutputWarnLevel()
    {
        MavenLoggerTest this;
        sortpom.logger.MavenLogger $stack1;
        org.apache.maven.plugin.logging.Log $stack2, $stack4, $stack6;
        java.lang.Object $stack3;
        java.lang.Object[] $stack5;
        sortpom.logger.MavenLoggerTest $r0, $r1, $r2;

        this := @this: MavenLoggerTest;

        $r0 = (sortpom.logger.MavenLoggerTest) this;

        $stack1 = $r0.<sortpom.logger.MavenLoggerTest: sortpom.logger.MavenLogger mavenLogger>;

        virtualinvoke $stack1.<sortpom.logger.MavenLogger: void warn(java.lang.String)>("Gurka");

        $r1 = (sortpom.logger.MavenLoggerTest) this;

        $stack2 = $r1.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (org.apache.maven.plugin.logging.Log) $stack3;

        interfaceinvoke $stack4.<org.apache.maven.plugin.logging.Log: void warn(java.lang.CharSequence)>("Gurka");

        $stack5 = newarray (java.lang.Object)[1];

        $r2 = (sortpom.logger.MavenLoggerTest) this;

        $stack6 = $r2.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        $stack5[0] = $stack6;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($stack5);

        return;
    }

    void infoShouldOutputInfoLevel()
    {
        MavenLoggerTest this;
        sortpom.logger.MavenLogger $stack1;
        org.apache.maven.plugin.logging.Log $stack2, $stack4, $stack6;
        java.lang.Object $stack3;
        java.lang.Object[] $stack5;
        sortpom.logger.MavenLoggerTest $r0, $r1, $r2;

        this := @this: MavenLoggerTest;

        $r0 = (sortpom.logger.MavenLoggerTest) this;

        $stack1 = $r0.<sortpom.logger.MavenLoggerTest: sortpom.logger.MavenLogger mavenLogger>;

        virtualinvoke $stack1.<sortpom.logger.MavenLogger: void info(java.lang.String)>("Gurka");

        $r1 = (sortpom.logger.MavenLoggerTest) this;

        $stack2 = $r1.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (org.apache.maven.plugin.logging.Log) $stack3;

        interfaceinvoke $stack4.<org.apache.maven.plugin.logging.Log: void info(java.lang.CharSequence)>("Gurka");

        $stack5 = newarray (java.lang.Object)[1];

        $r2 = (sortpom.logger.MavenLoggerTest) this;

        $stack6 = $r2.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        $stack5[0] = $stack6;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($stack5);

        return;
    }

    void errorShouldOutputErrorLevel()
    {
        MavenLoggerTest this;
        sortpom.logger.MavenLogger $stack1;
        org.apache.maven.plugin.logging.Log $stack2, $stack4, $stack6;
        java.lang.Object $stack3;
        java.lang.Object[] $stack5;
        sortpom.logger.MavenLoggerTest $r0, $r1, $r2;

        this := @this: MavenLoggerTest;

        $r0 = (sortpom.logger.MavenLoggerTest) this;

        $stack1 = $r0.<sortpom.logger.MavenLoggerTest: sortpom.logger.MavenLogger mavenLogger>;

        virtualinvoke $stack1.<sortpom.logger.MavenLogger: void error(java.lang.String)>("Gurka");

        $r1 = (sortpom.logger.MavenLoggerTest) this;

        $stack2 = $r1.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (org.apache.maven.plugin.logging.Log) $stack3;

        interfaceinvoke $stack4.<org.apache.maven.plugin.logging.Log: void error(java.lang.CharSequence)>("Gurka");

        $stack5 = newarray (java.lang.Object)[1];

        $r2 = (sortpom.logger.MavenLoggerTest) this;

        $stack6 = $r2.<sortpom.logger.MavenLoggerTest: org.apache.maven.plugin.logging.Log logMock>;

        $stack5[0] = $stack6;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($stack5);

        return;
    }
}
