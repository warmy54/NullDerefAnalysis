public class MavenProject extends java.lang.Object implements java.lang.Cloneable
{
    private static final org.slf4j.Logger LOGGER;
    public static final java.lang.String EMPTY_PROJECT_GROUP_ID;
    public static final java.lang.String EMPTY_PROJECT_ARTIFACT_ID;
    public static final java.lang.String EMPTY_PROJECT_VERSION;
    private org.apache.maven.model.Model model;
    private org.apache.maven.project.MavenProject parent;
    private java.io.File file;
    private java.io.File basedir;
    private java.util.Set resolvedArtifacts;
    private org.apache.maven.artifact.Artifact parentArtifact;
    private java.util.Set pluginArtifacts;
    private java.util.List remoteArtifactRepositories;
    private java.util.List pluginArtifactRepositories;
    private java.util.List remoteProjectRepositories;
    private java.util.List remotePluginRepositories;
    private java.util.List attachedArtifacts;
    private org.apache.maven.project.MavenProject executionProject;
    private java.util.List collectedProjects;
    private java.util.List compileSourceRoots;
    private java.util.List testCompileSourceRoots;
    private java.util.List scriptSourceRoots;
    private org.apache.maven.artifact.repository.ArtifactRepository releaseArtifactRepository;
    private org.apache.maven.artifact.repository.ArtifactRepository snapshotArtifactRepository;
    private java.util.List activeProfiles;
    private java.util.Map injectedProfileIds;
    private java.util.Set dependencyArtifacts;
    private org.apache.maven.artifact.Artifact artifact;
    private final java.lang.ThreadLocal threadLocalArtifactsHolder;
    private org.apache.maven.model.Model originalModel;
    private java.util.Map pluginArtifactMap;
    private java.util.Set reportArtifacts;
    private java.util.Map reportArtifactMap;
    private java.util.Set extensionArtifacts;
    private java.util.Map extensionArtifactMap;
    private java.util.Map managedVersionMap;
    private java.util.Map projectReferences;
    private boolean executionRoot;
    private java.io.File parentFile;
    private java.util.Map context;
    private org.codehaus.plexus.classworlds.realm.ClassRealm classRealm;
    private org.eclipse.aether.graph.DependencyFilter extensionDependencyFilter;
    private final java.util.Set lifecyclePhases;
    private org.apache.maven.project.ProjectBuildingRequest projectBuilderConfiguration;
    private java.util.Map moduleAdjustments;

    public void <init>()
    {
        MavenProject this;
        java.util.function.Supplier $stack8;
        java.lang.ThreadLocal $stack9;
        java.util.Set $stack12;
        java.util.ArrayList $u0, $u1, $u2, $u3, $u4;
        java.util.LinkedHashMap $u5;
        java.util.HashMap $u6;
        java.util.LinkedHashSet $u7;
        org.apache.maven.model.Model $u8;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: MavenProject;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts> = $u0;

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.List compileSourceRoots> = $u1;

        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.List testCompileSourceRoots> = $u2;

        $u3 = new java.util.ArrayList;

        specialinvoke $u3.<java.util.ArrayList: void <init>()>();

        $r3 = (org.apache.maven.project.MavenProject) this;

        $r3.<org.apache.maven.project.MavenProject: java.util.List scriptSourceRoots> = $u3;

        $u4 = new java.util.ArrayList;

        specialinvoke $u4.<java.util.ArrayList: void <init>()>();

        $r4 = (org.apache.maven.project.MavenProject) this;

        $r4.<org.apache.maven.project.MavenProject: java.util.List activeProfiles> = $u4;

        $u5 = new java.util.LinkedHashMap;

        specialinvoke $u5.<java.util.LinkedHashMap: void <init>()>();

        $r5 = (org.apache.maven.project.MavenProject) this;

        $r5.<org.apache.maven.project.MavenProject: java.util.Map injectedProfileIds> = $u5;

        $stack8 = staticinvoke <MavenProject$lambda_new_0__309: java.util.function.Supplier bootstrap$()>();

        $stack9 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($stack8);

        $r6 = (org.apache.maven.project.MavenProject) this;

        $r6.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder> = $stack9;

        $u6 = new java.util.HashMap;

        specialinvoke $u6.<java.util.HashMap: void <init>()>();

        $r7 = (org.apache.maven.project.MavenProject) this;

        $r7.<org.apache.maven.project.MavenProject: java.util.Map projectReferences> = $u6;

        $u7 = new java.util.LinkedHashSet;

        specialinvoke $u7.<java.util.LinkedHashSet: void <init>()>();

        $stack12 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($u7);

        $r8 = (org.apache.maven.project.MavenProject) this;

        $r8.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases> = $stack12;

        $u8 = new org.apache.maven.model.Model;

        specialinvoke $u8.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u8.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>("unknown");

        virtualinvoke $u8.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("empty-project");

        virtualinvoke $u8.<org.apache.maven.model.Model: void setVersion(java.lang.String)>("0");

        $r9 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r9.<org.apache.maven.project.MavenProject: void setModel(org.apache.maven.model.Model)>($u8);

        return;
    }

    public void <init>(org.apache.maven.model.Model)
    {
        MavenProject this;
        java.util.function.Supplier $stack8;
        java.lang.ThreadLocal $stack9;
        java.util.Set $stack12;
        org.apache.maven.model.Model model;
        java.util.ArrayList $u0, $u1, $u2, $u3, $u4;
        java.util.LinkedHashMap $u5;
        java.util.HashMap $u6;
        java.util.LinkedHashSet $u7;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: MavenProject;

        model := @parameter0: org.apache.maven.model.Model;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts> = $u0;

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.List compileSourceRoots> = $u1;

        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.List testCompileSourceRoots> = $u2;

        $u3 = new java.util.ArrayList;

        specialinvoke $u3.<java.util.ArrayList: void <init>()>();

        $r3 = (org.apache.maven.project.MavenProject) this;

        $r3.<org.apache.maven.project.MavenProject: java.util.List scriptSourceRoots> = $u3;

        $u4 = new java.util.ArrayList;

        specialinvoke $u4.<java.util.ArrayList: void <init>()>();

        $r4 = (org.apache.maven.project.MavenProject) this;

        $r4.<org.apache.maven.project.MavenProject: java.util.List activeProfiles> = $u4;

        $u5 = new java.util.LinkedHashMap;

        specialinvoke $u5.<java.util.LinkedHashMap: void <init>()>();

        $r5 = (org.apache.maven.project.MavenProject) this;

        $r5.<org.apache.maven.project.MavenProject: java.util.Map injectedProfileIds> = $u5;

        $stack8 = staticinvoke <MavenProject$lambda_new_0__310: java.util.function.Supplier bootstrap$()>();

        $stack9 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($stack8);

        $r6 = (org.apache.maven.project.MavenProject) this;

        $r6.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder> = $stack9;

        $u6 = new java.util.HashMap;

        specialinvoke $u6.<java.util.HashMap: void <init>()>();

        $r7 = (org.apache.maven.project.MavenProject) this;

        $r7.<org.apache.maven.project.MavenProject: java.util.Map projectReferences> = $u6;

        $u7 = new java.util.LinkedHashSet;

        specialinvoke $u7.<java.util.LinkedHashSet: void <init>()>();

        $stack12 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($u7);

        $r8 = (org.apache.maven.project.MavenProject) this;

        $r8.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases> = $stack12;

        $r9 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r9.<org.apache.maven.project.MavenProject: void setModel(org.apache.maven.model.Model)>(model);

        return;
    }

    public void <init>(org.apache.maven.project.MavenProject)
    {
        MavenProject this;
        java.util.function.Supplier $stack8;
        java.lang.ThreadLocal $stack9;
        java.util.Set $stack12;
        org.apache.maven.project.MavenProject project, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.ArrayList $u0, $u1, $u2, $u3, $u4;
        java.util.LinkedHashMap $u5;
        java.util.HashMap $u6;
        java.util.LinkedHashSet $u7;

        this := @this: MavenProject;

        project := @parameter0: org.apache.maven.project.MavenProject;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts> = $u0;

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.List compileSourceRoots> = $u1;

        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.List testCompileSourceRoots> = $u2;

        $u3 = new java.util.ArrayList;

        specialinvoke $u3.<java.util.ArrayList: void <init>()>();

        $r3 = (org.apache.maven.project.MavenProject) this;

        $r3.<org.apache.maven.project.MavenProject: java.util.List scriptSourceRoots> = $u3;

        $u4 = new java.util.ArrayList;

        specialinvoke $u4.<java.util.ArrayList: void <init>()>();

        $r4 = (org.apache.maven.project.MavenProject) this;

        $r4.<org.apache.maven.project.MavenProject: java.util.List activeProfiles> = $u4;

        $u5 = new java.util.LinkedHashMap;

        specialinvoke $u5.<java.util.LinkedHashMap: void <init>()>();

        $r5 = (org.apache.maven.project.MavenProject) this;

        $r5.<org.apache.maven.project.MavenProject: java.util.Map injectedProfileIds> = $u5;

        $stack8 = staticinvoke <MavenProject$lambda_new_0__311: java.util.function.Supplier bootstrap$()>();

        $stack9 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($stack8);

        $r6 = (org.apache.maven.project.MavenProject) this;

        $r6.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder> = $stack9;

        $u6 = new java.util.HashMap;

        specialinvoke $u6.<java.util.HashMap: void <init>()>();

        $r7 = (org.apache.maven.project.MavenProject) this;

        $r7.<org.apache.maven.project.MavenProject: java.util.Map projectReferences> = $u6;

        $u7 = new java.util.LinkedHashSet;

        specialinvoke $u7.<java.util.LinkedHashSet: void <init>()>();

        $stack12 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($u7);

        $r8 = (org.apache.maven.project.MavenProject) this;

        $r8.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases> = $stack12;

        $r9 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r9.<org.apache.maven.project.MavenProject: void deepCopy(org.apache.maven.project.MavenProject)>(project);

        return;
    }

    public java.io.File getParentFile()
    {
        MavenProject this;
        java.io.File $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.io.File parentFile>;

        return $stack1;
    }

    public void setParentFile(java.io.File)
    {
        MavenProject this;
        java.io.File parentFile;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        parentFile := @parameter0: java.io.File;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.io.File parentFile> = parentFile;

        return;
    }

    public org.apache.maven.artifact.Artifact getArtifact()
    {
        MavenProject this;
        org.apache.maven.artifact.Artifact $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact artifact>;

        return $stack1;
    }

    public void setArtifact(org.apache.maven.artifact.Artifact)
    {
        MavenProject this;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact artifact> = artifact;

        return;
    }

    public org.apache.maven.model.Model getModel()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model model>;

        return $stack1;
    }

    public org.apache.maven.project.MavenProject getParent()
    {
        MavenProject this;
        org.apache.maven.project.MavenProject $stack1, $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject parent>;

        return $stack1;
    }

    public void setParent(org.apache.maven.project.MavenProject)
    {
        MavenProject this;
        org.apache.maven.project.MavenProject parent, $r0;

        this := @this: MavenProject;

        parent := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject parent> = parent;

        return;
    }

    public boolean hasParent()
    {
        MavenProject this;
        org.apache.maven.project.MavenProject $stack1, $r0;
        boolean $stack2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject getParent()>();

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public java.io.File getFile()
    {
        MavenProject this;
        java.io.File $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.io.File file>;

        return $stack1;
    }

    public void setFile(java.io.File)
    {
        MavenProject this;
        java.io.File file, $stack2;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        file := @parameter0: java.io.File;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.io.File file> = file;

        if file == null goto label1;

        $stack2 = virtualinvoke file.<java.io.File: java.io.File getParentFile()>();

        goto label2;

     label1:
        $stack2 = null;

     label2:
        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.io.File basedir> = $stack2;

        return;
    }

    public void setPomFile(java.io.File)
    {
        MavenProject this;
        java.io.File file;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        file := @parameter0: java.io.File;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.io.File file> = file;

        return;
    }

    public java.io.File getBasedir()
    {
        MavenProject this;
        java.io.File $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.io.File basedir>;

        return $stack1;
    }

    public void setDependencies(java.util.List)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.util.List dependencies;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        dependencies := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setDependencies(java.util.List)>(dependencies);

        return;
    }

    public java.util.List getDependencies()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getDependencies()>();

        return $stack2;
    }

    public org.apache.maven.model.DependencyManagement getDependencyManagement()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.DependencyManagement $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.DependencyManagement getDependencyManagement()>();

        return $stack2;
    }

    private void addPath(java.util.List, java.lang.String)
    {
        int $stack5;
        boolean $stack7, $stack9, $stack13;
        java.lang.String $stack8, path, path#2;
        MavenProject this;
        java.io.File $stack11, $stack15, $u0, $u1;
        java.util.List paths;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        paths := @parameter0: java.util.List;

        path := @parameter1: java.lang.String;

        if path == null goto label4;

        path#2 = virtualinvoke path.<java.lang.String: java.lang.String trim()>();

        $stack5 = virtualinvoke path#2.<java.lang.String: int length()>();

        if $stack5 <= 0 goto label4;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>(path#2);

        $stack7 = virtualinvoke $u0.<java.io.File: boolean isAbsolute()>();

        if $stack7 == 0 goto label1;

        path#2 = virtualinvoke $u0.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label3;

     label1:
        $stack8 = ".";

        $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(path#2);

        if $stack9 == 0 goto label2;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack15 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.io.File getBasedir()>();

        path#2 = virtualinvoke $stack15.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label3;

     label2:
        $u1 = new java.io.File;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.io.File getBasedir()>();

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack11, path#2);

        path#2 = virtualinvoke $u1.<java.io.File: java.lang.String getAbsolutePath()>();

     label3:
        $stack13 = interfaceinvoke paths.<java.util.List: boolean contains(java.lang.Object)>(path#2);

        if $stack13 != 0 goto label4;

        interfaceinvoke paths.<java.util.List: boolean add(java.lang.Object)>(path#2);

     label4:
        return;
    }

    public void addCompileSourceRoot(java.lang.String)
    {
        MavenProject this;
        java.util.List $stack2;
        java.lang.String path;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        path := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.List getCompileSourceRoots()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r1.<org.apache.maven.project.MavenProject: void addPath(java.util.List,java.lang.String)>($stack2, path);

        return;
    }

    public void addTestCompileSourceRoot(java.lang.String)
    {
        MavenProject this;
        java.util.List $stack2;
        java.lang.String path;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        path := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.List getTestCompileSourceRoots()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r1.<org.apache.maven.project.MavenProject: void addPath(java.util.List,java.lang.String)>($stack2, path);

        return;
    }

    public java.util.List getCompileSourceRoots()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List compileSourceRoots>;

        return $stack1;
    }

    public java.util.List getTestCompileSourceRoots()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List testCompileSourceRoots>;

        return $stack1;
    }

    public java.util.List getCompileClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException
    {
        MavenProject this;
        java.util.Set $stack6, $stack11;
        int $stack7, $stack8;
        org.apache.maven.model.Build $stack9;
        java.lang.String d, $stack18, $stack19, $stack21, $stack22, $stack27, $stack28;
        java.util.Iterator l3;
        java.lang.Object $stack14;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack15;
        boolean $stack16, $stack20, $stack23, $stack29, $stack13;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack7 = interfaceinvoke $stack6.<java.util.Set: int size()>();

        $stack8 = $stack7 + 1;

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack8);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack9 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        d = virtualinvoke $stack9.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        if d == null goto label1;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(d);

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label5;

        $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack14;

        $stack15 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack16 = interfaceinvoke $stack15.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack16 == 0 goto label4;

        $stack18 = "compile";

        $stack19 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack20 = virtualinvoke $stack18.<java.lang.String: boolean equals(java.lang.Object)>($stack19);

        if $stack20 != 0 goto label3;

        $stack21 = "provided";

        $stack22 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack23 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>($stack22);

        if $stack23 != 0 goto label3;

        $stack27 = "system";

        $stack28 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack29 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>($stack28);

        if $stack29 == 0 goto label4;

     label3:
        $r3 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r3.<org.apache.maven.project.MavenProject: void addArtifactPath(org.apache.maven.artifact.Artifact,java.util.List)>(a, $u0);

     label4:
        goto label2;

     label5:
        return $u0;
    }

    public java.util.List getTestClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException
    {
        MavenProject this;
        java.util.Set $stack6, $stack13;
        int $stack7, $stack8;
        org.apache.maven.model.Build $stack9, $stack11;
        java.util.Iterator l3;
        java.lang.Object $stack16;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack17;
        boolean $stack18, $stack15;
        java.lang.String d;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3, $r4;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack7 = interfaceinvoke $stack6.<java.util.Set: int size()>();

        $stack8 = $stack7 + 2;

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack8);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack9 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        d = virtualinvoke $stack9.<org.apache.maven.model.Build: java.lang.String getTestOutputDirectory()>();

        if d == null goto label1;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(d);

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        d = virtualinvoke $stack11.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        if d == null goto label2;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(d);

     label2:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack13 = virtualinvoke $r3.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack13.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label5;

        $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack16;

        $stack17 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack18 = interfaceinvoke $stack17.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack18 == 0 goto label4;

        $r4 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r4.<org.apache.maven.project.MavenProject: void addArtifactPath(org.apache.maven.artifact.Artifact,java.util.List)>(a, $u0);

     label4:
        goto label3;

     label5:
        return $u0;
    }

    public java.util.List getRuntimeClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException
    {
        MavenProject this;
        java.util.Set $stack6, $stack11;
        int $stack7, $stack8;
        org.apache.maven.model.Build $stack9;
        java.lang.String d, $stack18, $stack19, $stack21, $stack22;
        java.util.Iterator l3;
        java.lang.Object $stack14;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack15;
        boolean $stack16, $stack20, $stack23, $stack13;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack7 = interfaceinvoke $stack6.<java.util.Set: int size()>();

        $stack8 = $stack7 + 1;

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack8);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack9 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        d = virtualinvoke $stack9.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        if d == null goto label1;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(d);

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label5;

        $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack14;

        $stack15 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack16 = interfaceinvoke $stack15.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack16 == 0 goto label4;

        $stack18 = "compile";

        $stack19 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack20 = virtualinvoke $stack18.<java.lang.String: boolean equals(java.lang.Object)>($stack19);

        if $stack20 != 0 goto label3;

        $stack21 = "runtime";

        $stack22 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack23 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>($stack22);

        if $stack23 == 0 goto label4;

     label3:
        $r3 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r3.<org.apache.maven.project.MavenProject: void addArtifactPath(org.apache.maven.artifact.Artifact,java.util.List)>(a, $u0);

     label4:
        goto label2;

     label5:
        return $u0;
    }

    public void setModelVersion(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String pomVersion;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        pomVersion := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setModelVersion(java.lang.String)>(pomVersion);

        return;
    }

    public java.lang.String getModelVersion()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getModelVersion()>();

        return $stack2;
    }

    public java.lang.String getId()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getId()>();

        return $stack2;
    }

    public void setGroupId(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String groupId;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        groupId := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>(groupId);

        return;
    }

    public java.lang.String getGroupId()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2, $stack4, $stack7;
        org.apache.maven.model.Parent $stack5, $stack8;
        java.lang.String groupId;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        groupId = virtualinvoke $stack2.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        if groupId != null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack5 = virtualinvoke $stack4.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        if $stack5 == null goto label1;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        groupId = virtualinvoke $stack8.<org.apache.maven.model.Parent: java.lang.String getGroupId()>();

     label1:
        return groupId;
    }

    public void setArtifactId(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String artifactId;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        artifactId := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>(artifactId);

        return;
    }

    public java.lang.String getArtifactId()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getArtifactId()>();

        return $stack2;
    }

    public void setName(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String name;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        name := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setName(java.lang.String)>(name);

        return;
    }

    public java.lang.String getName()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1, $stack4;
        java.lang.String $stack2, $stack3, $stack5;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getName()>();

        if $stack2 == null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack5 = virtualinvoke $stack4.<org.apache.maven.model.Model: java.lang.String getName()>();

        return $stack5;

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        return $stack3;
    }

    public void setVersion(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String version;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        version := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setVersion(java.lang.String)>(version);

        return;
    }

    public java.lang.String getVersion()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2, $stack4, $stack7;
        org.apache.maven.model.Parent $stack5, $stack8;
        java.lang.String version;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        version = virtualinvoke $stack2.<org.apache.maven.model.Model: java.lang.String getVersion()>();

        if version != null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack5 = virtualinvoke $stack4.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        if $stack5 == null goto label1;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        version = virtualinvoke $stack8.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

     label1:
        return version;
    }

    public java.lang.String getPackaging()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getPackaging()>();

        return $stack2;
    }

    public void setPackaging(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String packaging;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        packaging := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setPackaging(java.lang.String)>(packaging);

        return;
    }

    public void setInceptionYear(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String inceptionYear;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        inceptionYear := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setInceptionYear(java.lang.String)>(inceptionYear);

        return;
    }

    public java.lang.String getInceptionYear()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getInceptionYear()>();

        return $stack2;
    }

    public void setUrl(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String url;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        url := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setUrl(java.lang.String)>(url);

        return;
    }

    public java.lang.String getUrl()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getUrl()>();

        return $stack2;
    }

    public org.apache.maven.model.Prerequisites getPrerequisites()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.Prerequisites $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.Prerequisites getPrerequisites()>();

        return $stack2;
    }

    public void setIssueManagement(org.apache.maven.model.IssueManagement)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.IssueManagement issueManagement;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        issueManagement := @parameter0: org.apache.maven.model.IssueManagement;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setIssueManagement(org.apache.maven.model.IssueManagement)>(issueManagement);

        return;
    }

    public org.apache.maven.model.CiManagement getCiManagement()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.CiManagement $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.CiManagement getCiManagement()>();

        return $stack2;
    }

    public void setCiManagement(org.apache.maven.model.CiManagement)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.CiManagement ciManagement;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        ciManagement := @parameter0: org.apache.maven.model.CiManagement;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setCiManagement(org.apache.maven.model.CiManagement)>(ciManagement);

        return;
    }

    public org.apache.maven.model.IssueManagement getIssueManagement()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.IssueManagement $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.IssueManagement getIssueManagement()>();

        return $stack2;
    }

    public void setDistributionManagement(org.apache.maven.model.DistributionManagement)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.DistributionManagement distributionManagement;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        distributionManagement := @parameter0: org.apache.maven.model.DistributionManagement;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setDistributionManagement(org.apache.maven.model.DistributionManagement)>(distributionManagement);

        return;
    }

    public org.apache.maven.model.DistributionManagement getDistributionManagement()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.DistributionManagement $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.DistributionManagement getDistributionManagement()>();

        return $stack2;
    }

    public void setDescription(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.lang.String description;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        description := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setDescription(java.lang.String)>(description);

        return;
    }

    public java.lang.String getDescription()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.lang.String $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.lang.String getDescription()>();

        return $stack2;
    }

    public void setOrganization(org.apache.maven.model.Organization)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.Organization organization;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        organization := @parameter0: org.apache.maven.model.Organization;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setOrganization(org.apache.maven.model.Organization)>(organization);

        return;
    }

    public org.apache.maven.model.Organization getOrganization()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.Organization $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.Organization getOrganization()>();

        return $stack2;
    }

    public void setScm(org.apache.maven.model.Scm)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.Scm scm;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        scm := @parameter0: org.apache.maven.model.Scm;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setScm(org.apache.maven.model.Scm)>(scm);

        return;
    }

    public org.apache.maven.model.Scm getScm()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.Scm $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.Scm getScm()>();

        return $stack2;
    }

    public void setMailingLists(java.util.List)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.util.List mailingLists;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        mailingLists := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setMailingLists(java.util.List)>(mailingLists);

        return;
    }

    public java.util.List getMailingLists()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getMailingLists()>();

        return $stack2;
    }

    public void addMailingList(org.apache.maven.model.MailingList)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.MailingList mailingList;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        mailingList := @parameter0: org.apache.maven.model.MailingList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void addMailingList(org.apache.maven.model.MailingList)>(mailingList);

        return;
    }

    public void setDevelopers(java.util.List)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.util.List developers;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        developers := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setDevelopers(java.util.List)>(developers);

        return;
    }

    public java.util.List getDevelopers()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getDevelopers()>();

        return $stack2;
    }

    public void addDeveloper(org.apache.maven.model.Developer)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.Developer developer;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        developer := @parameter0: org.apache.maven.model.Developer;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void addDeveloper(org.apache.maven.model.Developer)>(developer);

        return;
    }

    public void setContributors(java.util.List)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.util.List contributors;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        contributors := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setContributors(java.util.List)>(contributors);

        return;
    }

    public java.util.List getContributors()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getContributors()>();

        return $stack2;
    }

    public void addContributor(org.apache.maven.model.Contributor)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.Contributor contributor;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        contributor := @parameter0: org.apache.maven.model.Contributor;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void addContributor(org.apache.maven.model.Contributor)>(contributor);

        return;
    }

    public void setBuild(org.apache.maven.model.Build)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.Build build;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        build := @parameter0: org.apache.maven.model.Build;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setBuild(org.apache.maven.model.Build)>(build);

        return;
    }

    public org.apache.maven.model.Build getBuild()
    {
        MavenProject this;
        org.apache.maven.model.Build $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = specialinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getModelBuild()>();

        return $stack1;
    }

    public java.util.List getResources()
    {
        MavenProject this;
        org.apache.maven.model.Build $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Build: java.util.List getResources()>();

        return $stack2;
    }

    public java.util.List getTestResources()
    {
        MavenProject this;
        org.apache.maven.model.Build $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Build: java.util.List getTestResources()>();

        return $stack2;
    }

    public void addResource(org.apache.maven.model.Resource)
    {
        MavenProject this;
        org.apache.maven.model.Build $stack2;
        org.apache.maven.model.Resource resource;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        resource := @parameter0: org.apache.maven.model.Resource;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        virtualinvoke $stack2.<org.apache.maven.model.Build: void addResource(org.apache.maven.model.Resource)>(resource);

        return;
    }

    public void addTestResource(org.apache.maven.model.Resource)
    {
        MavenProject this;
        org.apache.maven.model.Build $stack2;
        org.apache.maven.model.Resource testResource;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        testResource := @parameter0: org.apache.maven.model.Resource;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        virtualinvoke $stack2.<org.apache.maven.model.Build: void addTestResource(org.apache.maven.model.Resource)>(testResource);

        return;
    }

    public void setLicenses(java.util.List)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        java.util.List licenses;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        licenses := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setLicenses(java.util.List)>(licenses);

        return;
    }

    public java.util.List getLicenses()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getLicenses()>();

        return $stack2;
    }

    public void addLicense(org.apache.maven.model.License)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.License license;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        license := @parameter0: org.apache.maven.model.License;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void addLicense(org.apache.maven.model.License)>(license);

        return;
    }

    public void setArtifacts(java.util.Set)
    {
        MavenProject this;
        java.lang.ThreadLocal $stack3;
        java.lang.Object $stack4;
        org.apache.maven.project.MavenProject$ArtifactsHolder artifactsHolder;
        java.util.Set artifacts;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        artifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack3 = $r0.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder>;

        $stack4 = virtualinvoke $stack3.<java.lang.ThreadLocal: java.lang.Object get()>();

        artifactsHolder = (org.apache.maven.project.MavenProject$ArtifactsHolder) $stack4;

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$002(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Set)>(artifactsHolder, artifacts);

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Map access$102(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Map)>(artifactsHolder, null);

        return;
    }

    public java.util.Set getArtifacts()
    {
        MavenProject this;
        java.lang.ThreadLocal $stack4;
        java.lang.Object $stack5, $stack21;
        org.apache.maven.project.MavenProject$ArtifactsHolder artifactsHolder;
        java.util.Set $stack6, $stack12, $stack14, $stack18, $stack25, $stack7;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter $stack8, $stack22;
        int $stack15, $stack16;
        java.util.Iterator l2;
        boolean $stack20, $stack23;
        org.apache.maven.artifact.Artifact artifact;
        java.util.LinkedHashSet $u0, $u1;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = $r0.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder>;

        $stack5 = virtualinvoke $stack4.<java.lang.ThreadLocal: java.lang.Object get()>();

        artifactsHolder = (org.apache.maven.project.MavenProject$ArtifactsHolder) $stack5;

        $stack6 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$000(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        if $stack6 != null goto label5;

        $stack8 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: org.apache.maven.artifact.resolver.filter.ArtifactFilter access$200(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        if $stack8 == null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack12 = $r1.<org.apache.maven.project.MavenProject: java.util.Set resolvedArtifacts>;

        if $stack12 != null goto label2;

     label1:
        $u0 = new java.util.LinkedHashSet;

        specialinvoke $u0.<java.util.LinkedHashSet: void <init>()>();

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$002(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Set)>(artifactsHolder, $u0);

        goto label5;

     label2:
        $u1 = new java.util.LinkedHashSet;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack14 = $r2.<org.apache.maven.project.MavenProject: java.util.Set resolvedArtifacts>;

        $stack15 = interfaceinvoke $stack14.<java.util.Set: int size()>();

        $stack16 = $stack15 * 2;

        specialinvoke $u1.<java.util.LinkedHashSet: void <init>(int)>($stack16);

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$002(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Set)>(artifactsHolder, $u1);

        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack18 = $r3.<org.apache.maven.project.MavenProject: java.util.Set resolvedArtifacts>;

        l2 = interfaceinvoke $stack18.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack20 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label5;

        $stack21 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack21;

        $stack22 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: org.apache.maven.artifact.resolver.filter.ArtifactFilter access$200(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        $stack23 = interfaceinvoke $stack22.<org.apache.maven.artifact.resolver.filter.ArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>(artifact);

        if $stack23 == 0 goto label4;

        $stack25 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$000(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        interfaceinvoke $stack25.<java.util.Set: boolean add(java.lang.Object)>(artifact);

     label4:
        goto label3;

     label5:
        $stack7 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$000(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        return $stack7;
    }

    public java.util.Map getArtifactMap()
    {
        MavenProject this;
        java.lang.ThreadLocal $stack2;
        java.lang.Object $stack3;
        org.apache.maven.project.MavenProject$ArtifactsHolder artifactsHolder;
        java.util.Map $stack4, $stack5, $stack7;
        java.util.Set $stack6;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r0.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder>;

        $stack3 = virtualinvoke $stack2.<java.lang.ThreadLocal: java.lang.Object get()>();

        artifactsHolder = (org.apache.maven.project.MavenProject$ArtifactsHolder) $stack3;

        $stack4 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Map access$100(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        if $stack4 != null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack7 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.Map artifactMapByVersionlessId(java.util.Collection)>($stack6);

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Map access$102(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Map)>(artifactsHolder, $stack7);

     label1:
        $stack5 = staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Map access$100(org.apache.maven.project.MavenProject$ArtifactsHolder)>(artifactsHolder);

        return $stack5;
    }

    public void setPluginArtifacts(java.util.Set)
    {
        MavenProject this;
        java.util.Set pluginArtifacts;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        pluginArtifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.Set pluginArtifacts> = pluginArtifacts;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.Map pluginArtifactMap> = null;

        return;
    }

    public java.util.Set getPluginArtifacts()
    {
        MavenProject this;
        java.util.Set $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Set pluginArtifacts>;

        return $stack1;
    }

    public java.util.Map getPluginArtifactMap()
    {
        MavenProject this;
        java.util.Map $stack1, $stack2, $stack4;
        java.util.Set $stack3;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Map pluginArtifactMap>;

        if $stack1 != null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getPluginArtifacts()>();

        $stack4 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.Map artifactMapByVersionlessId(java.util.Collection)>($stack3);

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.Map pluginArtifactMap> = $stack4;

     label1:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r3.<org.apache.maven.project.MavenProject: java.util.Map pluginArtifactMap>;

        return $stack2;
    }

    public void setParentArtifact(org.apache.maven.artifact.Artifact)
    {
        MavenProject this;
        org.apache.maven.artifact.Artifact parentArtifact;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        parentArtifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact parentArtifact> = parentArtifact;

        return;
    }

    public org.apache.maven.artifact.Artifact getParentArtifact()
    {
        MavenProject this;
        org.apache.maven.artifact.Artifact $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact parentArtifact>;

        return $stack1;
    }

    public java.util.List getRepositories()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getRepositories()>();

        return $stack2;
    }

    public java.util.List getBuildPlugins()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1, $stack3;
        org.apache.maven.model.Build $stack2, $stack4;
        java.util.List $stack5, $stack6, $stack7;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if $stack2 != null goto label1;

        $stack7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack7;

     label1:
        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack4 = virtualinvoke $stack3.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $stack5 = virtualinvoke $stack4.<org.apache.maven.model.Build: java.util.List getPlugins()>();

        $stack6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack5);

        return $stack6;
    }

    public java.util.List getModules()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getModules()>();

        return $stack2;
    }

    public org.apache.maven.model.PluginManagement getPluginManagement()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack3;
        org.apache.maven.model.Build build;
        org.apache.maven.model.PluginManagement pluginMgmt;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        pluginMgmt = null;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack3.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if build == null goto label1;

        pluginMgmt = virtualinvoke build.<org.apache.maven.model.Build: org.apache.maven.model.PluginManagement getPluginManagement()>();

     label1:
        return pluginMgmt;
    }

    private org.apache.maven.model.Build getModelBuild()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2, $stack5;
        org.apache.maven.model.Build build, $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack2.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        if build != null goto label1;

        $u0 = new org.apache.maven.model.Build;

        specialinvoke $u0.<org.apache.maven.model.Build: void <init>()>();

        build = $u0;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack5 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack5.<org.apache.maven.model.Model: void setBuild(org.apache.maven.model.Build)>($u0);

     label1:
        return build;
    }

    public void setRemoteArtifactRepositories(java.util.List)
    {
        MavenProject this;
        java.util.List remoteArtifactRepositories, $stack2, $stack3;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        remoteArtifactRepositories := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List remoteArtifactRepositories> = remoteArtifactRepositories;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.List getRemoteArtifactRepositories()>();

        $stack3 = staticinvoke <org.apache.maven.RepositoryUtils: java.util.List toRepos(java.util.List)>($stack2);

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.List remoteProjectRepositories> = $stack3;

        return;
    }

    public java.util.List getRemoteArtifactRepositories()
    {
        MavenProject this;
        java.util.List $stack1, $stack2;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List remoteArtifactRepositories>;

        if $stack1 != null goto label1;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.List remoteArtifactRepositories> = $u0;

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r2.<org.apache.maven.project.MavenProject: java.util.List remoteArtifactRepositories>;

        return $stack2;
    }

    public void setPluginArtifactRepositories(java.util.List)
    {
        MavenProject this;
        java.util.List pluginArtifactRepositories, $stack2, $stack3;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        pluginArtifactRepositories := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List pluginArtifactRepositories> = pluginArtifactRepositories;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.List getPluginArtifactRepositories()>();

        $stack3 = staticinvoke <org.apache.maven.RepositoryUtils: java.util.List toRepos(java.util.List)>($stack2);

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.List remotePluginRepositories> = $stack3;

        return;
    }

    public java.util.List getPluginArtifactRepositories()
    {
        MavenProject this;
        java.util.List $stack1, $stack2;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List pluginArtifactRepositories>;

        if $stack1 != null goto label1;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.List pluginArtifactRepositories> = $u0;

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r2.<org.apache.maven.project.MavenProject: java.util.List pluginArtifactRepositories>;

        return $stack2;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository getDistributionManagementArtifactRepository()
    {
        MavenProject this;
        org.apache.maven.artifact.Artifact $stack1;
        boolean $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository $stack4, $stack3;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack2 = interfaceinvoke $stack1.<org.apache.maven.artifact.Artifact: boolean isSnapshot()>();

        if $stack2 == 0 goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository getSnapshotArtifactRepository()>();

        if $stack4 == null goto label1;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository getSnapshotArtifactRepository()>();

        goto label2;

     label1:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r3.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository getReleaseArtifactRepository()>();

     label2:
        return $stack3;
    }

    public java.util.List getPluginRepositories()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.List getPluginRepositories()>();

        return $stack2;
    }

    public java.util.List getRemoteProjectRepositories()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List remoteProjectRepositories>;

        return $stack1;
    }

    public java.util.List getRemotePluginRepositories()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List remotePluginRepositories>;

        return $stack1;
    }

    public void setActiveProfiles(java.util.List)
    {
        MavenProject this;
        java.util.List activeProfiles;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        activeProfiles := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List activeProfiles> = activeProfiles;

        return;
    }

    public java.util.List getActiveProfiles()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List activeProfiles>;

        return $stack1;
    }

    public void setInjectedProfileIds(java.lang.String, java.util.List)
    {
        java.util.List injectedProfileIds;
        MavenProject this;
        java.lang.String source;
        java.util.Map $stack3, $stack6;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        source := @parameter0: java.lang.String;

        injectedProfileIds := @parameter1: java.util.List;

        if injectedProfileIds == null goto label1;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack6 = $r0.<org.apache.maven.project.MavenProject: java.util.Map injectedProfileIds>;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>(java.util.Collection)>(injectedProfileIds);

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(source, $u0);

        goto label2;

     label1:
        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = $r1.<org.apache.maven.project.MavenProject: java.util.Map injectedProfileIds>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(source);

     label2:
        return;
    }

    public java.util.Map getInjectedProfileIds()
    {
        MavenProject this;
        java.util.Map $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Map injectedProfileIds>;

        return $stack1;
    }

    public void addAttachedArtifact(org.apache.maven.artifact.Artifact) throws org.apache.maven.project.DuplicateArtifactAttachmentException
    {
        MavenProject this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.List $stack3, $stack5, $stack8;
        int index;
        org.slf4j.Logger $stack7;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack3 = $r0.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts>;

        index = interfaceinvoke $stack3.<java.util.List: int indexOf(java.lang.Object)>(artifact);

        if index < 0 goto label1;

        $stack7 = <org.apache.maven.project.MavenProject: org.slf4j.Logger LOGGER>;

        interfaceinvoke $stack7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("artifact \'{}\' already attached, replacing previous instance", artifact);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack8 = $r1.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts>;

        interfaceinvoke $stack8.<java.util.List: java.lang.Object set(int,java.lang.Object)>(index, artifact);

        goto label2;

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack5 = $r2.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts>;

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(artifact);

     label2:
        return;
    }

    public java.util.List getAttachedArtifacts()
    {
        MavenProject this;
        java.util.List $stack1, $stack2, $stack3;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts>;

        if $stack1 != null goto label1;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts> = $u0;

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r2.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts>;

        $stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack2);

        return $stack3;
    }

    public org.codehaus.plexus.util.xml.Xpp3Dom getGoalConfiguration(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        MavenProject this;
        java.util.List $stack9, $stack12;
        java.util.Iterator l6;
        boolean $stack14, $stack18, $stack21;
        java.lang.Object $stack16, $stack22, $stack24, $stack25;
        org.apache.maven.model.Plugin plugin;
        java.lang.String pluginGroupId, $stack17, pluginArtifactId, $stack20, executionId, goalId;
        java.util.Map $stack23;
        org.apache.maven.model.PluginExecution execution;
        org.codehaus.plexus.util.xml.Xpp3Dom dom, $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        pluginGroupId := @parameter0: java.lang.String;

        pluginArtifactId := @parameter1: java.lang.String;

        executionId := @parameter2: java.lang.String;

        goalId := @parameter3: java.lang.String;

        dom = null;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack9 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        if $stack9 == null goto label4;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack12 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        l6 = interfaceinvoke $stack12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label4;

        $stack16 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack16;

        $stack17 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getGroupId()>();

        $stack18 = virtualinvoke pluginGroupId.<java.lang.String: boolean equals(java.lang.Object)>($stack17);

        if $stack18 == 0 goto label3;

        $stack20 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack21 = virtualinvoke pluginArtifactId.<java.lang.String: boolean equals(java.lang.Object)>($stack20);

        if $stack21 == 0 goto label3;

        $stack22 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.Object getConfiguration()>();

        dom = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack22;

        if executionId == null goto label4;

        $stack23 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.util.Map getExecutionsAsMap()>();

        $stack24 = interfaceinvoke $stack23.<java.util.Map: java.lang.Object get(java.lang.Object)>(executionId);

        execution = (org.apache.maven.model.PluginExecution) $stack24;

        if execution == null goto label2;

        $stack25 = virtualinvoke execution.<org.apache.maven.model.PluginExecution: java.lang.Object getConfiguration()>();

        dom = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack25;

     label2:
        goto label4;

     label3:
        goto label1;

     label4:
        if dom == null goto label5;

        $u0 = new org.codehaus.plexus.util.xml.Xpp3Dom;

        specialinvoke $u0.<org.codehaus.plexus.util.xml.Xpp3Dom: void <init>(org.codehaus.plexus.util.xml.Xpp3Dom)>(dom);

        dom = $u0;

     label5:
        return dom;
    }

    public org.apache.maven.project.MavenProject getExecutionProject()
    {
        MavenProject this;
        org.apache.maven.project.MavenProject $stack1, $r0, $r1, $r2;
        java.lang.Object $stack2;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject executionProject>;

        if $stack1 != null goto label1;

        $stack2 = this;

        goto label2;

     label1:
        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r1.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject executionProject>;

     label2:
        $r2 = (org.apache.maven.project.MavenProject) $stack2;

        return $r2;
    }

    public void setExecutionProject(org.apache.maven.project.MavenProject)
    {
        MavenProject this;
        org.apache.maven.project.MavenProject executionProject, $r0;

        this := @this: MavenProject;

        executionProject := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject executionProject> = executionProject;

        return;
    }

    public java.util.List getCollectedProjects()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List collectedProjects>;

        return $stack1;
    }

    public void setCollectedProjects(java.util.List)
    {
        MavenProject this;
        java.util.List collectedProjects;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        collectedProjects := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List collectedProjects> = collectedProjects;

        return;
    }

    public java.util.Set getDependencyArtifacts()
    {
        MavenProject this;
        java.util.Set $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Set dependencyArtifacts>;

        return $stack1;
    }

    public void setDependencyArtifacts(java.util.Set)
    {
        MavenProject this;
        java.util.Set dependencyArtifacts;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        dependencyArtifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.Set dependencyArtifacts> = dependencyArtifacts;

        return;
    }

    public void setReleaseArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        MavenProject this;
        org.apache.maven.artifact.repository.ArtifactRepository releaseArtifactRepository;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        releaseArtifactRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository releaseArtifactRepository> = releaseArtifactRepository;

        return;
    }

    public void setSnapshotArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        MavenProject this;
        org.apache.maven.artifact.repository.ArtifactRepository snapshotArtifactRepository;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        snapshotArtifactRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository snapshotArtifactRepository> = snapshotArtifactRepository;

        return;
    }

    public void setOriginalModel(org.apache.maven.model.Model)
    {
        MavenProject this;
        org.apache.maven.model.Model originalModel;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        originalModel := @parameter0: org.apache.maven.model.Model;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model originalModel> = originalModel;

        return;
    }

    public org.apache.maven.model.Model getOriginalModel()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model originalModel>;

        return $stack1;
    }

    public void setManagedVersionMap(java.util.Map)
    {
        MavenProject this;
        java.util.Map map;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        map := @parameter0: java.util.Map;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.Map managedVersionMap> = map;

        return;
    }

    public java.util.Map getManagedVersionMap()
    {
        MavenProject this;
        java.util.Map $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Map managedVersionMap>;

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object other;
        MavenProject this;
        boolean $stack3, $stack6, $stack9, $stack13, $stack10;
        org.apache.maven.project.MavenProject that, $r0, $r1, $r2;
        java.lang.String $stack4, $stack5, $stack7, $stack8, $stack11, $stack12;

        this := @this: MavenProject;

        other := @parameter0: java.lang.Object;

        if other != this goto label1;

        return 1;

     label1:
        $stack3 = other instanceof org.apache.maven.project.MavenProject;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.apache.maven.project.MavenProject) other;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack5 = virtualinvoke that.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        if $stack6 == 0 goto label3;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack8 = virtualinvoke that.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        if $stack9 == 0 goto label3;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack12 = virtualinvoke that.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack13 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        if $stack13 == 0 goto label3;

        $stack10 = 1;

        goto label4;

     label3:
        $stack10 = 0;

     label4:
        return $stack10;
    }

    public int hashCode()
    {
        MavenProject this;
        int $stack2, $stack4, $stack5, $stack7, $stack8, $stack10, hash#2;
        java.lang.String $stack3, $stack6, $stack9;
        org.apache.maven.project.MavenProject $r0, $r1, $r2;

        this := @this: MavenProject;

        $stack2 = 31 * 17;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke $stack3.<java.lang.String: int hashCode()>();

        hash#2 = $stack2 + $stack4;

        $stack5 = 31 * hash#2;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack7 = virtualinvoke $stack6.<java.lang.String: int hashCode()>();

        hash#2 = $stack5 + $stack7;

        $stack8 = 31 * hash#2;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack9 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack10 = virtualinvoke $stack9.<java.lang.String: int hashCode()>();

        hash#2 = $stack8 + $stack10;

        return hash#2;
    }

    public java.util.List getBuildExtensions()
    {
        MavenProject this;
        org.apache.maven.model.Build build;
        java.util.List $stack3, $stack4, $stack5, $stack6;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        build = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        if build == null goto label1;

        $stack4 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getExtensions()>();

        if $stack4 != null goto label2;

     label1:
        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack3;

     label2:
        $stack5 = virtualinvoke build.<org.apache.maven.model.Build: java.util.List getExtensions()>();

        $stack6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack5);

        return $stack6;
    }

    public void addProjectReference(org.apache.maven.project.MavenProject)
    {
        MavenProject this;
        org.apache.maven.project.MavenProject project, $r0;
        java.util.Map $stack2;
        java.lang.String $stack3, $stack4, $stack5, $stack6;

        this := @this: MavenProject;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r0.<org.apache.maven.project.MavenProject: java.util.Map projectReferences>;

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack5 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack6 = staticinvoke <org.apache.maven.project.MavenProject: java.lang.String getProjectReferenceId(java.lang.String,java.lang.String,java.lang.String)>($stack3, $stack4, $stack5);

        interfaceinvoke $stack2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack6, project);

        return;
    }

    public java.util.Properties getProperties()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        java.util.Properties $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: java.util.Properties getProperties()>();

        return $stack2;
    }

    public java.util.List getFilters()
    {
        MavenProject this;
        org.apache.maven.model.Build $stack1;
        java.util.List $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Build: java.util.List getFilters()>();

        return $stack2;
    }

    public java.util.Map getProjectReferences()
    {
        MavenProject this;
        java.util.Map $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Map projectReferences>;

        return $stack1;
    }

    public boolean isExecutionRoot()
    {
        MavenProject this;
        boolean $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: boolean executionRoot>;

        return $stack1;
    }

    public void setExecutionRoot(boolean)
    {
        MavenProject this;
        boolean executionRoot;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        executionRoot := @parameter0: boolean;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: boolean executionRoot> = executionRoot;

        return;
    }

    public java.lang.String getDefaultGoal()
    {
        MavenProject this;
        org.apache.maven.model.Build $stack1, $stack2;
        java.lang.String $stack3;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack3 = virtualinvoke $stack2.<org.apache.maven.model.Build: java.lang.String getDefaultGoal()>();

        goto label2;

     label1:
        $stack3 = null;

     label2:
        return $stack3;
    }

    public org.apache.maven.model.Plugin getPlugin(java.lang.String)
    {
        MavenProject this;
        org.apache.maven.model.Build $stack2;
        java.util.Map $stack3;
        java.lang.String pluginKey;
        java.lang.Object $stack4;
        org.apache.maven.model.Plugin $stack5;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        pluginKey := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack3 = virtualinvoke $stack2.<org.apache.maven.model.Build: java.util.Map getPluginsAsMap()>();

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(pluginKey);

        $stack5 = (org.apache.maven.model.Plugin) $stack4;

        return $stack5;
    }

    public java.lang.String toString()
    {
        MavenProject this;
        java.lang.String $stack4, $stack7, $stack10, $stack13, $stack16;
        java.io.File $stack12, $stack15;
        java.lang.StringBuilder $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3, $r4;

        this := @this: MavenProject;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MavenProject: ");

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack10 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack12 = virtualinvoke $r3.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        if $stack12 == null goto label1;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r4 = (org.apache.maven.project.MavenProject) this;

        $stack15 = virtualinvoke $r4.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        $stack16 = virtualinvoke $stack15.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

     label1:
        $stack13 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack13;
    }

    public org.apache.maven.project.MavenProject clone()
    {
        MavenProject this;
        java.lang.Object $stack3;
        org.apache.maven.project.MavenProject clone, $r0;
        java.lang.CloneNotSupportedException $stack4;
        java.lang.UnsupportedOperationException $u0;

        this := @this: MavenProject;

     label1:
        $stack3 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        clone = (org.apache.maven.project.MavenProject) $stack3;

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

        $u0 = new java.lang.UnsupportedOperationException;

        specialinvoke $u0.<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>($stack4);

        throw $u0;

     label4:
        $r0 = (org.apache.maven.project.MavenProject) this;

        specialinvoke clone.<org.apache.maven.project.MavenProject: void deepCopy(org.apache.maven.project.MavenProject)>($r0);

        return clone;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void setModel(org.apache.maven.model.Model)
    {
        MavenProject this;
        org.apache.maven.model.Model model;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        model := @parameter0: org.apache.maven.model.Model;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model model> = model;

        return;
    }

    protected void setAttachedArtifacts(java.util.List)
    {
        MavenProject this;
        java.util.List attachedArtifacts;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        attachedArtifacts := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List attachedArtifacts> = attachedArtifacts;

        return;
    }

    protected void setCompileSourceRoots(java.util.List)
    {
        MavenProject this;
        java.util.List compileSourceRoots;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        compileSourceRoots := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List compileSourceRoots> = compileSourceRoots;

        return;
    }

    protected void setTestCompileSourceRoots(java.util.List)
    {
        MavenProject this;
        java.util.List testCompileSourceRoots;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        testCompileSourceRoots := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List testCompileSourceRoots> = testCompileSourceRoots;

        return;
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository getReleaseArtifactRepository()
    {
        MavenProject this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository releaseArtifactRepository>;

        return $stack1;
    }

    protected org.apache.maven.artifact.repository.ArtifactRepository getSnapshotArtifactRepository()
    {
        MavenProject this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository snapshotArtifactRepository>;

        return $stack1;
    }

    private void deepCopy(org.apache.maven.project.MavenProject)
    {
        MavenProject this;
        org.apache.maven.project.MavenProject project, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.io.File $stack2, $stack3, $stack6, $stack72, $u0;
        java.util.Set $stack4, $stack5, $stack7, $stack8, $stack9, $stack23, $stack24, $stack60, $stack61, $stack65, $stack66, $stack68, $stack69, $stack75, $stack76, $stack78, $stack79;
        org.apache.maven.artifact.Artifact $stack10, $stack21, $stack29, $stack30;
        java.util.List $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack40, $stack43, $stack46, $stack49, $stack51, $stack52, $stack54, $stack55, $stack57, $stack58;
        org.apache.maven.model.Model $stack18, $stack19, $stack32, $stack36, $stack37;
        boolean $stack20;
        java.util.Map $stack22, $stack26;
        java.lang.String $stack73;
        java.util.ArrayList $u1, $u2, $u3, $u4;

        this := @this: MavenProject;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = project.<org.apache.maven.project.MavenProject: java.io.File file>;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.io.File file> = $stack2;

        $stack3 = project.<org.apache.maven.project.MavenProject: java.io.File basedir>;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.io.File basedir> = $stack3;

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getDependencyArtifacts()>();

        if $stack4 == null goto label01;

        $stack78 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getDependencyArtifacts()>();

        $stack79 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack78);

        $r2 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r2.<org.apache.maven.project.MavenProject: void setDependencyArtifacts(java.util.Set)>($stack79);

     label01:
        $stack5 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        if $stack5 == null goto label02;

        $stack75 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack76 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack75);

        $r3 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r3.<org.apache.maven.project.MavenProject: void setArtifacts(java.util.Set)>($stack76);

     label02:
        $stack6 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        if $stack6 == null goto label03;

        $u0 = new java.io.File;

        $stack72 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        $stack73 = virtualinvoke $stack72.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack73);

        $r4 = (org.apache.maven.project.MavenProject) this;

        $r4.<org.apache.maven.project.MavenProject: java.io.File parentFile> = $u0;

     label03:
        $stack7 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getPluginArtifacts()>();

        if $stack7 == null goto label04;

        $stack68 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getPluginArtifacts()>();

        $stack69 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack68);

        $r5 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r5.<org.apache.maven.project.MavenProject: void setPluginArtifacts(java.util.Set)>($stack69);

     label04:
        $stack8 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getReportArtifacts()>();

        if $stack8 == null goto label05;

        $stack65 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getReportArtifacts()>();

        $stack66 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack65);

        $r6 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r6.<org.apache.maven.project.MavenProject: void setReportArtifacts(java.util.Set)>($stack66);

     label05:
        $stack9 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getExtensionArtifacts()>();

        if $stack9 == null goto label06;

        $stack60 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getExtensionArtifacts()>();

        $stack61 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack60);

        $r7 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r7.<org.apache.maven.project.MavenProject: void setExtensionArtifacts(java.util.Set)>($stack61);

     label06:
        $stack10 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getParentArtifact()>();

        $r8 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r8.<org.apache.maven.project.MavenProject: void setParentArtifact(org.apache.maven.artifact.Artifact)>($stack10);

        $stack11 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemoteArtifactRepositories()>();

        if $stack11 == null goto label07;

        $stack57 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getRemoteArtifactRepositories()>();

        $stack58 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack57);

        $r9 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r9.<org.apache.maven.project.MavenProject: void setRemoteArtifactRepositories(java.util.List)>($stack58);

     label07:
        $stack12 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getPluginArtifactRepositories()>();

        if $stack12 == null goto label08;

        $stack54 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getPluginArtifactRepositories()>();

        $stack55 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack54);

        $r10 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r10.<org.apache.maven.project.MavenProject: void setPluginArtifactRepositories(java.util.List)>($stack55);

     label08:
        $stack13 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getActiveProfiles()>();

        if $stack13 == null goto label09;

        $stack51 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getActiveProfiles()>();

        $stack52 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack51);

        $r11 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r11.<org.apache.maven.project.MavenProject: void setActiveProfiles(java.util.List)>($stack52);

     label09:
        $stack14 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getAttachedArtifacts()>();

        if $stack14 == null goto label10;

        $u1 = new java.util.ArrayList;

        $stack49 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getAttachedArtifacts()>();

        specialinvoke $u1.<java.util.ArrayList: void <init>(java.util.Collection)>($stack49);

        $r12 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r12.<org.apache.maven.project.MavenProject: void setAttachedArtifacts(java.util.List)>($u1);

     label10:
        $stack15 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getCompileSourceRoots()>();

        if $stack15 == null goto label11;

        $u2 = new java.util.ArrayList;

        $stack46 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getCompileSourceRoots()>();

        specialinvoke $u2.<java.util.ArrayList: void <init>(java.util.Collection)>($stack46);

        $r13 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r13.<org.apache.maven.project.MavenProject: void setCompileSourceRoots(java.util.List)>($u2);

     label11:
        $stack16 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getTestCompileSourceRoots()>();

        if $stack16 == null goto label12;

        $u3 = new java.util.ArrayList;

        $stack43 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getTestCompileSourceRoots()>();

        specialinvoke $u3.<java.util.ArrayList: void <init>(java.util.Collection)>($stack43);

        $r14 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r14.<org.apache.maven.project.MavenProject: void setTestCompileSourceRoots(java.util.List)>($u3);

     label12:
        $stack17 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getScriptSourceRoots()>();

        if $stack17 == null goto label13;

        $u4 = new java.util.ArrayList;

        $stack40 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getScriptSourceRoots()>();

        specialinvoke $u4.<java.util.ArrayList: void <init>(java.util.Collection)>($stack40);

        $r15 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r15.<org.apache.maven.project.MavenProject: void setScriptSourceRoots(java.util.List)>($u4);

     label13:
        $stack18 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        if $stack18 == null goto label14;

        $stack36 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack37 = virtualinvoke $stack36.<org.apache.maven.model.Model: org.apache.maven.model.Model clone()>();

        $r16 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r16.<org.apache.maven.project.MavenProject: void setModel(org.apache.maven.model.Model)>($stack37);

     label14:
        $stack19 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getOriginalModel()>();

        if $stack19 == null goto label15;

        $stack32 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getOriginalModel()>();

        $r17 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r17.<org.apache.maven.project.MavenProject: void setOriginalModel(org.apache.maven.model.Model)>($stack32);

     label15:
        $stack20 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean isExecutionRoot()>();

        $r18 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r18.<org.apache.maven.project.MavenProject: void setExecutionRoot(boolean)>($stack20);

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getArtifact()>();

        if $stack21 == null goto label16;

        $stack29 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack30 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: org.apache.maven.artifact.Artifact copyArtifact(org.apache.maven.artifact.Artifact)>($stack29);

        $r19 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r19.<org.apache.maven.project.MavenProject: void setArtifact(org.apache.maven.artifact.Artifact)>($stack30);

     label16:
        $stack22 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Map getManagedVersionMap()>();

        if $stack22 == null goto label17;

        $stack26 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Map getManagedVersionMap()>();

        $r20 = (org.apache.maven.project.MavenProject) this;

        virtualinvoke $r20.<org.apache.maven.project.MavenProject: void setManagedVersionMap(java.util.Map)>($stack26);

     label17:
        $r21 = (org.apache.maven.project.MavenProject) this;

        $stack24 = $r21.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases>;

        $stack23 = project.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases>;

        interfaceinvoke $stack24.<java.util.Set: boolean addAll(java.util.Collection)>($stack23);

        return;
    }

    private void addArtifactPath(org.apache.maven.artifact.Artifact, java.util.List)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.io.File file;
        java.util.List classpath;
        java.lang.String $stack5;
        MavenProject this;

        this := @this: MavenProject;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        classpath := @parameter1: java.util.List;

        file = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        if file == null goto label1;

        $stack5 = virtualinvoke file.<java.io.File: java.lang.String getPath()>();

        interfaceinvoke classpath.<java.util.List: boolean add(java.lang.Object)>($stack5);

     label1:
        return;
    }

    private static java.lang.String getProjectReferenceId(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7, $stack8;
        java.lang.String groupId, artifactId, version, $stack10;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>(int)>(128);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(groupId);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(artifactId);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public void setContextValue(java.lang.String, java.lang.Object)
    {
        MavenProject this;
        java.util.Map $stack3, $stack4, $stack6;
        java.lang.Object value;
        java.lang.String key;
        java.util.HashMap $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack3 = $r0.<org.apache.maven.project.MavenProject: java.util.Map context>;

        if $stack3 != null goto label1;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.Map context> = $u0;

     label1:
        if value == null goto label2;

        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack6 = $r2.<org.apache.maven.project.MavenProject: java.util.Map context>;

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);

        goto label3;

     label2:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack4 = $r3.<org.apache.maven.project.MavenProject: java.util.Map context>;

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(key);

     label3:
        return;
    }

    public java.lang.Object getContextValue(java.lang.String)
    {
        MavenProject this;
        java.util.Map $stack2, $stack3;
        java.lang.String key;
        java.lang.Object $stack4;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        key := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r0.<org.apache.maven.project.MavenProject: java.util.Map context>;

        if $stack2 != null goto label1;

        return null;

     label1:
        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = $r1.<org.apache.maven.project.MavenProject: java.util.Map context>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        return $stack4;
    }

    public void setClassRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)
    {
        MavenProject this;
        org.codehaus.plexus.classworlds.realm.ClassRealm classRealm;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        classRealm := @parameter0: org.codehaus.plexus.classworlds.realm.ClassRealm;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.codehaus.plexus.classworlds.realm.ClassRealm classRealm> = classRealm;

        return;
    }

    public org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()
    {
        MavenProject this;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.codehaus.plexus.classworlds.realm.ClassRealm classRealm>;

        return $stack1;
    }

    public void setExtensionDependencyFilter(org.eclipse.aether.graph.DependencyFilter)
    {
        MavenProject this;
        org.eclipse.aether.graph.DependencyFilter extensionDependencyFilter;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        extensionDependencyFilter := @parameter0: org.eclipse.aether.graph.DependencyFilter;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.eclipse.aether.graph.DependencyFilter extensionDependencyFilter> = extensionDependencyFilter;

        return;
    }

    public org.eclipse.aether.graph.DependencyFilter getExtensionDependencyFilter()
    {
        MavenProject this;
        org.eclipse.aether.graph.DependencyFilter $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.eclipse.aether.graph.DependencyFilter extensionDependencyFilter>;

        return $stack1;
    }

    public void setResolvedArtifacts(java.util.Set)
    {
        MavenProject this;
        java.util.Set artifacts, $stack3;
        java.lang.ThreadLocal $stack4;
        java.lang.Object $stack5;
        org.apache.maven.project.MavenProject$ArtifactsHolder artifactsHolder;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        artifacts := @parameter0: java.util.Set;

        if artifacts == null goto label1;

        $stack3 = artifacts;

        goto label2;

     label1:
        $stack3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label2:
        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.Set resolvedArtifacts> = $stack3;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack4 = $r1.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder>;

        $stack5 = virtualinvoke $stack4.<java.lang.ThreadLocal: java.lang.Object get()>();

        artifactsHolder = (org.apache.maven.project.MavenProject$ArtifactsHolder) $stack5;

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$002(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Set)>(artifactsHolder, null);

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Map access$102(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Map)>(artifactsHolder, null);

        return;
    }

    public void setArtifactFilter(org.apache.maven.artifact.resolver.filter.ArtifactFilter)
    {
        MavenProject this;
        java.lang.ThreadLocal $stack3;
        java.lang.Object $stack4;
        org.apache.maven.project.MavenProject$ArtifactsHolder artifactsHolder;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter artifactFilter;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        artifactFilter := @parameter0: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack3 = $r0.<org.apache.maven.project.MavenProject: java.lang.ThreadLocal threadLocalArtifactsHolder>;

        $stack4 = virtualinvoke $stack3.<java.lang.ThreadLocal: java.lang.Object get()>();

        artifactsHolder = (org.apache.maven.project.MavenProject$ArtifactsHolder) $stack4;

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: org.apache.maven.artifact.resolver.filter.ArtifactFilter access$202(org.apache.maven.project.MavenProject$ArtifactsHolder,org.apache.maven.artifact.resolver.filter.ArtifactFilter)>(artifactsHolder, artifactFilter);

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Set access$002(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Set)>(artifactsHolder, null);

        staticinvoke <org.apache.maven.project.MavenProject$ArtifactsHolder: java.util.Map access$102(org.apache.maven.project.MavenProject$ArtifactsHolder,java.util.Map)>(artifactsHolder, null);

        return;
    }

    public boolean hasLifecyclePhase(java.lang.String)
    {
        MavenProject this;
        java.lang.String phase;
        java.util.Set $stack2;
        boolean $stack3;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        phase := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r0.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases>;

        $stack3 = interfaceinvoke $stack2.<java.util.Set: boolean contains(java.lang.Object)>(phase);

        return $stack3;
    }

    public void addLifecyclePhase(java.lang.String)
    {
        MavenProject this;
        java.lang.String lifecyclePhase;
        java.util.Set $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        lifecyclePhase := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r0.<org.apache.maven.project.MavenProject: java.util.Set lifecyclePhases>;

        interfaceinvoke $stack2.<java.util.Set: boolean add(java.lang.Object)>(lifecyclePhase);

        return;
    }

    public java.lang.String getModulePathAdjustment(org.apache.maven.project.MavenProject) throws java.io.IOException
    {
        org.apache.maven.project.MavenProject moduleProject, $r0, $r1, $r2, $r3, $r4;
        java.io.File moduleFile, $stack49, moduleDir;
        MavenProject this;
        java.util.Map $stack12, $stack29, $stack13;
        java.util.Iterator l5;
        boolean $stack21, $stack23, $stack42;
        java.lang.Object $stack22, $stack14;
        java.lang.String modulePath, module, moduleName, adjustment, $stack15;
        int $stack25, $stack26, $stack32, lastSlash;
        java.util.List moduleDir#3;
        java.util.HashMap $u0;

        this := @this: MavenProject;

        moduleProject := @parameter0: org.apache.maven.project.MavenProject;

        module = virtualinvoke moduleProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        moduleFile = virtualinvoke moduleProject.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        if moduleFile == null goto label1;

        $stack49 = virtualinvoke moduleFile.<java.io.File: java.io.File getCanonicalFile()>();

        moduleDir = virtualinvoke $stack49.<java.io.File: java.io.File getParentFile()>();

        module = virtualinvoke moduleDir.<java.io.File: java.lang.String getName()>();

     label1:
        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack12 = $r0.<org.apache.maven.project.MavenProject: java.util.Map moduleAdjustments>;

        if $stack12 != null goto label7;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.Map moduleAdjustments> = $u0;

        $r2 = (org.apache.maven.project.MavenProject) this;

        moduleDir#3 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.util.List getModules()>();

        if moduleDir#3 == null goto label7;

        l5 = interfaceinvoke moduleDir#3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack21 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label7;

        $stack22 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        modulePath = (java.lang.String) $stack22;

        moduleName = modulePath;

        $stack23 = virtualinvoke modulePath.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $stack23 != 0 goto label3;

        $stack42 = virtualinvoke modulePath.<java.lang.String: boolean endsWith(java.lang.String)>("\\");

        if $stack42 == 0 goto label4;

     label3:
        $stack25 = virtualinvoke modulePath.<java.lang.String: int length()>();

        $stack26 = $stack25 - 1;

        moduleName = virtualinvoke modulePath.<java.lang.String: java.lang.String substring(int,int)>(0, $stack26);

     label4:
        lastSlash = virtualinvoke moduleName.<java.lang.String: int lastIndexOf(int)>(47);

        if lastSlash >= 0 goto label5;

        lastSlash = virtualinvoke moduleName.<java.lang.String: int lastIndexOf(int)>(92);

     label5:
        adjustment = null;

        if lastSlash <= -1 goto label6;

        $stack32 = lastSlash + 1;

        moduleName = virtualinvoke moduleName.<java.lang.String: java.lang.String substring(int)>($stack32);

        adjustment = virtualinvoke modulePath.<java.lang.String: java.lang.String substring(int,int)>(0, lastSlash);

     label6:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack29 = $r3.<org.apache.maven.project.MavenProject: java.util.Map moduleAdjustments>;

        interfaceinvoke $stack29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(moduleName, adjustment);

        goto label2;

     label7:
        $r4 = (org.apache.maven.project.MavenProject) this;

        $stack13 = $r4.<org.apache.maven.project.MavenProject: java.util.Map moduleAdjustments>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>(module);

        $stack15 = (java.lang.String) $stack14;

        return $stack15;
    }

    public java.util.Set createArtifacts(org.apache.maven.artifact.factory.ArtifactFactory, java.lang.String, org.apache.maven.artifact.resolver.filter.ArtifactFilter) throws org.apache.maven.project.artifact.InvalidDependencyVersionException
    {
        org.apache.maven.artifact.factory.ArtifactFactory artifactFactory;
        MavenProject this;
        java.util.List $stack4;
        java.lang.String inheritedScope;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        java.util.Set $stack5;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        artifactFactory := @parameter0: org.apache.maven.artifact.factory.ArtifactFactory;

        inheritedScope := @parameter1: java.lang.String;

        filter := @parameter2: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.List getDependencies()>();

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack5 = staticinvoke <org.apache.maven.project.artifact.MavenMetadataSource: java.util.Set createArtifacts(org.apache.maven.artifact.factory.ArtifactFactory,java.util.List,java.lang.String,org.apache.maven.artifact.resolver.filter.ArtifactFilter,org.apache.maven.project.MavenProject)>(artifactFactory, $stack4, inheritedScope, filter, $r1);

        return $stack5;
    }

    protected void setScriptSourceRoots(java.util.List)
    {
        MavenProject this;
        java.util.List scriptSourceRoots;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        scriptSourceRoots := @parameter0: java.util.List;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.List scriptSourceRoots> = scriptSourceRoots;

        return;
    }

    public void addScriptSourceRoot(java.lang.String)
    {
        int $stack3;
        MavenProject this;
        java.util.List $stack4, $stack6;
        boolean $stack5;
        java.lang.String path, path#2;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        path := @parameter0: java.lang.String;

        if path == null goto label1;

        path#2 = virtualinvoke path.<java.lang.String: java.lang.String trim()>();

        $stack3 = virtualinvoke path#2.<java.lang.String: int length()>();

        if $stack3 == 0 goto label1;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.List getScriptSourceRoots()>();

        $stack5 = interfaceinvoke $stack4.<java.util.List: boolean contains(java.lang.Object)>(path#2);

        if $stack5 != 0 goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.List getScriptSourceRoots()>();

        interfaceinvoke $stack6.<java.util.List: boolean add(java.lang.Object)>(path#2);

     label1:
        return;
    }

    public java.util.List getScriptSourceRoots()
    {
        MavenProject this;
        java.util.List $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.List scriptSourceRoots>;

        return $stack1;
    }

    public java.util.List getCompileArtifacts()
    {
        MavenProject this;
        java.util.Set $stack5, $stack7;
        int $stack6;
        java.util.Iterator l2;
        boolean $stack9, $stack12, $stack16, $stack20, $stack25;
        java.lang.Object $stack10;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack11;
        java.lang.String $stack14, $stack15, $stack18, $stack19, $stack23, $stack24;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack6 = interfaceinvoke $stack5.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack6);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l2 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack10 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack10;

        $stack11 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack12 = interfaceinvoke $stack11.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack12 == 0 goto label3;

        $stack14 = "compile";

        $stack15 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>($stack15);

        if $stack16 != 0 goto label2;

        $stack18 = "provided";

        $stack19 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack20 = virtualinvoke $stack18.<java.lang.String: boolean equals(java.lang.Object)>($stack19);

        if $stack20 != 0 goto label2;

        $stack23 = "system";

        $stack24 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack25 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>($stack24);

        if $stack25 == 0 goto label3;

     label2:
        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(a);

     label3:
        goto label1;

     label4:
        return $u0;
    }

    public java.util.List getCompileDependencies()
    {
        MavenProject this;
        java.util.Set artifacts, $stack11;
        java.util.List $stack7, $stack14;
        boolean $stack8, $stack13, $stack18, $stack30, $stack47;
        int $stack10;
        java.util.Iterator l3;
        java.lang.Object $stack15;
        org.apache.maven.artifact.Artifact a;
        java.lang.String $stack16, $stack17, $stack28, $stack29, $stack45, $stack46, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25;
        java.util.ArrayList $u0;
        org.apache.maven.model.Dependency $u1;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        artifacts = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        if artifacts == null goto label1;

        $stack8 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack8 == 0 goto label2;

     label1:
        $stack7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack7;

     label2:
        $u0 = new java.util.ArrayList;

        $stack10 = interfaceinvoke artifacts.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack10);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label6;

        $stack15 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack15;

        $stack16 = "compile";

        $stack17 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack18 = virtualinvoke $stack16.<java.lang.String: boolean equals(java.lang.Object)>($stack17);

        if $stack18 != 0 goto label4;

        $stack28 = "provided";

        $stack29 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack30 = virtualinvoke $stack28.<java.lang.String: boolean equals(java.lang.Object)>($stack29);

        if $stack30 != 0 goto label4;

        $stack45 = "system";

        $stack46 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack47 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>($stack46);

        if $stack47 == 0 goto label5;

     label4:
        $u1 = new org.apache.maven.model.Dependency;

        specialinvoke $u1.<org.apache.maven.model.Dependency: void <init>()>();

        $stack20 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>($stack20);

        $stack21 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>($stack21);

        $stack22 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>($stack22);

        $stack23 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setScope(java.lang.String)>($stack23);

        $stack24 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setType(java.lang.String)>($stack24);

        $stack25 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getClassifier()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setClassifier(java.lang.String)>($stack25);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

     label5:
        goto label3;

     label6:
        $stack14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u0);

        return $stack14;
    }

    public java.util.List getTestArtifacts()
    {
        MavenProject this;
        java.util.Set $stack5, $stack7;
        int $stack6;
        java.util.Iterator l2;
        boolean $stack9, $stack12;
        java.lang.Object $stack10;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack11;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack6 = interfaceinvoke $stack5.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack6);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l2 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack10 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack10;

        $stack11 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack12 = interfaceinvoke $stack11.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack12 == 0 goto label2;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(a);

     label2:
        goto label1;

     label3:
        return $u0;
    }

    public java.util.List getTestDependencies()
    {
        MavenProject this;
        java.util.Set artifacts, $stack11;
        java.util.List $stack7, $stack14;
        boolean $stack8, $stack13;
        int $stack10;
        java.util.Iterator l3;
        java.lang.Object $stack15;
        org.apache.maven.artifact.Artifact a;
        java.lang.String $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        java.util.ArrayList $u0;
        org.apache.maven.model.Dependency $u1;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        artifacts = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        if artifacts == null goto label1;

        $stack8 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack8 == 0 goto label2;

     label1:
        $stack7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack7;

     label2:
        $u0 = new java.util.ArrayList;

        $stack10 = interfaceinvoke artifacts.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack10);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label4;

        $stack15 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack15;

        $u1 = new org.apache.maven.model.Dependency;

        specialinvoke $u1.<org.apache.maven.model.Dependency: void <init>()>();

        $stack17 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>($stack17);

        $stack18 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>($stack18);

        $stack19 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>($stack19);

        $stack20 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setScope(java.lang.String)>($stack20);

        $stack21 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setType(java.lang.String)>($stack21);

        $stack22 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getClassifier()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setClassifier(java.lang.String)>($stack22);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

        goto label3;

     label4:
        $stack14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u0);

        return $stack14;
    }

    public java.util.List getRuntimeDependencies()
    {
        MavenProject this;
        java.util.Set artifacts, $stack11;
        java.util.List $stack7, $stack14;
        boolean $stack8, $stack13, $stack18, $stack30;
        int $stack10;
        java.util.Iterator l3;
        java.lang.Object $stack15;
        org.apache.maven.artifact.Artifact a;
        java.lang.String $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack28, $stack29;
        java.util.ArrayList $u0;
        org.apache.maven.model.Dependency $u1;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        artifacts = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        if artifacts == null goto label1;

        $stack8 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack8 == 0 goto label2;

     label1:
        $stack7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack7;

     label2:
        $u0 = new java.util.ArrayList;

        $stack10 = interfaceinvoke artifacts.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack10);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label6;

        $stack15 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack15;

        $stack16 = "compile";

        $stack17 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack18 = virtualinvoke $stack16.<java.lang.String: boolean equals(java.lang.Object)>($stack17);

        if $stack18 != 0 goto label4;

        $stack28 = "runtime";

        $stack29 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack30 = virtualinvoke $stack28.<java.lang.String: boolean equals(java.lang.Object)>($stack29);

        if $stack30 == 0 goto label5;

     label4:
        $u1 = new org.apache.maven.model.Dependency;

        specialinvoke $u1.<org.apache.maven.model.Dependency: void <init>()>();

        $stack20 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>($stack20);

        $stack21 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>($stack21);

        $stack22 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>($stack22);

        $stack23 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setScope(java.lang.String)>($stack23);

        $stack24 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setType(java.lang.String)>($stack24);

        $stack25 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getClassifier()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setClassifier(java.lang.String)>($stack25);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

     label5:
        goto label3;

     label6:
        $stack14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u0);

        return $stack14;
    }

    public java.util.List getRuntimeArtifacts()
    {
        MavenProject this;
        java.util.Set $stack5, $stack7;
        int $stack6;
        java.util.Iterator l2;
        boolean $stack9, $stack12, $stack16, $stack20;
        java.lang.Object $stack10;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack11;
        java.lang.String $stack14, $stack15, $stack18, $stack19;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack6 = interfaceinvoke $stack5.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack6);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l2 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack10 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack10;

        $stack11 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack12 = interfaceinvoke $stack11.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack12 == 0 goto label3;

        $stack14 = "compile";

        $stack15 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>($stack15);

        if $stack16 != 0 goto label2;

        $stack18 = "runtime";

        $stack19 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack20 = virtualinvoke $stack18.<java.lang.String: boolean equals(java.lang.Object)>($stack19);

        if $stack20 == 0 goto label3;

     label2:
        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(a);

     label3:
        goto label1;

     label4:
        return $u0;
    }

    public java.util.List getSystemClasspathElements() throws org.apache.maven.artifact.DependencyResolutionRequiredException
    {
        MavenProject this;
        java.util.Set $stack6, $stack10;
        int $stack7;
        org.apache.maven.model.Build $stack8;
        java.lang.String d, $stack17, $stack18;
        java.util.Iterator l3;
        java.lang.Object $stack13;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack14;
        boolean $stack15, $stack19, $stack12;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack6 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack7 = interfaceinvoke $stack6.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack7);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack8 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        d = virtualinvoke $stack8.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        if d == null goto label1;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(d);

     label1:
        $r2 = (org.apache.maven.project.MavenProject) this;

        $stack10 = virtualinvoke $r2.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label4;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack13;

        $stack14 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack15 = interfaceinvoke $stack14.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack15 == 0 goto label3;

        $stack17 = "system";

        $stack18 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack19 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label3;

        $r3 = (org.apache.maven.project.MavenProject) this;

        specialinvoke $r3.<org.apache.maven.project.MavenProject: void addArtifactPath(org.apache.maven.artifact.Artifact,java.util.List)>(a, $u0);

     label3:
        goto label2;

     label4:
        return $u0;
    }

    public java.util.List getSystemArtifacts()
    {
        MavenProject this;
        java.util.Set $stack5, $stack7;
        int $stack6;
        java.util.Iterator l2;
        boolean $stack9, $stack12, $stack16;
        java.lang.Object $stack10;
        org.apache.maven.artifact.Artifact a;
        org.apache.maven.artifact.handler.ArtifactHandler $stack11;
        java.lang.String $stack14, $stack15;
        java.util.ArrayList $u0;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $u0 = new java.util.ArrayList;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack6 = interfaceinvoke $stack5.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack6);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l2 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack10 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack10;

        $stack11 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack12 = interfaceinvoke $stack11.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        if $stack12 == 0 goto label2;

        $stack14 = "system";

        $stack15 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>($stack15);

        if $stack16 == 0 goto label2;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(a);

     label2:
        goto label1;

     label3:
        return $u0;
    }

    public java.util.List getSystemDependencies()
    {
        MavenProject this;
        java.util.Set artifacts, $stack11;
        java.util.List $stack7, $stack14;
        boolean $stack8, $stack13, $stack18;
        int $stack10;
        java.util.Iterator l3;
        java.lang.Object $stack15;
        org.apache.maven.artifact.Artifact a;
        java.lang.String $stack16, $stack17, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26;
        java.util.ArrayList $u0;
        org.apache.maven.model.Dependency $u1;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        artifacts = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        if artifacts == null goto label1;

        $stack8 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack8 == 0 goto label2;

     label1:
        $stack7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack7;

     label2:
        $u0 = new java.util.ArrayList;

        $stack10 = interfaceinvoke artifacts.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack10);

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack11 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l3 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label5;

        $stack15 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack15;

        $stack16 = "system";

        $stack17 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack18 = virtualinvoke $stack16.<java.lang.String: boolean equals(java.lang.Object)>($stack17);

        if $stack18 == 0 goto label4;

        $u1 = new org.apache.maven.model.Dependency;

        specialinvoke $u1.<org.apache.maven.model.Dependency: void <init>()>();

        $stack21 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>($stack21);

        $stack22 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>($stack22);

        $stack23 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>($stack23);

        $stack24 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setScope(java.lang.String)>($stack24);

        $stack25 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setType(java.lang.String)>($stack25);

        $stack26 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getClassifier()>();

        virtualinvoke $u1.<org.apache.maven.model.Dependency: void setClassifier(java.lang.String)>($stack26);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

     label4:
        goto label3;

     label5:
        $stack14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u0);

        return $stack14;
    }

    public void setReporting(org.apache.maven.model.Reporting)
    {
        MavenProject this;
        org.apache.maven.model.Model $stack2;
        org.apache.maven.model.Reporting reporting;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        reporting := @parameter0: org.apache.maven.model.Reporting;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $stack2.<org.apache.maven.model.Model: void setReporting(org.apache.maven.model.Reporting)>(reporting);

        return;
    }

    public org.apache.maven.model.Reporting getReporting()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1;
        org.apache.maven.model.Reporting $stack2;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.Reporting getReporting()>();

        return $stack2;
    }

    public void setReportArtifacts(java.util.Set)
    {
        MavenProject this;
        java.util.Set reportArtifacts;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        reportArtifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.Set reportArtifacts> = reportArtifacts;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.Map reportArtifactMap> = null;

        return;
    }

    public java.util.Set getReportArtifacts()
    {
        MavenProject this;
        java.util.Set $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Set reportArtifacts>;

        return $stack1;
    }

    public java.util.Map getReportArtifactMap()
    {
        MavenProject this;
        java.util.Map $stack1, $stack2, $stack4;
        java.util.Set $stack3;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Map reportArtifactMap>;

        if $stack1 != null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getReportArtifacts()>();

        $stack4 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.Map artifactMapByVersionlessId(java.util.Collection)>($stack3);

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.Map reportArtifactMap> = $stack4;

     label1:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r3.<org.apache.maven.project.MavenProject: java.util.Map reportArtifactMap>;

        return $stack2;
    }

    public void setExtensionArtifacts(java.util.Set)
    {
        MavenProject this;
        java.util.Set extensionArtifacts;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        extensionArtifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: java.util.Set extensionArtifacts> = extensionArtifacts;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $r1.<org.apache.maven.project.MavenProject: java.util.Map extensionArtifactMap> = null;

        return;
    }

    public java.util.Set getExtensionArtifacts()
    {
        MavenProject this;
        java.util.Set $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Set extensionArtifacts>;

        return $stack1;
    }

    public java.util.Map getExtensionArtifactMap()
    {
        MavenProject this;
        java.util.Map $stack1, $stack2, $stack4;
        java.util.Set $stack3;
        org.apache.maven.project.MavenProject $r0, $r1, $r2, $r3;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: java.util.Map extensionArtifactMap>;

        if $stack1 != null goto label1;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.Set getExtensionArtifacts()>();

        $stack4 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.Map artifactMapByVersionlessId(java.util.Collection)>($stack3);

        $r2 = (org.apache.maven.project.MavenProject) this;

        $r2.<org.apache.maven.project.MavenProject: java.util.Map extensionArtifactMap> = $stack4;

     label1:
        $r3 = (org.apache.maven.project.MavenProject) this;

        $stack2 = $r3.<org.apache.maven.project.MavenProject: java.util.Map extensionArtifactMap>;

        return $stack2;
    }

    public java.util.List getReportPlugins()
    {
        MavenProject this;
        org.apache.maven.model.Model $stack1, $stack3;
        org.apache.maven.model.Reporting $stack2, $stack4;
        java.util.List $stack5, $stack6, $stack7;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack2 = virtualinvoke $stack1.<org.apache.maven.model.Model: org.apache.maven.model.Reporting getReporting()>();

        if $stack2 != null goto label1;

        $stack7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack7;

     label1:
        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack4 = virtualinvoke $stack3.<org.apache.maven.model.Model: org.apache.maven.model.Reporting getReporting()>();

        $stack5 = virtualinvoke $stack4.<org.apache.maven.model.Reporting: java.util.List getPlugins()>();

        $stack6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack5);

        return $stack6;
    }

    public org.codehaus.plexus.util.xml.Xpp3Dom getReportConfiguration(java.lang.String, java.lang.String, java.lang.String)
    {
        MavenProject this;
        java.util.List $stack10, $stack13;
        java.util.Iterator l5;
        boolean $stack15, $stack19, $stack22;
        java.lang.Object $stack17, $stack23, $stack25, $stack26;
        org.apache.maven.model.ReportPlugin plugin;
        java.lang.String pluginGroupId, $stack18, pluginArtifactId, $stack21, reportSetId;
        java.util.Map $stack24;
        org.apache.maven.model.ReportSet reportSet;
        org.codehaus.plexus.util.xml.Xpp3Dom executionConfiguration, dom, $u0, $u1;
        org.apache.maven.project.MavenProject $r0, $r1;

        this := @this: MavenProject;

        pluginGroupId := @parameter0: java.lang.String;

        pluginArtifactId := @parameter1: java.lang.String;

        reportSetId := @parameter2: java.lang.String;

        dom = null;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack10 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: java.util.List getReportPlugins()>();

        if $stack10 == null goto label4;

        $r1 = (org.apache.maven.project.MavenProject) this;

        $stack13 = virtualinvoke $r1.<org.apache.maven.project.MavenProject: java.util.List getReportPlugins()>();

        l5 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack15 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label4;

        $stack17 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.ReportPlugin) $stack17;

        $stack18 = virtualinvoke plugin.<org.apache.maven.model.ReportPlugin: java.lang.String getGroupId()>();

        $stack19 = virtualinvoke pluginGroupId.<java.lang.String: boolean equals(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label3;

        $stack21 = virtualinvoke plugin.<org.apache.maven.model.ReportPlugin: java.lang.String getArtifactId()>();

        $stack22 = virtualinvoke pluginArtifactId.<java.lang.String: boolean equals(java.lang.Object)>($stack21);

        if $stack22 == 0 goto label3;

        $stack23 = virtualinvoke plugin.<org.apache.maven.model.ReportPlugin: java.lang.Object getConfiguration()>();

        dom = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack23;

        if reportSetId == null goto label4;

        $stack24 = virtualinvoke plugin.<org.apache.maven.model.ReportPlugin: java.util.Map getReportSetsAsMap()>();

        $stack25 = interfaceinvoke $stack24.<java.util.Map: java.lang.Object get(java.lang.Object)>(reportSetId);

        reportSet = (org.apache.maven.model.ReportSet) $stack25;

        if reportSet == null goto label2;

        $stack26 = virtualinvoke reportSet.<org.apache.maven.model.ReportSet: java.lang.Object getConfiguration()>();

        executionConfiguration = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack26;

        if executionConfiguration == null goto label2;

        $u0 = new org.codehaus.plexus.util.xml.Xpp3Dom;

        specialinvoke $u0.<org.codehaus.plexus.util.xml.Xpp3Dom: void <init>(org.codehaus.plexus.util.xml.Xpp3Dom)>(executionConfiguration);

        dom = staticinvoke <org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom mergeXpp3Dom(org.codehaus.plexus.util.xml.Xpp3Dom,org.codehaus.plexus.util.xml.Xpp3Dom)>($u0, dom);

     label2:
        goto label4;

     label3:
        goto label1;

     label4:
        if dom == null goto label5;

        $u1 = new org.codehaus.plexus.util.xml.Xpp3Dom;

        specialinvoke $u1.<org.codehaus.plexus.util.xml.Xpp3Dom: void <init>(org.codehaus.plexus.util.xml.Xpp3Dom)>(dom);

        dom = $u1;

     label5:
        return dom;
    }

    public void attachArtifact(java.lang.String, java.lang.String, java.io.File)
    {
        MavenProject this;
        java.lang.String type, classifier;
        java.io.File file;

        this := @this: MavenProject;

        type := @parameter0: java.lang.String;

        classifier := @parameter1: java.lang.String;

        file := @parameter2: java.io.File;

        return;
    }

    public void writeModel(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer writer;
        MavenProject this;
        org.apache.maven.model.Model $stack4;
        org.apache.maven.model.io.xpp3.MavenXpp3Writer $u0;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        writer := @parameter0: java.io.Writer;

        $u0 = new org.apache.maven.model.io.xpp3.MavenXpp3Writer;

        specialinvoke $u0.<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void <init>()>();

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        virtualinvoke $u0.<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void write(java.io.Writer,org.apache.maven.model.Model)>(writer, $stack4);

        return;
    }

    public void writeOriginalModel(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer writer;
        MavenProject this;
        org.apache.maven.model.Model $stack4;
        org.apache.maven.model.io.xpp3.MavenXpp3Writer $u0;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        writer := @parameter0: java.io.Writer;

        $u0 = new org.apache.maven.model.io.xpp3.MavenXpp3Writer;

        specialinvoke $u0.<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void <init>()>();

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getOriginalModel()>();

        virtualinvoke $u0.<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void write(java.io.Writer,org.apache.maven.model.Model)>(writer, $stack4);

        return;
    }

    public org.apache.maven.artifact.Artifact replaceWithActiveArtifact(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact pluginArtifact;
        MavenProject this;

        this := @this: MavenProject;

        pluginArtifact := @parameter0: org.apache.maven.artifact.Artifact;

        return pluginArtifact;
    }

    public org.apache.maven.project.ProjectBuildingRequest getProjectBuildingRequest()
    {
        MavenProject this;
        org.apache.maven.project.ProjectBuildingRequest $stack1;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.ProjectBuildingRequest projectBuilderConfiguration>;

        return $stack1;
    }

    public void setProjectBuildingRequest(org.apache.maven.project.ProjectBuildingRequest)
    {
        MavenProject this;
        org.apache.maven.project.ProjectBuildingRequest projectBuildingRequest;
        org.apache.maven.project.MavenProject $r0;

        this := @this: MavenProject;

        projectBuildingRequest := @parameter0: org.apache.maven.project.ProjectBuildingRequest;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.ProjectBuildingRequest projectBuilderConfiguration> = projectBuildingRequest;

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        MavenProject this;
        org.apache.maven.project.MavenProject $stack1, $r0;

        this := @this: MavenProject;

        $r0 = (org.apache.maven.project.MavenProject) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject clone()>();

        return $stack1;
    }

    private static org.apache.maven.project.MavenProject$ArtifactsHolder lambda$new$0()
    {
        org.apache.maven.project.MavenProject$ArtifactsHolder $stack0;

        $stack0 = new org.apache.maven.project.MavenProject$ArtifactsHolder;

        specialinvoke $stack0.<org.apache.maven.project.MavenProject$ArtifactsHolder: void <init>(org.apache.maven.project.MavenProject$1)>(null);

        return $stack0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $stack0;

        <MavenProject: java.lang.String EMPTY_PROJECT_VERSION> = "0";

        <MavenProject: java.lang.String EMPTY_PROJECT_ARTIFACT_ID> = "empty-project";

        <MavenProject: java.lang.String EMPTY_PROJECT_GROUP_ID> = "unknown";

        $stack0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/maven/project/MavenProject;");

        <org.apache.maven.project.MavenProject: org.slf4j.Logger LOGGER> = $stack0;

        return;
    }
}
