public class MavenProjectTest extends org.apache.maven.project.AbstractMavenProjectTestCase
{

    public void <init>()
    {
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        specialinvoke this.<org.apache.maven.project.AbstractMavenProjectTestCase: void <init>()>();

        return;
    }

    public void testShouldInterpretChildPathAdjustmentBasedOnModulePaths() throws java.io.IOException
    {
        org.apache.maven.model.Model $stack7, $stack9;
        org.apache.maven.project.MavenProject $stack8, $stack10;
        java.io.File $stack11;
        java.lang.String $stack12, $stack18, adjustment;
        java.lang.StringBuilder $stack13, $stack14, $stack16, $stack17;
        long $stack15;
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        $stack7 = new org.apache.maven.model.Model;

        specialinvoke $stack7.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $stack7.<org.apache.maven.model.Model: void addModule(java.lang.String)>("../child");

        $stack8 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack8.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack7);

        $stack9 = new org.apache.maven.model.Model;

        specialinvoke $stack9.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $stack9.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("artifact");

        $stack10 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack10.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack9);

        $stack11 = new java.io.File;

        $stack12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        $stack13 = new java.lang.StringBuilder;

        specialinvoke $stack13.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maven-project-tests");

        $stack15 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/child/pom.xml");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack11.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack12, $stack18);

        virtualinvoke $stack10.<org.apache.maven.project.MavenProject: void setFile(java.io.File)>($stack11);

        adjustment = virtualinvoke $stack8.<org.apache.maven.project.MavenProject: java.lang.String getModulePathAdjustment(org.apache.maven.project.MavenProject)>($stack10);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(adjustment);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("..", adjustment);

        return;
    }

    public void testIdentityProtoInheritance()
    {
        org.apache.maven.model.Parent $stack4;
        org.apache.maven.model.Model $stack5;
        org.apache.maven.project.MavenProject $stack6;
        java.lang.String $stack8, $stack10, $stack12;
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        $stack4 = new org.apache.maven.model.Parent;

        specialinvoke $stack4.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $stack4.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("test-group");

        virtualinvoke $stack4.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("1000");

        virtualinvoke $stack4.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("test-artifact");

        $stack5 = new org.apache.maven.model.Model;

        specialinvoke $stack5.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $stack5.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($stack4);

        virtualinvoke $stack5.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("real-artifact");

        $stack6 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack6.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack5);

        $stack8 = virtualinvoke $stack6.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("test-group", $stack8, "groupId proto-inheritance failed.");

        $stack10 = virtualinvoke $stack6.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("real-artifact", $stack10, "artifactId is masked.");

        $stack12 = virtualinvoke $stack6.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1000", $stack12, "version proto-inheritance failed.");

        virtualinvoke $stack6.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        return;
    }

    public void testEmptyConstructor()
    {
        org.apache.maven.project.MavenProject $stack2;
        java.lang.String $stack4;
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        $stack2 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack2.<org.apache.maven.project.MavenProject: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("unknown:empty-project:jar:0", $stack4);

        return;
    }

    public void testClone() throws java.lang.Exception
    {
        java.io.File f;
        MavenProjectTest this;
        org.apache.maven.project.MavenProject projectToClone, clonedProject;
        java.lang.String $stack9;
        java.util.Map clonedMap;
        boolean $stack11;
        org.apache.maven.project.MavenProjectTest $r0;

        this := @this: MavenProjectTest;

        f = staticinvoke <org.apache.maven.project.MavenProjectTest: java.io.File getFileForClasspathResource(java.lang.String)>("canonical-pom.xml");

        $r0 = (org.apache.maven.project.MavenProjectTest) this;

        projectToClone = virtualinvoke $r0.<org.apache.maven.project.MavenProjectTest: org.apache.maven.project.MavenProject getProject(java.io.File)>(f);

        clonedProject = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject clone()>();

        $stack9 = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-core", $stack9);

        clonedMap = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.util.Map getManagedVersionMap()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(clonedMap, "ManagedVersionMap not copied");

        $stack11 = interfaceinvoke clonedMap.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack11, "ManagedVersionMap is not empty");

        return;
    }

    public void testCloneWithDependencyManagement() throws java.lang.Exception
    {
        java.io.File f;
        MavenProjectTest this;
        org.apache.maven.project.MavenProject projectToClone, clonedProject;
        org.apache.maven.model.DependencyManagement dep;
        java.util.List list;
        boolean $stack12, $stack14, $stack19, $stack20, $stack34, $stack26, $stack21;
        java.util.Map map, clonedMap;
        java.lang.String $stack17;
        org.apache.maven.project.MavenProjectTest $r0;

        this := @this: MavenProjectTest;

        f = staticinvoke <org.apache.maven.project.MavenProjectTest: java.io.File getFileForClasspathResource(java.lang.String)>("dependencyManagement-pom.xml");

        $r0 = (org.apache.maven.project.MavenProjectTest) this;

        projectToClone = virtualinvoke $r0.<org.apache.maven.project.MavenProjectTest: org.apache.maven.project.MavenProject getProjectWithDependencies(java.io.File)>(f);

        dep = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: org.apache.maven.model.DependencyManagement getDependencyManagement()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(dep, "No dependencyManagement");

        list = virtualinvoke dep.<org.apache.maven.model.DependencyManagement: java.util.List getDependencies()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(list, "No dependencies");

        $stack12 = interfaceinvoke list.<java.util.List: boolean isEmpty()>();

        if $stack12 != 0 goto label1;

        $stack34 = 1;

        goto label2;

     label1:
        $stack34 = 0;

     label2:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack34, "Empty dependency list");

        map = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: java.util.Map getManagedVersionMap()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(map, "No ManagedVersionMap");

        $stack14 = interfaceinvoke map.<java.util.Map: boolean isEmpty()>();

        if $stack14 != 0 goto label3;

        $stack26 = 1;

        goto label4;

     label3:
        $stack26 = 0;

     label4:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack26, "ManagedVersionMap is empty");

        clonedProject = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject clone()>();

        $stack17 = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-core", $stack17);

        clonedMap = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.util.Map getManagedVersionMap()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(clonedMap, "ManagedVersionMap not copied");

        $stack19 = interfaceinvoke clonedMap.<java.util.Map: boolean isEmpty()>();

        if $stack19 != 0 goto label5;

        $stack21 = 1;

        goto label6;

     label5:
        $stack21 = 0;

     label6:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack21, "ManagedVersionMap is empty");

        $stack20 = interfaceinvoke clonedMap.<java.util.Map: boolean containsKey(java.lang.Object)>("maven-test:maven-test-b:jar");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack20, "ManagedVersionMap does not contain test key");

        return;
    }

    public void testGetModulePathAdjustment() throws java.io.IOException
    {
        org.apache.maven.model.Model $stack6, $stack9;
        org.apache.maven.project.MavenProject $stack7, $stack10;
        java.io.File $stack8, $stack11;
        java.lang.String pathAdjustment;
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        $stack6 = new org.apache.maven.model.Model;

        specialinvoke $stack6.<org.apache.maven.model.Model: void <init>()>();

        $stack7 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack7.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack6);

        $stack8 = new java.io.File;

        specialinvoke $stack8.<java.io.File: void <init>(java.lang.String)>("module-dir/pom.xml");

        virtualinvoke $stack7.<org.apache.maven.project.MavenProject: void setFile(java.io.File)>($stack8);

        $stack9 = new org.apache.maven.model.Model;

        specialinvoke $stack9.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $stack9.<org.apache.maven.model.Model: void addModule(java.lang.String)>("../module-dir");

        $stack10 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack10.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack9);

        $stack11 = new java.io.File;

        specialinvoke $stack11.<java.io.File: void <init>(java.lang.String)>("parent-dir/pom.xml");

        virtualinvoke $stack10.<org.apache.maven.project.MavenProject: void setFile(java.io.File)>($stack11);

        pathAdjustment = virtualinvoke $stack10.<org.apache.maven.project.MavenProject: java.lang.String getModulePathAdjustment(org.apache.maven.project.MavenProject)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("..", pathAdjustment);

        return;
    }

    public void testCloneWithDistributionManagement() throws java.lang.Exception
    {
        java.io.File f;
        MavenProjectTest this;
        org.apache.maven.project.MavenProject projectToClone, clonedProject;
        org.apache.maven.artifact.repository.ArtifactRepository $stack7;
        org.apache.maven.project.MavenProjectTest $r0;

        this := @this: MavenProjectTest;

        f = staticinvoke <org.apache.maven.project.MavenProjectTest: java.io.File getFileForClasspathResource(java.lang.String)>("distributionManagement-pom.xml");

        $r0 = (org.apache.maven.project.MavenProjectTest) this;

        projectToClone = virtualinvoke $r0.<org.apache.maven.project.MavenProjectTest: org.apache.maven.project.MavenProject getProject(java.io.File)>(f);

        clonedProject = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject clone()>();

        $stack7 = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.repository.ArtifactRepository getDistributionManagementArtifactRepository()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>($stack7, "clonedProject - distributionManagement");

        return;
    }

    public void testCloneWithActiveProfile() throws java.lang.Exception
    {
        java.io.File f;
        MavenProjectTest this;
        org.apache.maven.project.MavenProject projectToClone, clonedProject;
        java.util.List activeProfilesOrig, activeProfilesClone;
        int $stack10, $stack14;
        org.apache.maven.project.MavenProjectTest $r0;

        this := @this: MavenProjectTest;

        f = staticinvoke <org.apache.maven.project.MavenProjectTest: java.io.File getFileForClasspathResource(java.lang.String)>("withActiveByDefaultProfile-pom.xml");

        $r0 = (org.apache.maven.project.MavenProjectTest) this;

        projectToClone = virtualinvoke $r0.<org.apache.maven.project.MavenProjectTest: org.apache.maven.project.MavenProject getProject(java.io.File)>(f);

        activeProfilesOrig = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: java.util.List getActiveProfiles()>();

        $stack10 = interfaceinvoke activeProfilesOrig.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack10, "Expecting 1 active profile");

        clonedProject = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject clone()>();

        activeProfilesClone = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.util.List getActiveProfiles()>();

        $stack14 = interfaceinvoke activeProfilesClone.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack14, "Expecting 1 active profile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotSame(java.lang.Object,java.lang.Object,java.lang.String)>(activeProfilesOrig, activeProfilesClone, "The list of active profiles should have been cloned too but is same");

        return;
    }

    public void testCloneWithBaseDir() throws java.lang.Exception
    {
        java.io.File f, $stack8, $stack10, $stack11, $stack12, $stack13, $u0, $u1;
        MavenProjectTest this;
        org.apache.maven.project.MavenProject projectToClone, clonedProject;
        org.apache.maven.project.MavenProjectTest $r0;

        this := @this: MavenProjectTest;

        f = staticinvoke <org.apache.maven.project.MavenProjectTest: java.io.File getFileForClasspathResource(java.lang.String)>("canonical-pom.xml");

        $r0 = (org.apache.maven.project.MavenProjectTest) this;

        projectToClone = virtualinvoke $r0.<org.apache.maven.project.MavenProjectTest: org.apache.maven.project.MavenProject getProject(java.io.File)>(f);

        $u1 = new java.io.File;

        $u0 = new java.io.File;

        $stack8 = virtualinvoke f.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $u0.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack8, "target");

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($u0, "flattened.xml");

        virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: void setPomFile(java.io.File)>($u1);

        clonedProject = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject clone()>();

        $stack10 = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        $stack11 = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($stack10, $stack11, "POM file is preserved across clone");

        $stack12 = virtualinvoke projectToClone.<org.apache.maven.project.MavenProject: java.io.File getBasedir()>();

        $stack13 = virtualinvoke clonedProject.<org.apache.maven.project.MavenProject: java.io.File getBasedir()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($stack12, $stack13, "Base directory is preserved across clone");

        return;
    }

    public void testUndefinedOutputDirectory() throws java.lang.Exception
    {
        MavenProjectTest this;
        java.util.List $stack3, $stack4, $stack5, $stack6;
        org.apache.maven.project.MavenProject $u0;
        org.apache.maven.project.MavenProjectTest $r0, $r1, $r2, $r3;

        this := @this: MavenProjectTest;

        $u0 = new org.apache.maven.project.MavenProject;

        specialinvoke $u0.<org.apache.maven.project.MavenProject: void <init>()>();

        $stack3 = virtualinvoke $u0.<org.apache.maven.project.MavenProject: java.util.List getCompileClasspathElements()>();

        $r0 = (org.apache.maven.project.MavenProjectTest) this;

        specialinvoke $r0.<org.apache.maven.project.MavenProjectTest: void assertNoNulls(java.util.List)>($stack3);

        $stack4 = virtualinvoke $u0.<org.apache.maven.project.MavenProject: java.util.List getSystemClasspathElements()>();

        $r1 = (org.apache.maven.project.MavenProjectTest) this;

        specialinvoke $r1.<org.apache.maven.project.MavenProjectTest: void assertNoNulls(java.util.List)>($stack4);

        $stack5 = virtualinvoke $u0.<org.apache.maven.project.MavenProject: java.util.List getRuntimeClasspathElements()>();

        $r2 = (org.apache.maven.project.MavenProjectTest) this;

        specialinvoke $r2.<org.apache.maven.project.MavenProjectTest: void assertNoNulls(java.util.List)>($stack5);

        $stack6 = virtualinvoke $u0.<org.apache.maven.project.MavenProject: java.util.List getTestClasspathElements()>();

        $r3 = (org.apache.maven.project.MavenProjectTest) this;

        specialinvoke $r3.<org.apache.maven.project.MavenProjectTest: void assertNoNulls(java.util.List)>($stack6);

        return;
    }

    public void testAddDotFile()
    {
        org.apache.maven.project.MavenProject $stack3;
        java.io.File $stack4, $stack6;
        java.lang.String $stack5, $stack7;
        java.util.List $stack9;
        int $stack10;
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        $stack3 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack3.<org.apache.maven.project.MavenProject: void <init>()>();

        $stack4 = new java.io.File;

        $stack5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $stack4.<java.io.File: void <init>(java.lang.String)>($stack5);

        $stack6 = new java.io.File;

        specialinvoke $stack6.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack4, "file");

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void setFile(java.io.File)>($stack6);

        $stack7 = virtualinvoke $stack4.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void addCompileSourceRoot(java.lang.String)>($stack7);

        virtualinvoke $stack3.<org.apache.maven.project.MavenProject: void addCompileSourceRoot(java.lang.String)>(".");

        $stack9 = virtualinvoke $stack3.<org.apache.maven.project.MavenProject: java.util.List getCompileSourceRoots()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack10);

        return;
    }

    private void assertNoNulls(java.util.List)
    {
        java.util.List elements;
        boolean $stack2;
        MavenProjectTest this;

        this := @this: MavenProjectTest;

        elements := @parameter0: java.util.List;

        $stack2 = interfaceinvoke elements.<java.util.List: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack2);

        return;
    }
}
