public class MavenRepositorySystem extends java.lang.Object
{
    private final org.apache.maven.artifact.handler.manager.ArtifactHandlerManager artifactHandlerManager;
    private final java.util.Map layouts;
    private static final java.lang.String WILDCARD;
    private static final java.lang.String EXTERNAL_WILDCARD;
    private static final java.lang.String EXTERNAL_HTTP_WILDCARD;

    public void <init>(org.apache.maven.artifact.handler.manager.ArtifactHandlerManager, java.util.Map)
    {
        MavenRepositorySystem this;
        org.apache.maven.artifact.handler.manager.ArtifactHandlerManager artifactHandlerManager;
        java.util.Map layouts;
        org.apache.maven.bridge.MavenRepositorySystem $r0, $r1;

        this := @this: MavenRepositorySystem;

        artifactHandlerManager := @parameter0: org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;

        layouts := @parameter1: java.util.Map;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.handler.manager.ArtifactHandlerManager artifactHandlerManager> = artifactHandlerManager;

        $r1 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $r1.<org.apache.maven.bridge.MavenRepositorySystem: java.util.Map layouts> = layouts;

        return;
    }

    public org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, version, scope, type;
        org.apache.maven.artifact.Artifact $stack6;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        scope := @parameter3: java.lang.String;

        type := @parameter4: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack6 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, scope, type);

        return $stack6;
    }

    public org.apache.maven.artifact.Artifact createProjectArtifact(java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, metaVersionId;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        metaVersionId := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createProjectArtifactX(java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, metaVersionId);

        return $stack4;
    }

    public org.apache.maven.artifact.Artifact createDependencyArtifact(org.apache.maven.model.Dependency)
    {
        org.apache.maven.model.Dependency d;
        java.lang.String $stack4, $stack5, $stack7, $stack8, $stack9, $stack10, $stack11, $stack14, $stack15, $stack22, $stack25;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        MavenRepositorySystem this;
        boolean $stack12, $stack16, $stack18;
        java.util.List $stack20, $stack17;
        java.lang.Throwable $stack26;
        org.apache.maven.artifact.Artifact e#2;
        java.io.File $u0;
        org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter $u1;
        org.apache.maven.bridge.MavenRepositorySystem $r0;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter $r1;

        this := @this: MavenRepositorySystem;

        d := @parameter0: org.apache.maven.model.Dependency;

        $stack4 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        if $stack4 != null goto label1;

        return null;

     label1:
        $stack5 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        versionRange = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>($stack5);

     label2:
        goto label4;

     label3:
        $stack26 := @caughtexception;

        return null;

     label4:
        $stack7 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack8 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack9 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        $stack10 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getClassifier()>();

        $stack11 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack12 = virtualinvoke d.<org.apache.maven.model.Dependency: boolean isOptional()>();

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        e#2 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createDependencyArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,boolean)>($stack7, $stack8, versionRange, $stack9, $stack10, $stack11, $stack12);

        $stack14 = "system";

        $stack15 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>($stack15);

        if $stack16 == 0 goto label5;

        $stack22 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        if $stack22 == null goto label5;

        $u0 = new java.io.File;

        $stack25 = virtualinvoke d.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack25);

        interfaceinvoke e#2.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($u0);

     label5:
        $stack17 = virtualinvoke d.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        $stack18 = interfaceinvoke $stack17.<java.util.List: boolean isEmpty()>();

        if $stack18 != 0 goto label6;

        $u1 = new org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter;

        $stack20 = virtualinvoke d.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        specialinvoke $u1.<org.apache.maven.artifact.resolver.filter.ExclusionArtifactFilter: void <init>(java.util.List)>($stack20);

        $r1 = (org.apache.maven.artifact.resolver.filter.ArtifactFilter) $u1;

        interfaceinvoke e#2.<org.apache.maven.artifact.Artifact: void setDependencyFilter(org.apache.maven.artifact.resolver.filter.ArtifactFilter)>($r1);

     label6:
        return e#2;

        catch org.apache.maven.artifact.versioning.InvalidVersionSpecificationException from label1 to label2 with label3;
    }

    public org.apache.maven.artifact.Artifact createExtensionArtifact(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String version, groupId, artifactId;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        MavenRepositorySystem this;
        org.apache.maven.artifact.Artifact $stack7;
        java.lang.Throwable $stack8;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

     label1:
        versionRange = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(version);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

        return null;

     label4:
        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack7 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createExtensionArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange)>(groupId, artifactId, versionRange);

        return $stack7;

        catch org.apache.maven.artifact.versioning.InvalidVersionSpecificationException from label1 to label2 with label3;
    }

    public org.apache.maven.artifact.Artifact createParentArtifact(java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, version;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createParentArtifactX(java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version);

        return $stack4;
    }

    public org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin)
    {
        org.apache.maven.model.Plugin plugin;
        boolean $stack5;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        MavenRepositorySystem this;
        java.lang.String $stack7, $stack8, version;
        org.apache.maven.artifact.Artifact $stack9;
        java.lang.Throwable $stack11;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        plugin := @parameter0: org.apache.maven.model.Plugin;

     label1:
        version = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        $stack5 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(version);

        if $stack5 == 0 goto label2;

        version = "RELEASE";

     label2:
        versionRange = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(version);

     label3:
        goto label5;

     label4:
        $stack11 := @caughtexception;

        return null;

     label5:
        $stack7 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getGroupId()>();

        $stack8 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack9 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createPluginArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange)>($stack7, $stack8, versionRange);

        return $stack9;

        catch org.apache.maven.artifact.versioning.InvalidVersionSpecificationException from label1 to label3 with label4;
    }

    public void injectMirror(java.util.List, java.util.List)
    {
        java.util.List repositories, mirrors;
        java.util.Iterator l3;
        boolean $stack7;
        java.lang.Object $stack8;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        org.apache.maven.settings.Mirror mirror;
        MavenRepositorySystem this;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        repositories := @parameter0: java.util.List;

        mirrors := @parameter1: java.util.List;

        if repositories == null goto label2;

        if mirrors == null goto label2;

        l3 = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.apache.maven.artifact.repository.ArtifactRepository) $stack8;

        mirror = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository,java.util.List)>(repository, mirrors);

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: void injectMirror(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>(repository, mirror);

        goto label1;

     label2:
        return;
    }

    private org.apache.maven.settings.Mirror getMirror(org.eclipse.aether.RepositorySystemSession, org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.repository.MirrorSelector selector;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        org.eclipse.aether.repository.RemoteRepository $stack8, repo;
        org.apache.maven.settings.Mirror $stack10;
        java.lang.String $stack11, $stack12, $stack13;
        boolean $stack14;
        MavenRepositorySystem this;

        this := @this: MavenRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        if session == null goto label1;

        selector = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.MirrorSelector getMirrorSelector()>();

        if selector == null goto label1;

        $stack8 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RemoteRepository toRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(repository);

        repo = interfaceinvoke selector.<org.eclipse.aether.repository.MirrorSelector: org.eclipse.aether.repository.RemoteRepository getMirror(org.eclipse.aether.repository.RemoteRepository)>($stack8);

        if repo == null goto label1;

        $stack10 = new org.apache.maven.settings.Mirror;

        specialinvoke $stack10.<org.apache.maven.settings.Mirror: void <init>()>();

        $stack11 = virtualinvoke repo.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getId()>();

        virtualinvoke $stack10.<org.apache.maven.settings.Mirror: void setId(java.lang.String)>($stack11);

        $stack12 = virtualinvoke repo.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getUrl()>();

        virtualinvoke $stack10.<org.apache.maven.settings.Mirror: void setUrl(java.lang.String)>($stack12);

        $stack13 = virtualinvoke repo.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getContentType()>();

        virtualinvoke $stack10.<org.apache.maven.settings.Mirror: void setLayout(java.lang.String)>($stack13);

        $stack14 = virtualinvoke repo.<org.eclipse.aether.repository.RemoteRepository: boolean isBlocked()>();

        virtualinvoke $stack10.<org.apache.maven.settings.Mirror: void setBlocked(boolean)>($stack14);

        return $stack10;

     label1:
        return null;
    }

    public void injectMirror(org.eclipse.aether.RepositorySystemSession, java.util.List)
    {
        java.util.List repositories;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.Iterator l3;
        boolean $stack7;
        java.lang.Object $stack8;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        MavenRepositorySystem this;
        org.apache.maven.settings.Mirror mirror;
        org.apache.maven.bridge.MavenRepositorySystem $r0, $r1;

        this := @this: MavenRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        if repositories == null goto label2;

        if session == null goto label2;

        l3 = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.apache.maven.artifact.repository.ArtifactRepository) $stack8;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        mirror = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.settings.Mirror getMirror(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>(session, repository);

        $r1 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        specialinvoke $r1.<org.apache.maven.bridge.MavenRepositorySystem: void injectMirror(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>(repository, mirror);

        goto label1;

     label2:
        return;
    }

    private void injectMirror(org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.settings.Mirror)
    {
        org.apache.maven.settings.Mirror mirror;
        org.apache.maven.artifact.repository.ArtifactRepository repository, original;
        java.lang.String $stack4, $stack5, $stack11, $stack12, $stack13, $stack16;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack6, $stack17;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $stack7, $stack8;
        java.util.List $stack10;
        boolean $stack14, $stack15;
        MavenRepositorySystem this;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        mirror := @parameter1: org.apache.maven.settings.Mirror;

        if mirror == null goto label2;

        $stack4 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack5 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        $stack6 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout()>();

        $stack7 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getSnapshots()>();

        $stack8 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getReleases()>();

        original = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>($stack4, $stack5, $stack6, $stack7, $stack8);

        $stack10 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(original);

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setMirroredRepositories(java.util.List)>($stack10);

        $stack11 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getId()>();

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setId(java.lang.String)>($stack11);

        $stack12 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getUrl()>();

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setUrl(java.lang.String)>($stack12);

        $stack13 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getLayout()>();

        $stack14 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isNotEmpty(java.lang.String)>($stack13);

        if $stack14 == 0 goto label1;

        $stack16 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getLayout()>();

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack17 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout(java.lang.String)>($stack16);

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setLayout(org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout)>($stack17);

     label1:
        $stack15 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: boolean isBlocked()>();

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setBlocked(boolean)>($stack15);

     label2:
        return;
    }

    private org.apache.maven.artifact.repository.Authentication getAuthentication(org.eclipse.aether.RepositorySystemSession, org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.repository.AuthenticationSelector selector;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        org.eclipse.aether.repository.Authentication auth;
        org.eclipse.aether.repository.RemoteRepository$Builder $stack12, $stack13;
        org.eclipse.aether.repository.AuthenticationContext authCtx;
        org.apache.maven.artifact.repository.Authentication $stack16;
        java.lang.String $stack17, $stack18, $stack19, $stack20;
        MavenRepositorySystem this;
        org.eclipse.aether.repository.RemoteRepository repo;

        this := @this: MavenRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        if session == null goto label1;

        selector = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.AuthenticationSelector getAuthenticationSelector()>();

        if selector == null goto label1;

        repo = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RemoteRepository toRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(repository);

        auth = interfaceinvoke selector.<org.eclipse.aether.repository.AuthenticationSelector: org.eclipse.aether.repository.Authentication getAuthentication(org.eclipse.aether.repository.RemoteRepository)>(repo);

        if auth == null goto label1;

        $stack12 = new org.eclipse.aether.repository.RemoteRepository$Builder;

        specialinvoke $stack12.<org.eclipse.aether.repository.RemoteRepository$Builder: void <init>(org.eclipse.aether.repository.RemoteRepository)>(repo);

        $stack13 = virtualinvoke $stack12.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setAuthentication(org.eclipse.aether.repository.Authentication)>(auth);

        repo = virtualinvoke $stack13.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository build()>();

        authCtx = staticinvoke <org.eclipse.aether.repository.AuthenticationContext: org.eclipse.aether.repository.AuthenticationContext forRepository(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.RemoteRepository)>(session, repo);

        $stack16 = new org.apache.maven.artifact.repository.Authentication;

        $stack17 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("username");

        $stack18 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("password");

        specialinvoke $stack16.<org.apache.maven.artifact.repository.Authentication: void <init>(java.lang.String,java.lang.String)>($stack17, $stack18);

        $stack19 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("privateKey.path");

        virtualinvoke $stack16.<org.apache.maven.artifact.repository.Authentication: void setPrivateKey(java.lang.String)>($stack19);

        $stack20 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("privateKey.passphrase");

        virtualinvoke $stack16.<org.apache.maven.artifact.repository.Authentication: void setPassphrase(java.lang.String)>($stack20);

        virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: void close()>();

        return $stack16;

     label1:
        return null;
    }

    public void injectAuthentication(org.eclipse.aether.RepositorySystemSession, java.util.List)
    {
        java.util.List repositories;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.Iterator l3;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        MavenRepositorySystem this;
        org.apache.maven.artifact.repository.Authentication $stack8;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        if repositories == null goto label2;

        if session == null goto label2;

        l3 = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.apache.maven.artifact.repository.ArtifactRepository) $stack7;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.Authentication getAuthentication(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>(session, repository);

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setAuthentication(org.apache.maven.artifact.repository.Authentication)>($stack8);

        goto label1;

     label2:
        return;
    }

    private org.apache.maven.repository.Proxy getProxy(org.eclipse.aether.RepositorySystemSession, org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.repository.ProxySelector selector;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        org.eclipse.aether.repository.Proxy proxy;
        org.apache.maven.repository.Proxy $stack12;
        java.lang.String $stack13, $stack14, $stack21, $stack22, $stack23, $stack24;
        int $stack15;
        org.eclipse.aether.repository.Authentication $stack16;
        org.eclipse.aether.repository.RemoteRepository$Builder $stack17, $stack18;
        org.eclipse.aether.repository.AuthenticationContext authCtx;
        MavenRepositorySystem this;
        org.eclipse.aether.repository.RemoteRepository repo;

        this := @this: MavenRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        if session == null goto label2;

        selector = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.ProxySelector getProxySelector()>();

        if selector == null goto label2;

        repo = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RemoteRepository toRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(repository);

        proxy = interfaceinvoke selector.<org.eclipse.aether.repository.ProxySelector: org.eclipse.aether.repository.Proxy getProxy(org.eclipse.aether.repository.RemoteRepository)>(repo);

        if proxy == null goto label2;

        $stack12 = new org.apache.maven.repository.Proxy;

        specialinvoke $stack12.<org.apache.maven.repository.Proxy: void <init>()>();

        $stack13 = virtualinvoke proxy.<org.eclipse.aether.repository.Proxy: java.lang.String getHost()>();

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setHost(java.lang.String)>($stack13);

        $stack14 = virtualinvoke proxy.<org.eclipse.aether.repository.Proxy: java.lang.String getType()>();

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setProtocol(java.lang.String)>($stack14);

        $stack15 = virtualinvoke proxy.<org.eclipse.aether.repository.Proxy: int getPort()>();

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setPort(int)>($stack15);

        $stack16 = virtualinvoke proxy.<org.eclipse.aether.repository.Proxy: org.eclipse.aether.repository.Authentication getAuthentication()>();

        if $stack16 == null goto label1;

        $stack17 = new org.eclipse.aether.repository.RemoteRepository$Builder;

        specialinvoke $stack17.<org.eclipse.aether.repository.RemoteRepository$Builder: void <init>(org.eclipse.aether.repository.RemoteRepository)>(repo);

        $stack18 = virtualinvoke $stack17.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setProxy(org.eclipse.aether.repository.Proxy)>(proxy);

        repo = virtualinvoke $stack18.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository build()>();

        authCtx = staticinvoke <org.eclipse.aether.repository.AuthenticationContext: org.eclipse.aether.repository.AuthenticationContext forProxy(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.RemoteRepository)>(session, repo);

        $stack21 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("username");

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setUserName(java.lang.String)>($stack21);

        $stack22 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("password");

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setPassword(java.lang.String)>($stack22);

        $stack23 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("ntlm.domain");

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setNtlmDomain(java.lang.String)>($stack23);

        $stack24 = virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: java.lang.String get(java.lang.String)>("ntlm.workstation");

        virtualinvoke $stack12.<org.apache.maven.repository.Proxy: void setNtlmHost(java.lang.String)>($stack24);

        virtualinvoke authCtx.<org.eclipse.aether.repository.AuthenticationContext: void close()>();

     label1:
        return $stack12;

     label2:
        return null;
    }

    public void injectProxy(org.eclipse.aether.RepositorySystemSession, java.util.List)
    {
        java.util.List repositories;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.Iterator l3;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        MavenRepositorySystem this;
        org.apache.maven.repository.Proxy $stack8;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        if repositories == null goto label2;

        if session == null goto label2;

        l3 = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.apache.maven.artifact.repository.ArtifactRepository) $stack7;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.repository.Proxy getProxy(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>(session, repository);

        interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: void setProxy(org.apache.maven.repository.Proxy)>($stack8);

        goto label1;

     label2:
        return;
    }

    private org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout(java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String id;
        java.util.Map $stack3;
        java.lang.Object $stack4;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout layout;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        id := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack3 = $r0.<org.apache.maven.bridge.MavenRepositorySystem: java.util.Map layouts>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);

        layout = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $stack4;

        return layout;
    }

    public static org.apache.maven.model.Repository fromSettingsRepository(org.apache.maven.settings.Repository)
    {
        org.apache.maven.model.Repository $stack2;
        org.apache.maven.settings.Repository settingsRepository;
        java.lang.String $stack3, $stack4, $stack5, $stack6;
        org.apache.maven.settings.RepositoryPolicy $stack7, $stack9;
        org.apache.maven.model.RepositoryPolicy $stack8, $stack10;

        settingsRepository := @parameter0: org.apache.maven.settings.Repository;

        $stack2 = new org.apache.maven.model.Repository;

        specialinvoke $stack2.<org.apache.maven.model.Repository: void <init>()>();

        $stack3 = virtualinvoke settingsRepository.<org.apache.maven.settings.Repository: java.lang.String getId()>();

        virtualinvoke $stack2.<org.apache.maven.model.Repository: void setId(java.lang.String)>($stack3);

        $stack4 = virtualinvoke settingsRepository.<org.apache.maven.settings.Repository: java.lang.String getLayout()>();

        virtualinvoke $stack2.<org.apache.maven.model.Repository: void setLayout(java.lang.String)>($stack4);

        $stack5 = virtualinvoke settingsRepository.<org.apache.maven.settings.Repository: java.lang.String getName()>();

        virtualinvoke $stack2.<org.apache.maven.model.Repository: void setName(java.lang.String)>($stack5);

        $stack6 = virtualinvoke settingsRepository.<org.apache.maven.settings.Repository: java.lang.String getUrl()>();

        virtualinvoke $stack2.<org.apache.maven.model.Repository: void setUrl(java.lang.String)>($stack6);

        $stack7 = virtualinvoke settingsRepository.<org.apache.maven.settings.Repository: org.apache.maven.settings.RepositoryPolicy getReleases()>();

        $stack8 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.model.RepositoryPolicy fromSettingsRepositoryPolicy(org.apache.maven.settings.RepositoryPolicy)>($stack7);

        virtualinvoke $stack2.<org.apache.maven.model.Repository: void setReleases(org.apache.maven.model.RepositoryPolicy)>($stack8);

        $stack9 = virtualinvoke settingsRepository.<org.apache.maven.settings.Repository: org.apache.maven.settings.RepositoryPolicy getSnapshots()>();

        $stack10 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.model.RepositoryPolicy fromSettingsRepositoryPolicy(org.apache.maven.settings.RepositoryPolicy)>($stack9);

        virtualinvoke $stack2.<org.apache.maven.model.Repository: void setSnapshots(org.apache.maven.model.RepositoryPolicy)>($stack10);

        return $stack2;
    }

    public static org.apache.maven.model.RepositoryPolicy fromSettingsRepositoryPolicy(org.apache.maven.settings.RepositoryPolicy)
    {
        org.apache.maven.model.RepositoryPolicy $stack2;
        org.apache.maven.settings.RepositoryPolicy settingsRepositoryPolicy;
        boolean $stack3;
        java.lang.String $stack4, $stack5;

        settingsRepositoryPolicy := @parameter0: org.apache.maven.settings.RepositoryPolicy;

        $stack2 = new org.apache.maven.model.RepositoryPolicy;

        specialinvoke $stack2.<org.apache.maven.model.RepositoryPolicy: void <init>()>();

        if settingsRepositoryPolicy == null goto label1;

        $stack3 = virtualinvoke settingsRepositoryPolicy.<org.apache.maven.settings.RepositoryPolicy: boolean isEnabled()>();

        virtualinvoke $stack2.<org.apache.maven.model.RepositoryPolicy: void setEnabled(boolean)>($stack3);

        $stack4 = virtualinvoke settingsRepositoryPolicy.<org.apache.maven.settings.RepositoryPolicy: java.lang.String getUpdatePolicy()>();

        virtualinvoke $stack2.<org.apache.maven.model.RepositoryPolicy: void setUpdatePolicy(java.lang.String)>($stack4);

        $stack5 = virtualinvoke settingsRepositoryPolicy.<org.apache.maven.settings.RepositoryPolicy: java.lang.String getChecksumPolicy()>();

        virtualinvoke $stack2.<org.apache.maven.model.RepositoryPolicy: void setChecksumPolicy(java.lang.String)>($stack5);

     label1:
        return $stack2;
    }

    public static org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.settings.Repository) throws org.apache.maven.artifact.InvalidRepositoryException
    {
        org.apache.maven.settings.Repository repo;
        org.apache.maven.model.Repository $stack1;
        org.apache.maven.artifact.repository.ArtifactRepository $stack2;

        repo := @parameter0: org.apache.maven.settings.Repository;

        $stack1 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.model.Repository fromSettingsRepository(org.apache.maven.settings.Repository)>(repo);

        $stack2 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository)>($stack1);

        return $stack2;
    }

    public static org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository) throws org.apache.maven.artifact.InvalidRepositoryException
    {
        org.apache.maven.model.Repository repo;
        java.lang.String id, url, $stack20;
        boolean $stack7, $stack9;
        org.apache.maven.model.RepositoryPolicy $stack10, $stack12;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy snapshots, releases;
        org.apache.maven.artifact.repository.ArtifactRepository $stack15;
        java.lang.StringBuilder $stack18, $stack19, $u1;
        org.apache.maven.artifact.InvalidRepositoryException $u0, $u2;
        org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout $u3;
        java.lang.Throwable $r0, $r1;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $r2;

        repo := @parameter0: org.apache.maven.model.Repository;

        if repo == null goto label3;

        id = virtualinvoke repo.<org.apache.maven.model.Repository: java.lang.String getId()>();

        $stack7 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(id);

        if $stack7 == 0 goto label1;

        $u0 = new org.apache.maven.artifact.InvalidRepositoryException;

        specialinvoke $u0.<org.apache.maven.artifact.InvalidRepositoryException: void <init>(java.lang.String,java.lang.String)>("Repository identifier missing", "");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        url = virtualinvoke repo.<org.apache.maven.model.Repository: java.lang.String getUrl()>();

        $stack9 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(url);

        if $stack9 == 0 goto label2;

        $u2 = new org.apache.maven.artifact.InvalidRepositoryException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URL missing for repository ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(id);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<org.apache.maven.artifact.InvalidRepositoryException: void <init>(java.lang.String,java.lang.String)>($stack20, id);

        $r1 = (java.lang.Throwable) $u2;

        throw $r1;

     label2:
        $stack10 = virtualinvoke repo.<org.apache.maven.model.Repository: org.apache.maven.model.RepositoryPolicy getSnapshots()>();

        snapshots = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy buildArtifactRepositoryPolicy(org.apache.maven.model.RepositoryPolicy)>($stack10);

        $stack12 = virtualinvoke repo.<org.apache.maven.model.Repository: org.apache.maven.model.RepositoryPolicy getReleases()>();

        releases = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy buildArtifactRepositoryPolicy(org.apache.maven.model.RepositoryPolicy)>($stack12);

        $u3 = new org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;

        specialinvoke $u3.<org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout: void <init>()>();

        $r2 = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $u3;

        $stack15 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(id, url, $r2, snapshots, releases);

        return $stack15;

     label3:
        return null;
    }

    public static org.apache.maven.artifact.repository.ArtifactRepositoryPolicy buildArtifactRepositoryPolicy(org.apache.maven.model.RepositoryPolicy)
    {
        org.apache.maven.model.RepositoryPolicy policy;
        java.lang.String $stack6, $stack7, updatePolicy, checksumPolicy;
        boolean enabled;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $stack4;

        policy := @parameter0: org.apache.maven.model.RepositoryPolicy;

        enabled = 1;

        updatePolicy = null;

        checksumPolicy = null;

        if policy == null goto label2;

        enabled = virtualinvoke policy.<org.apache.maven.model.RepositoryPolicy: boolean isEnabled()>();

        $stack6 = virtualinvoke policy.<org.apache.maven.model.RepositoryPolicy: java.lang.String getUpdatePolicy()>();

        if $stack6 == null goto label1;

        updatePolicy = virtualinvoke policy.<org.apache.maven.model.RepositoryPolicy: java.lang.String getUpdatePolicy()>();

     label1:
        $stack7 = virtualinvoke policy.<org.apache.maven.model.RepositoryPolicy: java.lang.String getChecksumPolicy()>();

        if $stack7 == null goto label2;

        checksumPolicy = virtualinvoke policy.<org.apache.maven.model.RepositoryPolicy: java.lang.String getChecksumPolicy()>();

     label2:
        $stack4 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $stack4.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>(boolean,java.lang.String,java.lang.String)>(enabled, updatePolicy, checksumPolicy);

        return $stack4;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String, java.lang.String, java.lang.String, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy) throws java.lang.Exception
    {
        MavenRepositorySystem this;
        java.lang.String layoutId, id, url;
        java.util.Map $stack7;
        java.lang.Object $stack8;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout layout;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy snapshots, releases;
        org.apache.maven.artifact.repository.ArtifactRepository $stack9;
        org.apache.maven.bridge.MavenRepositorySystem $r0, $r1;

        this := @this: MavenRepositorySystem;

        id := @parameter0: java.lang.String;

        url := @parameter1: java.lang.String;

        layoutId := @parameter2: java.lang.String;

        snapshots := @parameter3: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        releases := @parameter4: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack7 = $r0.<org.apache.maven.bridge.MavenRepositorySystem: java.util.Map layouts>;

        $stack8 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object get(java.lang.Object)>(layoutId);

        layout = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $stack8;

        $r1 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        specialinvoke $r1.<org.apache.maven.bridge.MavenRepositorySystem: void checkLayout(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout)>(id, layoutId, layout);

        $stack9 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(id, url, layout, snapshots, releases);

        return $stack9;
    }

    private void checkLayout(java.lang.String, java.lang.String, org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) throws java.lang.Exception
    {
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout layout;
        java.lang.Exception $stack4;
        java.lang.Object[] $stack5;
        java.lang.String layoutId, repositoryId, $stack6;
        MavenRepositorySystem this;

        this := @this: MavenRepositorySystem;

        repositoryId := @parameter0: java.lang.String;

        layoutId := @parameter1: java.lang.String;

        layout := @parameter2: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;

        if layout != null goto label1;

        $stack4 = new java.lang.Exception;

        $stack5 = newarray (java.lang.Object)[2];

        $stack5[0] = layoutId;

        $stack5[1] = repositoryId;

        $stack6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot find ArtifactRepositoryLayout instance for: %s %s", $stack5);

        specialinvoke $stack4.<java.lang.Exception: void <init>(java.lang.String)>($stack6);

        throw $stack4;

     label1:
        return;
    }

    public static org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String, java.lang.String, org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)
    {
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repositoryLayout;
        boolean $stack6;
        java.lang.String id, url;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout2 $stack8;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy snapshots, releases, $u0, $u1;
        java.lang.Object repository;
        org.apache.maven.artifact.repository.MavenArtifactRepository $u2;
        org.apache.maven.artifact.repository.ArtifactRepository $r0;

        id := @parameter0: java.lang.String;

        url := @parameter1: java.lang.String;

        repositoryLayout := @parameter2: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;

        snapshots := @parameter3: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        releases := @parameter4: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        if snapshots != null goto label1;

        $u0 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u0.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        snapshots = $u0;

     label1:
        if releases != null goto label2;

        $u1 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u1.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        releases = $u1;

     label2:
        $stack6 = repositoryLayout instanceof org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout2;

        if $stack6 == 0 goto label3;

        $stack8 = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout2) repositoryLayout;

        repository = interfaceinvoke $stack8.<org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout2: org.apache.maven.artifact.repository.ArtifactRepository newMavenArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(id, url, snapshots, releases);

        goto label4;

     label3:
        $u2 = new org.apache.maven.artifact.repository.MavenArtifactRepository;

        specialinvoke $u2.<org.apache.maven.artifact.repository.MavenArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(id, url, repositoryLayout, snapshots, releases);

        repository = $u2;

     label4:
        $r0 = (org.apache.maven.artifact.repository.ArtifactRepository) repository;

        return $r0;
    }

    private org.apache.maven.artifact.Artifact createArtifactX(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, version, scope, type;
        org.apache.maven.artifact.Artifact $stack6;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        scope := @parameter3: java.lang.String;

        type := @parameter4: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack6 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, scope, type, null, null);

        return $stack6;
    }

    private org.apache.maven.artifact.Artifact createDependencyArtifactX(java.lang.String, java.lang.String, org.apache.maven.artifact.versioning.VersionRange, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, type, classifier, scope;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        boolean optional;
        org.apache.maven.artifact.Artifact $stack8;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        versionRange := @parameter2: org.apache.maven.artifact.versioning.VersionRange;

        type := @parameter3: java.lang.String;

        classifier := @parameter4: java.lang.String;

        scope := @parameter5: java.lang.String;

        optional := @parameter6: boolean;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(groupId, artifactId, versionRange, type, classifier, scope, null, optional);

        return $stack8;
    }

    private org.apache.maven.artifact.Artifact createProjectArtifactX(java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, version;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createProjectArtifactX(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, null);

        return $stack4;
    }

    private org.apache.maven.artifact.Artifact createParentArtifactX(java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, version;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createProjectArtifactX(java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version);

        return $stack4;
    }

    private org.apache.maven.artifact.Artifact createPluginArtifactX(java.lang.String, java.lang.String, org.apache.maven.artifact.versioning.VersionRange)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        versionRange := @parameter2: org.apache.maven.artifact.versioning.VersionRange;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, versionRange, "maven-plugin", null, "runtime", null);

        return $stack4;
    }

    private org.apache.maven.artifact.Artifact createProjectArtifactX(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, version, scope;
        org.apache.maven.artifact.Artifact $stack5;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        scope := @parameter3: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack5 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, scope, "pom");

        return $stack5;
    }

    private org.apache.maven.artifact.Artifact createExtensionArtifactX(java.lang.String, java.lang.String, org.apache.maven.artifact.versioning.VersionRange)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        versionRange := @parameter2: org.apache.maven.artifact.versioning.VersionRange;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, versionRange, "jar", null, "runtime", null);

        return $stack4;
    }

    private org.apache.maven.artifact.Artifact createArtifactX(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String version, groupId, artifactId, type, classifier, scope, inheritedScope;
        MavenRepositorySystem this;
        org.apache.maven.artifact.Artifact $stack9;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        scope := @parameter3: java.lang.String;

        type := @parameter4: java.lang.String;

        classifier := @parameter5: java.lang.String;

        inheritedScope := @parameter6: java.lang.String;

        versionRange = null;

        if version == null goto label1;

        versionRange = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersion(java.lang.String)>(version);

     label1:
        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack9 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);

        return $stack9;
    }

    private org.apache.maven.artifact.Artifact createArtifactX(java.lang.String, java.lang.String, org.apache.maven.artifact.versioning.VersionRange, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        MavenRepositorySystem this;
        java.lang.String groupId, artifactId, type, classifier, scope, inheritedScope;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        org.apache.maven.artifact.Artifact $stack8;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        versionRange := @parameter2: org.apache.maven.artifact.versioning.VersionRange;

        type := @parameter3: java.lang.String;

        classifier := @parameter4: java.lang.String;

        scope := @parameter5: java.lang.String;

        inheritedScope := @parameter6: java.lang.String;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createArtifactX(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, 0);

        return $stack8;
    }

    private org.apache.maven.artifact.Artifact createArtifactX(java.lang.String, java.lang.String, org.apache.maven.artifact.versioning.VersionRange, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        java.lang.String inheritedScope, scope, $stack11, $stack13, $stack15, $stack19, $stack21, type, groupId, artifactId, classifier, $stack38, desiredScope, $stack17;
        boolean $stack12, $stack14, $stack16, $stack20, $stack22, optional, $stack39, $stack18;
        MavenRepositorySystem this;
        org.apache.maven.artifact.handler.manager.ArtifactHandlerManager $stack23;
        org.apache.maven.artifact.handler.ArtifactHandler handler;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        org.apache.maven.artifact.DefaultArtifact $u0;
        org.apache.maven.bridge.MavenRepositorySystem $r0;
        org.apache.maven.artifact.Artifact $r1;

        this := @this: MavenRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        versionRange := @parameter2: org.apache.maven.artifact.versioning.VersionRange;

        type := @parameter3: java.lang.String;

        classifier := @parameter4: java.lang.String;

        scope := @parameter5: java.lang.String;

        inheritedScope := @parameter6: java.lang.String;

        optional := @parameter7: boolean;

        desiredScope = "runtime";

        if inheritedScope != null goto label1;

        desiredScope = scope;

        goto label4;

     label1:
        $stack11 = "test";

        $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(scope);

        if $stack12 != 0 goto label2;

        $stack13 = "provided";

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean equals(java.lang.Object)>(scope);

        if $stack14 == 0 goto label3;

     label2:
        return null;

     label3:
        $stack15 = "compile";

        $stack16 = virtualinvoke $stack15.<java.lang.String: boolean equals(java.lang.Object)>(scope);

        if $stack16 == 0 goto label4;

        $stack38 = "compile";

        $stack39 = virtualinvoke $stack38.<java.lang.String: boolean equals(java.lang.Object)>(inheritedScope);

        if $stack39 == 0 goto label4;

        desiredScope = "compile";

     label4:
        $stack17 = "test";

        $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(inheritedScope);

        if $stack18 == 0 goto label5;

        desiredScope = "test";

     label5:
        $stack19 = "provided";

        $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(inheritedScope);

        if $stack20 == 0 goto label6;

        desiredScope = "provided";

     label6:
        $stack21 = "system";

        $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(scope);

        if $stack22 == 0 goto label7;

        desiredScope = "system";

     label7:
        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack23 = $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.handler.manager.ArtifactHandlerManager artifactHandlerManager>;

        handler = interfaceinvoke $stack23.<org.apache.maven.artifact.handler.manager.ArtifactHandlerManager: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler(java.lang.String)>(type);

        $u0 = new org.apache.maven.artifact.DefaultArtifact;

        specialinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler,boolean)>(groupId, artifactId, versionRange, desiredScope, type, classifier, handler, optional);

        $r1 = (org.apache.maven.artifact.Artifact) $u0;

        return $r1;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createDefaultRemoteRepository(org.apache.maven.execution.MavenExecutionRequest) throws java.lang.Exception
    {
        MavenRepositorySystem this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack2;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createRepository(java.lang.String,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,java.lang.String)>("https://repo.maven.apache.org/maven2", "central", 1, "daily", 0, "daily", "fail");

        return $stack2;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createRepository(java.lang.String, java.lang.String, boolean, java.lang.String, boolean, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        boolean snapshots, releases;
        java.lang.String snapshotUpdates, checksumPolicy, releaseUpdates, repositoryId, url;
        MavenRepositorySystem this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack12;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $u0, $u1;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        url := @parameter0: java.lang.String;

        repositoryId := @parameter1: java.lang.String;

        releases := @parameter2: boolean;

        releaseUpdates := @parameter3: java.lang.String;

        snapshots := @parameter4: boolean;

        snapshotUpdates := @parameter5: java.lang.String;

        checksumPolicy := @parameter6: java.lang.String;

        $u0 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u0.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>(boolean,java.lang.String,java.lang.String)>(snapshots, snapshotUpdates, checksumPolicy);

        $u1 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u1.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>(boolean,java.lang.String,java.lang.String)>(releases, releaseUpdates, checksumPolicy);

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack12 = virtualinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(repositoryId, url, "default", $u0, $u1);

        return $stack12;
    }

    public java.util.Set getRepoIds(java.util.List)
    {
        java.util.HashSet $stack5;
        java.util.List repositories;
        java.util.Iterator l3;
        boolean $stack7;
        java.lang.Object $stack9;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.lang.String $stack10;
        MavenRepositorySystem this;

        this := @this: MavenRepositorySystem;

        repositories := @parameter0: java.util.List;

        $stack5 = new java.util.HashSet;

        specialinvoke $stack5.<java.util.HashSet: void <init>()>();

        if repositories == null goto label2;

        l3 = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.apache.maven.artifact.repository.ArtifactRepository) $stack9;

        $stack10 = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        interfaceinvoke $stack5.<java.util.Set: boolean add(java.lang.Object)>($stack10);

        goto label1;

     label2:
        return $stack5;
    }

    public java.util.List getEffectiveRepositories(java.util.List)
    {
        java.util.List repositories, $stack49, aliasedRepos, key#7;
        boolean $stack15, $stack19, $stack25, $stack30, $stack39;
        java.util.Collection $stack17;
        java.lang.Object $stack20, $stack32, $stack42, $stack46, $stack52, $stack55;
        int $stack23, $stack28;
        MavenRepositorySystem this;
        java.lang.String $stack33, $stack34, key;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack35;
        org.apache.maven.artifact.repository.ArtifactRepository effectiveRepository, repository, aliasedRepo;
        org.apache.maven.artifact.repository.Authentication $stack37;
        org.apache.maven.repository.Proxy $stack38;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $stack43, $stack47, releasePolicy#11, snapshotPolicy#15;
        java.util.function.Function $stack54;
        java.util.Iterator effectiveRepositories, repository#6, releasePolicy, snapshotPolicy;
        java.util.LinkedHashMap $u0;
        java.util.ArrayList $u1, $u2, $u3, $u4;
        org.apache.maven.bridge.MavenRepositorySystem $r0, $r1;

        this := @this: MavenRepositorySystem;

        repositories := @parameter0: java.util.List;

        if repositories != null goto label1;

        return null;

     label1:
        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        effectiveRepositories = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack15 = interfaceinvoke effectiveRepositories.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label3;

        $stack52 = interfaceinvoke effectiveRepositories.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.apache.maven.artifact.repository.ArtifactRepository) $stack52;

        key = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack54 = staticinvoke <MavenRepositorySystem$lambda_getEffectiveRepositories_0__309: java.util.function.Function bootstrap$()>();

        $stack55 = interfaceinvoke $u0.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(key, $stack54);

        aliasedRepos = (java.util.List) $stack55;

        interfaceinvoke aliasedRepos.<java.util.List: boolean add(java.lang.Object)>(repository);

        goto label2;

     label3:
        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $stack17 = interfaceinvoke $u0.<java.util.Map: java.util.Collection values()>();

        repository#6 = interfaceinvoke $stack17.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack19 = interfaceinvoke repository#6.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label9;

        $stack20 = interfaceinvoke repository#6.<java.util.Iterator: java.lang.Object next()>();

        key#7 = (java.util.List) $stack20;

        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        $u3 = new java.util.ArrayList;

        $stack23 = interfaceinvoke key#7.<java.util.List: int size()>();

        specialinvoke $u3.<java.util.ArrayList: void <init>(int)>($stack23);

        releasePolicy = interfaceinvoke key#7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack25 = interfaceinvoke releasePolicy.<java.util.Iterator: boolean hasNext()>();

        if $stack25 == 0 goto label6;

        $stack46 = interfaceinvoke releasePolicy.<java.util.Iterator: java.lang.Object next()>();

        aliasedRepo = (org.apache.maven.artifact.repository.ArtifactRepository) $stack46;

        $stack47 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getReleases()>();

        interfaceinvoke $u3.<java.util.List: boolean add(java.lang.Object)>($stack47);

        $stack49 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.util.List getMirroredRepositories()>();

        interfaceinvoke $u2.<java.util.List: boolean addAll(java.util.Collection)>($stack49);

        goto label5;

     label6:
        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        releasePolicy#11 = specialinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getEffectivePolicy(java.util.Collection)>($u3);

        $u4 = new java.util.ArrayList;

        $stack28 = interfaceinvoke key#7.<java.util.List: int size()>();

        specialinvoke $u4.<java.util.ArrayList: void <init>(int)>($stack28);

        snapshotPolicy = interfaceinvoke key#7.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $stack30 = interfaceinvoke snapshotPolicy.<java.util.Iterator: boolean hasNext()>();

        if $stack30 == 0 goto label8;

        $stack42 = interfaceinvoke snapshotPolicy.<java.util.Iterator: java.lang.Object next()>();

        aliasedRepo = (org.apache.maven.artifact.repository.ArtifactRepository) $stack42;

        $stack43 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getSnapshots()>();

        interfaceinvoke $u4.<java.util.List: boolean add(java.lang.Object)>($stack43);

        goto label7;

     label8:
        $r1 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        snapshotPolicy#15 = specialinvoke $r1.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getEffectivePolicy(java.util.Collection)>($u4);

        $stack32 = interfaceinvoke key#7.<java.util.List: java.lang.Object get(int)>(0);

        aliasedRepo = (org.apache.maven.artifact.repository.ArtifactRepository) $stack32;

        $stack33 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack34 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        $stack35 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout()>();

        effectiveRepository = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>($stack33, $stack34, $stack35, snapshotPolicy#15, releasePolicy#11);

        $stack37 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.Authentication getAuthentication()>();

        interfaceinvoke effectiveRepository.<org.apache.maven.artifact.repository.ArtifactRepository: void setAuthentication(org.apache.maven.artifact.repository.Authentication)>($stack37);

        $stack38 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.repository.Proxy getProxy()>();

        interfaceinvoke effectiveRepository.<org.apache.maven.artifact.repository.ArtifactRepository: void setProxy(org.apache.maven.repository.Proxy)>($stack38);

        interfaceinvoke effectiveRepository.<org.apache.maven.artifact.repository.ArtifactRepository: void setMirroredRepositories(java.util.List)>($u2);

        $stack39 = interfaceinvoke aliasedRepo.<org.apache.maven.artifact.repository.ArtifactRepository: boolean isBlocked()>();

        interfaceinvoke effectiveRepository.<org.apache.maven.artifact.repository.ArtifactRepository: void setBlocked(boolean)>($stack39);

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>(effectiveRepository);

        goto label4;

     label9:
        return $u1;
    }

    private org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getEffectivePolicy(java.util.Collection)
    {
        java.util.Collection policies;
        java.util.Iterator l3;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy policy, $stack9, effectivePolicy;
        MavenRepositorySystem this;

        this := @this: MavenRepositorySystem;

        policies := @parameter0: java.util.Collection;

        effectivePolicy = null;

        l3 = interfaceinvoke policies.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label4;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        policy = (org.apache.maven.artifact.repository.ArtifactRepositoryPolicy) $stack7;

        if effectivePolicy != null goto label2;

        $stack9 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $stack9.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>(org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(policy);

        effectivePolicy = $stack9;

        goto label3;

     label2:
        virtualinvoke effectivePolicy.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void merge(org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(policy);

     label3:
        goto label1;

     label4:
        return effectivePolicy;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(org.apache.maven.execution.MavenExecutionRequest, java.io.File) throws java.lang.Exception
    {
        MavenRepositorySystem this;
        java.lang.StringBuilder $stack4, $stack7, $u0;
        java.io.File localRepository;
        java.net.URI $stack5;
        java.lang.String $stack6, $stack8;
        org.apache.maven.artifact.repository.ArtifactRepository $stack9;
        org.apache.maven.execution.MavenExecutionRequest request;
        org.apache.maven.bridge.MavenRepositorySystem $r0;

        this := @this: MavenRepositorySystem;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        localRepository := @parameter1: java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack5 = virtualinvoke localRepository.<java.io.File: java.net.URI toURI()>();

        $stack6 = virtualinvoke $stack5.<java.net.URI: java.lang.String getRawPath()>();

        $stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (org.apache.maven.bridge.MavenRepositorySystem) this;

        $stack9 = virtualinvoke $r0.<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createRepository(java.lang.String,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,java.lang.String)>($stack8, "local", 1, "always", 1, "always", "ignore");

        return $stack9;
    }

    public static org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository, java.util.List)
    {
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.lang.String repoId, $stack12, $stack17;
        java.util.List mirrors;
        boolean $stack8, $stack10, $stack13, $stack15, $stack18, $stack20;
        java.lang.Object $stack11, $stack16;
        java.util.Iterator l3;
        org.apache.maven.settings.Mirror mirror;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        mirrors := @parameter1: java.util.List;

        repoId = interfaceinvoke repository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        if repoId == null goto label6;

        if mirrors == null goto label6;

        l3 = interfaceinvoke mirrors.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        mirror = (org.apache.maven.settings.Mirror) $stack16;

        $stack17 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getMirrorOf()>();

        $stack18 = virtualinvoke repoId.<java.lang.String: boolean equals(java.lang.Object)>($stack17);

        if $stack18 == 0 goto label2;

        $stack20 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean matchesLayout(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>(repository, mirror);

        if $stack20 == 0 goto label2;

        return mirror;

     label2:
        goto label1;

     label3:
        l3 = interfaceinvoke mirrors.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack10 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label6;

        $stack11 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        mirror = (org.apache.maven.settings.Mirror) $stack11;

        $stack12 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getMirrorOf()>();

        $stack13 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean matchPattern(org.apache.maven.artifact.repository.ArtifactRepository,java.lang.String)>(repository, $stack12);

        if $stack13 == 0 goto label5;

        $stack15 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean matchesLayout(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>(repository, mirror);

        if $stack15 == 0 goto label5;

        return mirror;

     label5:
        goto label4;

     label6:
        return null;
    }

    static boolean matchPattern(org.apache.maven.artifact.repository.ArtifactRepository, java.lang.String)
    {
        org.apache.maven.artifact.repository.ArtifactRepository originalRepository;
        java.lang.String originalId, pattern, $stack10, repo, $stack17, $stack19, $stack21, $stack32;
        boolean $stack11, $stack12, $stack16, $stack18, $stack20, $stack22, $stack25, $stack27, $stack29, $stack33, result;
        java.lang.String[] repos;
        int l6, $stack15, l7;

        originalRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        pattern := @parameter1: java.lang.String;

        result = 0;

        originalId = interfaceinvoke originalRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack10 = "*";

        $stack11 = virtualinvoke $stack10.<java.lang.String: boolean equals(java.lang.Object)>(pattern);

        if $stack11 != 0 goto label1;

        $stack12 = virtualinvoke pattern.<java.lang.String: boolean equals(java.lang.Object)>(originalId);

        if $stack12 == 0 goto label2;

     label1:
        result = 1;

        goto label9;

     label2:
        repos = virtualinvoke pattern.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l6 = lengthof repos;

        l7 = 0;

     label3:
        if l7 >= l6 goto label9;

        repo = repos[l7];

        $stack15 = virtualinvoke repo.<java.lang.String: int length()>();

        if $stack15 <= 1 goto label4;

        $stack29 = virtualinvoke repo.<java.lang.String: boolean startsWith(java.lang.String)>("!");

        if $stack29 == 0 goto label4;

        $stack32 = virtualinvoke repo.<java.lang.String: java.lang.String substring(int)>(1);

        $stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>(originalId);

        if $stack33 == 0 goto label8;

        result = 0;

        goto label9;

     label4:
        $stack16 = virtualinvoke repo.<java.lang.String: boolean equals(java.lang.Object)>(originalId);

        if $stack16 == 0 goto label5;

        result = 1;

        goto label9;

     label5:
        $stack17 = "external:*";

        $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(repo);

        if $stack18 == 0 goto label6;

        $stack27 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean isExternalRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(originalRepository);

        if $stack27 == 0 goto label6;

        result = 1;

        goto label8;

     label6:
        $stack19 = "external:http:*";

        $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(repo);

        if $stack20 == 0 goto label7;

        $stack25 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean isExternalHttpRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(originalRepository);

        if $stack25 == 0 goto label7;

        result = 1;

        goto label8;

     label7:
        $stack21 = "*";

        $stack22 = virtualinvoke $stack21.<java.lang.String: boolean equals(java.lang.Object)>(repo);

        if $stack22 == 0 goto label8;

        result = 1;

     label8:
        l7 = l7 + 1;

        goto label3;

     label9:
        return result;
    }

    static boolean isExternalRepo(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        java.net.URL $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository originalRepository;
        java.lang.String $stack3, $stack4, $stack6;
        boolean $stack5, $stack7, $stack8;
        java.net.MalformedURLException $stack9;

        originalRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

     label1:
        $stack2 = new java.net.URL;

        $stack3 = interfaceinvoke originalRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        specialinvoke $stack2.<java.net.URL: void <init>(java.lang.String)>($stack3);

        $stack4 = virtualinvoke $stack2.<java.net.URL: java.lang.String getHost()>();

        $stack5 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean isLocal(java.lang.String)>($stack4);

        if $stack5 != 0 goto label2;

        $stack6 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack7 = virtualinvoke $stack6.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $stack7 != 0 goto label2;

        $stack8 = 1;

        goto label3;

     label2:
        $stack8 = 0;

     label3:
        return $stack8;

     label4:
        $stack9 := @caughtexception;

        return 0;

        catch java.net.MalformedURLException from label1 to label3 with label4;
    }

    private static boolean isLocal(java.lang.String)
    {
        java.lang.String host, $stack1, $stack3;
        boolean $stack2, $stack4, $stack5;

        host := @parameter0: java.lang.String;

        $stack1 = "localhost";

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>(host);

        if $stack2 != 0 goto label1;

        $stack3 = "127.0.0.1";

        $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(host);

        if $stack4 == 0 goto label2;

     label1:
        $stack5 = 1;

        goto label3;

     label2:
        $stack5 = 0;

     label3:
        return $stack5;
    }

    static boolean isExternalHttpRepo(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        java.net.URL $stack2;
        org.apache.maven.artifact.repository.ArtifactRepository originalRepository;
        java.lang.String $stack3, $stack4, $stack5, $stack10, $stack11, $stack14, $stack15, $stack17, $stack18, $stack7;
        boolean $stack6, $stack12, $stack16, $stack19, $stack8, $stack9;
        java.net.MalformedURLException $stack20;

        originalRepository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

     label1:
        $stack2 = new java.net.URL;

        $stack3 = interfaceinvoke originalRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        specialinvoke $stack2.<java.net.URL: void <init>(java.lang.String)>($stack3);

        $stack4 = "http";

        $stack5 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack6 = virtualinvoke $stack4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack5);

        if $stack6 != 0 goto label2;

        $stack10 = "dav";

        $stack11 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack12 = virtualinvoke $stack10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack11);

        if $stack12 != 0 goto label2;

        $stack14 = "dav:http";

        $stack15 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack15);

        if $stack16 != 0 goto label2;

        $stack17 = "dav+http";

        $stack18 = virtualinvoke $stack2.<java.net.URL: java.lang.String getProtocol()>();

        $stack19 = virtualinvoke $stack17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack18);

        if $stack19 == 0 goto label3;

     label2:
        $stack7 = virtualinvoke $stack2.<java.net.URL: java.lang.String getHost()>();

        $stack8 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean isLocal(java.lang.String)>($stack7);

        if $stack8 != 0 goto label3;

        $stack9 = 1;

        goto label4;

     label3:
        $stack9 = 0;

     label4:
        return $stack9;

     label5:
        $stack20 := @caughtexception;

        return 0;

        catch java.net.MalformedURLException from label1 to label4 with label5;
    }

    static boolean matchesLayout(org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.settings.Mirror)
    {
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.lang.String $stack2, $stack3;
        org.apache.maven.settings.Mirror mirror;
        boolean $stack4;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        mirror := @parameter1: org.apache.maven.settings.Mirror;

        $stack2 = staticinvoke <org.apache.maven.RepositoryUtils: java.lang.String getLayout(org.apache.maven.artifact.repository.ArtifactRepository)>(repository);

        $stack3 = virtualinvoke mirror.<org.apache.maven.settings.Mirror: java.lang.String getMirrorOfLayouts()>();

        $stack4 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: boolean matchesLayout(java.lang.String,java.lang.String)>($stack2, $stack3);

        return $stack4;
    }

    static boolean matchesLayout(java.lang.String, java.lang.String)
    {
        java.lang.String mirrorLayout, $stack9, repoLayout, layout, $stack16, $stack23;
        boolean $stack8, $stack10, $stack11, $stack15, $stack17, $stack20, $stack24, result;
        java.lang.String[] layouts;
        int l5, $stack14, l6;

        repoLayout := @parameter0: java.lang.String;

        mirrorLayout := @parameter1: java.lang.String;

        result = 0;

        $stack8 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(mirrorLayout);

        if $stack8 != 0 goto label1;

        $stack9 = "*";

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean equals(java.lang.Object)>(mirrorLayout);

        if $stack10 == 0 goto label2;

     label1:
        result = 1;

        goto label8;

     label2:
        $stack11 = virtualinvoke mirrorLayout.<java.lang.String: boolean equals(java.lang.Object)>(repoLayout);

        if $stack11 == 0 goto label3;

        result = 1;

        goto label8;

     label3:
        layouts = virtualinvoke mirrorLayout.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l5 = lengthof layouts;

        l6 = 0;

     label4:
        if l6 >= l5 goto label8;

        layout = layouts[l6];

        $stack14 = virtualinvoke layout.<java.lang.String: int length()>();

        if $stack14 <= 1 goto label5;

        $stack20 = virtualinvoke layout.<java.lang.String: boolean startsWith(java.lang.String)>("!");

        if $stack20 == 0 goto label5;

        $stack23 = virtualinvoke layout.<java.lang.String: java.lang.String substring(int)>(1);

        $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(repoLayout);

        if $stack24 == 0 goto label7;

        result = 0;

        goto label8;

     label5:
        $stack15 = virtualinvoke layout.<java.lang.String: boolean equals(java.lang.Object)>(repoLayout);

        if $stack15 == 0 goto label6;

        result = 1;

        goto label8;

     label6:
        $stack16 = "*";

        $stack17 = virtualinvoke $stack16.<java.lang.String: boolean equals(java.lang.Object)>(layout);

        if $stack17 == 0 goto label7;

        result = 1;

     label7:
        l6 = l6 + 1;

        goto label4;

     label8:
        return result;
    }

    private static java.util.List lambda$getEffectiveRepositories$0(java.lang.String)
    {
        java.util.ArrayList $stack1;
        java.lang.String k;

        k := @parameter0: java.lang.String;

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <MavenRepositorySystem: java.lang.String EXTERNAL_HTTP_WILDCARD> = "external:http:*";

        <MavenRepositorySystem: java.lang.String EXTERNAL_WILDCARD> = "external:*";

        <MavenRepositorySystem: java.lang.String WILDCARD> = "*";

        return;
    }
}
