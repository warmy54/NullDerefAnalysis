public class MavenSettingsMerger extends java.lang.Object
{

    public void <init>()
    {
        MavenSettingsMerger this;

        this := @this: MavenSettingsMerger;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void merge(org.apache.maven.settings.Settings, org.apache.maven.settings.Settings, java.lang.String)
    {
        org.apache.maven.settings.Settings dominant, recessive;
        java.lang.String recessiveSourceLevel, $stack14, $stack24, pluginGroupId, profileId;
        java.util.List recessiveActiveProfiles, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, dominantActiveProfiles, dominantPluginGroupIds#8, profileId#9;
        boolean $stack15, $stack41, $stack52, $stack47, $stack38;
        java.util.Iterator l8, dominantPluginGroupIds;
        java.lang.Object $stack40, $stack51;
        java.util.ArrayList $stack44, $stack55;
        MavenSettingsMerger this;

        this := @this: MavenSettingsMerger;

        dominant := @parameter0: org.apache.maven.settings.Settings;

        recessive := @parameter1: org.apache.maven.settings.Settings;

        recessiveSourceLevel := @parameter2: java.lang.String;

        if dominant == null goto label01;

        if recessive != null goto label02;

     label01:
        return;

     label02:
        virtualinvoke recessive.<org.apache.maven.settings.Settings: void setSourceLevel(java.lang.String)>(recessiveSourceLevel);

        dominantActiveProfiles = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.util.List getActiveProfiles()>();

        recessiveActiveProfiles = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.util.List getActiveProfiles()>();

        if recessiveActiveProfiles == null goto label06;

        if dominantActiveProfiles != null goto label03;

        $stack55 = new java.util.ArrayList;

        specialinvoke $stack55.<java.util.ArrayList: void <init>()>();

        dominantActiveProfiles = $stack55;

        virtualinvoke dominant.<org.apache.maven.settings.Settings: void setActiveProfiles(java.util.List)>($stack55);

     label03:
        dominantPluginGroupIds = interfaceinvoke recessiveActiveProfiles.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $stack47 = interfaceinvoke dominantPluginGroupIds.<java.util.Iterator: boolean hasNext()>();

        if $stack47 == 0 goto label06;

        $stack51 = interfaceinvoke dominantPluginGroupIds.<java.util.Iterator: java.lang.Object next()>();

        profileId = (java.lang.String) $stack51;

        $stack52 = interfaceinvoke dominantActiveProfiles.<java.util.List: boolean contains(java.lang.Object)>(profileId);

        if $stack52 != 0 goto label05;

        interfaceinvoke dominantActiveProfiles.<java.util.List: boolean add(java.lang.Object)>(profileId);

     label05:
        goto label04;

     label06:
        dominantPluginGroupIds#8 = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.util.List getPluginGroups()>();

        profileId#9 = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.util.List getPluginGroups()>();

        if profileId#9 == null goto label10;

        if dominantPluginGroupIds#8 != null goto label07;

        $stack44 = new java.util.ArrayList;

        specialinvoke $stack44.<java.util.ArrayList: void <init>()>();

        dominantPluginGroupIds#8 = $stack44;

        virtualinvoke dominant.<org.apache.maven.settings.Settings: void setPluginGroups(java.util.List)>($stack44);

     label07:
        l8 = interfaceinvoke profileId#9.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $stack38 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack38 == 0 goto label10;

        $stack40 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        pluginGroupId = (java.lang.String) $stack40;

        $stack41 = interfaceinvoke dominantPluginGroupIds#8.<java.util.List: boolean contains(java.lang.Object)>(pluginGroupId);

        if $stack41 != 0 goto label09;

        interfaceinvoke dominantPluginGroupIds#8.<java.util.List: boolean add(java.lang.Object)>(pluginGroupId);

     label09:
        goto label08;

     label10:
        $stack14 = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.lang.String getLocalRepository()>();

        $stack15 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>($stack14);

        if $stack15 == 0 goto label11;

        $stack24 = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.lang.String getLocalRepository()>();

        virtualinvoke dominant.<org.apache.maven.settings.Settings: void setLocalRepository(java.lang.String)>($stack24);

     label11:
        $stack16 = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.util.List getMirrors()>();

        $stack17 = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.util.List getMirrors()>();

        staticinvoke <org.apache.maven.settings.merge.MavenSettingsMerger: void shallowMergeById(java.util.List,java.util.List,java.lang.String)>($stack16, $stack17, recessiveSourceLevel);

        $stack18 = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.util.List getServers()>();

        $stack19 = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.util.List getServers()>();

        staticinvoke <org.apache.maven.settings.merge.MavenSettingsMerger: void shallowMergeById(java.util.List,java.util.List,java.lang.String)>($stack18, $stack19, recessiveSourceLevel);

        $stack20 = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.util.List getProxies()>();

        $stack21 = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.util.List getProxies()>();

        staticinvoke <org.apache.maven.settings.merge.MavenSettingsMerger: void shallowMergeById(java.util.List,java.util.List,java.lang.String)>($stack20, $stack21, recessiveSourceLevel);

        $stack22 = virtualinvoke dominant.<org.apache.maven.settings.Settings: java.util.List getProfiles()>();

        $stack23 = virtualinvoke recessive.<org.apache.maven.settings.Settings: java.util.List getProfiles()>();

        staticinvoke <org.apache.maven.settings.merge.MavenSettingsMerger: void shallowMergeById(java.util.List,java.util.List,java.lang.String)>($stack22, $stack23, recessiveSourceLevel);

        return;
    }

    private static void shallowMergeById(java.util.List, java.util.List, java.lang.String)
    {
        java.util.List dominant, recessive;
        java.util.Map dominantById;
        java.util.ArrayList $stack8;
        int $stack9;
        java.util.Iterator l5;
        boolean $stack11, $stack15;
        java.lang.Object $stack13;
        org.apache.maven.settings.IdentifiableBase identifiable;
        java.lang.String $stack14, recessiveSourceLevel;

        dominant := @parameter0: java.util.List;

        recessive := @parameter1: java.util.List;

        recessiveSourceLevel := @parameter2: java.lang.String;

        dominantById = staticinvoke <org.apache.maven.settings.merge.MavenSettingsMerger: java.util.Map mapById(java.util.List)>(dominant);

        $stack8 = new java.util.ArrayList;

        $stack9 = interfaceinvoke recessive.<java.util.List: int size()>();

        specialinvoke $stack8.<java.util.ArrayList: void <init>(int)>($stack9);

        l5 = interfaceinvoke recessive.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label3;

        $stack13 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        identifiable = (org.apache.maven.settings.IdentifiableBase) $stack13;

        $stack14 = virtualinvoke identifiable.<org.apache.maven.settings.IdentifiableBase: java.lang.String getId()>();

        $stack15 = interfaceinvoke dominantById.<java.util.Map: boolean containsKey(java.lang.Object)>($stack14);

        if $stack15 != 0 goto label2;

        virtualinvoke identifiable.<org.apache.maven.settings.IdentifiableBase: void setSourceLevel(java.lang.String)>(recessiveSourceLevel);

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(identifiable);

     label2:
        goto label1;

     label3:
        interfaceinvoke dominant.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $stack8);

        return;
    }

    private static java.util.Map mapById(java.util.List)
    {
        java.util.HashMap $stack4;
        java.util.List identifiables;
        java.util.Iterator l2;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.settings.IdentifiableBase identifiable;
        java.lang.String $stack8;

        identifiables := @parameter0: java.util.List;

        $stack4 = new java.util.HashMap;

        specialinvoke $stack4.<java.util.HashMap: void <init>()>();

        l2 = interfaceinvoke identifiables.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        identifiable = (org.apache.maven.settings.IdentifiableBase) $stack7;

        $stack8 = virtualinvoke identifiable.<org.apache.maven.settings.IdentifiableBase: java.lang.String getId()>();

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack8, identifiable);

        goto label1;

     label2:
        return $stack4;
    }
}
