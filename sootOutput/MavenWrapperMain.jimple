public class MavenWrapperMain extends java.lang.Object
{
    private static final java.lang.String POM_PROPERTIES;
    public static final java.lang.String DEFAULT_MAVEN_USER_HOME;
    public static final java.lang.String MVNW_VERBOSE;
    public static final java.lang.String MVNW_USERNAME;
    public static final java.lang.String MVNW_PASSWORD;
    public static final java.lang.String MVNW_REPOURL;
    public static final java.lang.String MVN_PATH;

    public void <init>()
    {
        MavenWrapperMain this;

        this := @this: MavenWrapperMain;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.nio.file.Path wrapperJar, propertiesFile, $stack16;
        java.lang.String wrapperVersion, $stack11;
        java.lang.StringBuilder $stack9, $stack10, $u0;
        org.apache.maven.wrapper.WrapperExecutor wrapperExecutor;
        java.lang.String[] args;
        org.apache.maven.wrapper.DefaultDownloader $u1;
        org.apache.maven.wrapper.PathAssembler $u2;
        org.apache.maven.wrapper.Installer $u3;
        org.apache.maven.wrapper.BootstrapMainStarter $u4;
        org.apache.maven.wrapper.Downloader $r0;

        args := @parameter0: java.lang.String[];

        wrapperJar = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.nio.file.Path wrapperJar()>();

        propertiesFile = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.nio.file.Path wrapperProperties(java.nio.file.Path)>(wrapperJar);

        wrapperVersion = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.lang.String wrapperVersion()>();

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Apache Maven Wrapper ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(wrapperVersion);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.maven.wrapper.Logger: void info(java.lang.String)>($stack11);

        wrapperExecutor = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)>(propertiesFile);

        $u3 = new org.apache.maven.wrapper.Installer;

        $u1 = new org.apache.maven.wrapper.DefaultDownloader;

        specialinvoke $u1.<org.apache.maven.wrapper.DefaultDownloader: void <init>(java.lang.String,java.lang.String)>("mvnw", wrapperVersion);

        $u2 = new org.apache.maven.wrapper.PathAssembler;

        $stack16 = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.nio.file.Path mavenUserHome()>();

        specialinvoke $u2.<org.apache.maven.wrapper.PathAssembler: void <init>(java.nio.file.Path)>($stack16);

        $r0 = (org.apache.maven.wrapper.Downloader) $u1;

        specialinvoke $u3.<org.apache.maven.wrapper.Installer: void <init>(org.apache.maven.wrapper.Downloader,org.apache.maven.wrapper.PathAssembler)>($r0, $u2);

        $u4 = new org.apache.maven.wrapper.BootstrapMainStarter;

        specialinvoke $u4.<org.apache.maven.wrapper.BootstrapMainStarter: void <init>()>();

        virtualinvoke wrapperExecutor.<org.apache.maven.wrapper.WrapperExecutor: void execute(java.lang.String[],org.apache.maven.wrapper.Installer,org.apache.maven.wrapper.BootstrapMainStarter)>(args, $u3, $u4);

        return;
    }

    private static java.nio.file.Path wrapperProperties(java.nio.file.Path) throws java.net.URISyntaxException
    {
        java.nio.file.Path $stack1, wrapperJar, $stack2, $stack5;
        java.lang.String $stack3, $stack4;

        wrapperJar := @parameter0: java.nio.file.Path;

        $stack1 = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.nio.file.Path wrapperJar()>();

        $stack2 = interfaceinvoke wrapperJar.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $stack3 = interfaceinvoke $stack2.<java.nio.file.Path: java.lang.String toString()>();

        $stack4 = virtualinvoke $stack3.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\.jar$", ".properties");

        $stack5 = interfaceinvoke $stack1.<java.nio.file.Path: java.nio.file.Path resolveSibling(java.lang.String)>($stack4);

        return $stack5;
    }

    private static java.nio.file.Path wrapperJar() throws java.net.URISyntaxException
    {
        java.lang.Class $stack1;
        java.security.ProtectionDomain $stack2;
        java.security.CodeSource $stack3;
        java.net.URL $stack4;
        java.net.URI location;
        java.nio.file.Path $stack6;

        $stack1 = class "Lorg/apache/maven/wrapper/MavenWrapperMain;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $stack3 = virtualinvoke $stack2.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        $stack4 = virtualinvoke $stack3.<java.security.CodeSource: java.net.URL getLocation()>();

        location = virtualinvoke $stack4.<java.net.URL: java.net.URI toURI()>();

        $stack6 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>(location);

        return $stack6;
    }

    static java.lang.String wrapperVersion()
    {
        java.lang.Class $stack4;
        java.util.Properties $stack6;
        java.lang.NullPointerException $stack9;
        java.lang.IllegalStateException $stack10;
        java.io.IOException $stack11;
        java.lang.RuntimeException $stack12;
        java.lang.Throwable $stack13, $stack14;
        java.io.InputStream resourceAsStream;
        java.lang.String version;

     label01:
        $stack4 = class "Lorg/apache/maven/wrapper/MavenWrapperMain;";

        resourceAsStream = virtualinvoke $stack4.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/META-INF/maven/org.apache.maven/maven-wrapper/pom.properties");

     label02:
        if resourceAsStream != null goto label03;

        $stack10 = new java.lang.IllegalStateException;

        specialinvoke $stack10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("/META-INF/maven/org.apache.maven/maven-wrapper/pom.properties not found.");

        throw $stack10;

     label03:
        $stack6 = new java.util.Properties;

        specialinvoke $stack6.<java.util.Properties: void <init>()>();

        virtualinvoke $stack6.<java.util.Properties: void load(java.io.InputStream)>(resourceAsStream);

        version = virtualinvoke $stack6.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");

        if version != null goto label04;

        $stack9 = new java.lang.NullPointerException;

        specialinvoke $stack9.<java.lang.NullPointerException: void <init>(java.lang.String)>("No version specified in /META-INF/maven/org.apache.maven/maven-wrapper/pom.properties");

        throw $stack9;

     label04:
        if resourceAsStream == null goto label05;

        virtualinvoke resourceAsStream.<java.io.InputStream: void close()>();

     label05:
        return version;

     label06:
        $stack14 := @caughtexception;

        if resourceAsStream == null goto label10;

     label07:
        virtualinvoke resourceAsStream.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $stack13 := @caughtexception;

        virtualinvoke $stack14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack13);

     label10:
        throw $stack14;

     label11:
        $stack11 := @caughtexception;

        $stack12 = new java.lang.RuntimeException;

        specialinvoke $stack12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not determine wrapper version.", $stack11);

        throw $stack12;

        catch java.lang.Throwable from label02 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label01 to label05 with label11;
        catch java.io.IOException from label06 to label11 with label11;
    }

    private static java.nio.file.Path mavenUserHome()
    {
        java.lang.String[] $stack0;
        java.lang.String $stack1;
        java.nio.file.Path $stack2;

        $stack1 = <org.apache.maven.wrapper.MavenWrapperMain: java.lang.String DEFAULT_MAVEN_USER_HOME>;

        $stack0 = newarray (java.lang.String)[0];

        $stack2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($stack1, $stack0);

        return $stack2;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $stack0, $stack2, $stack3, $stack5, $stack6, $stack8, $stack9, $stack11, $stack12;
        java.lang.String $stack1, $stack4, $stack7, $stack10, $stack13;

        <MavenWrapperMain: java.lang.String MVNW_REPOURL> = "MVNW_REPOURL";

        <MavenWrapperMain: java.lang.String MVNW_PASSWORD> = "MVNW_PASSWORD";

        <MavenWrapperMain: java.lang.String MVNW_USERNAME> = "MVNW_USERNAME";

        <MavenWrapperMain: java.lang.String MVNW_VERBOSE> = "MVNW_VERBOSE";

        <MavenWrapperMain: java.lang.String POM_PROPERTIES> = "/META-INF/maven/org.apache.maven/maven-wrapper/pom.properties";

        $stack0 = new java.lang.StringBuilder;

        specialinvoke $stack0.<java.lang.StringBuilder: void <init>()>();

        $stack1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $stack2 = virtualinvoke $stack0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack1);

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.m2");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.maven.wrapper.MavenWrapperMain: java.lang.String DEFAULT_MAVEN_USER_HOME> = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/maven/apache-maven/");

        $stack7 = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.lang.String wrapperVersion()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/apache-maven-");

        $stack10 = staticinvoke <org.apache.maven.wrapper.MavenWrapperMain: java.lang.String wrapperVersion()>();

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-bin.zip");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.maven.wrapper.MavenWrapperMain: java.lang.String MVN_PATH> = $stack13;

        return;
    }
}
