public class ModelMergerTest extends java.lang.Object
{
    private org.apache.maven.model.merge.ModelMerger modelMerger;

    public void <init>()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $u0;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.model.merge.ModelMerger;

        specialinvoke $u0.<org.apache.maven.model.merge.ModelMerger: void <init>()>();

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger> = $u0;

        return;
    }

    public void mergeArtifactId()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getArtifactId()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getArtifactId()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeSameContributors()
    {
        org.apache.maven.model.Contributor[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.Contributor $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Contributor;

        specialinvoke $u0.<org.apache.maven.model.Contributor: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Contributor: void setEmail(java.lang.String)>("contributor@maven.apache.org");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.Contributor)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setContributors(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.Contributor)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setContributors(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getContributors()>();

        $stack13 = newarray (org.apache.maven.model.Contributor)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeSameDependencies()
    {
        org.apache.maven.model.Dependency[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("groupId");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("artifactId");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setType(java.lang.String)>("type");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.Dependency)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setDependencies(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.Dependency)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setDependencies(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getDependencies()>();

        $stack13 = newarray (org.apache.maven.model.Dependency)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeDescription()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setDescription(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setDescription(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getDescription()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setDescription(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getDescription()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeSameDevelopers()
    {
        org.apache.maven.model.Developer[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.Developer $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Developer;

        specialinvoke $u0.<org.apache.maven.model.Developer: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Developer: void setId(java.lang.String)>("devid");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.Developer)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setDevelopers(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.Developer)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setDevelopers(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getDevelopers()>();

        $stack13 = newarray (org.apache.maven.model.Developer)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeSameExcludes()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.PatternSet $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.PatternSet;

        specialinvoke $u0.<org.apache.maven.model.PatternSet: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.PatternSet: void setExcludes(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.PatternSet;

        specialinvoke $u1.<org.apache.maven.model.PatternSet: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.PatternSet: void setExcludes(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergePatternSet_Excludes(org.apache.maven.model.PatternSet,org.apache.maven.model.PatternSet,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.PatternSet: java.util.List getExcludes()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeSameFilters()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.Build $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Build;

        specialinvoke $u0.<org.apache.maven.model.Build: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.Build: void setFilters(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.Build;

        specialinvoke $u1.<org.apache.maven.model.Build: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.Build: void setFilters(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergeBuild(org.apache.maven.model.Build,org.apache.maven.model.Build,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.Build: java.util.List getFilters()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeSameGoals()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.PluginExecution $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.PluginExecution;

        specialinvoke $u0.<org.apache.maven.model.PluginExecution: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.PluginExecution: void setGoals(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.PluginExecution;

        specialinvoke $u1.<org.apache.maven.model.PluginExecution: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.PluginExecution: void setGoals(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergePluginExecution(org.apache.maven.model.PluginExecution,org.apache.maven.model.PluginExecution,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.PluginExecution: java.util.List getGoals()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeGroupId()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeInceptionYear()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setInceptionYear(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setInceptionYear(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getInceptionYear()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setInceptionYear(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getInceptionYear()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeSameIncludes()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.PatternSet $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.PatternSet;

        specialinvoke $u0.<org.apache.maven.model.PatternSet: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.PatternSet: void setIncludes(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.PatternSet;

        specialinvoke $u1.<org.apache.maven.model.PatternSet: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.PatternSet: void setIncludes(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergePatternSet_Includes(org.apache.maven.model.PatternSet,org.apache.maven.model.PatternSet,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.PatternSet: java.util.List getIncludes()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeSameMailingLists()
    {
        org.apache.maven.model.MailingList[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.MailingList $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.MailingList;

        specialinvoke $u0.<org.apache.maven.model.MailingList: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.MailingList: void setName(java.lang.String)>("name");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.MailingList)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setMailingLists(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.MailingList)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setMailingLists(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getMailingLists()>();

        $stack13 = newarray (org.apache.maven.model.MailingList)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeModelVersion()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setModelVersion(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setModelVersion(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getModelVersion()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setModelVersion(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getModelVersion()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeSameModules()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setModules(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setModules(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.Model: java.util.List getModules()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeName()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setName(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setName(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getName()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setName(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getName()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeSameOtherArchives()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.MailingList $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.MailingList;

        specialinvoke $u0.<org.apache.maven.model.MailingList: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.MailingList: void setOtherArchives(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.MailingList;

        specialinvoke $u1.<org.apache.maven.model.MailingList: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.MailingList: void setOtherArchives(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergeMailingList(org.apache.maven.model.MailingList,org.apache.maven.model.MailingList,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.MailingList: java.util.List getOtherArchives()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergePackaging()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setPackaging(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setPackaging(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getPackaging()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setPackaging(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getPackaging()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeSamePluginRepositories()
    {
        org.apache.maven.model.Repository[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.Repository $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Repository;

        specialinvoke $u0.<org.apache.maven.model.Repository: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Repository: void setId(java.lang.String)>("repository");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.Repository)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setPluginRepositories(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.Repository)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setPluginRepositories(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getPluginRepositories()>();

        $stack13 = newarray (org.apache.maven.model.Repository)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeSameProfiles()
    {
        org.apache.maven.model.Profile[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.Profile $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Profile;

        specialinvoke $u0.<org.apache.maven.model.Profile: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Profile: void setId(java.lang.String)>("profile");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.Profile)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setProfiles(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.Profile)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setProfiles(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getProfiles()>();

        $stack13 = newarray (org.apache.maven.model.Profile)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeSameReports()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.ReportSet $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.ReportSet;

        specialinvoke $u0.<org.apache.maven.model.ReportSet: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.ReportSet: void setReports(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.ReportSet;

        specialinvoke $u1.<org.apache.maven.model.ReportSet: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.ReportSet: void setReports(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergeReportSet(org.apache.maven.model.ReportSet,org.apache.maven.model.ReportSet,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.ReportSet: java.util.List getReports()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeSameRepositories()
    {
        org.apache.maven.model.Repository[] $stack6, $stack9, $stack13;
        java.util.List $stack7, $stack10, $stack12;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack11;
        org.hamcrest.Matcher $stack14;
        org.apache.maven.model.Repository $u0;
        org.apache.maven.model.Model $u1, $u2;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Repository;

        specialinvoke $u0.<org.apache.maven.model.Repository: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Repository: void setId(java.lang.String)>("repository");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        $stack6 = newarray (org.apache.maven.model.Repository)[1];

        $stack6[0] = $u0;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack6);

        virtualinvoke $u1.<org.apache.maven.model.Model: void setRepositories(java.util.List)>($stack7);

        $u2 = new org.apache.maven.model.Model;

        specialinvoke $u2.<org.apache.maven.model.Model: void <init>()>();

        $stack9 = newarray (org.apache.maven.model.Repository)[1];

        $stack9[0] = $u0;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        virtualinvoke $u2.<org.apache.maven.model.Model: void setRepositories(java.util.List)>($stack10);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack11 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack11.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u1, $u2, 1, null);

        $stack12 = virtualinvoke $u1.<org.apache.maven.model.Model: java.util.List getRepositories()>();

        $stack13 = newarray (org.apache.maven.model.Repository)[1];

        $stack13[0] = $u0;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack14);

        return;
    }

    public void mergeSameRoles()
    {
        java.lang.String[] $stack4, $stack7, $stack11;
        java.util.List $stack5, $stack8, $stack10;
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack9;
        org.hamcrest.Matcher $stack12;
        org.apache.maven.model.Contributor $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Contributor;

        specialinvoke $u0.<org.apache.maven.model.Contributor: void <init>()>();

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = "first";

        $stack4[1] = "second";

        $stack4[2] = "third";

        $stack5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        virtualinvoke $u0.<org.apache.maven.model.Contributor: void setRoles(java.util.List)>($stack5);

        $u1 = new org.apache.maven.model.Contributor;

        specialinvoke $u1.<org.apache.maven.model.Contributor: void <init>()>();

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "first";

        $stack7[1] = "second";

        $stack7[2] = "third";

        $stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7);

        virtualinvoke $u1.<org.apache.maven.model.Contributor: void setRoles(java.util.List)>($stack8);

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack9 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack9.<org.apache.maven.model.merge.ModelMerger: void mergeContributor_Roles(org.apache.maven.model.Contributor,org.apache.maven.model.Contributor,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack10 = virtualinvoke $u0.<org.apache.maven.model.Contributor: java.util.List getRoles()>();

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = "first";

        $stack11[1] = "second";

        $stack11[2] = "third";

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack12);

        return;
    }

    public void mergeUrl()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setUrl(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setUrl(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getUrl()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setUrl(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getUrl()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }

    public void mergeVersion()
    {
        ModelMergerTest this;
        org.apache.maven.model.merge.ModelMerger $stack5, $stack8;
        java.lang.String $stack6, $stack9;
        org.hamcrest.Matcher $stack7, $stack10;
        org.apache.maven.model.Model $u0, $u1;
        org.apache.maven.model.merge.ModelMergerTest $r0, $r1;

        this := @this: ModelMergerTest;

        $u0 = new org.apache.maven.model.Model;

        specialinvoke $u0.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Model: void setVersion(java.lang.String)>("TARGET");

        $u1 = new org.apache.maven.model.Model;

        specialinvoke $u1.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $u1.<org.apache.maven.model.Model: void setVersion(java.lang.String)>("SOURCE");

        $r0 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack5 = $r0.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack5.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 1, null);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getVersion()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("SOURCE");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        virtualinvoke $u0.<org.apache.maven.model.Model: void setVersion(java.lang.String)>("TARGET");

        $r1 = (org.apache.maven.model.merge.ModelMergerTest) this;

        $stack8 = $r1.<org.apache.maven.model.merge.ModelMergerTest: org.apache.maven.model.merge.ModelMerger modelMerger>;

        virtualinvoke $stack8.<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>($u0, $u1, 0, null);

        $stack9 = virtualinvoke $u0.<org.apache.maven.model.Model: java.lang.String getVersion()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TARGET");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        return;
    }
}
