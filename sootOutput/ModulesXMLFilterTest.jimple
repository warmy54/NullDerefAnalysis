public class ModulesXMLFilterTest extends org.apache.maven.model.transform.AbstractXMLFilterTests
{

    public void <init>()
    {
        ModulesXMLFilterTest this;

        this := @this: ModulesXMLFilterTest;

        specialinvoke this.<org.apache.maven.model.transform.AbstractXMLFilterTests: void <init>()>();

        return;
    }

    protected org.apache.maven.model.transform.ModulesXMLFilter getFilter(java.util.function.Consumer)
    {
        org.apache.maven.model.transform.ModulesXMLFilter $stack3;
        java.util.function.Consumer lexicalHandlerConsumer;
        ModulesXMLFilterTest this;

        this := @this: ModulesXMLFilterTest;

        lexicalHandlerConsumer := @parameter0: java.util.function.Consumer;

        $stack3 = new org.apache.maven.model.transform.ModulesXMLFilter;

        specialinvoke $stack3.<org.apache.maven.model.transform.ModulesXMLFilter: void <init>()>();

        interfaceinvoke lexicalHandlerConsumer.<java.util.function.Consumer: void accept(java.lang.Object)>($stack3);

        return $stack3;
    }

    public void emptyModules() throws java.lang.Exception
    {
        ModulesXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ModulesXMLFilterTest $r0;

        this := @this: ModulesXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ModulesXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ModulesXMLFilterTest: java.lang.String transform(java.lang.String)>("<project><modules/></project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project/>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void setOfModules() throws java.lang.Exception
    {
        ModulesXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ModulesXMLFilterTest $r0;

        this := @this: ModulesXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ModulesXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ModulesXMLFilterTest: java.lang.String transform(java.lang.String)>("<project><modules><module>ab</module><module>../cd</module></modules></project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project/>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void noModules() throws java.lang.Exception
    {
        ModulesXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ModulesXMLFilterTest $r0;

        this := @this: ModulesXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ModulesXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ModulesXMLFilterTest: java.lang.String transform(java.lang.String)>("<project><name>NAME</name></project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project><name>NAME</name></project>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void comment() throws java.lang.Exception
    {
        ModulesXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ModulesXMLFilterTest $r0;

        this := @this: ModulesXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ModulesXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ModulesXMLFilterTest: java.lang.String transform(java.lang.String)>("<project><!--before--><modules><!--pre-in--><module><!--in-->ab</module><module>../cd</module><!--post-in--></modules><!--after--></project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project><!--before--><!--after--></project>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void setOfModulesLF() throws java.lang.Exception
    {
        ModulesXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ModulesXMLFilterTest $r0;

        this := @this: ModulesXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ModulesXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ModulesXMLFilterTest: java.lang.String transform(java.lang.String)>("<project>\n\n  <modules>\n    <module>ab</module>\n    <module>../cd</module>\n  </modules>\n\n</project>\n");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project>\n\n  \n\n</project>\n");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    protected volatile org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter(java.util.function.Consumer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        ModulesXMLFilterTest this;
        java.util.function.Consumer l1;
        org.apache.maven.model.transform.ModulesXMLFilter $stack2;
        org.apache.maven.model.transform.ModulesXMLFilterTest $r0;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r1;

        this := @this: ModulesXMLFilterTest;

        l1 := @parameter0: java.util.function.Consumer;

        $r0 = (org.apache.maven.model.transform.ModulesXMLFilterTest) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.model.transform.ModulesXMLFilterTest: org.apache.maven.model.transform.ModulesXMLFilter getFilter(java.util.function.Consumer)>(l1);

        $r1 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $stack2;

        return $r1;
    }
}
