public class MultiMap extends org.ooc.frontend.model.Node
{
    final java.util.Map map;

    public void <init>()
    {
        MultiMap this;
        org.ooc.frontend.model.tokens.Token $stack1;
        java.util.LinkedHashMap $u0;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        $stack1 = <org.ooc.frontend.model.tokens.Token: org.ooc.frontend.model.tokens.Token defaultToken>;

        specialinvoke this.<org.ooc.frontend.model.Node: void <init>(org.ooc.frontend.model.tokens.Token)>($stack1);

        $u0 = new java.util.LinkedHashMap;

        specialinvoke $u0.<java.util.LinkedHashMap: void <init>()>();

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map> = $u0;

        return;
    }

    public void put(java.lang.Object, java.lang.Object)
    {
        MultiMap this;
        java.lang.Object key, value;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        key := @parameter0: java.lang.Object;

        value := @parameter1: java.lang.Object;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        virtualinvoke $r0.<org.ooc.middle.structs.MultiMap: void add(java.lang.Object,java.lang.Object)>(key, value);

        return;
    }

    public void add(java.lang.Object, java.lang.Object)
    {
        MultiMap this;
        java.lang.Object key, o, value;
        java.util.Map $stack5, $stack11, $stack14;
        boolean $stack7;
        java.util.List list;
        java.util.ArrayList $u0;
        org.ooc.middle.structs.MultiMap $r0, $r1, $r2;

        this := @this: MultiMap;

        key := @parameter0: java.lang.Object;

        value := @parameter1: java.lang.Object;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack5 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        o = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        if o != null goto label1;

        $r1 = (org.ooc.middle.structs.MultiMap) this;

        $stack14 = $r1.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        interfaceinvoke $stack14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);

        goto label3;

     label1:
        $stack7 = o instanceof java.util.List;

        if $stack7 == 0 goto label2;

        list = (java.util.List) o;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(value);

        goto label3;

     label2:
        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(o);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(value);

        $r2 = (org.ooc.middle.structs.MultiMap) this;

        $stack11 = $r2.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        interfaceinvoke $stack11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $u0);

     label3:
        return;
    }

    public java.lang.Iterable getAll(java.lang.Object)
    {
        MultiMap this;
        java.lang.Object key, o;
        java.util.Map $stack4;
        boolean $stack6;
        java.util.Set $stack7;
        java.util.List list;
        org.ooc.middle.structs.MultiMap$1 $u0;
        org.ooc.middle.structs.MultiMap $r0, $r1;
        java.lang.Iterable $r2;

        this := @this: MultiMap;

        key := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack4 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        o = interfaceinvoke $stack4.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack6 = o instanceof java.util.List;

        if $stack6 == 0 goto label1;

        list = (java.util.List) o;

        return list;

     label1:
        if o == null goto label2;

        $u0 = new org.ooc.middle.structs.MultiMap$1;

        $r1 = (org.ooc.middle.structs.MultiMap) this;

        specialinvoke $u0.<org.ooc.middle.structs.MultiMap$1: void <init>(org.ooc.middle.structs.MultiMap,java.lang.Object,java.lang.Object)>($r1, o, key);

        $r2 = (java.lang.Iterable) $u0;

        return $r2;

     label2:
        $stack7 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $stack7;
    }

    public java.lang.Object get(java.lang.Object)
    {
        MultiMap this;
        java.lang.Object key, o, $stack7;
        java.util.Map $stack4;
        boolean $stack6;
        java.util.List list;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        key := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack4 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        o = interfaceinvoke $stack4.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack6 = o instanceof java.util.List;

        if $stack6 == 0 goto label1;

        list = (java.util.List) o;

        $stack7 = interfaceinvoke list.<java.util.List: java.lang.Object get(int)>(0);

        return $stack7;

     label1:
        return o;
    }

    public java.lang.String toString()
    {
        MultiMap this;
        java.util.Map $stack1;
        java.lang.String $stack2;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        $stack2 = virtualinvoke $stack1.<java.lang.Object: java.lang.String toString()>();

        return $stack2;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        MultiMap this;
        java.util.Map $stack9, $stack14, $stack18;
        java.util.Set $stack10;
        java.util.Iterator l3;
        boolean $stack12, $stack16;
        java.lang.Object key, o, value;
        org.ooc.frontend.model.Node oldie, kiddo;
        java.util.List list;
        int $stack20, index;
        org.ooc.middle.structs.MultiMap $r0, $r1, $r2;

        this := @this: MultiMap;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack9 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set keySet()>();

        l3 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label7;

        key = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.ooc.middle.structs.MultiMap) this;

        $stack14 = $r1.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        o = interfaceinvoke $stack14.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack16 = o instanceof java.util.List;

        if $stack16 == 0 goto label5;

        list = (java.util.List) o;

        index = 0;

     label2:
        $stack20 = interfaceinvoke list.<java.util.List: int size()>();

        if index >= $stack20 goto label4;

        value = interfaceinvoke list.<java.util.List: java.lang.Object get(int)>(index);

        if oldie != value goto label3;

        interfaceinvoke list.<java.util.List: java.lang.Object set(int,java.lang.Object)>(index, kiddo);

        return 1;

     label3:
        index = index + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        if o == null goto label6;

        if o != oldie goto label6;

        $r2 = (org.ooc.middle.structs.MultiMap) this;

        $stack18 = $r2.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        interfaceinvoke $stack18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(oldie, kiddo);

        return 1;

     label6:
        goto label1;

     label7:
        return 0;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        MultiMap this;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.middle.structs.MultiMap)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        MultiMap this;
        java.util.Map $stack8, $stack13;
        java.util.Set $stack9;
        java.util.Iterator l2, l6;
        boolean $stack11, $stack15, $stack19;
        java.lang.Object key, o, value;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Node $stack17, $stack21;
        java.util.List list;
        org.ooc.middle.structs.MultiMap $r0, $r1;

        this := @this: MultiMap;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack8 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.util.Set keySet()>();

        l2 = interfaceinvoke $stack9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label6;

        key = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.ooc.middle.structs.MultiMap) this;

        $stack13 = $r1.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        o = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack15 = o instanceof java.util.List;

        if $stack15 == 0 goto label4;

        list = (java.util.List) o;

        l6 = interfaceinvoke list.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack19 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label3;

        value = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        $stack21 = (org.ooc.frontend.model.Node) value;

        virtualinvoke $stack21.<org.ooc.frontend.model.Node: void accept(org.ooc.frontend.Visitor)>(visitor);

        goto label2;

     label3:
        goto label5;

     label4:
        if o == null goto label5;

        $stack17 = (org.ooc.frontend.model.Node) o;

        virtualinvoke $stack17.<org.ooc.frontend.model.Node: void accept(org.ooc.frontend.Visitor)>(visitor);

     label5:
        goto label1;

     label6:
        return;
    }

    public boolean hasChildren()
    {
        MultiMap this;
        java.util.Map $stack1;
        int $stack2;
        boolean $stack3;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        if $stack2 <= 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public java.util.Set keySet()
    {
        MultiMap this;
        java.util.Map $stack1;
        java.util.Set $stack2;
        org.ooc.middle.structs.MultiMap $r0;

        this := @this: MultiMap;

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: java.util.Set keySet()>();

        return $stack2;
    }

    public java.util.List values()
    {
        MultiMap this;
        java.util.Map $stack9, $stack14;
        java.util.Set $stack10;
        java.util.Iterator l2, l6;
        boolean $stack12, $stack16, $stack20;
        java.lang.Object key, o, value;
        java.util.List list;
        java.util.ArrayList $u0;
        org.ooc.middle.structs.MultiMap $r0, $r1;

        this := @this: MultiMap;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.ooc.middle.structs.MultiMap) this;

        $stack9 = $r0.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set keySet()>();

        l2 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label6;

        key = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.ooc.middle.structs.MultiMap) this;

        $stack14 = $r1.<org.ooc.middle.structs.MultiMap: java.util.Map map>;

        o = interfaceinvoke $stack14.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack16 = o instanceof java.util.List;

        if $stack16 == 0 goto label4;

        list = (java.util.List) o;

        l6 = interfaceinvoke list.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack20 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label3;

        value = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $u0.<java.util.ArrayList: boolean add(java.lang.Object)>(value);

        goto label2;

     label3:
        goto label5;

     label4:
        if o == null goto label5;

        virtualinvoke $u0.<java.util.ArrayList: boolean add(java.lang.Object)>(o);

     label5:
        goto label1;

     label6:
        return $u0;
    }
}
