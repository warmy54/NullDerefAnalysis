public class MultiModuleCollectionStrategy extends java.lang.Object implements org.apache.maven.project.collector.ProjectCollectionStrategy
{
    private static final org.slf4j.Logger LOGGER;
    private final org.apache.maven.model.locator.ModelLocator modelLocator;
    private final org.apache.maven.project.collector.ProjectsSelector projectsSelector;

    public void <init>(org.apache.maven.model.locator.ModelLocator, org.apache.maven.project.collector.ProjectsSelector)
    {
        MultiModuleCollectionStrategy this;
        org.apache.maven.model.locator.ModelLocator modelLocator;
        org.apache.maven.project.collector.ProjectsSelector projectsSelector;
        org.apache.maven.project.collector.MultiModuleCollectionStrategy $r0, $r1;

        this := @this: MultiModuleCollectionStrategy;

        modelLocator := @parameter0: org.apache.maven.model.locator.ModelLocator;

        projectsSelector := @parameter1: org.apache.maven.project.collector.ProjectsSelector;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        $r0.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.apache.maven.model.locator.ModelLocator modelLocator> = modelLocator;

        $r1 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        $r1.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.apache.maven.project.collector.ProjectsSelector projectsSelector> = projectsSelector;

        return;
    }

    public java.util.List collectProjects(org.apache.maven.execution.MavenExecutionRequest) throws org.apache.maven.project.ProjectBuildingException
    {
        MultiModuleCollectionStrategy this;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.io.File moduleProjectPomFile, $stack7, $stack20;
        java.util.List files, $stack22, $stack28, projects;
        org.apache.maven.project.collector.ProjectsSelector $stack9;
        java.lang.Object[] $stack12;
        org.slf4j.Logger $stack13, $stack25;
        java.lang.String $stack16, $stack18, $stack21, $stack27;
        java.lang.Throwable $stack23;
        boolean isRequestedProjectCollected;
        org.apache.maven.project.collector.MultiModuleCollectionStrategy $r0, $r1, $r2, $r3;
        org.apache.maven.project.ProjectBuildingException $r4;

        this := @this: MultiModuleCollectionStrategy;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $r0 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        moduleProjectPomFile = specialinvoke $r0.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: java.io.File getMultiModuleProjectPomFile(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $stack7 = virtualinvoke moduleProjectPomFile.<java.io.File: java.io.File getAbsoluteFile()>();

        files = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($stack7);

     label1:
        $r1 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        $stack9 = $r1.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.apache.maven.project.collector.ProjectsSelector projectsSelector>;

        projects = interfaceinvoke $stack9.<org.apache.maven.project.collector.ProjectsSelector: java.util.List selectProjects(java.util.List,org.apache.maven.execution.MavenExecutionRequest)>(files, request);

        $r2 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        isRequestedProjectCollected = specialinvoke $r2.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: boolean isRequestedProjectCollected(org.apache.maven.execution.MavenExecutionRequest,java.util.List)>(request, projects);

        if isRequestedProjectCollected == 0 goto label3;

     label2:
        return projects;

     label3:
        $stack13 = <org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.slf4j.Logger LOGGER>;

        $stack12 = newarray (java.lang.Object)[3];

        $stack16 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack12[0] = $stack16;

        $stack18 = virtualinvoke moduleProjectPomFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $stack12[1] = $stack18;

        $stack20 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack21 = virtualinvoke $stack20.<java.io.File: java.lang.String getAbsolutePath()>();

        $stack12[2] = $stack21;

        interfaceinvoke $stack13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Multi module project collection failed:{}Detected a POM file next to a .mvn directory in a parent directory ({}). Maven assumed that POM file to be the parent of the requested project ({}), but it turned out that it was not. Another project collection strategy will be executed as result.", $stack12);

        $stack22 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label4:
        return $stack22;

     label5:
        $stack23 := @caughtexception;

        $r3 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        $r4 = (org.apache.maven.project.ProjectBuildingException) $stack23;

        isRequestedProjectCollected = specialinvoke $r3.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: boolean isModuleOutsideRequestScopeDependingOnPluginModule(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.project.ProjectBuildingException)>(request, $r4);

        if isRequestedProjectCollected == 0 goto label6;

        $stack25 = <org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.slf4j.Logger LOGGER>;

        $stack27 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        interfaceinvoke $stack25.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Multi module project collection failed:{}Detected that one of the modules of this multi module project uses another module as plugin extension which still needed to be built. This is not possible within the same reactor build. Another project collection strategy will be executed as result.", $stack27);

        $stack28 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack28;

     label6:
        throw $stack23;

        catch org.apache.maven.project.ProjectBuildingException from label1 to label2 with label5;
        catch org.apache.maven.project.ProjectBuildingException from label3 to label4 with label5;
    }

    private java.io.File getMultiModuleProjectPomFile(org.apache.maven.execution.MavenExecutionRequest)
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        java.io.File $stack3, $stack4, $stack5, $stack8, multiModuleProjectPom, $stack13, $stack17, $stack21, $stack22;
        boolean $stack6, $stack10;
        MultiModuleCollectionStrategy this;
        org.apache.maven.model.locator.ModelLocator $stack7;
        org.slf4j.Logger $stack11, $stack15;
        java.lang.StringBuilder $stack16, $stack19, $u0;
        java.lang.String $stack18, $stack20;
        org.apache.maven.project.collector.MultiModuleCollectionStrategy $r0;

        this := @this: MultiModuleCollectionStrategy;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        $stack3 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack4 = virtualinvoke $stack3.<java.io.File: java.io.File getParentFile()>();

        $stack5 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getMultiModuleProjectDirectory()>();

        $stack6 = virtualinvoke $stack4.<java.io.File: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label1;

        $stack22 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        return $stack22;

     label1:
        $r0 = (org.apache.maven.project.collector.MultiModuleCollectionStrategy) this;

        $stack7 = $r0.<org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.apache.maven.model.locator.ModelLocator modelLocator>;

        $stack8 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getMultiModuleProjectDirectory()>();

        multiModuleProjectPom = interfaceinvoke $stack7.<org.apache.maven.model.locator.ModelLocator: java.io.File locatePom(java.io.File)>($stack8);

        $stack10 = virtualinvoke multiModuleProjectPom.<java.io.File: boolean exists()>();

        if $stack10 != 0 goto label2;

        $stack11 = <org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.slf4j.Logger LOGGER>;

        $stack13 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getMultiModuleProjectDirectory()>();

        interfaceinvoke $stack11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Maven detected that the requested POM file is part of a multi module project, but could not find a pom.xml file in the multi module root directory \'{}\'.", $stack13);

        $stack15 = <org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.slf4j.Logger LOGGER>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The reactor is limited to all projects under: ");

        $stack17 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack18 = virtualinvoke $stack17.<java.io.File: java.lang.String getParent()>();

        $stack19 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack15.<org.slf4j.Logger: void info(java.lang.String)>($stack20);

        $stack21 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        return $stack21;

     label2:
        return multiModuleProjectPom;
    }

    private boolean isRequestedProjectCollected(org.apache.maven.execution.MavenExecutionRequest, java.util.List)
    {
        java.util.List projects;
        java.util.stream.Stream $stack3, $stack5;
        java.util.function.Function $stack4;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.io.File $stack6;
        java.util.function.Predicate $stack8;
        boolean $stack9;
        MultiModuleCollectionStrategy this;

        this := @this: MultiModuleCollectionStrategy;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        projects := @parameter1: java.util.List;

        $stack3 = interfaceinvoke projects.<java.util.List: java.util.stream.Stream stream()>();

        $stack4 = staticinvoke <MultiModuleCollectionStrategy$getFile__309: java.util.function.Function bootstrap$()>();

        $stack5 = interfaceinvoke $stack3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack4);

        $stack6 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($stack6);

        $stack8 = staticinvoke <MultiModuleCollectionStrategy$equals__314: java.util.function.Predicate bootstrap$(java.io.File)>($stack6);

        $stack9 = interfaceinvoke $stack5.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($stack8);

        return $stack9;
    }

    private boolean isModuleOutsideRequestScopeDependingOnPluginModule(org.apache.maven.execution.MavenExecutionRequest, org.apache.maven.project.ProjectBuildingException)
    {
        org.apache.maven.project.ProjectBuildingException exception;
        java.util.List $stack3;
        java.util.stream.Stream $stack4, $stack6, $stack8, $stack10;
        java.util.function.Function $stack5, $stack12;
        java.util.function.Predicate $stack7, $stack9;
        org.apache.maven.execution.MavenExecutionRequest request;
        java.util.Optional $stack11, $stack13;
        java.lang.Boolean $stack14, $stack16;
        java.lang.Object $stack15;
        boolean $stack17;
        MultiModuleCollectionStrategy this;

        this := @this: MultiModuleCollectionStrategy;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        exception := @parameter1: org.apache.maven.project.ProjectBuildingException;

        $stack3 = virtualinvoke exception.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.util.stream.Stream stream()>();

        $stack5 = staticinvoke <MultiModuleCollectionStrategy$getProject__312: java.util.function.Function bootstrap$()>();

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack5);

        $stack7 = staticinvoke <MultiModuleCollectionStrategy$nonNull__315: java.util.function.Predicate bootstrap$()>();

        $stack8 = interfaceinvoke $stack6.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack7);

        $stack9 = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_0__318: java.util.function.Predicate bootstrap$(org.apache.maven.execution.MavenExecutionRequest)>(request);

        $stack10 = interfaceinvoke $stack8.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack9);

        $stack11 = interfaceinvoke $stack10.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $stack12 = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_7__320: java.util.function.Function bootstrap$(org.apache.maven.project.ProjectBuildingException)>(exception);

        $stack13 = virtualinvoke $stack11.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($stack12);

        $stack14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack15 = virtualinvoke $stack13.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($stack14);

        $stack16 = (java.lang.Boolean) $stack15;

        $stack17 = virtualinvoke $stack16.<java.lang.Boolean: boolean booleanValue()>();

        return $stack17;
    }

    private static java.lang.Boolean lambda$isModuleOutsideRequestScopeDependingOnPluginModule$7(org.apache.maven.project.ProjectBuildingException, org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject requestPomProject;
        java.util.List $stack7, $stack14, $stack8;
        java.util.ArrayList $stack9;
        java.util.function.Predicate projectsOutsideOfRequestScope, pluginArtifactNotFoundException, isPluginPartOfRequestScope;
        org.apache.maven.project.ProjectBuildingException exception;
        java.util.stream.Stream $stack15, $stack16, $stack18, $stack20, $stack21, $stack23;
        java.util.function.Function $stack17, $stack19, $stack22;
        boolean $stack24;
        java.lang.Boolean $stack25;

        exception := @parameter0: org.apache.maven.project.ProjectBuildingException;

        requestPomProject := @parameter1: org.apache.maven.project.MavenProject;

        $stack7 = virtualinvoke requestPomProject.<org.apache.maven.project.MavenProject: java.util.List getCollectedProjects()>();

        if $stack7 == null goto label1;

        $stack8 = virtualinvoke requestPomProject.<org.apache.maven.project.MavenProject: java.util.List getCollectedProjects()>();

        goto label2;

     label1:
        $stack8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        $stack9 = new java.util.ArrayList;

        specialinvoke $stack9.<java.util.ArrayList: void <init>(java.util.Collection)>($stack8);

        interfaceinvoke $stack9.<java.util.List: boolean add(java.lang.Object)>(requestPomProject);

        projectsOutsideOfRequestScope = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_1__310: java.util.function.Predicate bootstrap$(java.util.List)>($stack9);

        pluginArtifactNotFoundException = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_2__313: java.util.function.Predicate bootstrap$()>();

        isPluginPartOfRequestScope = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_4__316: java.util.function.Predicate bootstrap$(java.util.List)>($stack9);

        $stack14 = virtualinvoke exception.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack15 = interfaceinvoke $stack14.<java.util.List: java.util.stream.Stream stream()>();

        $stack16 = interfaceinvoke $stack15.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(projectsOutsideOfRequestScope);

        $stack17 = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_5__317: java.util.function.Function bootstrap$()>();

        $stack18 = interfaceinvoke $stack16.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($stack17);

        $stack19 = staticinvoke <MultiModuleCollectionStrategy$getException__319: java.util.function.Function bootstrap$()>();

        $stack20 = interfaceinvoke $stack18.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack19);

        $stack21 = interfaceinvoke $stack20.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(pluginArtifactNotFoundException);

        $stack22 = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_6__321: java.util.function.Function bootstrap$()>();

        $stack23 = interfaceinvoke $stack21.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack22);

        $stack24 = interfaceinvoke $stack23.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(isPluginPartOfRequestScope);

        $stack25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack24);

        return $stack25;
    }

    private static org.apache.maven.model.Plugin lambda$isModuleOutsideRequestScopeDependingOnPluginModule$6(java.lang.Exception)
    {
        java.lang.Exception exc;
        java.lang.Throwable $stack1;
        org.apache.maven.plugin.PluginResolutionException $stack2;
        org.apache.maven.model.Plugin $stack3;

        exc := @parameter0: java.lang.Exception;

        $stack1 = virtualinvoke exc.<java.lang.Exception: java.lang.Throwable getCause()>();

        $stack2 = (org.apache.maven.plugin.PluginResolutionException) $stack1;

        $stack3 = virtualinvoke $stack2.<org.apache.maven.plugin.PluginResolutionException: org.apache.maven.model.Plugin getPlugin()>();

        return $stack3;
    }

    private static java.util.stream.Stream lambda$isModuleOutsideRequestScopeDependingOnPluginModule$5(org.apache.maven.project.ProjectBuildingResult)
    {
        org.apache.maven.project.ProjectBuildingResult projectBuildingResult;
        java.util.List $stack1;
        java.util.stream.Stream $stack2;

        projectBuildingResult := @parameter0: org.apache.maven.project.ProjectBuildingResult;

        $stack1 = interfaceinvoke projectBuildingResult.<org.apache.maven.project.ProjectBuildingResult: java.util.List getProblems()>();

        $stack2 = interfaceinvoke $stack1.<java.util.List: java.util.stream.Stream stream()>();

        return $stack2;
    }

    private static boolean lambda$isModuleOutsideRequestScopeDependingOnPluginModule$4(java.util.List, org.apache.maven.model.Plugin)
    {
        java.util.List projectsInRequestScope;
        java.util.stream.Stream $stack2;
        org.apache.maven.model.Plugin plugin;
        java.util.function.Predicate $stack3;
        boolean $stack4;

        projectsInRequestScope := @parameter0: java.util.List;

        plugin := @parameter1: org.apache.maven.model.Plugin;

        $stack2 = interfaceinvoke projectsInRequestScope.<java.util.List: java.util.stream.Stream stream()>();

        $stack3 = staticinvoke <MultiModuleCollectionStrategy$lambda_isModuleOutsideRequestScopeDependingOnPluginModule_3__311: java.util.function.Predicate bootstrap$(org.apache.maven.model.Plugin)>(plugin);

        $stack4 = interfaceinvoke $stack2.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($stack3);

        return $stack4;
    }

    private static boolean lambda$isModuleOutsideRequestScopeDependingOnPluginModule$3(org.apache.maven.model.Plugin, org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack2, $stack3, $stack5, $stack6, $stack9, $stack10;
        org.apache.maven.model.Plugin plugin;
        boolean $stack4, $stack7, $stack11, $stack8;

        plugin := @parameter0: org.apache.maven.model.Plugin;

        project := @parameter1: org.apache.maven.project.MavenProject;

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack3 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>($stack3);

        if $stack4 == 0 goto label1;

        $stack5 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack6 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack7 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label1;

        $stack9 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack10 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        $stack11 = virtualinvoke $stack9.<java.lang.String: boolean equals(java.lang.Object)>($stack10);

        if $stack11 == 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        return $stack8;
    }

    private static boolean lambda$isModuleOutsideRequestScopeDependingOnPluginModule$2(java.lang.Exception)
    {
        java.lang.Exception exc;
        boolean $stack1, $stack3, $stack7, $stack11, $stack4;
        java.lang.Throwable $stack2, $stack5, $stack6, $stack8, $stack9, $stack10;

        exc := @parameter0: java.lang.Exception;

        $stack1 = exc instanceof org.apache.maven.plugin.PluginManagerException;

        if $stack1 == 0 goto label1;

        $stack2 = virtualinvoke exc.<java.lang.Exception: java.lang.Throwable getCause()>();

        $stack3 = $stack2 instanceof org.apache.maven.plugin.PluginResolutionException;

        if $stack3 == 0 goto label1;

        $stack5 = virtualinvoke exc.<java.lang.Exception: java.lang.Throwable getCause()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $stack7 = $stack6 instanceof org.eclipse.aether.resolution.ArtifactResolutionException;

        if $stack7 == 0 goto label1;

        $stack8 = virtualinvoke exc.<java.lang.Exception: java.lang.Throwable getCause()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $stack10 = virtualinvoke $stack9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $stack11 = $stack10 instanceof org.eclipse.aether.transfer.ArtifactNotFoundException;

        if $stack11 == 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    private static boolean lambda$isModuleOutsideRequestScopeDependingOnPluginModule$1(java.util.List, org.apache.maven.project.ProjectBuildingResult)
    {
        java.util.List projectsInRequestScope;
        org.apache.maven.project.ProjectBuildingResult pr;
        org.apache.maven.project.MavenProject $stack2;
        boolean $stack3, $stack4;

        projectsInRequestScope := @parameter0: java.util.List;

        pr := @parameter1: org.apache.maven.project.ProjectBuildingResult;

        $stack2 = interfaceinvoke pr.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack3 = interfaceinvoke projectsInRequestScope.<java.util.List: boolean contains(java.lang.Object)>($stack2);

        if $stack3 != 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    private static boolean lambda$isModuleOutsideRequestScopeDependingOnPluginModule$0(org.apache.maven.execution.MavenExecutionRequest, org.apache.maven.project.MavenProject)
    {
        org.apache.maven.execution.MavenExecutionRequest request;
        java.io.File $stack2, $stack3;
        org.apache.maven.project.MavenProject project;
        boolean $stack4;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        project := @parameter1: org.apache.maven.project.MavenProject;

        $stack2 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getPom()>();

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        $stack4 = virtualinvoke $stack2.<java.io.File: boolean equals(java.lang.Object)>($stack3);

        return $stack4;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $stack0;

        $stack0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/maven/project/collector/MultiModuleCollectionStrategy;");

        <org.apache.maven.project.collector.MultiModuleCollectionStrategy: org.slf4j.Logger LOGGER> = $stack0;

        return;
    }
}
