class MultiThreadTest$TestThread extends java.lang.Object implements java.util.concurrent.Callable
{
    private final java.lang.String inputResourceFileName;
    private final java.lang.String expectedResourceFileName;
    private final java.lang.String predefinedSortOrder;
    final sortpom.sort.MultiThreadTest this$0;

    void <init>(sortpom.sort.MultiThreadTest, java.lang.String, java.lang.String, java.lang.String)
    {
        MultiThreadTest$TestThread this;
        sortpom.sort.MultiThreadTest l1;
        java.lang.String inputResourceFileName, expectedResourceFileName, predefinedSortOrder;
        sortpom.sort.MultiThreadTest$TestThread $r0, $r1, $r2, $r3;

        this := @this: MultiThreadTest$TestThread;

        l1 := @parameter0: sortpom.sort.MultiThreadTest;

        inputResourceFileName := @parameter1: java.lang.String;

        expectedResourceFileName := @parameter2: java.lang.String;

        predefinedSortOrder := @parameter3: java.lang.String;

        $r0 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $r0.<sortpom.sort.MultiThreadTest$TestThread: sortpom.sort.MultiThreadTest this$0> = l1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r1 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $r1.<sortpom.sort.MultiThreadTest$TestThread: java.lang.String inputResourceFileName> = inputResourceFileName;

        $r2 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $r2.<sortpom.sort.MultiThreadTest$TestThread: java.lang.String expectedResourceFileName> = expectedResourceFileName;

        $r3 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $r3.<sortpom.sort.MultiThreadTest$TestThread: java.lang.String predefinedSortOrder> = predefinedSortOrder;

        return;
    }

    public java.lang.Boolean call()
    {
        sortpom.util.SortPomImplUtil $stack2, $stack3, $stack7, $stack9;
        MultiThreadTest$TestThread this;
        sortpom.sort.MultiThreadTest $stack4;
        java.util.concurrent.atomic.AtomicInteger $stack5;
        int $stack6;
        java.lang.String $stack8, $stack10, $stack11;
        java.lang.Boolean $stack12, $stack14;
        java.lang.Exception $stack13;
        sortpom.sort.MultiThreadTest$TestThread $r0, $r1, $r2, $r3;

        this := @this: MultiThreadTest$TestThread;

     label1:
        $stack2 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $r0 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $stack4 = $r0.<sortpom.sort.MultiThreadTest$TestThread: sortpom.sort.MultiThreadTest this$0>;

        $stack5 = staticinvoke <sortpom.sort.MultiThreadTest: java.util.concurrent.atomic.AtomicInteger access$000(sortpom.sort.MultiThreadTest)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $stack7 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil testPomFileNameUniqueNumber(int)>($stack6);

        $r1 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $stack8 = $r1.<sortpom.sort.MultiThreadTest$TestThread: java.lang.String predefinedSortOrder>;

        $stack9 = virtualinvoke $stack7.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>($stack8);

        $r2 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $stack11 = $r2.<sortpom.sort.MultiThreadTest$TestThread: java.lang.String inputResourceFileName>;

        $r3 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $stack10 = $r3.<sortpom.sort.MultiThreadTest$TestThread: java.lang.String expectedResourceFileName>;

        virtualinvoke $stack9.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>($stack11, $stack10);

     label2:
        goto label4;

     label3:
        $stack13 := @caughtexception;

        virtualinvoke $stack13.<java.lang.Exception: void printStackTrace()>();

        $stack14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $stack14;

     label4:
        $stack12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $stack12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        MultiThreadTest$TestThread this;
        java.lang.Boolean $stack1;
        sortpom.sort.MultiThreadTest$TestThread $r0;

        this := @this: MultiThreadTest$TestThread;

        $r0 = (sortpom.sort.MultiThreadTest$TestThread) this;

        $stack1 = virtualinvoke $r0.<sortpom.sort.MultiThreadTest$TestThread: java.lang.Boolean call()>();

        return $stack1;
    }
}
