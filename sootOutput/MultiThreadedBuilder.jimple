public class MultiThreadedBuilder extends java.lang.Object implements org.apache.maven.lifecycle.internal.builder.Builder
{
    private org.codehaus.plexus.logging.Logger logger;
    private org.apache.maven.lifecycle.internal.LifecycleModuleBuilder lifecycleModuleBuilder;

    public void <init>()
    {
        MultiThreadedBuilder this;

        this := @this: MultiThreadedBuilder;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void build(org.apache.maven.execution.MavenSession, org.apache.maven.lifecycle.internal.ReactorContext, org.apache.maven.lifecycle.internal.ProjectBuildList, java.util.List, org.apache.maven.lifecycle.internal.ReactorBuildStatus) throws java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        org.apache.maven.execution.MavenSession session, $stack42;
        org.apache.maven.execution.MavenExecutionRequest $stack16;
        int $stack17, $stack19, nThreads;
        java.util.List $stack18, taskSegments;
        boolean parallel, $stack27, $stack36, $stack44, $stack22;
        org.apache.maven.lifecycle.internal.ProjectBuildList projectBuilds, segmentProjectBuilds;
        java.util.Iterator l11, executor;
        java.lang.Object $stack30, $stack41;
        org.apache.maven.lifecycle.internal.TaskSegment taskSegment;
        java.util.Map projectBuildMap;
        org.apache.maven.execution.ProjectDependencyGraph $stack34;
        MultiThreadedBuilder this;
        org.apache.maven.lifecycle.internal.ReactorContext reactorContext;
        org.apache.maven.lifecycle.internal.ReactorBuildStatus $stack35, reactorBuildStatus;
        java.lang.Exception $stack48;
        org.apache.maven.execution.MavenExecutionResult $stack49;
        org.apache.maven.lifecycle.internal.ProjectSegment segment;
        java.util.concurrent.ExecutorService executor#8;
        java.util.concurrent.TimeUnit $stack28;
        org.apache.maven.lifecycle.internal.BuildThreadFactory $u0;
        java.util.concurrent.ExecutorCompletionService $u1;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph $u2;
        java.util.concurrent.ThreadFactory $r0;
        org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder $r1;

        this := @this: MultiThreadedBuilder;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        reactorContext := @parameter1: org.apache.maven.lifecycle.internal.ReactorContext;

        projectBuilds := @parameter2: org.apache.maven.lifecycle.internal.ProjectBuildList;

        taskSegments := @parameter3: java.util.List;

        reactorBuildStatus := @parameter4: org.apache.maven.lifecycle.internal.ReactorBuildStatus;

        $stack16 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack17 = interfaceinvoke $stack16.<org.apache.maven.execution.MavenExecutionRequest: int getDegreeOfConcurrency()>();

        $stack18 = virtualinvoke session.<org.apache.maven.execution.MavenSession: java.util.List getProjects()>();

        $stack19 = interfaceinvoke $stack18.<java.util.List: int size()>();

        nThreads = staticinvoke <java.lang.Math: int min(int,int)>($stack17, $stack19);

        if nThreads < 2 goto label01;

        $stack44 = 1;

        goto label02;

     label01:
        $stack44 = 0;

     label02:
        parallel = $stack44;

        virtualinvoke session.<org.apache.maven.execution.MavenSession: void setParallel(boolean)>($stack44);

        executor = virtualinvoke projectBuilds.<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Iterator iterator()>();

     label03:
        $stack22 = interfaceinvoke executor.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label04;

        $stack41 = interfaceinvoke executor.<java.util.Iterator: java.lang.Object next()>();

        segment = (org.apache.maven.lifecycle.internal.ProjectSegment) $stack41;

        $stack42 = virtualinvoke segment.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.execution.MavenSession getSession()>();

        virtualinvoke $stack42.<org.apache.maven.execution.MavenSession: void setParallel(boolean)>(parallel);

        goto label03;

     label04:
        $u0 = new org.apache.maven.lifecycle.internal.BuildThreadFactory;

        specialinvoke $u0.<org.apache.maven.lifecycle.internal.BuildThreadFactory: void <init>()>();

        $r0 = (java.util.concurrent.ThreadFactory) $u0;

        executor#8 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(nThreads, $r0);

        $u1 = new java.util.concurrent.ExecutorCompletionService;

        specialinvoke $u1.<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>(executor#8);

        l11 = interfaceinvoke taskSegments.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack27 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $stack27 == 0 goto label11;

        $stack30 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        taskSegment = (org.apache.maven.lifecycle.internal.TaskSegment) $stack30;

        segmentProjectBuilds = virtualinvoke projectBuilds.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectBuildList getByTaskSegment(org.apache.maven.lifecycle.internal.TaskSegment)>(taskSegment);

        projectBuildMap = virtualinvoke projectBuilds.<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Map selectSegment(org.apache.maven.lifecycle.internal.TaskSegment)>(taskSegment);

     label06:
        $u2 = new org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph;

        $stack34 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.ProjectDependencyGraph getProjectDependencyGraph()>();

        specialinvoke $u2.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: void <init>(org.apache.maven.lifecycle.internal.ProjectBuildList,org.apache.maven.execution.ProjectDependencyGraph)>(segmentProjectBuilds, $stack34);

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        specialinvoke $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: void multiThreadedProjectTaskSegmentBuild(org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.execution.MavenSession,java.util.concurrent.CompletionService,org.apache.maven.lifecycle.internal.TaskSegment,java.util.Map,org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer)>($u2, reactorContext, session, $u1, taskSegment, projectBuildMap, null);

        $stack35 = virtualinvoke reactorContext.<org.apache.maven.lifecycle.internal.ReactorContext: org.apache.maven.lifecycle.internal.ReactorBuildStatus getReactorBuildStatus()>();

        $stack36 = virtualinvoke $stack35.<org.apache.maven.lifecycle.internal.ReactorBuildStatus: boolean isHalted()>();

        if $stack36 == 0 goto label08;

     label07:
        goto label11;

     label08:
        goto label10;

     label09:
        $stack48 := @caughtexception;

        $stack49 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionResult getResult()>();

        interfaceinvoke $stack49.<org.apache.maven.execution.MavenExecutionResult: org.apache.maven.execution.MavenExecutionResult addException(java.lang.Throwable)>($stack48);

        goto label11;

     label10:
        goto label05;

     label11:
        interfaceinvoke executor#8.<java.util.concurrent.ExecutorService: void shutdown()>();

        $stack28 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke executor#8.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $stack28);

        return;

        catch java.lang.Exception from label06 to label07 with label09;
    }

    private void multiThreadedProjectTaskSegmentBuild(org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph, org.apache.maven.lifecycle.internal.ReactorContext, org.apache.maven.execution.MavenSession, java.util.concurrent.CompletionService, org.apache.maven.lifecycle.internal.TaskSegment, java.util.Map, org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer)
    {
        org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph analyzer;
        java.util.List $stack15, projectSegment#7;
        boolean $stack17, $stack22, $stack29;
        int $stack18, $stack23, i#5;
        java.util.concurrent.CompletionService service;
        java.util.concurrent.Future $stack19;
        java.lang.Object $stack20, $stack30, $stack31, $stack40, $stack41;
        org.apache.maven.lifecycle.internal.ReactorContext reactorContext;
        org.apache.maven.lifecycle.internal.ReactorBuildStatus $stack21;
        org.apache.maven.project.MavenProject $stack26, mavenProject, $stack45;
        java.util.Map projectBuildList;
        org.apache.maven.lifecycle.internal.ProjectSegment scheduledDependent, projectSegment, mavenProject;
        MultiThreadedBuilder this;
        org.codehaus.plexus.logging.Logger $stack33, $stack43;
        java.lang.StringBuilder $stack34, $stack35, $stack44, $stack46, $u0, $u1;
        java.lang.String $stack36, $stack47;
        org.apache.maven.execution.MavenSession rootSession;
        org.apache.maven.lifecycle.internal.TaskSegment taskSegment;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer muxer;
        java.util.concurrent.Callable cb;
        java.util.concurrent.ExecutionException $stack51;
        org.apache.maven.execution.MavenExecutionResult $stack52, $stack55;
        java.lang.InterruptedException $stack54;
        java.util.Iterator i, cb;
        org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder $r0, $r1, $r2, $r3;

        this := @this: MultiThreadedBuilder;

        analyzer := @parameter0: org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph;

        reactorContext := @parameter1: org.apache.maven.lifecycle.internal.ReactorContext;

        rootSession := @parameter2: org.apache.maven.execution.MavenSession;

        service := @parameter3: java.util.concurrent.CompletionService;

        taskSegment := @parameter4: org.apache.maven.lifecycle.internal.TaskSegment;

        projectBuildList := @parameter5: java.util.Map;

        muxer := @parameter6: org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer;

        $stack15 = virtualinvoke analyzer.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getRootSchedulableBuilds()>();

        i = interfaceinvoke $stack15.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack17 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label02;

        $stack40 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        mavenProject = (org.apache.maven.project.MavenProject) $stack40;

        $stack41 = interfaceinvoke projectBuildList.<java.util.Map: java.lang.Object get(java.lang.Object)>(mavenProject);

        projectSegment = (org.apache.maven.lifecycle.internal.ProjectSegment) $stack41;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        $stack43 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: org.codehaus.plexus.logging.Logger logger>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling: ");

        $stack45 = virtualinvoke projectSegment.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.project.MavenProject getProject()>();

        $stack46 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack45);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack43.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack47);

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        cb = specialinvoke $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: java.util.concurrent.Callable createBuildCallable(org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ProjectSegment,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.lifecycle.internal.TaskSegment,org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer)>(rootSession, projectSegment, reactorContext, taskSegment, muxer);

        interfaceinvoke service.<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(cb);

        goto label01;

     label02:
        i#5 = 0;

     label03:
        $stack18 = virtualinvoke analyzer.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: int getNumberOfBuilds()>();

        if i#5 >= $stack18 goto label12;

     label04:
        $stack19 = interfaceinvoke service.<java.util.concurrent.CompletionService: java.util.concurrent.Future take()>();

        $stack20 = interfaceinvoke $stack19.<java.util.concurrent.Future: java.lang.Object get()>();

        mavenProject = (org.apache.maven.lifecycle.internal.ProjectSegment) $stack20;

        $stack21 = virtualinvoke reactorContext.<org.apache.maven.lifecycle.internal.ReactorContext: org.apache.maven.lifecycle.internal.ReactorBuildStatus getReactorBuildStatus()>();

        $stack22 = virtualinvoke $stack21.<org.apache.maven.lifecycle.internal.ReactorBuildStatus: boolean isHalted()>();

        if $stack22 == 0 goto label06;

     label05:
        goto label12;

     label06:
        $stack23 = virtualinvoke analyzer.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: int getNumberOfBuilds()>();

        if $stack23 <= 1 goto label08;

        $stack26 = virtualinvoke mavenProject.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.project.MavenProject getProject()>();

        projectSegment#7 = virtualinvoke analyzer.<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List markAsFinished(org.apache.maven.project.MavenProject)>($stack26);

        cb = interfaceinvoke projectSegment#7.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack29 = interfaceinvoke cb.<java.util.Iterator: boolean hasNext()>();

        if $stack29 == 0 goto label08;

        $stack30 = interfaceinvoke cb.<java.util.Iterator: java.lang.Object next()>();

        mavenProject = (org.apache.maven.project.MavenProject) $stack30;

        $stack31 = interfaceinvoke projectBuildList.<java.util.Map: java.lang.Object get(java.lang.Object)>(mavenProject);

        scheduledDependent = (org.apache.maven.lifecycle.internal.ProjectSegment) $stack31;

        $r2 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        $stack33 = $r2.<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: org.codehaus.plexus.logging.Logger logger>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling: ");

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(scheduledDependent);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack33.<org.codehaus.plexus.logging.Logger: void debug(java.lang.String)>($stack36);

        $r3 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        cb = specialinvoke $r3.<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: java.util.concurrent.Callable createBuildCallable(org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ProjectSegment,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.lifecycle.internal.TaskSegment,org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer)>(rootSession, scheduledDependent, reactorContext, taskSegment, muxer);

        interfaceinvoke service.<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(cb);

        goto label07;

     label08:
        goto label11;

     label09:
        $stack54 := @caughtexception;

        $stack55 = virtualinvoke rootSession.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionResult getResult()>();

        interfaceinvoke $stack55.<org.apache.maven.execution.MavenExecutionResult: org.apache.maven.execution.MavenExecutionResult addException(java.lang.Throwable)>($stack54);

        goto label12;

     label10:
        $stack51 := @caughtexception;

        $stack52 = virtualinvoke rootSession.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionResult getResult()>();

        interfaceinvoke $stack52.<org.apache.maven.execution.MavenExecutionResult: org.apache.maven.execution.MavenExecutionResult addException(java.lang.Throwable)>($stack51);

        goto label12;

     label11:
        i#5 = i#5 + 1;

        goto label03;

     label12:
        return;

        catch java.lang.InterruptedException from label04 to label05 with label09;
        catch java.lang.InterruptedException from label06 to label08 with label09;
        catch java.util.concurrent.ExecutionException from label04 to label05 with label10;
        catch java.util.concurrent.ExecutionException from label06 to label08 with label10;
    }

    private java.util.concurrent.Callable createBuildCallable(org.apache.maven.execution.MavenSession, org.apache.maven.lifecycle.internal.ProjectSegment, org.apache.maven.lifecycle.internal.ReactorContext, org.apache.maven.lifecycle.internal.TaskSegment, org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer)
    {
        MultiThreadedBuilder this;
        org.apache.maven.lifecycle.internal.ProjectSegment projectBuild;
        org.apache.maven.execution.MavenSession rootSession;
        org.apache.maven.lifecycle.internal.ReactorContext reactorContext;
        org.apache.maven.lifecycle.internal.TaskSegment taskSegment;
        java.util.concurrent.Callable $stack6;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer muxer;
        org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder $r0;

        this := @this: MultiThreadedBuilder;

        rootSession := @parameter0: org.apache.maven.execution.MavenSession;

        projectBuild := @parameter1: org.apache.maven.lifecycle.internal.ProjectSegment;

        reactorContext := @parameter2: org.apache.maven.lifecycle.internal.ReactorContext;

        taskSegment := @parameter3: org.apache.maven.lifecycle.internal.TaskSegment;

        muxer := @parameter4: org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        $stack6 = staticinvoke <MultiThreadedBuilder$lambda_createBuildCallable_0__309: java.util.concurrent.Callable bootstrap$(org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder,org.apache.maven.lifecycle.internal.ProjectSegment,org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.lifecycle.internal.TaskSegment)>($r0, projectBuild, rootSession, reactorContext, taskSegment);

        return $stack6;
    }

    private org.apache.maven.lifecycle.internal.ProjectSegment lambda$createBuildCallable$0(org.apache.maven.lifecycle.internal.ProjectSegment, org.apache.maven.execution.MavenSession, org.apache.maven.lifecycle.internal.ReactorContext, org.apache.maven.lifecycle.internal.TaskSegment) throws java.lang.Exception
    {
        java.lang.Thread currentThread;
        java.lang.String originalThreadName, $stack14, $stack16;
        java.lang.StringBuilder $stack12, $stack15, $u0;
        org.apache.maven.lifecycle.internal.ProjectSegment projectBuild;
        org.apache.maven.project.MavenProject $stack13, $stack19;
        MultiThreadedBuilder this;
        org.apache.maven.lifecycle.internal.LifecycleModuleBuilder $stack17;
        org.apache.maven.execution.MavenSession $stack18, rootSession;
        org.apache.maven.lifecycle.internal.ReactorContext reactorContext;
        org.apache.maven.lifecycle.internal.TaskSegment taskSegment;
        java.lang.Throwable $stack20;
        org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder $r0;

        this := @this: MultiThreadedBuilder;

        projectBuild := @parameter0: org.apache.maven.lifecycle.internal.ProjectSegment;

        rootSession := @parameter1: org.apache.maven.execution.MavenSession;

        reactorContext := @parameter2: org.apache.maven.lifecycle.internal.ReactorContext;

        taskSegment := @parameter3: org.apache.maven.lifecycle.internal.TaskSegment;

        currentThread = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        originalThreadName = virtualinvoke currentThread.<java.lang.Thread: java.lang.String getName()>();

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mvn-builder-");

        $stack13 = virtualinvoke projectBuild.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.project.MavenProject getProject()>();

        $stack14 = virtualinvoke $stack13.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack15 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke currentThread.<java.lang.Thread: void setName(java.lang.String)>($stack16);

     label1:
        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder) this;

        $stack17 = $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: org.apache.maven.lifecycle.internal.LifecycleModuleBuilder lifecycleModuleBuilder>;

        $stack18 = virtualinvoke projectBuild.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.execution.MavenSession getSession()>();

        $stack19 = virtualinvoke projectBuild.<org.apache.maven.lifecycle.internal.ProjectSegment: org.apache.maven.project.MavenProject getProject()>();

        virtualinvoke $stack17.<org.apache.maven.lifecycle.internal.LifecycleModuleBuilder: void buildProject(org.apache.maven.execution.MavenSession,org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.project.MavenProject,org.apache.maven.lifecycle.internal.TaskSegment)>($stack18, rootSession, reactorContext, $stack19, taskSegment);

     label2:
        virtualinvoke currentThread.<java.lang.Thread: void setName(java.lang.String)>(originalThreadName);

        return projectBuild;

     label3:
        $stack20 := @caughtexception;

     label4:
        virtualinvoke currentThread.<java.lang.Thread: void setName(java.lang.String)>(originalThreadName);

        throw $stack20;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
