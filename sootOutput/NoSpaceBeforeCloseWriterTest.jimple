class NoSpaceBeforeCloseWriterTest extends java.lang.Object
{
    private sortpom.util.NoSpaceBeforeCloseWriter writer;
    private sortpom.util.XmlWriter xmlWriter;

    void <init>()
    {
        NoSpaceBeforeCloseWriterTest this;
        java.lang.Object $stack1;
        sortpom.util.XmlWriter $stack2;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lsortpom/util/XmlWriter;");

        $stack2 = (sortpom.util.XmlWriter) $stack1;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter> = $stack2;

        return;
    }

    void setUp()
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.XmlWriter $stack2;
        sortpom.util.NoSpaceBeforeCloseWriter $u0;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $u0 = new sortpom.util.NoSpaceBeforeCloseWriter;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        specialinvoke $u0.<sortpom.util.NoSpaceBeforeCloseWriter: void <init>(sortpom.util.XmlWriter)>($stack2);

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer> = $u0;

        return;
    }

    void closeXmlTagShouldNotHaveSpace()
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.XmlWriter $stack2, $stack4;
        java.lang.Object $stack3;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>(" />");

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (sortpom.util.XmlWriter) $stack3;

        virtualinvoke $stack4.<sortpom.util.XmlWriter: void write(java.lang.String)>("/>");

        return;
    }

    void anyOtherStringShouldNotBeModified()
    {
        java.util.UUID $stack2;
        java.lang.String uuid;
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack4;
        sortpom.util.XmlWriter $stack5, $stack7;
        java.lang.Object $stack6;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $stack2 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        uuid = virtualinvoke $stack2.<java.util.UUID: java.lang.String toString()>();

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack4 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack4.<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>(uuid);

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack5 = $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        $stack6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack5);

        $stack7 = (sortpom.util.XmlWriter) $stack6;

        virtualinvoke $stack7.<sortpom.util.XmlWriter: void write(java.lang.String)>(uuid);

        return;
    }

    void charShouldBeDelegated()
    {
        int i;
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack4;
        sortpom.util.XmlWriter $stack5, $stack7;
        java.lang.Object $stack6;
        java.util.Random $u0;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $u0 = new java.util.Random;

        specialinvoke $u0.<java.util.Random: void <init>()>();

        i = virtualinvoke $u0.<java.util.Random: int nextInt()>();

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack4 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack4.<sortpom.util.NoSpaceBeforeCloseWriter: void write(int)>(i);

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack5 = $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        $stack6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack5);

        $stack7 = (sortpom.util.XmlWriter) $stack6;

        virtualinvoke $stack7.<sortpom.util.XmlWriter: void write(int)>(i);

        return;
    }

    void flushShouldBeDelegated()
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.XmlWriter $stack2, $stack4;
        java.lang.Object $stack3;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: void flush()>();

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (sortpom.util.XmlWriter) $stack3;

        virtualinvoke $stack4.<sortpom.util.XmlWriter: void flush()>();

        return;
    }

    void closeShouldBeDelegated()
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.XmlWriter $stack2, $stack4;
        java.lang.Object $stack3;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: void close()>();

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (sortpom.util.XmlWriter) $stack3;

        virtualinvoke $stack4.<sortpom.util.XmlWriter: void close()>();

        return;
    }

    void clearLineBufferShouldBeDelegated()
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.XmlWriter $stack2, $stack4;
        java.lang.Object $stack3;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0, $r1;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: void clearLineBuffer()>();

        $r1 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r1.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.XmlWriter xmlWriter>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (sortpom.util.XmlWriter) $stack3;

        virtualinvoke $stack4.<sortpom.util.XmlWriter: void clearLineBuffer()>();

        return;
    }

    void testWriteDeprecated1()
    {
        NoSpaceBeforeCloseWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        testMethod = staticinvoke <NoSpaceBeforeCloseWriterTest$lambda_testWriteDeprecated1_0__310: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.NoSpaceBeforeCloseWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testWriteDeprecated2()
    {
        NoSpaceBeforeCloseWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        testMethod = staticinvoke <NoSpaceBeforeCloseWriterTest$lambda_testWriteDeprecated2_1__309: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.NoSpaceBeforeCloseWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testWriteDeprecated3()
    {
        NoSpaceBeforeCloseWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        testMethod = staticinvoke <NoSpaceBeforeCloseWriterTest$lambda_testWriteDeprecated3_2__312: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.NoSpaceBeforeCloseWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testAppendDeprecated1()
    {
        NoSpaceBeforeCloseWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        testMethod = staticinvoke <NoSpaceBeforeCloseWriterTest$lambda_testAppendDeprecated1_3__311: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.NoSpaceBeforeCloseWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testAppendDeprecated2()
    {
        NoSpaceBeforeCloseWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        testMethod = staticinvoke <NoSpaceBeforeCloseWriterTest$lambda_testAppendDeprecated2_4__313: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.NoSpaceBeforeCloseWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testAppendDeprecated3()
    {
        NoSpaceBeforeCloseWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        testMethod = staticinvoke <NoSpaceBeforeCloseWriterTest$lambda_testAppendDeprecated3_5__314: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.NoSpaceBeforeCloseWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    private void lambda$testAppendDeprecated3$5() throws java.lang.Throwable
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: java.io.Writer append(java.lang.CharSequence,int,int)>("", 0, 0);

        return;
    }

    private void lambda$testAppendDeprecated2$4() throws java.lang.Throwable
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: java.io.Writer append(java.lang.CharSequence)>("");

        return;
    }

    private void lambda$testAppendDeprecated1$3() throws java.lang.Throwable
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: java.io.Writer append(char)>(101);

        return;
    }

    private void lambda$testWriteDeprecated3$2() throws java.lang.Throwable
    {
        NoSpaceBeforeCloseWriterTest this;
        char[] $stack1;
        sortpom.util.NoSpaceBeforeCloseWriter $stack2;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        $stack1 = newarray (char)[0];

        virtualinvoke $stack2.<sortpom.util.NoSpaceBeforeCloseWriter: void write(char[],int,int)>($stack1, 0, 0);

        return;
    }

    private void lambda$testWriteDeprecated2$1() throws java.lang.Throwable
    {
        NoSpaceBeforeCloseWriterTest this;
        sortpom.util.NoSpaceBeforeCloseWriter $stack1;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack1 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        virtualinvoke $stack1.<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String,int,int)>("", 0, 0);

        return;
    }

    private void lambda$testWriteDeprecated1$0() throws java.lang.Throwable
    {
        NoSpaceBeforeCloseWriterTest this;
        char[] $stack1;
        sortpom.util.NoSpaceBeforeCloseWriter $stack2;
        sortpom.util.NoSpaceBeforeCloseWriterTest $r0;

        this := @this: NoSpaceBeforeCloseWriterTest;

        $r0 = (sortpom.util.NoSpaceBeforeCloseWriterTest) this;

        $stack2 = $r0.<sortpom.util.NoSpaceBeforeCloseWriterTest: sortpom.util.NoSpaceBeforeCloseWriter writer>;

        $stack1 = newarray (char)[0];

        virtualinvoke $stack2.<sortpom.util.NoSpaceBeforeCloseWriter: void write(char[])>($stack1);

        return;
    }
}
