public abstract class Node extends java.lang.Object implements org.ooc.frontend.model.Visitable
{
    public final transient org.ooc.frontend.model.tokens.Token startToken;

    public void <init>(org.ooc.frontend.model.tokens.Token)
    {
        Node this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Node $r0;

        this := @this: Node;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.ooc.frontend.model.Node) this;

        $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.tokens.Token startToken> = startToken;

        return;
    }

    public java.lang.String toString()
    {
        Node this;
        java.lang.Class $stack1;
        java.lang.String $stack2;

        this := @this: Node;

        $stack1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getSimpleName()>();

        return $stack2;
    }

    public abstract boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node);

    public java.lang.String generateTempName(java.lang.String, org.ooc.frontend.model.NodeList)
    {
        java.lang.String nameSeedParam, nameSeed, tmpName;
        Node this;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.VariableDecl $stack7;
        org.ooc.frontend.model.FunctionDecl $stack13;
        int seedNumber;
        org.ooc.frontend.model.Node $r0, $r1;

        this := @this: Node;

        nameSeedParam := @parameter0: java.lang.String;

        stack := @parameter1: org.ooc.frontend.model.NodeList;

        nameSeed = virtualinvoke nameSeedParam.<java.lang.String: java.lang.String toLowerCase()>();

        seedNumber = 0;

        tmpName = nameSeed;

     label1:
        $r0 = (org.ooc.frontend.model.Node) this;

        $stack7 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.VariableDecl getVariable(java.lang.String,org.ooc.frontend.model.NodeList,org.ooc.frontend.model.VariableAccess)>(tmpName, stack, null);

        if $stack7 != null goto label2;

        $r1 = (org.ooc.frontend.model.Node) this;

        $stack13 = virtualinvoke $r1.<org.ooc.frontend.model.Node: org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String,java.lang.String,org.ooc.frontend.model.FunctionCall,org.ooc.frontend.model.NodeList)>(tmpName, "", null, stack);

        if $stack13 == null goto label3;

     label2:
        seedNumber = seedNumber + 1;

        tmpName = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(nameSeed, seedNumber) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");

        goto label1;

     label3:
        return tmpName;
    }

    public org.ooc.frontend.model.VariableDecl getVariable(java.lang.String, org.ooc.frontend.model.NodeList, org.ooc.frontend.model.VariableAccess)
    {
        Node this;
        java.lang.String name;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.VariableAccess victim;
        int $stack4;
        org.ooc.frontend.model.VariableDecl $stack5;
        org.ooc.frontend.model.Node $r0;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        stack := @parameter1: org.ooc.frontend.model.NodeList;

        victim := @parameter2: org.ooc.frontend.model.VariableAccess;

        $stack4 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Scope;");

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack5 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.VariableDecl getVariable(java.lang.String,org.ooc.frontend.model.NodeList,org.ooc.frontend.model.VariableAccess,int)>(name, stack, victim, $stack4);

        return $stack5;
    }

    public org.ooc.frontend.model.VariableDecl getVariable(java.lang.String, org.ooc.frontend.model.NodeList, org.ooc.frontend.model.VariableAccess, int)
    {
        int index, $stack9, $stack10;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.Node $stack6, $r0;
        java.lang.String name;
        org.ooc.frontend.model.Scope $stack7;
        org.ooc.frontend.model.VariableDecl varDecl, $stack11;
        Node this;
        org.ooc.frontend.model.VariableAccess victim;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        stack := @parameter1: org.ooc.frontend.model.NodeList;

        victim := @parameter2: org.ooc.frontend.model.VariableAccess;

        index := @parameter3: int;

        if index != -1 goto label1;

        return null;

     label1:
        $stack6 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(index);

        $stack7 = (org.ooc.frontend.model.Scope) $stack6;

        varDecl = interfaceinvoke $stack7.<org.ooc.frontend.model.Scope: org.ooc.frontend.model.VariableDecl getVariable(java.lang.String)>(name);

        if varDecl == null goto label2;

        return varDecl;

     label2:
        $stack9 = index - 1;

        $stack10 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class,int)>(class "Lorg/ooc/frontend/model/Scope;", $stack9);

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack11 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.VariableDecl getVariable(java.lang.String,org.ooc.frontend.model.NodeList,org.ooc.frontend.model.VariableAccess,int)>(name, stack, victim, $stack10);

        return $stack11;
    }

    public org.ooc.frontend.model.TypeDecl getType(java.lang.String, org.ooc.frontend.model.NodeList)
    {
        Node this;
        java.lang.String name;
        org.ooc.frontend.model.NodeList stack;
        int $stack3;
        org.ooc.frontend.model.TypeDecl $stack4;
        org.ooc.frontend.model.Node $r0;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        stack := @parameter1: org.ooc.frontend.model.NodeList;

        $stack3 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Module;");

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack4 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.TypeDecl getType(java.lang.String,org.ooc.frontend.model.NodeList,int,org.ooc.frontend.model.Node)>(name, stack, $stack3, null);

        return $stack4;
    }

    public org.ooc.frontend.model.TypeDecl getType(java.lang.String, org.ooc.frontend.model.NodeList, org.ooc.frontend.model.Node)
    {
        Node this;
        java.lang.String name;
        org.ooc.frontend.model.NodeList stack;
        int $stack4;
        org.ooc.frontend.model.Node exclude, $r0;
        org.ooc.frontend.model.TypeDecl $stack5;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        stack := @parameter1: org.ooc.frontend.model.NodeList;

        exclude := @parameter2: org.ooc.frontend.model.Node;

        $stack4 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Module;");

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack5 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.TypeDecl getType(java.lang.String,org.ooc.frontend.model.NodeList,int,org.ooc.frontend.model.Node)>(name, stack, $stack4, exclude);

        return $stack5;
    }

    public org.ooc.frontend.model.TypeDecl getType(java.lang.String, org.ooc.frontend.model.NodeList, int, org.ooc.frontend.model.Node)
    {
        int index, $stack9, $stack10;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.Node $stack6, exclude, $r0;
        java.lang.String name;
        org.ooc.frontend.model.Module $stack7;
        org.ooc.frontend.model.TypeDecl typeDecl, $stack11;
        Node this;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        stack := @parameter1: org.ooc.frontend.model.NodeList;

        index := @parameter2: int;

        exclude := @parameter3: org.ooc.frontend.model.Node;

        if index != -1 goto label1;

        return null;

     label1:
        $stack6 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(index);

        $stack7 = (org.ooc.frontend.model.Module) $stack6;

        typeDecl = virtualinvoke $stack7.<org.ooc.frontend.model.Module: org.ooc.frontend.model.TypeDecl getType(java.lang.String)>(name);

        if typeDecl == null goto label3;

        if exclude == null goto label2;

        if typeDecl == exclude goto label3;

     label2:
        return typeDecl;

     label3:
        $stack9 = index - 1;

        $stack10 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class,int)>(class "Lorg/ooc/frontend/model/Module;", $stack9);

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack11 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.TypeDecl getType(java.lang.String,org.ooc.frontend.model.NodeList,int,org.ooc.frontend.model.Node)>(name, stack, $stack10, exclude);

        return $stack11;
    }

    public org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String, java.lang.String, org.ooc.frontend.model.FunctionCall, org.ooc.frontend.model.NodeList)
    {
        Node this;
        java.lang.String name, suffix;
        org.ooc.frontend.model.FunctionCall call;
        org.ooc.frontend.model.NodeList stack;
        int $stack5;
        org.ooc.frontend.model.FunctionDecl $stack6;
        org.ooc.frontend.model.Node $r0;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        suffix := @parameter1: java.lang.String;

        call := @parameter2: org.ooc.frontend.model.FunctionCall;

        stack := @parameter3: org.ooc.frontend.model.NodeList;

        $stack5 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Scope;");

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack6 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String,java.lang.String,org.ooc.frontend.model.FunctionCall,org.ooc.frontend.model.NodeList,int,int,org.ooc.frontend.model.FunctionDecl)>(name, suffix, call, stack, $stack5, 0, null);

        return $stack6;
    }

    public org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String, java.lang.String, org.ooc.frontend.model.FunctionCall, org.ooc.frontend.model.NodeList, int, int, org.ooc.frontend.model.FunctionDecl)
    {
        int bestScoreParam, index, score, bestScore, $stack15, $stack16;
        org.ooc.frontend.model.FunctionDecl bestMatchParam, function, bestMatch, $stack17;
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.Node $stack12, $r0;
        java.lang.String name, suffix;
        org.ooc.frontend.model.FunctionCall call;
        org.ooc.frontend.model.Scope $stack13;
        Node this;

        this := @this: Node;

        name := @parameter0: java.lang.String;

        suffix := @parameter1: java.lang.String;

        call := @parameter2: org.ooc.frontend.model.FunctionCall;

        stack := @parameter3: org.ooc.frontend.model.NodeList;

        index := @parameter4: int;

        bestScoreParam := @parameter5: int;

        bestMatchParam := @parameter6: org.ooc.frontend.model.FunctionDecl;

        bestScore = bestScoreParam;

        bestMatch = bestMatchParam;

        if index != -1 goto label1;

        return bestMatchParam;

     label1:
        $stack12 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(index);

        $stack13 = (org.ooc.frontend.model.Scope) $stack12;

        function = interfaceinvoke $stack13.<org.ooc.frontend.model.Scope: org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String,java.lang.String,org.ooc.frontend.model.FunctionCall)>(name, suffix, call);

        if function == null goto label3;

        if call != null goto label2;

        return function;

     label2:
        score = virtualinvoke call.<org.ooc.frontend.model.FunctionCall: int getScore(org.ooc.frontend.model.FunctionDecl)>(function);

        if score <= bestScoreParam goto label3;

        bestScore = score;

        bestMatch = function;

     label3:
        $stack15 = index - 1;

        $stack16 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class,int)>(class "Lorg/ooc/frontend/model/Scope;", $stack15);

        $r0 = (org.ooc.frontend.model.Node) this;

        $stack17 = virtualinvoke $r0.<org.ooc.frontend.model.Node: org.ooc.frontend.model.FunctionDecl getFunction(java.lang.String,java.lang.String,org.ooc.frontend.model.FunctionCall,org.ooc.frontend.model.NodeList,int,int,org.ooc.frontend.model.FunctionDecl)>(name, suffix, call, stack, $stack16, bestScore, bestMatch);

        return $stack17;
    }

    public org.ooc.frontend.model.TypeParam getTypeParam(org.ooc.frontend.model.NodeList, java.lang.String)
    {
        org.ooc.frontend.model.NodeList stack;
        org.ooc.frontend.model.Node $stack7;
        org.ooc.frontend.model.Generic gen;
        java.util.Map $stack8;
        java.lang.String typeName;
        java.lang.Object $stack9;
        org.ooc.frontend.model.TypeParam genType;
        int $stack10, genIndex;
        Node this;

        this := @this: Node;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        typeName := @parameter1: java.lang.String;

        genIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Generic;");

     label1:
        if genIndex == -1 goto label3;

        $stack7 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(genIndex);

        gen = (org.ooc.frontend.model.Generic) $stack7;

        $stack8 = interfaceinvoke gen.<org.ooc.frontend.model.Generic: java.util.Map getTypeParams()>();

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>(typeName);

        genType = (org.ooc.frontend.model.TypeParam) $stack9;

        if genType == null goto label2;

        return genType;

     label2:
        $stack10 = genIndex - 1;

        genIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class,int)>(class "Lorg/ooc/frontend/model/Generic;", $stack10);

        goto label1;

     label3:
        return null;
    }

    public void addAfterLine(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.Statement)
    {
        org.ooc.frontend.model.NodeList stack, list;
        int lineIndex, $stack8;
        org.ooc.frontend.model.Node $stack7, $stack9, $r0, $r1;
        org.ooc.frontend.model.Line line, $u0;
        org.ooc.frontend.model.Statement statement;
        Node this;

        this := @this: Node;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        statement := @parameter1: org.ooc.frontend.model.Statement;

        lineIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Line;");

        $stack7 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(lineIndex);

        line = (org.ooc.frontend.model.Line) $stack7;

        $stack8 = lineIndex - 1;

        $stack9 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack8);

        list = (org.ooc.frontend.model.NodeList) $stack9;

        $u0 = new org.ooc.frontend.model.Line;

        specialinvoke $u0.<org.ooc.frontend.model.Line: void <init>(org.ooc.frontend.model.Statement)>(statement);

        $r0 = (org.ooc.frontend.model.Node) line;

        $r1 = (org.ooc.frontend.model.Node) $u0;

        virtualinvoke list.<org.ooc.frontend.model.NodeList: void addAfter(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r0, $r1);

        return;
    }

    public void addBeforeLine(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.Statement)
    {
        org.ooc.frontend.model.NodeList stack, list;
        int lineIndex, $stack8;
        org.ooc.frontend.model.Node $stack7, $stack9, $r0, $r1;
        org.ooc.frontend.model.Line line, $u0;
        org.ooc.frontend.model.Statement statement;
        Node this;

        this := @this: Node;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        statement := @parameter1: org.ooc.frontend.model.Statement;

        lineIndex = virtualinvoke stack.<org.ooc.frontend.model.NodeList: int find(java.lang.Class)>(class "Lorg/ooc/frontend/model/Line;");

        $stack7 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>(lineIndex);

        line = (org.ooc.frontend.model.Line) $stack7;

        $stack8 = lineIndex - 1;

        $stack9 = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node get(int)>($stack8);

        list = (org.ooc.frontend.model.NodeList) $stack9;

        $u0 = new org.ooc.frontend.model.Line;

        specialinvoke $u0.<org.ooc.frontend.model.Line: void <init>(org.ooc.frontend.model.Statement)>(statement);

        $r0 = (org.ooc.frontend.model.Node) line;

        $r1 = (org.ooc.frontend.model.Node) $u0;

        virtualinvoke list.<org.ooc.frontend.model.NodeList: void addBefore(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r0, $r1);

        return;
    }

    public org.ooc.frontend.model.VariableDecl getVariable(org.ooc.frontend.model.NodeList, java.lang.String)
    {
        org.ooc.frontend.model.NodeList body;
        int $stack7;
        java.util.Iterator l3;
        boolean $stack9, $stack13, $stack16;
        java.lang.Object $stack11;
        org.ooc.frontend.model.Line line;
        org.ooc.frontend.model.Statement node;
        org.ooc.frontend.model.VariableDecl varDecl;
        java.lang.String $stack15, name;
        Node this;

        this := @this: Node;

        body := @parameter0: org.ooc.frontend.model.NodeList;

        name := @parameter1: java.lang.String;

        $stack7 = virtualinvoke body.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack7 <= 0 goto label3;

        l3 = virtualinvoke body.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack11 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        line = (org.ooc.frontend.model.Line) $stack11;

        node = virtualinvoke line.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement getStatement()>();

        $stack13 = node instanceof org.ooc.frontend.model.VariableDecl;

        if $stack13 == 0 goto label2;

        varDecl = (org.ooc.frontend.model.VariableDecl) node;

        $stack15 = virtualinvoke varDecl.<org.ooc.frontend.model.VariableDecl: java.lang.String getName()>();

        $stack16 = virtualinvoke $stack15.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $stack16 == 0 goto label2;

        return varDecl;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void getVariables(org.ooc.frontend.model.NodeList, org.ooc.frontend.model.NodeList)
    {
        org.ooc.frontend.model.NodeList body, variables;
        int $stack6;
        java.util.Iterator l3;
        boolean $stack8, $stack11;
        java.lang.Object $stack9;
        org.ooc.frontend.model.Line line;
        org.ooc.frontend.model.Statement node;
        org.ooc.frontend.model.VariableDecl $stack13;
        Node this;
        org.ooc.frontend.model.Node $r0;

        this := @this: Node;

        body := @parameter0: org.ooc.frontend.model.NodeList;

        variables := @parameter1: org.ooc.frontend.model.NodeList;

        $stack6 = virtualinvoke body.<org.ooc.frontend.model.NodeList: int size()>();

        if $stack6 <= 0 goto label3;

        l3 = virtualinvoke body.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        line = (org.ooc.frontend.model.Line) $stack9;

        node = virtualinvoke line.<org.ooc.frontend.model.Line: org.ooc.frontend.model.Statement getStatement()>();

        $stack11 = node instanceof org.ooc.frontend.model.VariableDecl;

        if $stack11 == 0 goto label2;

        $stack13 = (org.ooc.frontend.model.VariableDecl) node;

        $r0 = (org.ooc.frontend.model.Node) $stack13;

        virtualinvoke variables.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r0);

     label2:
        goto label1;

     label3:
        return;
    }

    public org.ooc.frontend.model.Node bitchJumpCasts()
    {
        Node this;
        org.ooc.frontend.model.Node $r0;

        this := @this: Node;

        $r0 = (org.ooc.frontend.model.Node) this;

        return $r0;
    }

    public boolean canBeReferenced()
    {
        Node this;

        this := @this: Node;

        return 0;
    }
}
