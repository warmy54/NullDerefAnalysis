public class NodeList extends org.ooc.frontend.model.Node implements java.lang.Iterable, java.util.Collection
{
    private org.ooc.frontend.model.Node[] nodes;
    private int size;
    private org.ooc.frontend.model.NodeList$AddListener addListener;

    public void <init>()
    {
        NodeList this;
        org.ooc.frontend.model.tokens.Token $stack1;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $stack1 = <org.ooc.frontend.model.tokens.Token: org.ooc.frontend.model.tokens.Token defaultToken>;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        specialinvoke $r0.<org.ooc.frontend.model.NodeList: void <init>(org.ooc.frontend.model.tokens.Token)>($stack1);

        return;
    }

    public void <init>(org.ooc.frontend.model.tokens.Token)
    {
        NodeList this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        specialinvoke $r0.<org.ooc.frontend.model.NodeList: void <init>(int,org.ooc.frontend.model.tokens.Token)>(5, startToken);

        return;
    }

    public void addAddListener(org.ooc.frontend.model.NodeList$AddListener)
    {
        NodeList this;
        org.ooc.frontend.model.NodeList$AddListener addListener;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        addListener := @parameter0: org.ooc.frontend.model.NodeList$AddListener;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.NodeList$AddListener addListener> = addListener;

        return;
    }

    public void <init>(int, org.ooc.frontend.model.tokens.Token)
    {
        NodeList this;
        org.ooc.frontend.model.tokens.Token startToken;
        int initialCapacity;
        org.ooc.frontend.model.Node[] $stack3;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        initialCapacity := @parameter0: int;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Node: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.NodeList$AddListener addListener> = null;

        $stack3 = newarray (org.ooc.frontend.model.Node)[initialCapacity];

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes> = $stack3;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $r2.<org.ooc.frontend.model.NodeList: int size> = 0;

        return;
    }

    private void realloc()
    {
        NodeList this;
        org.ooc.frontend.model.Node[] oldNodes, $stack6, $stack8;
        int $stack2, $stack3, $stack4, $stack5, $stack7;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3, $r4;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        oldNodes = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r1.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = $stack2 * 3;

        $stack4 = $stack3 / 2;

        $stack5 = $stack4 + 1;

        $stack6 = newarray (org.ooc.frontend.model.Node)[$stack5];

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes> = $stack6;

        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack8 = $r3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r4.<org.ooc.frontend.model.NodeList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(oldNodes, 0, $stack8, 0, $stack7);

        return;
    }

    private void ensureCapacity(int)
    {
        int minCapacity, $stack4, $stack6;
        NodeList this;
        org.ooc.frontend.model.Node[] $stack3, oldNodes, $stack5, $stack7;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3, $r4;

        this := @this: NodeList;

        minCapacity := @parameter0: int;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack4 = lengthof $stack3;

        if minCapacity <= $stack4 goto label1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        oldNodes = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack5 = newarray (org.ooc.frontend.model.Node)[minCapacity];

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes> = $stack5;

        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $stack6 = $r4.<org.ooc.frontend.model.NodeList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(oldNodes, 0, $stack7, 0, $stack6);

     label1:
        return;
    }

    public boolean add(org.ooc.frontend.model.Node)
    {
        NodeList this;
        org.ooc.frontend.model.Node[] $stack2, $stack7;
        int $stack3, $stack4, $stack5, $stack6;
        org.ooc.frontend.model.Node element;
        org.ooc.frontend.model.NodeList$AddListener $stack8, $stack9;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: NodeList;

        element := @parameter0: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack3 = lengthof $stack2;

        if $stack4 < $stack3 goto label1;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r2.<org.ooc.frontend.model.NodeList: void realloc()>();

     label1:
        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $stack5 = $r4.<org.ooc.frontend.model.NodeList: int size>;

        $stack6 = $stack5 + 1;

        $r5 = (org.ooc.frontend.model.NodeList) this;

        $r5.<org.ooc.frontend.model.NodeList: int size> = $stack6;

        $stack7[$stack5] = element;

        $r6 = (org.ooc.frontend.model.NodeList) this;

        $stack8 = $r6.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.NodeList$AddListener addListener>;

        if $stack8 == null goto label2;

        $r7 = (org.ooc.frontend.model.NodeList) this;

        $stack9 = $r7.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.NodeList$AddListener addListener>;

        $r8 = (org.ooc.frontend.model.NodeList) this;

        interfaceinvoke $stack9.<org.ooc.frontend.model.NodeList$AddListener: void onAdd(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.Node)>($r8, element);

     label2:
        return 1;
    }

    public void add(int, org.ooc.frontend.model.Node)
    {
        NodeList this;
        int $stack3, $stack5, $stack6, index, $stack7, $stack8, $stack9, $stack13, $stack14;
        org.ooc.frontend.model.Node[] $stack4, $stack10, $stack11, $stack12;
        org.ooc.frontend.model.Node element;
        org.ooc.frontend.model.NodeList$AddListener $stack15, $stack16;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: NodeList;

        index := @parameter0: int;

        element := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $stack6 = $stack3 + 1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack5 = lengthof $stack4;

        if $stack6 < $stack5 goto label1;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r2.<org.ooc.frontend.model.NodeList: void realloc()>();

     label1:
        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack11 = $r3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $stack10 = $r4.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack9 = index + 1;

        $r5 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r5.<org.ooc.frontend.model.NodeList: int size>;

        $stack8 = $stack7 - index;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack11, index, $stack10, $stack9, $stack8);

        $r6 = (org.ooc.frontend.model.NodeList) this;

        $stack12 = $r6.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack12[index] = element;

        $r7 = (org.ooc.frontend.model.NodeList) this;

        $stack13 = $r7.<org.ooc.frontend.model.NodeList: int size>;

        $stack14 = $stack13 + 1;

        $r8 = (org.ooc.frontend.model.NodeList) this;

        $r8.<org.ooc.frontend.model.NodeList: int size> = $stack14;

        $r9 = (org.ooc.frontend.model.NodeList) this;

        $stack15 = $r9.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.NodeList$AddListener addListener>;

        if $stack15 == null goto label2;

        $r10 = (org.ooc.frontend.model.NodeList) this;

        $stack16 = $r10.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.NodeList$AddListener addListener>;

        $r11 = (org.ooc.frontend.model.NodeList) this;

        interfaceinvoke $stack16.<org.ooc.frontend.model.NodeList$AddListener: void onAdd(org.ooc.frontend.model.NodeList,org.ooc.frontend.model.Node)>($r11, element);

     label2:
        return;
    }

    public boolean remove(org.ooc.frontend.model.Node)
    {
        NodeList this;
        int $stack3, index;
        org.ooc.frontend.model.Node element, $stack5;
        org.ooc.frontend.model.Node[] $stack4;
        boolean $stack6;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        element := @parameter0: org.ooc.frontend.model.Node;

        index = 0;

     label1:
        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if index >= $stack3 goto label3;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack5 = $stack4[index];

        $stack6 = virtualinvoke element.<java.lang.Object: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r2.<org.ooc.frontend.model.NodeList: void fastRemove(int)>(index);

        return 1;

     label2:
        index = index + 1;

        goto label1;

     label3:
        return 0;
    }

    public org.ooc.frontend.model.Node removeAt(int)
    {
        NodeList this;
        int index;
        org.ooc.frontend.model.Node[] $stack3;
        org.ooc.frontend.model.Node o;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        index := @parameter0: int;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        o = $stack3[index];

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: void fastRemove(int)>(index);

        return o;
    }

    private void fastRemove(int)
    {
        NodeList this;
        int index, $stack3, $stack4, numMoved, $stack5, $stack6, $stack8;
        org.ooc.frontend.model.Node[] $stack7, $stack9;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3, $r4;

        this := @this: NodeList;

        index := @parameter0: int;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $stack4 = $stack3 - index;

        numMoved = $stack4 - 1;

        if numMoved <= 0 goto label1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack9 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack8 = index + 1;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack9, $stack8, $stack7, index, numMoved);

     label1:
        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack5 = $r3.<org.ooc.frontend.model.NodeList: int size>;

        $stack6 = $stack5 - 1;

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $r4.<org.ooc.frontend.model.NodeList: int size> = $stack6;

        return;
    }

    public void clear()
    {
        NodeList this;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $r0.<org.ooc.frontend.model.NodeList: int size> = 0;

        return;
    }

    public boolean contains(org.ooc.frontend.model.Node)
    {
        NodeList this;
        int $stack3, index;
        org.ooc.frontend.model.Node element, $stack5;
        org.ooc.frontend.model.Node[] $stack4;
        boolean $stack6;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        element := @parameter0: org.ooc.frontend.model.Node;

        index = 0;

     label1:
        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if index >= $stack3 goto label3;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack5 = $stack4[index];

        $stack6 = virtualinvoke element.<java.lang.Object: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        return 1;

     label2:
        index = index + 1;

        goto label1;

     label3:
        return 0;
    }

    public int indexOf(org.ooc.frontend.model.Node)
    {
        NodeList this;
        int $stack3, index;
        org.ooc.frontend.model.Node lostSheep, $stack5;
        org.ooc.frontend.model.Node[] $stack4;
        boolean $stack6;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        lostSheep := @parameter0: org.ooc.frontend.model.Node;

        index = 0;

     label1:
        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if index >= $stack3 goto label3;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack5 = $stack4[index];

        $stack6 = virtualinvoke lostSheep.<java.lang.Object: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        return index;

     label2:
        index = index + 1;

        goto label1;

     label3:
        return -1;
    }

    public int size()
    {
        NodeList this;
        int $stack1;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        return $stack1;
    }

    public boolean isEmpty()
    {
        NodeList this;
        int $stack1;
        boolean $stack2;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.ooc.frontend.model.Node get(int)
    {
        int i, $stack2;
        NodeList this;
        org.ooc.frontend.model.Node[] $stack3;
        org.ooc.frontend.model.Node $stack4;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        i := @parameter0: int;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if i < $stack2 goto label1;

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i);

        throw $u0;

     label1:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack4 = $stack3[i];

        return $stack4;
    }

    public void set(int, org.ooc.frontend.model.Node)
    {
        int i, $stack3;
        NodeList this;
        org.ooc.frontend.model.Node element;
        org.ooc.frontend.model.Node[] $stack4;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        i := @parameter0: int;

        element := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if i <= $stack3 goto label1;

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i);

        throw $u0;

     label1:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack4[i] = element;

        return;
    }

    public void setAll(org.ooc.frontend.model.NodeList)
    {
        NodeList this;
        org.ooc.frontend.model.NodeList list, $r0;
        org.ooc.frontend.model.Node[] $stack2;

        this := @this: NodeList;

        list := @parameter0: org.ooc.frontend.model.NodeList;

        $stack2 = list.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes> = $stack2;

        return;
    }

    public org.ooc.frontend.model.Node getFirst()
    {
        NodeList this;
        int $stack1;
        org.ooc.frontend.model.Node[] $stack2;
        org.ooc.frontend.model.Node $stack3;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack1 != 0 goto label1;

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(0);

        throw $u0;

     label1:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack3 = $stack2[0];

        return $stack3;
    }

    public org.ooc.frontend.model.Node getLast()
    {
        NodeList this;
        int $stack1, $stack2, $stack3;
        org.ooc.frontend.model.Node[] $stack4;
        org.ooc.frontend.model.Node $stack5;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack1 != 0 goto label1;

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(0);

        throw $u0;

     label1:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r2.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = $stack2 - 1;

        $stack5 = $stack4[$stack3];

        return $stack5;
    }

    public org.ooc.frontend.model.Node getBeforeLast()
    {
        NodeList this;
        int $stack1, $stack2, $stack3, $stack7, $stack8;
        org.ooc.frontend.model.Node[] $stack4;
        org.ooc.frontend.model.Node $stack5;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack1 > 1 goto label1;

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r1.<org.ooc.frontend.model.NodeList: int size>;

        $stack8 = $stack7 - 1;

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>($stack8);

        throw $u0;

     label1:
        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r3.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = $stack2 - 2;

        $stack5 = $stack4[$stack3];

        return $stack5;
    }

    public java.util.Iterator iterator()
    {
        NodeList this;
        org.ooc.frontend.model.NodeList$1 $u0;
        org.ooc.frontend.model.NodeList $r0;
        java.util.Iterator $r1;

        this := @this: NodeList;

        $u0 = new org.ooc.frontend.model.NodeList$1;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        specialinvoke $u0.<org.ooc.frontend.model.NodeList$1: void <init>(org.ooc.frontend.model.NodeList)>($r0);

        $r1 = (java.util.Iterator) $u0;

        return $r1;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        NodeList this;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.NodeList)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        NodeList this;
        int $stack3, i;
        org.ooc.frontend.model.Node[] $stack4, $stack8;
        org.ooc.frontend.model.Node $stack5, $stack9;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        i = 0;

     label1:
        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if i >= $stack3 goto label3;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack5 = $stack4[i];

        if $stack5 == null goto label2;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack8 = $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack9 = $stack8[i];

        virtualinvoke $stack9.<org.ooc.frontend.model.Node: void accept(org.ooc.frontend.Visitor)>(visitor);

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    public boolean hasChildren()
    {
        NodeList this;
        int $stack1;
        boolean $stack2;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack1 <= 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        NodeList this;
        org.ooc.frontend.model.Node oldie, kiddo;
        int index;
        org.ooc.frontend.model.Node[] $stack7;
        java.lang.Class $stack8, $stack10, $stack16;
        java.lang.String oldieClassName, $stack13, $stack14, $stack17, $stack18, $stack9, $stack11;
        java.io.PrintStream $stack12;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        index = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: int indexOf(org.ooc.frontend.model.Node)>(oldie);

        if index != -1 goto label5;

        if oldie != null goto label1;

        $stack9 = "null";

        goto label2;

     label1:
        $stack8 = virtualinvoke oldie.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.String getSimpleName()>();

     label2:
        oldieClassName = $stack9;

        if kiddo != null goto label3;

        $stack11 = "null";

        goto label4;

     label3:
        $stack10 = virtualinvoke kiddo.<java.lang.Object: java.lang.Class getClass()>();

        $stack11 = virtualinvoke $stack10.<java.lang.Class: java.lang.String getSimpleName()>();

     label4:
        $stack12 = <java.lang.System: java.io.PrintStream out>;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack13 = virtualinvoke $r1.<org.ooc.frontend.model.NodeList: java.lang.String toString()>();

        $stack14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Node,org.ooc.frontend.model.Node,java.lang.String)>(oldie, kiddo, $stack13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Trying to replace \u0001 with \u0001 in a list with \n\u0001");

        virtualinvoke $stack12.<java.io.PrintStream: void println(java.lang.String)>($stack14);

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        $stack16 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.String getSimpleName()>();

        $stack18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(oldieClassName, $stack11, $stack17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Trying to replace a \u0001 with a \u0001 in a \u0001, but couldn\'t find node to replace in NodeList.");

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($stack18);

        throw $u0;

     label5:
        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack7[index] = kiddo;

        return 1;
    }

    public void addAll(org.ooc.frontend.model.NodeList)
    {
        NodeList this;
        org.ooc.frontend.model.NodeList list, $r0, $r1, $r2, $r3, $r4;
        int $stack3, $stack4, newSize, $stack5, $stack6;
        org.ooc.frontend.model.Node[] $stack7, $stack8;

        this := @this: NodeList;

        list := @parameter0: org.ooc.frontend.model.NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = list.<org.ooc.frontend.model.NodeList: int size>;

        newSize = $stack4 + $stack3;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: void ensureCapacity(int)>(newSize);

        $stack8 = list.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack6 = $r3.<org.ooc.frontend.model.NodeList: int size>;

        $stack5 = list.<org.ooc.frontend.model.NodeList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack8, 0, $stack7, $stack6, $stack5);

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $r4.<org.ooc.frontend.model.NodeList: int size> = newSize;

        return;
    }

    public void addAll(java.util.List)
    {
        NodeList this;
        java.util.List list;
        int $stack6, $stack7, newSize, $stack11, index;
        java.util.Iterator l4;
        boolean $stack9;
        java.lang.Object $stack10;
        org.ooc.frontend.model.Node o;
        org.ooc.frontend.model.Node[] $stack12;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3;

        this := @this: NodeList;

        list := @parameter0: java.util.List;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack6 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $stack7 = interfaceinvoke list.<java.util.List: int size()>();

        newSize = $stack6 + $stack7;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: void ensureCapacity(int)>(newSize);

        $r2 = (org.ooc.frontend.model.NodeList) this;

        index = $r2.<org.ooc.frontend.model.NodeList: int size>;

        l4 = interfaceinvoke list.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        o = (org.ooc.frontend.model.Node) $stack10;

        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack12 = $r3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack11 = index;

        index = index + 1;

        $stack12[$stack11] = o;

        goto label1;

     label2:
        return;
    }

    public org.ooc.frontend.model.Node[] getNodes()
    {
        NodeList this;
        org.ooc.frontend.model.Node[] $stack1;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        return $stack1;
    }

    public java.lang.String toString()
    {
        NodeList this;
        java.lang.String $stack1;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: java.lang.String toString(boolean)>(0);

        return $stack1;
    }

    public java.lang.String toString(boolean)
    {
        NodeList this;
        boolean stackLike;
        java.lang.String $stack2;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        stackLike := @parameter0: boolean;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: java.lang.String toString(boolean,int)>(stackLike, 0);

        return $stack2;
    }

    public java.lang.String toString(boolean, int)
    {
        NodeList this;
        int $stack7, offset, $stack14, $stack21, i, $stack10, $stack34, i#10;
        boolean stackLike, $stack16;
        java.lang.String $stack11, $stack17, $stack31;
        org.ooc.frontend.model.Node[] $stack15;
        org.ooc.frontend.model.Node node;
        org.ooc.frontend.model.NodeList $stack30, $r0, $r1, $r2, $r3;
        java.lang.StringBuilder $u0;

        this := @this: NodeList;

        stackLike := @parameter0: boolean;

        offset := @parameter1: int;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack7 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack7 != 0 goto label01;

        return "[]";

     label01:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        i = 0;

     label02:
        if i >= offset goto label03;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        i = i + 1;

        goto label02;

     label03:
        if stackLike == 0 goto label04;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label05;

     label04:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label05:
        i = 0;

     label06:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack10 = $r1.<org.ooc.frontend.model.NodeList: int size>;

        if i >= $stack10 goto label17;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack15 = $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack14 = i;

        i = i + 1;

        node = $stack15[$stack14];

        $stack16 = node instanceof org.ooc.frontend.model.NodeList;

        if $stack16 == 0 goto label09;

        $stack30 = (org.ooc.frontend.model.NodeList) node;

        if stackLike == 0 goto label07;

        $stack34 = offset + i;

        goto label08;

     label07:
        $stack34 = offset;

     label08:
        $stack31 = virtualinvoke $stack30.<org.ooc.frontend.model.NodeList: java.lang.String toString(boolean,int)>(0, $stack34);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        goto label15;

     label09:
        if stackLike == 0 goto label12;

        i#10 = 0;

     label10:
        if i#10 >= i goto label11;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        i#10 = i#10 + 1;

        goto label10;

     label11:
        goto label13;

     label12:
        if i <= 1 goto label13;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label13:
        if node != null goto label14;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        goto label15;

     label14:
        $stack17 = virtualinvoke node.<org.ooc.frontend.model.Node: java.lang.String toString()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);

     label15:
        if stackLike == 0 goto label16;

        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack21 = $r3.<org.ooc.frontend.model.NodeList: int size>;

        if i >= $stack21 goto label16;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label16:
        goto label06;

     label17:
        if stackLike != 0 goto label18;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label18:
        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack11;
    }

    public void push(org.ooc.frontend.model.Node)
    {
        NodeList this;
        int $stack2, $stack4, $stack5, $stack6, $stack7;
        org.ooc.frontend.model.Node[] $stack3, $stack8;
        org.ooc.frontend.model.Node node;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: NodeList;

        node := @parameter0: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $stack5 = $stack2 + 1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack4 = lengthof $stack3;

        if $stack5 <= $stack4 goto label1;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r2.<org.ooc.frontend.model.NodeList: void realloc()>();

     label1:
        $r3 = (org.ooc.frontend.model.NodeList) this;

        $stack8 = $r3.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r4 = (org.ooc.frontend.model.NodeList) this;

        $stack6 = $r4.<org.ooc.frontend.model.NodeList: int size>;

        $stack7 = $stack6 + 1;

        $r5 = (org.ooc.frontend.model.NodeList) this;

        $r5.<org.ooc.frontend.model.NodeList: int size> = $stack7;

        $stack8[$stack6] = node;

        return;
    }

    public void pop(org.ooc.frontend.model.Node)
    {
        NodeList this;
        org.ooc.frontend.model.Node $stack2, node, $stack4;
        java.lang.String $stack5;
        java.lang.Error $u0;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        node := @parameter0: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        if $stack2 != node goto label1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: void pop()>();

        goto label2;

     label1:
        $u0 = new java.lang.Error;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = virtualinvoke $r2.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>(node, $stack4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unmatched node in checked pop: \u0001. peek is \u0001");

        specialinvoke $u0.<java.lang.Error: void <init>(java.lang.String)>($stack5);

        throw $u0;

     label2:
        return;
    }

    public void pop()
    {
        NodeList this;
        int $stack1, $stack2, $stack3;
        java.lang.ArrayIndexOutOfBoundsException $u0;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        if $stack1 > 0 goto label1;

        $u0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $u0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(0);

        throw $u0;

     label1:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r1.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = $stack2 - 1;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $r2.<org.ooc.frontend.model.NodeList: int size> = $stack3;

        return;
    }

    public org.ooc.frontend.model.Node peek()
    {
        NodeList this;
        int $stack1, $stack2;
        org.ooc.frontend.model.Node[] $stack3;
        org.ooc.frontend.model.Node $stack4;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r1.<org.ooc.frontend.model.NodeList: int size>;

        $stack2 = $stack1 - 1;

        $stack4 = $stack3[$stack2];

        return $stack4;
    }

    public org.ooc.frontend.model.Node peek(int)
    {
        NodeList this;
        int i, $stack2, $stack3;
        org.ooc.frontend.model.Node[] $stack4;
        org.ooc.frontend.model.Node $stack5;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        i := @parameter0: int;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r1.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = $stack2 - i;

        $stack5 = $stack4[$stack3];

        return $stack5;
    }

    public int find(java.lang.Class)
    {
        NodeList this;
        java.lang.Class clazz;
        int $stack2, $stack3, $stack4;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        clazz := @parameter0: java.lang.Class;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        $stack3 = $stack2 - 1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = virtualinvoke $r1.<org.ooc.frontend.model.NodeList: int find(java.lang.Class,int)>(clazz, $stack3);

        return $stack4;
    }

    public int find(java.lang.Class, int)
    {
        int offset, i;
        NodeList this;
        org.ooc.frontend.model.Node[] $stack5;
        org.ooc.frontend.model.Node node;
        java.lang.Class clazz;
        boolean $stack6;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        clazz := @parameter0: java.lang.Class;

        offset := @parameter1: int;

        i = offset;

     label1:
        if i < 0 goto label3;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack5 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        node = $stack5[i];

        $stack6 = virtualinvoke clazz.<java.lang.Class: boolean isInstance(java.lang.Object)>(node);

        if $stack6 == 0 goto label2;

        return i;

     label2:
        i = i + -1;

        goto label1;

     label3:
        return -1;
    }

    public org.ooc.frontend.model.Module getModule()
    {
        NodeList this;
        org.ooc.frontend.model.Node[] $stack1;
        org.ooc.frontend.model.Node $stack2;
        org.ooc.frontend.model.Module $stack3;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack1 = $r0.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $stack2 = $stack1[0];

        $stack3 = (org.ooc.frontend.model.Module) $stack2;

        return $stack3;
    }

    public void addBefore(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        NodeList this;
        org.ooc.frontend.model.Node beforeWhat, kiddo;
        int index;
        java.lang.String $stack6;
        java.lang.Error $u0;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        beforeWhat := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        index = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: int indexOf(org.ooc.frontend.model.Node)>(beforeWhat);

        if index != -1 goto label1;

        $u0 = new java.lang.Error;

        $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>(kiddo, beforeWhat) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Trying to add \u0001 before \u0001, but it can\'t be found in the list.");

        specialinvoke $u0.<java.lang.Error: void <init>(java.lang.String)>($stack6);

        throw $u0;

     label1:
        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: void add(int,org.ooc.frontend.model.Node)>(index, kiddo);

        return;
    }

    public void addAfter(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        NodeList this;
        org.ooc.frontend.model.Node afterWhat, kiddo;
        int index, $stack5;
        java.lang.String $stack7;
        java.lang.Error $u0;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        afterWhat := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        index = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: int indexOf(org.ooc.frontend.model.Node)>(afterWhat);

        if index != -1 goto label1;

        $u0 = new java.lang.Error;

        $stack7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>(kiddo, afterWhat) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Trying to add \u0001 after \u0001, but it can\'t be found in the list.");

        specialinvoke $u0.<java.lang.Error: void <init>(java.lang.String)>($stack7);

        throw $u0;

     label1:
        $stack5 = index + 1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: void add(int,org.ooc.frontend.model.Node)>($stack5, kiddo);

        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection c;
        java.util.Iterator l2;
        boolean $stack5;
        java.lang.Object $stack6;
        org.ooc.frontend.model.Node t;
        NodeList this;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        c := @parameter0: java.util.Collection;

        l2 = interfaceinvoke c.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        t = (org.ooc.frontend.model.Node) $stack6;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r0.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>(t);

        goto label1;

     label2:
        return 1;
    }

    public boolean contains(java.lang.Object)
    {
        NodeList this;
        java.lang.Object o;
        boolean $stack2;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        o := @parameter0: java.lang.Object;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: boolean contains(java.lang.Object)>(o);

        return $stack2;
    }

    public boolean containsAll(java.util.Collection)
    {
        NodeList this;
        java.util.Iterator l3;
        boolean $stack6, $stack8, result;
        java.lang.Object $stack7;
        org.ooc.frontend.model.Node t;
        java.util.Collection c;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        c := @parameter0: java.util.Collection;

        result = 1;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        l3 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        t = (org.ooc.frontend.model.Node) $stack7;

        $stack8 = interfaceinvoke c.<java.util.Collection: boolean contains(java.lang.Object)>(t);

        if $stack8 != 0 goto label2;

        result = 0;

        goto label3;

     label2:
        goto label1;

     label3:
        return result;
    }

    public boolean remove(java.lang.Object)
    {
        NodeList this;
        java.lang.Object o;
        org.ooc.frontend.model.Node $stack2;
        boolean $stack3;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        o := @parameter0: java.lang.Object;

        $stack2 = (org.ooc.frontend.model.Node) o;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: boolean remove(org.ooc.frontend.model.Node)>($stack2);

        return $stack3;
    }

    public boolean removeAll(java.util.Collection)
    {
        NodeList this;
        java.util.Iterator l3;
        boolean $stack6, $stack8, removed;
        java.lang.Object $stack7;
        org.ooc.frontend.model.Node t;
        java.util.Collection c;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        c := @parameter0: java.util.Collection;

        removed = 0;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        l3 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        t = (org.ooc.frontend.model.Node) $stack7;

        $stack8 = interfaceinvoke c.<java.util.Collection: boolean contains(java.lang.Object)>(t);

        if $stack8 == 0 goto label2;

        removed = 1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: boolean remove(org.ooc.frontend.model.Node)>(t);

     label2:
        goto label1;

     label3:
        return removed;
    }

    public boolean retainAll(java.util.Collection)
    {
        NodeList this;
        java.util.Iterator l3;
        boolean $stack6, $stack8, removed;
        java.lang.Object $stack7;
        org.ooc.frontend.model.Node t;
        java.util.Collection c;
        org.ooc.frontend.model.NodeList $r0, $r1;

        this := @this: NodeList;

        c := @parameter0: java.util.Collection;

        removed = 0;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        l3 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        t = (org.ooc.frontend.model.Node) $stack7;

        $stack8 = interfaceinvoke c.<java.util.Collection: boolean contains(java.lang.Object)>(t);

        if $stack8 != 0 goto label2;

        removed = 1;

        $r1 = (org.ooc.frontend.model.NodeList) this;

        virtualinvoke $r1.<org.ooc.frontend.model.NodeList: boolean remove(org.ooc.frontend.model.Node)>(t);

     label2:
        goto label1;

     label3:
        return removed;
    }

    public java.lang.Object[] toArray()
    {
        NodeList this;
        int $stack2, $stack3;
        java.lang.Object[] array;
        org.ooc.frontend.model.Node[] $stack4;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack2 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        array = newarray (java.lang.Object)[$stack2];

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r2.<org.ooc.frontend.model.NodeList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack4, 0, array, 0, $stack3);

        return array;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        NodeList this;
        int $stack3, $stack4;
        java.lang.Object[] array, arg;
        org.ooc.frontend.model.Node[] $stack5;
        org.ooc.frontend.model.NodeList $r0, $r1, $r2;

        this := @this: NodeList;

        arg := @parameter0: java.lang.Object[];

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = $r0.<org.ooc.frontend.model.NodeList: int size>;

        array = newarray (java.lang.Object)[$stack3];

        $r1 = (org.ooc.frontend.model.NodeList) this;

        $stack5 = $r1.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node[] nodes>;

        $r2 = (org.ooc.frontend.model.NodeList) this;

        $stack4 = $r2.<org.ooc.frontend.model.NodeList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack5, 0, array, 0, $stack4);

        return array;
    }

    public volatile boolean add(java.lang.Object)
    {
        NodeList this;
        java.lang.Object l1;
        org.ooc.frontend.model.Node $stack2;
        boolean $stack3;
        org.ooc.frontend.model.NodeList $r0;

        this := @this: NodeList;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (org.ooc.frontend.model.Node) l1;

        $r0 = (org.ooc.frontend.model.NodeList) this;

        $stack3 = virtualinvoke $r0.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($stack2);

        return $stack3;
    }
}
