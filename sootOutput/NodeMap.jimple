public class NodeMap extends org.ooc.frontend.model.Node implements java.util.Map
{
    private java.util.Map map;
    private static final long serialVersionUID;

    public void <init>(java.util.Map)
    {
        NodeMap this;
        org.ooc.frontend.model.tokens.Token $stack2;
        java.util.Map map;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        map := @parameter0: java.util.Map;

        $stack2 = <org.ooc.frontend.model.tokens.Token: org.ooc.frontend.model.tokens.Token defaultToken>;

        specialinvoke this.<org.ooc.frontend.model.Node: void <init>(org.ooc.frontend.model.tokens.Token)>($stack2);

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map> = map;

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        NodeMap this;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.middle.structs.NodeMap)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        NodeMap this;
        java.util.Map $stack4;
        java.util.Collection $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8;
        org.ooc.frontend.model.Node child;
        org.ooc.frontend.Visitor visitor;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack4 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        child = (org.ooc.frontend.model.Node) $stack8;

        virtualinvoke child.<org.ooc.frontend.model.Node: void accept(org.ooc.frontend.Visitor)>(visitor);

        goto label1;

     label2:
        return;
    }

    public boolean hasChildren()
    {
        NodeMap this;
        int $stack1;
        boolean $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = virtualinvoke $r0.<org.ooc.middle.structs.NodeMap: int size()>();

        if $stack1 <= 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        NodeMap this;
        java.util.Set $stack6;
        java.util.Iterator l3;
        boolean $stack8;
        java.lang.Object key, $stack11;
        java.util.Map $stack10, $stack13;
        org.ooc.frontend.model.Node value, oldie, kiddo;
        org.ooc.middle.structs.NodeMap $r0, $r1, $r2;

        this := @this: NodeMap;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack6 = virtualinvoke $r0.<org.ooc.middle.structs.NodeMap: java.util.Set keySet()>();

        l3 = interfaceinvoke $stack6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        key = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.ooc.middle.structs.NodeMap) this;

        $stack10 = $r1.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack11 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        value = (org.ooc.frontend.model.Node) $stack11;

        if value != oldie goto label2;

        $r2 = (org.ooc.middle.structs.NodeMap) this;

        $stack13 = $r2.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        interfaceinvoke $stack13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void clear()
    {
        NodeMap this;
        java.util.Map $stack1;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        interfaceinvoke $stack1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        NodeMap this;
        java.lang.Object key;
        java.util.Map $stack2;
        boolean $stack3;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        key := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(key);

        return $stack3;
    }

    public boolean containsValue(java.lang.Object)
    {
        NodeMap this;
        java.lang.Object value;
        java.util.Map $stack2;
        boolean $stack3;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        value := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsValue(java.lang.Object)>(value);

        return $stack3;
    }

    public java.util.Set entrySet()
    {
        NodeMap this;
        java.util.Map $stack1;
        java.util.Set $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: java.util.Set entrySet()>();

        return $stack2;
    }

    public org.ooc.frontend.model.Node get(java.lang.Object)
    {
        NodeMap this;
        java.lang.Object key, $stack3;
        java.util.Map $stack2;
        org.ooc.frontend.model.Node $stack4;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        key := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack4 = (org.ooc.frontend.model.Node) $stack3;

        return $stack4;
    }

    public boolean isEmpty()
    {
        NodeMap this;
        java.util.Map $stack1;
        boolean $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: boolean isEmpty()>();

        return $stack2;
    }

    public java.util.Set keySet()
    {
        NodeMap this;
        java.util.Map $stack1;
        java.util.Set $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: java.util.Set keySet()>();

        return $stack2;
    }

    public org.ooc.frontend.model.Node put(java.lang.Object, org.ooc.frontend.model.Node)
    {
        NodeMap this;
        java.lang.Object key, $stack4;
        org.ooc.frontend.model.Node value, $stack5;
        java.util.Map $stack3;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        key := @parameter0: java.lang.Object;

        value := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack3 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);

        $stack5 = (org.ooc.frontend.model.Node) $stack4;

        return $stack5;
    }

    public void putAll(java.util.Map)
    {
        NodeMap this;
        java.util.Map t, $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        t := @parameter0: java.util.Map;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        interfaceinvoke $stack2.<java.util.Map: void putAll(java.util.Map)>(t);

        return;
    }

    public org.ooc.frontend.model.Node remove(java.lang.Object)
    {
        NodeMap this;
        java.lang.Object key, $stack3;
        java.util.Map $stack2;
        org.ooc.frontend.model.Node $stack4;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        key := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(key);

        $stack4 = (org.ooc.frontend.model.Node) $stack3;

        return $stack4;
    }

    public int size()
    {
        NodeMap this;
        java.util.Map $stack1;
        int $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public java.util.Collection values()
    {
        NodeMap this;
        java.util.Map $stack1;
        java.util.Collection $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack1 = $r0.<org.ooc.middle.structs.NodeMap: java.util.Map map>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: java.util.Collection values()>();

        return $stack2;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        NodeMap this;
        java.lang.Object l1;
        org.ooc.frontend.model.Node $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        l1 := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = virtualinvoke $r0.<org.ooc.middle.structs.NodeMap: org.ooc.frontend.model.Node remove(java.lang.Object)>(l1);

        return $stack2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        NodeMap this;
        java.lang.Object l1, l2;
        org.ooc.frontend.model.Node $stack3, $stack4;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $stack3 = (org.ooc.frontend.model.Node) l2;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack4 = virtualinvoke $r0.<org.ooc.middle.structs.NodeMap: org.ooc.frontend.model.Node put(java.lang.Object,org.ooc.frontend.model.Node)>(l1, $stack3);

        return $stack4;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        NodeMap this;
        java.lang.Object l1;
        org.ooc.frontend.model.Node $stack2;
        org.ooc.middle.structs.NodeMap $r0;

        this := @this: NodeMap;

        l1 := @parameter0: java.lang.Object;

        $r0 = (org.ooc.middle.structs.NodeMap) this;

        $stack2 = virtualinvoke $r0.<org.ooc.middle.structs.NodeMap: org.ooc.frontend.model.Node get(java.lang.Object)>(l1);

        return $stack2;
    }

    public static void <clinit>()
    {
        <NodeMap: long serialVersionUID> = -2959512676544142235L;

        return;
    }
}
