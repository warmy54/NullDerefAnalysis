public abstract class OpenCVFrameConverter extends org.bytedeco.javacv.FrameConverter
{
    org.bytedeco.opencv.opencv_core.IplImage img;
    org.bytedeco.opencv.opencv_core.Mat mat;
    org.opencv.core.Mat orgOpenCvCoreMat;

    public void <init>()
    {
        OpenCVFrameConverter this;

        this := @this: OpenCVFrameConverter;

        specialinvoke this.<org.bytedeco.javacv.FrameConverter: void <init>()>();

        return;
    }

    public static int getFrameDepth(int)
    {
        int depth;

        depth := @parameter0: int;

        lookupswitch(depth)
        {
            case -2147483640: goto label2;
            case -2147483632: goto label4;
            case -2147483616: goto label6;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label6;
            case 5: goto label5;
            case 6: goto label7;
            case 8: goto label1;
            case 16: goto label3;
            case 32: goto label5;
            case 64: goto label7;
            default: goto label8;
        };

     label1:
        return 8;

     label2:
        return -8;

     label3:
        return 16;

     label4:
        return -16;

     label5:
        return 32;

     label6:
        return -32;

     label7:
        return 64;

     label8:
        return -1;
    }

    public static int getIplImageDepth(int)
    {
        int depth;

        depth := @parameter0: int;

        lookupswitch(depth)
        {
            case -32: goto label6;
            case -16: goto label4;
            case -8: goto label2;
            case 8: goto label1;
            case 16: goto label3;
            case 32: goto label5;
            case 64: goto label7;
            default: goto label8;
        };

     label1:
        return 8;

     label2:
        return -2147483640;

     label3:
        return 16;

     label4:
        return -2147483632;

     label5:
        return 32;

     label6:
        return -2147483616;

     label7:
        return 64;

     label8:
        return -1;
    }

    static boolean isEqual(org.bytedeco.javacv.Frame, org.bytedeco.opencv.opencv_core.IplImage)
    {
        org.bytedeco.opencv.opencv_core.IplImage img;
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3, $stack4, $stack16;
        int $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28;
        org.bytedeco.javacpp.Pointer $stack15;
        java.nio.Buffer $stack17, $stack18;
        long $stack19, $stack21;
        org.bytedeco.javacpp.BytePointer $stack20;
        byte $stack22;
        boolean $stack2;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        img := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        if img == null goto label1;

        if frame == null goto label1;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack3 == null goto label1;

        $stack4 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack5 = lengthof $stack4;

        if $stack5 <= 0 goto label1;

        $stack6 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack7 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        if $stack6 != $stack7 goto label1;

        $stack8 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack9 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        if $stack8 != $stack9 goto label1;

        $stack10 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack11 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        if $stack10 != $stack11 goto label1;

        $stack12 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack13 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getIplImageDepth(int)>($stack12);

        $stack14 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        if $stack13 != $stack14 goto label1;

        $stack15 = new org.bytedeco.javacpp.Pointer;

        $stack16 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack17 = $stack16[0];

        $stack18 = virtualinvoke $stack17.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        specialinvoke $stack15.<org.bytedeco.javacpp.Pointer: void <init>(java.nio.Buffer)>($stack18);

        $stack19 = virtualinvoke $stack15.<org.bytedeco.javacpp.Pointer: long address()>();

        $stack20 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.javacpp.BytePointer imageData()>();

        $stack21 = virtualinvoke $stack20.<org.bytedeco.javacpp.BytePointer: long address()>();

        $stack22 = $stack19 cmp $stack21;

        if $stack22 != 0 goto label1;

        $stack24 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack23 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack25 = staticinvoke <java.lang.Math: int abs(int)>($stack23);

        $stack26 = $stack24 * $stack25;

        $stack27 = $stack26 / 8;

        $stack28 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        if $stack27 != $stack28 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.bytedeco.opencv.opencv_core.IplImage convertToIplImage(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3, $stack13, $stack26;
        java.lang.Object $stack4, $stack41;
        boolean $stack5, $stack7;
        OpenCVFrameConverter this;
        org.bytedeco.opencv.opencv_core.IplImage $stack6, $stack11, $stack19, $stack25, $stack33, $stack38, $stack42, $stack35, $stack8;
        int $stack9, depth, $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, $stack24, $stack28, $stack29, $stack30, $stack31, $stack32;
        java.nio.Buffer $stack14, $stack18, $stack27;
        org.bytedeco.javacpp.Pointer $stack34, $u0;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2, $r3, $r4;

        this := @this: OpenCVFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        if frame == null goto label1;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack3 != null goto label2;

     label1:
        return null;

     label2:
        $stack4 = frame.<org.bytedeco.javacv.Frame: java.lang.Object opaque>;

        $stack5 = $stack4 instanceof org.bytedeco.opencv.opencv_core.IplImage;

        if $stack5 == 0 goto label3;

        $stack41 = frame.<org.bytedeco.javacv.Frame: java.lang.Object opaque>;

        $stack42 = (org.bytedeco.opencv.opencv_core.IplImage) $stack41;

        return $stack42;

     label3:
        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack6 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img>;

        $stack7 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: boolean isEqual(org.bytedeco.javacv.Frame,org.bytedeco.opencv.opencv_core.IplImage)>(frame, $stack6);

        if $stack7 != 0 goto label7;

        $stack9 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        depth = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getIplImageDepth(int)>($stack9);

        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack11 = $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img>;

        if $stack11 == null goto label4;

        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack38 = $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img>;

        virtualinvoke $stack38.<org.bytedeco.opencv.opencv_core.IplImage: boolean releaseReference()>();

     label4:
        if depth >= 0 goto label5;

        $stack35 = null;

        goto label6;

     label5:
        $stack15 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack16 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack17 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $u0 = new org.bytedeco.javacpp.Pointer;

        $stack13 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack14 = $stack13[0];

        $stack18 = virtualinvoke $stack14.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        specialinvoke $u0.<org.bytedeco.javacpp.Pointer: void <init>(java.nio.Buffer)>($stack18);

        $stack19 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int,org.bytedeco.javacpp.Pointer)>($stack15, $stack16, depth, $stack17, $u0);

        $stack21 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack20 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack22 = staticinvoke <java.lang.Math: int abs(int)>($stack20);

        $stack23 = $stack21 * $stack22;

        $stack24 = $stack23 / 8;

        $stack25 = virtualinvoke $stack19.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage widthStep(int)>($stack24);

        $stack26 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack27 = $stack26[0];

        $stack28 = virtualinvoke $stack27.<java.nio.Buffer: int capacity()>();

        $stack29 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack30 = staticinvoke <java.lang.Math: int abs(int)>($stack29);

        $stack31 = $stack28 * $stack30;

        $stack32 = $stack31 / 8;

        $stack33 = virtualinvoke $stack25.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage imageSize(int)>($stack32);

        $stack34 = virtualinvoke $stack33.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.javacpp.Pointer retainReference()>();

        $stack35 = (org.bytedeco.opencv.opencv_core.IplImage) $stack34;

     label6:
        $r3 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r3.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img> = $stack35;

     label7:
        $r4 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack8 = $r4.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img>;

        return $stack8;
    }

    public org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.IplImage)
    {
        org.bytedeco.opencv.opencv_core.IplImage img;
        OpenCVFrameConverter this;
        org.bytedeco.javacv.Frame $stack2, $stack4, $stack5, $stack7, $stack9, $stack11, $stack14, $stack16, $stack18, $stack24, $u0;
        boolean $stack3;
        int $stack8, $stack10, $stack12, $stack13, $stack15, $stack17, $stack19, $stack20, $stack21, $stack22;
        java.nio.Buffer[] $stack23;
        java.nio.Buffer $stack26;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: OpenCVFrameConverter;

        img := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        if img != null goto label1;

        return null;

     label1:
        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack2 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack3 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: boolean isEqual(org.bytedeco.javacv.Frame,org.bytedeco.opencv.opencv_core.IplImage)>($stack2, img);

        if $stack3 != 0 goto label2;

        $u0 = new org.bytedeco.javacv.Frame;

        specialinvoke $u0.<org.bytedeco.javacv.Frame: void <init>()>();

        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame> = $u0;

        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack7 = $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack8 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack7.<org.bytedeco.javacv.Frame: int imageWidth> = $stack8;

        $r3 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack9 = $r3.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack10 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack9.<org.bytedeco.javacv.Frame: int imageHeight> = $stack10;

        $r4 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack11 = $r4.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack12 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        $stack13 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getFrameDepth(int)>($stack12);

        $stack11.<org.bytedeco.javacv.Frame: int imageDepth> = $stack13;

        $r5 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack14 = $r5.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack15 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        $stack14.<org.bytedeco.javacv.Frame: int imageChannels> = $stack15;

        $r6 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack16 = $r6.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack17 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: int widthStep()>();

        $stack20 = $stack17 * 8;

        $r7 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack18 = $r7.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack19 = $stack18.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack21 = staticinvoke <java.lang.Math: int abs(int)>($stack19);

        $stack22 = $stack20 / $stack21;

        $stack16.<org.bytedeco.javacv.Frame: int imageStride> = $stack22;

        $r8 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack24 = $r8.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack23 = newarray (java.nio.Buffer)[1];

        $stack26 = virtualinvoke img.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.Buffer createBuffer()>();

        $stack23[0] = $stack26;

        $stack24.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack23;

     label2:
        $r9 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack4 = $r9.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack4.<org.bytedeco.javacv.Frame: java.lang.Object opaque> = img;

        $r10 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack5 = $r10.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        return $stack5;
    }

    public static int getMatDepth(int)
    {
        int depth;

        depth := @parameter0: int;

        lookupswitch(depth)
        {
            case -32: goto label6;
            case -16: goto label4;
            case -8: goto label2;
            case 8: goto label1;
            case 16: goto label3;
            case 32: goto label5;
            case 64: goto label7;
            default: goto label8;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        return 5;

     label6:
        return 4;

     label7:
        return 6;

     label8:
        return -1;
    }

    static boolean isEqual(org.bytedeco.javacv.Frame, org.bytedeco.opencv.opencv_core.Mat)
    {
        org.bytedeco.opencv.opencv_core.Mat mat;
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3, $stack4, $stack16;
        int $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack23, $stack24, $stack25, $stack26, $stack27, $stack29;
        org.bytedeco.javacpp.Pointer $stack15;
        java.nio.Buffer $stack17, $stack18;
        long $stack19, $stack21, $stack28;
        org.bytedeco.javacpp.BytePointer $stack20;
        byte $stack22;
        boolean $stack2;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        mat := @parameter1: org.bytedeco.opencv.opencv_core.Mat;

        if mat == null goto label1;

        if frame == null goto label1;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack3 == null goto label1;

        $stack4 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack5 = lengthof $stack4;

        if $stack5 <= 0 goto label1;

        $stack6 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack7 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int cols()>();

        if $stack6 != $stack7 goto label1;

        $stack8 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack9 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int rows()>();

        if $stack8 != $stack9 goto label1;

        $stack10 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack11 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int channels()>();

        if $stack10 != $stack11 goto label1;

        $stack12 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack13 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getMatDepth(int)>($stack12);

        $stack14 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int depth()>();

        if $stack13 != $stack14 goto label1;

        $stack15 = new org.bytedeco.javacpp.Pointer;

        $stack16 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack17 = $stack16[0];

        $stack18 = virtualinvoke $stack17.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        specialinvoke $stack15.<org.bytedeco.javacpp.Pointer: void <init>(java.nio.Buffer)>($stack18);

        $stack19 = virtualinvoke $stack15.<org.bytedeco.javacpp.Pointer: long address()>();

        $stack20 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: org.bytedeco.javacpp.BytePointer data()>();

        $stack21 = virtualinvoke $stack20.<org.bytedeco.javacpp.BytePointer: long address()>();

        $stack22 = $stack19 cmp $stack21;

        if $stack22 != 0 goto label1;

        $stack24 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack23 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack25 = staticinvoke <java.lang.Math: int abs(int)>($stack23);

        $stack26 = $stack24 * $stack25;

        $stack27 = $stack26 / 8;

        $stack28 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: long step()>();

        $stack29 = (int) $stack28;

        if $stack27 != $stack29 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.bytedeco.opencv.opencv_core.Mat convertToMat(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3, $stack18;
        java.lang.Object $stack4, $stack34;
        boolean $stack5, $stack7;
        OpenCVFrameConverter this;
        org.bytedeco.opencv.opencv_core.Mat $stack6, $stack11, $stack31, $stack35, $stack28, $stack8, $u1;
        int $stack9, depth, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack25;
        java.nio.Buffer $stack19, $stack20;
        long $stack26;
        org.bytedeco.javacpp.Pointer $stack27, $u0;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2, $r3, $r4;

        this := @this: OpenCVFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        if frame == null goto label1;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack3 != null goto label2;

     label1:
        return null;

     label2:
        $stack4 = frame.<org.bytedeco.javacv.Frame: java.lang.Object opaque>;

        $stack5 = $stack4 instanceof org.bytedeco.opencv.opencv_core.Mat;

        if $stack5 == 0 goto label3;

        $stack34 = frame.<org.bytedeco.javacv.Frame: java.lang.Object opaque>;

        $stack35 = (org.bytedeco.opencv.opencv_core.Mat) $stack34;

        return $stack35;

     label3:
        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack6 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        $stack7 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: boolean isEqual(org.bytedeco.javacv.Frame,org.bytedeco.opencv.opencv_core.Mat)>(frame, $stack6);

        if $stack7 != 0 goto label7;

        $stack9 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        depth = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getMatDepth(int)>($stack9);

        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack11 = $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        if $stack11 == null goto label4;

        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack31 = $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        virtualinvoke $stack31.<org.bytedeco.opencv.opencv_core.Mat: boolean releaseReference()>();

     label4:
        if depth >= 0 goto label5;

        $stack28 = null;

        goto label6;

     label5:
        $u1 = new org.bytedeco.opencv.opencv_core.Mat;

        $stack14 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack15 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack13 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack16 = staticinvoke <org.bytedeco.opencv.global.opencv_core: int CV_MAKETYPE(int,int)>(depth, $stack13);

        $u0 = new org.bytedeco.javacpp.Pointer;

        $stack18 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack19 = $stack18[0];

        $stack20 = virtualinvoke $stack19.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        specialinvoke $u0.<org.bytedeco.javacpp.Pointer: void <init>(java.nio.Buffer)>($stack20);

        $stack22 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack21 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack23 = staticinvoke <java.lang.Math: int abs(int)>($stack21);

        $stack24 = $stack22 * $stack23;

        $stack25 = $stack24 / 8;

        $stack26 = (long) $stack25;

        specialinvoke $u1.<org.bytedeco.opencv.opencv_core.Mat: void <init>(int,int,int,org.bytedeco.javacpp.Pointer,long)>($stack14, $stack15, $stack16, $u0, $stack26);

        $stack27 = virtualinvoke $u1.<org.bytedeco.opencv.opencv_core.Mat: org.bytedeco.javacpp.Pointer retainReference()>();

        $stack28 = (org.bytedeco.opencv.opencv_core.Mat) $stack27;

     label6:
        $r3 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r3.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat> = $stack28;

     label7:
        $r4 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack8 = $r4.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        return $stack8;
    }

    public org.bytedeco.javacv.Frame convert(org.bytedeco.opencv.opencv_core.Mat)
    {
        org.bytedeco.opencv.opencv_core.Mat mat;
        OpenCVFrameConverter this;
        org.bytedeco.javacv.Frame $stack2, $stack4, $stack5, $stack7, $stack9, $stack11, $stack14, $stack16, $stack19, $stack25, $u0;
        boolean $stack3;
        int $stack8, $stack10, $stack12, $stack13, $stack15, $stack18, $stack20, $stack21, $stack22, $stack23;
        long $stack17;
        java.nio.Buffer[] $stack24;
        java.nio.Buffer $stack27;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: OpenCVFrameConverter;

        mat := @parameter0: org.bytedeco.opencv.opencv_core.Mat;

        if mat != null goto label1;

        return null;

     label1:
        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack2 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack3 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: boolean isEqual(org.bytedeco.javacv.Frame,org.bytedeco.opencv.opencv_core.Mat)>($stack2, mat);

        if $stack3 != 0 goto label2;

        $u0 = new org.bytedeco.javacv.Frame;

        specialinvoke $u0.<org.bytedeco.javacv.Frame: void <init>()>();

        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame> = $u0;

        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack7 = $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack8 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int cols()>();

        $stack7.<org.bytedeco.javacv.Frame: int imageWidth> = $stack8;

        $r3 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack9 = $r3.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack10 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int rows()>();

        $stack9.<org.bytedeco.javacv.Frame: int imageHeight> = $stack10;

        $r4 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack11 = $r4.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack12 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int depth()>();

        $stack13 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getFrameDepth(int)>($stack12);

        $stack11.<org.bytedeco.javacv.Frame: int imageDepth> = $stack13;

        $r5 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack14 = $r5.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack15 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: int channels()>();

        $stack14.<org.bytedeco.javacv.Frame: int imageChannels> = $stack15;

        $r6 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack16 = $r6.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack17 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: long step()>();

        $stack18 = (int) $stack17;

        $stack21 = $stack18 * 8;

        $r7 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack19 = $r7.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack20 = $stack19.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack22 = staticinvoke <java.lang.Math: int abs(int)>($stack20);

        $stack23 = $stack21 / $stack22;

        $stack16.<org.bytedeco.javacv.Frame: int imageStride> = $stack23;

        $r8 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack25 = $r8.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack24 = newarray (java.nio.Buffer)[1];

        $stack27 = virtualinvoke mat.<org.bytedeco.opencv.opencv_core.Mat: java.nio.Buffer createBuffer()>();

        $stack24[0] = $stack27;

        $stack25.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack24;

     label2:
        $r9 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack4 = $r9.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack4.<org.bytedeco.javacv.Frame: java.lang.Object opaque> = mat;

        $r10 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack5 = $r10.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        return $stack5;
    }

    static boolean isEqual(org.bytedeco.javacv.Frame, org.opencv.core.Mat)
    {
        org.opencv.core.Mat mat;
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3, $stack4, $stack16;
        int $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;
        org.bytedeco.javacpp.Pointer $stack15;
        java.nio.Buffer $stack17, $stack18;
        long $stack19, $stack20;
        byte $stack21;
        boolean $stack2;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        mat := @parameter1: org.opencv.core.Mat;

        if mat == null goto label1;

        if frame == null goto label1;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack3 == null goto label1;

        $stack4 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack5 = lengthof $stack4;

        if $stack5 <= 0 goto label1;

        $stack6 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack7 = virtualinvoke mat.<org.opencv.core.Mat: int cols()>();

        if $stack6 != $stack7 goto label1;

        $stack8 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack9 = virtualinvoke mat.<org.opencv.core.Mat: int rows()>();

        if $stack8 != $stack9 goto label1;

        $stack10 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack11 = virtualinvoke mat.<org.opencv.core.Mat: int channels()>();

        if $stack10 != $stack11 goto label1;

        $stack12 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack13 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getMatDepth(int)>($stack12);

        $stack14 = virtualinvoke mat.<org.opencv.core.Mat: int depth()>();

        if $stack13 != $stack14 goto label1;

        $stack15 = new org.bytedeco.javacpp.Pointer;

        $stack16 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack17 = $stack16[0];

        $stack18 = virtualinvoke $stack17.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        specialinvoke $stack15.<org.bytedeco.javacpp.Pointer: void <init>(java.nio.Buffer)>($stack18);

        $stack19 = virtualinvoke $stack15.<org.bytedeco.javacpp.Pointer: long address()>();

        $stack20 = virtualinvoke mat.<org.opencv.core.Mat: long dataAddr()>();

        $stack21 = $stack19 cmp $stack20;

        if $stack21 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public org.opencv.core.Mat convertToOrgOpenCvCoreMat(org.bytedeco.javacv.Frame)
    {
        org.bytedeco.javacv.Frame frame;
        java.nio.Buffer[] $stack3, $stack18, $stack21;
        java.lang.Object $stack4, $stack39;
        boolean $stack5, $stack7;
        OpenCVFrameConverter this;
        org.bytedeco.opencv.opencv_core.Mat $stack6;
        int $stack9, depth, $stack12, $stack13, $stack14, $stack15, $stack23, $stack24, $stack25, $stack26, $stack27, $stack31, $stack32, $stack33, $stack34, $stack35;
        java.nio.Buffer $stack19, $stack20, $stack22;
        long $stack28, $stack36;
        org.bytedeco.javacpp.BytePointer $stack29, $u1;
        java.nio.ByteBuffer $stack30;
        org.opencv.core.Mat $stack40, $stack11, $stack8, $u2;
        org.bytedeco.javacpp.Pointer $u0;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2;

        this := @this: OpenCVFrameConverter;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        if frame == null goto label1;

        $stack3 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        if $stack3 != null goto label2;

     label1:
        return null;

     label2:
        $stack4 = frame.<org.bytedeco.javacv.Frame: java.lang.Object opaque>;

        $stack5 = $stack4 instanceof org.opencv.core.Mat;

        if $stack5 == 0 goto label3;

        $stack39 = frame.<org.bytedeco.javacv.Frame: java.lang.Object opaque>;

        $stack40 = (org.opencv.core.Mat) $stack39;

        return $stack40;

     label3:
        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack6 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        $stack7 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: boolean isEqual(org.bytedeco.javacv.Frame,org.bytedeco.opencv.opencv_core.Mat)>(frame, $stack6);

        if $stack7 != 0 goto label6;

        $stack9 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        depth = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getMatDepth(int)>($stack9);

        if depth >= 0 goto label4;

        $stack11 = null;

        goto label5;

     label4:
        $u2 = new org.opencv.core.Mat;

        $stack11 = $u2;

        $stack13 = frame.<org.bytedeco.javacv.Frame: int imageHeight>;

        $stack14 = frame.<org.bytedeco.javacv.Frame: int imageWidth>;

        $stack12 = frame.<org.bytedeco.javacv.Frame: int imageChannels>;

        $stack15 = staticinvoke <org.bytedeco.opencv.global.opencv_core: int CV_MAKETYPE(int,int)>(depth, $stack12);

        $u1 = new org.bytedeco.javacpp.BytePointer;

        $u0 = new org.bytedeco.javacpp.Pointer;

        $stack18 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack19 = $stack18[0];

        $stack20 = virtualinvoke $stack19.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        specialinvoke $u0.<org.bytedeco.javacpp.Pointer: void <init>(java.nio.Buffer)>($stack20);

        specialinvoke $u1.<org.bytedeco.javacpp.BytePointer: void <init>(org.bytedeco.javacpp.Pointer)>($u0);

        $stack21 = frame.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image>;

        $stack22 = $stack21[0];

        $stack23 = virtualinvoke $stack22.<java.nio.Buffer: int capacity()>();

        $stack24 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack25 = staticinvoke <java.lang.Math: int abs(int)>($stack24);

        $stack26 = $stack23 * $stack25;

        $stack27 = $stack26 / 8;

        $stack28 = (long) $stack27;

        $stack29 = virtualinvoke $u1.<org.bytedeco.javacpp.BytePointer: org.bytedeco.javacpp.BytePointer capacity(long)>($stack28);

        $stack30 = virtualinvoke $stack29.<org.bytedeco.javacpp.BytePointer: java.nio.ByteBuffer asByteBuffer()>();

        $stack32 = frame.<org.bytedeco.javacv.Frame: int imageStride>;

        $stack31 = frame.<org.bytedeco.javacv.Frame: int imageDepth>;

        $stack33 = staticinvoke <java.lang.Math: int abs(int)>($stack31);

        $stack34 = $stack32 * $stack33;

        $stack35 = $stack34 / 8;

        $stack36 = (long) $stack35;

        specialinvoke $u2.<org.opencv.core.Mat: void <init>(int,int,int,java.nio.ByteBuffer,long)>($stack13, $stack14, $stack15, $stack30, $stack36);

     label5:
        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.opencv.core.Mat orgOpenCvCoreMat> = $stack11;

     label6:
        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack8 = $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.opencv.core.Mat orgOpenCvCoreMat>;

        return $stack8;
    }

    public org.bytedeco.javacv.Frame convert(org.opencv.core.Mat)
    {
        org.opencv.core.Mat mat;
        OpenCVFrameConverter this;
        org.bytedeco.javacv.Frame $stack3, $stack8, $stack10, $stack12, $stack15, $stack17, $stack31, $stack38, $stack42, $stack46, $stack50, $stack51, $stack5, $stack6, $u0;
        boolean $stack4;
        int $stack9, $stack11, $stack13, $stack14, $stack16, $stack19, $stack21, $stack29;
        long $stack18, $stack22, $stack23, $stack24, $stack25, $stack26;
        org.bytedeco.javacpp.BytePointer $stack27;
        java.nio.ByteBuffer byteBuffer;
        java.nio.Buffer[] $stack30, $stack37, $stack41, $stack45, $stack49;
        java.nio.DoubleBuffer $stack33;
        java.nio.FloatBuffer $stack40;
        java.nio.IntBuffer $stack44;
        java.nio.ShortBuffer $stack48;
        org.bytedeco.javacv.OpenCVFrameConverter$1 $u1;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: OpenCVFrameConverter;

        mat := @parameter0: org.opencv.core.Mat;

        if mat != null goto label1;

        return null;

     label1:
        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack3 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack4 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: boolean isEqual(org.bytedeco.javacv.Frame,org.opencv.core.Mat)>($stack3, mat);

        if $stack4 != 0 goto label8;

        $u0 = new org.bytedeco.javacv.Frame;

        specialinvoke $u0.<org.bytedeco.javacv.Frame: void <init>()>();

        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame> = $u0;

        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack8 = $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack9 = virtualinvoke mat.<org.opencv.core.Mat: int cols()>();

        $stack8.<org.bytedeco.javacv.Frame: int imageWidth> = $stack9;

        $r3 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack10 = $r3.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack11 = virtualinvoke mat.<org.opencv.core.Mat: int rows()>();

        $stack10.<org.bytedeco.javacv.Frame: int imageHeight> = $stack11;

        $r4 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack12 = $r4.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack13 = virtualinvoke mat.<org.opencv.core.Mat: int depth()>();

        $stack14 = staticinvoke <org.bytedeco.javacv.OpenCVFrameConverter: int getFrameDepth(int)>($stack13);

        $stack12.<org.bytedeco.javacv.Frame: int imageDepth> = $stack14;

        $r5 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack15 = $r5.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack16 = virtualinvoke mat.<org.opencv.core.Mat: int channels()>();

        $stack15.<org.bytedeco.javacv.Frame: int imageChannels> = $stack16;

        $r6 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack17 = $r6.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack18 = virtualinvoke mat.<org.opencv.core.Mat: long step1()>();

        $stack19 = (int) $stack18;

        $stack17.<org.bytedeco.javacv.Frame: int imageStride> = $stack19;

        $u1 = new org.bytedeco.javacv.OpenCVFrameConverter$1;

        $r7 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        specialinvoke $u1.<org.bytedeco.javacv.OpenCVFrameConverter$1: void <init>(org.bytedeco.javacv.OpenCVFrameConverter,org.opencv.core.Mat)>($r7, mat);

        $stack21 = virtualinvoke mat.<org.opencv.core.Mat: int rows()>();

        $stack22 = (long) $stack21;

        $stack23 = virtualinvoke mat.<org.opencv.core.Mat: long step1()>();

        $stack24 = $stack22 * $stack23;

        $stack25 = virtualinvoke mat.<org.opencv.core.Mat: long elemSize1()>();

        $stack26 = $stack24 * $stack25;

        $stack27 = virtualinvoke $u1.<org.bytedeco.javacv.OpenCVFrameConverter$1: org.bytedeco.javacpp.BytePointer capacity(long)>($stack26);

        byteBuffer = virtualinvoke $stack27.<org.bytedeco.javacpp.BytePointer: java.nio.ByteBuffer asByteBuffer()>();

        $stack29 = virtualinvoke mat.<org.opencv.core.Mat: int depth()>();

        tableswitch($stack29)
        {
            case 0: goto label2;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label6;
            default: goto label7;
        };

     label2:
        $r8 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack50 = $r8.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack49 = newarray (java.nio.Buffer)[1];

        $stack49[0] = byteBuffer;

        $stack50.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack49;

        goto label8;

     label3:
        $r9 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack46 = $r9.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack45 = newarray (java.nio.Buffer)[1];

        $stack48 = virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        $stack45[0] = $stack48;

        $stack46.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack45;

        goto label8;

     label4:
        $r10 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack38 = $r10.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack37 = newarray (java.nio.Buffer)[1];

        $stack40 = virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $stack37[0] = $stack40;

        $stack38.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack37;

        goto label8;

     label5:
        $r11 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack42 = $r11.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack41 = newarray (java.nio.Buffer)[1];

        $stack44 = virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        $stack41[0] = $stack44;

        $stack42.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack41;

        goto label8;

     label6:
        $r12 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack31 = $r12.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack30 = newarray (java.nio.Buffer)[1];

        $stack33 = virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>();

        $stack30[0] = $stack33;

        $stack31.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = $stack30;

        goto label8;

     label7:
        $r13 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack51 = $r13.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack51.<org.bytedeco.javacv.Frame: java.nio.Buffer[] image> = null;

     label8:
        $r14 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack5 = $r14.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        $stack5.<org.bytedeco.javacv.Frame: java.lang.Object opaque> = mat;

        $r15 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack6 = $r15.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.javacv.Frame frame>;

        return $stack6;
    }

    public void close()
    {
        OpenCVFrameConverter this;
        org.bytedeco.opencv.opencv_core.IplImage $stack1, $stack8;
        org.bytedeco.opencv.opencv_core.Mat $stack2, $stack5;
        org.opencv.core.Mat $stack3, $stack4;
        org.bytedeco.javacv.OpenCVFrameConverter $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: OpenCVFrameConverter;

        specialinvoke this.<org.bytedeco.javacv.FrameConverter: void close()>();

        $r0 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack1 = $r0.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img>;

        if $stack1 == null goto label1;

        $r1 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack8 = $r1.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img>;

        virtualinvoke $stack8.<org.bytedeco.opencv.opencv_core.IplImage: boolean releaseReference()>();

        $r2 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r2.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.IplImage img> = null;

     label1:
        $r3 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack2 = $r3.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        if $stack2 == null goto label2;

        $r4 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack5 = $r4.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat>;

        virtualinvoke $stack5.<org.bytedeco.opencv.opencv_core.Mat: boolean releaseReference()>();

        $r5 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r5.<org.bytedeco.javacv.OpenCVFrameConverter: org.bytedeco.opencv.opencv_core.Mat mat> = null;

     label2:
        $r6 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack3 = $r6.<org.bytedeco.javacv.OpenCVFrameConverter: org.opencv.core.Mat orgOpenCvCoreMat>;

        if $stack3 == null goto label3;

        $r7 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $stack4 = $r7.<org.bytedeco.javacv.OpenCVFrameConverter: org.opencv.core.Mat orgOpenCvCoreMat>;

        virtualinvoke $stack4.<org.opencv.core.Mat: void release()>();

        $r8 = (org.bytedeco.javacv.OpenCVFrameConverter) this;

        $r8.<org.bytedeco.javacv.OpenCVFrameConverter: org.opencv.core.Mat orgOpenCvCoreMat> = null;

     label3:
        return;
    }

    static void <clinit>()
    {
        staticinvoke <org.bytedeco.javacpp.Loader: java.lang.String load(java.lang.Class)>(class "Lorg/bytedeco/opencv/global/opencv_core;");

        return;
    }
}
