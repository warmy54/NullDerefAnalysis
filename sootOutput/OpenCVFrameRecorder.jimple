public class OpenCVFrameRecorder extends org.bytedeco.javacv.FrameRecorder
{
    private static org.bytedeco.javacv.FrameRecorder$Exception loadingException;
    private static final boolean windows;
    private java.lang.String filename;
    private org.bytedeco.opencv.opencv_videoio.VideoWriter writer;
    private org.bytedeco.javacv.OpenCVFrameConverter$ToMat converter;

    public static org.bytedeco.javacv.OpenCVFrameRecorder createDefault(java.io.File, int, int) throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        org.bytedeco.javacv.OpenCVFrameRecorder $stack3;
        java.io.File f;
        int w, h;

        f := @parameter0: java.io.File;

        w := @parameter1: int;

        h := @parameter2: int;

        $stack3 = new org.bytedeco.javacv.OpenCVFrameRecorder;

        specialinvoke $stack3.<org.bytedeco.javacv.OpenCVFrameRecorder: void <init>(java.io.File,int,int)>(f, w, h);

        return $stack3;
    }

    public static org.bytedeco.javacv.OpenCVFrameRecorder createDefault(java.lang.String, int, int) throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        org.bytedeco.javacv.OpenCVFrameRecorder $stack3;
        java.lang.String f;
        int w, h;

        f := @parameter0: java.lang.String;

        w := @parameter1: int;

        h := @parameter2: int;

        $stack3 = new org.bytedeco.javacv.OpenCVFrameRecorder;

        specialinvoke $stack3.<org.bytedeco.javacv.OpenCVFrameRecorder: void <init>(java.lang.String,int,int)>(f, w, h);

        return $stack3;
    }

    public static void tryLoad() throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        org.bytedeco.javacv.FrameRecorder$Exception $stack1, $stack3, $u1;
        java.lang.Throwable $stack4, $r0, $r1;
        java.lang.StringBuilder $stack7, $stack8, $u0;
        java.lang.String $stack9;

        $stack1 = <org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.javacv.FrameRecorder$Exception loadingException>;

        if $stack1 == null goto label1;

        $stack3 = <org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.javacv.FrameRecorder$Exception loadingException>;

        $r0 = (java.lang.Throwable) $stack3;

        throw $r0;

     label1:
        staticinvoke <org.bytedeco.javacpp.Loader: java.lang.String load(java.lang.Class)>(class "Lorg/bytedeco/opencv/global/opencv_highgui;");

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

        $u1 = new org.bytedeco.javacv.FrameRecorder$Exception;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(class "Lorg/bytedeco/javacv/OpenCVFrameRecorder;");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<org.bytedeco.javacv.FrameRecorder$Exception: void <init>(java.lang.String,java.lang.Throwable)>($stack9, $stack4);

        <org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.javacv.FrameRecorder$Exception loadingException> = $u1;

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void <init>(java.io.File, int, int)
    {
        OpenCVFrameRecorder this;
        java.io.File file;
        java.lang.String $stack4;
        int imageWidth, imageHeight;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0;

        this := @this: OpenCVFrameRecorder;

        file := @parameter0: java.io.File;

        imageWidth := @parameter1: int;

        imageHeight := @parameter2: int;

        $stack4 = virtualinvoke file.<java.io.File: java.lang.String getAbsolutePath()>();

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        specialinvoke $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: void <init>(java.lang.String,int,int)>($stack4, imageWidth, imageHeight);

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        OpenCVFrameRecorder this;
        java.lang.String filename;
        int imageWidth, imageHeight, $stack6;
        boolean $stack5;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $u0;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: OpenCVFrameRecorder;

        filename := @parameter0: java.lang.String;

        imageWidth := @parameter1: int;

        imageHeight := @parameter2: int;

        specialinvoke this.<org.bytedeco.javacv.FrameRecorder: void <init>()>();

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer> = null;

        $u0 = new org.bytedeco.javacv.OpenCVFrameConverter$ToMat;

        specialinvoke $u0.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: void <init>()>();

        $r1 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r1.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.javacv.OpenCVFrameConverter$ToMat converter> = $u0;

        $r2 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r2.<org.bytedeco.javacv.OpenCVFrameRecorder: java.lang.String filename> = filename;

        $r3 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r3.<org.bytedeco.javacv.OpenCVFrameRecorder: int imageWidth> = imageWidth;

        $r4 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r4.<org.bytedeco.javacv.OpenCVFrameRecorder: int imageHeight> = imageHeight;

        $r5 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r5.<org.bytedeco.javacv.OpenCVFrameRecorder: int pixelFormat> = 1;

        $stack5 = <org.bytedeco.javacv.OpenCVFrameRecorder: boolean windows>;

        if $stack5 == 0 goto label1;

        $stack6 = -1;

        goto label2;

     label1:
        $stack6 = staticinvoke <org.bytedeco.opencv.opencv_videoio.VideoWriter: int fourcc(byte,byte,byte,byte)>(73, 89, 85, 86);

     label2:
        $r6 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r6.<org.bytedeco.javacv.OpenCVFrameRecorder: int videoCodec> = $stack6;

        $r7 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r7.<org.bytedeco.javacv.OpenCVFrameRecorder: double frameRate> = 30.0;

        return;
    }

    public void release() throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        OpenCVFrameRecorder this;
        org.bytedeco.opencv.opencv_videoio.VideoWriter $stack1, $stack2;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0, $r1, $r2;

        this := @this: OpenCVFrameRecorder;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack1 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        if $stack1 == null goto label1;

        $r1 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack2 = $r1.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        virtualinvoke $stack2.<org.bytedeco.opencv.opencv_videoio.VideoWriter: void release()>();

        $r2 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r2.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer> = null;

     label1:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        OpenCVFrameRecorder this;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0;

        this := @this: OpenCVFrameRecorder;

        specialinvoke this.<java.lang.Object: void finalize()>();

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        virtualinvoke $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: void release()>();

        return;
    }

    public double getOption(int)
    {
        OpenCVFrameRecorder this;
        org.bytedeco.opencv.opencv_videoio.VideoWriter $stack2, $stack8;
        int propId;
        java.util.Map $stack3;
        java.lang.String $stack4, $stack6;
        java.lang.Object $stack5;
        double $stack7, $stack9;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0, $r1, $r2;

        this := @this: OpenCVFrameRecorder;

        propId := @parameter0: int;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack2 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        if $stack2 == null goto label1;

        $r1 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack8 = $r1.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        $stack9 = virtualinvoke $stack8.<org.bytedeco.opencv.opencv_videoio.VideoWriter: double get(int)>(propId);

        return $stack9;

     label1:
        $r2 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack3 = $r2.<org.bytedeco.javacv.OpenCVFrameRecorder: java.util.Map options>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(propId);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        $stack6 = (java.lang.String) $stack5;

        $stack7 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack6);

        return $stack7;
    }

    public void setOption(int, double)
    {
        OpenCVFrameRecorder this;
        int propId;
        java.util.Map $stack4;
        java.lang.String $stack5, $stack6;
        double value;
        org.bytedeco.opencv.opencv_videoio.VideoWriter $stack8, $stack9;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0, $r1, $r2;

        this := @this: OpenCVFrameRecorder;

        propId := @parameter0: int;

        value := @parameter1: double;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack4 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: java.util.Map options>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(propId);

        $stack6 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(value);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $r1 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack8 = $r1.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        if $stack8 == null goto label1;

        $r2 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack9 = $r2.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        virtualinvoke $stack9.<org.bytedeco.opencv.opencv_videoio.VideoWriter: boolean set(int,double)>(propId, value);

     label1:
        return;
    }

    public void start() throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        OpenCVFrameRecorder this;
        java.lang.String $stack4, $stack18, $stack21;
        int $stack5, $stack7, $stack8, $stack19;
        double $stack9, $stack22;
        boolean $stack10, $stack14;
        java.util.Map $stack11;
        java.util.Set $stack12;
        java.util.Iterator l1;
        java.lang.Object $stack15, $stack17, $stack20;
        java.util.Map$Entry e;
        org.bytedeco.opencv.opencv_videoio.VideoWriter $stack16, $u1;
        org.bytedeco.opencv.opencv_core.Size $u0;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: OpenCVFrameRecorder;

        $u1 = new org.bytedeco.opencv.opencv_videoio.VideoWriter;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack4 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: java.lang.String filename>;

        $r1 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack5 = specialinvoke $r1.<org.bytedeco.javacv.OpenCVFrameRecorder: int fourCCCodec()>();

        $r2 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack9 = $r2.<org.bytedeco.javacv.OpenCVFrameRecorder: double frameRate>;

        $u0 = new org.bytedeco.opencv.opencv_core.Size;

        $r3 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack8 = $r3.<org.bytedeco.javacv.OpenCVFrameRecorder: int imageWidth>;

        $r4 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack7 = $r4.<org.bytedeco.javacv.OpenCVFrameRecorder: int imageHeight>;

        specialinvoke $u0.<org.bytedeco.opencv.opencv_core.Size: void <init>(int,int)>($stack8, $stack7);

        $r5 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack10 = specialinvoke $r5.<org.bytedeco.javacv.OpenCVFrameRecorder: boolean isColour()>();

        specialinvoke $u1.<org.bytedeco.opencv.opencv_videoio.VideoWriter: void <init>(java.lang.String,int,double,org.bytedeco.opencv.opencv_core.Size,boolean)>($stack4, $stack5, $stack9, $u0, $stack10);

        $r6 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $r6.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer> = $u1;

        $r7 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack11 = $r7.<org.bytedeco.javacv.OpenCVFrameRecorder: java.util.Map options>;

        $stack12 = interfaceinvoke $stack11.<java.util.Map: java.util.Set entrySet()>();

        l1 = interfaceinvoke $stack12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label2;

        $stack15 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $stack15;

        $r8 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack16 = $r8.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        $stack17 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack18 = (java.lang.String) $stack17;

        $stack19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack18);

        $stack20 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack21 = (java.lang.String) $stack20;

        $stack22 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack21);

        virtualinvoke $stack16.<org.bytedeco.opencv.opencv_videoio.VideoWriter: boolean set(int,double)>($stack19, $stack22);

        goto label1;

     label2:
        return;
    }

    private boolean isColour()
    {
        OpenCVFrameRecorder this;
        int $stack1;
        boolean $stack2;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0;

        this := @this: OpenCVFrameRecorder;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack1 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: int pixelFormat>;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    private int fourCCCodec()
    {
        OpenCVFrameRecorder this;
        int $stack1;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0;

        this := @this: OpenCVFrameRecorder;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack1 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: int videoCodec>;

        return $stack1;
    }

    public void flush() throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        OpenCVFrameRecorder this;

        this := @this: OpenCVFrameRecorder;

        return;
    }

    public void stop() throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        OpenCVFrameRecorder this;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0;

        this := @this: OpenCVFrameRecorder;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        virtualinvoke $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: void release()>();

        return;
    }

    public void record(org.bytedeco.javacv.Frame) throws org.bytedeco.javacv.FrameRecorder$Exception
    {
        OpenCVFrameRecorder this;
        org.bytedeco.javacv.Frame frame;
        org.bytedeco.javacv.OpenCVFrameConverter$ToMat $stack3;
        org.bytedeco.opencv.opencv_core.Mat mat;
        org.bytedeco.opencv.opencv_videoio.VideoWriter $stack5, $stack7;
        org.bytedeco.javacv.FrameRecorder$Exception $u0;
        org.bytedeco.javacv.OpenCVFrameRecorder $r0, $r1, $r2;
        java.lang.Throwable $r3;

        this := @this: OpenCVFrameRecorder;

        frame := @parameter0: org.bytedeco.javacv.Frame;

        $r0 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack3 = $r0.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.javacv.OpenCVFrameConverter$ToMat converter>;

        mat = virtualinvoke $stack3.<org.bytedeco.javacv.OpenCVFrameConverter$ToMat: org.bytedeco.opencv.opencv_core.Mat convert(org.bytedeco.javacv.Frame)>(frame);

        $r1 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack5 = $r1.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        if $stack5 == null goto label1;

        $r2 = (org.bytedeco.javacv.OpenCVFrameRecorder) this;

        $stack7 = $r2.<org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.opencv.opencv_videoio.VideoWriter writer>;

        virtualinvoke $stack7.<org.bytedeco.opencv.opencv_videoio.VideoWriter: void write(org.bytedeco.opencv.opencv_core.Mat)>(mat);

        goto label2;

     label1:
        $u0 = new org.bytedeco.javacv.FrameRecorder$Exception;

        specialinvoke $u0.<org.bytedeco.javacv.FrameRecorder$Exception: void <init>(java.lang.String)>("Cannot record: There is no writer (Has start() been called?)");

        $r3 = (java.lang.Throwable) $u0;

        throw $r3;

     label2:
        frame.<org.bytedeco.javacv.Frame: boolean keyFrame> = 1;

        return;
    }

    static void <clinit>()
    {
        java.lang.String $stack0;
        boolean $stack1;

        <org.bytedeco.javacv.OpenCVFrameRecorder: org.bytedeco.javacv.FrameRecorder$Exception loadingException> = null;

        $stack0 = staticinvoke <org.bytedeco.javacpp.Loader: java.lang.String getPlatform()>();

        $stack1 = virtualinvoke $stack0.<java.lang.String: boolean startsWith(java.lang.String)>("windows");

        <org.bytedeco.javacv.OpenCVFrameRecorder: boolean windows> = $stack1;

        return;
    }
}
