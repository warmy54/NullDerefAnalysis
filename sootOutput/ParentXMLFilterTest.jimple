public class ParentXMLFilterTest extends org.apache.maven.model.transform.AbstractXMLFilterTests
{

    public void <init>()
    {
        ParentXMLFilterTest this;

        this := @this: ParentXMLFilterTest;

        specialinvoke this.<org.apache.maven.model.transform.AbstractXMLFilterTests: void <init>()>();

        return;
    }

    protected org.apache.maven.model.transform.ParentXMLFilter getFilter(java.util.function.Consumer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        org.apache.maven.model.transform.ParentXMLFilter $stack3;
        java.util.function.Function $stack4;
        java.lang.String[] $stack5;
        java.nio.file.Path $stack6, $stack7;
        java.util.function.Consumer lexicalHandlerConsumer;
        ParentXMLFilterTest this;

        this := @this: ParentXMLFilterTest;

        lexicalHandlerConsumer := @parameter0: java.util.function.Consumer;

        $stack3 = new org.apache.maven.model.transform.ParentXMLFilter;

        $stack4 = staticinvoke <ParentXMLFilterTest$lambda_getFilter_0__310: java.util.function.Function bootstrap$()>();

        specialinvoke $stack3.<org.apache.maven.model.transform.ParentXMLFilter: void <init>(java.util.function.Function)>($stack4);

        $stack5 = newarray (java.lang.String)[0];

        $stack6 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("pom.xml", $stack5);

        $stack7 = interfaceinvoke $stack6.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        virtualinvoke $stack3.<org.apache.maven.model.transform.ParentXMLFilter: void setProjectPath(java.nio.file.Path)>($stack7);

        interfaceinvoke lexicalHandlerConsumer.<java.util.function.Consumer: void accept(java.lang.Object)>($stack3);

        return $stack3;
    }

    public void testMinimum() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<parent/>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent/>", actual);

        return;
    }

    public void testNoRelativePath() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><version>VERSION</version></parent>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><version>VERSION</version></parent>", actual);

        return;
    }

    public void testDefaultRelativePath() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId></parent>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><version>1.0.0</version></parent>", actual);

        return;
    }

    public void testEmptyRelativePathNoVersion() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath></relativePath></parent>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath/></parent>", actual);

        return;
    }

    public void testNoVersion() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath>RELATIVEPATH</relativePath></parent>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath>RELATIVEPATH</relativePath><version>1.0.0</version></parent>", actual);

        return;
    }

    public void testInvalidRelativePath() throws java.lang.Exception
    {
        java.util.function.Function $stack6;
        java.lang.String[] $stack7;
        java.nio.file.Path $stack8, $stack9;
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilter $u0;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r1;

        this := @this: ParentXMLFilterTest;

        $u0 = new org.apache.maven.model.transform.ParentXMLFilter;

        $stack6 = staticinvoke <ParentXMLFilterTest$lambda_testInvalidRelativePath_1__311: java.util.function.Function bootstrap$()>();

        specialinvoke $u0.<org.apache.maven.model.transform.ParentXMLFilter: void <init>(java.util.function.Function)>($stack6);

        $stack7 = newarray (java.lang.String)[0];

        $stack8 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("pom.xml", $stack7);

        $stack9 = interfaceinvoke $stack8.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        virtualinvoke $u0.<org.apache.maven.model.transform.ParentXMLFilter: void setProjectPath(java.nio.file.Path)>($stack9);

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        $r1 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u0;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String,org.apache.maven.model.transform.sax.AbstractSAXFilter)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath>RELATIVEPATH</relativePath></parent>", $r1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath>RELATIVEPATH</relativePath></parent>", actual);

        return;
    }

    public void testRelativePathAndVersion() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath>RELATIVEPATH</relativePath><version>1.0.0</version></parent>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><relativePath>RELATIVEPATH</relativePath><version>1.0.0</version></parent>", actual);

        return;
    }

    public void testWithWeirdNamespace() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<relativePath:parent xmlns:relativePath=\"relativePath\"><relativePath:groupId>GROUPID</relativePath:groupId><relativePath:artifactId>ARTIFACTID</relativePath:artifactId><relativePath:relativePath>RELATIVEPATH</relativePath:relativePath></relativePath:parent>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<relativePath:parent xmlns:relativePath=\"relativePath\"><relativePath:groupId>GROUPID</relativePath:groupId><relativePath:artifactId>ARTIFACTID</relativePath:artifactId><relativePath:relativePath>RELATIVEPATH</relativePath:relativePath><relativePath:version>1.0.0</relativePath:version></relativePath:parent>", actual);

        return;
    }

    public void comment() throws java.lang.Exception
    {
        ParentXMLFilterTest this;
        java.lang.String actual;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<project><!--before--><parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><!--version here--></parent></project>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<project><!--before--><parent><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><!--version here--><version>1.0.0</version></parent></project>", actual);

        return;
    }

    public void testIndent() throws java.lang.Exception
    {
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26, $u0;
        java.lang.String $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, expected, actual;
        ParentXMLFilterTest this;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;

        this := @this: ParentXMLFilterTest;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<project>");

        $stack6 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  <parent>");

        $stack9 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    <groupId>GROUPID</groupId>");

        $stack12 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    <artifactId>ARTIFACTID</artifactId>");

        $stack15 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    <!--version here-->");

        $stack18 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    <version>1.0.0</version>");

        $stack21 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  </parent>");

        $stack24 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</project>");

        expected = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: java.lang.String transform(java.lang.String)>("<project>\n  <parent>\n    <groupId>GROUPID</groupId>\n    <artifactId>ARTIFACTID</artifactId>\n    <!--version here-->\n  </parent>\n</project>");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expected, actual);

        return;
    }

    protected volatile org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter(java.util.function.Consumer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        ParentXMLFilterTest this;
        java.util.function.Consumer l1;
        org.apache.maven.model.transform.ParentXMLFilter $stack2;
        org.apache.maven.model.transform.ParentXMLFilterTest $r0;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r1;

        this := @this: ParentXMLFilterTest;

        l1 := @parameter0: java.util.function.Consumer;

        $r0 = (org.apache.maven.model.transform.ParentXMLFilterTest) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.model.transform.ParentXMLFilterTest: org.apache.maven.model.transform.ParentXMLFilter getFilter(java.util.function.Consumer)>(l1);

        $r1 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $stack2;

        return $r1;
    }

    private static java.util.Optional lambda$testInvalidRelativePath$1(java.nio.file.Path)
    {
        java.util.Optional $stack1;
        java.nio.file.Path x;

        x := @parameter0: java.nio.file.Path;

        $stack1 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>(null);

        return $stack1;
    }

    private static java.util.Optional lambda$getFilter$0(java.nio.file.Path)
    {
        org.apache.maven.model.transform.RelativeProject $stack1;
        java.util.Optional $stack2;
        java.nio.file.Path x;

        x := @parameter0: java.nio.file.Path;

        $stack1 = new org.apache.maven.model.transform.RelativeProject;

        specialinvoke $stack1.<org.apache.maven.model.transform.RelativeProject: void <init>(java.lang.String,java.lang.String,java.lang.String)>("GROUPID", "ARTIFACTID", "1.0.0");

        $stack2 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($stack1);

        return $stack2;
    }
}
