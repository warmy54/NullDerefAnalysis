public class Parenthesis extends org.ooc.frontend.model.Expression
{
    protected org.ooc.frontend.model.Expression expression;

    public void <init>(org.ooc.frontend.model.Expression)
    {
        Parenthesis this;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.tokens.Token $stack2;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        $stack2 = expression.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>($stack2);

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression> = expression;

        return;
    }

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        Parenthesis this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression> = expression;

        return;
    }

    public org.ooc.frontend.model.Expression getExpression()
    {
        Parenthesis this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $stack1 = $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression>;

        return $stack1;
    }

    public void setExpression(org.ooc.frontend.model.Expression)
    {
        Parenthesis this;
        org.ooc.frontend.model.Expression expression;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        expression := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression> = expression;

        return;
    }

    public org.ooc.frontend.model.Type getType()
    {
        Parenthesis this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Type $stack2;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $stack1 = $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        return $stack2;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Parenthesis this;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Parenthesis)>($r0);

        return;
    }

    public boolean hasChildren()
    {
        Parenthesis this;

        this := @this: Parenthesis;

        return 1;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        Parenthesis this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $stack2 = $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        Parenthesis this;
        org.ooc.frontend.model.Expression $stack3, $stack4;
        org.ooc.frontend.model.Parenthesis $r0, $r1;

        this := @this: Parenthesis;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $stack3 = $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression>;

        if oldie != $stack3 goto label1;

        $stack4 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.Parenthesis) this;

        $r1.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression> = $stack4;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        Parenthesis this;
        org.ooc.frontend.model.Expression $stack1;
        java.lang.String $stack2;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $stack1 = $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression>;

        $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression)>($stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Parenthesis: (\u0001)");

        return $stack2;
    }

    public boolean canBeReferenced()
    {
        Parenthesis this;
        org.ooc.frontend.model.Expression $stack1;
        boolean $stack2;
        org.ooc.frontend.model.Parenthesis $r0;

        this := @this: Parenthesis;

        $r0 = (org.ooc.frontend.model.Parenthesis) this;

        $stack1 = $r0.<org.ooc.frontend.model.Parenthesis: org.ooc.frontend.model.Expression expression>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: boolean canBeReferenced()>();

        return $stack2;
    }
}
