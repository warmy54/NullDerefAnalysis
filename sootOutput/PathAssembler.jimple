public class PathAssembler extends java.lang.Object
{
    public static final java.lang.String MAVEN_USER_HOME_STRING;
    public static final java.lang.String PROJECT_STRING;
    private java.nio.file.Path mavenUserHome;

    public void <init>()
    {
        PathAssembler this;

        this := @this: PathAssembler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.nio.file.Path)
    {
        PathAssembler this;
        java.nio.file.Path mavenUserHome;
        org.apache.maven.wrapper.PathAssembler $r0;

        this := @this: PathAssembler;

        mavenUserHome := @parameter0: java.nio.file.Path;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.wrapper.PathAssembler) this;

        $r0.<org.apache.maven.wrapper.PathAssembler: java.nio.file.Path mavenUserHome> = mavenUserHome;

        return;
    }

    public org.apache.maven.wrapper.PathAssembler$LocalDistribution getDistribution(org.apache.maven.wrapper.WrapperConfiguration)
    {
        PathAssembler this;
        org.apache.maven.wrapper.WrapperConfiguration configuration;
        java.net.URI $stack6;
        java.lang.String baseName, rootDirName, $stack9, $stack11, $stack14, $stack16;
        java.nio.file.Path $stack10, $stack12, distDir, $stack15, $stack17, $stack18, distZip;
        org.apache.maven.wrapper.PathAssembler$LocalDistribution $u0;
        org.apache.maven.wrapper.PathAssembler $r0, $r1, $r2, $r3, $r4;

        this := @this: PathAssembler;

        configuration := @parameter0: org.apache.maven.wrapper.WrapperConfiguration;

        $stack6 = virtualinvoke configuration.<org.apache.maven.wrapper.WrapperConfiguration: java.net.URI getDistribution()>();

        $r0 = (org.apache.maven.wrapper.PathAssembler) this;

        baseName = specialinvoke $r0.<org.apache.maven.wrapper.PathAssembler: java.lang.String getDistName(java.net.URI)>($stack6);

        $r1 = (org.apache.maven.wrapper.PathAssembler) this;

        rootDirName = specialinvoke $r1.<org.apache.maven.wrapper.PathAssembler: java.lang.String removeExtension(java.lang.String)>(baseName);

        $stack9 = virtualinvoke configuration.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionBase()>();

        $r2 = (org.apache.maven.wrapper.PathAssembler) this;

        $stack10 = specialinvoke $r2.<org.apache.maven.wrapper.PathAssembler: java.nio.file.Path getBaseDir(java.lang.String)>($stack9);

        $stack11 = virtualinvoke configuration.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionPath()>();

        $stack12 = interfaceinvoke $stack10.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>($stack11);

        distDir = interfaceinvoke $stack12.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(rootDirName);

        $stack14 = virtualinvoke configuration.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipBase()>();

        $r3 = (org.apache.maven.wrapper.PathAssembler) this;

        $stack15 = specialinvoke $r3.<org.apache.maven.wrapper.PathAssembler: java.nio.file.Path getBaseDir(java.lang.String)>($stack14);

        $stack16 = virtualinvoke configuration.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipPath()>();

        $stack17 = interfaceinvoke $stack15.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>($stack16);

        $stack18 = interfaceinvoke $stack17.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(rootDirName);

        distZip = interfaceinvoke $stack18.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(baseName);

        $u0 = new org.apache.maven.wrapper.PathAssembler$LocalDistribution;

        $r4 = (org.apache.maven.wrapper.PathAssembler) this;

        specialinvoke $u0.<org.apache.maven.wrapper.PathAssembler$LocalDistribution: void <init>(org.apache.maven.wrapper.PathAssembler,java.nio.file.Path,java.nio.file.Path)>($r4, distDir, distZip);

        return $u0;
    }

    private java.lang.String removeExtension(java.lang.String)
    {
        java.lang.String name, $stack4;
        int p;
        PathAssembler this;

        this := @this: PathAssembler;

        name := @parameter0: java.lang.String;

        p = virtualinvoke name.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if p >= 0 goto label1;

        return name;

     label1:
        $stack4 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, p);

        return $stack4;
    }

    private java.lang.String getDistName(java.net.URI)
    {
        java.net.URI distUrl;
        java.lang.String path, $stack7;
        int p, $stack6;
        PathAssembler this;

        this := @this: PathAssembler;

        distUrl := @parameter0: java.net.URI;

        path = virtualinvoke distUrl.<java.net.URI: java.lang.String getPath()>();

        p = virtualinvoke path.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        if p >= 0 goto label1;

        return path;

     label1:
        $stack6 = p + 1;

        $stack7 = virtualinvoke path.<java.lang.String: java.lang.String substring(int)>($stack6);

        return $stack7;
    }

    private java.nio.file.Path getBaseDir(java.lang.String)
    {
        java.lang.String base, $stack2, $stack4, $stack11, $stack12;
        boolean $stack3, $stack5;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $u0;
        java.lang.String[] $stack13;
        java.nio.file.Path $stack14, $stack15;
        PathAssembler this;
        java.lang.IllegalArgumentException $u1;
        org.apache.maven.wrapper.PathAssembler $r0;

        this := @this: PathAssembler;

        base := @parameter0: java.lang.String;

        $stack2 = "MAVEN_USER_HOME";

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(base);

        if $stack3 == 0 goto label1;

        $r0 = (org.apache.maven.wrapper.PathAssembler) this;

        $stack15 = $r0.<org.apache.maven.wrapper.PathAssembler: java.nio.file.Path mavenUserHome>;

        return $stack15;

     label1:
        $stack4 = "PROJECT";

        $stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>(base);

        if $stack5 == 0 goto label2;

        $stack12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $stack13 = newarray (java.lang.String)[0];

        $stack14 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($stack12, $stack13);

        return $stack14;

     label2:
        $u1 = new java.lang.IllegalArgumentException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base: ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(base);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unknown");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack11);

        throw $u1;
    }

    public static void <clinit>()
    {
        <PathAssembler: java.lang.String PROJECT_STRING> = "PROJECT";

        <PathAssembler: java.lang.String MAVEN_USER_HOME_STRING> = "MAVEN_USER_HOME";

        return;
    }
}
