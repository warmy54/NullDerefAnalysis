public class Phase$NonStandardPhase extends java.lang.Object implements sortpom.wrapper.content.Phase
{
    private final java.lang.String text;

    public void <init>(java.lang.String)
    {
        Phase$NonStandardPhase this;
        java.lang.String text, $stack2;
        sortpom.wrapper.content.Phase$NonStandardPhase $r0;

        this := @this: Phase$NonStandardPhase;

        text := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = virtualinvoke text.<java.lang.String: java.lang.String toLowerCase()>();

        $r0 = (sortpom.wrapper.content.Phase$NonStandardPhase) this;

        $r0.<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String text> = $stack2;

        return;
    }

    public java.lang.String getText()
    {
        Phase$NonStandardPhase this;
        java.lang.String $stack1;
        sortpom.wrapper.content.Phase$NonStandardPhase $r0;

        this := @this: Phase$NonStandardPhase;

        $r0 = (sortpom.wrapper.content.Phase$NonStandardPhase) this;

        $stack1 = $r0.<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String text>;

        return $stack1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack2, $stack4, $stack5, $stack6, $u0;
        Phase$NonStandardPhase this;
        java.lang.String $stack3, $stack7;
        sortpom.wrapper.content.Phase$NonStandardPhase $r0;

        this := @this: Phase$NonStandardPhase;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NonStandardPhase{text=\'");

        $r0 = (sortpom.wrapper.content.Phase$NonStandardPhase) this;

        $stack3 = $r0.<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String text>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }
}
