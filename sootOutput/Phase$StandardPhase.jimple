public final enum class Phase$StandardPhase extends java.lang.Enum implements sortpom.wrapper.content.Phase
{
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PRE_CLEAN;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase CLEAN;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase POST_CLEAN;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase VALIDATE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase INITIALIZE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase GENERATE_SOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PROCESS_SOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase GENERATE_RESOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PROCESS_RESOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase COMPILE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PROCESS_CLASSES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase GENERATE_TEST_SOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_SOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase GENERATE_TEST_RESOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_RESOURCES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase TEST_COMPILE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_CLASSES;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase TEST;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PREPARE_PACKAGE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PACKAGE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PRE_INTEGRATION_TEST;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase INTEGRATION_TEST;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase POST_INTEGRATION_TEST;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase VERIFY;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase INSTALL;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase DEPLOY;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase PRE_SITE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase SITE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase POST_SITE;
    public static final enum sortpom.wrapper.content.Phase$StandardPhase SITE_DEPLOY;
    private final java.lang.String text;
    private static final sortpom.wrapper.content.Phase$StandardPhase[] $VALUES;

    public static sortpom.wrapper.content.Phase$StandardPhase[] values()
    {
        sortpom.wrapper.content.Phase$StandardPhase[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (sortpom.wrapper.content.Phase$StandardPhase[]) $stack1;

        return $stack2;
    }

    public static sortpom.wrapper.content.Phase$StandardPhase valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        sortpom.wrapper.content.Phase$StandardPhase $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lsortpom/wrapper/content/Phase$StandardPhase;", name);

        $stack2 = (sortpom.wrapper.content.Phase$StandardPhase) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        Phase$StandardPhase this;
        java.lang.String l1, text;
        int l2;
        sortpom.wrapper.content.Phase$StandardPhase $r0;

        this := @this: Phase$StandardPhase;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        text := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        $r0 = (sortpom.wrapper.content.Phase$StandardPhase) this;

        $r0.<sortpom.wrapper.content.Phase$StandardPhase: java.lang.String text> = text;

        return;
    }

    static java.util.Optional getPhase(java.lang.String)
    {
        java.lang.String phase;
        java.util.Optional $stack1, $stack11;
        boolean $stack2;
        sortpom.wrapper.content.Phase$StandardPhase[] $stack3;
        java.util.stream.Stream $stack4, $stack6, $stack10;
        java.util.function.Predicate $stack5;
        java.util.function.Function $stack9;

        phase := @parameter0: java.lang.String;

        if phase == null goto label1;

        $stack2 = virtualinvoke phase.<java.lang.String: boolean isEmpty()>();

        if $stack2 == 0 goto label2;

     label1:
        $stack1 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $stack1;

     label2:
        $stack3 = staticinvoke <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>();

        $stack4 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($stack3);

        $stack5 = staticinvoke <Phase$StandardPhase$lambda_getPhase_0__309: java.util.function.Predicate bootstrap$(java.lang.String)>(phase);

        $stack6 = interfaceinvoke $stack4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack5);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(class "Lsortpom/wrapper/content/Phase;");

        $stack9 = staticinvoke <Phase$StandardPhase$cast__310: java.util.function.Function bootstrap$(java.lang.Class)>(class "Lsortpom/wrapper/content/Phase;");

        $stack10 = interfaceinvoke $stack6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack9);

        $stack11 = interfaceinvoke $stack10.<java.util.stream.Stream: java.util.Optional findFirst()>();

        return $stack11;
    }

    public java.lang.String getText()
    {
        Phase$StandardPhase this;
        java.lang.String $stack1;
        sortpom.wrapper.content.Phase$StandardPhase $r0;

        this := @this: Phase$StandardPhase;

        $r0 = (sortpom.wrapper.content.Phase$StandardPhase) this;

        $stack1 = $r0.<sortpom.wrapper.content.Phase$StandardPhase: java.lang.String text>;

        return $stack1;
    }

    private static boolean lambda$getPhase$0(java.lang.String, sortpom.wrapper.content.Phase$StandardPhase)
    {
        java.lang.String phase, $stack2;
        sortpom.wrapper.content.Phase$StandardPhase p;
        boolean $stack3;

        phase := @parameter0: java.lang.String;

        p := @parameter1: sortpom.wrapper.content.Phase$StandardPhase;

        $stack2 = p.<sortpom.wrapper.content.Phase$StandardPhase: java.lang.String text>;

        $stack3 = virtualinvoke phase.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack2);

        return $stack3;
    }

    static void <clinit>()
    {
        sortpom.wrapper.content.Phase$StandardPhase $stack0, $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack60;
        sortpom.wrapper.content.Phase$StandardPhase[] $stack30;

        $stack0 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack0.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PRE_CLEAN", 0, "pre-clean");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PRE_CLEAN> = $stack0;

        $stack1 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack1.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("CLEAN", 1, "clean");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase CLEAN> = $stack1;

        $stack2 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack2.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("POST_CLEAN", 2, "post-clean");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase POST_CLEAN> = $stack2;

        $stack3 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack3.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("VALIDATE", 3, "validate");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase VALIDATE> = $stack3;

        $stack4 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack4.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("INITIALIZE", 4, "initialize");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase INITIALIZE> = $stack4;

        $stack5 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack5.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("GENERATE_SOURCES", 5, "generate-sources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_SOURCES> = $stack5;

        $stack6 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack6.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PROCESS_SOURCES", 6, "process-sources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_SOURCES> = $stack6;

        $stack7 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack7.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("GENERATE_RESOURCES", 7, "generate-resources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_RESOURCES> = $stack7;

        $stack8 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack8.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PROCESS_RESOURCES", 8, "process-resources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_RESOURCES> = $stack8;

        $stack9 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack9.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("COMPILE", 9, "compile");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase COMPILE> = $stack9;

        $stack10 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack10.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PROCESS_CLASSES", 10, "process-classes");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_CLASSES> = $stack10;

        $stack11 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack11.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("GENERATE_TEST_SOURCES", 11, "generate-test-sources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_TEST_SOURCES> = $stack11;

        $stack12 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack12.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PROCESS_TEST_SOURCES", 12, "process-test-sources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_SOURCES> = $stack12;

        $stack13 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack13.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("GENERATE_TEST_RESOURCES", 13, "generate-test-resources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_TEST_RESOURCES> = $stack13;

        $stack14 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack14.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PROCESS_TEST_RESOURCES", 14, "process-test-resources");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_RESOURCES> = $stack14;

        $stack15 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack15.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("TEST_COMPILE", 15, "test-compile");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase TEST_COMPILE> = $stack15;

        $stack16 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack16.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PROCESS_TEST_CLASSES", 16, "process-test-classes");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_CLASSES> = $stack16;

        $stack17 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack17.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("TEST", 17, "test");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase TEST> = $stack17;

        $stack18 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack18.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PREPARE_PACKAGE", 18, "prepare-package");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PREPARE_PACKAGE> = $stack18;

        $stack19 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack19.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PACKAGE", 19, "package");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PACKAGE> = $stack19;

        $stack20 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack20.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PRE_INTEGRATION_TEST", 20, "pre-integration-test");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PRE_INTEGRATION_TEST> = $stack20;

        $stack21 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack21.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("INTEGRATION_TEST", 21, "integration-test");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase INTEGRATION_TEST> = $stack21;

        $stack22 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack22.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("POST_INTEGRATION_TEST", 22, "post-integration-test");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase POST_INTEGRATION_TEST> = $stack22;

        $stack23 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack23.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("VERIFY", 23, "verify");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase VERIFY> = $stack23;

        $stack24 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack24.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("INSTALL", 24, "install");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase INSTALL> = $stack24;

        $stack25 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack25.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("DEPLOY", 25, "deploy");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase DEPLOY> = $stack25;

        $stack26 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack26.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("PRE_SITE", 26, "pre-site");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PRE_SITE> = $stack26;

        $stack27 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack27.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("SITE", 27, "site");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase SITE> = $stack27;

        $stack28 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack28.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("POST_SITE", 28, "post-site");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase POST_SITE> = $stack28;

        $stack29 = new sortpom.wrapper.content.Phase$StandardPhase;

        specialinvoke $stack29.<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>("SITE_DEPLOY", 29, "site-deploy");

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase SITE_DEPLOY> = $stack29;

        $stack30 = newarray (sortpom.wrapper.content.Phase$StandardPhase)[30];

        $stack31 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PRE_CLEAN>;

        $stack30[0] = $stack31;

        $stack32 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase CLEAN>;

        $stack30[1] = $stack32;

        $stack33 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase POST_CLEAN>;

        $stack30[2] = $stack33;

        $stack34 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase VALIDATE>;

        $stack30[3] = $stack34;

        $stack35 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase INITIALIZE>;

        $stack30[4] = $stack35;

        $stack36 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_SOURCES>;

        $stack30[5] = $stack36;

        $stack37 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_SOURCES>;

        $stack30[6] = $stack37;

        $stack38 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_RESOURCES>;

        $stack30[7] = $stack38;

        $stack39 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_RESOURCES>;

        $stack30[8] = $stack39;

        $stack40 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase COMPILE>;

        $stack30[9] = $stack40;

        $stack41 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_CLASSES>;

        $stack30[10] = $stack41;

        $stack42 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_TEST_SOURCES>;

        $stack30[11] = $stack42;

        $stack43 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_SOURCES>;

        $stack30[12] = $stack43;

        $stack44 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase GENERATE_TEST_RESOURCES>;

        $stack30[13] = $stack44;

        $stack45 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_RESOURCES>;

        $stack30[14] = $stack45;

        $stack46 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase TEST_COMPILE>;

        $stack30[15] = $stack46;

        $stack47 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PROCESS_TEST_CLASSES>;

        $stack30[16] = $stack47;

        $stack48 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase TEST>;

        $stack30[17] = $stack48;

        $stack49 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PREPARE_PACKAGE>;

        $stack30[18] = $stack49;

        $stack50 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PACKAGE>;

        $stack30[19] = $stack50;

        $stack51 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PRE_INTEGRATION_TEST>;

        $stack30[20] = $stack51;

        $stack52 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase INTEGRATION_TEST>;

        $stack30[21] = $stack52;

        $stack53 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase POST_INTEGRATION_TEST>;

        $stack30[22] = $stack53;

        $stack54 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase VERIFY>;

        $stack30[23] = $stack54;

        $stack55 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase INSTALL>;

        $stack30[24] = $stack55;

        $stack56 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase DEPLOY>;

        $stack30[25] = $stack56;

        $stack57 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase PRE_SITE>;

        $stack30[26] = $stack57;

        $stack58 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase SITE>;

        $stack30[27] = $stack58;

        $stack59 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase POST_SITE>;

        $stack30[28] = $stack59;

        $stack60 = <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase SITE_DEPLOY>;

        $stack30[29] = $stack60;

        <sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] $VALUES> = $stack30;

        return;
    }
}
