public class PhaseRecorderTest extends java.lang.Object
{

    public void <init>()
    {
        PhaseRecorderTest this;

        this := @this: PhaseRecorderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testObserveExecution() throws java.lang.Exception
    {
        org.apache.maven.lifecycle.internal.PhaseRecorder $stack6;
        org.apache.maven.project.MavenProject $stack7, $stack12, $stack15;
        org.apache.maven.lifecycle.MavenExecutionPlan plan;
        java.util.List executions;
        java.lang.Object $stack10, $stack11;
        org.apache.maven.plugin.MojoExecution mojoExecution1, mojoExecution2;
        java.lang.String $stack13, $stack16;
        boolean $stack14, $stack17, $stack18, $stack19;
        PhaseRecorderTest this;

        this := @this: PhaseRecorderTest;

        $stack6 = new org.apache.maven.lifecycle.internal.PhaseRecorder;

        $stack7 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        specialinvoke $stack6.<org.apache.maven.lifecycle.internal.PhaseRecorder: void <init>(org.apache.maven.project.MavenProject)>($stack7);

        plan = staticinvoke <org.apache.maven.lifecycle.internal.stub.LifecycleExecutionPlanCalculatorStub: org.apache.maven.lifecycle.MavenExecutionPlan getProjectAExceutionPlan()>();

        executions = virtualinvoke plan.<org.apache.maven.lifecycle.MavenExecutionPlan: java.util.List getMojoExecutions()>();

        $stack10 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(0);

        mojoExecution1 = (org.apache.maven.plugin.MojoExecution) $stack10;

        $stack11 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(1);

        mojoExecution2 = (org.apache.maven.plugin.MojoExecution) $stack11;

        virtualinvoke $stack6.<org.apache.maven.lifecycle.internal.PhaseRecorder: void observeExecution(org.apache.maven.plugin.MojoExecution)>(mojoExecution1);

        $stack12 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        $stack13 = virtualinvoke mojoExecution1.<org.apache.maven.plugin.MojoExecution: java.lang.String getLifecyclePhase()>();

        $stack14 = virtualinvoke $stack12.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>($stack13);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        $stack15 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        $stack16 = virtualinvoke mojoExecution2.<org.apache.maven.plugin.MojoExecution: java.lang.String getLifecyclePhase()>();

        $stack17 = virtualinvoke $stack15.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>($stack16);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack17);

        $stack18 = virtualinvoke $stack6.<org.apache.maven.lifecycle.internal.PhaseRecorder: boolean isDifferentPhase(org.apache.maven.plugin.MojoExecution)>(mojoExecution1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack18);

        $stack19 = virtualinvoke $stack6.<org.apache.maven.lifecycle.internal.PhaseRecorder: boolean isDifferentPhase(org.apache.maven.plugin.MojoExecution)>(mojoExecution2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack19);

        return;
    }
}
