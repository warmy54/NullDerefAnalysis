class PhaseTest extends java.lang.Object
{

    void <init>()
    {
        PhaseTest this;

        this := @this: PhaseTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void compareStandardPhasesAndOtherPhases()
    {
        sortpom.wrapper.content.Phase[] $stack4;
        sortpom.wrapper.content.Phase $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack28, $stack32, $stack36, $stack40, $stack44, $stack48, $stack52, $stack55;
        java.util.List list;
        java.util.Comparator $stack22;
        int $stack23, i#2, i#3;
        java.lang.Integer $stack24, $stack25;
        org.hamcrest.Matcher $stack26, $stack30, $stack34, $stack38, $stack42, $stack46, $stack50, $stack54, $stack57;
        java.lang.String $stack29, $stack33, $stack37, $stack41, $stack45, $stack49, $stack53, $stack56;
        PhaseTest this;

        this := @this: PhaseTest;

        $stack4 = newarray (sortpom.wrapper.content.Phase)[8];

        $stack6 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("a");

        $stack4[0] = $stack6;

        $stack8 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("teST");

        $stack4[1] = $stack8;

        $stack10 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("site");

        $stack4[2] = $stack10;

        $stack12 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("c");

        $stack4[3] = $stack12;

        $stack14 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("B");

        $stack4[4] = $stack14;

        $stack16 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("01");

        $stack4[5] = $stack16;

        $stack18 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("clea");

        $stack4[6] = $stack18;

        $stack20 = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("");

        $stack4[7] = $stack20;

        list = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>(list);

        $stack22 = staticinvoke <PhaseTest$compareTo__309: java.util.Comparator bootstrap$()>();

        interfaceinvoke list.<java.util.List: void sort(java.util.Comparator)>($stack22);

        $stack23 = lengthof $stack4;

        $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23);

        $stack25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $stack26 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack25);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack24, $stack26);

        i#2 = 0 + 1;

        $stack28 = $stack4[0];

        $stack29 = interfaceinvoke $stack28.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack30 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("test");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack29, $stack30);

        i#3 = i#2 + 1;

        $stack32 = $stack4[i#2];

        $stack33 = interfaceinvoke $stack32.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack34 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("site");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack33, $stack34);

        i#2 = i#3 + 1;

        $stack36 = $stack4[i#3];

        $stack37 = interfaceinvoke $stack36.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack38 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack37, $stack38);

        i#3 = i#2 + 1;

        $stack40 = $stack4[i#2];

        $stack41 = interfaceinvoke $stack40.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack42 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("01");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack41, $stack42);

        i#2 = i#3 + 1;

        $stack44 = $stack4[i#3];

        $stack45 = interfaceinvoke $stack44.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack46 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("a");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack45, $stack46);

        i#3 = i#2 + 1;

        $stack48 = $stack4[i#2];

        $stack49 = interfaceinvoke $stack48.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack50 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("b");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack49, $stack50);

        i#2 = i#3 + 1;

        $stack52 = $stack4[i#3];

        $stack53 = interfaceinvoke $stack52.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack54 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("c");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack53, $stack54);

        $stack55 = $stack4[i#2];

        $stack56 = interfaceinvoke $stack55.<sortpom.wrapper.content.Phase: java.lang.String getText()>();

        $stack57 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("clea");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack56, $stack57);

        return;
    }

    void toStringForPhase()
    {
        sortpom.wrapper.content.Phase test, clea;
        java.lang.String $stack5, $stack7;
        org.hamcrest.Matcher $stack6, $stack8;
        PhaseTest this;

        this := @this: PhaseTest;

        test = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("teST");

        clea = staticinvoke <sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>("clea");

        $stack5 = virtualinvoke test.<java.lang.Object: java.lang.String toString()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TEST");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        $stack7 = virtualinvoke clea.<java.lang.Object: java.lang.String toString()>();

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("NonStandardPhase{text=\'clea\'}");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack8);

        return;
    }
}
