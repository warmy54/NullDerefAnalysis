class PluginDependencyResolutionListener extends java.lang.Object implements org.apache.maven.artifact.resolver.ResolutionListener
{
    private org.apache.maven.artifact.resolver.filter.ArtifactFilter coreFilter;
    private java.util.LinkedList coreArtifacts;
    private org.apache.maven.artifact.Artifact wagonProvider;
    private java.util.Map bannedArtifacts;

    void <init>(org.apache.maven.artifact.resolver.filter.ArtifactFilter)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter coreFilter;
        java.util.LinkedList $u0;
        java.util.IdentityHashMap $u1;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0, $r1, $r2;

        this := @this: PluginDependencyResolutionListener;

        coreFilter := @parameter0: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.LinkedList;

        specialinvoke $u0.<java.util.LinkedList: void <init>()>();

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.LinkedList coreArtifacts> = $u0;

        $u1 = new java.util.IdentityHashMap;

        specialinvoke $u1.<java.util.IdentityHashMap: void <init>()>();

        $r1 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $r1.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.Map bannedArtifacts> = $u1;

        $r2 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $r2.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.resolver.filter.ArtifactFilter coreFilter> = coreFilter;

        return;
    }

    public void removeBannedDependencies(java.util.Collection)
    {
        PluginDependencyResolutionListener this;
        java.util.Map $stack2;
        boolean $stack3;
        java.util.Collection artifacts;
        java.util.function.Predicate $stack4;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0, $r1;

        this := @this: PluginDependencyResolutionListener;

        artifacts := @parameter0: java.util.Collection;

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack2 = $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.Map bannedArtifacts>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        if artifacts == null goto label1;

        $r1 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack4 = staticinvoke <PluginDependencyResolutionListener$lambda_removeBannedDependencies_0__309: java.util.function.Predicate bootstrap$(org.apache.maven.plugin.internal.PluginDependencyResolutionListener)>($r1);

        interfaceinvoke artifacts.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>($stack4);

     label1:
        return;
    }

    public void startProcessChildren(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact $stack2, artifact;
        boolean $stack3, $stack5, $stack6;
        java.util.LinkedList $stack4, $stack9;
        java.util.Map $stack7;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack2 = $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.Artifact wagonProvider>;

        if $stack2 != null goto label2;

        $r1 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack3 = specialinvoke $r1.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: boolean isLegacyCoreArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        if $stack3 == 0 goto label1;

        $r2 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack9 = $r2.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.LinkedList coreArtifacts>;

        virtualinvoke $stack9.<java.util.LinkedList: void addFirst(java.lang.Object)>(artifact);

        goto label2;

     label1:
        $r3 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack4 = $r3.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.LinkedList coreArtifacts>;

        $stack5 = virtualinvoke $stack4.<java.util.LinkedList: boolean isEmpty()>();

        if $stack5 != 0 goto label2;

        $r4 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack6 = specialinvoke $r4.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: boolean isWagonProvider(org.apache.maven.artifact.Artifact)>(artifact);

        if $stack6 == 0 goto label2;

        $r5 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $r5.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.Artifact wagonProvider> = artifact;

        $r6 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack7 = $r6.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.Map bannedArtifacts>;

        interfaceinvoke $stack7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(artifact, null);

     label2:
        return;
    }

    private boolean isLegacyCoreArtifact(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String version;
        boolean $stack4, $stack7, $stack5;
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter $stack6;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        version = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        if version == null goto label1;

        $stack4 = virtualinvoke version.<java.lang.String: boolean startsWith(java.lang.String)>("2.");

        if $stack4 == 0 goto label1;

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack6 = $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.resolver.filter.ArtifactFilter coreFilter>;

        $stack7 = interfaceinvoke $stack6.<org.apache.maven.artifact.resolver.filter.ArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>(artifact);

        if $stack7 != 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        return $stack5;
    }

    public void endProcessChildren(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact, $stack2;
        java.util.LinkedList $stack3, $stack5;
        java.lang.Object $stack4;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0, $r1, $r2, $r3;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack2 = $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.Artifact wagonProvider>;

        if $stack2 != artifact goto label1;

        $r1 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $r1.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.Artifact wagonProvider> = null;

        goto label2;

     label1:
        $r2 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack3 = $r2.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.LinkedList coreArtifacts>;

        $stack4 = virtualinvoke $stack3.<java.util.LinkedList: java.lang.Object peek()>();

        if $stack4 != artifact goto label2;

        $r3 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack5 = $r3.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.LinkedList coreArtifacts>;

        virtualinvoke $stack5.<java.util.LinkedList: java.lang.Object removeFirst()>();

     label2:
        return;
    }

    public void includeArtifact(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact $stack2, artifact;
        java.util.Map $stack3;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0, $r1;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack2 = $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: org.apache.maven.artifact.Artifact wagonProvider>;

        if $stack2 == null goto label1;

        $r1 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack3 = $r1.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.Map bannedArtifacts>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(artifact, null);

     label1:
        return;
    }

    private boolean isWagonProvider(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack2, $stack3, $stack5;
        boolean $stack4, $stack6;
        PluginDependencyResolutionListener this;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $stack2 = "org.apache.maven.wagon";

        $stack3 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>($stack3);

        if $stack4 == 0 goto label1;

        $stack5 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean startsWith(java.lang.String)>("wagon-");

        return $stack6;

     label1:
        return 0;
    }

    public void manageArtifact(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact, replacement;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        replacement := @parameter1: org.apache.maven.artifact.Artifact;

        return;
    }

    public void omitForCycle(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        return;
    }

    public void omitForNearer(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact omitted, kept;

        this := @this: PluginDependencyResolutionListener;

        omitted := @parameter0: org.apache.maven.artifact.Artifact;

        kept := @parameter1: org.apache.maven.artifact.Artifact;

        return;
    }

    public void restrictRange(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.Artifact, org.apache.maven.artifact.versioning.VersionRange)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact, replacement;
        org.apache.maven.artifact.versioning.VersionRange newRange;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        replacement := @parameter1: org.apache.maven.artifact.Artifact;

        newRange := @parameter2: org.apache.maven.artifact.versioning.VersionRange;

        return;
    }

    public void selectVersionFromRange(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        return;
    }

    public void testArtifact(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact node;

        this := @this: PluginDependencyResolutionListener;

        node := @parameter0: org.apache.maven.artifact.Artifact;

        return;
    }

    public void updateScope(org.apache.maven.artifact.Artifact, java.lang.String)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String scope;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        scope := @parameter1: java.lang.String;

        return;
    }

    public void updateScopeCurrentPom(org.apache.maven.artifact.Artifact, java.lang.String)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String ignoredScope;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        ignoredScope := @parameter1: java.lang.String;

        return;
    }

    private boolean lambda$removeBannedDependencies$0(org.apache.maven.artifact.Artifact)
    {
        PluginDependencyResolutionListener this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.Map $stack2;
        boolean $stack3;
        org.apache.maven.plugin.internal.PluginDependencyResolutionListener $r0;

        this := @this: PluginDependencyResolutionListener;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.plugin.internal.PluginDependencyResolutionListener) this;

        $stack2 = $r0.<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: java.util.Map bannedArtifacts>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(artifact);

        return $stack3;
    }
}
