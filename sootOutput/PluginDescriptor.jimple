public class PluginDescriptor extends org.codehaus.plexus.component.repository.ComponentSetDescriptor implements java.lang.Cloneable
{
    private static final java.lang.String LIFECYCLE_DESCRIPTOR;
    private java.lang.String groupId;
    private java.lang.String artifactId;
    private java.lang.String version;
    private java.lang.String goalPrefix;
    private java.lang.String source;
    private boolean inheritedByDefault;
    private java.util.List artifacts;
    private org.codehaus.plexus.classworlds.realm.ClassRealm classRealm;
    private java.util.Map artifactMap;
    private java.util.Set introducedDependencyArtifacts;
    private java.lang.String name;
    private java.lang.String description;
    private java.lang.String requiredMavenVersion;
    private org.apache.maven.model.Plugin plugin;
    private org.apache.maven.artifact.Artifact pluginArtifact;
    private java.util.Map lifecycleMappings;

    public void <init>()
    {
        PluginDescriptor this;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        specialinvoke this.<org.codehaus.plexus.component.repository.ComponentSetDescriptor: void <init>()>();

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: boolean inheritedByDefault> = 1;

        return;
    }

    public java.util.List getMojos()
    {
        PluginDescriptor this;
        java.util.List $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        return $stack1;
    }

    public void addMojo(org.apache.maven.plugin.descriptor.MojoDescriptor) throws org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException
    {
        PluginDescriptor this;
        java.util.List mojos;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor, existing;
        java.lang.String $stack7, $stack8, $stack9, $stack10;
        boolean $stack11;
        int indexOf;
        java.lang.Object $stack14;
        org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException $u0;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1, $r3;
        java.lang.Throwable $r2;
        org.codehaus.plexus.component.repository.ComponentDescriptor $r4;

        this := @this: PluginDescriptor;

        mojoDescriptor := @parameter0: org.apache.maven.plugin.descriptor.MojoDescriptor;

        existing = null;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        mojos = virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getMojos()>();

        if mojos == null goto label1;

        $stack11 = interfaceinvoke mojos.<java.util.List: boolean contains(java.lang.Object)>(mojoDescriptor);

        if $stack11 == 0 goto label1;

        indexOf = interfaceinvoke mojos.<java.util.List: int indexOf(java.lang.Object)>(mojoDescriptor);

        $stack14 = interfaceinvoke mojos.<java.util.List: java.lang.Object get(int)>(indexOf);

        existing = (org.apache.maven.plugin.descriptor.MojoDescriptor) $stack14;

     label1:
        if existing == null goto label2;

        $u0 = new org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack7 = virtualinvoke $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getGoalPrefix()>();

        $stack8 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getGoal()>();

        $stack9 = virtualinvoke existing.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getImplementation()>();

        $stack10 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getImplementation()>();

        specialinvoke $u0.<org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($stack7, $stack8, $stack9, $stack10);

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label2:
        $r3 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r4 = (org.codehaus.plexus.component.repository.ComponentDescriptor) mojoDescriptor;

        virtualinvoke $r3.<org.apache.maven.plugin.descriptor.PluginDescriptor: void addComponentDescriptor(org.codehaus.plexus.component.repository.ComponentDescriptor)>($r4);

        return;
    }

    public java.lang.String getGroupId()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String groupId>;

        return $stack1;
    }

    public void setGroupId(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String groupId;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        groupId := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String groupId> = groupId;

        return;
    }

    public java.lang.String getArtifactId()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String artifactId>;

        return $stack1;
    }

    public void setArtifactId(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String artifactId;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        artifactId := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String artifactId> = artifactId;

        return;
    }

    public static java.lang.String constructPluginKey(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        java.lang.String groupId, artifactId, version, $stack9;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(groupId);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(artifactId);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    public java.lang.String getPluginLookupKey()
    {
        PluginDescriptor this;
        java.lang.String $stack2, $stack5, $stack7;
        java.lang.StringBuilder $stack3, $stack4, $stack6, $u0;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1;

        this := @this: PluginDescriptor;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack2 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String groupId>;

        $stack3 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack5 = $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String artifactId>;

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    public java.lang.String getId()
    {
        PluginDescriptor this;
        java.lang.String $stack1, $stack2, $stack3, $stack4;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1, $r2;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack3 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String groupId>;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack2 = $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String artifactId>;

        $r2 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r2.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String version>;

        $stack4 = staticinvoke <org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String constructPluginKey(java.lang.String,java.lang.String,java.lang.String)>($stack3, $stack2, $stack1);

        return $stack4;
    }

    public static java.lang.String getDefaultPluginArtifactId(java.lang.String)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        java.lang.String id, $stack5;

        id := @parameter0: java.lang.String;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maven-");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(id);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-plugin");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String getDefaultPluginGroupId()
    {
        return "org.apache.maven.plugins";
    }

    public static java.lang.String getGoalPrefixFromArtifactId(java.lang.String)
    {
        java.lang.String artifactId, $stack1, $stack3, $stack4;
        boolean $stack2;

        artifactId := @parameter0: java.lang.String;

        $stack1 = "maven-plugin-plugin";

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>(artifactId);

        if $stack2 == 0 goto label1;

        return "plugin";

     label1:
        $stack3 = virtualinvoke artifactId.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-?maven-?", "");

        $stack4 = virtualinvoke $stack3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-?plugin-?", "");

        return $stack4;
    }

    public java.lang.String getGoalPrefix()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String goalPrefix>;

        return $stack1;
    }

    public void setGoalPrefix(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String goalPrefix;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        goalPrefix := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String goalPrefix> = goalPrefix;

        return;
    }

    public void setVersion(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String version;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        version := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String version> = version;

        return;
    }

    public java.lang.String getVersion()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String version>;

        return $stack1;
    }

    public void setSource(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String source;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        source := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String source> = source;

        return;
    }

    public java.lang.String getSource()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String source>;

        return $stack1;
    }

    public boolean isInheritedByDefault()
    {
        PluginDescriptor this;
        boolean $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: boolean inheritedByDefault>;

        return $stack1;
    }

    public void setInheritedByDefault(boolean)
    {
        PluginDescriptor this;
        boolean inheritedByDefault;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        inheritedByDefault := @parameter0: boolean;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: boolean inheritedByDefault> = inheritedByDefault;

        return;
    }

    public java.util.List getArtifacts()
    {
        PluginDescriptor this;
        java.util.List $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List artifacts>;

        return $stack1;
    }

    public void setArtifacts(java.util.List)
    {
        PluginDescriptor this;
        java.util.List artifacts;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1;

        this := @this: PluginDescriptor;

        artifacts := @parameter0: java.util.List;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List artifacts> = artifacts;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map artifactMap> = null;

        return;
    }

    public java.util.Map getArtifactMap()
    {
        PluginDescriptor this;
        java.util.Map $stack1, $stack2, $stack4;
        java.util.List $stack3;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1, $r2, $r3;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map artifactMap>;

        if $stack1 != null goto label1;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack3 = virtualinvoke $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getArtifacts()>();

        $stack4 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.util.Map artifactMapByVersionlessId(java.util.Collection)>($stack3);

        $r2 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r2.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map artifactMap> = $stack4;

     label1:
        $r3 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack2 = $r3.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map artifactMap>;

        return $stack2;
    }

    public boolean equals(java.lang.Object)
    {
        PluginDescriptor this;
        java.lang.Object object;
        boolean $stack2, $stack6, $stack7;
        java.lang.String $stack3, $stack5;
        org.apache.maven.plugin.descriptor.PluginDescriptor $stack4, $r0;

        this := @this: PluginDescriptor;

        object := @parameter0: java.lang.Object;

        if this != object goto label1;

        return 1;

     label1:
        $stack2 = object instanceof org.apache.maven.plugin.descriptor.PluginDescriptor;

        if $stack2 == 0 goto label2;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack4 = (org.apache.maven.plugin.descriptor.PluginDescriptor) object;

        $stack5 = virtualinvoke $stack4.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack6 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        $stack7 = 1;

        goto label3;

     label2:
        $stack7 = 0;

     label3:
        return $stack7;
    }

    public int hashCode()
    {
        PluginDescriptor this;
        java.lang.String $stack2;
        int $stack3, $stack4;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: int hashCode()>();

        $stack4 = 10 + $stack3;

        return $stack4;
    }

    public org.apache.maven.plugin.descriptor.MojoDescriptor getMojo(java.lang.String)
    {
        PluginDescriptor this;
        java.util.List $stack4, $stack5;
        java.util.Iterator l2;
        boolean $stack7, $stack10;
        java.lang.Object $stack8;
        org.apache.maven.plugin.descriptor.MojoDescriptor desc;
        java.lang.String goal, $stack9;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1;

        this := @this: PluginDescriptor;

        goal := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getMojos()>();

        if $stack4 != null goto label1;

        return null;

     label1:
        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack5 = virtualinvoke $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getMojos()>();

        l2 = interfaceinvoke $stack5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label4;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        desc = (org.apache.maven.plugin.descriptor.MojoDescriptor) $stack8;

        $stack9 = virtualinvoke desc.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getGoal()>();

        $stack10 = virtualinvoke goal.<java.lang.String: boolean equals(java.lang.Object)>($stack9);

        if $stack10 == 0 goto label3;

        return desc;

     label3:
        goto label2;

     label4:
        return null;
    }

    public void setClassRealm(org.codehaus.plexus.classworlds.realm.ClassRealm)
    {
        PluginDescriptor this;
        org.codehaus.plexus.classworlds.realm.ClassRealm classRealm;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        classRealm := @parameter0: org.codehaus.plexus.classworlds.realm.ClassRealm;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm classRealm> = classRealm;

        return;
    }

    public org.codehaus.plexus.classworlds.realm.ClassRealm getClassRealm()
    {
        PluginDescriptor this;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm classRealm>;

        return $stack1;
    }

    public void setIntroducedDependencyArtifacts(java.util.Set)
    {
        PluginDescriptor this;
        java.util.Set introducedDependencyArtifacts;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        introducedDependencyArtifacts := @parameter0: java.util.Set;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Set introducedDependencyArtifacts> = introducedDependencyArtifacts;

        return;
    }

    public java.util.Set getIntroducedDependencyArtifacts()
    {
        PluginDescriptor this;
        java.util.Set $stack1, $stack2;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Set introducedDependencyArtifacts>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack2 = $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Set introducedDependencyArtifacts>;

        goto label2;

     label1:
        $stack2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label2:
        return $stack2;
    }

    public void setName(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String name;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        name := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String name> = name;

        return;
    }

    public java.lang.String getName()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String name>;

        return $stack1;
    }

    public void setDescription(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String description;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        description := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String description> = description;

        return;
    }

    public java.lang.String getDescription()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String description>;

        return $stack1;
    }

    public void setRequiredMavenVersion(java.lang.String)
    {
        PluginDescriptor this;
        java.lang.String requiredMavenVersion;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        requiredMavenVersion := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String requiredMavenVersion> = requiredMavenVersion;

        return;
    }

    public java.lang.String getRequiredMavenVersion()
    {
        PluginDescriptor this;
        java.lang.String $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String requiredMavenVersion>;

        return $stack1;
    }

    public void setPlugin(org.apache.maven.model.Plugin)
    {
        PluginDescriptor this;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        plugin := @parameter0: org.apache.maven.model.Plugin;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.model.Plugin plugin> = plugin;

        return;
    }

    public org.apache.maven.model.Plugin getPlugin()
    {
        PluginDescriptor this;
        org.apache.maven.model.Plugin $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.model.Plugin plugin>;

        return $stack1;
    }

    public org.apache.maven.artifact.Artifact getPluginArtifact()
    {
        PluginDescriptor this;
        org.apache.maven.artifact.Artifact $stack1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.artifact.Artifact pluginArtifact>;

        return $stack1;
    }

    public void setPluginArtifact(org.apache.maven.artifact.Artifact)
    {
        PluginDescriptor this;
        org.apache.maven.artifact.Artifact pluginArtifact;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        pluginArtifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.artifact.Artifact pluginArtifact> = pluginArtifact;

        return;
    }

    public org.apache.maven.plugin.lifecycle.Lifecycle getLifecycleMapping(java.lang.String) throws java.io.IOException, org.codehaus.plexus.util.xml.pull.XmlPullParserException
    {
        PluginDescriptor this;
        java.util.Map $stack6, $stack7, $stack21;
        java.lang.String lifecycleId, $stack22;
        java.lang.Object $stack8, $stack20;
        org.apache.maven.plugin.lifecycle.Lifecycle $stack9, lifecycle#10;
        java.io.InputStream $stack10;
        org.apache.maven.plugin.lifecycle.LifecycleConfiguration lifecycleConfiguration;
        java.util.List $stack15;
        java.lang.Throwable $stack27, $stack28;
        org.codehaus.plexus.util.xml.XmlStreamReader reader;
        java.util.Iterator reader#5;
        boolean $stack17;
        org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader $u0;
        java.util.HashMap $u1;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1, $r5, $r6, $r7;
        java.io.Reader $r2, $r3, $r4;

        this := @this: PluginDescriptor;

        lifecycleId := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack6 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map lifecycleMappings>;

        if $stack6 != null goto label10;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack10 = specialinvoke $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.io.InputStream getDescriptorStream(java.lang.String)>("META-INF/maven/lifecycle.xml");

        reader = staticinvoke <org.codehaus.plexus.util.ReaderFactory: org.codehaus.plexus.util.xml.XmlStreamReader newXmlReader(java.io.InputStream)>($stack10);

     label01:
        $u0 = new org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader;

        specialinvoke $u0.<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: void <init>()>();

        $r2 = (java.io.Reader) reader;

        lifecycleConfiguration = virtualinvoke $u0.<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.LifecycleConfiguration read(java.io.Reader)>($r2);

     label02:
        if reader == null goto label08;

        $r3 = (java.io.Reader) reader;

        virtualinvoke $r3.<java.io.Reader: void close()>();

        goto label08;

     label03:
        $stack28 := @caughtexception;

        if reader == null goto label07;

     label04:
        $r4 = (java.io.Reader) reader;

        virtualinvoke $r4.<java.io.Reader: void close()>();

     label05:
        goto label07;

     label06:
        $stack27 := @caughtexception;

        virtualinvoke $stack28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack27);

     label07:
        throw $stack28;

     label08:
        $u1 = new java.util.HashMap;

        specialinvoke $u1.<java.util.HashMap: void <init>()>();

        $r5 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $r5.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map lifecycleMappings> = $u1;

        $stack15 = virtualinvoke lifecycleConfiguration.<org.apache.maven.plugin.lifecycle.LifecycleConfiguration: java.util.List getLifecycles()>();

        reader#5 = interfaceinvoke $stack15.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $stack17 = interfaceinvoke reader#5.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label10;

        $stack20 = interfaceinvoke reader#5.<java.util.Iterator: java.lang.Object next()>();

        lifecycle#10 = (org.apache.maven.plugin.lifecycle.Lifecycle) $stack20;

        $r6 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack21 = $r6.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map lifecycleMappings>;

        $stack22 = virtualinvoke lifecycle#10.<org.apache.maven.plugin.lifecycle.Lifecycle: java.lang.String getId()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack22, lifecycle#10);

        goto label09;

     label10:
        $r7 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack7 = $r7.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.Map lifecycleMappings>;

        $stack8 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object get(java.lang.Object)>(lifecycleId);

        $stack9 = (org.apache.maven.plugin.lifecycle.Lifecycle) $stack8;

        return $stack9;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label06;
    }

    private java.io.InputStream getDescriptorStream(java.lang.String) throws java.io.IOException
    {
        PluginDescriptor this;
        org.apache.maven.artifact.Artifact $stack4, $stack23;
        boolean $stack5;
        java.lang.String descriptor, $stack15, $stack20, $stack22;
        java.lang.StringBuilder $stack10, $stack12, $stack13, $stack14, $stack19, $stack21, $u0, $u2;
        java.net.URI $stack11;
        java.io.InputStream $stack16;
        java.net.MalformedURLException $stack26;
        java.io.File $stack24, $u5;
        java.lang.IllegalStateException $u1, $u4;
        java.net.URL $u3;
        java.io.FileInputStream $u6;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0, $r1, $r2;

        this := @this: PluginDescriptor;

        descriptor := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack4 = $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.artifact.Artifact pluginArtifact>;

        if $stack4 == null goto label1;

        $r1 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack23 = $r1.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.artifact.Artifact pluginArtifact>;

        $stack24 = interfaceinvoke $stack23.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        goto label2;

     label1:
        $stack24 = null;

     label2:
        if $stack24 != null goto label3;

        $u1 = new java.lang.IllegalStateException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("plugin main artifact has not been resolved for ");

        $r2 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack20 = virtualinvoke $r2.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getId()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack22);

        throw $u1;

     label3:
        $stack5 = virtualinvoke $stack24.<java.io.File: boolean isFile()>();

        if $stack5 == 0 goto label7;

     label4:
        $u3 = new java.net.URL;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar:");

        $stack11 = virtualinvoke $stack24.<java.io.File: java.net.URI toURI()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(descriptor);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<java.net.URL: void <init>(java.lang.String)>($stack15);

        $stack16 = virtualinvoke $u3.<java.net.URL: java.io.InputStream openStream()>();

     label5:
        return $stack16;

     label6:
        $stack26 := @caughtexception;

        $u4 = new java.lang.IllegalStateException;

        specialinvoke $u4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($stack26);

        throw $u4;

     label7:
        $u6 = new java.io.FileInputStream;

        $u5 = new java.io.File;

        specialinvoke $u5.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack24, descriptor);

        specialinvoke $u6.<java.io.FileInputStream: void <init>(java.io.File)>($u5);

        return $u6;

        catch java.net.MalformedURLException from label4 to label5 with label6;
    }

    public org.apache.maven.plugin.descriptor.PluginDescriptor clone()
    {
        PluginDescriptor this;
        java.lang.Object $stack2;
        org.apache.maven.plugin.descriptor.PluginDescriptor $stack3;
        java.lang.CloneNotSupportedException $stack4;
        java.lang.UnsupportedOperationException $stack5;

        this := @this: PluginDescriptor;

     label1:
        $stack2 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        $stack3 = (org.apache.maven.plugin.descriptor.PluginDescriptor) $stack2;

     label2:
        return $stack3;

     label3:
        $stack4 := @caughtexception;

        $stack5 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack5.<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>($stack4);

        throw $stack5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void addMojos(java.util.List) throws org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException
    {
        java.util.List mojos;
        java.util.Iterator l2;
        boolean $stack5;
        java.lang.Object $stack6;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        PluginDescriptor this;
        org.apache.maven.plugin.descriptor.PluginDescriptor $r0;

        this := @this: PluginDescriptor;

        mojos := @parameter0: java.util.List;

        l2 = interfaceinvoke mojos.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        mojoDescriptor = (org.apache.maven.plugin.descriptor.MojoDescriptor) $stack6;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: void addMojo(org.apache.maven.plugin.descriptor.MojoDescriptor)>(mojoDescriptor);

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        PluginDescriptor this;
        org.apache.maven.plugin.descriptor.PluginDescriptor $stack1, $r0;

        this := @this: PluginDescriptor;

        $r0 = (org.apache.maven.plugin.descriptor.PluginDescriptor) this;

        $stack1 = virtualinvoke $r0.<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <PluginDescriptor: java.lang.String LIFECYCLE_DESCRIPTOR> = "META-INF/maven/lifecycle.xml";

        return;
    }
}
