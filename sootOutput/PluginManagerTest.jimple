public class PluginManagerTest extends org.apache.maven.AbstractCoreMavenComponentTestCase
{
    private org.apache.maven.plugin.DefaultBuildPluginManager pluginManager;

    public void <init>()
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        specialinvoke this.<org.apache.maven.AbstractCoreMavenComponentTestCase: void <init>()>();

        return;
    }

    protected java.lang.String getProjectsDirectory()
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return "src/test/projects/plugin-manager";
    }

    public void testPluginLoading() throws java.lang.Exception
    {
        PluginManagerTest this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.plugin.DefaultBuildPluginManager $stack6;
        org.apache.maven.project.MavenProject $stack7;
        java.util.List $stack8;
        org.eclipse.aether.RepositorySystemSession $stack9;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.apache.maven.model.Plugin $u0;
        org.apache.maven.plugin.PluginManagerTest $r0, $r1;

        this := @this: PluginManagerTest;

        $r0 = (org.apache.maven.plugin.PluginManagerTest) this;

        session = virtualinvoke $r0.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u0 = new org.apache.maven.model.Plugin;

        specialinvoke $u0.<org.apache.maven.model.Plugin: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setGroupId(java.lang.String)>("org.apache.maven.its.plugins");

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setArtifactId(java.lang.String)>("maven-it-plugin");

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>("0.1");

        $r1 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack6 = $r1.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        $stack7 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack9 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        pluginDescriptor = virtualinvoke $stack6.<org.apache.maven.plugin.DefaultBuildPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor loadPlugin(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>($u0, $stack8, $stack9);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(pluginDescriptor);

        return;
    }

    public void testMojoDescriptorRetrieval() throws java.lang.Exception
    {
        PluginManagerTest this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.plugin.DefaultBuildPluginManager $stack8;
        org.apache.maven.project.MavenProject $stack9;
        java.util.List $stack10;
        org.eclipse.aether.RepositorySystemSession $stack11;
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        java.lang.String $stack13, $stack16, $stack18, $stack20;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.apache.maven.model.Plugin $u0;
        org.apache.maven.plugin.PluginManagerTest $r0, $r1;

        this := @this: PluginManagerTest;

        $r0 = (org.apache.maven.plugin.PluginManagerTest) this;

        session = virtualinvoke $r0.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u0 = new org.apache.maven.model.Plugin;

        specialinvoke $u0.<org.apache.maven.model.Plugin: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setGroupId(java.lang.String)>("org.apache.maven.its.plugins");

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setArtifactId(java.lang.String)>("maven-it-plugin");

        virtualinvoke $u0.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>("0.1");

        $r1 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack8 = $r1.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        $stack9 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack10 = virtualinvoke $stack9.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack11 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        mojoDescriptor = virtualinvoke $stack8.<org.apache.maven.plugin.DefaultBuildPluginManager: org.apache.maven.plugin.descriptor.MojoDescriptor getMojoDescriptor(org.apache.maven.model.Plugin,java.lang.String,java.util.List,org.eclipse.aether.RepositorySystemSession)>($u0, "it", $stack10, $stack11);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(mojoDescriptor);

        $stack13 = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getGoal()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("it", $stack13);

        pluginDescriptor = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(pluginDescriptor);

        $stack16 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getGroupId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.plugins", $stack16);

        $stack18 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin", $stack18);

        $stack20 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.1", $stack20);

        return;
    }

    public void testRemoteResourcesPlugin() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testSurefirePlugin() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testMojoConfigurationIsMergedCorrectly() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testMojoWhereInternallyStatedDependencyIsOverriddenByProject() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testMojoThatIsPresentInTheCurrentBuild() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testAggregatorMojo() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testMojoThatRequiresExecutionToAGivenPhaseBeforeExecutingItself() throws java.lang.Exception
    {
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        return;
    }

    public void testThatPluginDependencyThatHasSystemScopeIsResolved() throws java.lang.Exception
    {
        PluginManagerTest this;
        java.io.File $stack9;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project, $stack19;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.artifact.repository.ArtifactRepository $stack14;
        java.util.List $stack16, $stack20, artifacts;
        org.apache.maven.plugin.DefaultBuildPluginManager $stack18, $stack23;
        org.eclipse.aether.RepositorySystemSession $stack21;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.util.Iterator l7;
        boolean $stack27, $stack31, $stack34;
        java.lang.Object $stack29;
        org.apache.maven.artifact.Artifact a;
        java.lang.String $stack30, $stack33;
        org.apache.maven.artifact.repository.DefaultRepositoryRequest $u0;
        org.apache.maven.plugin.PluginManagerTest $r0, $r1, $r2, $r4, $r6, $r7;
        org.apache.maven.artifact.repository.RepositoryRequest $r3, $r5;

        this := @this: PluginManagerTest;

        $r0 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack9 = virtualinvoke $r0.<org.apache.maven.plugin.PluginManagerTest: java.io.File getProject(java.lang.String)>("project-contributing-system-scope-plugin-dep");

        $r1 = (org.apache.maven.plugin.PluginManagerTest) this;

        session = virtualinvoke $r1.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>($stack9);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        plugin = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Plugin getPlugin(java.lang.String)>("org.apache.maven.its.plugins:maven-it-plugin");

        $u0 = new org.apache.maven.artifact.repository.DefaultRepositoryRequest;

        specialinvoke $u0.<org.apache.maven.artifact.repository.DefaultRepositoryRequest: void <init>()>();

        $r2 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack14 = virtualinvoke $r2.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $r3 = (org.apache.maven.artifact.repository.RepositoryRequest) $u0;

        interfaceinvoke $r3.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack14);

        $r4 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack16 = virtualinvoke $r4.<org.apache.maven.plugin.PluginManagerTest: java.util.List getPluginArtifactRepositories()>();

        $r5 = (org.apache.maven.artifact.repository.RepositoryRequest) $u0;

        interfaceinvoke $r5.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setRemoteRepositories(java.util.List)>($stack16);

        $r6 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack18 = $r6.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        $stack19 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack20 = virtualinvoke $stack19.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack21 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        pluginDescriptor = virtualinvoke $stack18.<org.apache.maven.plugin.DefaultBuildPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor loadPlugin(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, $stack20, $stack21);

        $r7 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack23 = $r7.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        virtualinvoke $stack23.<org.apache.maven.plugin.DefaultBuildPluginManager: org.codehaus.plexus.classworlds.realm.ClassRealm getPluginRealm(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.descriptor.PluginDescriptor)>(session, pluginDescriptor);

        artifacts = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getArtifacts()>();

        l7 = interfaceinvoke artifacts.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack27 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack27 == 0 goto label3;

        $stack29 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack29;

        $stack30 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack31 = virtualinvoke $stack30.<java.lang.String: boolean equals(java.lang.Object)>("org.apache.maven.its.mng3586");

        if $stack31 == 0 goto label2;

        $stack33 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack34 = virtualinvoke $stack33.<java.lang.String: boolean equals(java.lang.Object)>("tools");

        if $stack34 == 0 goto label2;

        return;

     label2:
        goto label1;

     label3:
        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Object fail(java.lang.String)>("Can\'t find the system scoped dependency in the plugin artifacts.");

        return;
    }

    protected void assertPluginDescriptor(org.apache.maven.plugin.descriptor.MojoDescriptor, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor;
        org.apache.maven.plugin.descriptor.PluginDescriptor pd;
        java.lang.String groupId, $stack7, artifactId, $stack8, version, $stack9;
        PluginManagerTest this;

        this := @this: PluginManagerTest;

        mojoDescriptor := @parameter0: org.apache.maven.plugin.descriptor.MojoDescriptor;

        groupId := @parameter1: java.lang.String;

        artifactId := @parameter2: java.lang.String;

        version := @parameter3: java.lang.String;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(mojoDescriptor);

        pd = virtualinvoke mojoDescriptor.<org.apache.maven.plugin.descriptor.MojoDescriptor: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(pd);

        $stack7 = virtualinvoke pd.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getGroupId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(groupId, $stack7);

        $stack8 = virtualinvoke pd.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(artifactId, $stack8);

        $stack9 = virtualinvoke pd.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(version, $stack9);

        return;
    }

    public void testPluginRealmCache() throws java.lang.Exception
    {
        PluginManagerTest this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack9;
        java.util.List $stack11, $stack19, $stack25, $stack27, $stack36, $stack42, $stack44;
        java.io.File $stack13, $stack30;
        org.apache.maven.plugin.DefaultBuildPluginManager $stack17, $stack22, $stack34, $stack39;
        org.apache.maven.project.MavenProject $stack18, $stack35, project;
        org.eclipse.aether.RepositorySystemSession $stack20, $stack37;
        int $stack26, $stack43;
        boolean $stack29, $stack46;
        java.lang.Object $stack47, $stack51;
        org.codehaus.plexus.classworlds.realm.ClassRealm $stack48, $stack52;
        java.lang.Class $stack49, $stack53;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        java.util.Iterator l6;
        org.codehaus.plexus.component.repository.ComponentDescriptor descriptor;
        org.apache.maven.artifact.repository.DefaultRepositoryRequest $u0;
        org.apache.maven.plugin.PluginManagerTest $r0, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.apache.maven.artifact.repository.RepositoryRequest $r1, $r3;

        this := @this: PluginManagerTest;

        $u0 = new org.apache.maven.artifact.repository.DefaultRepositoryRequest;

        specialinvoke $u0.<org.apache.maven.artifact.repository.DefaultRepositoryRequest: void <init>()>();

        $r0 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack9 = virtualinvoke $r0.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $r1 = (org.apache.maven.artifact.repository.RepositoryRequest) $u0;

        interfaceinvoke $r1.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack9);

        $r2 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack11 = virtualinvoke $r2.<org.apache.maven.plugin.PluginManagerTest: java.util.List getPluginArtifactRepositories()>();

        $r3 = (org.apache.maven.artifact.repository.RepositoryRequest) $u0;

        interfaceinvoke $r3.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setRemoteRepositories(java.util.List)>($stack11);

        $r4 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack13 = virtualinvoke $r4.<org.apache.maven.plugin.PluginManagerTest: java.io.File getProject(java.lang.String)>("project-contributing-system-scope-plugin-dep");

        $r5 = (org.apache.maven.plugin.PluginManagerTest) this;

        session = virtualinvoke $r5.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>($stack13);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        plugin = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Plugin getPlugin(java.lang.String)>("org.apache.maven.its.plugins:maven-it-plugin");

        $r6 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack17 = $r6.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        $stack18 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack19 = virtualinvoke $stack18.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack20 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        pluginDescriptor = virtualinvoke $stack17.<org.apache.maven.plugin.DefaultBuildPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor loadPlugin(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, $stack19, $stack20);

        $r7 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack22 = $r7.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        virtualinvoke $stack22.<org.apache.maven.plugin.DefaultBuildPluginManager: org.codehaus.plexus.classworlds.realm.ClassRealm getPluginRealm(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.descriptor.PluginDescriptor)>(session, pluginDescriptor);

        $stack25 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getDependencies()>();

        $stack26 = interfaceinvoke $stack25.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack26);

        $stack27 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        l6 = interfaceinvoke $stack27.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack29 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack29 == 0 goto label2;

        $stack51 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        descriptor = (org.codehaus.plexus.component.repository.ComponentDescriptor) $stack51;

        $stack52 = virtualinvoke descriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm getRealm()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack52);

        $stack53 = virtualinvoke descriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: java.lang.Class getImplementationClass()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack53);

        goto label1;

     label2:
        $r8 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack30 = virtualinvoke $r8.<org.apache.maven.plugin.PluginManagerTest: java.io.File getProject(java.lang.String)>("project-contributing-system-scope-plugin-dep");

        $r9 = (org.apache.maven.plugin.PluginManagerTest) this;

        session = virtualinvoke $r9.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>($stack30);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        plugin = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Plugin getPlugin(java.lang.String)>("org.apache.maven.its.plugins:maven-it-plugin");

        $r10 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack34 = $r10.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        $stack35 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack36 = virtualinvoke $stack35.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack37 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        pluginDescriptor = virtualinvoke $stack34.<org.apache.maven.plugin.DefaultBuildPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor loadPlugin(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, $stack36, $stack37);

        $r11 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack39 = $r11.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        virtualinvoke $stack39.<org.apache.maven.plugin.DefaultBuildPluginManager: org.codehaus.plexus.classworlds.realm.ClassRealm getPluginRealm(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.descriptor.PluginDescriptor)>(session, pluginDescriptor);

        $stack42 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getDependencies()>();

        $stack43 = interfaceinvoke $stack42.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack43);

        $stack44 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        l6 = interfaceinvoke $stack44.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack46 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack46 == 0 goto label4;

        $stack47 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        descriptor = (org.codehaus.plexus.component.repository.ComponentDescriptor) $stack47;

        $stack48 = virtualinvoke descriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm getRealm()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack48);

        $stack49 = virtualinvoke descriptor.<org.codehaus.plexus.component.repository.ComponentDescriptor: java.lang.Class getImplementationClass()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack49);

        goto label3;

     label4:
        return;
    }

    public void testBuildExtensionsPluginLoading() throws java.lang.Exception
    {
        PluginManagerTest this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack8;
        java.util.List $stack10, $stack18, $stack23;
        java.io.File $stack12;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project, $stack17;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.plugin.DefaultBuildPluginManager $stack16, $stack21;
        org.eclipse.aether.RepositorySystemSession $stack19;
        org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;
        org.codehaus.plexus.classworlds.realm.ClassRealm pluginRealm, $stack26;
        java.lang.Object $stack24;
        org.codehaus.plexus.component.repository.ComponentDescriptor $stack25;
        org.apache.maven.artifact.repository.DefaultRepositoryRequest $u0;
        org.apache.maven.plugin.PluginManagerTest $r0, $r2, $r4, $r5, $r6, $r7;
        org.apache.maven.artifact.repository.RepositoryRequest $r1, $r3;

        this := @this: PluginManagerTest;

        $u0 = new org.apache.maven.artifact.repository.DefaultRepositoryRequest;

        specialinvoke $u0.<org.apache.maven.artifact.repository.DefaultRepositoryRequest: void <init>()>();

        $r0 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack8 = virtualinvoke $r0.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $r1 = (org.apache.maven.artifact.repository.RepositoryRequest) $u0;

        interfaceinvoke $r1.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack8);

        $r2 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack10 = virtualinvoke $r2.<org.apache.maven.plugin.PluginManagerTest: java.util.List getPluginArtifactRepositories()>();

        $r3 = (org.apache.maven.artifact.repository.RepositoryRequest) $u0;

        interfaceinvoke $r3.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.RepositoryRequest setRemoteRepositories(java.util.List)>($stack10);

        $r4 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack12 = virtualinvoke $r4.<org.apache.maven.plugin.PluginManagerTest: java.io.File getProject(java.lang.String)>("project-with-build-extensions-plugin");

        $r5 = (org.apache.maven.plugin.PluginManagerTest) this;

        session = virtualinvoke $r5.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>($stack12);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        plugin = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Plugin getPlugin(java.lang.String)>("org.apache.maven.its.plugins:maven-it-plugin");

        $r6 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack16 = $r6.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        $stack17 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack18 = virtualinvoke $stack17.<org.apache.maven.project.MavenProject: java.util.List getRemotePluginRepositories()>();

        $stack19 = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        pluginDescriptor = virtualinvoke $stack16.<org.apache.maven.plugin.DefaultBuildPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor loadPlugin(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>(plugin, $stack18, $stack19);

        $r7 = (org.apache.maven.plugin.PluginManagerTest) this;

        $stack21 = $r7.<org.apache.maven.plugin.PluginManagerTest: org.apache.maven.plugin.DefaultBuildPluginManager pluginManager>;

        pluginRealm = virtualinvoke $stack21.<org.apache.maven.plugin.DefaultBuildPluginManager: org.codehaus.plexus.classworlds.realm.ClassRealm getPluginRealm(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.descriptor.PluginDescriptor)>(session, pluginDescriptor);

        $stack23 = virtualinvoke pluginDescriptor.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.util.List getComponents()>();

        $stack24 = interfaceinvoke $stack23.<java.util.List: java.lang.Object get(int)>(0);

        $stack25 = (org.codehaus.plexus.component.repository.ComponentDescriptor) $stack24;

        $stack26 = virtualinvoke $stack25.<org.codehaus.plexus.component.repository.ComponentDescriptor: org.codehaus.plexus.classworlds.realm.ClassRealm getRealm()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(pluginRealm, $stack26);

        return;
    }
}
