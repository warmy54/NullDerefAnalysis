public class PomConstructionTest extends java.lang.Object
{
    private static java.lang.String BASE_DIR;
    private static java.lang.String BASE_POM_DIR;
    private static java.lang.String BASE_MIXIN_DIR;
    private org.apache.maven.project.DefaultProjectBuilder projectBuilder;
    private org.apache.maven.repository.RepositorySystem repositorySystem;
    private java.io.File testDirectory;

    public void <init>()
    {
        PomConstructionTest this;

        this := @this: PomConstructionTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String $stack2, $stack3, $stack5, $stack6;
        java.io.File $u0, $u1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $u0 = new java.io.File;

        $stack2 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        $stack3 = <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_POM_DIR>;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack2, $stack3);

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $r0.<org.apache.maven.project.PomConstructionTest: java.io.File testDirectory> = $u0;

        $u1 = new java.io.File;

        $stack5 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        $stack6 = <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_MIXIN_DIR>;

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack5, $stack6);

        return;
    }

    public void testEmptyUrl() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("empty-distMng-repo-url", $stack1);

        return;
    }

    public void testProfileModules() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack8;
        int $stack9;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "a";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-module", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties[1]/b");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test-prop", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules");

        $stack8 = (java.util.List) $stack7;

        $stack9 = interfaceinvoke $stack8.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("module-2", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("module-1", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("module-3", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("module-4", $stack17);

        return;
    }

    public void testParentInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("parent-inheritance/sub", $stack1);

        return;
    }

    public void testExecutionConfigurationJoin() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("execution-configuration-join", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/fileset[1]");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        return;
    }

    public void testPluginConfigProperties() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-properties", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration[1]/systemProperties[1]/property[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("my.property", $stack5);

        return;
    }

    public void testProfilePropertiesInterpolation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "interpolation-profile";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-properties-interpolation", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties[1]/test");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties[1]/property");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack7);

        return;
    }

    public void testThatExecutionsWithoutIdsAreMergedAndTheChildWins() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper tester;
        org.apache.maven.project.PomConstructionTest $r0, $r1;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        tester = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("micromailer", $stack2);

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        virtualinvoke $r1.<org.apache.maven.project.PomConstructionTest: void assertModelEquals(org.apache.maven.project.harness.PomTestWrapper,java.lang.Object,java.lang.String)>(tester, "child-descriptor", "build/plugins[1]/executions[1]/goals[1]");

        return;
    }

    public void testDuplicateExclusionsDependency() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("duplicate-exclusions-dependency/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/exclusions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        return;
    }

    public void testMultipleFilters() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("multiple-filters", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        return;
    }

    public void testDuplicateDependenciesCauseLastDeclarationToBePickedInLenientMode() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,boolean,java.util.Properties,java.lang.String[])>("unique-dependency-key/deps", 1, null, $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.2", $stack9);

        return;
    }

    public void testParentInterpolation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.MavenProject $stack5, $stack6;
        java.lang.Object $stack8;
        org.apache.maven.project.harness.PomTestWrapper pom, $u0;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("parent-interpolation/sub", $stack2);

        $u0 = new org.apache.maven.project.harness.PomTestWrapper;

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject getMavenProject()>();

        $stack6 = virtualinvoke $stack5.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject getParent()>();

        specialinvoke $u0.<org.apache.maven.project.harness.PomTestWrapper: void <init>(org.apache.maven.project.MavenProject)>($stack6);

        $stack8 = virtualinvoke $u0.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.3.0-SNAPSHOT", $stack8);

        return;
    }

    public void testPluginManagementInherited() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("pluginmanagement-inherited/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0-alpha-21", $stack5);

        return;
    }

    public void testPluginManagementDependencies() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "test";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-management-dependencies/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0-alpha-21", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack7);

        return;
    }

    public void testReportingInterpolation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2, $stack4;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.String $stack6, $stack8;
        java.util.List $stack7;
        java.lang.Object $stack9;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("reporting-interpolation", $stack2);

        $stack4 = newarray (java.lang.String)[7];

        $stack6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $stack4[0] = $stack6;

        $stack4[1] = "src";

        $stack4[2] = "test";

        $stack4[3] = "resources-project-builder";

        $stack4[4] = "reporting-interpolation";

        $stack4[5] = "target";

        $stack4[6] = "site";

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack8 = staticinvoke <org.apache.maven.project.PomConstructionTest: java.lang.String createPath(java.util.List)>($stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/outputDirectory");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        return;
    }

    public void testPluginOrder() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-order", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("plexus-component-metadata", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-surefire-plugin", $stack7);

        return;
    }

    public void testErroneousJoiningOfDifferentPluginsWithEqualDependencies() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack11, $stack13;
        java.util.List $stack8, $stack14;
        int $stack9, $stack15;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("equal-plugin-deps", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-a", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies");

        $stack8 = (java.util.List) $stack7;

        $stack9 = interfaceinvoke $stack8.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-b", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies");

        $stack14 = (java.util.List) $stack13;

        $stack15 = interfaceinvoke $stack14.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack15);

        return;
    }

    public void testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack11, $stack13, $stack17, $stack19, $stack23, $stack25;
        java.util.List $stack8, $stack14, $stack20, $stack26;
        int $stack9, $stack15, $stack21, $stack27;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("equal-plugin-exec-ids", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-a", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack8 = (java.util.List) $stack7;

        $stack9 = interfaceinvoke $stack8.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-b", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack14 = (java.util.List) $stack13;

        $stack15 = interfaceinvoke $stack14.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-a", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets");

        $stack20 = (java.util.List) $stack19;

        $stack21 = interfaceinvoke $stack20.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-b", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets");

        $stack26 = (java.util.List) $stack25;

        $stack27 = interfaceinvoke $stack26.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack27);

        return;
    }

    public void testExecutionConfiguration() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("execution-configuration", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/model");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src/main/mdo/nexus.xml", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/configuration[1]/model");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src/main/mdo/security.xml", $stack11);

        return;
    }

    public void testSingleConfigurationInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("single-configuration-inheritance", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/rules");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/rules[1]/requireMavenVersion[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.0.6", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/rules[1]/requireJavaVersion[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("[1.4,)", $stack11);

        return;
    }

    public void testConfigWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("config-with-plugin-mng", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/configuration[1]/model");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src/main/mdo/security.xml", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0.8", $stack11);

        return;
    }

    public void testExecutionConfigurationSubcollections() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("execution-configuration-subcollections", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration[1]/rules[1]/bannedDependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        return;
    }

    public void testMultipleRepositories() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("multiple-repos/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(3, $stack7);

        return;
    }

    public void testMultipleExecutionIds() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dual-execution-ids/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        return;
    }

    public void testConsecutiveEmptyElements() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("consecutive_empty_elements", $stack1);

        return;
    }

    public void testOrderOfGoalsFromPluginExecutionWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-goals-order/wo-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[5]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack17);

        return;
    }

    public void testOrderOfGoalsFromPluginExecutionWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-goals-order/w-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[5]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack17);

        return;
    }

    public void testOrderOfPluginExecutionsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-order/wo-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[3]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[4]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[5]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack17);

        return;
    }

    public void testOrderOfPluginExecutionsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-order/w-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[3]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[4]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[5]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack17);

        return;
    }

    public void testMergeOfPluginExecutionsWhenChildInheritsPluginVersion() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-merging-wo-version/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        return;
    }

    public void testMergeOfPluginExecutionsWhenChildAndParentUseDifferentPluginVersions() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-merging-version-insensitive/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        return;
    }

    public void testInterpolationWithXmlMarkup() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("xml-markup-interpolation", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/xmlTest");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("<?xml version=\'1.0\'?>Tom&Jerry", $stack5);

        return;
    }

    public void testOrderOfMergedPluginExecutionsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-plugin-exec-order/wo-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-1", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-2", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[3]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-default", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[4]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-1", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[5]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-2", $stack17);

        return;
    }

    public void testOrderOfMergedPluginExecutionsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-plugin-exec-order/w-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-1", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-2", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[3]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-default", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[4]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-1", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[5]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-2", $stack17);

        return;
    }

    public void testDifferentContainersWithSameId() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6, $stack10;
        int $stack7, $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("join-different-containers-same-id", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/pluginManagement/plugins[@artifactId=\'maven-it-plugin-b\']/executions[1]/goals");

        $stack10 = (java.util.List) $stack9;

        $stack11 = interfaceinvoke $stack10.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack11);

        return;
    }

    public void testOrderOfMergedPluginExecutionGoalsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-plugin-exec-goals-order/wo-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-a", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("merged", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-b", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-b", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[5]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-a", $stack17);

        return;
    }

    public void testOrderOfMergedPluginExecutionGoalsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-plugin-exec-goals-order/w-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-a", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("merged", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-b", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-b", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[5]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-a", $stack17);

        return;
    }

    public void testOverridingOfInheritedPluginExecutionsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-merging/wo-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[@id=\'default\']/phase");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-default", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[@id=\'non-default\']/phase");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-non-default", $stack11);

        return;
    }

    public void testOverridingOfInheritedPluginExecutionsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-merging/w-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[@id=\'default\']/phase");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-default", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[@id=\'non-default\']/phase");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-non-default", $stack11);

        return;
    }

    public void testOrderOfMergedPluginDependenciesWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-plugin-class-path-order/wo-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack8);

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack10);

        $stack12 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack12);

        $stack14 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack14);

        $stack16 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[2]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2", $stack16);

        $stack18 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack18);

        $stack20 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[3]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack20);

        $stack22 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[4]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack22);

        $stack24 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[4]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack24);

        $stack26 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[5]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack26);

        $stack28 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[5]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack28);

        return;
    }

    public void testOrderOfMergedPluginDependenciesWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-plugin-class-path-order/w-plugin-mgmt/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(5, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[2]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[3]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[4]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[4]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[5]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack25);

        $stack27 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[5]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack27);

        return;
    }

    public void testInterpolationOfNestedBuildDirectories() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.io.File $stack5, $stack10, $stack15, $u0, $u1, $u2, $u3, $u4, $u5;
        java.lang.Object $stack7, $stack12, $stack17;
        java.lang.String $stack8, $stack13, $stack18;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("nested-build-dir-interpolation", $stack2);

        $u0 = new java.io.File;

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack5, "target/classes/dir0");

        $u1 = new java.io.File;

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/dir0");

        $stack8 = (java.lang.String) $stack7;

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack8);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u0, $u1);

        $u2 = new java.io.File;

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u2.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack10, "src/test/dir1");

        $u3 = new java.io.File;

        $stack12 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/dir1");

        $stack13 = (java.lang.String) $stack12;

        specialinvoke $u3.<java.io.File: void <init>(java.lang.String)>($stack13);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u2, $u3);

        $u4 = new java.io.File;

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u4.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack15, "target/site/dir2");

        $u5 = new java.io.File;

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/dir2");

        $stack18 = (java.lang.String) $stack17;

        specialinvoke $u5.<java.io.File: void <init>(java.lang.String)>($stack18);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u4, $u5);

        return;
    }

    public void testAppendArtifactIdOfChildToInheritedUrls() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("url-inheritance/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/child", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("organization/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/org", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/license.txt", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/viewvc/child", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/connection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/scm/child", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/developerConnection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/scm/child", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("issueManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/issues", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/ci", $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/dist", $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/snaps", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/site/child", $stack25);

        $stack27 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/downloadUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/download", $stack27);

        return;
    }

    public void testAppendArtifactIdOfParentAndChildToInheritedUrls() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("url-inheritance/another-parent/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/ap/child", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("organization/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/org", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/license.txt", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/viewvc/ap/child", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/connection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/scm/ap/child", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/developerConnection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/scm/ap/child", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("issueManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/issues", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/ci", $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/dist", $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/snaps", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/site/ap/child", $stack25);

        $stack27 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/downloadUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://parent.url/download", $stack27);

        return;
    }

    public void testNonInheritedElementsInSubtreesOverriddenByChild() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35, $stack37;
        java.util.List $stack10;
        int $stack11;
        java.lang.Boolean $stack18, $stack28;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("limited-inheritance/child", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("organization/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("issueManagement/system");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers");

        $stack10 = (java.util.List) $stack9;

        $stack11 = interfaceinvoke $stack10.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-distros", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ssh://child.url/distros", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack17);

        $stack18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/uniqueVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/layout");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("default", $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-snaps", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ssh://child.url/snaps", $stack25);

        $stack27 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack27);

        $stack28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack29 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/uniqueVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack28, $stack29);

        $stack31 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/layout");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("default", $stack31);

        $stack33 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-site", $stack33);

        $stack35 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("scp://child.url/site", $stack35);

        $stack37 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack37);

        return;
    }

    public void testXmlTextCoalescing() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9;
        java.lang.String $stack10, $stack11, $stack12;
        int $stack13;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("xml-coalesce-text", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop0");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("A  Test  Project Property", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop1");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("That\'s a test!", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop2");

        $stack10 = virtualinvoke $stack9.<java.lang.Object: java.lang.String toString()>();

        $stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String trim()>();

        $stack12 = virtualinvoke $stack11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\n\r]", "");

        $stack13 = virtualinvoke $stack12.<java.lang.String: int length()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(32768, $stack13);

        return;
    }

    public void testFullInterpolationOfNestedExpressions() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack4;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.StringBuilder $stack7, $stack8, $stack12, $stack13, $u0, $u1;
        java.lang.String index, $stack14, $stack18;
        java.lang.Object $stack15;
        int i;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack4 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("full-interpolation", $stack4);

        i = 0;

     label1:
        if i >= 24 goto label4;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        if i >= 10 goto label2;

        $stack18 = "0";

        goto label3;

     label2:
        $stack18 = "";

     label3:
        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        index = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("properties/property");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(index);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack14);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack15);

        i = i + 1;

        goto label1;

     label4:
        return;
    }

    public void testInterpolationOfLegacyExpressionsThatDontIncludeTheProjectPrefix() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.io.File $stack4, $u0;
        java.lang.Object $stack6, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35, $stack37, $stack39, $stack41, $stack43, $stack45, $stack46, $stack49;
        java.lang.String $stack7, $stack47, $stack50;
        org.hamcrest.Matcher $stack48, $stack51;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("unprefixed-expression-interpolation/child", $stack2);

        $stack4 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        $u0 = new java.io.File;

        $stack6 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectDir");

        $stack7 = virtualinvoke $stack6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $u0);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectGroupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.mng3831.child", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectArtifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.0-alpha-1", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectPackaging");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectName");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-name", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectDesc");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-desc", $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://child.org/", $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectYear");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2008", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectOrgName");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-org-name", $stack25);

        $stack27 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectPrereqMvn");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.0.0", $stack27);

        $stack29 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectScmUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://scm.org/", $stack29);

        $stack31 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectIssueUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://issue.org/", $stack31);

        $stack33 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectCiUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://ci.org/", $stack33);

        $stack35 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectDistRepoName");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-dist-repo", $stack35);

        $stack37 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectDistRepoUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://dist.org/", $stack37);

        $stack39 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectDistSiteUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://site.org/", $stack39);

        $stack41 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/parentGroupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.mng3831", $stack41);

        $stack43 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/parentArtifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent", $stack43);

        $stack45 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/parentVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack45);

        $stack46 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectBuildOut");

        $stack47 = virtualinvoke $stack46.<java.lang.Object: java.lang.String toString()>();

        $stack48 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("bin");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack47, $stack48);

        $stack49 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/projectSiteOut");

        $stack50 = virtualinvoke $stack49.<java.lang.Object: java.lang.String toString()>();

        $stack51 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("doc");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack50, $stack51);

        return;
    }

    public void testInterpolationWithBasedirAlignedDirectories() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.io.File $stack5, $stack10, $stack15, $stack20, $stack25, $stack30, $stack35, $u0, $u1, $u2, $u3, $u4, $u5, $u6, $u7, $u8, $u9, $u10, $u11, $u12, $u13;
        java.lang.Object $stack7, $stack12, $stack17, $stack22, $stack27, $stack32, $stack37;
        java.lang.String $stack8, $stack13, $stack18, $stack23, $stack28, $stack33, $stack38;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("basedir-aligned-interpolation", $stack2);

        $u0 = new java.io.File;

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack5, "src/main/java");

        $u1 = new java.io.File;

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/buildMainSrc");

        $stack8 = virtualinvoke $stack7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack8);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u0, $u1);

        $u2 = new java.io.File;

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u2.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack10, "src/test/java");

        $u3 = new java.io.File;

        $stack12 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/buildTestSrc");

        $stack13 = virtualinvoke $stack12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u3.<java.io.File: void <init>(java.lang.String)>($stack13);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u2, $u3);

        $u4 = new java.io.File;

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u4.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack15, "src/main/scripts");

        $u5 = new java.io.File;

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/buildScriptSrc");

        $stack18 = virtualinvoke $stack17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u5.<java.io.File: void <init>(java.lang.String)>($stack18);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u4, $u5);

        $u6 = new java.io.File;

        $stack20 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u6.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack20, "target");

        $u7 = new java.io.File;

        $stack22 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/buildOut");

        $stack23 = virtualinvoke $stack22.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u7.<java.io.File: void <init>(java.lang.String)>($stack23);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u6, $u7);

        $u8 = new java.io.File;

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u8.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack25, "target/classes");

        $u9 = new java.io.File;

        $stack27 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/buildMainOut");

        $stack28 = virtualinvoke $stack27.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u9.<java.io.File: void <init>(java.lang.String)>($stack28);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u8, $u9);

        $u10 = new java.io.File;

        $stack30 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u10.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack30, "target/test-classes");

        $u11 = new java.io.File;

        $stack32 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/buildTestOut");

        $stack33 = virtualinvoke $stack32.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u11.<java.io.File: void <init>(java.lang.String)>($stack33);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u10, $u11);

        $u12 = new java.io.File;

        $stack35 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        specialinvoke $u12.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack35, "target/site");

        $u13 = new java.io.File;

        $stack37 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/siteOut");

        $stack38 = virtualinvoke $stack37.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u13.<java.io.File: void <init>(java.lang.String)>($stack38);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u12, $u13);

        return;
    }

    public void testInterpolationOfBasedirInPomWithUnusualName() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.io.File $stack4, $stack8, $u0, $u1;
        java.lang.Object $stack6, $stack10;
        java.lang.String $stack7, $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("basedir-interpolation/pom-with-unusual-name.xml", $stack2);

        $stack4 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        $u0 = new java.io.File;

        $stack6 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop0");

        $stack7 = virtualinvoke $stack6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $u0);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        $u1 = new java.io.File;

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop1");

        $stack11 = virtualinvoke $stack10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack11);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $u1);

        return;
    }

    public void testJoiningOfContainersWhenChildHasEmptyElements() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("id-container-joining-with-empty-elements/sub", $stack2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(pom);

        return;
    }

    public void testOrderOfPluginConfigurationElementsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-order/wo-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("one", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("two", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("three", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("four", $stack11);

        return;
    }

    public void testOrderOfPluginConfigurationElementsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-order/w-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("one", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("two", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("three", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/stringParams/stringParam[4]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("four", $stack11);

        return;
    }

    public void testOrderOfPluginExecutionConfigurationElementsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.StringBuilder $stack7, $stack8, $stack13, $stack14, $stack19, $stack20, $stack25, $stack26, $stack31, $stack32, $stack37, $stack38, $u0, $u1, $u2, $u3, $u4, $u5;
        java.lang.String $stack9, $stack15, $stack21, $stack27, $stack33, $stack39;
        java.lang.Object $stack10, $stack16, $stack22, $stack28, $stack34, $stack40;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-config-order/wo-plugin-mgmt", $stack3);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[1]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack9);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("one", $stack10);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[2]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack15);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("two", $stack16);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[3]");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack21);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("three", $stack22);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[4]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack27);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("four", $stack28);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack31 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("propertiesParam/property[1]/name");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack33);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("key1", $stack34);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("propertiesParam/property[2]/name");

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack40 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack39);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("key2", $stack40);

        return;
    }

    public void testOrderOfPluginExecutionConfigurationElementsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.StringBuilder $stack7, $stack8, $stack13, $stack14, $stack19, $stack20, $stack25, $stack26, $stack31, $stack32, $stack37, $stack38, $u0, $u1, $u2, $u3, $u4, $u5;
        java.lang.String $stack9, $stack15, $stack21, $stack27, $stack33, $stack39;
        java.lang.Object $stack10, $stack16, $stack22, $stack28, $stack34, $stack40;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-config-order/w-plugin-mgmt", $stack3);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[1]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack9);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("one", $stack10);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[2]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack15);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("two", $stack16);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[3]");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack21);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("three", $stack22);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[4]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack27);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("four", $stack28);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack31 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("propertiesParam/property[1]/name");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack33);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("key1", $stack34);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/executions[1]/configuration/");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("propertiesParam/property[2]/name");

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack40 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack39);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("key2", $stack40);

        return;
    }

    public void testMergeOfInheritedPluginConfiguration() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.StringBuilder $stack7, $stack8, $stack13, $stack14, $stack19, $stack20, $stack25, $stack26, $stack31, $stack32, $stack37, $stack38, $stack43, $stack44, $stack49, $stack50, $stack55, $stack56, $stack61, $stack62, $u0, $u1, $u2, $u3, $u4, $u5, $u6, $u7, $u8, $u9;
        java.lang.String $stack9, $stack15, $stack21, $stack27, $stack33, $stack39, $stack45, $stack51, $stack57, $stack63;
        java.lang.Object $stack10, $stack16, $stack22, $stack28, $stack34, $stack40, $stack46, $stack52, $stack58, $stack64;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-merging/child", $stack3);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("propertiesFile");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack9);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack10);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parent");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack15);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack16);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[1]");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack21);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-1", $stack22);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[2]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack27);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-3", $stack28);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack31 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[3]");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack33);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-2", $stack34);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[4]");

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack40 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack39);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-4", $stack40);

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack43 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[1]");

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack46 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack45);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-1", $stack46);

        $u7 = new java.lang.StringBuilder;

        specialinvoke $u7.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $u7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[2]");

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack52 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack51);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-3", $stack52);

        $u8 = new java.lang.StringBuilder;

        specialinvoke $u8.<java.lang.StringBuilder: void <init>()>();

        $stack55 = virtualinvoke $u8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[3]");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack58 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack57);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-2", $stack58);

        $u9 = new java.lang.StringBuilder;

        specialinvoke $u9.<java.lang.StringBuilder: void <init>()>();

        $stack61 = virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[4]");

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack64 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack63);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED-4", $stack64);

        return;
    }

    public void testAppendOfInheritedPluginConfigurationWithNoProfile() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: void testAppendOfInheritedPluginConfiguration(java.lang.String)>("no-profile");

        return;
    }

    public void testAppendOfInheritedPluginConfigurationWithActiveProfile() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: void testAppendOfInheritedPluginConfiguration(java.lang.String)>("with-profile");

        return;
    }

    private void testAppendOfInheritedPluginConfiguration(java.lang.String) throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack13, $stack14, $stack19, $stack20, $stack25, $stack26, $stack31, $stack32, $stack37, $stack38, $stack43, $stack44, $stack49, $stack50, $stack55, $stack56, $stack61, $stack62, $stack67, $stack68, $stack73, $stack74, $stack79, $stack80, $stack85, $stack86, $stack91, $stack92, $stack97, $stack98, $stack103, $stack104, $stack109, $stack110, $stack115, $stack116, $u0, $u1, $u2, $u3, $u4, $u5, $u6, $u7, $u8, $u9, $u10, $u11, $u12, $u13, $u14, $u15, $u16, $u17, $u18;
        java.lang.String test, $stack8, $stack15, $stack21, $stack27, $stack33, $stack39, $stack45, $stack51, $stack57, $stack63, $stack69, $stack75, $stack81, $stack87, $stack93, $stack99, $stack105, $stack111, $stack117;
        java.lang.String[] $stack9;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack16, $stack22, $stack28, $stack34, $stack40, $stack46, $stack52, $stack58, $stack64, $stack70, $stack76, $stack82, $stack88, $stack94, $stack100, $stack106, $stack112, $stack118;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        test := @parameter0: java.lang.String;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("plugin-config-append/");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(test);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/subproject");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>($stack8, $stack9);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[1]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack15);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-1", $stack16);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[2]");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack21);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-3", $stack22);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[3]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack27);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-2", $stack28);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack31 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[4]");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack33);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-4", $stack34);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[5]");

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack40 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack39);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-1", $stack40);

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack43 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[6]");

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack46 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack45);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-3", $stack46);

        $u7 = new java.lang.StringBuilder;

        specialinvoke $u7.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $u7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[7]");

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack52 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack51);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-2", $stack52);

        $u8 = new java.lang.StringBuilder;

        specialinvoke $u8.<java.lang.StringBuilder: void <init>()>();

        $stack55 = virtualinvoke $u8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[8]");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack58 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack57);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-4", $stack58);

        $u9 = new java.lang.StringBuilder;

        specialinvoke $u9.<java.lang.StringBuilder: void <init>()>();

        $stack61 = virtualinvoke $u9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringParams/stringParam[9]");

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack64 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack63);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack64);

        $u10 = new java.lang.StringBuilder;

        specialinvoke $u10.<java.lang.StringBuilder: void <init>()>();

        $stack67 = virtualinvoke $u10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[1]");

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack70 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack69);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-1", $stack70);

        $u11 = new java.lang.StringBuilder;

        specialinvoke $u11.<java.lang.StringBuilder: void <init>()>();

        $stack73 = virtualinvoke $u11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack74 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[2]");

        $stack75 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack76 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack75);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-3", $stack76);

        $u12 = new java.lang.StringBuilder;

        specialinvoke $u12.<java.lang.StringBuilder: void <init>()>();

        $stack79 = virtualinvoke $u12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[3]");

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack82 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack81);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-2", $stack82);

        $u13 = new java.lang.StringBuilder;

        specialinvoke $u13.<java.lang.StringBuilder: void <init>()>();

        $stack85 = virtualinvoke $u13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[4]");

        $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack88 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack87);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PARENT-4", $stack88);

        $u14 = new java.lang.StringBuilder;

        specialinvoke $u14.<java.lang.StringBuilder: void <init>()>();

        $stack91 = virtualinvoke $u14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[5]");

        $stack93 = virtualinvoke $stack92.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack94 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack93);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-1", $stack94);

        $u15 = new java.lang.StringBuilder;

        specialinvoke $u15.<java.lang.StringBuilder: void <init>()>();

        $stack97 = virtualinvoke $u15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack98 = virtualinvoke $stack97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[6]");

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack100 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack99);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-3", $stack100);

        $u16 = new java.lang.StringBuilder;

        specialinvoke $u16.<java.lang.StringBuilder: void <init>()>();

        $stack103 = virtualinvoke $u16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack104 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[7]");

        $stack105 = virtualinvoke $stack104.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack106 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack105);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-2", $stack106);

        $u17 = new java.lang.StringBuilder;

        specialinvoke $u17.<java.lang.StringBuilder: void <init>()>();

        $stack109 = virtualinvoke $u17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack110 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[8]");

        $stack111 = virtualinvoke $stack110.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack112 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack111);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD-4", $stack112);

        $u18 = new java.lang.StringBuilder;

        specialinvoke $u18.<java.lang.StringBuilder: void <init>()>();

        $stack115 = virtualinvoke $u18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("build/plugins[1]/configuration/");

        $stack116 = virtualinvoke $stack115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listParam/listParam[9]");

        $stack117 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack118 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>($stack117);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack118);

        return;
    }

    public void testMultiplePluginExecutionsWithAndWithoutIdsWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-w-and-wo-id/wo-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("log-string", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("log-string", $stack11);

        return;
    }

    public void testMultiplePluginExecutionsWithAndWithoutIdsWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-w-and-wo-id/w-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("log-string", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[2]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("log-string", $stack11);

        return;
    }

    public void testDependencyOrderWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dependency-order/wo-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[4]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack15);

        return;
    }

    public void testDependencyOrderWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dependency-order/w-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[4]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack15);

        return;
    }

    public void testBuildDirectoriesUsePlatformSpecificFileSeparator() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        org.apache.maven.project.PomConstructionTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("platform-file-separator", $stack2);

        $stack4 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/directory");

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r1.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack4);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/outputDirectory");

        $r2 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r2.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack5);

        $stack6 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testOutputDirectory");

        $r3 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r3.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack6);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/sourceDirectory");

        $r4 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r4.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testSourceDirectory");

        $r5 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r5.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack8);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/directory");

        $r6 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r6.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/directory");

        $r7 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r7.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack10);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[1]");

        $r8 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r8.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/outputDirectory");

        $r9 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r9.<org.apache.maven.project.PomConstructionTest: void assertPathWithNormalizedFileSeparators(java.lang.Object)>($stack12);

        return;
    }

    public void testMergedFilterOrder() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        java.util.List $stack6;
        int $stack7;
        java.lang.String $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27;
        org.hamcrest.Matcher $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("merged-filter-order/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(7, $stack7);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[1]");

        $stack9 = virtualinvoke $stack8.<java.lang.Object: java.lang.String toString()>();

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("child-a.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack9, $stack10);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[2]");

        $stack12 = virtualinvoke $stack11.<java.lang.Object: java.lang.String toString()>();

        $stack13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("child-c.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack13);

        $stack14 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[3]");

        $stack15 = virtualinvoke $stack14.<java.lang.Object: java.lang.String toString()>();

        $stack16 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("child-b.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack15, $stack16);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[4]");

        $stack18 = virtualinvoke $stack17.<java.lang.Object: java.lang.String toString()>();

        $stack19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("child-d.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack18, $stack19);

        $stack20 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[5]");

        $stack21 = virtualinvoke $stack20.<java.lang.Object: java.lang.String toString()>();

        $stack22 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("parent-c.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack21, $stack22);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[6]");

        $stack24 = virtualinvoke $stack23.<java.lang.Object: java.lang.String toString()>();

        $stack25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("parent-b.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack24, $stack25);

        $stack26 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[7]");

        $stack27 = virtualinvoke $stack26.<java.lang.Object: java.lang.String toString()>();

        $stack28 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("parent-d.properties");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack27, $stack28);

        return;
    }

    public void testProfileInjectedDependencies() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-injected-dependencies", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[4]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack15);

        return;
    }

    public void testProfileDependenciesMultipleProfiles() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[2];

        $stack2[0] = "profile-1";

        $stack2[1] = "profile-2";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-dependencies-multiple-profiles", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        return;
    }

    public void testDependencyInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dependency-inheritance/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("4.13.1", $stack9);

        return;
    }

    public void testManagedProfileDependency() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15, $stack17, $stack21;
        java.util.List $stack6, $stack18;
        int $stack7, $stack19;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "maven-core-it";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("managed-profile-dependency/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-core-it-support", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.3", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/scope");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("runtime", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/exclusions");

        $stack18 = (java.util.List) $stack17;

        $stack19 = interfaceinvoke $stack18.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/exclusions[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("commons-lang", $stack21);

        return;
    }

    public void testProfileModuleInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "dist";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-module-inheritance/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack7);

        return;
    }

    public void testUncPath() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("unc-path/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("file:////host/site/test-child", $stack5);

        return;
    }

    public void testUrlAppendWithChildPathAdjustment() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("url-append/child", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/child", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://viewvc.project.url/child", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/connection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://scm.project.url/child", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/developerConnection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://scm.project.url/child", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://site.project.url/child", $stack13);

        return;
    }

    public void testRepoInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("repo-inheritance", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("it0043", $stack9);

        return;
    }

    public void testEmptyScm() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack4;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("empty-scm", $stack2);

        $stack4 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack4);

        return;
    }

    public void testPluginConfigurationUsingAttributesWithoutPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-attributes/wo-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/@todir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/@overwrite");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@dir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("target", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@todir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack13);

        return;
    }

    public void testPluginConfigurationUsingAttributesWithPluginManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-attributes/w-plugin-mgmt", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/@todir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/@overwrite");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@dir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("target", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@todir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack13);

        return;
    }

    public void testPluginConfigurationUsingAttributesWithPluginManagementAndProfile() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "maven-core-it";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-config-attributes/w-profile", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/@todir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("src", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/@overwrite");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@dir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("target", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@todir");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack13);

        return;
    }

    public void testPomEncoding() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2, $stack6;
        java.lang.Object $stack5, $stack9;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.PomConstructionTest $r0, $r1;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("pom-encoding/utf-8", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("description");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("TEST-CHARS: \u00df\u0131\u03a3\u042f\u05d0\u20ac", $stack5);

        $stack6 = newarray (java.lang.String)[0];

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r1.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("pom-encoding/latin-1", $stack6);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("description");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("TEST-CHARS: \u00c4\u00d6\u00dc\u00e4\u00f6\u00fc\u00df", $stack9);

        return;
    }

    public void testXmlWhitespaceHandling() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("xml-whitespace/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.mng4070", $stack5);

        return;
    }

    public void testInterpolationOfBaseUri() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.io.File $stack4;
        java.net.URI $stack5;
        java.lang.String $stack6, $stack8;
        java.lang.Object $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("baseuri-interpolation/pom.xml", $stack2);

        $stack4 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        $stack5 = virtualinvoke $stack4.<java.io.File: java.net.URI toURI()>();

        $stack6 = virtualinvoke $stack5.<java.net.URI: java.lang.String toString()>();

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop1");

        $stack8 = virtualinvoke $stack7.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testInterpolationOfRfc3986BaseUri() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.lang.String prop1, $stack10;
        java.io.File $stack7;
        java.nio.file.Path $stack8;
        java.net.URI $stack9;
        org.hamcrest.Matcher $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("baseuri-interpolation/pom.xml", $stack3);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/prop1");

        prop1 = virtualinvoke $stack5.<java.lang.Object: java.lang.String toString()>();

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.io.File getBasedir()>();

        $stack8 = virtualinvoke $stack7.<java.io.File: java.nio.file.Path toPath()>();

        $stack9 = interfaceinvoke $stack8.<java.nio.file.Path: java.net.URI toUri()>();

        $stack10 = virtualinvoke $stack9.<java.net.URI: java.lang.String toASCIIString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, prop1);

        $stack11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("file:///");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(prop1, $stack11);

        return;
    }

    public void testReportingPluginConfig() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("reporting-plugin-config/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/configuration/stringParams");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(3, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/configuration/stringParams[1]/stringParam[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parentParam", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/configuration/stringParams[1]/stringParam[2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("childParam", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/configuration/stringParams[1]/stringParam[3]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("  preserve space  ", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/configuration/booleanParam");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack15);

        return;
    }

    public void testPropertiesNoDuplication() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.Properties $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("properties-no-duplication/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties");

        $stack6 = (java.util.Properties) $stack5;

        $stack7 = virtualinvoke $stack6.<java.util.Properties: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/pomProfile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child", $stack9);

        return;
    }

    public void testPomInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("pom-inheritance/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("description");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-description", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("packaging");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar", $stack7);

        return;
    }

    public void testCompleteModelWithoutParent() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.PomConstructionTest $r0, $r1;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("complete-model/wo-parent", $stack2);

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r1.<org.apache.maven.project.PomConstructionTest: void testCompleteModel(org.apache.maven.project.harness.PomTestWrapper)>(pom);

        return;
    }

    public void testCompleteModelWithParent() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.PomConstructionTest $r0, $r1;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("complete-model/w-parent/sub", $stack2);

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r1.<org.apache.maven.project.PomConstructionTest: void testCompleteModel(org.apache.maven.project.harness.PomTestWrapper)>(pom);

        return;
    }

    private void testCompleteModel(org.apache.maven.project.harness.PomTestWrapper) throws java.lang.Exception
    {
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack29, $stack31, $stack33, $stack35, $stack37, $stack41, $stack43, $stack45, $stack47, $stack49, $stack51, $stack53, $stack55, $stack57, $stack61, $stack63, $stack67, $stack69, $stack71, $stack73, $stack75, $stack77, $stack79, $stack81, $stack85, $stack87, $stack91, $stack93, $stack95, $stack97, $stack99, $stack101, $stack105, $stack107, $stack109, $stack111, $stack113, $stack115, $stack117, $stack119, $stack121, $stack123, $stack125, $stack129, $stack131, $stack133, $stack135, $stack137, $stack139, $stack141, $stack143, $stack145, $stack147, $stack149, $stack151, $stack153, $stack155, $stack157, $stack159, $stack161, $stack163, $stack165, $stack167, $stack169, $stack171, $stack173, $stack175, $stack179, $stack181, $stack185, $stack187, $stack191, $stack193, $stack195, $stack197, $stack199, $stack201, $stack203, $stack207, $stack209, $stack211, $stack215, $stack217, $stack219, $stack221, $stack223, $stack225, $stack227, $stack231, $stack233, $stack235, $stack239, $stack241, $stack243, $stack245, $stack247, $stack249, $stack251, $stack253, $stack255, $stack257, $stack259, $stack261, $stack263, $stack265, $stack269, $stack271, $stack275, $stack277, $stack279, $stack281, $stack285, $stack287, $stack291, $stack293, $stack297, $stack299, $stack301, $stack303, $stack307, $stack309, $stack313, $stack315, $stack319, $stack321, $stack323, $stack325, $stack329, $stack331, $stack333, $stack335, $stack337, $stack341, $stack343, $stack345, $stack347, $stack351, $stack353, $stack357, $stack359, $stack361, $stack363, $stack365, $stack369, $stack371, $stack373, $stack375, $stack377, $stack381, $stack383, $stack385, $stack387, $stack389, $stack393, $stack395, $stack397, $stack401;
        java.util.List $stack26, $stack38, $stack58, $stack64, $stack82, $stack88, $stack102, $stack126, $stack176, $stack188, $stack204, $stack212, $stack228, $stack236, $stack266, $stack272, $stack282, $stack288, $stack294, $stack304, $stack310, $stack316, $stack326, $stack338, $stack348, $stack354, $stack366, $stack378, $stack390, $stack398;
        int $stack27, $stack39, $stack59, $stack65, $stack83, $stack89, $stack103, $stack127, $stack177, $stack183, $stack189, $stack205, $stack213, $stack229, $stack237, $stack267, $stack273, $stack283, $stack289, $stack295, $stack305, $stack311, $stack317, $stack327, $stack339, $stack349, $stack355, $stack367, $stack379, $stack391, $stack399;
        java.lang.Boolean $stack132, $stack134, $stack136, $stack138, $stack148, $stack156, $stack200, $stack224, $stack278, $stack300, $stack372;
        java.util.Map $stack182;
        PomConstructionTest this;
        org.apache.maven.project.PomConstructionTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: PomConstructionTest;

        pom := @parameter0: org.apache.maven.project.harness.PomTestWrapper;

        $stack3 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modelVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("4.0.0", $stack3);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.mng", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.2", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("packaging");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("pom", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-name", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("description");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-description", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("inceptionYear");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2009", $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("organization/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-org", $stack21);

        $stack23 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("organization/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project-org.url/", $stack23);

        $stack25 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses");

        $stack26 = (java.util.List) $stack25;

        $stack27 = interfaceinvoke $stack26.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack27);

        $stack29 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-license", $stack29);

        $stack31 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/license", $stack31);

        $stack33 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/distribution");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("repo", $stack33);

        $stack35 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/comments");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("free", $stack35);

        $stack37 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers");

        $stack38 = (java.util.List) $stack37;

        $stack39 = interfaceinvoke $stack38.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack39);

        $stack41 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("dev", $stack41);

        $stack43 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-developer", $stack43);

        $stack45 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/email");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("developer@", $stack45);

        $stack47 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://developer", $stack47);

        $stack49 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/organization");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("developer", $stack49);

        $stack51 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/organizationUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://devel.org", $stack51);

        $stack53 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/timezone");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("-1", $stack53);

        $stack55 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/properties/developer");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("yes", $stack55);

        $stack57 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/roles");

        $stack58 = (java.util.List) $stack57;

        $stack59 = interfaceinvoke $stack58.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack59);

        $stack61 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/roles[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("devel", $stack61);

        $stack63 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors");

        $stack64 = (java.util.List) $stack63;

        $stack65 = interfaceinvoke $stack64.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack65);

        $stack67 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-contributor", $stack67);

        $stack69 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/email");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("contributor@", $stack69);

        $stack71 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://contributor", $stack71);

        $stack73 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/organization");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("contributor", $stack73);

        $stack75 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/organizationUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://contrib.org", $stack75);

        $stack77 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/timezone");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("+1", $stack77);

        $stack79 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/properties/contributor");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("yes", $stack79);

        $stack81 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/roles");

        $stack82 = (java.util.List) $stack81;

        $stack83 = interfaceinvoke $stack82.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack83);

        $stack85 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/roles[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("contrib", $stack85);

        $stack87 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists");

        $stack88 = (java.util.List) $stack87;

        $stack89 = interfaceinvoke $stack88.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack89);

        $stack91 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-mailing-list", $stack91);

        $stack93 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/subscribe");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("subscribe@", $stack93);

        $stack95 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/unsubscribe");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("unsubscribe@", $stack95);

        $stack97 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/post");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("post@", $stack97);

        $stack99 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/archive");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("mail-archive", $stack99);

        $stack101 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/otherArchives");

        $stack102 = (java.util.List) $stack101;

        $stack103 = interfaceinvoke $stack102.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack103);

        $stack105 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/otherArchives[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("other-archive", $stack105);

        $stack107 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("prerequisites/maven");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.0.1", $stack107);

        $stack109 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/trunk", $stack109);

        $stack111 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/connection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/scm", $stack111);

        $stack113 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/developerConnection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/scm", $stack113);

        $stack115 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/tag");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("TAG", $stack115);

        $stack117 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("issueManagement/system");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("issues", $stack117);

        $stack119 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("issueManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/issues", $stack119);

        $stack121 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/system");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ci", $stack121);

        $stack123 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/ci", $stack123);

        $stack125 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers");

        $stack126 = (java.util.List) $stack125;

        $stack127 = interfaceinvoke $stack126.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack127);

        $stack129 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/type");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("irc", $stack129);

        $stack131 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/address");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ci@", $stack131);

        $stack132 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack133 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/sendOnError");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack132, $stack133);

        $stack134 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack135 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/sendOnFailure");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack134, $stack135);

        $stack136 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack137 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/sendOnWarning");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack136, $stack137);

        $stack138 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack139 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/sendOnSuccess");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack138, $stack139);

        $stack141 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/notifiers[1]/configuration/ciProp");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ci", $stack141);

        $stack143 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project.distros", $stack143);

        $stack145 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("distros", $stack145);

        $stack147 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/dist", $stack147);

        $stack148 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack149 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/uniqueVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack148, $stack149);

        $stack151 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project.snaps", $stack151);

        $stack153 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("snaps", $stack153);

        $stack155 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/snaps", $stack155);

        $stack156 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack157 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/uniqueVersion");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack156, $stack157);

        $stack159 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project.site", $stack159);

        $stack161 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("docs", $stack161);

        $stack163 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/site", $stack163);

        $stack165 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/downloadUrl");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/download", $stack165);

        $stack167 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/relocation/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("reloc-gid", $stack167);

        $stack169 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/relocation/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("reloc-aid", $stack169);

        $stack171 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/relocation/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("reloc-version", $stack171);

        $stack173 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/relocation/message");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-reloc-msg", $stack173);

        $stack175 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules");

        $stack176 = (java.util.List) $stack175;

        $stack177 = interfaceinvoke $stack176.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack177);

        $stack179 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("modules[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("sub", $stack179);

        $stack181 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties");

        $stack182 = (java.util.Map) $stack181;

        $stack183 = interfaceinvoke $stack182.<java.util.Map: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack183);

        $stack185 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties[1]/itProperty");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-property", $stack185);

        $stack187 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies");

        $stack188 = (java.util.List) $stack187;

        $stack189 = interfaceinvoke $stack188.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack189);

        $stack191 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack191);

        $stack193 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("managed-dep", $stack193);

        $stack195 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.1", $stack195);

        $stack197 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/type");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("war", $stack197);

        $stack199 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/scope");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("runtime", $stack199);

        $stack200 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack201 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/optional");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack200, $stack201);

        $stack203 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/exclusions");

        $stack204 = (java.util.List) $stack203;

        $stack205 = interfaceinvoke $stack204.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack205);

        $stack207 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/exclusions[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack207);

        $stack209 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencyManagement/dependencies[1]/exclusions[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("excluded-managed-dep", $stack209);

        $stack211 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies");

        $stack212 = (java.util.List) $stack211;

        $stack213 = interfaceinvoke $stack212.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack213);

        $stack215 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack215);

        $stack217 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("dep", $stack217);

        $stack219 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.2", $stack219);

        $stack221 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/type");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ejb", $stack221);

        $stack223 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/scope");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test", $stack223);

        $stack224 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack225 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/optional");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack224, $stack225);

        $stack227 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/exclusions");

        $stack228 = (java.util.List) $stack227;

        $stack229 = interfaceinvoke $stack228.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack229);

        $stack231 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/exclusions[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack231);

        $stack233 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/exclusions[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("excluded-dep", $stack233);

        $stack235 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories");

        $stack236 = (java.util.List) $stack235;

        $stack237 = interfaceinvoke $stack236.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack237);

        $stack239 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[1]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("project-remote-repo", $stack239);

        $stack241 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://project.url/remote", $stack241);

        $stack243 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("repo", $stack243);

        $stack245 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[2]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("central", $stack245);

        $stack247 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[2]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://repo.maven.apache.org/maven2", $stack247);

        $stack249 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/defaultGoal");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test", $stack249);

        $stack251 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/finalName");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("coreit", $stack251);

        $stack253 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/directory");

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("build", $stack253);

        $stack255 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/outputDirectory");

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r1.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("build/main", $stack255);

        $stack257 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testOutputDirectory");

        $r2 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r2.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("build/test", $stack257);

        $stack259 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/sourceDirectory");

        $r3 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r3.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("sources/main", $stack259);

        $stack261 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testSourceDirectory");

        $r4 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r4.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("sources/test", $stack261);

        $stack263 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/scriptSourceDirectory");

        $r5 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r5.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("sources/scripts", $stack263);

        $stack265 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters");

        $stack266 = (java.util.List) $stack265;

        $stack267 = interfaceinvoke $stack266.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack267);

        $stack269 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/filters[1]");

        $r6 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r6.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("src/main/filter/it.properties", $stack269);

        $stack271 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources");

        $stack272 = (java.util.List) $stack271;

        $stack273 = interfaceinvoke $stack272.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack273);

        $stack275 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/directory");

        $r7 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r7.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("res/main", $stack275);

        $stack277 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/targetPath");

        $r8 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r8.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("main", $stack277);

        $stack278 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack279 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/filtering");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack278, $stack279);

        $stack281 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/includes");

        $stack282 = (java.util.List) $stack281;

        $stack283 = interfaceinvoke $stack282.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack283);

        $stack285 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/includes[1]");

        $r9 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r9.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("main.included", $stack285);

        $stack287 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/excludes");

        $stack288 = (java.util.List) $stack287;

        $stack289 = interfaceinvoke $stack288.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack289);

        $stack291 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/excludes[1]");

        $r10 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r10.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("main.excluded", $stack291);

        $stack293 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources");

        $stack294 = (java.util.List) $stack293;

        $stack295 = interfaceinvoke $stack294.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack295);

        $stack297 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/directory");

        $r11 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r11.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("res/test", $stack297);

        $stack299 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/targetPath");

        $r12 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r12.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("test", $stack299);

        $stack300 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack301 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/filtering");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack300, $stack301);

        $stack303 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/includes");

        $stack304 = (java.util.List) $stack303;

        $stack305 = interfaceinvoke $stack304.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack305);

        $stack307 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/includes[1]");

        $r13 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r13.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("test.included", $stack307);

        $stack309 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/excludes");

        $stack310 = (java.util.List) $stack309;

        $stack311 = interfaceinvoke $stack310.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack311);

        $stack313 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/testResources[1]/excludes[1]");

        $r14 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r14.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("test.excluded", $stack313);

        $stack315 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions");

        $stack316 = (java.util.List) $stack315;

        $stack317 = interfaceinvoke $stack316.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack317);

        $stack319 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.ext", $stack319);

        $stack321 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ext", $stack321);

        $stack323 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("3.0", $stack323);

        $stack325 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        $stack326 = (java.util.List) $stack325;

        $stack327 = interfaceinvoke $stack326.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack327);

        $stack329 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.plugins", $stack329);

        $stack331 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-build", $stack331);

        $stack333 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.1-SNAPSHOT", $stack333);

        $stack335 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/configuration/outputFile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test.properties", $stack335);

        $stack337 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions");

        $stack338 = (java.util.List) $stack337;

        $stack339 = interfaceinvoke $stack338.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack339);

        $stack341 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test", $stack341);

        $stack343 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/phase");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("validate", $stack343);

        $stack345 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/configuration/outputFile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("pom.properties", $stack345);

        $stack347 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals");

        $stack348 = (java.util.List) $stack347;

        $stack349 = interfaceinvoke $stack348.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack349);

        $stack351 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/executions[1]/goals[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("eval", $stack351);

        $stack353 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies");

        $stack354 = (java.util.List) $stack353;

        $stack355 = interfaceinvoke $stack354.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack355);

        $stack357 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack357);

        $stack359 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("build-plugin-dep", $stack359);

        $stack361 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.3", $stack361);

        $stack363 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/type");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("zip", $stack363);

        $stack365 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/exclusions");

        $stack366 = (java.util.List) $stack365;

        $stack367 = interfaceinvoke $stack366.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack367);

        $stack369 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/exclusions[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its", $stack369);

        $stack371 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/exclusions[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("excluded-build-plugin-dep", $stack371);

        $stack372 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack373 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/excludeDefaults");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack372, $stack373);

        $stack375 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/outputDirectory");

        $r15 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r15.<org.apache.maven.project.PomConstructionTest: void assertPathSuffixEquals(java.lang.String,java.lang.Object)>("docs", $stack375);

        $stack377 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins");

        $stack378 = (java.util.List) $stack377;

        $stack379 = interfaceinvoke $stack378.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack379);

        $stack381 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/groupId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.its.plugins", $stack381);

        $stack383 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-reporting", $stack383);

        $stack385 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.0-SNAPSHOT", $stack385);

        $stack387 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/configuration/outputFile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test.html", $stack387);

        $stack389 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets");

        $stack390 = (java.util.List) $stack389;

        $stack391 = interfaceinvoke $stack390.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack391);

        $stack393 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets[1]/id");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("it", $stack393);

        $stack395 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets[1]/configuration/outputFile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("index.html", $stack395);

        $stack397 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets[1]/reports");

        $stack398 = (java.util.List) $stack397;

        $stack399 = interfaceinvoke $stack398.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack399);

        $stack401 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/reportSets[1]/reports[1]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("run", $stack401);

        return;
    }

    public void testProfileInjectionOrder() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[5];

        $stack2[0] = "pom-a";

        $stack2[1] = "pom-b";

        $stack2[2] = "pom-e";

        $stack2[3] = "pom-c";

        $stack2[4] = "pom-d";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-injection-order", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties[1]/pomProperty");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("e", $stack5);

        return;
    }

    public void testPropertiesInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("properties-inheritance/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/parentProperty");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("parent-property", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/childProperty");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-property", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/overriddenProperty");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-override", $stack9);

        return;
    }

    public void testInheritedPropertiesInterpolatedWithValuesFromChildWithoutProfiles() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("inherited-properties-interpolation/no-profile/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/overridden");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/interpolated");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD", $stack7);

        return;
    }

    public void testInheritedPropertiesInterpolatedWithValuesFromChildWithActiveProfiles() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2, $stack9;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.MavenProject $stack5;
        org.apache.maven.model.Model $stack6;
        java.util.List $stack7;
        int $stack8;
        java.lang.Object $stack12, $stack14;
        org.apache.maven.project.PomConstructionTest $r0, $r1;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("inherited-properties-interpolation/active-profile/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject getMavenProject()>();

        $stack6 = virtualinvoke $stack5.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack7 = virtualinvoke $stack6.<org.apache.maven.model.Model: java.util.List getProfiles()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack8);

        $stack9 = newarray (java.lang.String)[2];

        $stack9[0] = "it-parent";

        $stack9[1] = "it-child";

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r1.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("inherited-properties-interpolation/active-profile/sub", $stack9);

        $stack12 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/overridden");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD", $stack12);

        $stack14 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/interpolated");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD", $stack14);

        return;
    }

    public void testProfileDefaultActivation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.MavenProject $stack5;
        java.util.List $stack6, $stack10;
        int $stack7, $stack11;
        java.lang.Object $stack9, $stack13;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "profile4";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-default-deactivation", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject getMavenProject()>();

        $stack6 = virtualinvoke $stack5.<org.apache.maven.project.MavenProject: java.util.List getActiveProfiles()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        $stack10 = (java.util.List) $stack9;

        $stack11 = interfaceinvoke $stack10.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("2.1", $stack13);

        return;
    }

    public void testBooleanInterpolation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Boolean $stack4, $stack6;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("boolean-interpolation", $stack2);

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("repositories[1]/releases/enabled");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/resources[1]/filtering");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        return;
    }

    public void testBuildExtensionInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11, $stack13, $stack15;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("build-extension-inheritance/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(3, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[2]/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.2", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/extensions[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack15);

        return;
    }

    public void testJdkActivation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack5;
        org.apache.maven.project.harness.PomTestWrapper pom;
        org.apache.maven.project.MavenProject $stack8;
        java.util.List $stack9;
        int $stack10;
        java.lang.Object $stack12, $stack14, $stack16;
        java.util.Properties $u0;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        virtualinvoke $u0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.version", "1.5.0_15");

        $stack5 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.util.Properties,java.lang.String[])>("jdk-activation", $u0, $stack5);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject getMavenProject()>();

        $stack9 = virtualinvoke $stack8.<org.apache.maven.project.MavenProject: java.util.List getActiveProfiles()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(3, $stack10);

        $stack12 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/jdkProperty3");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack12);

        $stack14 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/jdkProperty2");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack14);

        $stack16 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/jdkProperty1");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack16);

        return;
    }

    public void testProfilePluginMngDependencies() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "maven-core-it";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-plugin-mng-dependencies/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/dependencies[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack5);

        return;
    }

    public void testPercentEncodedUrlsMustNotBeDecoded() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("url-no-decoding", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://maven.apache.org/spacy%20path", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://svn.apache.org/viewvc/spacy%20path", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/connection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("scm:svn:svn+ssh://svn.apache.org/spacy%20path", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("scm/developerConnection");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("scm:svn:svn+ssh://svn.apache.org/spacy%20path", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("issueManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://issues.apache.org/spacy%20path", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("ciManagement/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://ci.apache.org/spacy%20path", $stack15);

        $stack17 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("scm:svn:svn+ssh://dist.apache.org/spacy%20path", $stack17);

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/snapshotRepository/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("scm:svn:svn+ssh://snap.apache.org/spacy%20path", $stack19);

        $stack21 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/site/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("scm:svn:svn+ssh://site.apache.org/spacy%20path", $stack21);

        return;
    }

    public void testPluginManagementInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-management-inheritance", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/pluginManagement/plugins[@artifactId=\'maven-compiler-plugin\']/version");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("0.1-stub-SNAPSHOT", $stack5);

        return;
    }

    public void testProfilePlugins() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "standard";

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("profile-plugins", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-assembly2-plugin", $stack9);

        return;
    }

    public void testPluginInheritanceSimple() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-inheritance-simple/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack7);

        return;
    }

    public void testPluginManagementDuplicate() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-management-duplicate/sub", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/pluginManagement/plugins");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(8, $stack7);

        return;
    }

    public void testDistributionManagement() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("distribution-management", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("distributionManagement/repository/layout");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("legacy", $stack5);

        return;
    }

    public void testDependencyScopeInheritance() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        java.lang.String scope;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dependency-scope-inheritance/sub", $stack3);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("dependencies[1]/scope");

        scope = (java.lang.String) $stack5;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("compile", scope);

        return;
    }

    public void testDependencyScope() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dependency-scope/sub", $stack1);

        return;
    }

    public void testDependencyManagementWithInterpolation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("dependency-management-with-interpolation/sub", $stack1);

        return;
    }

    public void testInterpolationWithSystemProperty() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack5;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack8;
        java.util.Properties $u0;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        virtualinvoke $u0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("system.property", "PASSED");

        $stack5 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.util.Properties,java.lang.String[])>("system-property-interpolation", $u0, $stack5);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack8);

        return;
    }

    public void testPluginExecutionInheritanceWhenChildDoesNotDeclarePlugin() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List executions;
        int $stack7;
        org.apache.maven.model.PluginExecution $stack10;
        java.lang.String $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-inheritance/wo-merge", $stack3);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/pluginsAsMap[@name=\'org.apache.maven.its.plugins:maven-it-plugin-log-file\']/executions");

        executions = (java.util.List) $stack5;

        $stack7 = interfaceinvoke executions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(0);

        $stack10 = (org.apache.maven.model.PluginExecution) $stack9;

        $stack11 = virtualinvoke $stack10.<org.apache.maven.model.PluginExecution: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("inherited-execution", $stack11);

        return;
    }

    public void testPluginExecutionInheritanceWhenChildDoesDeclarePluginAsWell() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List executions;
        int $stack7;
        org.apache.maven.model.PluginExecution $stack10;
        java.lang.String $stack11;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-inheritance/w-merge", $stack3);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/pluginsAsMap[@name=\'org.apache.maven.its.plugins:maven-it-plugin-log-file\']/executions");

        executions = (java.util.List) $stack5;

        $stack7 = interfaceinvoke executions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(0);

        $stack10 = (org.apache.maven.model.PluginExecution) $stack9;

        $stack11 = virtualinvoke $stack10.<org.apache.maven.model.PluginExecution: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("inherited-execution", $stack11);

        return;
    }

    public void testValidationErrorUponNonUniqueArtifactRepositoryId() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.junit.jupiter.api.function.Executable $stack2;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack2 = staticinvoke <PomConstructionTest$lambda_testValidationErrorUponNonUniqueArtifactRepositoryId_0__312: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.PomConstructionTest)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack2, "Non-unique repository ids did not cause validation error");

        return;
    }

    public void testValidationErrorUponNonUniquePluginRepositoryId() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.junit.jupiter.api.function.Executable $stack2;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack2 = staticinvoke <PomConstructionTest$lambda_testValidationErrorUponNonUniquePluginRepositoryId_1__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.PomConstructionTest)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack2, "Non-unique repository ids did not cause validation error");

        return;
    }

    public void testValidationErrorUponNonUniqueArtifactRepositoryIdInProfile() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.junit.jupiter.api.function.Executable $stack2;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack2 = staticinvoke <PomConstructionTest$lambda_testValidationErrorUponNonUniqueArtifactRepositoryIdInProfile_2__310: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.PomConstructionTest)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack2, "Non-unique repository ids did not cause validation error");

        return;
    }

    public void testValidationErrorUponNonUniquePluginRepositoryIdInProfile() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.junit.jupiter.api.function.Executable $stack2;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack2 = staticinvoke <PomConstructionTest$lambda_testValidationErrorUponNonUniquePluginRepositoryIdInProfile_3__311: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.PomConstructionTest)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack2, "Non-unique repository ids did not cause validation error");

        return;
    }

    public void testPrerequisitesAreNotInherited() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("prerequisites-inheritance/child", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("prerequisites");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertSame(java.lang.Object,java.lang.Object)>(null, $stack5);

        return;
    }

    public void testLicensesAreInheritedButNotAggregated() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack11;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("licenses-inheritance/child-2", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-license", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("licenses[1]/url");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("https://child.url/license", $stack11);

        return;
    }

    public void testDevelopersAreInheritedButNotAggregated() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("developers-inheritance/child-2", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("developers[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-developer", $stack9);

        return;
    }

    public void testContributorsAreInheritedButNotAggregated() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("contributors-inheritance/child-2", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("contributors[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-contributor", $stack9);

        return;
    }

    public void testMailingListsAreInheritedButNotAggregated() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9;
        java.util.List $stack6;
        int $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("mailing-lists-inheritance/child-2", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists");

        $stack6 = (java.util.List) $stack5;

        $stack7 = interfaceinvoke $stack6.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("mailingLists[1]/name");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("child-mailing-list", $stack9);

        return;
    }

    public void testPluginInheritanceOrder() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7, $stack9, $stack11, $stack13, $stack15;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-inheritance-order/child", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-log-file", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-expression", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-configuration", $stack9);

        $stack11 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[1]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-log-file", $stack11);

        $stack13 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[2]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-expression", $stack13);

        $stack15 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("reporting/plugins[3]/artifactId");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("maven-it-plugin-configuration", $stack15);

        return;
    }

    public void testCliPropsDominateProjectPropsDuringInterpolation() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack5;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack8;
        java.util.Properties $u0;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        virtualinvoke $u0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("testProperty", "PASSED");

        $stack5 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.util.Properties,java.lang.String[])>("interpolation-cli-wins", $u0, $stack5);

        $stack8 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("properties/interpolatedProperty");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("PASSED", $stack8);

        return;
    }

    public void testParentPomPackagingMustBePom() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.junit.jupiter.api.function.Executable $stack2;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack2 = staticinvoke <PomConstructionTest$lambda_testParentPomPackagingMustBePom_4__313: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.PomConstructionTest)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack2, "Wrong packaging of parent POM was not rejected");

        return;
    }

    public void testManagedPluginConfigurationAppliesToImplicitPluginsIntroducedByPackaging() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack2;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack7;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack2 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-management-for-implicit-plugin/child", $stack2);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[@artifactId=\'maven-resources-plugin\']/configuration/pathname");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("passed.txt", $stack5);

        $stack7 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[@artifactId=\'maven-it-plugin-log-file\']/configuration/logFile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("passed.txt", $stack7);

        return;
    }

    public void testDefaultPluginsExecutionContributedByPackagingExecuteBeforeUserDefinedExecutions() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack3;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack5, $stack9, $stack13, $stack17, $stack21;
        java.util.List executions;
        int $stack7;
        org.apache.maven.model.PluginExecution $stack10, $stack14, $stack18, $stack22;
        java.lang.String $stack11, $stack15, $stack19, $stack23;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack3 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-order-and-default-exec", $stack3);

        $stack5 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins[@artifactId=\'maven-resources-plugin\']/executions");

        executions = (java.util.List) $stack5;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(executions);

        $stack7 = interfaceinvoke executions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack7);

        $stack9 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(0);

        $stack10 = (org.apache.maven.model.PluginExecution) $stack9;

        $stack11 = virtualinvoke $stack10.<org.apache.maven.model.PluginExecution: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("default-resources", $stack11);

        $stack13 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(1);

        $stack14 = (org.apache.maven.model.PluginExecution) $stack13;

        $stack15 = virtualinvoke $stack14.<org.apache.maven.model.PluginExecution: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("default-testResources", $stack15);

        $stack17 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(2);

        $stack18 = (org.apache.maven.model.PluginExecution) $stack17;

        $stack19 = virtualinvoke $stack18.<org.apache.maven.model.PluginExecution: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test-1", $stack19);

        $stack21 = interfaceinvoke executions.<java.util.List: java.lang.Object get(int)>(3);

        $stack22 = (org.apache.maven.model.PluginExecution) $stack21;

        $stack23 = virtualinvoke $stack22.<org.apache.maven.model.PluginExecution: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("test-2", $stack23);

        return;
    }

    public void testPluginDeclarationsRetainPomOrderAfterInjectionOfDefaultPlugins() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack7;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack9, $stack13;
        java.util.List plugins;
        int $stack10, $stack11, resourcesPlugin, customPlugin, i;
        java.lang.String $stack12, $stack14, $stack15, $stack17, $stack18;
        org.apache.maven.model.Plugin plugin;
        boolean $stack16, $stack19;
        java.lang.Integer $stack22, $stack23, $stack25, $stack26;
        org.hamcrest.Matcher $stack24, $stack27;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack7 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-exec-order-with-lifecycle", $stack7);

        $stack9 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        plugins = (java.util.List) $stack9;

        resourcesPlugin = -1;

        customPlugin = -1;

        i = 0;

     label1:
        $stack10 = interfaceinvoke plugins.<java.util.List: int size()>();

        if i >= $stack10 goto label4;

        $stack13 = interfaceinvoke plugins.<java.util.List: java.lang.Object get(int)>(i);

        plugin = (org.apache.maven.model.Plugin) $stack13;

        $stack14 = "maven-resources-plugin";

        $stack15 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack16 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>($stack15);

        if $stack16 == 0 goto label2;

        $stack25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(resourcesPlugin);

        $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack27 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher lessThan(java.lang.Comparable)>($stack26);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack25, $stack27);

        resourcesPlugin = i;

        goto label3;

     label2:
        $stack17 = "maven-it-plugin-log-file";

        $stack18 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack19 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label3;

        $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(customPlugin);

        $stack23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack24 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher lessThan(java.lang.Comparable)>($stack23);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack22, $stack24);

        customPlugin = i;

     label3:
        i = i + 1;

        goto label1;

     label4:
        $stack11 = resourcesPlugin - 1;

        $stack12 = virtualinvoke plugins.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(customPlugin, $stack11, $stack12);

        return;
    }

    public void testPluginOrderAfterMergingWithInheritedPlugins() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack7;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack19, $stack23;
        java.util.List plugins;
        java.util.Iterator l5;
        boolean $stack21;
        org.apache.maven.model.Plugin plugin;
        java.lang.String $stack24;
        java.util.ArrayList $u0, $u1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack7 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-inheritance-merge-order/sub", $stack7);

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-error");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-configuration");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-dependency-resolution");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-packaging");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-log-file");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-expression");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-fork");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-touch");

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        plugins = (java.util.List) $stack19;

        l5 = interfaceinvoke plugins.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack21 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label2;

        $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack23;

        $stack24 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>($stack24);

        goto label1;

     label2:
        interfaceinvoke $u1.<java.util.List: boolean retainAll(java.util.Collection)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u1, $u0);

        return;
    }

    public void testPluginOrderAfterMergingWithInjectedPlugins() throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String[] $stack7;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.Object $stack19, $stack23;
        java.util.List plugins;
        java.util.Iterator l5;
        boolean $stack21;
        org.apache.maven.model.Plugin plugin;
        java.lang.String $stack24;
        java.util.ArrayList $u0, $u1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack7 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        pom = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("plugin-injection-merge-order", $stack7);

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-error");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-configuration");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-dependency-resolution");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-packaging");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-log-file");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-expression");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-fork");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>("maven-it-plugin-touch");

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $stack19 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>("build/plugins");

        plugins = (java.util.List) $stack19;

        l5 = interfaceinvoke plugins.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack21 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label2;

        $stack23 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack23;

        $stack24 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>($stack24);

        goto label1;

     label2:
        interfaceinvoke $u1.<java.util.List: boolean retainAll(java.util.Collection)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u1, $u0);

        return;
    }

    public void testProjectArtifactIdIsNotInheritedButMandatory() throws java.lang.Exception
    {
        PomConstructionTest this;
        org.junit.jupiter.api.function.Executable $stack2;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack2 = staticinvoke <PomConstructionTest$lambda_testProjectArtifactIdIsNotInheritedButMandatory_5__314: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.PomConstructionTest)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack2, "Missing artifactId did not cause validation error");

        return;
    }

    private void assertPathSuffixEquals(java.lang.String, java.lang.Object)
    {
        java.lang.Object actual;
        int $stack5, $stack6, $stack7;
        java.lang.String expected, $stack8, a;
        PomConstructionTest this;

        this := @this: PomConstructionTest;

        expected := @parameter0: java.lang.String;

        actual := @parameter1: java.lang.Object;

        a = virtualinvoke actual.<java.lang.Object: java.lang.String toString()>();

        $stack5 = virtualinvoke a.<java.lang.String: int length()>();

        $stack6 = virtualinvoke expected.<java.lang.String: int length()>();

        $stack7 = $stack5 - $stack6;

        $stack8 = virtualinvoke a.<java.lang.String: java.lang.String substring(int)>($stack7);

        a = virtualinvoke $stack8.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expected, a);

        return;
    }

    private void assertPathWithNormalizedFileSeparators(java.lang.Object)
    {
        java.io.File $stack2;
        java.lang.Object value;
        java.lang.String $stack3, $stack4, $stack5;
        PomConstructionTest this;

        this := @this: PomConstructionTest;

        value := @parameter0: java.lang.Object;

        $stack2 = new java.io.File;

        $stack3 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $stack2.<java.io.File: void <init>(java.lang.String)>($stack3);

        $stack4 = virtualinvoke $stack2.<java.io.File: java.lang.String getPath()>();

        $stack5 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        return;
    }

    private transient org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String, java.lang.String[]) throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String pomPath;
        java.lang.String[] profileIds;
        org.apache.maven.project.harness.PomTestWrapper $stack3;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        pomPath := @parameter0: java.lang.String;

        profileIds := @parameter1: java.lang.String[];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.util.Properties,java.lang.String[])>(pomPath, null, profileIds);

        return $stack3;
    }

    private transient org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String, java.util.Properties, java.lang.String[]) throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String pomPath;
        java.util.Properties executionProperties;
        java.lang.String[] profileIds;
        org.apache.maven.project.harness.PomTestWrapper $stack4;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        pomPath := @parameter0: java.lang.String;

        executionProperties := @parameter1: java.util.Properties;

        profileIds := @parameter2: java.lang.String[];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack4 = specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,boolean,java.util.Properties,java.lang.String[])>(pomPath, 0, executionProperties, profileIds);

        return $stack4;
    }

    private transient org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String, boolean, java.util.Properties, java.lang.String[]) throws java.lang.Exception
    {
        PomConstructionTest this;
        java.lang.String pomPath, $stack16, $stack19, $stack37, localRepoUrl;
        java.io.File $stack11, pomFile, $u0, $u1;
        boolean $stack12, lenientValidation;
        java.lang.StringBuilder $stack17, $stack18, $stack22, $stack23, $u3, $u4;
        org.apache.maven.repository.RepositorySystem $stack26;
        org.apache.maven.artifact.repository.ArtifactRepository $stack28, $stack36;
        java.lang.String[] profileIds;
        java.util.List $stack30;
        java.util.Properties executionProperties;
        org.eclipse.aether.DefaultRepositorySystemSession repoSession;
        org.eclipse.aether.repository.LocalRepositoryManager $stack39;
        org.apache.maven.project.DefaultProjectBuilder $stack43;
        org.apache.maven.project.ProjectBuildingResult $stack44;
        org.apache.maven.project.MavenProject $stack45;
        byte $stack46;
        org.apache.maven.project.DefaultProjectBuildingRequest $u2;
        org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout $u5;
        org.eclipse.aether.repository.LocalRepository $u6;
        org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory $u7;
        org.apache.maven.project.harness.PomTestWrapper $u8;
        org.apache.maven.project.PomConstructionTest $r0, $r1, $r12;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $r2;
        org.apache.maven.project.ProjectBuildingRequest $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r13;
        org.eclipse.aether.RepositorySystemSession $r9, $r11;

        this := @this: PomConstructionTest;

        pomPath := @parameter0: java.lang.String;

        lenientValidation := @parameter1: boolean;

        executionProperties := @parameter2: java.util.Properties;

        profileIds := @parameter3: java.lang.String[];

        $u0 = new java.io.File;

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        $stack11 = $r0.<org.apache.maven.project.PomConstructionTest: java.io.File testDirectory>;

        specialinvoke $u0.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack11, pomPath);

        pomFile = $u0;

        $stack12 = virtualinvoke $u0.<java.io.File: boolean isDirectory()>();

        if $stack12 == 0 goto label1;

        $u1 = new java.io.File;

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($u0, "pom.xml");

        pomFile = $u1;

     label1:
        $u2 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u2.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack16 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $stack17 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.m2/repository");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        localRepoUrl = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("maven.repo.local", $stack19);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(localRepoUrl);

        localRepoUrl = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = (org.apache.maven.project.PomConstructionTest) this;

        $stack26 = $r1.<org.apache.maven.project.PomConstructionTest: org.apache.maven.repository.RepositorySystem repositorySystem>;

        $u5 = new org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;

        specialinvoke $u5.<org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout: void <init>()>();

        $r2 = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $u5;

        $stack28 = interfaceinvoke $stack26.<org.apache.maven.repository.RepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("local", localRepoUrl, $r2, null, null);

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r3.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack28);

        $stack30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(profileIds);

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r4.<org.apache.maven.project.ProjectBuildingRequest: void setActiveProfileIds(java.util.List)>($stack30);

        $r5 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r5.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setSystemProperties(java.util.Properties)>(executionProperties);

        $r6 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r6.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setUserProperties(java.util.Properties)>(executionProperties);

        if lenientValidation == 0 goto label2;

        $stack46 = 20;

        goto label3;

     label2:
        $stack46 = 31;

     label3:
        $r7 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r7.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setValidationLevel(int)>($stack46);

        repoSession = staticinvoke <org.apache.maven.repository.internal.MavenRepositorySystemUtils: org.eclipse.aether.DefaultRepositorySystemSession newSession()>();

        $u6 = new org.eclipse.aether.repository.LocalRepository;

        $r8 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        $stack36 = interfaceinvoke $r8.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack37 = interfaceinvoke $stack36.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u6.<org.eclipse.aether.repository.LocalRepository: void <init>(java.lang.String)>($stack37);

        $u7 = new org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory;

        specialinvoke $u7.<org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory: void <init>()>();

        $r9 = (org.eclipse.aether.RepositorySystemSession) repoSession;

        $stack39 = virtualinvoke $u7.<org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory: org.eclipse.aether.repository.LocalRepositoryManager newInstance(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.LocalRepository)>($r9, $u6);

        virtualinvoke repoSession.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)>($stack39);

        $r10 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        $r11 = (org.eclipse.aether.RepositorySystemSession) repoSession;

        interfaceinvoke $r10.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($r11);

        $u8 = new org.apache.maven.project.harness.PomTestWrapper;

        $r12 = (org.apache.maven.project.PomConstructionTest) this;

        $stack43 = $r12.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.DefaultProjectBuilder projectBuilder>;

        $r13 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        $stack44 = virtualinvoke $stack43.<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pomFile, $r13);

        $stack45 = interfaceinvoke $stack44.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        specialinvoke $u8.<org.apache.maven.project.harness.PomTestWrapper: void <init>(java.io.File,org.apache.maven.project.MavenProject)>(pomFile, $stack45);

        return $u8;
    }

    protected void assertModelEquals(org.apache.maven.project.harness.PomTestWrapper, java.lang.Object, java.lang.String)
    {
        java.lang.Object expected, $stack4;
        org.apache.maven.project.harness.PomTestWrapper pom;
        java.lang.String expression;
        PomConstructionTest this;

        this := @this: PomConstructionTest;

        pom := @parameter0: org.apache.maven.project.harness.PomTestWrapper;

        expected := @parameter1: java.lang.Object;

        expression := @parameter2: java.lang.String;

        $stack4 = virtualinvoke pom.<org.apache.maven.project.harness.PomTestWrapper: java.lang.Object getValue(java.lang.String)>(expression);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expected, $stack4);

        return;
    }

    private static java.lang.String createPath(java.util.List)
    {
        java.lang.StringBuilder $stack4, $stack14;
        java.util.List elements;
        java.util.Iterator l2;
        boolean $stack6;
        java.lang.String $stack7, $stack9, $stack12, s, $stack15;
        int $stack10, $stack11;
        java.lang.Object $stack13;

        elements := @parameter0: java.util.List;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>(int)>(256);

        l2 = interfaceinvoke elements.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack13 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $stack13;

        $stack14 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $stack15 = <java.io.File: java.lang.String separator>;

        virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        goto label1;

     label2:
        $stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = virtualinvoke $stack9.<java.lang.String: int length()>();

        $stack11 = $stack10 - 1;

        $stack12 = virtualinvoke $stack7.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11);

        return $stack12;
    }

    private void lambda$testProjectArtifactIdIsNotInheritedButMandatory$5() throws java.lang.Throwable
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("artifact-id-inheritance/child", $stack1);

        return;
    }

    private void lambda$testParentPomPackagingMustBePom$4() throws java.lang.Throwable
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("parent-pom-packaging/sub", $stack1);

        return;
    }

    private void lambda$testValidationErrorUponNonUniquePluginRepositoryIdInProfile$3() throws java.lang.Throwable
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("unique-repo-id/plugin-repo-in-profile", $stack1);

        return;
    }

    private void lambda$testValidationErrorUponNonUniqueArtifactRepositoryIdInProfile$2() throws java.lang.Throwable
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("unique-repo-id/artifact-repo-in-profile", $stack1);

        return;
    }

    private void lambda$testValidationErrorUponNonUniquePluginRepositoryId$1() throws java.lang.Throwable
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("unique-repo-id/plugin-repo", $stack1);

        return;
    }

    private void lambda$testValidationErrorUponNonUniqueArtifactRepositoryId$0() throws java.lang.Throwable
    {
        PomConstructionTest this;
        java.lang.String[] $stack1;
        org.apache.maven.project.PomConstructionTest $r0;

        this := @this: PomConstructionTest;

        $stack1 = newarray (java.lang.String)[0];

        $r0 = (org.apache.maven.project.PomConstructionTest) this;

        specialinvoke $r0.<org.apache.maven.project.PomConstructionTest: org.apache.maven.project.harness.PomTestWrapper buildPom(java.lang.String,java.lang.String[])>("unique-repo-id/artifact-repo", $stack1);

        return;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $stack0, $stack2, $stack3, $stack5, $stack7, $stack8;
        java.lang.String $stack1, $stack4, $stack6, $stack9;

        <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_DIR> = "src/test";

        $stack0 = new java.lang.StringBuilder;

        specialinvoke $stack0.<java.lang.StringBuilder: void <init>()>();

        $stack1 = <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_DIR>;

        $stack2 = virtualinvoke $stack0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack1);

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/resources-project-builder");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_POM_DIR> = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_DIR>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/resources-mixins");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.maven.project.PomConstructionTest: java.lang.String BASE_MIXIN_DIR> = $stack9;

        return;
    }
}
