public class PomTestWrapper extends java.lang.Object
{
    private java.io.File pomFile;
    private org.apache.commons.jxpath.JXPathContext context;
    private org.apache.maven.project.MavenProject mavenProject;

    public void <init>(java.io.File, org.apache.maven.project.MavenProject)
    {
        PomTestWrapper this;
        org.apache.maven.project.MavenProject mavenProject, $stack4;
        java.lang.Object $stack3;
        java.io.File pomFile;
        org.apache.maven.model.Model $stack5;
        org.apache.commons.jxpath.JXPathContext $stack6;
        org.apache.maven.project.harness.PomTestWrapper $r0, $r1, $r2;

        this := @this: PomTestWrapper;

        pomFile := @parameter0: java.io.File;

        mavenProject := @parameter1: org.apache.maven.project.MavenProject;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(mavenProject, "mavenProject cannot be null");

        $stack4 = (org.apache.maven.project.MavenProject) $stack3;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject mavenProject> = $stack4;

        $r1 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $r1.<org.apache.maven.project.harness.PomTestWrapper: java.io.File pomFile> = pomFile;

        $stack5 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack6 = staticinvoke <org.apache.commons.jxpath.JXPathContext: org.apache.commons.jxpath.JXPathContext newContext(java.lang.Object)>($stack5);

        $r2 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $r2.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context> = $stack6;

        return;
    }

    public void <init>(org.apache.maven.project.MavenProject)
    {
        PomTestWrapper this;
        org.apache.maven.project.MavenProject mavenProject, $stack3;
        java.lang.Object $stack2;
        org.apache.maven.model.Model $stack4;
        org.apache.commons.jxpath.JXPathContext $stack5;
        org.apache.maven.project.harness.PomTestWrapper $r0, $r1;

        this := @this: PomTestWrapper;

        mavenProject := @parameter0: org.apache.maven.project.MavenProject;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(mavenProject, "mavenProject cannot be null");

        $stack3 = (org.apache.maven.project.MavenProject) $stack2;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject mavenProject> = $stack3;

        $stack4 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack5 = staticinvoke <org.apache.commons.jxpath.JXPathContext: org.apache.commons.jxpath.JXPathContext newContext(java.lang.Object)>($stack4);

        $r1 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $r1.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context> = $stack5;

        return;
    }

    public org.apache.maven.project.MavenProject getMavenProject()
    {
        PomTestWrapper this;
        org.apache.maven.project.MavenProject $stack1;
        org.apache.maven.project.harness.PomTestWrapper $r0;

        this := @this: PomTestWrapper;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack1 = $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.maven.project.MavenProject mavenProject>;

        return $stack1;
    }

    public java.io.File getBasedir()
    {
        PomTestWrapper this;
        java.io.File $stack1, $stack2, $stack3;
        org.apache.maven.project.harness.PomTestWrapper $r0, $r1;

        this := @this: PomTestWrapper;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack1 = $r0.<org.apache.maven.project.harness.PomTestWrapper: java.io.File pomFile>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack2 = $r1.<org.apache.maven.project.harness.PomTestWrapper: java.io.File pomFile>;

        $stack3 = virtualinvoke $stack2.<java.io.File: java.io.File getParentFile()>();

        goto label2;

     label1:
        $stack3 = null;

     label2:
        return $stack3;
    }

    public void setValueOnModel(java.lang.String, java.lang.Object)
    {
        PomTestWrapper this;
        java.lang.String expression;
        java.lang.Object value;
        org.apache.commons.jxpath.JXPathContext $stack3;
        org.apache.maven.project.harness.PomTestWrapper $r0;

        this := @this: PomTestWrapper;

        expression := @parameter0: java.lang.String;

        value := @parameter1: java.lang.Object;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack3 = $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context>;

        virtualinvoke $stack3.<org.apache.commons.jxpath.JXPathContext: void setValue(java.lang.String,java.lang.Object)>(expression, value);

        return;
    }

    public java.util.Iterator getIteratorForXPathExpression(java.lang.String)
    {
        PomTestWrapper this;
        java.lang.String expression;
        org.apache.commons.jxpath.JXPathContext $stack2;
        java.util.Iterator $stack3;
        org.apache.maven.project.harness.PomTestWrapper $r0;

        this := @this: PomTestWrapper;

        expression := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack2 = $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context>;

        $stack3 = virtualinvoke $stack2.<org.apache.commons.jxpath.JXPathContext: java.util.Iterator iterate(java.lang.String)>(expression);

        return $stack3;
    }

    public boolean containsXPathExpression(java.lang.String)
    {
        PomTestWrapper this;
        java.lang.String expression;
        org.apache.commons.jxpath.JXPathContext $stack2;
        java.lang.Object $stack3;
        boolean $stack4;
        org.apache.maven.project.harness.PomTestWrapper $r0;

        this := @this: PomTestWrapper;

        expression := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack2 = $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context>;

        $stack3 = virtualinvoke $stack2.<org.apache.commons.jxpath.JXPathContext: java.lang.Object getValue(java.lang.String)>(expression);

        if $stack3 == null goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        PomTestWrapper this;
        java.lang.String expression;
        org.apache.commons.jxpath.JXPathContext $stack3;
        java.lang.Object $stack4;
        java.lang.Throwable $stack5;
        org.apache.maven.project.harness.PomTestWrapper $r0;

        this := @this: PomTestWrapper;

        expression := @parameter0: java.lang.String;

     label1:
        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack3 = $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context>;

        $stack4 = virtualinvoke $stack3.<org.apache.commons.jxpath.JXPathContext: java.lang.Object getValue(java.lang.String)>(expression);

     label2:
        return $stack4;

     label3:
        $stack5 := @caughtexception;

        return null;

        catch org.apache.commons.jxpath.JXPathNotFoundException from label1 to label2 with label3;
    }

    public boolean xPathExpressionEqualsValue(java.lang.String, java.lang.String)
    {
        PomTestWrapper this;
        java.lang.String expression, value;
        org.apache.commons.jxpath.JXPathContext $stack3, $stack5;
        java.lang.Object $stack4, $stack6;
        boolean $stack7, $stack8;
        org.apache.maven.project.harness.PomTestWrapper $r0, $r1;

        this := @this: PomTestWrapper;

        expression := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack3 = $r0.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context>;

        $stack4 = virtualinvoke $stack3.<org.apache.commons.jxpath.JXPathContext: java.lang.Object getValue(java.lang.String)>(expression);

        if $stack4 == null goto label1;

        $r1 = (org.apache.maven.project.harness.PomTestWrapper) this;

        $stack5 = $r1.<org.apache.maven.project.harness.PomTestWrapper: org.apache.commons.jxpath.JXPathContext context>;

        $stack6 = virtualinvoke $stack5.<org.apache.commons.jxpath.JXPathContext: java.lang.Object getValue(java.lang.String)>(expression);

        $stack7 = virtualinvoke $stack6.<java.lang.Object: boolean equals(java.lang.Object)>(value);

        if $stack7 == 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        return $stack8;
    }

    static void <clinit>()
    {
        org.apache.maven.project.harness.Xpp3DomPointerFactory $u0;
        org.apache.commons.jxpath.ri.model.NodePointerFactory $r0;

        $u0 = new org.apache.maven.project.harness.Xpp3DomPointerFactory;

        specialinvoke $u0.<org.apache.maven.project.harness.Xpp3DomPointerFactory: void <init>()>();

        $r0 = (org.apache.commons.jxpath.ri.model.NodePointerFactory) $u0;

        staticinvoke <org.apache.commons.jxpath.ri.JXPathContextReferenceImpl: void addNodePointerFactory(org.apache.commons.jxpath.ri.model.NodePointerFactory)>($r0);

        return;
    }
}
