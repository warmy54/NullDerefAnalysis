public class ProCamGeometricCalibrator$Settings extends org.bytedeco.javacv.GeometricCalibrator$Settings
{
    double detectedProjectorMin;
    boolean useOnlyIntersection;
    double prewarpUpdateErrorMax;

    public void <init>()
    {
        ProCamGeometricCalibrator$Settings this;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0, $r1, $r2;

        this := @this: ProCamGeometricCalibrator$Settings;

        specialinvoke this.<org.bytedeco.javacv.GeometricCalibrator$Settings: void <init>()>();

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: double detectedProjectorMin> = 0.5;

        $r1 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $r1.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: boolean useOnlyIntersection> = 1;

        $r2 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $r2.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: double prewarpUpdateErrorMax> = 0.01;

        return;
    }

    public double getDetectedProjectorMin()
    {
        ProCamGeometricCalibrator$Settings this;
        double $stack1;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0;

        this := @this: ProCamGeometricCalibrator$Settings;

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: double detectedProjectorMin>;

        return $stack1;
    }

    public void setDetectedProjectorMin(double)
    {
        ProCamGeometricCalibrator$Settings this;
        double detectedProjectorMin;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0;

        this := @this: ProCamGeometricCalibrator$Settings;

        detectedProjectorMin := @parameter0: double;

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: double detectedProjectorMin> = detectedProjectorMin;

        return;
    }

    public boolean isUseOnlyIntersection()
    {
        ProCamGeometricCalibrator$Settings this;
        boolean $stack1;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0;

        this := @this: ProCamGeometricCalibrator$Settings;

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: boolean useOnlyIntersection>;

        return $stack1;
    }

    public void setUseOnlyIntersection(boolean)
    {
        ProCamGeometricCalibrator$Settings this;
        boolean useOnlyIntersection;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0;

        this := @this: ProCamGeometricCalibrator$Settings;

        useOnlyIntersection := @parameter0: boolean;

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: boolean useOnlyIntersection> = useOnlyIntersection;

        return;
    }

    public double getPrewarpUpdateErrorMax()
    {
        ProCamGeometricCalibrator$Settings this;
        double $stack1;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0;

        this := @this: ProCamGeometricCalibrator$Settings;

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: double prewarpUpdateErrorMax>;

        return $stack1;
    }

    public void setPrewarpUpdateErrorMax(double)
    {
        ProCamGeometricCalibrator$Settings this;
        double prewarpUpdateErrorMax;
        org.bytedeco.javacv.ProCamGeometricCalibrator$Settings $r0;

        this := @this: ProCamGeometricCalibrator$Settings;

        prewarpUpdateErrorMax := @parameter0: double;

        $r0 = (org.bytedeco.javacv.ProCamGeometricCalibrator$Settings) this;

        $r0.<org.bytedeco.javacv.ProCamGeometricCalibrator$Settings: double prewarpUpdateErrorMax> = prewarpUpdateErrorMax;

        return;
    }
}
