public class ProCamTransformer extends java.lang.Object implements org.bytedeco.javacv.ImageTransformer
{
    protected org.bytedeco.javacv.CameraDevice camera;
    protected org.bytedeco.javacv.ProjectorDevice projector;
    protected org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer;
    protected org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer;
    protected org.bytedeco.opencv.opencv_core.IplImage[] projectorImage;
    protected org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage;
    protected org.bytedeco.opencv.opencv_core.CvScalar fillColor;
    protected org.bytedeco.opencv.opencv_core.CvRect roi;
    protected org.bytedeco.opencv.opencv_core.CvMat frontoParallelH;
    protected org.bytedeco.opencv.opencv_core.CvMat invFrontoParallelH;
    protected org.bytedeco.opencv.opencv_core.CvMat invCameraMatrix;
    protected org.bytedeco.opencv.cvkernels$KernelData kernelData;
    protected org.bytedeco.opencv.opencv_core.CvMat[] H1;
    protected org.bytedeco.opencv.opencv_core.CvMat[] H2;
    protected org.bytedeco.opencv.opencv_core.CvMat[] X;
    static final boolean $assertionsDisabled;

    public void <init>(double[], org.bytedeco.javacv.CameraDevice, org.bytedeco.javacv.ProjectorDevice)
    {
        ProCamTransformer this;
        double[] referencePoints;
        org.bytedeco.javacv.CameraDevice camera;
        org.bytedeco.javacv.ProjectorDevice projector;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        referencePoints := @parameter0: double[];

        camera := @parameter1: org.bytedeco.javacv.CameraDevice;

        projector := @parameter2: org.bytedeco.javacv.ProjectorDevice;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        specialinvoke $r0.<org.bytedeco.javacv.ProCamTransformer: void <init>(double[],org.bytedeco.javacv.CameraDevice,org.bytedeco.javacv.ProjectorDevice,org.bytedeco.opencv.opencv_core.CvMat)>(referencePoints, camera, projector, null);

        return;
    }

    public void <init>(double[], org.bytedeco.javacv.CameraDevice, org.bytedeco.javacv.ProjectorDevice, org.bytedeco.opencv.opencv_core.CvMat)
    {
        ProCamTransformer this;
        org.bytedeco.opencv.opencv_core.CvScalar $stack7;
        org.bytedeco.javacv.CameraDevice camera;
        org.bytedeco.javacv.ProjectorDevice projector;
        double[] referencePoints, $stack9, $stack17;
        int $stack10, $stack11, $stack13, $stack15, $stack18, $stack19, $stack21, $stack23;
        double $stack12, $stack14, $stack16, $stack20, $stack22, $stack24;
        org.bytedeco.opencv.opencv_core.CvMat n, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack38, $stack39, $stack40, $stack42, $stack43, $stack44, $stack45, $stack59, $stack60;
        org.bytedeco.opencv.opencv_core.CvRect $u0;
        org.bytedeco.javacv.ProjectiveColorTransformer $u1, $u2;
        org.bytedeco.javacv.ProCamTransformer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        org.bytedeco.opencv.opencv_core.CvArr $r20, $r21, $r29, $r30;

        this := @this: ProCamTransformer;

        referencePoints := @parameter0: double[];

        camera := @parameter1: org.bytedeco.javacv.CameraDevice;

        projector := @parameter2: org.bytedeco.javacv.ProjectorDevice;

        n := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.CameraDevice camera> = null;

        $r1 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r1.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectorDevice projector> = null;

        $r2 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r2.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer> = null;

        $r3 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r3.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer> = null;

        $r4 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r4.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage> = null;

        $r5 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r5.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage> = null;

        $stack7 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvScalar cvScalar(double,double,double,double)>(0.0, 0.0, 0.0, 1.0);

        $r6 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r6.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvScalar fillColor> = $stack7;

        $u0 = new org.bytedeco.opencv.opencv_core.CvRect;

        specialinvoke $u0.<org.bytedeco.opencv.opencv_core.CvRect: void <init>()>();

        $r7 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r7.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi> = $u0;

        $r8 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r8.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat frontoParallelH> = null;

        $r9 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r9.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invFrontoParallelH> = null;

        $r10 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r10.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invCameraMatrix> = null;

        $r11 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r11.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData> = null;

        $r12 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r12.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1> = null;

        $r13 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r13.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2> = null;

        $r14 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r14.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X> = null;

        $r15 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r15.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.CameraDevice camera> = camera;

        $r16 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r16.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectorDevice projector> = projector;

        if referencePoints == null goto label1;

        $u1 = new org.bytedeco.javacv.ProjectiveColorTransformer;

        $stack60 = camera.<org.bytedeco.javacv.CameraDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack59 = camera.<org.bytedeco.javacv.CameraDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        specialinvoke $u1.<org.bytedeco.javacv.ProjectiveColorTransformer: void <init>(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,double[],double[],org.bytedeco.opencv.opencv_core.CvMat,int,int)>($stack60, $stack59, null, null, n, referencePoints, null, null, 3, 0);

        $r17 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r17.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer> = $u1;

     label1:
        $stack9 = newarray (double)[6];

        $stack9[0] = 0.0;

        $stack9[1] = 0.0;

        $stack10 = camera.<org.bytedeco.javacv.CameraDevice: int imageWidth>;

        $stack11 = $stack10 / 2;

        $stack12 = (double) $stack11;

        $stack9[2] = $stack12;

        $stack13 = camera.<org.bytedeco.javacv.CameraDevice: int imageHeight>;

        $stack14 = (double) $stack13;

        $stack9[3] = $stack14;

        $stack15 = camera.<org.bytedeco.javacv.CameraDevice: int imageWidth>;

        $stack16 = (double) $stack15;

        $stack9[4] = $stack16;

        $stack9[5] = 0.0;

        $stack17 = newarray (double)[6];

        $stack17[0] = 0.0;

        $stack17[1] = 0.0;

        $stack18 = projector.<org.bytedeco.javacv.ProjectorDevice: int imageWidth>;

        $stack19 = $stack18 / 2;

        $stack20 = (double) $stack19;

        $stack17[2] = $stack20;

        $stack21 = projector.<org.bytedeco.javacv.ProjectorDevice: int imageHeight>;

        $stack22 = (double) $stack21;

        $stack17[3] = $stack22;

        $stack23 = projector.<org.bytedeco.javacv.ProjectorDevice: int imageWidth>;

        $stack24 = (double) $stack23;

        $stack17[4] = $stack24;

        $stack17[5] = 0.0;

        if n == null goto label2;

        $stack38 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $r18 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r18.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invCameraMatrix> = $stack38;

        $stack40 = camera.<org.bytedeco.javacv.CameraDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $r19 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack39 = $r19.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invCameraMatrix>;

        $r20 = (org.bytedeco.opencv.opencv_core.CvArr) $stack40;

        $r21 = (org.bytedeco.opencv.opencv_core.CvArr) $stack39;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r20, $r21);

        $r22 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack45 = $r22.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invCameraMatrix>;

        $stack44 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack43 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat R>;

        $stack42 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat T>;

        staticinvoke <org.bytedeco.javacv.JavaCV: void perspectiveTransform(double[],double[],org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,boolean)>($stack17, $stack9, $stack45, $stack44, $stack43, $stack42, n, 1);

     label2:
        $u2 = new org.bytedeco.javacv.ProjectiveColorTransformer;

        $stack30 = camera.<org.bytedeco.javacv.CameraDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack29 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat cameraMatrix>;

        $stack28 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat R>;

        $stack27 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat T>;

        $stack26 = projector.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix>;

        specialinvoke $u2.<org.bytedeco.javacv.ProjectiveColorTransformer: void <init>(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,double[],double[],org.bytedeco.opencv.opencv_core.CvMat,int,int)>($stack30, $stack29, $stack28, $stack27, null, $stack9, $stack17, $stack26, 1, 3);

        $r23 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r23.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer> = $u2;

        if referencePoints == null goto label3;

        if n == null goto label3;

        $stack31 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $stack32 = virtualinvoke camera.<org.bytedeco.javacv.CameraDevice: org.bytedeco.opencv.opencv_core.CvMat getFrontoParallelH(double[],org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>(referencePoints, n, $stack31);

        $r24 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r24.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat frontoParallelH> = $stack32;

        $r25 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack33 = $r25.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat frontoParallelH>;

        $stack34 = virtualinvoke $stack33.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat clone()>();

        $r26 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r26.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invFrontoParallelH> = $stack34;

        $r27 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack36 = $r27.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat frontoParallelH>;

        $r28 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack35 = $r28.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat invFrontoParallelH>;

        $r29 = (org.bytedeco.opencv.opencv_core.CvArr) $stack36;

        $r30 = (org.bytedeco.opencv.opencv_core.CvArr) $stack35;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r29, $r30);

     label3:
        return;
    }

    public int getNumGains()
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack1;
        int $stack2;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.ProjectiveColorTransformer: int getNumGains()>();

        return $stack2;
    }

    public int getNumBiases()
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack1;
        int $stack2;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer>;

        $stack2 = virtualinvoke $stack1.<org.bytedeco.javacv.ProjectiveColorTransformer: int getNumBiases()>();

        return $stack2;
    }

    public org.bytedeco.opencv.opencv_core.CvScalar getFillColor()
    {
        ProCamTransformer this;
        org.bytedeco.opencv.opencv_core.CvScalar $stack1;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvScalar fillColor>;

        return $stack1;
    }

    public void setFillColor(org.bytedeco.opencv.opencv_core.CvScalar)
    {
        ProCamTransformer this;
        org.bytedeco.opencv.opencv_core.CvScalar fillColor;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        fillColor := @parameter0: org.bytedeco.opencv.opencv_core.CvScalar;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvScalar fillColor> = fillColor;

        return;
    }

    public org.bytedeco.javacv.ProjectiveColorTransformer getSurfaceTransformer()
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack1;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        return $stack1;
    }

    public org.bytedeco.javacv.ProjectiveColorTransformer getProjectorTransformer()
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack1;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer>;

        return $stack1;
    }

    public org.bytedeco.opencv.opencv_core.IplImage getProjectorImage(int)
    {
        ProCamTransformer this;
        int pyramidLevel;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack2;
        org.bytedeco.opencv.opencv_core.IplImage $stack3;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        pyramidLevel := @parameter0: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack2 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack3 = $stack2[pyramidLevel];

        return $stack3;
    }

    public void setProjectorImage(org.bytedeco.opencv.opencv_core.IplImage, int, int)
    {
        ProCamTransformer this;
        org.bytedeco.opencv.opencv_core.IplImage projectorImage0;
        int minLevel, maxLevel;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        projectorImage0 := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        minLevel := @parameter1: int;

        maxLevel := @parameter2: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        virtualinvoke $r0.<org.bytedeco.javacv.ProCamTransformer: void setProjectorImage(org.bytedeco.opencv.opencv_core.IplImage,int,int,boolean)>(projectorImage0, minLevel, maxLevel, 1);

        return;
    }

    public void setProjectorImage(org.bytedeco.opencv.opencv_core.IplImage, int, int, boolean)
    {
        ProCamTransformer this;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack12, $stack14, $stack16, $stack18, $stack22, $stack26, $stack30, $stack34, $stack37, $stack40, $stack43, $stack46, $stack47, $stack51, $stack71, $stack83, $stack89, $stack92, $stack94, $stack145, $stack153, $stack165;
        int maxLevel, $stack13, minLevel, $stack17, $stack20, $stack21, $stack24, h, $stack25, d, $stack29, c, $stack33, o, $stack39, $stack45, $stack50, $stack56, $stack57, $stack60, $stack61, $stack64, $stack65, $stack68, $stack69, $stack99, $stack102, $stack107, $stack108, $stack109, $stack113, $stack118, $stack119, $stack120, $stack123, $stack124, $stack129, $stack130, $stack131, $stack134, $stack135, $stack140, $stack141, $stack142, $stack154, $stack155, $stack157, $stack158, $stack166, $stack167, $stack15, align, ir;
        org.bytedeco.opencv.opencv_core.IplImage projectorImage0, $stack19, $stack23, $stack27, $stack31, $stack35, $stack38, $stack41, $stack44, $stack48, $stack49, $stack52, $stack73, $stack84, $stack90, $stack93, $stack95, $stack147, $stack159;
        org.bytedeco.opencv.opencv_core.IplROI ir;
        org.bytedeco.opencv.opencv_core.CvRect $stack55, $stack59, $stack63, $stack67, $stack72, $stack100, $stack111, $stack122, $stack133, $stack144, $stack146;
        boolean convertToFloat;
        double $stack103, $stack104, $stack105, $stack106, $stack114, $stack115, $stack116, $stack117, $stack125, $stack126, $stack127, $stack128, $stack136, $stack137, $stack138, $stack139;
        org.bytedeco.javacv.ProCamTransformer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r36;
        org.bytedeco.opencv.opencv_core.CvArr $r15, $r16, $r34, $r35;

        this := @this: ProCamTransformer;

        projectorImage0 := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        minLevel := @parameter1: int;

        maxLevel := @parameter2: int;

        convertToFloat := @parameter3: boolean;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack12 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        if $stack12 == null goto label01;

        $r1 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack165 = $r1.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack167 = lengthof $stack165;

        $stack166 = maxLevel + 1;

        if $stack167 == $stack166 goto label02;

     label01:
        $stack13 = maxLevel + 1;

        $stack14 = newarray (org.bytedeco.opencv.opencv_core.IplImage)[$stack13];

        $r2 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r2.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage> = $stack14;

     label02:
        $stack15 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        if $stack15 == 32 goto label03;

        if convertToFloat != 0 goto label04;

     label03:
        $r3 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack16 = $r3.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack16[minLevel] = projectorImage0;

        goto label08;

     label04:
        $r4 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack89 = $r4.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack90 = $stack89[minLevel];

        if $stack90 != null goto label05;

        $r5 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack153 = $r5.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack154 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack155 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack157 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        $stack158 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int origin()>();

        $stack159 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int,int)>($stack154, $stack155, 32, $stack157, $stack158);

        $stack153[minLevel] = $stack159;

     label05:
        ir = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        if ir == null goto label06;

        $stack99 = maxLevel + 1;

        align = 1 << $stack99;

        $r6 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack100 = $r6.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack102 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int xOffset()>();

        $stack104 = (double) $stack102;

        $stack103 = (double) align;

        $stack105 = $stack104 / $stack103;

        $stack106 = staticinvoke <java.lang.Math: double floor(double)>($stack105);

        $stack107 = (int) $stack106;

        $stack108 = $stack107 * align;

        $stack109 = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack108);

        virtualinvoke $stack100.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect x(int)>($stack109);

        $r7 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack111 = $r7.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack113 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int yOffset()>();

        $stack115 = (double) $stack113;

        $stack114 = (double) align;

        $stack116 = $stack115 / $stack114;

        $stack117 = staticinvoke <java.lang.Math: double floor(double)>($stack116);

        $stack118 = (int) $stack117;

        $stack119 = $stack118 * align;

        $stack120 = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack119);

        virtualinvoke $stack111.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect y(int)>($stack120);

        $r8 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack122 = $r8.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack123 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack124 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int width()>();

        $stack126 = (double) $stack124;

        $stack125 = (double) align;

        $stack127 = $stack126 / $stack125;

        $stack128 = staticinvoke <java.lang.Math: double ceil(double)>($stack127);

        $stack129 = (int) $stack128;

        $stack130 = $stack129 * align;

        $stack131 = staticinvoke <java.lang.Math: int min(int,int)>($stack123, $stack130);

        virtualinvoke $stack122.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect width(int)>($stack131);

        $r9 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack133 = $r9.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack134 = virtualinvoke projectorImage0.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack135 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int height()>();

        $stack137 = (double) $stack135;

        $stack136 = (double) align;

        $stack138 = $stack137 / $stack136;

        $stack139 = staticinvoke <java.lang.Math: double ceil(double)>($stack138);

        $stack140 = (int) $stack139;

        $stack141 = $stack140 * align;

        $stack142 = staticinvoke <java.lang.Math: int min(int,int)>($stack134, $stack141);

        virtualinvoke $stack133.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect height(int)>($stack142);

        $r10 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack144 = $r10.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetImageROI(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvRect)>(projectorImage0, $stack144);

        $r11 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack145 = $r11.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack147 = $stack145[minLevel];

        $r12 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack146 = $r12.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetImageROI(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvRect)>($stack147, $stack146);

        goto label07;

     label06:
        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>(projectorImage0);

        $r13 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack92 = $r13.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack93 = $stack92[minLevel];

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>($stack93);

     label07:
        $r14 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack94 = $r14.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack95 = $stack94[minLevel];

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) projectorImage0;

        $r16 = (org.bytedeco.opencv.opencv_core.CvArr) $stack95;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvConvertScale(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double,double)>($r15, $r16, 0.00392156862745098, 0.0);

     label08:
        ir = minLevel + 1;

     label09:
        if ir > maxLevel goto label13;

        $r17 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack18 = $r17.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack17 = ir - 1;

        $stack19 = $stack18[$stack17];

        $stack20 = virtualinvoke $stack19.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        align = $stack20 / 2;

        $r18 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack22 = $r18.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack21 = ir - 1;

        $stack23 = $stack22[$stack21];

        $stack24 = virtualinvoke $stack23.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        h = $stack24 / 2;

        $r19 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack26 = $r19.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack25 = ir - 1;

        $stack27 = $stack26[$stack25];

        d = virtualinvoke $stack27.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        $r20 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack30 = $r20.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack29 = ir - 1;

        $stack31 = $stack30[$stack29];

        c = virtualinvoke $stack31.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        $r21 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack34 = $r21.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack33 = ir - 1;

        $stack35 = $stack34[$stack33];

        o = virtualinvoke $stack35.<org.bytedeco.opencv.opencv_core.IplImage: int origin()>();

        $r22 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack37 = $r22.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack38 = $stack37[ir];

        if $stack38 != null goto label10;

        $r23 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack83 = $r23.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack84 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int,int)>(align, h, d, c, o);

        $stack83[ir] = $stack84;

     label10:
        $r24 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack40 = $r24.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack39 = ir - 1;

        $stack41 = $stack40[$stack39];

        ir = virtualinvoke $stack41.<org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplROI roi()>();

        if ir == null goto label11;

        $r25 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack55 = $r25.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack56 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int xOffset()>();

        $stack57 = $stack56 / 2;

        virtualinvoke $stack55.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect x(int)>($stack57);

        $r26 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack59 = $r26.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack60 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int width()>();

        $stack61 = $stack60 / 2;

        virtualinvoke $stack59.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect width(int)>($stack61);

        $r27 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack63 = $r27.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack64 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int yOffset()>();

        $stack65 = $stack64 / 2;

        virtualinvoke $stack63.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect y(int)>($stack65);

        $r28 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack67 = $r28.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $stack68 = virtualinvoke ir.<org.bytedeco.opencv.opencv_core.IplROI: int height()>();

        $stack69 = $stack68 / 2;

        virtualinvoke $stack67.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect height(int)>($stack69);

        $r29 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack71 = $r29.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack73 = $stack71[ir];

        $r30 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack72 = $r30.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvRect roi>;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetImageROI(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvRect)>($stack73, $stack72);

        goto label12;

     label11:
        $r31 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack43 = $r31.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack44 = $stack43[ir];

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>($stack44);

     label12:
        $r32 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack46 = $r32.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack45 = ir - 1;

        $stack49 = $stack46[$stack45];

        $r33 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack47 = $r33.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack48 = $stack47[ir];

        $r34 = (org.bytedeco.opencv.opencv_core.CvArr) $stack49;

        $r35 = (org.bytedeco.opencv.opencv_core.CvArr) $stack48;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvPyrDown(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r34, $r35, 7);

        $r36 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack51 = $r36.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack50 = ir - 1;

        $stack52 = $stack51[$stack50];

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>($stack52);

        ir = ir + 1;

        goto label09;

     label13:
        return;
    }

    public org.bytedeco.opencv.opencv_core.IplImage getSurfaceImage(int)
    {
        ProCamTransformer this;
        int pyramidLevel;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack2;
        org.bytedeco.opencv.opencv_core.IplImage $stack3;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        pyramidLevel := @parameter0: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack2 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack3 = $stack2[pyramidLevel];

        return $stack3;
    }

    public void setSurfaceImage(org.bytedeco.opencv.opencv_core.IplImage, int)
    {
        ProCamTransformer this;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack9, $stack10, $stack13, $stack17, $stack21, $stack25, $stack29, $stack32, $stack34, $stack37, $stack38, $stack43, $stack51, $stack11;
        int pyramidLevels, $stack12, $stack15, w, $stack16, $stack19, h, $stack20, d, $stack24, c, $stack28, o, $stack36, $stack52, i;
        org.bytedeco.opencv.opencv_core.IplImage surfaceImage0, $stack14, $stack18, $stack22, $stack26, $stack30, $stack33, $stack35, $stack39, $stack40, $stack44;
        org.bytedeco.javacv.ProCamTransformer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.bytedeco.opencv.opencv_core.CvArr $r14, $r15;

        this := @this: ProCamTransformer;

        surfaceImage0 := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        pyramidLevels := @parameter1: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack9 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        if $stack9 == null goto label1;

        $r1 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack51 = $r1.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack52 = lengthof $stack51;

        if $stack52 == pyramidLevels goto label2;

     label1:
        $stack10 = newarray (org.bytedeco.opencv.opencv_core.IplImage)[pyramidLevels];

        $r2 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r2.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage> = $stack10;

     label2:
        $r3 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack11 = $r3.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack11[0] = surfaceImage0;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>(surfaceImage0);

        i = 1;

     label3:
        if i >= pyramidLevels goto label6;

        $r4 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack13 = $r4.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack12 = i - 1;

        $stack14 = $stack13[$stack12];

        $stack15 = virtualinvoke $stack14.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        w = $stack15 / 2;

        $r5 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack17 = $r5.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack16 = i - 1;

        $stack18 = $stack17[$stack16];

        $stack19 = virtualinvoke $stack18.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        h = $stack19 / 2;

        $r6 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack21 = $r6.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack20 = i - 1;

        $stack22 = $stack21[$stack20];

        d = virtualinvoke $stack22.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        $r7 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack25 = $r7.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack24 = i - 1;

        $stack26 = $stack25[$stack24];

        c = virtualinvoke $stack26.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        $r8 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack29 = $r8.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack28 = i - 1;

        $stack30 = $stack29[$stack28];

        o = virtualinvoke $stack30.<org.bytedeco.opencv.opencv_core.IplImage: int origin()>();

        $r9 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack32 = $r9.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack33 = $stack32[i];

        if $stack33 != null goto label4;

        $r10 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack43 = $r10.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack44 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int,int)>(w, h, d, c, o);

        $stack43[i] = $stack44;

        goto label5;

     label4:
        $r11 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack34 = $r11.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack35 = $stack34[i];

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>($stack35);

     label5:
        $r12 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack37 = $r12.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack36 = i - 1;

        $stack40 = $stack37[$stack36];

        $r13 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack38 = $r13.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] surfaceImage>;

        $stack39 = $stack38[i];

        $r14 = (org.bytedeco.opencv.opencv_core.CvArr) $stack40;

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) $stack39;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvPyrDown(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int)>($r14, $r15, 7);

        i = i + 1;

        goto label3;

     label6:
        return;
    }

    protected void prepareTransforms(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, int, org.bytedeco.javacv.ProCamTransformer$Parameters)
    {
        org.bytedeco.javacv.ProCamTransformer$Parameters p;
        org.bytedeco.javacv.ProjectiveColorTransformer$Parameters cameraParameters, projectorParameters;
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack14, $stack44;
        org.bytedeco.opencv.opencv_core.CvMat $stack15, H2, X, H1, $stack161, $stack18;
        int pyramidLevel, scale;
        double[] a, scale#10, $stack21;
        double a2, $stack46, $stack47, $stack48, $stack51, $stack52, $stack53, $stack56, $stack57, $stack58, $stack61, $stack62, $stack63, $stack126, $stack127, $stack128, $stack131, $stack132, $stack133, $stack136, $stack137, $stack138, $stack141, $stack142, $stack143, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42;
        org.bytedeco.javacv.ProjectorDevice $stack17;
        org.bytedeco.javacv.ProCamTransformer $r0, $r5, $r6;
        org.bytedeco.opencv.opencv_core.CvArr $r1, $r2, $r3, $r4;

        this := @this: ProCamTransformer;

        H1 := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        H2 := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        X := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        pyramidLevel := @parameter3: int;

        p := @parameter4: org.bytedeco.javacv.ProCamTransformer$Parameters;

        cameraParameters = virtualinvoke p.<org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.javacv.ProjectiveColorTransformer$Parameters getSurfaceParameters()>();

        projectorParameters = virtualinvoke p.<org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.javacv.ProjectiveColorTransformer$Parameters getProjectorParameters()>();

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack14 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack14 == null goto label1;

        $stack161 = virtualinvoke cameraParameters.<org.bytedeco.javacv.ProjectiveColorTransformer$Parameters: org.bytedeco.opencv.opencv_core.CvMat getH()>();

        $r1 = (org.bytedeco.opencv.opencv_core.CvArr) $stack161;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) H1;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r1, $r2);

     label1:
        $stack15 = virtualinvoke projectorParameters.<org.bytedeco.javacv.ProjectiveColorTransformer$Parameters: org.bytedeco.opencv.opencv_core.CvMat getH()>();

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) $stack15;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) H2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: double cvInvert(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r3, $r4);

        if pyramidLevel <= 0 goto label3;

        scale = 1 << pyramidLevel;

        $r5 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack44 = $r5.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack44 == null goto label2;

        $stack126 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack127 = (double) scale;

        $stack128 = $stack126 / $stack127;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack128);

        $stack131 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack132 = (double) scale;

        $stack133 = $stack131 / $stack132;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(5, $stack133);

        $stack136 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(6);

        $stack137 = (double) scale;

        $stack138 = $stack136 * $stack137;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(6, $stack138);

        $stack141 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(7);

        $stack142 = (double) scale;

        $stack143 = $stack141 * $stack142;

        virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(7, $stack143);

     label2:
        $stack46 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack47 = (double) scale;

        $stack48 = $stack46 / $stack47;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(2, $stack48);

        $stack51 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(5);

        $stack52 = (double) scale;

        $stack53 = $stack51 / $stack52;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(5, $stack53);

        $stack56 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(6);

        $stack57 = (double) scale;

        $stack58 = $stack56 * $stack57;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(6, $stack58);

        $stack61 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(7);

        $stack62 = (double) scale;

        $stack63 = $stack61 * $stack62;

        virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(int,double)>(7, $stack63);

     label3:
        $r6 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack17 = $r6.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectorDevice projector>;

        $stack18 = $stack17.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix>;

        scale#10 = virtualinvoke $stack18.<org.bytedeco.opencv.opencv_core.CvMat: double[] get()>();

        a = virtualinvoke projectorParameters.<org.bytedeco.javacv.ProjectiveColorTransformer$Parameters: double[] getColorParameters()>();

        a2 = a[0];

        $stack21 = newarray (double)[16];

        $stack22 = scale#10[0];

        $stack23 = a2 * $stack22;

        $stack21[0] = $stack23;

        $stack24 = scale#10[1];

        $stack25 = a2 * $stack24;

        $stack21[1] = $stack25;

        $stack26 = scale#10[2];

        $stack27 = a2 * $stack26;

        $stack21[2] = $stack27;

        $stack28 = a[1];

        $stack21[3] = $stack28;

        $stack29 = scale#10[3];

        $stack30 = a2 * $stack29;

        $stack21[4] = $stack30;

        $stack31 = scale#10[4];

        $stack32 = a2 * $stack31;

        $stack21[5] = $stack32;

        $stack33 = scale#10[5];

        $stack34 = a2 * $stack33;

        $stack21[6] = $stack34;

        $stack35 = a[2];

        $stack21[7] = $stack35;

        $stack36 = scale#10[6];

        $stack37 = a2 * $stack36;

        $stack21[8] = $stack37;

        $stack38 = scale#10[7];

        $stack39 = a2 * $stack38;

        $stack21[9] = $stack39;

        $stack40 = scale#10[8];

        $stack41 = a2 * $stack40;

        $stack21[10] = $stack41;

        $stack42 = a[3];

        $stack21[11] = $stack42;

        $stack21[12] = 0.0;

        $stack21[13] = 0.0;

        $stack21[14] = 0.0;

        $stack21[15] = 1.0;

        virtualinvoke X.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack21);

        return;
    }

    public void transform(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.CvRect, int, org.bytedeco.javacv.ImageTransformer$Parameters, boolean)
    {
        boolean inverse;
        org.bytedeco.javacv.ImageTransformer$Parameters parameters, $r2, $r5;
        org.bytedeco.javacv.ProCamTransformer$Parameters p;
        org.bytedeco.javacv.ProjectiveColorTransformer$Parameters cameraParameters, projectorParameters;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack12, $stack14, $stack20, $stack23, $stack27, $stack29, $stack35, $stack46, $stack49, $stack16, $stack17;
        int pyramidLevel, $stack13, $stack50;
        org.bytedeco.opencv.opencv_core.IplImage dstImage, $stack21, $stack24, $stack28, $stack30, srcImage, $stack36, $stack47, $stack18, $stack19;
        org.bytedeco.opencv.opencv_core.CvRect roi;
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack22, $stack25, $stack26, $stack34;
        double $stack32, $stack33;
        java.lang.UnsupportedOperationException $u0;
        org.bytedeco.javacv.ProCamTransformer $r0, $r1, $r3, $r4, $r6;
        org.bytedeco.opencv.opencv_core.CvArr $r7, $r8, $r9, $r10, $r11;

        this := @this: ProCamTransformer;

        srcImage := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        dstImage := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        roi := @parameter2: org.bytedeco.opencv.opencv_core.CvRect;

        pyramidLevel := @parameter3: int;

        parameters := @parameter4: org.bytedeco.javacv.ImageTransformer$Parameters;

        inverse := @parameter5: boolean;

        if inverse == 0 goto label1;

        $u0 = new java.lang.UnsupportedOperationException;

        specialinvoke $u0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Inverse transform not supported.");

        throw $u0;

     label1:
        p = (org.bytedeco.javacv.ProCamTransformer$Parameters) parameters;

        cameraParameters = virtualinvoke p.<org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.javacv.ProjectiveColorTransformer$Parameters getSurfaceParameters()>();

        projectorParameters = virtualinvoke p.<org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.javacv.ProjectiveColorTransformer$Parameters getProjectorParameters()>();

        $stack12 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        if $stack12 == null goto label2;

        $stack49 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack50 = lengthof $stack49;

        if $stack50 > pyramidLevel goto label3;

     label2:
        $stack13 = pyramidLevel + 1;

        $stack14 = newarray (org.bytedeco.opencv.opencv_core.IplImage)[$stack13];

        staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$002(org.bytedeco.javacv.ProCamTransformer$Parameters,org.bytedeco.opencv.opencv_core.IplImage[])>(p, $stack14);

     label3:
        $stack16 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack17 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack18 = $stack17[pyramidLevel];

        $stack19 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage createIfNotCompatible(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.IplImage)>($stack18, dstImage);

        $stack16[pyramidLevel] = $stack19;

        if roi != null goto label4;

        $stack46 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack47 = $stack46[pyramidLevel];

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvResetImageROI(org.bytedeco.opencv.opencv_core.IplImage)>($stack47);

        goto label5;

     label4:
        $stack20 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack21 = $stack20[pyramidLevel];

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetImageROI(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvRect)>($stack21, roi);

     label5:
        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack22 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack22 == null goto label6;

        $r1 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack34 = $r1.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        $stack35 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack36 = $stack35[pyramidLevel];

        $r2 = (org.bytedeco.javacv.ImageTransformer$Parameters) cameraParameters;

        virtualinvoke $stack34.<org.bytedeco.javacv.ProjectiveColorTransformer: void transform(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvRect,int,org.bytedeco.javacv.ImageTransformer$Parameters,boolean)>(srcImage, $stack36, roi, pyramidLevel, $r2, 0);

     label6:
        $r3 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack25 = $r3.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer>;

        $r4 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack23 = $r4.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack24 = $stack23[pyramidLevel];

        $r5 = (org.bytedeco.javacv.ImageTransformer$Parameters) projectorParameters;

        virtualinvoke $stack25.<org.bytedeco.javacv.ProjectiveColorTransformer: void transform(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvRect,int,org.bytedeco.javacv.ImageTransformer$Parameters,boolean)>($stack24, dstImage, roi, pyramidLevel, $r5, 0);

        $r6 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack26 = $r6.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack26 == null goto label7;

        $stack29 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack30 = $stack29[pyramidLevel];

        $stack32 = virtualinvoke dstImage.<org.bytedeco.opencv.opencv_core.IplImage: double highValue()>();

        $stack33 = 1.0 / $stack32;

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) dstImage;

        $r8 = (org.bytedeco.opencv.opencv_core.CvArr) $stack30;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) dstImage;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double)>($r7, $r8, $r9, $stack33);

        goto label8;

     label7:
        $stack27 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.IplImage[] access$000(org.bytedeco.javacv.ProCamTransformer$Parameters)>(p);

        $stack28 = $stack27[pyramidLevel];

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) $stack28;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) dstImage;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvCopy(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r10, $r11);

     label8:
        return;
    }

    public void transform(org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.javacv.ImageTransformer$Parameters, boolean)
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack5, $stack8;
        org.bytedeco.opencv.opencv_core.CvMat dstPts, srcPts;
        org.bytedeco.javacv.ImageTransformer$Parameters parameters, $r2;
        org.bytedeco.javacv.ProCamTransformer$Parameters $stack7;
        org.bytedeco.javacv.ProjectiveColorTransformer$Parameters $stack9;
        boolean inverse;
        org.bytedeco.javacv.ProCamTransformer $r0, $r1;

        this := @this: ProCamTransformer;

        srcPts := @parameter0: org.bytedeco.opencv.opencv_core.CvMat;

        dstPts := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        parameters := @parameter2: org.bytedeco.javacv.ImageTransformer$Parameters;

        inverse := @parameter3: boolean;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack5 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack5 == null goto label1;

        $r1 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack8 = $r1.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        $stack7 = (org.bytedeco.javacv.ProCamTransformer$Parameters) parameters;

        $stack9 = staticinvoke <org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.javacv.ProjectiveColorTransformer$Parameters access$100(org.bytedeco.javacv.ProCamTransformer$Parameters)>($stack7);

        $r2 = (org.bytedeco.javacv.ImageTransformer$Parameters) $stack9;

        virtualinvoke $stack8.<org.bytedeco.javacv.ProjectiveColorTransformer: void transform(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.javacv.ImageTransformer$Parameters,boolean)>(srcPts, dstPts, $r2, inverse);

        goto label2;

     label1:
        if dstPts == srcPts goto label2;

        virtualinvoke dstPts.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(org.bytedeco.opencv.opencv_core.CvMat)>(srcPts);

     label2:
        return;
    }

    public void transform(org.bytedeco.javacv.ImageTransformer$Data[], org.bytedeco.opencv.opencv_core.CvRect, org.bytedeco.javacv.ImageTransformer$Parameters[], boolean[])
    {
        boolean $stack8, $stack152;
        ProCamTransformer this;
        org.bytedeco.opencv.cvkernels$KernelData $stack9, $stack26, $stack30, $stack32, $stack34, $stack38, $stack40, $stack43, $stack46, $stack49, $stack55, $stack61, $stack66, $stack70, $stack74, $stack78, $stack82, $stack86, $stack101, $stack106, $stack110, $stack114, $stack118, $stack122, $stack206, $u1;
        org.bytedeco.javacv.ImageTransformer$Data[] data;
        int $stack11, $stack16, $stack21, $stack28, $stack36, $stack42, $stack45, $stack48, $stack58, $stack95, $stack176, $stack177, $stack187, $stack188, $stack193, $stack196, $stack203, $stack204, $stack208, $stack214, $stack215, i, $stack19, $stack24, $stack25;
        long $stack12, $stack29, $stack37, $stack54, $stack207, $stack209, i#38;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack14, $stack63, $stack88, $stack103;
        org.bytedeco.opencv.opencv_core.CvMat[] $stack17, $stack20, $stack22, $stack89, $stack90, $stack91, $stack99, $stack104, $stack108, $stack171, $stack175, $stack182, $stack186, $stack194, $stack195, $stack198, $stack202, $stack13, $stack15, $stack18, $stack23;
        org.bytedeco.opencv.opencv_core.CvRect roi;
        org.bytedeco.opencv.opencv_core.CvScalar $stack33;
        org.bytedeco.javacv.ImageTransformer$Data $stack41, $stack44, $stack47, $stack50, $stack57, $stack64, $stack68, $stack72, $stack76, $stack80, $stack84, $stack92, $stack112, $stack116, $stack120;
        double $stack51, $stack81, $stack85;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack59;
        org.bytedeco.opencv.opencv_core.IplImage $stack60, $stack69, $stack73, $stack77, $stack113, $stack117, $stack65;
        boolean[] inverses;
        org.bytedeco.javacv.ImageTransformer$Parameters[] parameters;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack93;
        org.bytedeco.javacv.ProCamTransformer$Parameters $stack94;
        org.bytedeco.opencv.opencv_core.CvMat $stack96, $stack97, $stack100, $stack109, $stack172, $stack183, $stack199, $stack98, $stack105;
        java.nio.DoubleBuffer $stack121;
        byte $stack210;
        java.lang.AssertionError $u0;
        java.lang.UnsupportedOperationException $u2;
        org.bytedeco.javacv.ProCamTransformer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53;

        this := @this: ProCamTransformer;

        data := @parameter0: org.bytedeco.javacv.ImageTransformer$Data[];

        roi := @parameter1: org.bytedeco.opencv.opencv_core.CvRect;

        parameters := @parameter2: org.bytedeco.javacv.ImageTransformer$Parameters[];

        inverses := @parameter3: boolean[];

        $stack8 = <org.bytedeco.javacv.ProCamTransformer: boolean $assertionsDisabled>;

        if $stack8 != 0 goto label01;

        $stack215 = lengthof data;

        $stack214 = lengthof parameters;

        if $stack215 == $stack214 goto label01;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label01:
        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack9 = $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        if $stack9 == null goto label02;

        $r1 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack206 = $r1.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack207 = virtualinvoke $stack206.<org.bytedeco.opencv.cvkernels$KernelData: long capacity()>();

        $stack208 = lengthof data;

        $stack209 = (long) $stack208;

        $stack210 = $stack207 cmp $stack209;

        if $stack210 >= 0 goto label03;

     label02:
        $u1 = new org.bytedeco.opencv.cvkernels$KernelData;

        $stack11 = lengthof data;

        $stack12 = (long) $stack11;

        specialinvoke $u1.<org.bytedeco.opencv.cvkernels$KernelData: void <init>(long)>($stack12);

        $r2 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r2.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData> = $u1;

     label03:
        $r3 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack13 = $r3.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1>;

        if $stack13 == null goto label04;

        $r4 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack202 = $r4.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1>;

        $stack204 = lengthof $stack202;

        $stack203 = lengthof data;

        if $stack204 >= $stack203 goto label06;

     label04:
        $r5 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack14 = $r5.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack14 == null goto label06;

        $stack193 = lengthof data;

        $stack194 = newarray (org.bytedeco.opencv.opencv_core.CvMat)[$stack193];

        $r6 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r6.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1> = $stack194;

        i = 0;

     label05:
        $r7 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack195 = $r7.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1>;

        $stack196 = lengthof $stack195;

        if i >= $stack196 goto label06;

        $r8 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack198 = $r8.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1>;

        $stack199 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $stack198[i] = $stack199;

        i = i + 1;

        goto label05;

     label06:
        $r9 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack15 = $r9.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2>;

        if $stack15 == null goto label07;

        $r10 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack186 = $r10.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2>;

        $stack188 = lengthof $stack186;

        $stack187 = lengthof data;

        if $stack188 >= $stack187 goto label09;

     label07:
        $stack16 = lengthof data;

        $stack17 = newarray (org.bytedeco.opencv.opencv_core.CvMat)[$stack16];

        $r11 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r11.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2> = $stack17;

        i = 0;

     label08:
        $r12 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack18 = $r12.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2>;

        $stack19 = lengthof $stack18;

        if i >= $stack19 goto label09;

        $r13 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack182 = $r13.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2>;

        $stack183 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(3, 3);

        $stack182[i] = $stack183;

        i = i + 1;

        goto label08;

     label09:
        $r14 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack20 = $r14.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X>;

        if $stack20 == null goto label10;

        $r15 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack175 = $r15.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X>;

        $stack177 = lengthof $stack175;

        $stack176 = lengthof data;

        if $stack177 >= $stack176 goto label12;

     label10:
        $stack21 = lengthof data;

        $stack22 = newarray (org.bytedeco.opencv.opencv_core.CvMat)[$stack21];

        $r16 = (org.bytedeco.javacv.ProCamTransformer) this;

        $r16.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X> = $stack22;

        i = 0;

     label11:
        $r17 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack23 = $r17.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X>;

        $stack24 = lengthof $stack23;

        if i >= $stack24 goto label12;

        $r18 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack171 = $r18.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X>;

        $stack172 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat create(int,int)>(4, 4);

        $stack171[i] = $stack172;

        i = i + 1;

        goto label11;

     label12:
        i = 0;

     label13:
        $stack25 = lengthof data;

        if i >= $stack25 goto label21;

        $r19 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack55 = $r19.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack54 = (long) i;

        virtualinvoke $stack55.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack54);

        $r20 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack61 = $r20.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $r21 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack59 = $r21.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImage>;

        $stack57 = data[i];

        $stack58 = $stack57.<org.bytedeco.javacv.ImageTransformer$Data: int pyramidLevel>;

        $stack60 = $stack59[$stack58];

        virtualinvoke $stack61.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData srcImg(org.bytedeco.opencv.opencv_core.IplImage)>($stack60);

        $r22 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack66 = $r22.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $r23 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack63 = $r23.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack63 != null goto label14;

        $stack65 = null;

        goto label15;

     label14:
        $stack64 = data[i];

        $stack65 = $stack64.<org.bytedeco.javacv.ImageTransformer$Data: org.bytedeco.opencv.opencv_core.IplImage srcImg>;

     label15:
        virtualinvoke $stack66.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData srcImg2(org.bytedeco.opencv.opencv_core.IplImage)>($stack65);

        $r24 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack70 = $r24.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack68 = data[i];

        $stack69 = $stack68.<org.bytedeco.javacv.ImageTransformer$Data: org.bytedeco.opencv.opencv_core.IplImage subImg>;

        virtualinvoke $stack70.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData subImg(org.bytedeco.opencv.opencv_core.IplImage)>($stack69);

        $r25 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack74 = $r25.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack72 = data[i];

        $stack73 = $stack72.<org.bytedeco.javacv.ImageTransformer$Data: org.bytedeco.opencv.opencv_core.IplImage srcDotImg>;

        virtualinvoke $stack74.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData srcDotImg(org.bytedeco.opencv.opencv_core.IplImage)>($stack73);

        $r26 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack78 = $r26.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack76 = data[i];

        $stack77 = $stack76.<org.bytedeco.javacv.ImageTransformer$Data: org.bytedeco.opencv.opencv_core.IplImage mask>;

        virtualinvoke $stack78.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData mask(org.bytedeco.opencv.opencv_core.IplImage)>($stack77);

        $r27 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack82 = $r27.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack80 = data[i];

        $stack81 = $stack80.<org.bytedeco.javacv.ImageTransformer$Data: double zeroThreshold>;

        virtualinvoke $stack82.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData zeroThreshold(double)>($stack81);

        $r28 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack86 = $r28.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack84 = data[i];

        $stack85 = $stack84.<org.bytedeco.javacv.ImageTransformer$Data: double outlierThreshold>;

        virtualinvoke $stack86.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData outlierThreshold(double)>($stack85);

        if inverses == null goto label16;

        $stack152 = inverses[i];

        if $stack152 == 0 goto label16;

        $u2 = new java.lang.UnsupportedOperationException;

        specialinvoke $u2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Inverse transform not supported.");

        throw $u2;

     label16:
        $r29 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack88 = $r29.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack88 != null goto label17;

        $stack98 = null;

        goto label18;

     label17:
        $r30 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack89 = $r30.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1>;

        $stack98 = $stack89[i];

     label18:
        $r31 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack90 = $r31.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2>;

        $stack97 = $stack90[i];

        $r32 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack91 = $r32.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X>;

        $stack96 = $stack91[i];

        $stack92 = data[i];

        $stack95 = $stack92.<org.bytedeco.javacv.ImageTransformer$Data: int pyramidLevel>;

        $stack93 = parameters[i];

        $stack94 = (org.bytedeco.javacv.ProCamTransformer$Parameters) $stack93;

        $r33 = (org.bytedeco.javacv.ProCamTransformer) this;

        virtualinvoke $r33.<org.bytedeco.javacv.ProCamTransformer: void prepareTransforms(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,int,org.bytedeco.javacv.ProCamTransformer$Parameters)>($stack98, $stack97, $stack96, $stack95, $stack94);

        $r34 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack101 = $r34.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $r35 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack99 = $r35.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H2>;

        $stack100 = $stack99[i];

        virtualinvoke $stack101.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData H1(org.bytedeco.opencv.opencv_core.CvMat)>($stack100);

        $r36 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack106 = $r36.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $r37 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack103 = $r37.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack103 != null goto label19;

        $stack105 = null;

        goto label20;

     label19:
        $r38 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack104 = $r38.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] H1>;

        $stack105 = $stack104[i];

     label20:
        virtualinvoke $stack106.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData H2(org.bytedeco.opencv.opencv_core.CvMat)>($stack105);

        $r39 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack110 = $r39.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $r40 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack108 = $r40.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvMat[] X>;

        $stack109 = $stack108[i];

        virtualinvoke $stack110.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData X(org.bytedeco.opencv.opencv_core.CvMat)>($stack109);

        $r41 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack114 = $r41.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack112 = data[i];

        $stack113 = $stack112.<org.bytedeco.javacv.ImageTransformer$Data: org.bytedeco.opencv.opencv_core.IplImage transImg>;

        virtualinvoke $stack114.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData transImg(org.bytedeco.opencv.opencv_core.IplImage)>($stack113);

        $r42 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack118 = $r42.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack116 = data[i];

        $stack117 = $stack116.<org.bytedeco.javacv.ImageTransformer$Data: org.bytedeco.opencv.opencv_core.IplImage dstImg>;

        virtualinvoke $stack118.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstImg(org.bytedeco.opencv.opencv_core.IplImage)>($stack117);

        $r43 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack122 = $r43.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack120 = data[i];

        $stack121 = $stack120.<org.bytedeco.javacv.ImageTransformer$Data: java.nio.DoubleBuffer dstDstDot>;

        virtualinvoke $stack122.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstDstDot(java.nio.DoubleBuffer)>($stack121);

        i = i + 1;

        goto label13;

     label21:
        $r44 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack26 = $r44.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        i#38 = virtualinvoke $stack26.<org.bytedeco.opencv.cvkernels$KernelData: long capacity()>();

        $r45 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack30 = $r45.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack28 = lengthof data;

        $stack29 = (long) $stack28;

        virtualinvoke $stack30.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.javacpp.Pointer capacity(long)>($stack29);

        $r46 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack32 = $r46.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $r47 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack33 = virtualinvoke $r47.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.opencv_core.CvScalar getFillColor()>();

        staticinvoke <org.bytedeco.javacv.cvkernels: void multiWarpColorTransform(org.bytedeco.opencv.cvkernels$KernelData,org.bytedeco.opencv.opencv_core.CvRect,org.bytedeco.opencv.opencv_core.CvScalar)>($stack32, roi, $stack33);

        $r48 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack34 = $r48.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        virtualinvoke $stack34.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.javacpp.Pointer capacity(long)>(i#38);

        i = 0;

     label22:
        $stack36 = lengthof data;

        if i >= $stack36 goto label23;

        $r49 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack38 = $r49.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack37 = (long) i;

        virtualinvoke $stack38.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack37);

        $stack41 = data[i];

        $r50 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack40 = $r50.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack42 = virtualinvoke $stack40.<org.bytedeco.opencv.cvkernels$KernelData: int dstCount()>();

        $stack41.<org.bytedeco.javacv.ImageTransformer$Data: int dstCount> = $stack42;

        $stack44 = data[i];

        $r51 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack43 = $r51.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack45 = virtualinvoke $stack43.<org.bytedeco.opencv.cvkernels$KernelData: int dstCountZero()>();

        $stack44.<org.bytedeco.javacv.ImageTransformer$Data: int dstCountZero> = $stack45;

        $stack47 = data[i];

        $r52 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack46 = $r52.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack48 = virtualinvoke $stack46.<org.bytedeco.opencv.cvkernels$KernelData: int dstCountOutlier()>();

        $stack47.<org.bytedeco.javacv.ImageTransformer$Data: int dstCountOutlier> = $stack48;

        $stack50 = data[i];

        $r53 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack49 = $r53.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.opencv.cvkernels$KernelData kernelData>;

        $stack51 = virtualinvoke $stack49.<org.bytedeco.opencv.cvkernels$KernelData: double srcDstDot()>();

        $stack50.<org.bytedeco.javacv.ImageTransformer$Data: double srcDstDot> = $stack51;

        i = i + 1;

        goto label22;

     label23:
        return;
    }

    public org.bytedeco.javacv.ProCamTransformer$Parameters createParameters()
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProCamTransformer$Parameters $u0;
        org.bytedeco.javacv.ProCamTransformer $r0;

        this := @this: ProCamTransformer;

        $u0 = new org.bytedeco.javacv.ProCamTransformer$Parameters;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        specialinvoke $u0.<org.bytedeco.javacv.ProCamTransformer$Parameters: void <init>(org.bytedeco.javacv.ProCamTransformer)>($r0);

        return $u0;
    }

    public volatile org.bytedeco.javacv.ImageTransformer$Parameters createParameters()
    {
        ProCamTransformer this;
        org.bytedeco.javacv.ProCamTransformer$Parameters $stack1;
        org.bytedeco.javacv.ProCamTransformer $r0;
        org.bytedeco.javacv.ImageTransformer$Parameters $r1;

        this := @this: ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ProCamTransformer) this;

        $stack1 = virtualinvoke $r0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProCamTransformer$Parameters createParameters()>();

        $r1 = (org.bytedeco.javacv.ImageTransformer$Parameters) $stack1;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/bytedeco/javacv/ProCamTransformer;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.bytedeco.javacv.ProCamTransformer: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
