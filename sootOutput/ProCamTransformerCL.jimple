public class ProCamTransformerCL extends org.bytedeco.javacv.ProCamTransformer implements org.bytedeco.javacv.ImageTransformerCL
{
    private static final java.lang.ThreadLocal H13x3;
    private static final java.lang.ThreadLocal H23x3;
    private static final java.lang.ThreadLocal X4x4;
    protected final org.bytedeco.javacv.JavaCVCL context;
    protected final int nullSize;
    protected final com.jogamp.opencl.CLBuffer H1Buffer;
    protected final com.jogamp.opencl.CLBuffer H2Buffer;
    protected final com.jogamp.opencl.CLBuffer XBuffer;
    protected com.jogamp.opencl.CLImage2d[] projectorImageCL;
    protected com.jogamp.opencl.CLImage2d[] surfaceImageCL;
    private com.jogamp.opencl.CLKernel oneKernel;
    private com.jogamp.opencl.CLKernel subKernel;
    private com.jogamp.opencl.CLKernel dotKernel;
    private com.jogamp.opencl.CLKernel reduceKernel;
    static final boolean $assertionsDisabled;

    public void <init>(org.bytedeco.javacv.JavaCVCL, double[], org.bytedeco.javacv.CameraDevice, org.bytedeco.javacv.ProjectorDevice)
    {
        ProCamTransformerCL this;
        org.bytedeco.javacv.JavaCVCL context;
        double[] referencePoints;
        org.bytedeco.javacv.CameraDevice camera;
        org.bytedeco.javacv.ProjectorDevice projector;
        org.bytedeco.javacv.ProCamTransformerCL $r0;

        this := @this: ProCamTransformerCL;

        context := @parameter0: org.bytedeco.javacv.JavaCVCL;

        referencePoints := @parameter1: double[];

        camera := @parameter2: org.bytedeco.javacv.CameraDevice;

        projector := @parameter3: org.bytedeco.javacv.ProjectorDevice;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        specialinvoke $r0.<org.bytedeco.javacv.ProCamTransformerCL: void <init>(org.bytedeco.javacv.JavaCVCL,double[],org.bytedeco.javacv.CameraDevice,org.bytedeco.javacv.ProjectorDevice,org.bytedeco.opencv.opencv_core.CvMat)>(context, referencePoints, camera, projector, null);

        return;
    }

    public void <init>(org.bytedeco.javacv.JavaCVCL, double[], org.bytedeco.javacv.CameraDevice, org.bytedeco.javacv.ProjectorDevice, org.bytedeco.opencv.opencv_core.CvMat)
    {
        ProCamTransformerCL this;
        double[] referencePoints;
        org.bytedeco.javacv.CameraDevice camera;
        org.bytedeco.javacv.ProjectorDevice projector;
        org.bytedeco.opencv.opencv_core.CvMat n;
        org.bytedeco.javacv.ProCamTransformer$Parameters $stack8;
        int dotSize, $stack15, $stack20, $stack25;
        org.bytedeco.javacv.JavaCVCL context;
        boolean $stack10;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack11;
        com.jogamp.opencl.CLContext $stack12, $stack17, $stack22;
        com.jogamp.opencl.CLMemory$Mem[] $stack13, $stack18, $stack23;
        com.jogamp.opencl.CLMemory$Mem $stack14, $stack19, $stack24;
        com.jogamp.opencl.CLBuffer $stack21, $stack26, $stack16;
        java.lang.Class $stack27;
        java.lang.StringBuilder $stack29, $stack30, $u0;
        java.lang.String $stack31;
        java.lang.String[] $stack32;
        com.jogamp.opencl.CLKernel[] kernels;
        com.jogamp.opencl.CLKernel $stack34, $stack35, $stack36, $stack37;
        byte $stack53;
        org.bytedeco.javacv.ProCamTransformerCL $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        this := @this: ProCamTransformerCL;

        context := @parameter0: org.bytedeco.javacv.JavaCVCL;

        referencePoints := @parameter1: double[];

        camera := @parameter2: org.bytedeco.javacv.CameraDevice;

        projector := @parameter3: org.bytedeco.javacv.ProjectorDevice;

        n := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        specialinvoke this.<org.bytedeco.javacv.ProCamTransformer: void <init>(double[],org.bytedeco.javacv.CameraDevice,org.bytedeco.javacv.ProjectorDevice,org.bytedeco.opencv.opencv_core.CvMat)>(referencePoints, camera, projector, n);

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r0.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL> = null;

        $r1 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r1.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL> = null;

        $r2 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack8 = virtualinvoke $r2.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProCamTransformer$Parameters createParameters()>();

        dotSize = virtualinvoke $stack8.<org.bytedeco.javacv.ProCamTransformer$Parameters: int size()>();

        $r3 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r3.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context> = context;

        $stack10 = staticinvoke <com.jogamp.common.os.Platform: boolean is32Bit()>();

        if $stack10 == 0 goto label1;

        $stack53 = 4;

        goto label2;

     label1:
        $stack53 = 8;

     label2:
        $r4 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r4.<org.bytedeco.javacv.ProCamTransformerCL: int nullSize> = $stack53;

        $r5 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack11 = $r5.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack11 != null goto label3;

        $stack16 = null;

        goto label4;

     label3:
        $stack12 = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack15 = dotSize * 9;

        $stack13 = newarray (com.jogamp.opencl.CLMemory$Mem)[1];

        $stack14 = <com.jogamp.opencl.CLMemory$Mem: com.jogamp.opencl.CLMemory$Mem READ_ONLY>;

        $stack13[0] = $stack14;

        $stack16 = virtualinvoke $stack12.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLBuffer createFloatBuffer(int,com.jogamp.opencl.CLMemory$Mem[])>($stack15, $stack13);

     label4:
        $r6 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r6.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H1Buffer> = $stack16;

        $stack17 = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack20 = dotSize * 9;

        $stack18 = newarray (com.jogamp.opencl.CLMemory$Mem)[1];

        $stack19 = <com.jogamp.opencl.CLMemory$Mem: com.jogamp.opencl.CLMemory$Mem READ_ONLY>;

        $stack18[0] = $stack19;

        $stack21 = virtualinvoke $stack17.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLBuffer createFloatBuffer(int,com.jogamp.opencl.CLMemory$Mem[])>($stack20, $stack18);

        $r7 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r7.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H2Buffer> = $stack21;

        $stack22 = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack25 = dotSize * 16;

        $stack23 = newarray (com.jogamp.opencl.CLMemory$Mem)[1];

        $stack24 = <com.jogamp.opencl.CLMemory$Mem: com.jogamp.opencl.CLMemory$Mem READ_ONLY>;

        $stack23[0] = $stack24;

        $stack26 = virtualinvoke $stack22.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLBuffer createFloatBuffer(int,com.jogamp.opencl.CLMemory$Mem[])>($stack25, $stack23);

        $r8 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r8.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer XBuffer> = $stack26;

        $stack27 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        if $stack27 != class "Lorg/bytedeco/javacv/ProCamTransformerCL;" goto label5;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-cl-fast-relaxed-math -cl-mad-enable -cl-nv-maxrregcount=32 -DDOT_SIZE=");

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(dotSize);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack32 = newarray (java.lang.String)[4];

        $stack32[0] = "transformOne";

        $stack32[1] = "transformSub";

        $stack32[2] = "transformDot";

        $stack32[3] = "reduceOutputData";

        kernels = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLKernel[] buildKernels(java.lang.String,java.lang.String,java.lang.String[])>($stack31, "ImageTransformer.cl:ProCamTransformer.cl", $stack32);

        $stack34 = kernels[0];

        $r9 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r9.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel oneKernel> = $stack34;

        $stack35 = kernels[1];

        $r10 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r10.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel subKernel> = $stack35;

        $stack36 = kernels[2];

        $r11 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r11.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel dotKernel> = $stack36;

        $stack37 = kernels[3];

        $r12 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r12.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel reduceKernel> = $stack37;

     label5:
        return;
    }

    public org.bytedeco.javacv.JavaCVCL getContext()
    {
        ProCamTransformerCL this;
        org.bytedeco.javacv.JavaCVCL $stack1;
        org.bytedeco.javacv.ProCamTransformerCL $r0;

        this := @this: ProCamTransformerCL;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        return $stack1;
    }

    public org.bytedeco.javacv.ProjectiveColorTransformerCL getSurfaceTransformerCL()
    {
        ProCamTransformerCL this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack1;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $stack2;
        org.bytedeco.javacv.ProCamTransformerCL $r0;

        this := @this: ProCamTransformerCL;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        $stack2 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) $stack1;

        return $stack2;
    }

    public org.bytedeco.javacv.ProjectiveColorTransformerCL getProjectorTransformerCL()
    {
        ProCamTransformerCL this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack1;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $stack2;
        org.bytedeco.javacv.ProCamTransformerCL $r0;

        this := @this: ProCamTransformerCL;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer projectorTransformer>;

        $stack2 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) $stack1;

        return $stack2;
    }

    public com.jogamp.opencl.CLImage2d getProjectorImageCL(int)
    {
        ProCamTransformerCL this;
        int pyramidLevel;
        com.jogamp.opencl.CLImage2d[] $stack2;
        com.jogamp.opencl.CLImage2d $stack3;
        org.bytedeco.javacv.ProCamTransformerCL $r0;

        this := @this: ProCamTransformerCL;

        pyramidLevel := @parameter0: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack2 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack3 = $stack2[pyramidLevel];

        return $stack3;
    }

    public void setProjectorImageCL(com.jogamp.opencl.CLImage2d, int, int)
    {
        ProCamTransformerCL this;
        com.jogamp.opencl.CLImage2d[] $stack8, $stack10, $stack12, $stack15, $stack16, $stack23, $stack27, $stack34, $stack44, $stack11;
        int maxPyramidLevel, $stack9, minPyramidLevel, $stack14, $stack22, $stack25, w, $stack26, $stack29, h, $stack45, $stack46, i;
        com.jogamp.opencl.CLImage2d projectorImage0, $stack13, $stack17, $stack18, $stack24, $stack28, $stack37;
        org.bytedeco.javacv.JavaCVCL $stack19, $stack33;
        com.jogamp.opencl.CLImageFormat$ChannelType $stack31;
        com.jogamp.opencl.CLImageFormat$ChannelOrder $stack32;
        com.jogamp.opencl.CLContext $stack35;
        com.jogamp.opencl.CLMemory$Mem[] $stack36;
        com.jogamp.opencl.CLImageFormat $u0;
        org.bytedeco.javacv.ProCamTransformerCL $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: ProCamTransformerCL;

        projectorImage0 := @parameter0: com.jogamp.opencl.CLImage2d;

        minPyramidLevel := @parameter1: int;

        maxPyramidLevel := @parameter2: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack8 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        if $stack8 == null goto label1;

        $r1 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack44 = $r1.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack46 = lengthof $stack44;

        $stack45 = maxPyramidLevel + 1;

        if $stack46 == $stack45 goto label2;

     label1:
        $stack9 = maxPyramidLevel + 1;

        $stack10 = newarray (com.jogamp.opencl.CLImage2d)[$stack9];

        $r2 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r2.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL> = $stack10;

     label2:
        $r3 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack11 = $r3.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack11[minPyramidLevel] = projectorImage0;

        i = minPyramidLevel + 1;

     label3:
        if i > maxPyramidLevel goto label5;

        $r4 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack12 = $r4.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack13 = $stack12[i];

        if $stack13 != null goto label4;

        $r5 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack23 = $r5.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack22 = i - 1;

        $stack24 = $stack23[$stack22];

        $stack25 = $stack24.<com.jogamp.opencl.CLImage2d: int width>;

        w = $stack25 / 2;

        $r6 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack27 = $r6.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack26 = i - 1;

        $stack28 = $stack27[$stack26];

        $stack29 = $stack28.<com.jogamp.opencl.CLImage2d: int height>;

        h = $stack29 / 2;

        $u0 = new com.jogamp.opencl.CLImageFormat;

        $stack32 = <com.jogamp.opencl.CLImageFormat$ChannelOrder: com.jogamp.opencl.CLImageFormat$ChannelOrder RGBA>;

        $stack31 = <com.jogamp.opencl.CLImageFormat$ChannelType: com.jogamp.opencl.CLImageFormat$ChannelType FLOAT>;

        specialinvoke $u0.<com.jogamp.opencl.CLImageFormat: void <init>(com.jogamp.opencl.CLImageFormat$ChannelOrder,com.jogamp.opencl.CLImageFormat$ChannelType)>($stack32, $stack31);

        $r7 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack34 = $r7.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $r8 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack33 = $r8.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $stack35 = virtualinvoke $stack33.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack36 = newarray (com.jogamp.opencl.CLMemory$Mem)[0];

        $stack37 = virtualinvoke $stack35.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLImage2d createImage2d(int,int,com.jogamp.opencl.CLImageFormat,com.jogamp.opencl.CLMemory$Mem[])>(w, h, $u0, $stack36);

        $stack34[i] = $stack37;

     label4:
        $r9 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack19 = $r9.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r10 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack15 = $r10.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack14 = i - 1;

        $stack18 = $stack15[$stack14];

        $r11 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack16 = $r11.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack17 = $stack16[i];

        virtualinvoke $stack19.<org.bytedeco.javacv.JavaCVCL: void pyrDown(com.jogamp.opencl.CLImage2d,com.jogamp.opencl.CLImage2d)>($stack18, $stack17);

        i = i + 1;

        goto label3;

     label5:
        return;
    }

    public com.jogamp.opencl.CLImage2d getSurfaceImageCL(int)
    {
        ProCamTransformerCL this;
        int pyramidLevel;
        com.jogamp.opencl.CLImage2d[] $stack2;
        com.jogamp.opencl.CLImage2d $stack3;
        org.bytedeco.javacv.ProCamTransformerCL $r0;

        this := @this: ProCamTransformerCL;

        pyramidLevel := @parameter0: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack2 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack3 = $stack2[pyramidLevel];

        return $stack3;
    }

    public void setSurfaceImageCL(com.jogamp.opencl.CLImage2d, int)
    {
        ProCamTransformerCL this;
        com.jogamp.opencl.CLImage2d[] $stack7, $stack8, $stack10, $stack13, $stack14, $stack21, $stack25, $stack32, $stack42, $stack9;
        int pyramidLevels, $stack12, $stack20, $stack23, w, $stack24, $stack27, h, $stack43, i;
        com.jogamp.opencl.CLImage2d surfaceImage0, $stack11, $stack15, $stack16, $stack22, $stack26, $stack35;
        org.bytedeco.javacv.JavaCVCL $stack17, $stack31;
        com.jogamp.opencl.CLImageFormat$ChannelType $stack29;
        com.jogamp.opencl.CLImageFormat$ChannelOrder $stack30;
        com.jogamp.opencl.CLContext $stack33;
        com.jogamp.opencl.CLMemory$Mem[] $stack34;
        com.jogamp.opencl.CLImageFormat $u0;
        org.bytedeco.javacv.ProCamTransformerCL $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: ProCamTransformerCL;

        surfaceImage0 := @parameter0: com.jogamp.opencl.CLImage2d;

        pyramidLevels := @parameter1: int;

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack7 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        if $stack7 == null goto label1;

        $r1 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack42 = $r1.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack43 = lengthof $stack42;

        if $stack43 == pyramidLevels goto label2;

     label1:
        $stack8 = newarray (com.jogamp.opencl.CLImage2d)[pyramidLevels];

        $r2 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $r2.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL> = $stack8;

     label2:
        $r3 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack9 = $r3.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack9[0] = surfaceImage0;

        i = 1;

     label3:
        if i >= pyramidLevels goto label5;

        $r4 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack10 = $r4.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack11 = $stack10[i];

        if $stack11 != null goto label4;

        $r5 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack21 = $r5.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack20 = i - 1;

        $stack22 = $stack21[$stack20];

        $stack23 = $stack22.<com.jogamp.opencl.CLImage2d: int width>;

        w = $stack23 / 2;

        $r6 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack25 = $r6.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack24 = i - 1;

        $stack26 = $stack25[$stack24];

        $stack27 = $stack26.<com.jogamp.opencl.CLImage2d: int height>;

        h = $stack27 / 2;

        $u0 = new com.jogamp.opencl.CLImageFormat;

        $stack30 = <com.jogamp.opencl.CLImageFormat$ChannelOrder: com.jogamp.opencl.CLImageFormat$ChannelOrder RGBA>;

        $stack29 = <com.jogamp.opencl.CLImageFormat$ChannelType: com.jogamp.opencl.CLImageFormat$ChannelType FLOAT>;

        specialinvoke $u0.<com.jogamp.opencl.CLImageFormat: void <init>(com.jogamp.opencl.CLImageFormat$ChannelOrder,com.jogamp.opencl.CLImageFormat$ChannelType)>($stack30, $stack29);

        $r7 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack32 = $r7.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $r8 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack31 = $r8.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $stack33 = virtualinvoke $stack31.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack34 = newarray (com.jogamp.opencl.CLMemory$Mem)[0];

        $stack35 = virtualinvoke $stack33.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLImage2d createImage2d(int,int,com.jogamp.opencl.CLImageFormat,com.jogamp.opencl.CLMemory$Mem[])>(w, h, $u0, $stack34);

        $stack32[i] = $stack35;

     label4:
        $r9 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack17 = $r9.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r10 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack13 = $r10.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack12 = i - 1;

        $stack16 = $stack13[$stack12];

        $r11 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack14 = $r11.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] surfaceImageCL>;

        $stack15 = $stack14[i];

        virtualinvoke $stack17.<org.bytedeco.javacv.JavaCVCL: void pyrDown(com.jogamp.opencl.CLImage2d,com.jogamp.opencl.CLImage2d)>($stack16, $stack15);

        i = i + 1;

        goto label3;

     label5:
        return;
    }

    protected void prepareTransforms(com.jogamp.opencl.CLBuffer, com.jogamp.opencl.CLBuffer, com.jogamp.opencl.CLBuffer, int, org.bytedeco.javacv.ImageTransformer$Parameters[])
    {
        ProCamTransformerCL this;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack14, $stack28, $stack34, $stack44;
        com.jogamp.opencl.CLBuffer H1Buffer, H2Buffer, XBuffer;
        java.nio.Buffer $stack15, $stack16, $stack17, $stack18, $stack19, $stack20;
        java.nio.FloatBuffer floatH1, floatH2, floatX, $stack64;
        java.lang.ThreadLocal $stack21, $stack23, $stack25;
        java.lang.Object $stack22, $stack24, $stack26;
        org.bytedeco.opencv.opencv_core.CvMat H1, H2, X, $stack58;
        org.bytedeco.javacv.ImageTransformer$Parameters[] parameters;
        int pyramidLevel, i, $stack27, j;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack35;
        org.bytedeco.javacv.ProCamTransformer$Parameters $stack36;
        double $stack39, $stack45, $stack50;
        float $stack40, $stack46, $stack51;
        org.bytedeco.javacv.ProCamTransformerCL $r0, $r1, $r2, $r3, $r4;

        this := @this: ProCamTransformerCL;

        H1Buffer := @parameter0: com.jogamp.opencl.CLBuffer;

        H2Buffer := @parameter1: com.jogamp.opencl.CLBuffer;

        XBuffer := @parameter2: com.jogamp.opencl.CLBuffer;

        pyramidLevel := @parameter3: int;

        parameters := @parameter4: org.bytedeco.javacv.ImageTransformer$Parameters[];

        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack14 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack14 != null goto label01;

        $stack64 = null;

        goto label02;

     label01:
        $stack15 = virtualinvoke H1Buffer.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack16 = virtualinvoke $stack15.<java.nio.Buffer: java.nio.Buffer rewind()>();

        $stack64 = (java.nio.FloatBuffer) $stack16;

     label02:
        floatH1 = $stack64;

        $stack17 = virtualinvoke H2Buffer.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack18 = virtualinvoke $stack17.<java.nio.Buffer: java.nio.Buffer rewind()>();

        floatH2 = (java.nio.FloatBuffer) $stack18;

        $stack19 = virtualinvoke XBuffer.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack20 = virtualinvoke $stack19.<java.nio.Buffer: java.nio.Buffer rewind()>();

        floatX = (java.nio.FloatBuffer) $stack20;

        $stack21 = <org.bytedeco.javacv.ProCamTransformerCL: java.lang.ThreadLocal H13x3>;

        $stack22 = virtualinvoke $stack21.<java.lang.ThreadLocal: java.lang.Object get()>();

        H1 = (org.bytedeco.opencv.opencv_core.CvMat) $stack22;

        $stack23 = <org.bytedeco.javacv.ProCamTransformerCL: java.lang.ThreadLocal H23x3>;

        $stack24 = virtualinvoke $stack23.<java.lang.ThreadLocal: java.lang.Object get()>();

        H2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack24;

        $stack25 = <org.bytedeco.javacv.ProCamTransformerCL: java.lang.ThreadLocal X4x4>;

        $stack26 = virtualinvoke $stack25.<java.lang.ThreadLocal: java.lang.Object get()>();

        X = (org.bytedeco.opencv.opencv_core.CvMat) $stack26;

        i = 0;

     label03:
        $stack27 = lengthof parameters;

        if i >= $stack27 goto label11;

        $r1 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack34 = $r1.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack34 != null goto label04;

        $stack58 = null;

        goto label05;

     label04:
        $stack58 = H1;

     label05:
        $stack35 = parameters[i];

        $stack36 = (org.bytedeco.javacv.ProCamTransformer$Parameters) $stack35;

        $r2 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        virtualinvoke $r2.<org.bytedeco.javacv.ProCamTransformerCL: void prepareTransforms(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,int,org.bytedeco.javacv.ProCamTransformer$Parameters)>($stack58, H2, X, pyramidLevel, $stack36);

        j = 0;

     label06:
        if j >= 9 goto label08;

        $r3 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack44 = $r3.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack44 == null goto label07;

        $stack50 = virtualinvoke H1.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(j);

        $stack51 = (float) $stack50;

        virtualinvoke floatH1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack51);

     label07:
        $stack45 = virtualinvoke H2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(j);

        $stack46 = (float) $stack45;

        virtualinvoke floatH2.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack46);

        j = j + 1;

        goto label06;

     label08:
        j = 0;

     label09:
        if j >= 16 goto label10;

        $stack39 = virtualinvoke X.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(j);

        $stack40 = (float) $stack39;

        virtualinvoke floatX.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack40);

        j = j + 1;

        goto label09;

     label10:
        i = i + 1;

        goto label03;

     label11:
        $r4 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack28 = $r4.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack28 == null goto label12;

        virtualinvoke floatH1.<java.nio.FloatBuffer: java.nio.FloatBuffer rewind()>();

     label12:
        virtualinvoke floatH2.<java.nio.FloatBuffer: java.nio.FloatBuffer rewind()>();

        virtualinvoke floatX.<java.nio.FloatBuffer: java.nio.FloatBuffer rewind()>();

        return;
    }

    public void transform(com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, org.bytedeco.javacv.ImageTransformer$Parameters[], boolean[], org.bytedeco.javacv.ImageTransformerCL$InputData, org.bytedeco.javacv.ImageTransformerCL$OutputData)
    {
        boolean[] inverses;
        ProCamTransformerCL this;
        org.bytedeco.javacv.ImageTransformerCL$InputData inputData;
        org.bytedeco.javacv.ImageTransformer$Parameters[] parameters;
        int $stack20, $stack26, $stack27, localSize, globalSize, reduceSize, $stack41, $stack53, $stack60, $stack61, $stack62, $stack100, $stack120, $stack141, $stack177, i, $stack163, $stack28;
        com.jogamp.opencl.CLBuffer $stack21, $stack22, $stack23, inputBuffer, outputBuffer, $stack36, $stack38, $stack50, $stack55, $stack80, $stack118, $stack136, $stack154, $stack52;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack24;
        org.bytedeco.javacv.ImageTransformerCL$OutputData outputData;
        org.bytedeco.javacv.JavaCVCL $stack37, $stack39, $stack68, $stack70, $stack78, $stack147, $stack155, $stack30, $stack32;
        boolean $stack40, $stack43, $stack69, $stack110, $stack130, $stack188;
        com.jogamp.opencl.CLImage2d[] $stack42;
        com.jogamp.opencl.CLImage2d srcImg2, subImg, srcDotImg, srcImg, maskImg, transImg, dstImg, $stack138;
        com.jogamp.opencl.CLKernel $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack56, $stack57, $stack58, $stack72, $stack73, $stack77, $stack111, $stack112, $stack113, $stack114, $stack115, $stack116, $stack117, $stack131, $stack132, $stack133, $stack134, $stack135, kernel#49;
        long $stack63, $stack64, $stack65, $stack66, $stack67, $stack75, $stack76;
        org.bytedeco.javacv.ProjectiveColorTransformer $stack35;
        java.lang.UnsupportedOperationException $u0;
        com.jogamp.opencl.CLEventList $u1;
        java.lang.AssertionError $u2, $u3, $u4;
        org.bytedeco.javacv.ProCamTransformerCL $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r20, $r22, $r29, $r31, $r37, $r39, $r40, $r42, $r43, $r47, $r48, $r50, $r51, $r52;
        com.jogamp.opencl.CLMemory $r16, $r17, $r18, $r19, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r32, $r33, $r34, $r35, $r36, $r38, $r41, $r44, $r45, $r46, $r49;

        this := @this: ProCamTransformerCL;

        srcImg := @parameter0: com.jogamp.opencl.CLImage2d;

        subImg := @parameter1: com.jogamp.opencl.CLImage2d;

        srcDotImg := @parameter2: com.jogamp.opencl.CLImage2d;

        transImg := @parameter3: com.jogamp.opencl.CLImage2d;

        dstImg := @parameter4: com.jogamp.opencl.CLImage2d;

        maskImg := @parameter5: com.jogamp.opencl.CLImage2d;

        parameters := @parameter6: org.bytedeco.javacv.ImageTransformer$Parameters[];

        inverses := @parameter7: boolean[];

        inputData := @parameter8: org.bytedeco.javacv.ImageTransformerCL$InputData;

        outputData := @parameter9: org.bytedeco.javacv.ImageTransformerCL$OutputData;

        if inverses == null goto label03;

        i = 0;

     label01:
        $stack177 = lengthof inverses;

        if i >= $stack177 goto label03;

        $stack188 = inverses[i];

        if $stack188 == 0 goto label02;

        $u0 = new java.lang.UnsupportedOperationException;

        specialinvoke $u0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Inverse transform not supported.");

        throw $u0;

     label02:
        i = i + 1;

        goto label01;

     label03:
        $r0 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack23 = $r0.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H1Buffer>;

        $r1 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack22 = $r1.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H2Buffer>;

        $r2 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack21 = $r2.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        $stack20 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int pyramidLevel>;

        $r3 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        virtualinvoke $r3.<org.bytedeco.javacv.ProCamTransformerCL: void prepareTransforms(com.jogamp.opencl.CLBuffer,com.jogamp.opencl.CLBuffer,com.jogamp.opencl.CLBuffer,int,org.bytedeco.javacv.ImageTransformer$Parameters[])>($stack23, $stack22, $stack21, $stack20, parameters);

        $stack24 = parameters[0];

        i = interfaceinvoke $stack24.<org.bytedeco.javacv.ImageTransformer$Parameters: int size()>();

        $stack26 = lengthof parameters;

        if $stack26 <= 1 goto label04;

        $stack163 = lengthof parameters;

        goto label06;

     label04:
        $stack27 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiWidth>;

        if $stack27 <= 32 goto label05;

        $stack163 = 64;

        goto label06;

     label05:
        $stack163 = 32;

     label06:
        localSize = $stack163;

        $stack28 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiWidth>;

        globalSize = staticinvoke <org.bytedeco.javacv.JavaCVCL: int alignCeil(int,int)>($stack28, $stack163);

        reduceSize = globalSize / $stack163;

        $r4 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack30 = $r4.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        inputBuffer = virtualinvoke inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer getBuffer(org.bytedeco.javacv.JavaCVCL)>($stack30);

        $r5 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack32 = $r5.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        outputBuffer = virtualinvoke outputData.<org.bytedeco.javacv.ImageTransformerCL$OutputData: com.jogamp.opencl.CLBuffer getBuffer(org.bytedeco.javacv.JavaCVCL,int,int)>($stack32, i, reduceSize);

        $u1 = new com.jogamp.opencl.CLEventList;

        specialinvoke $u1.<com.jogamp.opencl.CLEventList: void <init>(int)>(1);

        $r6 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack35 = $r6.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer surfaceTransformer>;

        if $stack35 == null goto label07;

        $r7 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack155 = $r7.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r8 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack154 = $r8.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H1Buffer>;

        virtualinvoke $stack155.<org.bytedeco.javacv.JavaCVCL: void writeBuffer(com.jogamp.opencl.CLBuffer,boolean)>($stack154, 0);

     label07:
        $r9 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack37 = $r9.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r10 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack36 = $r10.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H2Buffer>;

        virtualinvoke $stack37.<org.bytedeco.javacv.JavaCVCL: void writeBuffer(com.jogamp.opencl.CLBuffer,boolean)>($stack36, 0);

        $r11 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack39 = $r11.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r12 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack38 = $r12.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        virtualinvoke $stack39.<org.bytedeco.javacv.JavaCVCL: void writeBuffer(com.jogamp.opencl.CLBuffer,boolean)>($stack38, 0);

        $stack40 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: boolean autoWrite>;

        if $stack40 == 0 goto label08;

        $r13 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack147 = $r13.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        virtualinvoke inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer writeBuffer(org.bytedeco.javacv.JavaCVCL)>($stack147);

     label08:
        $r14 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack42 = $r14.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLImage2d[] projectorImageCL>;

        $stack41 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int pyramidLevel>;

        srcImg2 = $stack42[$stack41];

        if subImg != null goto label12;

        $stack130 = <org.bytedeco.javacv.ProCamTransformerCL: boolean $assertionsDisabled>;

        if $stack130 != 0 goto label09;

        $stack141 = lengthof parameters;

        if $stack141 == 1 goto label09;

        $u2 = new java.lang.AssertionError;

        specialinvoke $u2.<java.lang.AssertionError: void <init>()>();

        throw $u2;

     label09:
        $r15 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack131 = $r15.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel oneKernel>;

        $r16 = (com.jogamp.opencl.CLMemory) srcImg2;

        $stack132 = virtualinvoke $stack131.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r16);

        $r17 = (com.jogamp.opencl.CLMemory) srcImg;

        $stack133 = virtualinvoke $stack132.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r17);

        if dstImg != null goto label10;

        $stack138 = transImg;

        goto label11;

     label10:
        $stack138 = dstImg;

     label11:
        $r18 = (com.jogamp.opencl.CLMemory) $stack138;

        $stack134 = virtualinvoke $stack133.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r18);

        $r19 = (com.jogamp.opencl.CLMemory) maskImg;

        $stack135 = virtualinvoke $stack134.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r19);

        $r20 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack136 = $r20.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H2Buffer>;

        $r21 = (com.jogamp.opencl.CLMemory) $stack136;

        kernel#49 = virtualinvoke $stack135.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r21);

        goto label16;

     label12:
        if srcDotImg != null goto label14;

        $stack110 = <org.bytedeco.javacv.ProCamTransformerCL: boolean $assertionsDisabled>;

        if $stack110 != 0 goto label13;

        $stack120 = lengthof parameters;

        if $stack120 == 1 goto label13;

        $u3 = new java.lang.AssertionError;

        specialinvoke $u3.<java.lang.AssertionError: void <init>()>();

        throw $u3;

     label13:
        $r22 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack111 = $r22.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel subKernel>;

        $r23 = (com.jogamp.opencl.CLMemory) srcImg2;

        $stack112 = virtualinvoke $stack111.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r23);

        $r24 = (com.jogamp.opencl.CLMemory) srcImg;

        $stack113 = virtualinvoke $stack112.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r24);

        $r25 = (com.jogamp.opencl.CLMemory) subImg;

        $stack114 = virtualinvoke $stack113.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r25);

        $r26 = (com.jogamp.opencl.CLMemory) transImg;

        $stack115 = virtualinvoke $stack114.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r26);

        $r27 = (com.jogamp.opencl.CLMemory) dstImg;

        $stack116 = virtualinvoke $stack115.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r27);

        $r28 = (com.jogamp.opencl.CLMemory) maskImg;

        $stack117 = virtualinvoke $stack116.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r28);

        $r29 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack118 = $r29.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H2Buffer>;

        $r30 = (com.jogamp.opencl.CLMemory) $stack118;

        kernel#49 = virtualinvoke $stack117.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r30);

        goto label16;

     label14:
        $stack43 = <org.bytedeco.javacv.ProCamTransformerCL: boolean $assertionsDisabled>;

        if $stack43 != 0 goto label15;

        $stack100 = lengthof parameters;

        if $stack100 == i goto label15;

        $u4 = new java.lang.AssertionError;

        specialinvoke $u4.<java.lang.AssertionError: void <init>()>();

        throw $u4;

     label15:
        $r31 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack44 = $r31.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel dotKernel>;

        $r32 = (com.jogamp.opencl.CLMemory) srcImg2;

        $stack45 = virtualinvoke $stack44.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r32);

        $r33 = (com.jogamp.opencl.CLMemory) srcImg;

        $stack46 = virtualinvoke $stack45.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r33);

        $r34 = (com.jogamp.opencl.CLMemory) subImg;

        $stack47 = virtualinvoke $stack46.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r34);

        $r35 = (com.jogamp.opencl.CLMemory) srcDotImg;

        $stack48 = virtualinvoke $stack47.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r35);

        $r36 = (com.jogamp.opencl.CLMemory) maskImg;

        $stack49 = virtualinvoke $stack48.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r36);

        $r37 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack50 = $r37.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H2Buffer>;

        $r38 = (com.jogamp.opencl.CLMemory) $stack50;

        kernel#49 = virtualinvoke $stack49.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r38);

     label16:
        $r39 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack52 = $r39.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H1Buffer>;

        if $stack52 == null goto label17;

        $r40 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack80 = $r40.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer H1Buffer>;

        $r41 = (com.jogamp.opencl.CLMemory) $stack80;

        virtualinvoke kernel#49.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r41);

        goto label18;

     label17:
        $r42 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack53 = $r42.<org.bytedeco.javacv.ProCamTransformerCL: int nullSize>;

        virtualinvoke kernel#49.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putNullArg(int)>($stack53);

     label18:
        $r43 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack55 = $r43.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        $r44 = (com.jogamp.opencl.CLMemory) $stack55;

        $stack56 = virtualinvoke kernel#49.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r44);

        $r45 = (com.jogamp.opencl.CLMemory) inputBuffer;

        $stack57 = virtualinvoke $stack56.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r45);

        $r46 = (com.jogamp.opencl.CLMemory) outputBuffer;

        $stack58 = virtualinvoke $stack57.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r46);

        virtualinvoke $stack58.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel rewind()>();

        $r47 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack68 = $r47.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $stack60 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiX>;

        $stack67 = (long) $stack60;

        $stack66 = (long) globalSize;

        $stack61 = lengthof parameters;

        $stack65 = (long) $stack61;

        $stack64 = (long) localSize;

        $stack62 = lengthof parameters;

        $stack63 = (long) $stack62;

        virtualinvoke $stack68.<org.bytedeco.javacv.JavaCVCL: void executeKernel(com.jogamp.opencl.CLKernel,long,long,long,long,long,long,long,long,long,com.jogamp.opencl.CLEventList)>(kernel#49, $stack67, 0L, 0L, $stack66, 1L, $stack65, $stack64, 1L, $stack63, $u1);

        if reduceSize <= 1 goto label19;

        $r48 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack72 = $r48.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel reduceKernel>;

        $r49 = (com.jogamp.opencl.CLMemory) outputBuffer;

        $stack73 = virtualinvoke $stack72.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r49);

        virtualinvoke $stack73.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel rewind()>();

        $r50 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack78 = $r50.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r51 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack77 = $r51.<org.bytedeco.javacv.ProCamTransformerCL: com.jogamp.opencl.CLKernel reduceKernel>;

        $stack76 = (long) reduceSize;

        $stack75 = (long) reduceSize;

        virtualinvoke $stack78.<org.bytedeco.javacv.JavaCVCL: void executeKernel(com.jogamp.opencl.CLKernel,long,long,long)>($stack77, 0L, $stack76, $stack75);

     label19:
        $stack69 = outputData.<org.bytedeco.javacv.ImageTransformerCL$OutputData: boolean autoRead>;

        if $stack69 == 0 goto label20;

        $r52 = (org.bytedeco.javacv.ProCamTransformerCL) this;

        $stack70 = $r52.<org.bytedeco.javacv.ProCamTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        virtualinvoke outputData.<org.bytedeco.javacv.ImageTransformerCL$OutputData: com.jogamp.opencl.CLBuffer readBuffer(org.bytedeco.javacv.JavaCVCL)>($stack70);

     label20:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack5;
        java.lang.ThreadLocal $stack2, $stack3, $stack4;

        $stack0 = class "Lorg/bytedeco/javacv/ProCamTransformerCL;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        <org.bytedeco.javacv.ProCamTransformerCL: boolean $assertionsDisabled> = $stack5;

        $stack2 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.ProCamTransformerCL: java.lang.ThreadLocal H13x3> = $stack2;

        $stack3 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.ProCamTransformerCL: java.lang.ThreadLocal H23x3> = $stack3;

        $stack4 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(4, 4);

        <org.bytedeco.javacv.ProCamTransformerCL: java.lang.ThreadLocal X4x4> = $stack4;

        return;
    }
}
