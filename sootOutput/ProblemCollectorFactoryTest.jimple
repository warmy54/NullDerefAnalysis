public class ProblemCollectorFactoryTest extends java.lang.Object
{

    public void <init>()
    {
        ProblemCollectorFactoryTest this;

        this := @this: ProblemCollectorFactoryTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testNewInstance()
    {
        org.apache.maven.building.ProblemCollector collector1, collector2;
        org.apache.maven.building.DefaultProblem $stack5;
        java.util.List $stack6, $stack9, $stack12;
        int $stack10, $stack13;
        ProblemCollectorFactoryTest this;

        this := @this: ProblemCollectorFactoryTest;

        collector1 = staticinvoke <org.apache.maven.building.ProblemCollectorFactory: org.apache.maven.building.ProblemCollector newInstance(java.util.List)>(null);

        $stack5 = new org.apache.maven.building.DefaultProblem;

        specialinvoke $stack5.<org.apache.maven.building.DefaultProblem: void <init>(java.lang.String,org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>("MESSAGE1", null, null, -1, -1, null);

        $stack6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($stack5);

        collector2 = staticinvoke <org.apache.maven.building.ProblemCollectorFactory: org.apache.maven.building.ProblemCollector newInstance(java.util.List)>($stack6);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotSame(java.lang.Object,java.lang.Object)>(collector1, collector2);

        $stack9 = interfaceinvoke collector1.<org.apache.maven.building.ProblemCollector: java.util.List getProblems()>();

        $stack10 = interfaceinvoke $stack9.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack10);

        $stack12 = interfaceinvoke collector2.<org.apache.maven.building.ProblemCollector: java.util.List getProblems()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack13);

        return;
    }
}
