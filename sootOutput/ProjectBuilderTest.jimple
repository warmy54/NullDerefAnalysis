public class ProjectBuilderTest extends org.apache.maven.AbstractCoreMavenComponentTestCase
{

    public void <init>()
    {
        ProjectBuilderTest this;

        this := @this: ProjectBuilderTest;

        specialinvoke this.<org.apache.maven.AbstractCoreMavenComponentTestCase: void <init>()>();

        return;
    }

    protected java.lang.String getProjectsDirectory()
    {
        ProjectBuilderTest this;

        this := @this: ProjectBuilderTest;

        return "src/test/projects/project-builder";
    }

    public void testSystemScopeDependencyIsPresentInTheCompileClasspathElements() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        java.io.File pom, $stack9, $u1;
        java.lang.String $stack10;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.util.Properties $u0;
        org.apache.maven.project.ProjectBuilderTest $r0, $r1;

        this := @this: ProjectBuilderTest;

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        pom = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: java.io.File getProject(java.lang.String)>("it0063");

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $u1 = new java.io.File;

        $stack9 = virtualinvoke pom.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack9, "jdk/jre");

        $stack10 = virtualinvoke $u1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $u0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("jre.home", $stack10);

        $r1 = (org.apache.maven.project.ProjectBuilderTest) this;

        session = virtualinvoke $r1.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File,java.util.Properties)>(pom, $u0);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getCompileClasspathElements()>();

        return;
    }

    public void testBuildFromModelSource() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack9;
        org.codehaus.plexus.PlexusContainer $stack12;
        java.lang.Object $stack13;
        org.apache.maven.project.ProjectBuilder $stack14;
        org.apache.maven.project.ProjectBuildingResult result;
        org.apache.maven.project.MavenProject $stack16;
        java.io.File $stack17, $u0;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.model.building.FileModelSource $u2;
        org.apache.maven.project.ProjectBuilderTest $r0, $r2;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r4;
        org.apache.maven.model.building.ModelSource $r3;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/modelsource/module01/pom.xml");

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>($u0);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack9 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack9);

        $u2 = new org.apache.maven.model.building.FileModelSource;

        specialinvoke $u2.<org.apache.maven.model.building.FileModelSource: void <init>(java.io.File)>($u0);

        $r2 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack12 = virtualinvoke $r2.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack13 = interfaceinvoke $stack12.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack14 = (org.apache.maven.project.ProjectBuilder) $stack13;

        $r3 = (org.apache.maven.model.building.ModelSource) $u2;

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        result = interfaceinvoke $stack14.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.model.building.ModelSource,org.apache.maven.project.ProjectBuildingRequest)>($r3, $r4);

        $stack16 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack17 = virtualinvoke $stack16.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack17);

        return;
    }

    public void testVersionlessManagedDependency() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack8;
        org.junit.jupiter.api.function.Executable $stack11;
        java.lang.Throwable $stack12;
        org.apache.maven.project.ProjectBuildingException e;
        java.lang.String $stack13;
        org.hamcrest.Matcher $stack14;
        java.io.File $u0;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r2;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r3;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/versionless-managed-dependency.xml");

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack8 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack8);

        $r2 = (org.apache.maven.project.ProjectBuilderTest) this;

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        $stack11 = staticinvoke <ProjectBuilderTest$lambda_testVersionlessManagedDependency_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectBuilderTest,java.io.File,org.apache.maven.project.ProjectBuildingRequest)>($r2, $u0, $r3);

        $stack12 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack11);

        e = (org.apache.maven.project.ProjectBuildingException) $stack12;

        $stack13 = virtualinvoke e.<org.apache.maven.project.ProjectBuildingException: java.lang.String getMessage()>();

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("[ERROR] \'dependencies.dependency.version\' for org.apache.maven.its:a:jar is missing. @ line 9, column 17");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack13, $stack14);

        return;
    }

    public void testResolveDependencies() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack10;
        org.codehaus.plexus.PlexusContainer $stack13, $stack21;
        java.lang.Object $stack14, $stack22, $stack28;
        org.apache.maven.project.ProjectBuilder $stack15, $stack23;
        org.apache.maven.project.ProjectBuildingResult result, $stack29;
        org.apache.maven.project.MavenProject $stack18, mavenProject;
        java.util.Set $stack19, $stack32;
        int $stack20, $stack27, $stack33;
        java.util.List $stack24, results;
        java.io.File $u0;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r3, $r5;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r2, $r4, $r6;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/basic-resolveDependencies.xml");

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack10 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack10);

        $r2 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r2.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setResolveDependencies(boolean)>(1);

        $r3 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack13 = virtualinvoke $r3.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack14 = interfaceinvoke $stack13.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack15 = (org.apache.maven.project.ProjectBuilder) $stack14;

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        result = interfaceinvoke $stack15.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>($u0, $r4);

        $stack18 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack19 = virtualinvoke $stack18.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack20 = interfaceinvoke $stack19.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack20);

        $r5 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack21 = virtualinvoke $r5.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack22 = interfaceinvoke $stack21.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack23 = (org.apache.maven.project.ProjectBuilder) $stack22;

        $stack24 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        $r6 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        results = interfaceinvoke $stack23.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack24, 0, $r6);

        $stack27 = interfaceinvoke results.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack27);

        $stack28 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(0);

        $stack29 = (org.apache.maven.project.ProjectBuildingResult) $stack28;

        mavenProject = interfaceinvoke $stack29.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack32 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack33 = interfaceinvoke $stack32.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack33);

        return;
    }

    public void testDontResolveDependencies() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack10;
        org.codehaus.plexus.PlexusContainer $stack13, $stack21;
        java.lang.Object $stack14, $stack22, $stack28;
        org.apache.maven.project.ProjectBuilder $stack15, $stack23;
        org.apache.maven.project.ProjectBuildingResult result, $stack29;
        org.apache.maven.project.MavenProject $stack18, mavenProject;
        java.util.Set $stack19, $stack32;
        int $stack20, $stack27, $stack33;
        java.util.List $stack24, results;
        java.io.File $u0;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r3, $r5;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r2, $r4, $r6;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/basic-resolveDependencies.xml");

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack10 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack10);

        $r2 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r2.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setResolveDependencies(boolean)>(0);

        $r3 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack13 = virtualinvoke $r3.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack14 = interfaceinvoke $stack13.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack15 = (org.apache.maven.project.ProjectBuilder) $stack14;

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        result = interfaceinvoke $stack15.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>($u0, $r4);

        $stack18 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack19 = virtualinvoke $stack18.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack20 = interfaceinvoke $stack19.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack20);

        $r5 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack21 = virtualinvoke $r5.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack22 = interfaceinvoke $stack21.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack23 = (org.apache.maven.project.ProjectBuilder) $stack22;

        $stack24 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        $r6 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        results = interfaceinvoke $stack23.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack24, 0, $r6);

        $stack27 = interfaceinvoke results.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack27);

        $stack28 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(0);

        $stack29 = (org.apache.maven.project.ProjectBuildingResult) $stack28;

        mavenProject = interfaceinvoke $stack29.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack32 = virtualinvoke mavenProject.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        $stack33 = interfaceinvoke $stack32.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack33);

        return;
    }

    public void testReadModifiedPoms() throws java.lang.Exception
    {
        java.nio.file.attribute.FileAttribute[] $stack10;
        java.nio.file.Path tempDir;
        java.io.File $stack13, $stack21, $stack24, $stack31, $stack33, $u0, $u2, $u3;
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack16;
        org.codehaus.plexus.PlexusContainer $stack18;
        java.lang.Object $stack19;
        org.apache.maven.project.ProjectBuilder projectBuilder;
        org.apache.maven.project.ProjectBuildingResult result;
        org.apache.maven.project.MavenProject $stack28;
        java.util.Properties $stack29;
        org.hamcrest.Matcher $stack30;
        java.lang.Throwable $stack32;
        java.lang.String parentContent;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r2;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r3, $r4;

        this := @this: ProjectBuilderTest;

        $stack10 = newarray (java.nio.file.attribute.FileAttribute)[0];

        tempDir = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>(null, $stack10);

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/grandchild-check");

        $stack13 = interfaceinvoke tempDir.<java.nio.file.Path: java.io.File toFile()>();

        staticinvoke <org.apache.maven.shared.utils.io.FileUtils: void copyDirectoryStructure(java.io.File,java.io.File)>($u0, $stack13);

     label1:
        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack16 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack16);

        $r2 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack18 = virtualinvoke $r2.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack19 = interfaceinvoke $stack18.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        projectBuilder = (org.apache.maven.project.ProjectBuilder) $stack19;

        $u2 = new java.io.File;

        $stack21 = interfaceinvoke tempDir.<java.nio.file.Path: java.io.File toFile()>();

        specialinvoke $u2.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack21, "child/pom.xml");

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>($u2, $r3);

        $u3 = new java.io.File;

        $stack24 = interfaceinvoke tempDir.<java.nio.file.Path: java.io.File toFile()>();

        specialinvoke $u3.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack24, "pom.xml");

        parentContent = staticinvoke <org.apache.maven.shared.utils.io.FileUtils: java.lang.String fileRead(java.io.File)>($u3);

        parentContent = virtualinvoke parentContent.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<packaging>pom</packaging>", "<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>");

        staticinvoke <org.apache.maven.shared.utils.io.FileUtils: void fileWrite(java.io.File,java.lang.String,java.lang.String)>($u3, "UTF-8", parentContent);

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        result = interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>($u2, $r4);

        $stack28 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack29 = virtualinvoke $stack28.<org.apache.maven.project.MavenProject: java.util.Properties getProperties()>();

        $stack30 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasKey(java.lang.Object)>("addedProperty");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack29, $stack30);

     label2:
        $stack31 = interfaceinvoke tempDir.<java.nio.file.Path: java.io.File toFile()>();

        staticinvoke <org.apache.maven.shared.utils.io.FileUtils: void deleteDirectory(java.io.File)>($stack31);

        goto label5;

     label3:
        $stack32 := @caughtexception;

     label4:
        $stack33 = interfaceinvoke tempDir.<java.nio.file.Path: java.io.File toFile()>();

        staticinvoke <org.apache.maven.shared.utils.io.FileUtils: void deleteDirectory(java.io.File)>($stack33);

        throw $stack32;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testReadErroneousMavenProjectContainsReference() throws java.lang.Exception
    {
        java.io.File pomFile, $stack30, $stack43, $u0;
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack14;
        org.codehaus.plexus.PlexusContainer $stack16;
        java.lang.Object $stack17, $stack25, $stack38;
        org.apache.maven.project.ProjectBuilder projectBuilder;
        org.junit.jupiter.api.function.Executable $stack19, $stack32;
        java.lang.Throwable $stack20, $stack33;
        org.apache.maven.project.ProjectBuildingException ex1, ex2;
        java.util.List $stack22, $stack24, $stack35, $stack37;
        int $stack23, $stack36;
        org.apache.maven.project.ProjectBuildingResult $stack26, $stack39;
        org.apache.maven.project.MavenProject project1, project2;
        java.lang.String $stack29, $stack42;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r3;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r2, $r4, $r5;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/artifactMissingVersion.xml");

        pomFile = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setValidationLevel(int)>(0);

        $stack14 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r2 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r2.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack14);

        $r3 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack16 = virtualinvoke $r3.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack17 = interfaceinvoke $stack16.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        projectBuilder = (org.apache.maven.project.ProjectBuilder) $stack17;

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        $stack19 = staticinvoke <ProjectBuilderTest$lambda_testReadErroneousMavenProjectContainsReference_1__310: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectBuilder,java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(projectBuilder, pomFile, $r4);

        $stack20 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack19);

        ex1 = (org.apache.maven.project.ProjectBuildingException) $stack20;

        $stack22 = virtualinvoke ex1.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack23 = interfaceinvoke $stack22.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack23);

        $stack24 = virtualinvoke ex1.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack25 = interfaceinvoke $stack24.<java.util.List: java.lang.Object get(int)>(0);

        $stack26 = (org.apache.maven.project.ProjectBuildingResult) $stack25;

        project1 = interfaceinvoke $stack26.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(project1);

        $stack29 = virtualinvoke project1.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testArtifactMissingVersion", $stack29);

        $stack30 = virtualinvoke project1.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(pomFile, $stack30);

        $r5 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        $stack32 = staticinvoke <ProjectBuilderTest$lambda_testReadErroneousMavenProjectContainsReference_2__313: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectBuilder,java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(projectBuilder, pomFile, $r5);

        $stack33 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack32);

        ex2 = (org.apache.maven.project.ProjectBuildingException) $stack33;

        $stack35 = virtualinvoke ex2.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack36 = interfaceinvoke $stack35.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack36);

        $stack37 = virtualinvoke ex2.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack38 = interfaceinvoke $stack37.<java.util.List: java.lang.Object get(int)>(0);

        $stack39 = (org.apache.maven.project.ProjectBuildingResult) $stack38;

        project2 = interfaceinvoke $stack39.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(project2);

        $stack42 = virtualinvoke project2.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testArtifactMissingVersion", $stack42);

        $stack43 = virtualinvoke project2.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(pomFile, $stack43);

        return;
    }

    public void testReadInvalidPom() throws java.lang.Exception
    {
        java.io.File pomFile, $stack30, $u0;
        ProjectBuilderTest this;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack12;
        org.codehaus.plexus.PlexusContainer $stack14;
        java.lang.Object $stack15, $stack28, $stack32;
        org.apache.maven.project.ProjectBuilder projectBuilder;
        org.junit.jupiter.api.function.Executable $stack17, $stack22;
        java.lang.Throwable $stack18, $stack23;
        java.lang.Exception ex;
        java.lang.String $stack19, $stack39;
        org.hamcrest.Matcher $stack20, $stack38, $stack40;
        org.apache.maven.project.ProjectBuildingException pex;
        java.util.List $stack25, $stack27, $stack31, $stack34;
        int $stack26, $stack35;
        org.apache.maven.project.ProjectBuildingResult $stack29, $stack33;
        java.lang.Integer $stack36, $stack37;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r3;
        org.apache.maven.project.ProjectBuildingRequest $r1, $r2, $r4, $r5;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>("src/test/resources/projects/badPom.xml");

        pomFile = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $r1 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r1.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setValidationLevel(int)>(0);

        $stack12 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r2 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r2.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack12);

        $r3 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack14 = virtualinvoke $r3.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack15 = interfaceinvoke $stack14.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        projectBuilder = (org.apache.maven.project.ProjectBuilder) $stack15;

        $r4 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        $stack17 = staticinvoke <ProjectBuilderTest$lambda_testReadInvalidPom_3__311: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectBuilder,java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(projectBuilder, pomFile, $r4);

        $stack18 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/Exception;", $stack17);

        ex = (java.lang.Exception) $stack18;

        $stack19 = virtualinvoke ex.<java.lang.Exception: java.lang.String getMessage()>();

        $stack20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("expected START_TAG or END_TAG not TEXT");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack19, $stack20);

        $r5 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        $stack22 = staticinvoke <ProjectBuilderTest$lambda_testReadInvalidPom_4__312: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectBuilder,java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(projectBuilder, pomFile, $r5);

        $stack23 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/project/ProjectBuildingException;", $stack22);

        pex = (org.apache.maven.project.ProjectBuildingException) $stack23;

        $stack25 = virtualinvoke pex.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack26 = interfaceinvoke $stack25.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack26);

        $stack27 = virtualinvoke pex.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack28 = interfaceinvoke $stack27.<java.util.List: java.lang.Object get(int)>(0);

        $stack29 = (org.apache.maven.project.ProjectBuildingResult) $stack28;

        $stack30 = interfaceinvoke $stack29.<org.apache.maven.project.ProjectBuildingResult: java.io.File getPomFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack30);

        $stack31 = virtualinvoke pex.<org.apache.maven.project.ProjectBuildingException: java.util.List getResults()>();

        $stack32 = interfaceinvoke $stack31.<java.util.List: java.lang.Object get(int)>(0);

        $stack33 = (org.apache.maven.project.ProjectBuildingResult) $stack32;

        $stack34 = interfaceinvoke $stack33.<org.apache.maven.project.ProjectBuildingResult: java.util.List getProblems()>();

        $stack35 = interfaceinvoke $stack34.<java.util.List: int size()>();

        $stack36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack35);

        $stack37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack38 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher greaterThan(java.lang.Comparable)>($stack37);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack36, $stack38);

        $stack39 = virtualinvoke pex.<org.apache.maven.project.ProjectBuildingException: java.lang.String getMessage()>();

        $stack40 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("expected START_TAG or END_TAG not TEXT");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack39, $stack40);

        return;
    }

    public void testReadParentAndChildWithRegularVersionSetParentFile() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        java.io.File parentPom, $stack15, $stack28, $stack31, file, $stack37, $u1;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack20;
        org.codehaus.plexus.PlexusContainer $stack22;
        java.lang.Object $stack23, $stack32;
        org.apache.maven.project.ProjectBuilder projectBuilder;
        boolean $stack25, parentFileWasFoundOnChild;
        org.apache.maven.project.MavenProject $stack27, $stack30, project;
        java.util.List $stack33, results;
        java.util.Iterator results;
        java.util.ArrayList $u0;
        org.apache.maven.project.DefaultProjectBuildingRequest $u2;
        org.apache.maven.project.ProjectBuilderTest $r0, $r1, $r4, $r6, $r7, $r9, $r10, $r12, $r13;
        org.apache.maven.project.ProjectBuildingRequest $r2, $r3, $r5, $r8, $r11;

        this := @this: ProjectBuilderTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>(2);

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        parentPom = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: java.io.File getProject(java.lang.String)>("MNG-6723");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(parentPom);

        $u1 = new java.io.File;

        $stack15 = virtualinvoke parentPom.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack15, "child/pom.xml");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

        $r1 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r1.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u2 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u2.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $r2 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r2.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setValidationLevel(int)>(0);

        $stack20 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        interfaceinvoke $r3.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack20);

        $r4 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack22 = virtualinvoke $r4.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack23 = interfaceinvoke $stack22.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        projectBuilder = (org.apache.maven.project.ProjectBuilder) $stack23;

        parentFileWasFoundOnChild = 0;

        results = interfaceinvoke $u0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack25 = interfaceinvoke results.<java.util.Iterator: boolean hasNext()>();

        if $stack25 == 0 goto label3;

        $stack32 = interfaceinvoke results.<java.util.Iterator: java.lang.Object next()>();

        file = (java.io.File) $stack32;

        $stack33 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(file);

        $r5 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        results = interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack33, 0, $r5);

        $r6 = (org.apache.maven.project.ProjectBuilderTest) this;

        specialinvoke $r6.<org.apache.maven.project.ProjectBuilderTest: void assertResultShowNoError(java.util.List)>(results);

        $r7 = (org.apache.maven.project.ProjectBuilderTest) this;

        project = specialinvoke $r7.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.project.MavenProject findChildProject(java.util.List)>(results);

        if project == null goto label2;

        $stack37 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(parentPom, $stack37);

        parentFileWasFoundOnChild = 1;

     label2:
        goto label1;

     label3:
        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>(parentFileWasFoundOnChild);

        $r8 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        results = interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($u0, 0, $r8);

        $r9 = (org.apache.maven.project.ProjectBuilderTest) this;

        specialinvoke $r9.<org.apache.maven.project.ProjectBuilderTest: void assertResultShowNoError(java.util.List)>(results);

        $r10 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack27 = specialinvoke $r10.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.project.MavenProject findChildProject(java.util.List)>(results);

        $stack28 = virtualinvoke $stack27.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(parentPom, $stack28);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($u0);

        $r11 = (org.apache.maven.project.ProjectBuildingRequest) $u2;

        results = interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($u0, 0, $r11);

        $r12 = (org.apache.maven.project.ProjectBuilderTest) this;

        specialinvoke $r12.<org.apache.maven.project.ProjectBuilderTest: void assertResultShowNoError(java.util.List)>(results);

        $r13 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack30 = specialinvoke $r13.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.project.MavenProject findChildProject(java.util.List)>(results);

        $stack31 = virtualinvoke $stack30.<org.apache.maven.project.MavenProject: java.io.File getParentFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(parentPom, $stack31);

        return;
    }

    private org.apache.maven.project.MavenProject findChildProject(java.util.List)
    {
        java.util.List results;
        java.util.Iterator l2;
        boolean $stack5, $stack10;
        java.lang.Object $stack6;
        org.apache.maven.project.ProjectBuildingResult result;
        java.io.File $stack7, $stack8;
        java.lang.String $stack9;
        org.apache.maven.project.MavenProject $stack12;
        ProjectBuilderTest this;

        this := @this: ProjectBuilderTest;

        results := @parameter0: java.util.List;

        l2 = interfaceinvoke results.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label3;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        result = (org.apache.maven.project.ProjectBuildingResult) $stack6;

        $stack7 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: java.io.File getPomFile()>();

        $stack8 = virtualinvoke $stack7.<java.io.File: java.io.File getParentFile()>();

        $stack9 = virtualinvoke $stack8.<java.io.File: java.lang.String getName()>();

        $stack10 = virtualinvoke $stack9.<java.lang.String: boolean equals(java.lang.Object)>("child");

        if $stack10 == 0 goto label2;

        $stack12 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        return $stack12;

     label2:
        goto label1;

     label3:
        return null;
    }

    private void assertResultShowNoError(java.util.List)
    {
        java.util.List results, $stack7;
        java.util.Iterator l2;
        boolean $stack5;
        java.lang.Object $stack6;
        org.apache.maven.project.ProjectBuildingResult result;
        org.hamcrest.Matcher $stack8, $stack9;
        org.apache.maven.project.MavenProject $stack10;
        ProjectBuilderTest this;

        this := @this: ProjectBuilderTest;

        results := @parameter0: java.util.List;

        l2 = interfaceinvoke results.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        result = (org.apache.maven.project.ProjectBuildingResult) $stack6;

        $stack7 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: java.util.List getProblems()>();

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack8);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack9);

        $stack10 = interfaceinvoke result.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack10);

        goto label1;

     label2:
        return;
    }

    public void testBuildProperties() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        java.io.File $stack7, $stack8, $u0;
        org.apache.maven.execution.MavenSession mavenSession;
        org.eclipse.aether.RepositorySystemSession $stack11;
        org.apache.maven.project.ProjectBuilder $stack14;
        java.util.List $stack15, result, $stack21, $stack24, $stack27, $stack30;
        java.lang.Object $stack17;
        org.apache.maven.project.ProjectBuildingResult $stack18;
        org.apache.maven.project.MavenProject project;
        int $stack22, $stack25, $stack28, $stack31;
        org.apache.maven.project.DefaultProjectBuildingRequest $u1;
        org.apache.maven.project.ProjectBuilderTest $r0, $r1, $r4;
        org.apache.maven.project.ProjectBuildingRequest $r2, $r3, $r5;

        this := @this: ProjectBuilderTest;

        $u0 = new java.io.File;

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack7 = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: java.io.File getProject(java.lang.String)>("MNG-6716");

        $stack8 = virtualinvoke $stack7.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $u0.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack8, "project/pom.xml");

        $r1 = (org.apache.maven.project.ProjectBuilderTest) this;

        mavenSession = virtualinvoke $r1.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        $u1 = new org.apache.maven.project.DefaultProjectBuildingRequest;

        specialinvoke $u1.<org.apache.maven.project.DefaultProjectBuildingRequest: void <init>()>();

        $stack11 = virtualinvoke mavenSession.<org.apache.maven.execution.MavenSession: org.eclipse.aether.RepositorySystemSession getRepositorySession()>();

        $r2 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r2.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRepositorySession(org.eclipse.aether.RepositorySystemSession)>($stack11);

        $r3 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        interfaceinvoke $r3.<org.apache.maven.project.ProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setResolveDependencies(boolean)>(1);

        $r4 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack14 = $r4.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.project.ProjectBuilder projectBuilder>;

        $stack15 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($u0);

        $r5 = (org.apache.maven.project.ProjectBuildingRequest) $u1;

        result = interfaceinvoke $stack14.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack15, 1, $r5);

        $stack17 = interfaceinvoke result.<java.util.List: java.lang.Object get(int)>(0);

        $stack18 = (org.apache.maven.project.ProjectBuildingResult) $stack17;

        project = interfaceinvoke $stack18.<org.apache.maven.project.ProjectBuildingResult: org.apache.maven.project.MavenProject getProject()>();

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getTestCompileSourceRoots()>();

        $stack22 = interfaceinvoke $stack21.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack22);

        $stack24 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getCompileSourceRoots()>();

        $stack25 = interfaceinvoke $stack24.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack25);

        $stack27 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getMailingLists()>();

        $stack28 = interfaceinvoke $stack27.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack28);

        $stack30 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getResources()>();

        $stack31 = interfaceinvoke $stack30.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack31);

        return;
    }

    public void testPropertyInPluginManagementGroupId() throws java.lang.Exception
    {
        ProjectBuilderTest this;
        java.io.File pom;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.util.List $stack9;
        java.util.Iterator l4;
        boolean $stack11;
        java.lang.Object $stack12;
        org.apache.maven.model.Plugin buildPlugin;
        java.lang.StringBuilder $stack14, $stack16, $u0;
        java.lang.String $stack15, $stack17, $stack18;
        org.apache.maven.project.ProjectBuilderTest $r0, $r1;

        this := @this: ProjectBuilderTest;

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        pom = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: java.io.File getProject(java.lang.String)>("MNG-6983");

        $r1 = (org.apache.maven.project.ProjectBuilderTest) this;

        session = virtualinvoke $r1.<org.apache.maven.project.ProjectBuilderTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(pom);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $stack9 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        l4 = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label2;

        $stack12 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        buildPlugin = (org.apache.maven.model.Plugin) $stack12;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing version for build plugin ");

        $stack15 = virtualinvoke buildPlugin.<org.apache.maven.model.Plugin: java.lang.String getKey()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack18 = virtualinvoke buildPlugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>($stack17, $stack18);

        goto label1;

     label2:
        return;
    }

    private static void lambda$testReadInvalidPom$4(org.apache.maven.project.ProjectBuilder, java.io.File, org.apache.maven.project.ProjectBuildingRequest) throws java.lang.Throwable
    {
        org.apache.maven.project.ProjectBuilder projectBuilder;
        java.io.File pomFile;
        java.util.List $stack3;
        org.apache.maven.project.ProjectBuildingRequest configuration;

        projectBuilder := @parameter0: org.apache.maven.project.ProjectBuilder;

        pomFile := @parameter1: java.io.File;

        configuration := @parameter2: org.apache.maven.project.ProjectBuildingRequest;

        $stack3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(pomFile);

        interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack3, 0, configuration);

        return;
    }

    private static void lambda$testReadInvalidPom$3(org.apache.maven.project.ProjectBuilder, java.io.File, org.apache.maven.project.ProjectBuildingRequest) throws java.lang.Throwable
    {
        org.apache.maven.project.ProjectBuilder projectBuilder;
        java.io.File pomFile;
        org.apache.maven.project.ProjectBuildingRequest configuration;

        projectBuilder := @parameter0: org.apache.maven.project.ProjectBuilder;

        pomFile := @parameter1: java.io.File;

        configuration := @parameter2: org.apache.maven.project.ProjectBuildingRequest;

        interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pomFile, configuration);

        return;
    }

    private static void lambda$testReadErroneousMavenProjectContainsReference$2(org.apache.maven.project.ProjectBuilder, java.io.File, org.apache.maven.project.ProjectBuildingRequest) throws java.lang.Throwable
    {
        org.apache.maven.project.ProjectBuilder projectBuilder;
        java.io.File pomFile;
        java.util.List $stack3;
        org.apache.maven.project.ProjectBuildingRequest configuration;

        projectBuilder := @parameter0: org.apache.maven.project.ProjectBuilder;

        pomFile := @parameter1: java.io.File;

        configuration := @parameter2: org.apache.maven.project.ProjectBuildingRequest;

        $stack3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(pomFile);

        interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: java.util.List build(java.util.List,boolean,org.apache.maven.project.ProjectBuildingRequest)>($stack3, 0, configuration);

        return;
    }

    private static void lambda$testReadErroneousMavenProjectContainsReference$1(org.apache.maven.project.ProjectBuilder, java.io.File, org.apache.maven.project.ProjectBuildingRequest) throws java.lang.Throwable
    {
        org.apache.maven.project.ProjectBuilder projectBuilder;
        java.io.File pomFile;
        org.apache.maven.project.ProjectBuildingRequest configuration;

        projectBuilder := @parameter0: org.apache.maven.project.ProjectBuilder;

        pomFile := @parameter1: java.io.File;

        configuration := @parameter2: org.apache.maven.project.ProjectBuildingRequest;

        interfaceinvoke projectBuilder.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pomFile, configuration);

        return;
    }

    private void lambda$testVersionlessManagedDependency$0(java.io.File, org.apache.maven.project.ProjectBuildingRequest) throws java.lang.Throwable
    {
        ProjectBuilderTest this;
        org.codehaus.plexus.PlexusContainer $stack3;
        java.lang.Object $stack4;
        java.io.File pomFile;
        org.apache.maven.project.ProjectBuildingRequest configuration;
        org.apache.maven.project.ProjectBuilder $stack5;
        org.apache.maven.project.ProjectBuilderTest $r0;

        this := @this: ProjectBuilderTest;

        pomFile := @parameter0: java.io.File;

        configuration := @parameter1: org.apache.maven.project.ProjectBuildingRequest;

        $r0 = (org.apache.maven.project.ProjectBuilderTest) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.project.ProjectBuilderTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack4 = interfaceinvoke $stack3.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/apache/maven/project/ProjectBuilder;");

        $stack5 = (org.apache.maven.project.ProjectBuilder) $stack4;

        interfaceinvoke $stack5.<org.apache.maven.project.ProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(java.io.File,org.apache.maven.project.ProjectBuildingRequest)>(pomFile, configuration);

        return;
    }
}
