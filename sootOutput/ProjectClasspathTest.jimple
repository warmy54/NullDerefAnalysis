public class ProjectClasspathTest extends org.apache.maven.project.AbstractMavenProjectTestCase
{
    static final java.lang.String dir;

    public void <init>()
    {
        ProjectClasspathTest this;

        this := @this: ProjectClasspathTest;

        specialinvoke this.<org.apache.maven.project.AbstractMavenProjectTestCase: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        ProjectClasspathTest this;
        org.codehaus.plexus.PlexusContainer $stack3, $stack5, $stack8;
        java.lang.Object $stack4, $stack6, $stack9;
        org.eclipse.aether.impl.ArtifactResolver resolver;
        org.apache.maven.repository.internal.DefaultArtifactDescriptorReader pomReader;
        org.apache.maven.project.ProjectBuilder $stack10;
        org.apache.maven.project.ProjectClasspathTest $r0, $r1, $r2, $r3;

        this := @this: ProjectClasspathTest;

        specialinvoke this.<org.apache.maven.project.AbstractMavenProjectTestCase: void setUp()>();

        $r0 = (org.apache.maven.project.ProjectClasspathTest) this;

        $stack3 = virtualinvoke $r0.<org.apache.maven.project.ProjectClasspathTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack4 = interfaceinvoke $stack3.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class,java.lang.String)>(class "Lorg/eclipse/aether/impl/ArtifactResolver;", "classpath");

        resolver = (org.eclipse.aether.impl.ArtifactResolver) $stack4;

        $r1 = (org.apache.maven.project.ProjectClasspathTest) this;

        $stack5 = virtualinvoke $r1.<org.apache.maven.project.ProjectClasspathTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack6 = interfaceinvoke $stack5.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/eclipse/aether/impl/ArtifactDescriptorReader;");

        pomReader = (org.apache.maven.repository.internal.DefaultArtifactDescriptorReader) $stack6;

        virtualinvoke pomReader.<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setArtifactResolver(org.eclipse.aether.impl.ArtifactResolver)>(resolver);

        $r2 = (org.apache.maven.project.ProjectClasspathTest) this;

        $stack8 = virtualinvoke $r2.<org.apache.maven.project.ProjectClasspathTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack9 = interfaceinvoke $stack8.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class,java.lang.String)>(class "Lorg/apache/maven/project/ProjectBuilder;", "classpath");

        $stack10 = (org.apache.maven.project.ProjectBuilder) $stack9;

        $r3 = (org.apache.maven.project.ProjectClasspathTest) this;

        $r3.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.project.ProjectBuilder projectBuilder> = $stack10;

        return;
    }

    public void testProjectClasspath() throws java.lang.Exception
    {
        java.io.File f;
        ProjectClasspathTest this;
        org.apache.maven.project.MavenProject project;
        java.io.PrintStream $stack10, $stack15;
        java.lang.StringBuilder $stack11, $stack12, $stack16, $stack18, $u0, $u1;
        java.lang.String $stack13, $stack17, $stack19, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36, $stack39;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.project.ProjectClasspathTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        this := @this: ProjectClasspathTest;

        f = staticinvoke <org.apache.maven.project.ProjectClasspathTest: java.io.File getFileForClasspathResource(java.lang.String)>("projects/scope/project-with-scoped-dependencies.xml");

        $r0 = (org.apache.maven.project.ProjectClasspathTest) this;

        project = virtualinvoke $r0.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.project.MavenProject getProjectWithDependencies(java.io.File)>(f);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object,java.lang.String)>(project, "Test project can\'t be null!");

        $r1 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r1.<org.apache.maven.project.ProjectClasspathTest: void checkArtifactIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "provided", "provided");

        $r2 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r2.<org.apache.maven.project.ProjectClasspathTest: void checkArtifactIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "test", "test");

        $r3 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r3.<org.apache.maven.project.ProjectClasspathTest: void checkArtifactIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "compile", "compile");

        $r4 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r4.<org.apache.maven.project.ProjectClasspathTest: void checkArtifactIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "runtime", "runtime");

        $r5 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r5.<org.apache.maven.project.ProjectClasspathTest: void checkArtifactIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "default", "compile");

        $r6 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r6.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-test", "scope-provided");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>(artifact, "Check no provided dependencies are transitive");

        $r7 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r7.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-test", "scope-test");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>(artifact, "Check no test dependencies are transitive");

        $r8 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r8.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-test", "scope-compile");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(artifact);

        $stack10 = <java.lang.System: java.io.PrintStream out>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a = ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(artifact);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack10.<java.io.PrintStream: void println(java.lang.String)>($stack13);

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b = ");

        $stack17 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.String)>($stack19);

        $stack21 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("test", $stack21, "Check scope");

        $r9 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r9.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-test", "scope-default");

        $stack24 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("test", $stack24, "Check scope");

        $r10 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r10.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-test", "scope-runtime");

        $stack27 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("test", $stack27, "Check scope");

        $r11 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r11.<org.apache.maven.project.ProjectClasspathTest: void checkGroupIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "provided", "maven-test-provided");

        $r12 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r12.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-provided", "scope-runtime");

        $stack30 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("provided", $stack30, "Check scope");

        $r13 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r13.<org.apache.maven.project.ProjectClasspathTest: void checkGroupIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "runtime", "maven-test-runtime");

        $r14 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r14.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-runtime", "scope-runtime");

        $stack33 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("runtime", $stack33, "Check scope");

        $r15 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r15.<org.apache.maven.project.ProjectClasspathTest: void checkGroupIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "compile", "maven-test-compile");

        $r16 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r16.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-compile", "scope-runtime");

        $stack36 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("runtime", $stack36, "Check scope");

        $r17 = (org.apache.maven.project.ProjectClasspathTest) this;

        specialinvoke $r17.<org.apache.maven.project.ProjectClasspathTest: void checkGroupIdScope(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "compile", "maven-test-default");

        $r18 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r18.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test-default", "scope-runtime");

        $stack39 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("runtime", $stack39, "Check scope");

        return;
    }

    private void checkGroupIdScope(org.apache.maven.project.MavenProject, java.lang.String, java.lang.String)
    {
        ProjectClasspathTest this;
        org.apache.maven.project.MavenProject project;
        java.lang.String groupId, scopeValue, $stack6, $stack10;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.project.ProjectClasspathTest $r0, $r1, $r2, $r3;

        this := @this: ProjectClasspathTest;

        project := @parameter0: org.apache.maven.project.MavenProject;

        scopeValue := @parameter1: java.lang.String;

        groupId := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r0.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, groupId, "scope-compile");

        $stack6 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(scopeValue, $stack6, "Check scope");

        $r1 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r1.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, groupId, "scope-test");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>(artifact, "Check test dependency is not transitive");

        $r2 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r2.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, groupId, "scope-provided");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>(artifact, "Check provided dependency is not transitive");

        $r3 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r3.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, groupId, "scope-default");

        $stack10 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(scopeValue, $stack10, "Check scope");

        return;
    }

    private void checkArtifactIdScope(org.apache.maven.project.MavenProject, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack7, $stack8, $u0;
        java.lang.String scope, artifactId, scopeValue, $stack11;
        ProjectClasspathTest this;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.project.ProjectClasspathTest $r0;

        this := @this: ProjectClasspathTest;

        project := @parameter0: org.apache.maven.project.MavenProject;

        scope := @parameter1: java.lang.String;

        scopeValue := @parameter2: java.lang.String;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scope-");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(scope);

        artifactId = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (org.apache.maven.project.ProjectClasspathTest) this;

        artifact = specialinvoke $r0.<org.apache.maven.project.ProjectClasspathTest: org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject,java.lang.String,java.lang.String)>(project, "maven-test", artifactId);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(artifact);

        $stack11 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>(scopeValue, $stack11, "Check scope");

        return;
    }

    private org.apache.maven.artifact.Artifact getArtifact(org.apache.maven.project.MavenProject, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack6, $stack8, $stack9, $stack10, $stack11, $stack12;
        java.io.PrintStream $stack7, $stack17, $stack19, $stack26;
        java.lang.String groupId, artifactId, $stack13, $stack20, $stack21, $stack24;
        org.apache.maven.project.MavenProject project;
        java.util.Set $stack14;
        java.util.Iterator l4;
        boolean $stack16, $stack22, $stack25;
        java.lang.Object $stack18;
        org.apache.maven.artifact.Artifact a;
        ProjectClasspathTest this;

        this := @this: ProjectClasspathTest;

        project := @parameter0: org.apache.maven.project.MavenProject;

        groupId := @parameter1: java.lang.String;

        artifactId := @parameter2: java.lang.String;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ Looking for ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(groupId);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(artifactId);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.String)>($stack13);

        $stack14 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>();

        l4 = interfaceinvoke $stack14.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack16 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label3;

        $stack18 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack18;

        $stack19 = <java.lang.System: java.io.PrintStream out>;

        $stack20 = virtualinvoke a.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $stack19.<java.io.PrintStream: void println(java.lang.String)>($stack20);

        $stack21 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack22 = virtualinvoke artifactId.<java.lang.String: boolean equals(java.lang.Object)>($stack21);

        if $stack22 == 0 goto label2;

        $stack24 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack25 = virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(groupId);

        if $stack25 == 0 goto label2;

        $stack26 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack26.<java.io.PrintStream: void println(java.lang.String)>("RETURN");

        return a;

     label2:
        goto label1;

     label3:
        $stack17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack17.<java.io.PrintStream: void println(java.lang.String)>("Return null");

        return null;
    }

    public static void <clinit>()
    {
        <ProjectClasspathTest: java.lang.String dir> = "projects/scope/";

        return;
    }
}
