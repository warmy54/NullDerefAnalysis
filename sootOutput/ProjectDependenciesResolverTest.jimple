public class ProjectDependenciesResolverTest extends org.apache.maven.AbstractCoreMavenComponentTestCase
{
    private org.apache.maven.ProjectDependenciesResolver resolver;

    public void <init>()
    {
        ProjectDependenciesResolverTest this;

        this := @this: ProjectDependenciesResolverTest;

        specialinvoke this.<org.apache.maven.AbstractCoreMavenComponentTestCase: void <init>()>();

        return;
    }

    protected java.lang.String getProjectsDirectory()
    {
        ProjectDependenciesResolverTest this;

        this := @this: ProjectDependenciesResolverTest;

        return "src/test/projects/project-dependencies-resolver";
    }

    public void testSystemScopeDependencies() throws java.lang.Exception
    {
        ProjectDependenciesResolverTest this;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack12, $stack13;
        org.apache.maven.ProjectDependenciesResolver $stack15;
        java.util.Set $stack16, artifactDependencies;
        int $stack19;
        org.apache.maven.AbstractCoreMavenComponentTestCase$ProjectBuilder $u0;
        java.io.File $u1;
        org.apache.maven.ProjectDependenciesResolverTest $r0, $r1;

        this := @this: ProjectDependenciesResolverTest;

        $r0 = (org.apache.maven.ProjectDependenciesResolverTest) this;

        session = virtualinvoke $r0.<org.apache.maven.ProjectDependenciesResolverTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File)>(null);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $u0 = new org.apache.maven.AbstractCoreMavenComponentTestCase$ProjectBuilder;

        specialinvoke $u0.<org.apache.maven.AbstractCoreMavenComponentTestCase$ProjectBuilder: void <init>(org.apache.maven.AbstractCoreMavenComponentTestCase,org.apache.maven.project.MavenProject)>(this, project);

        $u1 = new java.io.File;

        $stack12 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack12, "pom.xml");

        $stack13 = virtualinvoke $u1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $u0.<org.apache.maven.AbstractCoreMavenComponentTestCase$ProjectBuilder: org.apache.maven.AbstractCoreMavenComponentTestCase$ProjectBuilder addDependency(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("com.mycompany", "system-dependency", "1.0", "system", $stack13);

        $r1 = (org.apache.maven.ProjectDependenciesResolverTest) this;

        $stack15 = $r1.<org.apache.maven.ProjectDependenciesResolverTest: org.apache.maven.ProjectDependenciesResolver resolver>;

        $stack16 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("compile");

        artifactDependencies = interfaceinvoke $stack15.<org.apache.maven.ProjectDependenciesResolver: java.util.Set resolve(org.apache.maven.project.MavenProject,java.util.Collection,org.apache.maven.execution.MavenSession)>(project, $stack16, session);

        $stack19 = interfaceinvoke artifactDependencies.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack19);

        return;
    }

    public void testSystemScopeDependencyIsPresentInTheCompileClasspathElements() throws java.lang.Exception
    {
        ProjectDependenciesResolverTest this;
        java.io.File pom, $stack11, $stack27, $u1;
        java.lang.String $stack12, $stack28;
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.ProjectDependenciesResolver $stack16;
        java.util.Set $stack17, $stack18;
        java.util.List elements, artifacts;
        int $stack21, $stack24;
        java.lang.Object $stack25;
        org.apache.maven.artifact.Artifact $stack26;
        org.hamcrest.Matcher $stack29;
        java.util.Properties $u0;
        org.apache.maven.ProjectDependenciesResolverTest $r0, $r1, $r2;

        this := @this: ProjectDependenciesResolverTest;

        $r0 = (org.apache.maven.ProjectDependenciesResolverTest) this;

        pom = virtualinvoke $r0.<org.apache.maven.ProjectDependenciesResolverTest: java.io.File getProject(java.lang.String)>("it0063");

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $u1 = new java.io.File;

        $stack11 = virtualinvoke pom.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $u1.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack11, "jdk/jre");

        $stack12 = virtualinvoke $u1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $u0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("jre.home", $stack12);

        $r1 = (org.apache.maven.ProjectDependenciesResolverTest) this;

        session = virtualinvoke $r1.<org.apache.maven.ProjectDependenciesResolverTest: org.apache.maven.execution.MavenSession createMavenSession(java.io.File,java.util.Properties)>(pom, $u0);

        project = virtualinvoke session.<org.apache.maven.execution.MavenSession: org.apache.maven.project.MavenProject getCurrentProject()>();

        $r2 = (org.apache.maven.ProjectDependenciesResolverTest) this;

        $stack16 = $r2.<org.apache.maven.ProjectDependenciesResolverTest: org.apache.maven.ProjectDependenciesResolver resolver>;

        $stack17 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("compile");

        $stack18 = interfaceinvoke $stack16.<org.apache.maven.ProjectDependenciesResolver: java.util.Set resolve(org.apache.maven.project.MavenProject,java.util.Collection,org.apache.maven.execution.MavenSession)>(project, $stack17, session);

        virtualinvoke project.<org.apache.maven.project.MavenProject: void setArtifacts(java.util.Set)>($stack18);

        elements = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getCompileClasspathElements()>();

        $stack21 = interfaceinvoke elements.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack21);

        artifacts = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getCompileArtifacts()>();

        $stack24 = interfaceinvoke artifacts.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack24);

        $stack25 = interfaceinvoke artifacts.<java.util.List: java.lang.Object get(int)>(0);

        $stack26 = (org.apache.maven.artifact.Artifact) $stack25;

        $stack27 = interfaceinvoke $stack26.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        $stack28 = virtualinvoke $stack27.<java.io.File: java.lang.String getName()>();

        $stack29 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("tools.jar");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack28, $stack29);

        return;
    }
}
