public class ProjectDependencyGraphStubTest extends java.lang.Object
{
    org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub stub;

    public void <init>()
    {
        ProjectDependencyGraphStubTest this;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub $u0;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest $r0;

        this := @this: ProjectDependencyGraphStubTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub;

        specialinvoke $u0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: void <init>()>();

        $r0 = (org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest) this;

        $r0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest: org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub stub> = $u0;

        return;
    }

    public void testADependencies()
    {
        ProjectDependencyGraphStubTest this;
        org.apache.maven.project.MavenProject $stack2;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub $stack3;
        java.util.List mavenProjects;
        int $stack6;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest $r0;

        this := @this: ProjectDependencyGraphStubTest;

        $r0 = (org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest) this;

        $stack3 = $r0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest: org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub stub>;

        $stack2 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        mavenProjects = virtualinvoke $stack3.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack2, 0);

        $stack6 = interfaceinvoke mavenProjects.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack6);

        return;
    }

    public void testBDepenencies()
    {
        ProjectDependencyGraphStubTest this;
        org.apache.maven.project.MavenProject $stack2, $stack7;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub $stack3;
        java.util.List bProjects;
        int $stack6;
        boolean $stack8;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest $r0;

        this := @this: ProjectDependencyGraphStubTest;

        $r0 = (org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest) this;

        $stack3 = $r0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest: org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub stub>;

        $stack2 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject B>;

        bProjects = virtualinvoke $stack3.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack2, 0);

        $stack6 = interfaceinvoke bProjects.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack6);

        $stack7 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        $stack8 = interfaceinvoke bProjects.<java.util.List: boolean contains(java.lang.Object)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack8);

        return;
    }

    public void testCDepenencies()
    {
        ProjectDependencyGraphStubTest this;
        org.apache.maven.project.MavenProject $stack2, $stack7;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub $stack3;
        java.util.List cProjects;
        int $stack6;
        boolean $stack8;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest $r0;

        this := @this: ProjectDependencyGraphStubTest;

        $r0 = (org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest) this;

        $stack3 = $r0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest: org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub stub>;

        $stack2 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject C>;

        cProjects = virtualinvoke $stack3.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack2, 0);

        $stack6 = interfaceinvoke cProjects.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(1, $stack6);

        $stack7 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject A>;

        $stack8 = interfaceinvoke cProjects.<java.util.List: boolean contains(java.lang.Object)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack8);

        return;
    }

    public void testXDepenencies()
    {
        ProjectDependencyGraphStubTest this;
        org.apache.maven.project.MavenProject $stack2, $stack7, $stack9;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub $stack3;
        java.util.List cProjects;
        int $stack6;
        boolean $stack8, $stack10;
        org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest $r0;

        this := @this: ProjectDependencyGraphStubTest;

        $r0 = (org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest) this;

        $stack3 = $r0.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStubTest: org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub stub>;

        $stack2 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject X>;

        cProjects = virtualinvoke $stack3.<org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>($stack2, 0);

        $stack6 = interfaceinvoke cProjects.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack6);

        $stack7 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject C>;

        $stack8 = interfaceinvoke cProjects.<java.util.List: boolean contains(java.lang.Object)>($stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack8);

        $stack9 = <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.project.MavenProject B>;

        $stack10 = interfaceinvoke cProjects.<java.util.List: boolean contains(java.lang.Object)>($stack9);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        return;
    }
}
