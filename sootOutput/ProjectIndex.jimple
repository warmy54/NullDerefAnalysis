public final class ProjectIndex extends java.lang.Object
{
    private final java.util.Map projects;
    private final java.util.Map indices;

    public void <init>(java.util.List)
    {
        ProjectIndex this;
        java.util.List projects;
        int $stack6, $stack7, $stack9, $stack10, $stack11, i;
        java.lang.Object $stack12;
        org.apache.maven.project.MavenProject project;
        java.lang.String key;
        java.util.Map $stack14, $stack16;
        java.lang.Integer $stack17;
        java.util.HashMap $u0, $u1;
        org.apache.maven.lifecycle.internal.ProjectIndex $r0, $r1, $r2, $r3;

        this := @this: ProjectIndex;

        projects := @parameter0: java.util.List;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        $stack6 = interfaceinvoke projects.<java.util.List: int size()>();

        $stack7 = $stack6 * 2;

        specialinvoke $u0.<java.util.HashMap: void <init>(int)>($stack7);

        $r0 = (org.apache.maven.lifecycle.internal.ProjectIndex) this;

        $r0.<org.apache.maven.lifecycle.internal.ProjectIndex: java.util.Map projects> = $u0;

        $u1 = new java.util.HashMap;

        $stack9 = interfaceinvoke projects.<java.util.List: int size()>();

        $stack10 = $stack9 * 2;

        specialinvoke $u1.<java.util.HashMap: void <init>(int)>($stack10);

        $r1 = (org.apache.maven.lifecycle.internal.ProjectIndex) this;

        $r1.<org.apache.maven.lifecycle.internal.ProjectIndex: java.util.Map indices> = $u1;

        i = 0;

     label1:
        $stack11 = interfaceinvoke projects.<java.util.List: int size()>();

        if i >= $stack11 goto label2;

        $stack12 = interfaceinvoke projects.<java.util.List: java.lang.Object get(int)>(i);

        project = (org.apache.maven.project.MavenProject) $stack12;

        key = staticinvoke <org.apache.maven.lifecycle.internal.builder.BuilderCommon: java.lang.String getKey(org.apache.maven.project.MavenProject)>(project);

        $r2 = (org.apache.maven.lifecycle.internal.ProjectIndex) this;

        $stack14 = virtualinvoke $r2.<org.apache.maven.lifecycle.internal.ProjectIndex: java.util.Map getProjects()>();

        interfaceinvoke $stack14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, project);

        $r3 = (org.apache.maven.lifecycle.internal.ProjectIndex) this;

        $stack16 = virtualinvoke $r3.<org.apache.maven.lifecycle.internal.ProjectIndex: java.util.Map getIndices()>();

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i);

        interfaceinvoke $stack16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack17);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public java.util.Map getProjects()
    {
        ProjectIndex this;
        java.util.Map $stack1;
        org.apache.maven.lifecycle.internal.ProjectIndex $r0;

        this := @this: ProjectIndex;

        $r0 = (org.apache.maven.lifecycle.internal.ProjectIndex) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.ProjectIndex: java.util.Map projects>;

        return $stack1;
    }

    public java.util.Map getIndices()
    {
        ProjectIndex this;
        java.util.Map $stack1;
        org.apache.maven.lifecycle.internal.ProjectIndex $r0;

        this := @this: ProjectIndex;

        $r0 = (org.apache.maven.lifecycle.internal.ProjectIndex) this;

        $stack1 = $r0.<org.apache.maven.lifecycle.internal.ProjectIndex: java.util.Map indices>;

        return $stack1;
    }
}
