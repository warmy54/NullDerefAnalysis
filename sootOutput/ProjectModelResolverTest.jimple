public class ProjectModelResolverTest extends org.apache.maven.project.AbstractMavenProjectTestCase
{

    public void <init>()
    {
        ProjectModelResolverTest this;

        this := @this: ProjectModelResolverTest;

        specialinvoke this.<org.apache.maven.project.AbstractMavenProjectTestCase: void <init>()>();

        return;
    }

    public void testResolveParentThrowsUnresolvableModelExceptionWhenNotFound() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack7, $stack8;
        org.hamcrest.Matcher $stack9;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("0");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack5 = staticinvoke <ProjectModelResolverTest$lambda_testResolveParentThrowsUnresolvableModelExceptionWhenNotFound_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectModelResolverTest,org.apache.maven.model.Parent)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack7 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("Could not find artifact org.apache:apache:pom:0 in central");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack9);

        return;
    }

    public void testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("[2.0,2.1)");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack5 = staticinvoke <ProjectModelResolverTest$lambda_testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound_1__310: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectModelResolverTest,org.apache.maven.model.Parent)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("No versions matched the requested parent version range \'[2.0,2.1)\'", $stack8);

        return;
    }

    public void testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("[1,)");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack5 = staticinvoke <ProjectModelResolverTest$lambda_testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound_2__314: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectModelResolverTest,org.apache.maven.model.Parent)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("The requested parent version range \'[1,)\' does not specify an upper bound", $stack8);

        return;
    }

    public void testResolveParentSuccessfullyResolvesExistingParentWithoutRange() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("1");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack6);

        return;
    }

    public void testResolveParentSuccessfullyResolvesExistingParentUsingHighestVersion() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Parent $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Parent;

        specialinvoke $u0.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>("(,2.0)");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack6);

        return;
    }

    public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack7, $stack8;
        org.hamcrest.Matcher $stack9;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("0");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack5 = staticinvoke <ProjectModelResolverTest$lambda_testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound_3__311: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectModelResolverTest,org.apache.maven.model.Dependency)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack7 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("Could not find artifact org.apache:apache:pom:0 in central");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack9);

        return;
    }

    public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("[2.0,2.1)");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack5 = staticinvoke <ProjectModelResolverTest$lambda_testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound_4__312: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectModelResolverTest,org.apache.maven.model.Dependency)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("No versions matched the requested dependency version range \'[2.0,2.1)\'", $stack8);

        return;
    }

    public void testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        org.apache.maven.model.resolution.UnresolvableModelException e;
        java.lang.String $stack8;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("[1,)");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack5 = staticinvoke <ProjectModelResolverTest$lambda_testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound_5__313: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.project.ProjectModelResolverTest,org.apache.maven.model.Dependency)>($r0, $u0);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/model/resolution/UnresolvableModelException;", $stack5, "Expected \'UnresolvableModelException\' not thrown.");

        e = (org.apache.maven.model.resolution.UnresolvableModelException) $stack6;

        $stack8 = virtualinvoke e.<org.apache.maven.model.resolution.UnresolvableModelException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("The requested dependency version range \'[1,)\' does not specify an upper bound", $stack8);

        return;
    }

    public void testResolveDependencySuccessfullyResolvesExistingDependencyWithoutRange() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("1");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack6);

        return;
    }

    public void testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVersion() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack3;
        org.apache.maven.model.building.ModelSource $stack4;
        java.lang.String $stack6;
        org.apache.maven.model.Dependency $u0;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        $u0 = new org.apache.maven.model.Dependency;

        specialinvoke $u0.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>("org.apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>("apache");

        virtualinvoke $u0.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>("(,2.0)");

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        $stack4 = interfaceinvoke $stack3.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>($u0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = virtualinvoke $u0.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack6);

        return;
    }

    private org.apache.maven.model.resolution.ModelResolver newModelResolver() throws java.lang.Exception
    {
        ProjectModelResolverTest this;
        org.apache.maven.artifact.repository.ArtifactRepository $stack4;
        java.lang.String $stack5;
        org.eclipse.aether.DefaultRepositorySystemSession repoSession;
        org.codehaus.plexus.PlexusContainer $stack11, $stack14;
        java.lang.Object $stack12, $stack15;
        org.eclipse.aether.RepositorySystem $stack13;
        org.eclipse.aether.impl.RemoteRepositoryManager $stack16;
        java.util.List $stack17;
        org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging $stack18;
        java.io.File $u0;
        org.apache.maven.project.LegacyLocalRepositoryManager $u1;
        org.apache.maven.project.ProjectModelResolver $u2;
        org.apache.maven.project.ProjectModelResolverTest $r0, $r2, $r3, $r4;
        org.eclipse.aether.repository.LocalRepositoryManager $r1;
        org.eclipse.aether.RepositorySystemSession $r5;
        org.apache.maven.model.resolution.ModelResolver $r6;

        this := @this: ProjectModelResolverTest;

        $u0 = new java.io.File;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack5 = interfaceinvoke $stack4.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack5);

        repoSession = staticinvoke <org.apache.maven.repository.internal.MavenRepositorySystemUtils: org.eclipse.aether.DefaultRepositorySystemSession newSession()>();

        $u1 = new org.apache.maven.project.LegacyLocalRepositoryManager;

        specialinvoke $u1.<org.apache.maven.project.LegacyLocalRepositoryManager: void <init>(java.io.File)>($u0);

        $r1 = (org.eclipse.aether.repository.LocalRepositoryManager) $u1;

        virtualinvoke repoSession.<org.eclipse.aether.DefaultRepositorySystemSession: org.eclipse.aether.DefaultRepositorySystemSession setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)>($r1);

        $u2 = new org.apache.maven.project.ProjectModelResolver;

        $r2 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack11 = virtualinvoke $r2.<org.apache.maven.project.ProjectModelResolverTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack12 = interfaceinvoke $stack11.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/eclipse/aether/RepositorySystem;");

        $stack13 = (org.eclipse.aether.RepositorySystem) $stack12;

        $r3 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack14 = virtualinvoke $r3.<org.apache.maven.project.ProjectModelResolverTest: org.codehaus.plexus.PlexusContainer getContainer()>();

        $stack15 = interfaceinvoke $stack14.<org.codehaus.plexus.PlexusContainer: java.lang.Object lookup(java.lang.Class)>(class "Lorg/eclipse/aether/impl/RemoteRepositoryManager;");

        $stack16 = (org.eclipse.aether.impl.RemoteRepositoryManager) $stack15;

        $r4 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack17 = specialinvoke $r4.<org.apache.maven.project.ProjectModelResolverTest: java.util.List getRemoteRepositories()>();

        $stack18 = <org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging: org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging REQUEST_DOMINANT>;

        $r5 = (org.eclipse.aether.RepositorySystemSession) repoSession;

        specialinvoke $u2.<org.apache.maven.project.ProjectModelResolver: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.RepositorySystem,org.eclipse.aether.impl.RemoteRepositoryManager,java.util.List,org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging,org.apache.maven.project.ReactorModelPool)>($r5, null, $stack13, $stack16, $stack17, $stack18, null);

        $r6 = (org.apache.maven.model.resolution.ModelResolver) $u2;

        return $r6;
    }

    private java.util.List getRemoteRepositories() throws org.apache.maven.artifact.InvalidRepositoryException
    {
        java.io.File $stack3, repoDir;
        java.lang.String $stack4, $stack10;
        org.eclipse.aether.repository.RemoteRepository$Builder $stack6;
        java.net.URI $stack9;
        org.eclipse.aether.repository.RemoteRepository remoteRepository;
        java.util.List $stack12;
        ProjectModelResolverTest this;

        this := @this: ProjectModelResolverTest;

        $stack3 = new java.io.File;

        $stack4 = staticinvoke <org.codehaus.plexus.testing.PlexusExtension: java.lang.String getBasedir()>();

        specialinvoke $stack3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack4, "src/test/remote-repo");

        repoDir = virtualinvoke $stack3.<java.io.File: java.io.File getAbsoluteFile()>();

        $stack6 = new org.eclipse.aether.repository.RemoteRepository$Builder;

        $stack9 = virtualinvoke repoDir.<java.io.File: java.net.URI toURI()>();

        $stack10 = virtualinvoke $stack9.<java.net.URI: java.lang.String toASCIIString()>();

        specialinvoke $stack6.<org.eclipse.aether.repository.RemoteRepository$Builder: void <init>(java.lang.String,java.lang.String,java.lang.String)>("central", "default", $stack10);

        remoteRepository = virtualinvoke $stack6.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository build()>();

        $stack12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(remoteRepository);

        return $stack12;
    }

    private void lambda$testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound$5(org.apache.maven.model.Dependency) throws java.lang.Throwable
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Dependency dependency;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>(dependency);

        return;
    }

    private void lambda$testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound$4(org.apache.maven.model.Dependency) throws java.lang.Throwable
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Dependency dependency;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>(dependency);

        return;
    }

    private void lambda$testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound$3(org.apache.maven.model.Dependency) throws java.lang.Throwable
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Dependency dependency;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>(dependency);

        return;
    }

    private void lambda$testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound$2(org.apache.maven.model.Parent) throws java.lang.Throwable
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Parent parent;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        parent := @parameter0: org.apache.maven.model.Parent;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>(parent);

        return;
    }

    private void lambda$testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound$1(org.apache.maven.model.Parent) throws java.lang.Throwable
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Parent parent;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        parent := @parameter0: org.apache.maven.model.Parent;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>(parent);

        return;
    }

    private void lambda$testResolveParentThrowsUnresolvableModelExceptionWhenNotFound$0(org.apache.maven.model.Parent) throws java.lang.Throwable
    {
        ProjectModelResolverTest this;
        org.apache.maven.model.resolution.ModelResolver $stack2;
        org.apache.maven.model.Parent parent;
        org.apache.maven.project.ProjectModelResolverTest $r0;

        this := @this: ProjectModelResolverTest;

        parent := @parameter0: org.apache.maven.model.Parent;

        $r0 = (org.apache.maven.project.ProjectModelResolverTest) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.project.ProjectModelResolverTest: org.apache.maven.model.resolution.ModelResolver newModelResolver()>();

        interfaceinvoke $stack2.<org.apache.maven.model.resolution.ModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>(parent);

        return;
    }
}
