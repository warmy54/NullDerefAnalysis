public class ProjectSorter extends java.lang.Object
{
    private org.codehaus.plexus.util.dag.DAG dag;
    private java.util.List sortedProjects;
    private java.util.Map projectMap;
    private org.apache.maven.project.MavenProject topLevelProject;

    public void <init>(java.util.Collection) throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        ProjectSorter this;
        java.util.Collection projects;
        int $stack15, $stack16, $stack18, $stack19, $stack27;
        boolean $stack21, $stack25, $stack31, $stack45, $stack52, $stack60, $stack70;
        org.codehaus.plexus.util.dag.DAG $stack22, $stack28, $stack101, $u0;
        java.util.List $stack23, $stack32, $stack43, $stack68, vertices#14, buildExtensions#18, project#22;
        java.lang.Object $stack33, $stack35, $stack39, $stack42, $stack53, $stack63, $stack72, $stack85, $stack91, $stack94, $stack99;
        java.util.Map $stack34, $stack41, $stack54, $stack64, $stack73, $stack78, $stack86, $stack93, vertices;
        org.apache.maven.project.MavenProject $stack36, project, conflictingProject;
        org.apache.maven.model.Model $stack46;
        java.lang.String $stack55, $stack56, $stack57, $stack65, $stack66, $stack67, $stack74, $stack75, $stack76, $stack80, $stack81, $stack82, $stack87, $stack88, $stack89, $stack95, $stack96, $stack100, $stack112, projectId, projectKey, conflictingProject#24;
        org.apache.maven.model.Dependency dependency, vertices#12;
        java.util.function.Function $stack98;
        org.codehaus.plexus.util.dag.Vertex $stack102, project#8;
        java.io.File $stack106, $stack107;
        java.lang.StringBuilder $stack109, $stack110, $stack111, $u3;
        java.util.Iterator sortedProjects, projectKey#11, buildExtensions, extension, plugin#19, projectId#23;
        org.apache.maven.model.Parent projectKey#13;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.model.Extension extension#20;
        java.util.HashMap $u1, $u2;
        org.apache.maven.project.DuplicateProjectException $u4;
        java.util.ArrayList $u5;
        org.apache.maven.project.ProjectSorter $r0, $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.Throwable $r3;

        this := @this: ProjectSorter;

        projects := @parameter0: java.util.Collection;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.codehaus.plexus.util.dag.DAG;

        specialinvoke $u0.<org.codehaus.plexus.util.dag.DAG: void <init>()>();

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $r0.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag> = $u0;

        $u1 = new java.util.HashMap;

        $stack15 = interfaceinvoke projects.<java.util.Collection: int size()>();

        $stack16 = $stack15 * 2;

        specialinvoke $u1.<java.util.HashMap: void <init>(int)>($stack16);

        $r1 = (org.apache.maven.project.ProjectSorter) this;

        $r1.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap> = $u1;

        $u2 = new java.util.HashMap;

        $stack18 = interfaceinvoke projects.<java.util.Collection: int size()>();

        $stack19 = $stack18 * 2;

        specialinvoke $u2.<java.util.HashMap: void <init>(int)>($stack19);

        sortedProjects = interfaceinvoke projects.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack21 = interfaceinvoke sortedProjects.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label03;

        $stack91 = interfaceinvoke sortedProjects.<java.util.Iterator: java.lang.Object next()>();

        project = (org.apache.maven.project.MavenProject) $stack91;

        projectId = staticinvoke <org.apache.maven.project.ProjectSorter: java.lang.String getId(org.apache.maven.project.MavenProject)>(project);

        $r2 = (org.apache.maven.project.ProjectSorter) this;

        $stack93 = $r2.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack94 = interfaceinvoke $stack93.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(projectId, project);

        conflictingProject = (org.apache.maven.project.MavenProject) $stack94;

        if conflictingProject == null goto label02;

        $u4 = new org.apache.maven.project.DuplicateProjectException;

        $stack106 = virtualinvoke conflictingProject.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        $stack107 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack109 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Project \'");

        $stack110 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(projectId);

        $stack111 = virtualinvoke $stack110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is duplicated in the reactor");

        $stack112 = virtualinvoke $stack111.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<org.apache.maven.project.DuplicateProjectException: void <init>(java.lang.String,java.io.File,java.io.File,java.lang.String)>(projectId, $stack106, $stack107, $stack112);

        $r3 = (java.lang.Throwable) $u4;

        throw $r3;

     label02:
        $stack95 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack96 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        projectKey = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>($stack95, $stack96);

        $stack98 = staticinvoke <ProjectSorter$lambda_new_0__309: java.util.function.Function bootstrap$()>();

        $stack99 = interfaceinvoke $u2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(projectKey, $stack98);

        vertices = (java.util.Map) $stack99;

        $stack100 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $r4 = (org.apache.maven.project.ProjectSorter) this;

        $stack101 = $r4.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        $stack102 = virtualinvoke $stack101.<org.codehaus.plexus.util.dag.DAG: org.codehaus.plexus.util.dag.Vertex addVertex(java.lang.String)>(projectId);

        interfaceinvoke vertices.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack100, $stack102);

        goto label01;

     label03:
        $r5 = (org.apache.maven.project.ProjectSorter) this;

        $stack22 = $r5.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        $stack23 = virtualinvoke $stack22.<org.codehaus.plexus.util.dag.DAG: java.util.List getVertices()>();

        sortedProjects = interfaceinvoke $stack23.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $stack25 = interfaceinvoke sortedProjects.<java.util.Iterator: boolean hasNext()>();

        if $stack25 == 0 goto label14;

        $stack39 = interfaceinvoke sortedProjects.<java.util.Iterator: java.lang.Object next()>();

        project#8 = (org.codehaus.plexus.util.dag.Vertex) $stack39;

        projectId = virtualinvoke project#8.<org.codehaus.plexus.util.dag.Vertex: java.lang.String getLabel()>();

        $r6 = (org.apache.maven.project.ProjectSorter) this;

        $stack41 = $r6.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack42 = interfaceinvoke $stack41.<java.util.Map: java.lang.Object get(java.lang.Object)>(projectId);

        conflictingProject = (org.apache.maven.project.MavenProject) $stack42;

        $stack43 = virtualinvoke conflictingProject.<org.apache.maven.project.MavenProject: java.util.List getDependencies()>();

        projectKey#11 = interfaceinvoke $stack43.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack45 = interfaceinvoke projectKey#11.<java.util.Iterator: boolean hasNext()>();

        if $stack45 == 0 goto label06;

        $stack85 = interfaceinvoke projectKey#11.<java.util.Iterator: java.lang.Object next()>();

        vertices#12 = (org.apache.maven.model.Dependency) $stack85;

        $r7 = (org.apache.maven.project.ProjectSorter) this;

        $stack86 = $r7.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack87 = virtualinvoke vertices#12.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack88 = virtualinvoke vertices#12.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack89 = virtualinvoke vertices#12.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        $r8 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r8.<org.apache.maven.project.ProjectSorter: void addEdge(java.util.Map,java.util.Map,org.apache.maven.project.MavenProject,org.codehaus.plexus.util.dag.Vertex,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($stack86, $u2, conflictingProject, project#8, $stack87, $stack88, $stack89, 0, 0);

        goto label05;

     label06:
        $stack46 = virtualinvoke conflictingProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        projectKey#13 = virtualinvoke $stack46.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        if projectKey#13 == null goto label07;

        $r9 = (org.apache.maven.project.ProjectSorter) this;

        $stack78 = $r9.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack80 = virtualinvoke projectKey#13.<org.apache.maven.model.Parent: java.lang.String getGroupId()>();

        $stack81 = virtualinvoke projectKey#13.<org.apache.maven.model.Parent: java.lang.String getArtifactId()>();

        $stack82 = virtualinvoke projectKey#13.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

        $r10 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r10.<org.apache.maven.project.ProjectSorter: void addEdge(java.util.Map,java.util.Map,org.apache.maven.project.MavenProject,org.codehaus.plexus.util.dag.Vertex,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($stack78, $u2, null, project#8, $stack80, $stack81, $stack82, 1, 0);

     label07:
        vertices#14 = virtualinvoke conflictingProject.<org.apache.maven.project.MavenProject: java.util.List getBuildPlugins()>();

        if vertices#14 == null goto label11;

        buildExtensions = interfaceinvoke vertices#14.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $stack60 = interfaceinvoke buildExtensions.<java.util.Iterator: boolean hasNext()>();

        if $stack60 == 0 goto label11;

        $stack63 = interfaceinvoke buildExtensions.<java.util.Iterator: java.lang.Object next()>();

        plugin = (org.apache.maven.model.Plugin) $stack63;

        $r11 = (org.apache.maven.project.ProjectSorter) this;

        $stack64 = $r11.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack65 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getGroupId()>();

        $stack66 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack67 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        $r12 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r12.<org.apache.maven.project.ProjectSorter: void addEdge(java.util.Map,java.util.Map,org.apache.maven.project.MavenProject,org.codehaus.plexus.util.dag.Vertex,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($stack64, $u2, conflictingProject, project#8, $stack65, $stack66, $stack67, 0, 1);

        $stack68 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.util.List getDependencies()>();

        extension = interfaceinvoke $stack68.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $stack70 = interfaceinvoke extension.<java.util.Iterator: boolean hasNext()>();

        if $stack70 == 0 goto label10;

        $stack72 = interfaceinvoke extension.<java.util.Iterator: java.lang.Object next()>();

        dependency = (org.apache.maven.model.Dependency) $stack72;

        $r13 = (org.apache.maven.project.ProjectSorter) this;

        $stack73 = $r13.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack74 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack75 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack76 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        $r14 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r14.<org.apache.maven.project.ProjectSorter: void addEdge(java.util.Map,java.util.Map,org.apache.maven.project.MavenProject,org.codehaus.plexus.util.dag.Vertex,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($stack73, $u2, conflictingProject, project#8, $stack74, $stack75, $stack76, 0, 1);

        goto label09;

     label10:
        goto label08;

     label11:
        buildExtensions#18 = virtualinvoke conflictingProject.<org.apache.maven.project.MavenProject: java.util.List getBuildExtensions()>();

        if buildExtensions#18 == null goto label13;

        plugin#19 = interfaceinvoke buildExtensions#18.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $stack52 = interfaceinvoke plugin#19.<java.util.Iterator: boolean hasNext()>();

        if $stack52 == 0 goto label13;

        $stack53 = interfaceinvoke plugin#19.<java.util.Iterator: java.lang.Object next()>();

        extension#20 = (org.apache.maven.model.Extension) $stack53;

        $r15 = (org.apache.maven.project.ProjectSorter) this;

        $stack54 = $r15.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack55 = virtualinvoke extension#20.<org.apache.maven.model.Extension: java.lang.String getGroupId()>();

        $stack56 = virtualinvoke extension#20.<org.apache.maven.model.Extension: java.lang.String getArtifactId()>();

        $stack57 = virtualinvoke extension#20.<org.apache.maven.model.Extension: java.lang.String getVersion()>();

        $r16 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r16.<org.apache.maven.project.ProjectSorter: void addEdge(java.util.Map,java.util.Map,org.apache.maven.project.MavenProject,org.codehaus.plexus.util.dag.Vertex,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($stack54, $u2, conflictingProject, project#8, $stack55, $stack56, $stack57, 0, 1);

        goto label12;

     label13:
        goto label04;

     label14:
        $u5 = new java.util.ArrayList;

        $stack27 = interfaceinvoke projects.<java.util.Collection: int size()>();

        specialinvoke $u5.<java.util.ArrayList: void <init>(int)>($stack27);

        $r17 = (org.apache.maven.project.ProjectSorter) this;

        $stack28 = $r17.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        project#22 = staticinvoke <org.codehaus.plexus.util.dag.TopologicalSorter: java.util.List sort(org.codehaus.plexus.util.dag.DAG)>($stack28);

        projectId#23 = interfaceinvoke project#22.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $stack31 = interfaceinvoke projectId#23.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label16;

        $stack33 = interfaceinvoke projectId#23.<java.util.Iterator: java.lang.Object next()>();

        conflictingProject#24 = (java.lang.String) $stack33;

        $r18 = (org.apache.maven.project.ProjectSorter) this;

        $stack34 = $r18.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(conflictingProject#24);

        $stack36 = (org.apache.maven.project.MavenProject) $stack35;

        interfaceinvoke $u5.<java.util.List: boolean add(java.lang.Object)>($stack36);

        goto label15;

     label16:
        $stack32 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u5);

        $r19 = (org.apache.maven.project.ProjectSorter) this;

        $r19.<org.apache.maven.project.ProjectSorter: java.util.List sortedProjects> = $stack32;

        return;
    }

    private void addEdge(java.util.Map, java.util.Map, org.apache.maven.project.MavenProject, org.codehaus.plexus.util.dag.Vertex, java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws org.codehaus.plexus.util.dag.CycleDetectedException
    {
        java.lang.String groupId, artifactId, projectKey, version;
        java.util.Map vertexMap, vertices, projectMap;
        java.lang.Object $stack15, $stack20, $stack22;
        ProjectSorter this;
        boolean $stack16, $stack19, force, safe;
        java.util.Collection $stack17;
        org.codehaus.plexus.util.dag.Vertex vertex, projectVertex;
        org.apache.maven.project.MavenProject project;
        java.util.Iterator vertex;
        org.apache.maven.project.ProjectSorter $r0, $r1, $r2;

        this := @this: ProjectSorter;

        projectMap := @parameter0: java.util.Map;

        vertexMap := @parameter1: java.util.Map;

        project := @parameter2: org.apache.maven.project.MavenProject;

        projectVertex := @parameter3: org.codehaus.plexus.util.dag.Vertex;

        groupId := @parameter4: java.lang.String;

        artifactId := @parameter5: java.lang.String;

        version := @parameter6: java.lang.String;

        force := @parameter7: boolean;

        safe := @parameter8: boolean;

        projectKey = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>(groupId, artifactId);

        $stack15 = interfaceinvoke vertexMap.<java.util.Map: java.lang.Object get(java.lang.Object)>(projectKey);

        vertices = (java.util.Map) $stack15;

        if vertices == null goto label4;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack16 = specialinvoke $r0.<org.apache.maven.project.ProjectSorter: boolean isSpecificVersion(java.lang.String)>(version);

        if $stack16 == 0 goto label2;

        $stack22 = interfaceinvoke vertices.<java.util.Map: java.lang.Object get(java.lang.Object)>(version);

        vertex = (org.codehaus.plexus.util.dag.Vertex) $stack22;

        if vertex == null goto label1;

        $r1 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r1.<org.apache.maven.project.ProjectSorter: void addEdge(org.codehaus.plexus.util.dag.Vertex,org.codehaus.plexus.util.dag.Vertex,org.apache.maven.project.MavenProject,java.util.Map,boolean,boolean)>(projectVertex, vertex, project, projectMap, force, safe);

     label1:
        goto label4;

     label2:
        $stack17 = interfaceinvoke vertices.<java.util.Map: java.util.Collection values()>();

        vertex = interfaceinvoke $stack17.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $stack19 = interfaceinvoke vertex.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label4;

        $stack20 = interfaceinvoke vertex.<java.util.Iterator: java.lang.Object next()>();

        vertex = (org.codehaus.plexus.util.dag.Vertex) $stack20;

        $r2 = (org.apache.maven.project.ProjectSorter) this;

        specialinvoke $r2.<org.apache.maven.project.ProjectSorter: void addEdge(org.codehaus.plexus.util.dag.Vertex,org.codehaus.plexus.util.dag.Vertex,org.apache.maven.project.MavenProject,java.util.Map,boolean,boolean)>(projectVertex, vertex, project, projectMap, force, safe);

        goto label3;

     label4:
        return;
    }

    private void addEdge(org.codehaus.plexus.util.dag.Vertex, org.codehaus.plexus.util.dag.Vertex, org.apache.maven.project.MavenProject, java.util.Map, boolean, boolean) throws org.codehaus.plexus.util.dag.CycleDetectedException
    {
        org.codehaus.plexus.util.dag.Vertex fromVertex, toVertex;
        boolean $stack8, force, $stack11, safe;
        org.apache.maven.project.MavenProject fromProject, toProject;
        ProjectSorter this;
        java.util.List $stack10;
        org.codehaus.plexus.util.dag.DAG $stack15, $stack9;
        java.util.Map projectMap;
        java.lang.String $stack16;
        java.lang.Object $stack17;
        java.lang.Throwable $stack19;
        org.apache.maven.project.ProjectSorter $r0, $r1;

        this := @this: ProjectSorter;

        fromVertex := @parameter0: org.codehaus.plexus.util.dag.Vertex;

        toVertex := @parameter1: org.codehaus.plexus.util.dag.Vertex;

        fromProject := @parameter2: org.apache.maven.project.MavenProject;

        projectMap := @parameter3: java.util.Map;

        force := @parameter4: boolean;

        safe := @parameter5: boolean;

        $stack8 = virtualinvoke fromVertex.<java.lang.Object: boolean equals(java.lang.Object)>(toVertex);

        if $stack8 == 0 goto label1;

        return;

     label1:
        if fromProject == null goto label2;

        $stack16 = virtualinvoke toVertex.<org.codehaus.plexus.util.dag.Vertex: java.lang.String getLabel()>();

        $stack17 = interfaceinvoke projectMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack16);

        toProject = (org.apache.maven.project.MavenProject) $stack17;

        virtualinvoke fromProject.<org.apache.maven.project.MavenProject: void addProjectReference(org.apache.maven.project.MavenProject)>(toProject);

     label2:
        if force == 0 goto label3;

        $stack10 = virtualinvoke toVertex.<org.codehaus.plexus.util.dag.Vertex: java.util.List getChildren()>();

        $stack11 = interfaceinvoke $stack10.<java.util.List: boolean contains(java.lang.Object)>(fromVertex);

        if $stack11 == 0 goto label3;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack15 = $r0.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        virtualinvoke $stack15.<org.codehaus.plexus.util.dag.DAG: void removeEdge(org.codehaus.plexus.util.dag.Vertex,org.codehaus.plexus.util.dag.Vertex)>(toVertex, fromVertex);

     label3:
        $r1 = (org.apache.maven.project.ProjectSorter) this;

        $stack9 = $r1.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        virtualinvoke $stack9.<org.codehaus.plexus.util.dag.DAG: void addEdge(org.codehaus.plexus.util.dag.Vertex,org.codehaus.plexus.util.dag.Vertex)>(fromVertex, toVertex);

     label4:
        goto label6;

     label5:
        $stack19 := @caughtexception;

        if safe != 0 goto label6;

        throw $stack19;

     label6:
        return;

        catch org.codehaus.plexus.util.dag.CycleDetectedException from label3 to label4 with label5;
    }

    private boolean isSpecificVersion(java.lang.String)
    {
        java.lang.String version;
        boolean $stack2, $stack3, $stack5, $stack4;
        ProjectSorter this;

        this := @this: ProjectSorter;

        version := @parameter0: java.lang.String;

        $stack2 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(version);

        if $stack2 != 0 goto label1;

        $stack3 = virtualinvoke version.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $stack3 != 0 goto label1;

        $stack5 = virtualinvoke version.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $stack5 != 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public org.apache.maven.project.MavenProject getTopLevelProject()
    {
        ProjectSorter this;
        org.apache.maven.project.MavenProject $stack3, $stack9, project, $stack4;
        java.util.List $stack5;
        java.util.Iterator i;
        boolean $stack7, $stack11;
        java.lang.Object $stack10;
        org.apache.maven.project.ProjectSorter $r0, $r1, $r2, $r3, $r4;

        this := @this: ProjectSorter;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack3 = $r0.<org.apache.maven.project.ProjectSorter: org.apache.maven.project.MavenProject topLevelProject>;

        if $stack3 != null goto label3;

        $r1 = (org.apache.maven.project.ProjectSorter) this;

        $stack5 = $r1.<org.apache.maven.project.ProjectSorter: java.util.List sortedProjects>;

        i = interfaceinvoke $stack5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $r2 = (org.apache.maven.project.ProjectSorter) this;

        $stack9 = $r2.<org.apache.maven.project.ProjectSorter: org.apache.maven.project.MavenProject topLevelProject>;

        if $stack9 != null goto label3;

        $stack10 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        project = (org.apache.maven.project.MavenProject) $stack10;

        $stack11 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean isExecutionRoot()>();

        if $stack11 == 0 goto label2;

        $r3 = (org.apache.maven.project.ProjectSorter) this;

        $r3.<org.apache.maven.project.ProjectSorter: org.apache.maven.project.MavenProject topLevelProject> = project;

     label2:
        goto label1;

     label3:
        $r4 = (org.apache.maven.project.ProjectSorter) this;

        $stack4 = $r4.<org.apache.maven.project.ProjectSorter: org.apache.maven.project.MavenProject topLevelProject>;

        return $stack4;
    }

    public java.util.List getSortedProjects()
    {
        ProjectSorter this;
        java.util.List $stack1;
        org.apache.maven.project.ProjectSorter $r0;

        this := @this: ProjectSorter;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack1 = $r0.<org.apache.maven.project.ProjectSorter: java.util.List sortedProjects>;

        return $stack1;
    }

    public boolean hasMultipleProjects()
    {
        ProjectSorter this;
        java.util.List $stack1;
        int $stack2;
        boolean $stack3;
        org.apache.maven.project.ProjectSorter $r0;

        this := @this: ProjectSorter;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack1 = $r0.<org.apache.maven.project.ProjectSorter: java.util.List sortedProjects>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: int size()>();

        if $stack2 <= 1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public java.util.List getDependents(java.lang.String)
    {
        ProjectSorter this;
        java.lang.String id;
        org.codehaus.plexus.util.dag.DAG $stack2;
        java.util.List $stack3;
        org.apache.maven.project.ProjectSorter $r0;

        this := @this: ProjectSorter;

        id := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack2 = $r0.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        $stack3 = virtualinvoke $stack2.<org.codehaus.plexus.util.dag.DAG: java.util.List getParentLabels(java.lang.String)>(id);

        return $stack3;
    }

    public java.util.List getDependencies(java.lang.String)
    {
        ProjectSorter this;
        java.lang.String id;
        org.codehaus.plexus.util.dag.DAG $stack2;
        java.util.List $stack3;
        org.apache.maven.project.ProjectSorter $r0;

        this := @this: ProjectSorter;

        id := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack2 = $r0.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        $stack3 = virtualinvoke $stack2.<org.codehaus.plexus.util.dag.DAG: java.util.List getChildLabels(java.lang.String)>(id);

        return $stack3;
    }

    public static java.lang.String getId(org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack1, $stack2, $stack3, $stack4;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack1 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $stack4 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String key(java.lang.String,java.lang.String,java.lang.String)>($stack1, $stack2, $stack3);

        return $stack4;
    }

    public org.codehaus.plexus.util.dag.DAG getDAG()
    {
        ProjectSorter this;
        org.codehaus.plexus.util.dag.DAG $stack1;
        org.apache.maven.project.ProjectSorter $r0;

        this := @this: ProjectSorter;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack1 = $r0.<org.apache.maven.project.ProjectSorter: org.codehaus.plexus.util.dag.DAG dag>;

        return $stack1;
    }

    public java.util.Map getProjectMap()
    {
        ProjectSorter this;
        java.util.Map $stack1;
        org.apache.maven.project.ProjectSorter $r0;

        this := @this: ProjectSorter;

        $r0 = (org.apache.maven.project.ProjectSorter) this;

        $stack1 = $r0.<org.apache.maven.project.ProjectSorter: java.util.Map projectMap>;

        return $stack1;
    }

    private static java.util.Map lambda$new$0(java.lang.String)
    {
        java.util.HashMap $stack1;
        java.lang.String k;

        k := @parameter0: java.lang.String;

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>(int,float)>(2, 1.0F);

        return $stack1;
    }
}
