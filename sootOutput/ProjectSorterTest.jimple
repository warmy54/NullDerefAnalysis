public class ProjectSorterTest extends java.lang.Object
{

    public void <init>()
    {
        ProjectSorterTest this;

        this := @this: ProjectSorterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private org.apache.maven.model.Parent createParent(org.apache.maven.project.MavenProject)
    {
        ProjectSorterTest this;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack2, $stack3, $stack4;
        org.apache.maven.model.Parent $stack5;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack5 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Parent createParent(java.lang.String,java.lang.String,java.lang.String)>($stack2, $stack3, $stack4);

        return $stack5;
    }

    private org.apache.maven.model.Parent createParent(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.maven.model.Parent $stack5;
        java.lang.String groupId, artifactId, version;
        ProjectSorterTest this;

        this := @this: ProjectSorterTest;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack5 = new org.apache.maven.model.Parent;

        specialinvoke $stack5.<org.apache.maven.model.Parent: void <init>()>();

        virtualinvoke $stack5.<org.apache.maven.model.Parent: void setGroupId(java.lang.String)>(groupId);

        virtualinvoke $stack5.<org.apache.maven.model.Parent: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack5.<org.apache.maven.model.Parent: void setVersion(java.lang.String)>(version);

        return $stack5;
    }

    private org.apache.maven.model.Dependency createDependency(org.apache.maven.project.MavenProject)
    {
        ProjectSorterTest this;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack2, $stack3, $stack4;
        org.apache.maven.model.Dependency $stack5;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack5 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(java.lang.String,java.lang.String,java.lang.String)>($stack2, $stack3, $stack4);

        return $stack5;
    }

    private org.apache.maven.model.Dependency createDependency(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.maven.model.Dependency $stack5;
        java.lang.String groupId, artifactId, version;
        ProjectSorterTest this;

        this := @this: ProjectSorterTest;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack5 = new org.apache.maven.model.Dependency;

        specialinvoke $stack5.<org.apache.maven.model.Dependency: void <init>()>();

        virtualinvoke $stack5.<org.apache.maven.model.Dependency: void setGroupId(java.lang.String)>(groupId);

        virtualinvoke $stack5.<org.apache.maven.model.Dependency: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack5.<org.apache.maven.model.Dependency: void setVersion(java.lang.String)>(version);

        return $stack5;
    }

    private org.apache.maven.model.Plugin createPlugin(org.apache.maven.project.MavenProject)
    {
        ProjectSorterTest this;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack2, $stack3, $stack4;
        org.apache.maven.model.Plugin $stack5;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack5 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(java.lang.String,java.lang.String,java.lang.String)>($stack2, $stack3, $stack4);

        return $stack5;
    }

    private org.apache.maven.model.Plugin createPlugin(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.maven.model.Plugin $stack5;
        java.lang.String groupId, artifactId, version;
        ProjectSorterTest this;

        this := @this: ProjectSorterTest;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack5 = new org.apache.maven.model.Plugin;

        specialinvoke $stack5.<org.apache.maven.model.Plugin: void <init>()>();

        virtualinvoke $stack5.<org.apache.maven.model.Plugin: void setGroupId(java.lang.String)>(groupId);

        virtualinvoke $stack5.<org.apache.maven.model.Plugin: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack5.<org.apache.maven.model.Plugin: void setVersion(java.lang.String)>(version);

        return $stack5;
    }

    private org.apache.maven.model.Extension createExtension(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.maven.model.Extension $stack5;
        java.lang.String groupId, artifactId, version;
        ProjectSorterTest this;

        this := @this: ProjectSorterTest;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack5 = new org.apache.maven.model.Extension;

        specialinvoke $stack5.<org.apache.maven.model.Extension: void <init>()>();

        virtualinvoke $stack5.<org.apache.maven.model.Extension: void setGroupId(java.lang.String)>(groupId);

        virtualinvoke $stack5.<org.apache.maven.model.Extension: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack5.<org.apache.maven.model.Extension: void setVersion(java.lang.String)>(version);

        return $stack5;
    }

    private static org.apache.maven.project.MavenProject createProject(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.maven.model.Model $stack4;
        java.lang.String groupId, artifactId, version;
        org.apache.maven.model.Build $stack5;
        org.apache.maven.project.MavenProject $stack6;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $stack4 = new org.apache.maven.model.Model;

        specialinvoke $stack4.<org.apache.maven.model.Model: void <init>()>();

        virtualinvoke $stack4.<org.apache.maven.model.Model: void setGroupId(java.lang.String)>(groupId);

        virtualinvoke $stack4.<org.apache.maven.model.Model: void setArtifactId(java.lang.String)>(artifactId);

        virtualinvoke $stack4.<org.apache.maven.model.Model: void setVersion(java.lang.String)>(version);

        $stack5 = new org.apache.maven.model.Build;

        specialinvoke $stack5.<org.apache.maven.model.Build: void <init>()>();

        virtualinvoke $stack4.<org.apache.maven.model.Model: void setBuild(org.apache.maven.model.Build)>($stack5);

        $stack6 = new org.apache.maven.project.MavenProject;

        specialinvoke $stack6.<org.apache.maven.project.MavenProject: void <init>(org.apache.maven.model.Model)>($stack4);

        return $stack6;
    }

    public void testShouldNotFailWhenPluginDepReferencesCurrentProject() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Model $stack6;
        org.apache.maven.model.Build build;
        ProjectSorterTest this;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.model.Dependency dep;
        java.util.List $stack11;
        org.apache.maven.project.ProjectSorter $u0;
        org.apache.maven.project.ProjectSorterTest $r0, $r1;

        this := @this: ProjectSorterTest;

        project = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "artifact", "1.0");

        $stack6 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack6.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        plugin = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(java.lang.String,java.lang.String,java.lang.String)>("other.group", "other-artifact", "1.0");

        $r1 = (org.apache.maven.project.ProjectSorterTest) this;

        dep = specialinvoke $r1.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(java.lang.String,java.lang.String,java.lang.String)>("group", "artifact", "1.0");

        virtualinvoke plugin.<org.apache.maven.model.Plugin: void addDependency(org.apache.maven.model.Dependency)>(dep);

        virtualinvoke build.<org.apache.maven.model.Build: void addPlugin(org.apache.maven.model.Plugin)>(plugin);

        $u0 = new org.apache.maven.project.ProjectSorter;

        $stack11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(project);

        specialinvoke $u0.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($stack11);

        return;
    }

    public void testShouldNotFailWhenManagedPluginDepReferencesCurrentProject() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Model $stack7;
        org.apache.maven.model.Build build;
        ProjectSorterTest this;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.model.Dependency dep;
        java.util.List $stack13;
        org.apache.maven.model.PluginManagement $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0, $r1;

        this := @this: ProjectSorterTest;

        project = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "artifact", "1.0");

        $stack7 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack7.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $u0 = new org.apache.maven.model.PluginManagement;

        specialinvoke $u0.<org.apache.maven.model.PluginManagement: void <init>()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        plugin = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(java.lang.String,java.lang.String,java.lang.String)>("other.group", "other-artifact", "1.0");

        $r1 = (org.apache.maven.project.ProjectSorterTest) this;

        dep = specialinvoke $r1.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(java.lang.String,java.lang.String,java.lang.String)>("group", "artifact", "1.0");

        virtualinvoke plugin.<org.apache.maven.model.Plugin: void addDependency(org.apache.maven.model.Dependency)>(dep);

        virtualinvoke $u0.<org.apache.maven.model.PluginManagement: void addPlugin(org.apache.maven.model.Plugin)>(plugin);

        virtualinvoke build.<org.apache.maven.model.Build: void setPluginManagement(org.apache.maven.model.PluginManagement)>($u0);

        $u1 = new org.apache.maven.project.ProjectSorter;

        $stack13 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(project);

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($stack13);

        return;
    }

    public void testShouldNotFailWhenProjectReferencesNonExistentProject() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Model $stack5;
        org.apache.maven.model.Build build;
        ProjectSorterTest this;
        org.apache.maven.model.Extension extension;
        java.util.List $stack9;
        org.apache.maven.project.ProjectSorter $u0;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        project = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "artifact", "1.0");

        $stack5 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack5.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        extension = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Extension createExtension(java.lang.String,java.lang.String,java.lang.String)>("other.group", "other-artifact", "1.0");

        virtualinvoke build.<org.apache.maven.model.Build: void addExtension(org.apache.maven.model.Extension)>(extension);

        $u0 = new org.apache.maven.project.ProjectSorter;

        $stack9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(project);

        specialinvoke $u0.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($stack9);

        return;
    }

    public void testMatchingArtifactIdsDifferentGroupIds() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject project1, project2;
        java.util.List $stack9, projects#2;
        ProjectSorterTest this;
        org.apache.maven.model.Dependency $stack10;
        java.lang.Object $stack14, $stack15;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        project1 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId1", "artifactId", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(project1);

        project2 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId2", "artifactId", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(project2);

        $stack9 = virtualinvoke project1.<org.apache.maven.project.MavenProject: java.util.List getDependencies()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack10 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(org.apache.maven.project.MavenProject)>(project2);

        interfaceinvoke $stack9.<java.util.List: boolean add(java.lang.Object)>($stack10);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack14 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(project2, $stack14);

        $stack15 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(project1, $stack15);

        return;
    }

    public void testMatchingGroupIdsDifferentArtifactIds() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject project1, project2;
        java.util.List $stack9, projects#2;
        ProjectSorterTest this;
        org.apache.maven.model.Dependency $stack10;
        java.lang.Object $stack14, $stack15;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        project1 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "artifactId1", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(project1);

        project2 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "artifactId2", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(project2);

        $stack9 = virtualinvoke project1.<org.apache.maven.project.MavenProject: java.util.List getDependencies()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack10 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(org.apache.maven.project.MavenProject)>(project2);

        interfaceinvoke $stack9.<java.util.List: boolean add(java.lang.Object)>($stack10);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack14 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(project2, $stack14);

        $stack15 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(project1, $stack15);

        return;
    }

    public void testMatchingIdsAndVersions() throws java.lang.Exception
    {
        java.util.ArrayList $stack4;
        org.apache.maven.project.MavenProject project1, project2;
        org.junit.jupiter.api.function.Executable $stack10;
        ProjectSorterTest this;

        this := @this: ProjectSorterTest;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>()>();

        project1 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "artifactId", "1.0");

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(project1);

        project2 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "artifactId", "1.0");

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(project2);

        $stack10 = staticinvoke <ProjectSorterTest$lambda_testMatchingIdsAndVersions_0__309: org.junit.jupiter.api.function.Executable bootstrap$(java.util.List)>($stack4);

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/project/DuplicateProjectException;", $stack10, "Duplicate projects should fail");

        return;
    }

    public void testMatchingIdsAndDifferentVersions() throws java.lang.Exception
    {
        java.util.ArrayList $stack4;
        org.apache.maven.project.MavenProject project1, project2;
        org.apache.maven.project.ProjectSorter $stack9;
        java.lang.Object $stack11, $stack12;
        ProjectSorterTest this;
        java.util.List projects#2;

        this := @this: ProjectSorterTest;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>()>();

        project1 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "artifactId", "1.0");

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(project1);

        project2 = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "artifactId", "2.0");

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>(project2);

        $stack9 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $stack9.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($stack4);

        projects#2 = virtualinvoke $stack9.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack11 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(project1, $stack11);

        $stack12 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(project2, $stack12);

        return;
    }

    public void testPluginDependenciesInfluenceSorting() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject parentProject, declaringProject, pluginLevelDepProject, pluginProject;
        org.apache.maven.model.Model $stack12, $stack16, $stack20, $stack25;
        ProjectSorterTest this;
        org.apache.maven.model.Parent $stack13, $stack17, $stack21;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.model.Dependency $stack24;
        org.apache.maven.model.Build build;
        java.lang.Object $stack29, $stack32;
        org.hamcrest.Matcher $stack30, $stack31;
        java.util.List projects#2;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0, $r1, $r2, $r3, $r4;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        parentProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "parent", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(parentProject);

        declaringProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "declarer", "1.0");

        virtualinvoke declaringProject.<org.apache.maven.project.MavenProject: void setParent(org.apache.maven.project.MavenProject)>(parentProject);

        $stack12 = virtualinvoke declaringProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack13 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Parent createParent(org.apache.maven.project.MavenProject)>(parentProject);

        virtualinvoke $stack12.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($stack13);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(declaringProject);

        pluginLevelDepProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "plugin-level-dep", "1.0");

        virtualinvoke pluginLevelDepProject.<org.apache.maven.project.MavenProject: void setParent(org.apache.maven.project.MavenProject)>(parentProject);

        $stack16 = virtualinvoke pluginLevelDepProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r1 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack17 = specialinvoke $r1.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Parent createParent(org.apache.maven.project.MavenProject)>(parentProject);

        virtualinvoke $stack16.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($stack17);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginLevelDepProject);

        pluginProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "plugin", "1.0");

        virtualinvoke pluginProject.<org.apache.maven.project.MavenProject: void setParent(org.apache.maven.project.MavenProject)>(parentProject);

        $stack20 = virtualinvoke pluginProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r2 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack21 = specialinvoke $r2.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Parent createParent(org.apache.maven.project.MavenProject)>(parentProject);

        virtualinvoke $stack20.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($stack21);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginProject);

        $r3 = (org.apache.maven.project.ProjectSorterTest) this;

        plugin = specialinvoke $r3.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(org.apache.maven.project.MavenProject)>(pluginProject);

        $r4 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack24 = specialinvoke $r4.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(org.apache.maven.project.MavenProject)>(pluginLevelDepProject);

        virtualinvoke plugin.<org.apache.maven.model.Plugin: void addDependency(org.apache.maven.model.Dependency)>($stack24);

        $stack25 = virtualinvoke declaringProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack25.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        virtualinvoke build.<org.apache.maven.model.Build: void addPlugin(org.apache.maven.model.Plugin)>(plugin);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack29 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(parentProject, $stack29);

        $stack30 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>(pluginProject);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(projects#2, $stack30);

        $stack31 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>(pluginLevelDepProject);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(projects#2, $stack31);

        $stack32 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(declaringProject, $stack32);

        return;
    }

    public void testPluginDependenciesInfluenceSorting_DeclarationInParent() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject parentProject, pluginProject, pluginLevelDepProject;
        org.apache.maven.model.Model $stack11, $stack15, $stack20;
        ProjectSorterTest this;
        org.apache.maven.model.Parent $stack12, $stack16;
        org.apache.maven.model.Plugin plugin;
        org.apache.maven.model.Dependency $stack19;
        org.apache.maven.model.Build build;
        java.lang.Object $stack24;
        org.hamcrest.Matcher $stack25, $stack26;
        java.util.List projects#2;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0, $r1, $r2, $r3;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        parentProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "parent-declarer", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(parentProject);

        pluginProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "plugin", "1.0");

        virtualinvoke pluginProject.<org.apache.maven.project.MavenProject: void setParent(org.apache.maven.project.MavenProject)>(parentProject);

        $stack11 = virtualinvoke pluginProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack12 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Parent createParent(org.apache.maven.project.MavenProject)>(parentProject);

        virtualinvoke $stack11.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($stack12);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginProject);

        pluginLevelDepProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("groupId", "plugin-level-dep", "1.0");

        virtualinvoke pluginLevelDepProject.<org.apache.maven.project.MavenProject: void setParent(org.apache.maven.project.MavenProject)>(parentProject);

        $stack15 = virtualinvoke pluginLevelDepProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r1 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack16 = specialinvoke $r1.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Parent createParent(org.apache.maven.project.MavenProject)>(parentProject);

        virtualinvoke $stack15.<org.apache.maven.model.Model: void setParent(org.apache.maven.model.Parent)>($stack16);

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginLevelDepProject);

        $r2 = (org.apache.maven.project.ProjectSorterTest) this;

        plugin = specialinvoke $r2.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(org.apache.maven.project.MavenProject)>(pluginProject);

        $r3 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack19 = specialinvoke $r3.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(org.apache.maven.project.MavenProject)>(pluginLevelDepProject);

        virtualinvoke plugin.<org.apache.maven.model.Plugin: void addDependency(org.apache.maven.model.Dependency)>($stack19);

        $stack20 = virtualinvoke parentProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        build = virtualinvoke $stack20.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        virtualinvoke build.<org.apache.maven.model.Build: void addPlugin(org.apache.maven.model.Plugin)>(plugin);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack24 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(parentProject, $stack24);

        $stack25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>(pluginProject);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(projects#2, $stack25);

        $stack26 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>(pluginLevelDepProject);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(projects#2, $stack26);

        return;
    }

    public void testPluginVersionsAreConsidered() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject pluginProjectA, pluginProjectB;
        org.apache.maven.model.Model $stack7, $stack12;
        org.apache.maven.model.Build $stack8, $stack13;
        ProjectSorterTest this;
        org.apache.maven.model.Plugin $stack9, $stack14;
        org.hamcrest.Matcher $stack17, $stack18;
        java.util.List projects#2;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0, $r1;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        pluginProjectA = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "plugin-a", "2.0-SNAPSHOT");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginProjectA);

        $stack7 = virtualinvoke pluginProjectA.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack9 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(java.lang.String,java.lang.String,java.lang.String)>("group", "plugin-b", "1.0");

        virtualinvoke $stack8.<org.apache.maven.model.Build: void addPlugin(org.apache.maven.model.Plugin)>($stack9);

        pluginProjectB = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "plugin-b", "2.0-SNAPSHOT");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginProjectB);

        $stack12 = virtualinvoke pluginProjectB.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $stack13 = virtualinvoke $stack12.<org.apache.maven.model.Model: org.apache.maven.model.Build getBuild()>();

        $r1 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack14 = specialinvoke $r1.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Plugin createPlugin(java.lang.String,java.lang.String,java.lang.String)>("group", "plugin-a", "1.0");

        virtualinvoke $stack13.<org.apache.maven.model.Build: void addPlugin(org.apache.maven.model.Plugin)>($stack14);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>(pluginProjectA);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(projects#2, $stack17);

        $stack18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>(pluginProjectB);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(projects#2, $stack18);

        return;
    }

    public void testDependencyPrecedesProjectThatUsesSpecificDependencyVersion() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject usingProject, pluginProject;
        org.apache.maven.model.Model $stack7;
        ProjectSorterTest this;
        org.apache.maven.model.Dependency $stack8;
        java.lang.Object $stack13, $stack14;
        java.util.List projects#2;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        usingProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "project", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(usingProject);

        $stack7 = virtualinvoke usingProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(java.lang.String,java.lang.String,java.lang.String)>("group", "dependency", "1.0");

        virtualinvoke $stack7.<org.apache.maven.model.Model: void addDependency(org.apache.maven.model.Dependency)>($stack8);

        pluginProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "dependency", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginProject);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack13 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(pluginProject, $stack13);

        $stack14 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(usingProject, $stack14);

        return;
    }

    public void testDependencyPrecedesProjectThatUsesUnresolvedDependencyVersion() throws java.lang.Exception
    {
        org.apache.maven.project.MavenProject usingProject, pluginProject;
        org.apache.maven.model.Model $stack7;
        ProjectSorterTest this;
        org.apache.maven.model.Dependency $stack8;
        java.lang.Object $stack13, $stack14;
        java.util.List projects#2;
        java.util.ArrayList $u0;
        org.apache.maven.project.ProjectSorter $u1;
        org.apache.maven.project.ProjectSorterTest $r0;

        this := @this: ProjectSorterTest;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        usingProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "project", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(usingProject);

        $stack7 = virtualinvoke usingProject.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

        $r0 = (org.apache.maven.project.ProjectSorterTest) this;

        $stack8 = specialinvoke $r0.<org.apache.maven.project.ProjectSorterTest: org.apache.maven.model.Dependency createDependency(java.lang.String,java.lang.String,java.lang.String)>("group", "dependency", "[1.0,)");

        virtualinvoke $stack7.<org.apache.maven.model.Model: void addDependency(org.apache.maven.model.Dependency)>($stack8);

        pluginProject = staticinvoke <org.apache.maven.project.ProjectSorterTest: org.apache.maven.project.MavenProject createProject(java.lang.String,java.lang.String,java.lang.String)>("group", "dependency", "1.0");

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>(pluginProject);

        $u1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>($u0);

        projects#2 = virtualinvoke $u1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        $stack13 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(pluginProject, $stack13);

        $stack14 = interfaceinvoke projects#2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(usingProject, $stack14);

        return;
    }

    private static void lambda$testMatchingIdsAndVersions$0(java.util.List) throws java.lang.Throwable
    {
        org.apache.maven.project.ProjectSorter $stack1;
        java.util.List projects;

        projects := @parameter0: java.util.List;

        $stack1 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $stack1.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>(projects);

        virtualinvoke $stack1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        return;
    }
}
