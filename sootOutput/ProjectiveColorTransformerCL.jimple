public class ProjectiveColorTransformerCL extends org.bytedeco.javacv.ProjectiveColorTransformer implements org.bytedeco.javacv.ImageTransformerCL
{
    protected final org.bytedeco.javacv.JavaCVCL context;
    protected final com.jogamp.opencl.CLBuffer HBuffer;
    protected final com.jogamp.opencl.CLBuffer XBuffer;
    private com.jogamp.opencl.CLKernel oneKernel;
    private com.jogamp.opencl.CLKernel subKernel;
    private com.jogamp.opencl.CLKernel dotKernel;
    private com.jogamp.opencl.CLKernel reduceKernel;
    static final boolean $assertionsDisabled;

    public void <init>(org.bytedeco.javacv.JavaCVCL, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, org.bytedeco.opencv.opencv_core.CvMat, double[], double[], org.bytedeco.opencv.opencv_core.CvMat, int, int)
    {
        ProjectiveColorTransformerCL this;
        org.bytedeco.opencv.opencv_core.CvMat K1, K2, R, t, n, X;
        double[] referencePoints1, referencePoints2;
        int numGains, numBiases, dotSize, $stack19, $stack24;
        org.bytedeco.javacv.ProjectiveColorTransformer$Parameters $stack14;
        org.bytedeco.javacv.JavaCVCL context;
        com.jogamp.opencl.CLContext $stack16, $stack21;
        com.jogamp.opencl.CLMemory$Mem[] $stack17, $stack22;
        com.jogamp.opencl.CLMemory$Mem $stack18, $stack23;
        com.jogamp.opencl.CLBuffer $stack20, $stack25;
        java.lang.Class $stack26;
        java.lang.StringBuilder $stack28, $stack29, $u0;
        java.lang.String $stack30;
        java.lang.String[] $stack31;
        com.jogamp.opencl.CLKernel[] kernels;
        com.jogamp.opencl.CLKernel $stack33, $stack34, $stack35, $stack36;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: ProjectiveColorTransformerCL;

        context := @parameter0: org.bytedeco.javacv.JavaCVCL;

        K1 := @parameter1: org.bytedeco.opencv.opencv_core.CvMat;

        K2 := @parameter2: org.bytedeco.opencv.opencv_core.CvMat;

        R := @parameter3: org.bytedeco.opencv.opencv_core.CvMat;

        t := @parameter4: org.bytedeco.opencv.opencv_core.CvMat;

        n := @parameter5: org.bytedeco.opencv.opencv_core.CvMat;

        referencePoints1 := @parameter6: double[];

        referencePoints2 := @parameter7: double[];

        X := @parameter8: org.bytedeco.opencv.opencv_core.CvMat;

        numGains := @parameter9: int;

        numBiases := @parameter10: int;

        specialinvoke this.<org.bytedeco.javacv.ProjectiveColorTransformer: void <init>(org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat,double[],double[],org.bytedeco.opencv.opencv_core.CvMat,int,int)>(K1, K2, R, t, n, referencePoints1, referencePoints2, X, numGains, numBiases);

        $r0 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack14 = virtualinvoke $r0.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.ProjectiveColorTransformer$Parameters createParameters()>();

        dotSize = virtualinvoke $stack14.<org.bytedeco.javacv.ProjectiveColorTransformer$Parameters: int size()>();

        $r1 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r1.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context> = context;

        $stack16 = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack19 = dotSize * 9;

        $stack17 = newarray (com.jogamp.opencl.CLMemory$Mem)[1];

        $stack18 = <com.jogamp.opencl.CLMemory$Mem: com.jogamp.opencl.CLMemory$Mem READ_ONLY>;

        $stack17[0] = $stack18;

        $stack20 = virtualinvoke $stack16.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLBuffer createFloatBuffer(int,com.jogamp.opencl.CLMemory$Mem[])>($stack19, $stack17);

        $r2 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r2.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer HBuffer> = $stack20;

        $stack21 = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLContext getCLContext()>();

        $stack24 = dotSize * 16;

        $stack22 = newarray (com.jogamp.opencl.CLMemory$Mem)[1];

        $stack23 = <com.jogamp.opencl.CLMemory$Mem: com.jogamp.opencl.CLMemory$Mem READ_ONLY>;

        $stack22[0] = $stack23;

        $stack25 = virtualinvoke $stack21.<com.jogamp.opencl.CLContext: com.jogamp.opencl.CLBuffer createFloatBuffer(int,com.jogamp.opencl.CLMemory$Mem[])>($stack24, $stack22);

        $r3 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r3.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer XBuffer> = $stack25;

        $stack26 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        if $stack26 != class "Lorg/bytedeco/javacv/ProjectiveColorTransformerCL;" goto label1;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-cl-fast-relaxed-math -cl-mad-enable -DDOT_SIZE=");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(dotSize);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack31 = newarray (java.lang.String)[4];

        $stack31[0] = "transformOne";

        $stack31[1] = "transformSub";

        $stack31[2] = "transformDot";

        $stack31[3] = "reduceOutputData";

        kernels = virtualinvoke context.<org.bytedeco.javacv.JavaCVCL: com.jogamp.opencl.CLKernel[] buildKernels(java.lang.String,java.lang.String,java.lang.String[])>($stack30, "ImageTransformer.cl:ProjectiveColorTransformer.cl", $stack31);

        $stack33 = kernels[0];

        $r4 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r4.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel oneKernel> = $stack33;

        $stack34 = kernels[1];

        $r5 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r5.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel subKernel> = $stack34;

        $stack35 = kernels[2];

        $r6 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r6.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel dotKernel> = $stack35;

        $stack36 = kernels[3];

        $r7 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r7.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel reduceKernel> = $stack36;

     label1:
        return;
    }

    public org.bytedeco.javacv.JavaCVCL getContext()
    {
        ProjectiveColorTransformerCL this;
        org.bytedeco.javacv.JavaCVCL $stack1;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $r0;

        this := @this: ProjectiveColorTransformerCL;

        $r0 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack1 = $r0.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        return $stack1;
    }

    protected void prepareHomographies(com.jogamp.opencl.CLBuffer, int, org.bytedeco.javacv.ImageTransformer$Parameters[], boolean[])
    {
        com.jogamp.opencl.CLBuffer HBuffer;
        java.nio.Buffer $stack9, $stack10;
        java.nio.FloatBuffer floatH;
        java.lang.ThreadLocal $stack11;
        java.lang.Object $stack12;
        org.bytedeco.opencv.opencv_core.CvMat H;
        org.bytedeco.javacv.ImageTransformer$Parameters[] parameters;
        int $stack13, pyramidLevel, i, j;
        ProjectiveColorTransformerCL this;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack15;
        boolean[] inverses;
        org.bytedeco.javacv.ProjectiveColorTransformer$Parameters $stack17;
        double $stack20;
        float $stack21;
        boolean $stack16;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $r0;
        org.bytedeco.javacv.ProjectiveTransformer$Parameters $r1;

        this := @this: ProjectiveColorTransformerCL;

        HBuffer := @parameter0: com.jogamp.opencl.CLBuffer;

        pyramidLevel := @parameter1: int;

        parameters := @parameter2: org.bytedeco.javacv.ImageTransformer$Parameters[];

        inverses := @parameter3: boolean[];

        $stack9 = virtualinvoke HBuffer.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack10 = virtualinvoke $stack9.<java.nio.Buffer: java.nio.Buffer rewind()>();

        floatH = (java.nio.FloatBuffer) $stack10;

        $stack11 = <org.bytedeco.javacv.ProjectiveColorTransformerCL: java.lang.ThreadLocal H3x3>;

        $stack12 = virtualinvoke $stack11.<java.lang.ThreadLocal: java.lang.Object get()>();

        H = (org.bytedeco.opencv.opencv_core.CvMat) $stack12;

        i = 0;

     label1:
        $stack13 = lengthof parameters;

        if i >= $stack13 goto label6;

        $stack15 = parameters[i];

        $stack17 = (org.bytedeco.javacv.ProjectiveColorTransformer$Parameters) $stack15;

        if inverses != null goto label2;

        $stack16 = 0;

        goto label3;

     label2:
        $stack16 = inverses[i];

     label3:
        $r0 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $r1 = (org.bytedeco.javacv.ProjectiveTransformer$Parameters) $stack17;

        virtualinvoke $r0.<org.bytedeco.javacv.ProjectiveColorTransformerCL: void prepareHomography(org.bytedeco.opencv.opencv_core.CvMat,int,org.bytedeco.javacv.ProjectiveTransformer$Parameters,boolean)>(H, pyramidLevel, $r1, $stack16);

        j = 0;

     label4:
        if j >= 9 goto label5;

        $stack20 = virtualinvoke H.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(j);

        $stack21 = (float) $stack20;

        virtualinvoke floatH.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack21);

        j = j + 1;

        goto label4;

     label5:
        i = i + 1;

        goto label1;

     label6:
        virtualinvoke floatH.<java.nio.FloatBuffer: java.nio.FloatBuffer rewind()>();

        return;
    }

    protected void prepareColorTransforms(com.jogamp.opencl.CLBuffer, int, org.bytedeco.javacv.ImageTransformer$Parameters[], boolean[])
    {
        com.jogamp.opencl.CLBuffer XBuffer;
        java.nio.Buffer $stack9, $stack10;
        java.nio.FloatBuffer floatX;
        java.lang.ThreadLocal $stack11;
        java.lang.Object $stack12;
        org.bytedeco.opencv.opencv_core.CvMat X2;
        org.bytedeco.javacv.ImageTransformer$Parameters[] parameters;
        int $stack13, pyramidLevel, i, j;
        ProjectiveColorTransformerCL this;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack15;
        boolean[] inverses;
        org.bytedeco.javacv.ProjectiveColorTransformer$Parameters $stack17;
        double $stack20;
        float $stack21;
        boolean $stack16;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $r0;

        this := @this: ProjectiveColorTransformerCL;

        XBuffer := @parameter0: com.jogamp.opencl.CLBuffer;

        pyramidLevel := @parameter1: int;

        parameters := @parameter2: org.bytedeco.javacv.ImageTransformer$Parameters[];

        inverses := @parameter3: boolean[];

        $stack9 = virtualinvoke XBuffer.<com.jogamp.opencl.CLBuffer: java.nio.Buffer getBuffer()>();

        $stack10 = virtualinvoke $stack9.<java.nio.Buffer: java.nio.Buffer rewind()>();

        floatX = (java.nio.FloatBuffer) $stack10;

        $stack11 = <org.bytedeco.javacv.ProjectiveColorTransformerCL: java.lang.ThreadLocal X24x4>;

        $stack12 = virtualinvoke $stack11.<java.lang.ThreadLocal: java.lang.Object get()>();

        X2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack12;

        i = 0;

     label1:
        $stack13 = lengthof parameters;

        if i >= $stack13 goto label6;

        $stack15 = parameters[i];

        $stack17 = (org.bytedeco.javacv.ProjectiveColorTransformer$Parameters) $stack15;

        if inverses != null goto label2;

        $stack16 = 0;

        goto label3;

     label2:
        $stack16 = inverses[i];

     label3:
        $r0 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        virtualinvoke $r0.<org.bytedeco.javacv.ProjectiveColorTransformerCL: void prepareColorTransform(org.bytedeco.opencv.opencv_core.CvMat,int,org.bytedeco.javacv.ProjectiveColorTransformer$Parameters,boolean)>(X2, pyramidLevel, $stack17, $stack16);

        j = 0;

     label4:
        if j >= 16 goto label5;

        $stack20 = virtualinvoke X2.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(j);

        $stack21 = (float) $stack20;

        virtualinvoke floatX.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($stack21);

        j = j + 1;

        goto label4;

     label5:
        i = i + 1;

        goto label1;

     label6:
        virtualinvoke floatX.<java.nio.FloatBuffer: java.nio.FloatBuffer rewind()>();

        return;
    }

    public void transform(com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, com.jogamp.opencl.CLImage2d, org.bytedeco.javacv.ImageTransformer$Parameters[], boolean[], org.bytedeco.javacv.ImageTransformerCL$InputData, org.bytedeco.javacv.ImageTransformerCL$OutputData)
    {
        ProjectiveColorTransformerCL this;
        org.bytedeco.javacv.ImageTransformerCL$InputData inputData;
        org.bytedeco.javacv.ImageTransformer$Parameters[] parameters;
        boolean[] inverses;
        int $stack19, $stack21, dotSize, $stack25, $stack26, localSize, globalSize, reduceSize, $stack72, $stack111, $stack141, $stack150, $stack27, $stack52, $stack53, $stack54;
        com.jogamp.opencl.CLBuffer $stack20, $stack22, inputBuffer, outputBuffer, $stack45, $stack47, $stack104, $stack106, $stack128, $stack130, $stack34, $stack36;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack23;
        org.bytedeco.javacv.ImageTransformerCL$OutputData outputData;
        com.jogamp.opencl.CLImage2d subImg, srcDotImg, srcImg, maskImg, transImg, dstImg, $stack135;
        boolean $stack39, $stack61, $stack97, $stack123, $stack38;
        com.jogamp.opencl.CLKernel $stack40, $stack41, $stack42, $stack43, $stack44, $stack46, $stack48, $stack49, $stack50, $stack64, $stack65, $stack69, $stack98, $stack99, $stack100, $stack101, $stack102, $stack103, $stack105, $stack107, $stack108, $stack109, $stack124, $stack125, $stack126, $stack127, $stack129, $stack131, $stack132, $stack133, kernel#67;
        org.bytedeco.javacv.JavaCVCL $stack62, $stack70, $stack146, $stack29, $stack31, $stack35, $stack37, $stack60;
        long $stack67, $stack68, $stack59, $stack58, $stack57, $stack56, $stack55;
        com.jogamp.opencl.CLEventList $u0;
        java.lang.AssertionError $u1, $u2, $u3;
        org.bytedeco.javacv.ProjectiveColorTransformerCL $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r17, $r21, $r27, $r29, $r33, $r38, $r40, $r44, $r45, $r47, $r48, $r49;
        com.jogamp.opencl.CLMemory $r12, $r13, $r14, $r16, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r39, $r41, $r42, $r43, $r46;

        this := @this: ProjectiveColorTransformerCL;

        srcImg := @parameter0: com.jogamp.opencl.CLImage2d;

        subImg := @parameter1: com.jogamp.opencl.CLImage2d;

        srcDotImg := @parameter2: com.jogamp.opencl.CLImage2d;

        transImg := @parameter3: com.jogamp.opencl.CLImage2d;

        dstImg := @parameter4: com.jogamp.opencl.CLImage2d;

        maskImg := @parameter5: com.jogamp.opencl.CLImage2d;

        parameters := @parameter6: org.bytedeco.javacv.ImageTransformer$Parameters[];

        inverses := @parameter7: boolean[];

        inputData := @parameter8: org.bytedeco.javacv.ImageTransformerCL$InputData;

        outputData := @parameter9: org.bytedeco.javacv.ImageTransformerCL$OutputData;

        $r0 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack20 = $r0.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer HBuffer>;

        $stack19 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int pyramidLevel>;

        $r1 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        virtualinvoke $r1.<org.bytedeco.javacv.ProjectiveColorTransformerCL: void prepareHomographies(com.jogamp.opencl.CLBuffer,int,org.bytedeco.javacv.ImageTransformer$Parameters[],boolean[])>($stack20, $stack19, parameters, inverses);

        $r2 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack22 = $r2.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        $stack21 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int pyramidLevel>;

        $r3 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        virtualinvoke $r3.<org.bytedeco.javacv.ProjectiveColorTransformerCL: void prepareColorTransforms(com.jogamp.opencl.CLBuffer,int,org.bytedeco.javacv.ImageTransformer$Parameters[],boolean[])>($stack22, $stack21, parameters, inverses);

        $stack23 = parameters[0];

        dotSize = interfaceinvoke $stack23.<org.bytedeco.javacv.ImageTransformer$Parameters: int size()>();

        $stack25 = lengthof parameters;

        if $stack25 <= 1 goto label01;

        $stack150 = lengthof parameters;

        goto label03;

     label01:
        $stack26 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiWidth>;

        if $stack26 <= 32 goto label02;

        $stack150 = 64;

        goto label03;

     label02:
        $stack150 = 32;

     label03:
        localSize = $stack150;

        $stack27 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiWidth>;

        globalSize = staticinvoke <org.bytedeco.javacv.JavaCVCL: int alignCeil(int,int)>($stack27, $stack150);

        reduceSize = globalSize / $stack150;

        $r4 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack29 = $r4.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        inputBuffer = virtualinvoke inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer getBuffer(org.bytedeco.javacv.JavaCVCL)>($stack29);

        $r5 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack31 = $r5.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        outputBuffer = virtualinvoke outputData.<org.bytedeco.javacv.ImageTransformerCL$OutputData: com.jogamp.opencl.CLBuffer getBuffer(org.bytedeco.javacv.JavaCVCL,int,int)>($stack31, dotSize, reduceSize);

        $u0 = new com.jogamp.opencl.CLEventList;

        specialinvoke $u0.<com.jogamp.opencl.CLEventList: void <init>(int)>(1);

        $r6 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack35 = $r6.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r7 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack34 = $r7.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer HBuffer>;

        virtualinvoke $stack35.<org.bytedeco.javacv.JavaCVCL: void writeBuffer(com.jogamp.opencl.CLBuffer,boolean)>($stack34, 0);

        $r8 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack37 = $r8.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r9 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack36 = $r9.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        virtualinvoke $stack37.<org.bytedeco.javacv.JavaCVCL: void writeBuffer(com.jogamp.opencl.CLBuffer,boolean)>($stack36, 0);

        $stack38 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: boolean autoWrite>;

        if $stack38 == 0 goto label04;

        $r10 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack146 = $r10.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        virtualinvoke inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: com.jogamp.opencl.CLBuffer writeBuffer(org.bytedeco.javacv.JavaCVCL)>($stack146);

     label04:
        if subImg != null goto label08;

        $stack123 = <org.bytedeco.javacv.ProjectiveColorTransformerCL: boolean $assertionsDisabled>;

        if $stack123 != 0 goto label05;

        $stack141 = lengthof parameters;

        if $stack141 == 1 goto label05;

        $u1 = new java.lang.AssertionError;

        specialinvoke $u1.<java.lang.AssertionError: void <init>()>();

        throw $u1;

     label05:
        $r11 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack124 = $r11.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel oneKernel>;

        $r12 = (com.jogamp.opencl.CLMemory) srcImg;

        $stack125 = virtualinvoke $stack124.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r12);

        if dstImg != null goto label06;

        $stack135 = transImg;

        goto label07;

     label06:
        $stack135 = dstImg;

     label07:
        $r13 = (com.jogamp.opencl.CLMemory) $stack135;

        $stack126 = virtualinvoke $stack125.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r13);

        $r14 = (com.jogamp.opencl.CLMemory) maskImg;

        $stack127 = virtualinvoke $stack126.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r14);

        $r15 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack128 = $r15.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer HBuffer>;

        $r16 = (com.jogamp.opencl.CLMemory) $stack128;

        $stack129 = virtualinvoke $stack127.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r16);

        $r17 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack130 = $r17.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        $r18 = (com.jogamp.opencl.CLMemory) $stack130;

        $stack131 = virtualinvoke $stack129.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r18);

        $r19 = (com.jogamp.opencl.CLMemory) inputBuffer;

        $stack132 = virtualinvoke $stack131.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r19);

        $r20 = (com.jogamp.opencl.CLMemory) outputBuffer;

        $stack133 = virtualinvoke $stack132.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r20);

        kernel#67 = virtualinvoke $stack133.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel rewind()>();

        goto label12;

     label08:
        if srcDotImg != null goto label10;

        $stack97 = <org.bytedeco.javacv.ProjectiveColorTransformerCL: boolean $assertionsDisabled>;

        if $stack97 != 0 goto label09;

        $stack111 = lengthof parameters;

        if $stack111 == 1 goto label09;

        $u2 = new java.lang.AssertionError;

        specialinvoke $u2.<java.lang.AssertionError: void <init>()>();

        throw $u2;

     label09:
        $r21 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack98 = $r21.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel subKernel>;

        $r22 = (com.jogamp.opencl.CLMemory) srcImg;

        $stack99 = virtualinvoke $stack98.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r22);

        $r23 = (com.jogamp.opencl.CLMemory) subImg;

        $stack100 = virtualinvoke $stack99.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r23);

        $r24 = (com.jogamp.opencl.CLMemory) transImg;

        $stack101 = virtualinvoke $stack100.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r24);

        $r25 = (com.jogamp.opencl.CLMemory) dstImg;

        $stack102 = virtualinvoke $stack101.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r25);

        $r26 = (com.jogamp.opencl.CLMemory) maskImg;

        $stack103 = virtualinvoke $stack102.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r26);

        $r27 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack104 = $r27.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer HBuffer>;

        $r28 = (com.jogamp.opencl.CLMemory) $stack104;

        $stack105 = virtualinvoke $stack103.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r28);

        $r29 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack106 = $r29.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        $r30 = (com.jogamp.opencl.CLMemory) $stack106;

        $stack107 = virtualinvoke $stack105.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r30);

        $r31 = (com.jogamp.opencl.CLMemory) inputBuffer;

        $stack108 = virtualinvoke $stack107.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r31);

        $r32 = (com.jogamp.opencl.CLMemory) outputBuffer;

        $stack109 = virtualinvoke $stack108.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r32);

        kernel#67 = virtualinvoke $stack109.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel rewind()>();

        goto label12;

     label10:
        $stack39 = <org.bytedeco.javacv.ProjectiveColorTransformerCL: boolean $assertionsDisabled>;

        if $stack39 != 0 goto label11;

        $stack72 = lengthof parameters;

        if $stack72 == dotSize goto label11;

        $u3 = new java.lang.AssertionError;

        specialinvoke $u3.<java.lang.AssertionError: void <init>()>();

        throw $u3;

     label11:
        $r33 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack40 = $r33.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel dotKernel>;

        $r34 = (com.jogamp.opencl.CLMemory) srcImg;

        $stack41 = virtualinvoke $stack40.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r34);

        $r35 = (com.jogamp.opencl.CLMemory) subImg;

        $stack42 = virtualinvoke $stack41.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r35);

        $r36 = (com.jogamp.opencl.CLMemory) srcDotImg;

        $stack43 = virtualinvoke $stack42.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r36);

        $r37 = (com.jogamp.opencl.CLMemory) maskImg;

        $stack44 = virtualinvoke $stack43.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r37);

        $r38 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack45 = $r38.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer HBuffer>;

        $r39 = (com.jogamp.opencl.CLMemory) $stack45;

        $stack46 = virtualinvoke $stack44.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r39);

        $r40 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack47 = $r40.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLBuffer XBuffer>;

        $r41 = (com.jogamp.opencl.CLMemory) $stack47;

        $stack48 = virtualinvoke $stack46.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r41);

        $r42 = (com.jogamp.opencl.CLMemory) inputBuffer;

        $stack49 = virtualinvoke $stack48.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r42);

        $r43 = (com.jogamp.opencl.CLMemory) outputBuffer;

        $stack50 = virtualinvoke $stack49.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r43);

        kernel#67 = virtualinvoke $stack50.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel rewind()>();

     label12:
        $r44 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack60 = $r44.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $stack52 = inputData.<org.bytedeco.javacv.ImageTransformerCL$InputData: int roiX>;

        $stack59 = (long) $stack52;

        $stack58 = (long) globalSize;

        $stack53 = lengthof parameters;

        $stack57 = (long) $stack53;

        $stack56 = (long) localSize;

        $stack54 = lengthof parameters;

        $stack55 = (long) $stack54;

        virtualinvoke $stack60.<org.bytedeco.javacv.JavaCVCL: void executeKernel(com.jogamp.opencl.CLKernel,long,long,long,long,long,long,long,long,long,com.jogamp.opencl.CLEventList)>(kernel#67, $stack59, 0L, 0L, $stack58, 1L, $stack57, $stack56, 1L, $stack55, $u0);

        if reduceSize <= 1 goto label13;

        $r45 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack64 = $r45.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel reduceKernel>;

        $r46 = (com.jogamp.opencl.CLMemory) outputBuffer;

        $stack65 = virtualinvoke $stack64.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel putArg(com.jogamp.opencl.CLMemory)>($r46);

        virtualinvoke $stack65.<com.jogamp.opencl.CLKernel: com.jogamp.opencl.CLKernel rewind()>();

        $r47 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack70 = $r47.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        $r48 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack69 = $r48.<org.bytedeco.javacv.ProjectiveColorTransformerCL: com.jogamp.opencl.CLKernel reduceKernel>;

        $stack68 = (long) reduceSize;

        $stack67 = (long) reduceSize;

        virtualinvoke $stack70.<org.bytedeco.javacv.JavaCVCL: void executeKernel(com.jogamp.opencl.CLKernel,long,long,long)>($stack69, 0L, $stack68, $stack67);

     label13:
        $stack61 = outputData.<org.bytedeco.javacv.ImageTransformerCL$OutputData: boolean autoRead>;

        if $stack61 == 0 goto label14;

        $r49 = (org.bytedeco.javacv.ProjectiveColorTransformerCL) this;

        $stack62 = $r49.<org.bytedeco.javacv.ProjectiveColorTransformerCL: org.bytedeco.javacv.JavaCVCL context>;

        virtualinvoke outputData.<org.bytedeco.javacv.ImageTransformerCL$OutputData: com.jogamp.opencl.CLBuffer readBuffer(org.bytedeco.javacv.JavaCVCL)>($stack62);

     label14:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/bytedeco/javacv/ProjectiveColorTransformerCL;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.bytedeco.javacv.ProjectiveColorTransformerCL: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
