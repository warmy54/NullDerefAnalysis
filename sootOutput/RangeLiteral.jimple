public class RangeLiteral extends org.ooc.frontend.model.Literal
{
    protected org.ooc.frontend.model.Expression lower;
    protected org.ooc.frontend.model.Expression upper;
    protected static org.ooc.frontend.model.Type type;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        RangeLiteral this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression lower, upper;
        org.ooc.frontend.model.RangeLiteral $r0, $r1;

        this := @this: RangeLiteral;

        lower := @parameter0: org.ooc.frontend.model.Expression;

        upper := @parameter1: org.ooc.frontend.model.Expression;

        startToken := @parameter2: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Literal: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower> = lower;

        $r1 = (org.ooc.frontend.model.RangeLiteral) this;

        $r1.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper> = upper;

        return;
    }

    public org.ooc.frontend.model.Expression getLower()
    {
        RangeLiteral this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.RangeLiteral $r0;

        this := @this: RangeLiteral;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower>;

        return $stack1;
    }

    public void setLower(org.ooc.frontend.model.Expression)
    {
        RangeLiteral this;
        org.ooc.frontend.model.Expression lower;
        org.ooc.frontend.model.RangeLiteral $r0;

        this := @this: RangeLiteral;

        lower := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower> = lower;

        return;
    }

    public org.ooc.frontend.model.Expression getUpper()
    {
        RangeLiteral this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.RangeLiteral $r0;

        this := @this: RangeLiteral;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack1 = $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper>;

        return $stack1;
    }

    public void setUpper(org.ooc.frontend.model.Expression)
    {
        RangeLiteral this;
        org.ooc.frontend.model.Expression upper;
        org.ooc.frontend.model.RangeLiteral $r0;

        this := @this: RangeLiteral;

        upper := @parameter0: org.ooc.frontend.model.Expression;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper> = upper;

        return;
    }

    public org.ooc.frontend.model.Type getType()
    {
        org.ooc.frontend.model.Type $stack1;
        RangeLiteral this;

        this := @this: RangeLiteral;

        $stack1 = <org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Type type>;

        return $stack1;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        RangeLiteral this;
        org.ooc.frontend.model.RangeLiteral $r0;

        this := @this: RangeLiteral;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.RangeLiteral)>($r0);

        return;
    }

    public boolean hasChildren()
    {
        RangeLiteral this;

        this := @this: RangeLiteral;

        return 1;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        RangeLiteral this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2, $stack3;
        org.ooc.frontend.model.RangeLiteral $r0, $r1;

        this := @this: RangeLiteral;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack2 = $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack3 = $r1.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper>;

        virtualinvoke $stack3.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        RangeLiteral this;
        org.ooc.frontend.model.Expression $stack3, $stack4, $stack5, $stack6;
        org.ooc.frontend.model.RangeLiteral $r0, $r1, $r2, $r3;

        this := @this: RangeLiteral;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack3 = $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower>;

        if oldie != $stack3 goto label1;

        $stack6 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.RangeLiteral) this;

        $r1.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower> = $stack6;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack4 = $r2.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper>;

        if oldie != $stack4 goto label2;

        $stack5 = (org.ooc.frontend.model.Expression) kiddo;

        $r3 = (org.ooc.frontend.model.RangeLiteral) this;

        $r3.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper> = $stack5;

        return 1;

     label2:
        return 0;
    }

    public boolean isResolved()
    {
        RangeLiteral this;

        this := @this: RangeLiteral;

        return 0;
    }

    public org.ooc.frontend.model.interfaces.MustBeResolved$Response resolve(org.ooc.frontend.model.NodeList, org.ooc.middle.hobgoblins.Resolver, boolean)
    {
        org.ooc.frontend.model.NodeList stack, $stack13, $stack16;
        org.ooc.frontend.model.Node parent, $r4, $r6, $r7, $r8;
        boolean $stack7, fatal;
        org.ooc.frontend.model.interfaces.MustBeResolved$Response $stack8, $stack20;
        RangeLiteral this;
        org.ooc.frontend.model.tokens.Token $stack11, $stack12;
        org.ooc.frontend.model.Expression $stack14, $stack17, $r2;
        org.ooc.middle.hobgoblins.Resolver res;
        org.ooc.frontend.model.VariableAccess $u0;
        org.ooc.frontend.model.MemberCall $u1;
        org.ooc.frontend.model.RangeLiteral $r0, $r1, $r3, $r5;

        this := @this: RangeLiteral;

        stack := @parameter0: org.ooc.frontend.model.NodeList;

        res := @parameter1: org.ooc.middle.hobgoblins.Resolver;

        fatal := @parameter2: boolean;

        parent = virtualinvoke stack.<org.ooc.frontend.model.NodeList: org.ooc.frontend.model.Node peek()>();

        $stack7 = parent instanceof org.ooc.frontend.model.Foreach;

        if $stack7 != 0 goto label1;

        $u1 = new org.ooc.frontend.model.MemberCall;

        $u0 = new org.ooc.frontend.model.VariableAccess;

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack11 = $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.tokens.Token startToken>;

        specialinvoke $u0.<org.ooc.frontend.model.VariableAccess: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>("Range", $stack11);

        $r1 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack12 = $r1.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.tokens.Token startToken>;

        $r2 = (org.ooc.frontend.model.Expression) $u0;

        specialinvoke $u1.<org.ooc.frontend.model.MemberCall: void <init>(org.ooc.frontend.model.Expression,java.lang.String,java.lang.String,org.ooc.frontend.model.tokens.Token)>($r2, "new", null, $stack12);

        $stack13 = virtualinvoke $u1.<org.ooc.frontend.model.MemberCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r3 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack14 = $r3.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower>;

        $r4 = (org.ooc.frontend.model.Node) $stack14;

        virtualinvoke $stack13.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r4);

        $stack16 = virtualinvoke $u1.<org.ooc.frontend.model.MemberCall: org.ooc.frontend.model.NodeList getArguments()>();

        $r5 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack17 = $r5.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper>;

        $r6 = (org.ooc.frontend.model.Node) $stack17;

        virtualinvoke $stack16.<org.ooc.frontend.model.NodeList: boolean add(org.ooc.frontend.model.Node)>($r6);

        $r7 = (org.ooc.frontend.model.Node) this;

        $r8 = (org.ooc.frontend.model.Node) $u1;

        virtualinvoke parent.<org.ooc.frontend.model.Node: boolean replace(org.ooc.frontend.model.Node,org.ooc.frontend.model.Node)>($r7, $r8);

        $stack20 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response RESTART>;

        return $stack20;

     label1:
        $stack8 = <org.ooc.frontend.model.interfaces.MustBeResolved$Response: org.ooc.frontend.model.interfaces.MustBeResolved$Response OK>;

        return $stack8;
    }

    public java.lang.String toString()
    {
        RangeLiteral this;
        java.lang.Class $stack1;
        java.lang.String $stack2, $stack5;
        org.ooc.frontend.model.Expression $stack3, $stack4;
        org.ooc.frontend.model.RangeLiteral $r0, $r1;

        this := @this: RangeLiteral;

        $stack1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack4 = $r0.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression lower>;

        $r1 = (org.ooc.frontend.model.RangeLiteral) this;

        $stack3 = $r1.<org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Expression upper>;

        $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression)>($stack2, $stack4, $stack3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001:\u0001..\u0001");

        return $stack5;
    }

    static void <clinit>()
    {
        org.ooc.frontend.model.Type $stack0;
        org.ooc.frontend.model.tokens.Token $stack1;

        $stack0 = new org.ooc.frontend.model.Type;

        $stack1 = <org.ooc.frontend.model.tokens.Token: org.ooc.frontend.model.tokens.Token defaultToken>;

        specialinvoke $stack0.<org.ooc.frontend.model.Type: void <init>(java.lang.String,org.ooc.frontend.model.tokens.Token)>("Range", $stack1);

        <org.ooc.frontend.model.RangeLiteral: org.ooc.frontend.model.Type type> = $stack0;

        return;
    }
}
