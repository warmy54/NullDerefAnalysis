public class ReactorDependencyXMLFilterTest extends org.apache.maven.model.transform.AbstractXMLFilterTests
{

    public void <init>()
    {
        ReactorDependencyXMLFilterTest this;

        this := @this: ReactorDependencyXMLFilterTest;

        specialinvoke this.<org.apache.maven.model.transform.AbstractXMLFilterTests: void <init>()>();

        return;
    }

    protected org.apache.maven.model.transform.ReactorDependencyXMLFilter getFilter(java.util.function.Consumer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        org.apache.maven.model.transform.ReactorDependencyXMLFilter $stack3;
        java.util.function.BiFunction $stack4;
        java.util.function.Consumer lexicalHandlerConsumer;
        ReactorDependencyXMLFilterTest this;

        this := @this: ReactorDependencyXMLFilterTest;

        lexicalHandlerConsumer := @parameter0: java.util.function.Consumer;

        $stack3 = new org.apache.maven.model.transform.ReactorDependencyXMLFilter;

        $stack4 = staticinvoke <ReactorDependencyXMLFilterTest$lambda_getFilter_0__311: java.util.function.BiFunction bootstrap$()>();

        specialinvoke $stack3.<org.apache.maven.model.transform.ReactorDependencyXMLFilter: void <init>(java.util.function.BiFunction)>($stack4);

        interfaceinvoke lexicalHandlerConsumer.<java.util.function.Consumer: void accept(java.lang.Object)>($stack3);

        return $stack3;
    }

    public void testDefaultDependency() throws java.lang.Exception
    {
        ReactorDependencyXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.apache.maven.model.transform.ReactorDependencyXMLFilterTest $r0;

        this := @this: ReactorDependencyXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ReactorDependencyXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ReactorDependencyXMLFilterTest: java.lang.String transform(java.lang.String)>("<dependency><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><version>VERSION</version></dependency>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.assertj.core.api.AbstractAssert isEqualTo(java.lang.Object)>("<dependency><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><version>VERSION</version></dependency>");

        return;
    }

    public void testManagedDependency() throws java.lang.Exception
    {
        java.util.function.BiFunction $stack6;
        ReactorDependencyXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack8;
        org.apache.maven.model.transform.ReactorDependencyXMLFilter $u0;
        org.apache.maven.model.transform.ReactorDependencyXMLFilterTest $r0;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r1;

        this := @this: ReactorDependencyXMLFilterTest;

        $u0 = new org.apache.maven.model.transform.ReactorDependencyXMLFilter;

        $stack6 = staticinvoke <ReactorDependencyXMLFilterTest$lambda_testManagedDependency_1__310: java.util.function.BiFunction bootstrap$()>();

        specialinvoke $u0.<org.apache.maven.model.transform.ReactorDependencyXMLFilter: void <init>(java.util.function.BiFunction)>($stack6);

        $r0 = (org.apache.maven.model.transform.ReactorDependencyXMLFilterTest) this;

        $r1 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $u0;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ReactorDependencyXMLFilterTest: java.lang.String transform(java.lang.String,org.apache.maven.model.transform.sax.AbstractSAXFilter)>("<dependency><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId></dependency>", $r1);

        $stack8 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        virtualinvoke $stack8.<org.xmlunit.assertj.XmlAssert: org.assertj.core.api.AbstractAssert isEqualTo(java.lang.Object)>("<dependency><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId></dependency>");

        return;
    }

    public void testReactorDependency() throws java.lang.Exception
    {
        ReactorDependencyXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.apache.maven.model.transform.ReactorDependencyXMLFilterTest $r0;

        this := @this: ReactorDependencyXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ReactorDependencyXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ReactorDependencyXMLFilterTest: java.lang.String transform(java.lang.String)>("<dependency><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId></dependency>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.assertj.core.api.AbstractAssert isEqualTo(java.lang.Object)>("<dependency><groupId>GROUPID</groupId><artifactId>ARTIFACTID</artifactId><version>1.0.0</version></dependency>");

        return;
    }

    public void testReactorDependencyLF() throws java.lang.Exception
    {
        ReactorDependencyXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6, $stack7;
        org.apache.maven.model.transform.ReactorDependencyXMLFilterTest $r0;

        this := @this: ReactorDependencyXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ReactorDependencyXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ReactorDependencyXMLFilterTest: java.lang.String transform(java.lang.String)>("<dependency>\n  <groupId>GROUPID</groupId>\n  <artifactId>ARTIFACTID</artifactId>\n  <!-- include version here --> </dependency>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<dependency>\n  <groupId>GROUPID</groupId>\n  <artifactId>ARTIFACTID</artifactId>\n  <!-- include version here -->\n  <version>1.0.0</version>\n</dependency>");

        $stack7 = virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert ignoreWhitespace()>();

        virtualinvoke $stack7.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    public void multipleDependencies() throws java.lang.Exception
    {
        ReactorDependencyXMLFilterTest this;
        java.lang.String actual;
        org.xmlunit.assertj.XmlAssert $stack5;
        org.xmlunit.assertj.CompareAssert $stack6;
        org.apache.maven.model.transform.ReactorDependencyXMLFilterTest $r0;

        this := @this: ReactorDependencyXMLFilterTest;

        $r0 = (org.apache.maven.model.transform.ReactorDependencyXMLFilterTest) this;

        actual = virtualinvoke $r0.<org.apache.maven.model.transform.ReactorDependencyXMLFilterTest: java.lang.String transform(java.lang.String)>("<project>\n  <modelVersion>4.0.0</modelVersion>\n    <groupId>tests.project</groupId>\n    <artifactId>duplicate-plugin-defs-merged</artifactId>\n    <version>1</version>\n    <build>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <dependencies>\n            <dependency>\n              <groupId>group</groupId>\n              <artifactId>first</artifactId>\n              <version>1</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <dependencies>\n            <dependency>\n              <groupId>group</groupId>\n              <artifactId>second</artifactId>\n              <version>1</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n      </plugins>\n    </build>\n</project>");

        $stack5 = staticinvoke <org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.XmlAssert assertThat(java.lang.Object)>(actual);

        $stack6 = virtualinvoke $stack5.<org.xmlunit.assertj.XmlAssert: org.xmlunit.assertj.CompareAssert and(java.lang.Object)>("<project>\n  <modelVersion>4.0.0</modelVersion>\n    <groupId>tests.project</groupId>\n    <artifactId>duplicate-plugin-defs-merged</artifactId>\n    <version>1</version>\n    <build>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <dependencies>\n            <dependency>\n              <groupId>group</groupId>\n              <artifactId>first</artifactId>\n              <version>1</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <dependencies>\n            <dependency>\n              <groupId>group</groupId>\n              <artifactId>second</artifactId>\n              <version>1</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n      </plugins>\n    </build>\n</project>");

        virtualinvoke $stack6.<org.xmlunit.assertj.CompareAssert: org.xmlunit.assertj.CompareAssert areIdentical()>();

        return;
    }

    protected volatile org.apache.maven.model.transform.sax.AbstractSAXFilter getFilter(java.util.function.Consumer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        ReactorDependencyXMLFilterTest this;
        java.util.function.Consumer l1;
        org.apache.maven.model.transform.ReactorDependencyXMLFilter $stack2;
        org.apache.maven.model.transform.ReactorDependencyXMLFilterTest $r0;
        org.apache.maven.model.transform.sax.AbstractSAXFilter $r1;

        this := @this: ReactorDependencyXMLFilterTest;

        l1 := @parameter0: java.util.function.Consumer;

        $r0 = (org.apache.maven.model.transform.ReactorDependencyXMLFilterTest) this;

        $stack2 = virtualinvoke $r0.<org.apache.maven.model.transform.ReactorDependencyXMLFilterTest: org.apache.maven.model.transform.ReactorDependencyXMLFilter getFilter(java.util.function.Consumer)>(l1);

        $r1 = (org.apache.maven.model.transform.sax.AbstractSAXFilter) $stack2;

        return $r1;
    }

    private static java.lang.String lambda$testManagedDependency$1(java.lang.String, java.lang.String)
    {
        java.lang.String g, a;

        g := @parameter0: java.lang.String;

        a := @parameter1: java.lang.String;

        return null;
    }

    private static java.lang.String lambda$getFilter$0(java.lang.String, java.lang.String)
    {
        java.lang.String g, a;

        g := @parameter0: java.lang.String;

        a := @parameter1: java.lang.String;

        return "1.0.0";
    }
}
