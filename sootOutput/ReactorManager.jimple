public class ReactorManager extends java.lang.Object
{
    public static final java.lang.String FAIL_FAST;
    public static final java.lang.String FAIL_AT_END;
    public static final java.lang.String FAIL_NEVER;
    public static final java.lang.String MAKE_MODE;
    public static final java.lang.String MAKE_DEPENDENTS_MODE;
    public static final java.lang.String MAKE_BOTH_MODE;
    private java.util.List blackList;
    private java.util.Map buildFailuresByProject;
    private java.util.Map pluginContextsByProjectAndPluginKey;
    private java.lang.String failureBehavior;
    private final org.apache.maven.project.ProjectSorter sorter;
    private java.util.Map buildSuccessesByProject;

    public void <init>(java.util.List) throws org.codehaus.plexus.util.dag.CycleDetectedException, org.apache.maven.project.DuplicateProjectException
    {
        ReactorManager this;
        java.util.List projects;
        java.util.ArrayList $u0;
        java.util.HashMap $u1, $u2, $u3;
        org.apache.maven.project.ProjectSorter $u4;
        org.apache.maven.execution.ReactorManager $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ReactorManager;

        projects := @parameter0: java.util.List;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $r0.<org.apache.maven.execution.ReactorManager: java.util.List blackList> = $u0;

        $u1 = new java.util.HashMap;

        specialinvoke $u1.<java.util.HashMap: void <init>()>();

        $r1 = (org.apache.maven.execution.ReactorManager) this;

        $r1.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject> = $u1;

        $u2 = new java.util.HashMap;

        specialinvoke $u2.<java.util.HashMap: void <init>()>();

        $r2 = (org.apache.maven.execution.ReactorManager) this;

        $r2.<org.apache.maven.execution.ReactorManager: java.util.Map pluginContextsByProjectAndPluginKey> = $u2;

        $r3 = (org.apache.maven.execution.ReactorManager) this;

        $r3.<org.apache.maven.execution.ReactorManager: java.lang.String failureBehavior> = "fail-fast";

        $u3 = new java.util.HashMap;

        specialinvoke $u3.<java.util.HashMap: void <init>()>();

        $r4 = (org.apache.maven.execution.ReactorManager) this;

        $r4.<org.apache.maven.execution.ReactorManager: java.util.Map buildSuccessesByProject> = $u3;

        $u4 = new org.apache.maven.project.ProjectSorter;

        specialinvoke $u4.<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>(projects);

        $r5 = (org.apache.maven.execution.ReactorManager) this;

        $r5.<org.apache.maven.execution.ReactorManager: org.apache.maven.project.ProjectSorter sorter> = $u4;

        return;
    }

    public java.util.Map getPluginContext(org.apache.maven.plugin.descriptor.PluginDescriptor, org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack4, pluginContextsByKey, $stack11;
        java.lang.String $stack5, $stack8;
        java.util.function.Function $stack6, $stack9;
        java.lang.Object $stack7, $stack10;
        org.apache.maven.plugin.descriptor.PluginDescriptor plugin;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        plugin := @parameter0: org.apache.maven.plugin.descriptor.PluginDescriptor;

        project := @parameter1: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack4 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map pluginContextsByProjectAndPluginKey>;

        $stack5 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getId()>();

        $stack6 = staticinvoke <ReactorManager$lambda_getPluginContext_0__309: java.util.function.Function bootstrap$()>();

        $stack7 = interfaceinvoke $stack4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($stack5, $stack6);

        pluginContextsByKey = (java.util.Map) $stack7;

        $stack8 = virtualinvoke plugin.<org.apache.maven.plugin.descriptor.PluginDescriptor: java.lang.String getPluginLookupKey()>();

        $stack9 = staticinvoke <ReactorManager$lambda_getPluginContext_1__310: java.util.function.Function bootstrap$()>();

        $stack10 = interfaceinvoke pluginContextsByKey.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($stack8, $stack9);

        $stack11 = (java.util.Map) $stack10;

        return $stack11;
    }

    public void setFailureBehavior(java.lang.String)
    {
        java.lang.String failureBehavior, $stack2, $stack4, $stack8;
        boolean $stack3, $stack5, $stack9;
        ReactorManager this;
        java.lang.IllegalArgumentException $u0;
        org.apache.maven.execution.ReactorManager $r0, $r1;

        this := @this: ReactorManager;

        failureBehavior := @parameter0: java.lang.String;

        if failureBehavior != null goto label1;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $r0.<org.apache.maven.execution.ReactorManager: java.lang.String failureBehavior> = "fail-fast";

        return;

     label1:
        $stack2 = "fail-fast";

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(failureBehavior);

        if $stack3 != 0 goto label2;

        $stack4 = "fail-at-end";

        $stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>(failureBehavior);

        if $stack5 != 0 goto label2;

        $stack8 = "fail-never";

        $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(failureBehavior);

        if $stack9 == 0 goto label3;

     label2:
        $r1 = (org.apache.maven.execution.ReactorManager) this;

        $r1.<org.apache.maven.execution.ReactorManager: java.lang.String failureBehavior> = failureBehavior;

        goto label4;

     label3:
        $u0 = new java.lang.IllegalArgumentException;

        specialinvoke $u0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid failure behavior (must be one of: \'fail-fast\', \'fail-at-end\', \'fail-never\').");

        throw $u0;

     label4:
        return;
    }

    public java.lang.String getFailureBehavior()
    {
        ReactorManager this;
        java.lang.String $stack1;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack1 = $r0.<org.apache.maven.execution.ReactorManager: java.lang.String failureBehavior>;

        return $stack1;
    }

    public void blackList(org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack2;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        specialinvoke $r0.<org.apache.maven.execution.ReactorManager: void blackList(java.lang.String)>($stack2);

        return;
    }

    private void blackList(java.lang.String)
    {
        ReactorManager this;
        java.lang.String id, dependentId;
        java.util.List $stack5, $stack7, dependents;
        boolean $stack6, $stack11, $stack13, $stack16, $stack19;
        org.apache.maven.project.ProjectSorter $stack9;
        java.util.Iterator l3;
        java.lang.Object $stack14;
        java.util.Map $stack15, $stack18;
        org.apache.maven.execution.ReactorManager $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ReactorManager;

        id := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack5 = $r0.<org.apache.maven.execution.ReactorManager: java.util.List blackList>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: boolean contains(java.lang.Object)>(id);

        if $stack6 != 0 goto label3;

        $r1 = (org.apache.maven.execution.ReactorManager) this;

        $stack7 = $r1.<org.apache.maven.execution.ReactorManager: java.util.List blackList>;

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>(id);

        $r2 = (org.apache.maven.execution.ReactorManager) this;

        $stack9 = $r2.<org.apache.maven.execution.ReactorManager: org.apache.maven.project.ProjectSorter sorter>;

        dependents = virtualinvoke $stack9.<org.apache.maven.project.ProjectSorter: java.util.List getDependents(java.lang.String)>(id);

        if dependents == null goto label3;

        $stack11 = interfaceinvoke dependents.<java.util.List: boolean isEmpty()>();

        if $stack11 != 0 goto label3;

        l3 = interfaceinvoke dependents.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack13 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label3;

        $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        dependentId = (java.lang.String) $stack14;

        $r3 = (org.apache.maven.execution.ReactorManager) this;

        $stack15 = $r3.<org.apache.maven.execution.ReactorManager: java.util.Map buildSuccessesByProject>;

        $stack16 = interfaceinvoke $stack15.<java.util.Map: boolean containsKey(java.lang.Object)>(dependentId);

        if $stack16 != 0 goto label2;

        $r4 = (org.apache.maven.execution.ReactorManager) this;

        $stack18 = $r4.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject>;

        $stack19 = interfaceinvoke $stack18.<java.util.Map: boolean containsKey(java.lang.Object)>(dependentId);

        if $stack19 != 0 goto label2;

        $r5 = (org.apache.maven.execution.ReactorManager) this;

        specialinvoke $r5.<org.apache.maven.execution.ReactorManager: void blackList(java.lang.String)>(dependentId);

     label2:
        goto label1;

     label3:
        return;
    }

    public boolean isBlackListed(org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.List $stack2;
        java.lang.String $stack3;
        boolean $stack4;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack2 = $r0.<org.apache.maven.execution.ReactorManager: java.util.List blackList>;

        $stack3 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $stack4 = interfaceinvoke $stack2.<java.util.List: boolean contains(java.lang.Object)>($stack3);

        return $stack4;
    }

    private static java.lang.String getProjectKey(org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack1, $stack2, $stack3;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack1 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack3 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>($stack1, $stack2);

        return $stack3;
    }

    public void registerBuildFailure(org.apache.maven.project.MavenProject, java.lang.Exception, java.lang.String, long)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack6;
        java.lang.String $stack7, task;
        long time;
        java.lang.Exception error;
        org.apache.maven.execution.BuildFailure $u0;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        error := @parameter1: java.lang.Exception;

        task := @parameter2: java.lang.String;

        time := @parameter3: long;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack6 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject>;

        $stack7 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $u0 = new org.apache.maven.execution.BuildFailure;

        specialinvoke $u0.<org.apache.maven.execution.BuildFailure: void <init>(org.apache.maven.project.MavenProject,long,java.lang.Throwable)>(project, time, error);

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack7, $u0);

        return;
    }

    public boolean hasBuildFailures()
    {
        ReactorManager this;
        java.util.Map $stack1;
        boolean $stack2, $stack3;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack1 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: boolean isEmpty()>();

        if $stack2 != 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public boolean hasBuildFailure(org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack2;
        java.lang.String $stack3;
        boolean $stack4;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack2 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject>;

        $stack3 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>($stack3);

        return $stack4;
    }

    public boolean hasMultipleProjects()
    {
        ReactorManager this;
        org.apache.maven.project.ProjectSorter $stack1;
        boolean $stack2;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack1 = $r0.<org.apache.maven.execution.ReactorManager: org.apache.maven.project.ProjectSorter sorter>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.project.ProjectSorter: boolean hasMultipleProjects()>();

        return $stack2;
    }

    public java.util.List getSortedProjects()
    {
        ReactorManager this;
        org.apache.maven.project.ProjectSorter $stack1;
        java.util.List $stack2;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack1 = $r0.<org.apache.maven.execution.ReactorManager: org.apache.maven.project.ProjectSorter sorter>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.project.ProjectSorter: java.util.List getSortedProjects()>();

        return $stack2;
    }

    public boolean hasBuildSuccess(org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack2;
        java.lang.String $stack3;
        boolean $stack4;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack2 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildSuccessesByProject>;

        $stack3 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>($stack3);

        return $stack4;
    }

    public void registerBuildSuccess(org.apache.maven.project.MavenProject, long)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack4;
        java.lang.String $stack5;
        long time;
        org.apache.maven.execution.BuildSuccess $u0;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        time := @parameter1: long;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack4 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildSuccessesByProject>;

        $stack5 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $u0 = new org.apache.maven.execution.BuildSuccess;

        specialinvoke $u0.<org.apache.maven.execution.BuildSuccess: void <init>(org.apache.maven.project.MavenProject,long)>(project, time);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, $u0);

        return;
    }

    public org.apache.maven.execution.BuildFailure getBuildFailure(org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack2;
        java.lang.String $stack3;
        java.lang.Object $stack4;
        org.apache.maven.execution.BuildFailure $stack5;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack2 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject>;

        $stack3 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (org.apache.maven.execution.BuildFailure) $stack4;

        return $stack5;
    }

    public org.apache.maven.execution.BuildSuccess getBuildSuccess(org.apache.maven.project.MavenProject)
    {
        ReactorManager this;
        org.apache.maven.project.MavenProject project;
        java.util.Map $stack2;
        java.lang.String $stack3;
        java.lang.Object $stack4;
        org.apache.maven.execution.BuildSuccess $stack5;
        org.apache.maven.execution.ReactorManager $r0;

        this := @this: ReactorManager;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack2 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildSuccessesByProject>;

        $stack3 = staticinvoke <org.apache.maven.execution.ReactorManager: java.lang.String getProjectKey(org.apache.maven.project.MavenProject)>(project);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (org.apache.maven.execution.BuildSuccess) $stack4;

        return $stack5;
    }

    public boolean executedMultipleProjects()
    {
        ReactorManager this;
        java.util.Map $stack1, $stack3;
        int $stack2, $stack4, $stack5;
        boolean $stack6;
        org.apache.maven.execution.ReactorManager $r0, $r1;

        this := @this: ReactorManager;

        $r0 = (org.apache.maven.execution.ReactorManager) this;

        $stack1 = $r0.<org.apache.maven.execution.ReactorManager: java.util.Map buildFailuresByProject>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        $r1 = (org.apache.maven.execution.ReactorManager) this;

        $stack3 = $r1.<org.apache.maven.execution.ReactorManager: java.util.Map buildSuccessesByProject>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: int size()>();

        $stack5 = $stack2 + $stack4;

        if $stack5 <= 1 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        return $stack6;
    }

    private static java.util.Map lambda$getPluginContext$1(java.lang.String)
    {
        java.util.HashMap $stack1;
        java.lang.String k;

        k := @parameter0: java.lang.String;

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        return $stack1;
    }

    private static java.util.Map lambda$getPluginContext$0(java.lang.String)
    {
        java.util.HashMap $stack1;
        java.lang.String k;

        k := @parameter0: java.lang.String;

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <ReactorManager: java.lang.String MAKE_BOTH_MODE> = "make-both";

        <ReactorManager: java.lang.String MAKE_DEPENDENTS_MODE> = "make-dependents";

        <ReactorManager: java.lang.String MAKE_MODE> = "make";

        <ReactorManager: java.lang.String FAIL_NEVER> = "fail-never";

        <ReactorManager: java.lang.String FAIL_AT_END> = "fail-at-end";

        <ReactorManager: java.lang.String FAIL_FAST> = "fail-fast";

        return;
    }
}
