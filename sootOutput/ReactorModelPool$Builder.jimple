class ReactorModelPool$Builder extends java.lang.Object
{
    private org.apache.maven.project.ReactorModelPool pool;

    void <init>()
    {
        ReactorModelPool$Builder this;
        org.apache.maven.project.ReactorModelPool $u0;
        org.apache.maven.project.ReactorModelPool$Builder $r0;

        this := @this: ReactorModelPool$Builder;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.project.ReactorModelPool;

        specialinvoke $u0.<org.apache.maven.project.ReactorModelPool: void <init>()>();

        $r0 = (org.apache.maven.project.ReactorModelPool$Builder) this;

        $r0.<org.apache.maven.project.ReactorModelPool$Builder: org.apache.maven.project.ReactorModelPool pool> = $u0;

        return;
    }

    org.apache.maven.project.ReactorModelPool$Builder put(java.nio.file.Path, org.apache.maven.model.Model)
    {
        ReactorModelPool$Builder this;
        org.apache.maven.project.ReactorModelPool $stack3, $stack6;
        java.util.Map $stack4, $stack7;
        java.nio.file.Path pomFile;
        org.apache.maven.model.Model model;
        java.lang.String $stack9, $stack10;
        java.util.function.Function $stack11;
        java.lang.Object $stack12;
        java.util.Set $stack13;
        org.apache.maven.project.ReactorModelPool$GAKey $u0;
        org.apache.maven.project.ReactorModelPool$Builder $r0, $r1, $r2;

        this := @this: ReactorModelPool$Builder;

        pomFile := @parameter0: java.nio.file.Path;

        model := @parameter1: org.apache.maven.model.Model;

        $r0 = (org.apache.maven.project.ReactorModelPool$Builder) this;

        $stack3 = $r0.<org.apache.maven.project.ReactorModelPool$Builder: org.apache.maven.project.ReactorModelPool pool>;

        $stack4 = staticinvoke <org.apache.maven.project.ReactorModelPool: java.util.Map access$000(org.apache.maven.project.ReactorModelPool)>($stack3);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(pomFile, model);

        $r1 = (org.apache.maven.project.ReactorModelPool$Builder) this;

        $stack6 = $r1.<org.apache.maven.project.ReactorModelPool$Builder: org.apache.maven.project.ReactorModelPool pool>;

        $stack7 = staticinvoke <org.apache.maven.project.ReactorModelPool: java.util.Map access$100(org.apache.maven.project.ReactorModelPool)>($stack6);

        $u0 = new org.apache.maven.project.ReactorModelPool$GAKey;

        $stack9 = staticinvoke <org.apache.maven.project.ReactorModelPool$Builder: java.lang.String getGroupId(org.apache.maven.model.Model)>(model);

        $stack10 = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getArtifactId()>();

        specialinvoke $u0.<org.apache.maven.project.ReactorModelPool$GAKey: void <init>(java.lang.String,java.lang.String)>($stack9, $stack10);

        $stack11 = staticinvoke <ReactorModelPool$Builder$lambda_put_0__309: java.util.function.Function bootstrap$()>();

        $stack12 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($u0, $stack11);

        $stack13 = (java.util.Set) $stack12;

        interfaceinvoke $stack13.<java.util.Set: boolean add(java.lang.Object)>(model);

        $r2 = (org.apache.maven.project.ReactorModelPool$Builder) this;

        return $r2;
    }

    org.apache.maven.project.ReactorModelPool build()
    {
        ReactorModelPool$Builder this;
        org.apache.maven.project.ReactorModelPool $stack1;
        org.apache.maven.project.ReactorModelPool$Builder $r0;

        this := @this: ReactorModelPool$Builder;

        $r0 = (org.apache.maven.project.ReactorModelPool$Builder) this;

        $stack1 = $r0.<org.apache.maven.project.ReactorModelPool$Builder: org.apache.maven.project.ReactorModelPool pool>;

        return $stack1;
    }

    private static java.lang.String getGroupId(org.apache.maven.model.Model)
    {
        org.apache.maven.model.Model model;
        org.apache.maven.model.Parent $stack3, $stack5;
        java.lang.String groupId;

        model := @parameter0: org.apache.maven.model.Model;

        groupId = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        if groupId != null goto label1;

        $stack3 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        if $stack3 == null goto label1;

        $stack5 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        groupId = virtualinvoke $stack5.<org.apache.maven.model.Parent: java.lang.String getGroupId()>();

     label1:
        return groupId;
    }

    private static java.util.Set lambda$put$0(org.apache.maven.project.ReactorModelPool$GAKey)
    {
        java.util.HashSet $stack1;
        org.apache.maven.project.ReactorModelPool$GAKey k;

        k := @parameter0: org.apache.maven.project.ReactorModelPool$GAKey;

        $stack1 = new java.util.HashSet;

        specialinvoke $stack1.<java.util.HashSet: void <init>()>();

        return $stack1;
    }
}
