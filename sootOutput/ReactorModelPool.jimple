class ReactorModelPool extends java.lang.Object
{
    private final java.util.Map modelsByGa;
    private final java.util.Map modelsByPath;

    void <init>()
    {
        ReactorModelPool this;
        java.util.HashMap $u0, $u1;
        org.apache.maven.project.ReactorModelPool $r0, $r1;

        this := @this: ReactorModelPool;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        $r0 = (org.apache.maven.project.ReactorModelPool) this;

        $r0.<org.apache.maven.project.ReactorModelPool: java.util.Map modelsByGa> = $u0;

        $u1 = new java.util.HashMap;

        specialinvoke $u1.<java.util.HashMap: void <init>()>();

        $r1 = (org.apache.maven.project.ReactorModelPool) this;

        $r1.<org.apache.maven.project.ReactorModelPool: java.util.Map modelsByPath> = $u1;

        return;
    }

    public org.apache.maven.model.Model get(java.lang.String, java.lang.String, java.lang.String)
    {
        ReactorModelPool this;
        java.lang.String groupId, artifactId, version;
        java.util.Map $stack5;
        java.util.Set $stack6, $stack8;
        java.lang.Object $stack7, $stack14;
        java.util.stream.Stream $stack9, $stack11;
        java.util.function.Predicate $stack10;
        java.util.function.BinaryOperator $stack12;
        java.util.Optional $stack13;
        org.apache.maven.model.Model $stack15;
        org.apache.maven.project.ReactorModelPool$GAKey $u0;
        org.apache.maven.project.ReactorModelPool $r0, $r1;

        this := @this: ReactorModelPool;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.project.ReactorModelPool) this;

        $stack5 = $r0.<org.apache.maven.project.ReactorModelPool: java.util.Map modelsByGa>;

        $u0 = new org.apache.maven.project.ReactorModelPool$GAKey;

        specialinvoke $u0.<org.apache.maven.project.ReactorModelPool$GAKey: void <init>(java.lang.String,java.lang.String)>(groupId, artifactId);

        $stack6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($u0, $stack6);

        $stack8 = (java.util.Set) $stack7;

        $stack9 = interfaceinvoke $stack8.<java.util.Set: java.util.stream.Stream stream()>();

        $r1 = (org.apache.maven.project.ReactorModelPool) this;

        $stack10 = staticinvoke <ReactorModelPool$lambda_get_0__309: java.util.function.Predicate bootstrap$(org.apache.maven.project.ReactorModelPool,java.lang.String)>($r1, version);

        $stack11 = interfaceinvoke $stack9.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack10);

        $stack12 = staticinvoke <ReactorModelPool$lambda_get_1__310: java.util.function.BinaryOperator bootstrap$()>();

        $stack13 = interfaceinvoke $stack11.<java.util.stream.Stream: java.util.Optional reduce(java.util.function.BinaryOperator)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $stack15 = (org.apache.maven.model.Model) $stack14;

        return $stack15;
    }

    public org.apache.maven.model.Model get(java.nio.file.Path)
    {
        java.nio.file.Path path, pomFile;
        java.nio.file.LinkOption[] $stack3;
        boolean $stack4;
        ReactorModelPool this;
        java.util.Map $stack5;
        java.lang.Object $stack6;
        org.apache.maven.model.Model $stack7;
        org.apache.maven.project.ReactorModelPool $r0;

        this := @this: ReactorModelPool;

        path := @parameter0: java.nio.file.Path;

        $stack3 = newarray (java.nio.file.LinkOption)[0];

        $stack4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(path, $stack3);

        if $stack4 == 0 goto label1;

        pomFile = interfaceinvoke path.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("pom.xml");

        goto label2;

     label1:
        pomFile = path;

     label2:
        $r0 = (org.apache.maven.project.ReactorModelPool) this;

        $stack5 = $r0.<org.apache.maven.project.ReactorModelPool: java.util.Map modelsByPath>;

        $stack6 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>(pomFile);

        $stack7 = (org.apache.maven.model.Model) $stack6;

        return $stack7;
    }

    private java.lang.String getVersion(org.apache.maven.model.Model)
    {
        org.apache.maven.model.Model model;
        org.apache.maven.model.Parent $stack4, $stack6;
        ReactorModelPool this;
        java.lang.String version;

        this := @this: ReactorModelPool;

        model := @parameter0: org.apache.maven.model.Model;

        version = virtualinvoke model.<org.apache.maven.model.Model: java.lang.String getVersion()>();

        if version != null goto label1;

        $stack4 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        if $stack4 == null goto label1;

        $stack6 = virtualinvoke model.<org.apache.maven.model.Model: org.apache.maven.model.Parent getParent()>();

        version = virtualinvoke $stack6.<org.apache.maven.model.Parent: java.lang.String getVersion()>();

     label1:
        return version;
    }

    private static org.apache.maven.model.Model lambda$get$1(org.apache.maven.model.Model, org.apache.maven.model.Model)
    {
        java.lang.IllegalStateException $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack6, $stack7, $stack9;
        org.apache.maven.model.Model a, b;
        java.lang.String $stack5, $stack8, $stack10;

        a := @parameter0: org.apache.maven.model.Model;

        b := @parameter1: org.apache.maven.model.Model;

        $stack2 = new java.lang.IllegalStateException;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple modules with key ");

        $stack5 = virtualinvoke a.<org.apache.maven.model.Model: java.lang.String getGroupId()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $stack8 = virtualinvoke a.<org.apache.maven.model.Model: java.lang.String getArtifactId()>();

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack10);

        throw $stack2;
    }

    private boolean lambda$get$0(java.lang.String, org.apache.maven.model.Model)
    {
        java.lang.String version, $stack3;
        ReactorModelPool this;
        org.apache.maven.model.Model m;
        boolean $stack4, $stack5;
        org.apache.maven.project.ReactorModelPool $r0;

        this := @this: ReactorModelPool;

        version := @parameter0: java.lang.String;

        m := @parameter1: org.apache.maven.model.Model;

        if version == null goto label1;

        $r0 = (org.apache.maven.project.ReactorModelPool) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.project.ReactorModelPool: java.lang.String getVersion(org.apache.maven.model.Model)>(m);

        $stack4 = virtualinvoke version.<java.lang.String: boolean equals(java.lang.Object)>($stack3);

        if $stack4 == 0 goto label2;

     label1:
        $stack5 = 1;

        goto label3;

     label2:
        $stack5 = 0;

     label3:
        return $stack5;
    }

    static java.util.Map access$000(org.apache.maven.project.ReactorModelPool)
    {
        org.apache.maven.project.ReactorModelPool x0;
        java.util.Map $stack1;

        x0 := @parameter0: org.apache.maven.project.ReactorModelPool;

        $stack1 = x0.<org.apache.maven.project.ReactorModelPool: java.util.Map modelsByPath>;

        return $stack1;
    }

    static java.util.Map access$100(org.apache.maven.project.ReactorModelPool)
    {
        org.apache.maven.project.ReactorModelPool x0;
        java.util.Map $stack1;

        x0 := @parameter0: org.apache.maven.project.ReactorModelPool;

        $stack1 = x0.<org.apache.maven.project.ReactorModelPool: java.util.Map modelsByGa>;

        return $stack1;
    }
}
