class ReactorReader extends java.lang.Object implements org.apache.maven.repository.internal.MavenWorkspaceReader
{
    public static final java.lang.String HINT;
    private static final java.util.Collection COMPILE_PHASE_TYPES;
    private static final org.slf4j.Logger LOGGER;
    private org.apache.maven.execution.MavenSession session;
    private java.util.Map projectsByGAV;
    private java.util.Map projectsByGA;
    private org.eclipse.aether.repository.WorkspaceRepository repository;

    void <init>(org.apache.maven.execution.MavenSession)
    {
        ReactorReader this;
        org.apache.maven.execution.MavenSession session;
        java.util.List $stack7, $stack10, projects;
        int $stack8, $stack9, $stack14, $stack15;
        java.util.function.Consumer $stack11;
        java.util.Map $stack13, $stack16, $stack22, $stack29;
        java.util.Collection $stack17;
        java.util.Iterator l2;
        boolean $stack19;
        java.util.Set $stack24;
        java.lang.Object $stack25, $stack31;
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack26, $stack27, key;
        java.util.function.Function $stack30;
        java.util.HashMap $u0, $u1;
        java.util.HashSet $u2;
        org.eclipse.aether.repository.WorkspaceRepository $u3;
        org.apache.maven.ReactorReader $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: ReactorReader;

        session := @parameter0: org.apache.maven.execution.MavenSession;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.ReactorReader) this;

        $r0.<org.apache.maven.ReactorReader: org.apache.maven.execution.MavenSession session> = session;

        $u0 = new java.util.HashMap;

        $stack7 = virtualinvoke session.<org.apache.maven.execution.MavenSession: java.util.List getAllProjects()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: int size()>();

        $stack9 = $stack8 * 2;

        specialinvoke $u0.<java.util.HashMap: void <init>(int)>($stack9);

        $r1 = (org.apache.maven.ReactorReader) this;

        $r1.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV> = $u0;

        $stack10 = virtualinvoke session.<org.apache.maven.execution.MavenSession: java.util.List getAllProjects()>();

        $r2 = (org.apache.maven.ReactorReader) this;

        $stack11 = staticinvoke <ReactorReader$lambda_new_0__309: java.util.function.Consumer bootstrap$(org.apache.maven.ReactorReader)>($r2);

        interfaceinvoke $stack10.<java.util.List: void forEach(java.util.function.Consumer)>($stack11);

        $u1 = new java.util.HashMap;

        $r3 = (org.apache.maven.ReactorReader) this;

        $stack13 = $r3.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: int size()>();

        $stack15 = $stack14 * 2;

        specialinvoke $u1.<java.util.HashMap: void <init>(int)>($stack15);

        $r4 = (org.apache.maven.ReactorReader) this;

        $r4.<org.apache.maven.ReactorReader: java.util.Map projectsByGA> = $u1;

        $r5 = (org.apache.maven.ReactorReader) this;

        $stack16 = $r5.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV>;

        $stack17 = interfaceinvoke $stack16.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack17.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack19 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label2;

        $stack25 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        project = (org.apache.maven.project.MavenProject) $stack25;

        $stack26 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack27 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        key = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>($stack26, $stack27);

        $r6 = (org.apache.maven.ReactorReader) this;

        $stack29 = $r6.<org.apache.maven.ReactorReader: java.util.Map projectsByGA>;

        $stack30 = staticinvoke <ReactorReader$lambda_new_1__310: java.util.function.Function bootstrap$()>();

        $stack31 = interfaceinvoke $stack29.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(key, $stack30);

        projects = (java.util.List) $stack31;

        interfaceinvoke projects.<java.util.List: boolean add(java.lang.Object)>(project);

        goto label1;

     label2:
        $u3 = new org.eclipse.aether.repository.WorkspaceRepository;

        $u2 = new java.util.HashSet;

        $r7 = (org.apache.maven.ReactorReader) this;

        $stack22 = $r7.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV>;

        $stack24 = interfaceinvoke $stack22.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $u2.<java.util.HashSet: void <init>(java.util.Collection)>($stack24);

        specialinvoke $u3.<org.eclipse.aether.repository.WorkspaceRepository: void <init>(java.lang.String,java.lang.Object)>("reactor", $u2);

        $r8 = (org.apache.maven.ReactorReader) this;

        $r8.<org.apache.maven.ReactorReader: org.eclipse.aether.repository.WorkspaceRepository repository> = $u3;

        return;
    }

    public org.eclipse.aether.repository.WorkspaceRepository getRepository()
    {
        ReactorReader this;
        org.eclipse.aether.repository.WorkspaceRepository $stack1;
        org.apache.maven.ReactorReader $r0;

        this := @this: ReactorReader;

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack1 = $r0.<org.apache.maven.ReactorReader: org.eclipse.aether.repository.WorkspaceRepository repository>;

        return $stack1;
    }

    public java.io.File findArtifact(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        java.lang.String $stack5, $stack6, $stack7, projectKey;
        ReactorReader this;
        java.util.Map $stack9;
        java.lang.Object $stack10;
        org.apache.maven.project.MavenProject project, $stack12, $stack14;
        java.io.File file;
        org.apache.maven.ReactorReader $r0, $r1, $r2;

        this := @this: ReactorReader;

        artifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        $stack5 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack6 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack7 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        projectKey = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String key(java.lang.String,java.lang.String,java.lang.String)>($stack5, $stack6, $stack7);

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack9 = $r0.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.lang.Object get(java.lang.Object)>(projectKey);

        project = (org.apache.maven.project.MavenProject) $stack10;

        if project == null goto label2;

        $r1 = (org.apache.maven.ReactorReader) this;

        file = specialinvoke $r1.<org.apache.maven.ReactorReader: java.io.File find(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>(project, artifact);

        if file != null goto label1;

        $stack12 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject getExecutionProject()>();

        if project == $stack12 goto label1;

        $stack14 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.project.MavenProject getExecutionProject()>();

        $r2 = (org.apache.maven.ReactorReader) this;

        file = specialinvoke $r2.<org.apache.maven.ReactorReader: java.io.File find(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>($stack14, artifact);

     label1:
        return file;

     label2:
        return null;
    }

    public java.util.List findVersions(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        java.lang.String $stack7, $stack8, key, $stack21;
        ReactorReader this;
        java.util.Map $stack10;
        java.lang.Object $stack11, $stack18;
        java.util.List projects, $stack12, $stack17;
        boolean $stack13, $stack16;
        java.util.Iterator l5;
        org.apache.maven.project.MavenProject project;
        java.io.File $stack19;
        java.util.ArrayList $u0;
        org.apache.maven.ReactorReader $r0, $r1;

        this := @this: ReactorReader;

        artifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        $stack7 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack8 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        key = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>($stack7, $stack8);

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack10 = $r0.<org.apache.maven.ReactorReader: java.util.Map projectsByGA>;

        $stack11 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        projects = (java.util.List) $stack11;

        if projects == null goto label1;

        $stack13 = interfaceinvoke projects.<java.util.List: boolean isEmpty()>();

        if $stack13 == 0 goto label2;

     label1:
        $stack12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack12;

     label2:
        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        l5 = interfaceinvoke projects.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack16 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label5;

        $stack18 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        project = (org.apache.maven.project.MavenProject) $stack18;

        $r1 = (org.apache.maven.ReactorReader) this;

        $stack19 = specialinvoke $r1.<org.apache.maven.ReactorReader: java.io.File find(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>(project, artifact);

        if $stack19 == null goto label4;

        $stack21 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack21);

     label4:
        goto label3;

     label5:
        $stack17 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($u0);

        return $stack17;
    }

    public org.apache.maven.model.Model findModel(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        java.lang.String $stack4, $stack5, $stack6, projectKey;
        ReactorReader this;
        java.util.Map $stack8;
        java.lang.Object $stack9;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Model $stack10;
        org.apache.maven.ReactorReader $r0;

        this := @this: ReactorReader;

        artifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        $stack4 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack5 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack6 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        projectKey = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String key(java.lang.String,java.lang.String,java.lang.String)>($stack4, $stack5, $stack6);

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack8 = $r0.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>(projectKey);

        project = (org.apache.maven.project.MavenProject) $stack9;

        if project != null goto label1;

        $stack10 = null;

        goto label2;

     label1:
        $stack10 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Model getModel()>();

     label2:
        return $stack10;
    }

    private java.io.File find(org.apache.maven.project.MavenProject, org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact, projectArtifact;
        java.lang.String $stack5, $stack6;
        boolean $stack7, $stack10, $stack13, $stack16, $stack11;
        ReactorReader this;
        org.apache.maven.project.MavenProject project;
        java.io.File packagedArtifactFile, $stack12, $stack17, $stack18;
        org.apache.maven.ReactorReader $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        artifact := @parameter1: org.eclipse.aether.artifact.Artifact;

        $stack5 = "pom";

        $stack6 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        $stack7 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label1;

        $stack18 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.io.File getFile()>();

        return $stack18;

     label1:
        $r0 = (org.apache.maven.ReactorReader) this;

        projectArtifact = specialinvoke $r0.<org.apache.maven.ReactorReader: org.eclipse.aether.artifact.Artifact findMatchingArtifact(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>(project, artifact);

        $r1 = (org.apache.maven.ReactorReader) this;

        packagedArtifactFile = specialinvoke $r1.<org.apache.maven.ReactorReader: java.io.File determinePreviouslyPackagedArtifactFile(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>(project, projectArtifact);

        $r2 = (org.apache.maven.ReactorReader) this;

        $stack10 = specialinvoke $r2.<org.apache.maven.ReactorReader: boolean hasArtifactFileFromPackagePhase(org.eclipse.aether.artifact.Artifact)>(projectArtifact);

        if $stack10 == 0 goto label2;

        $stack17 = interfaceinvoke projectArtifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        return $stack17;

     label2:
        if packagedArtifactFile == null goto label3;

        $stack13 = virtualinvoke packagedArtifactFile.<java.io.File: boolean exists()>();

        if $stack13 == 0 goto label3;

        $r3 = (org.apache.maven.ReactorReader) this;

        $stack16 = specialinvoke $r3.<org.apache.maven.ReactorReader: boolean isPackagedArtifactUpToDate(org.apache.maven.project.MavenProject,java.io.File,org.eclipse.aether.artifact.Artifact)>(project, packagedArtifactFile, artifact);

        if $stack16 == 0 goto label3;

        return packagedArtifactFile;

     label3:
        $r4 = (org.apache.maven.ReactorReader) this;

        $stack11 = specialinvoke $r4.<org.apache.maven.ReactorReader: boolean hasBeenPackagedDuringThisSession(org.apache.maven.project.MavenProject)>(project);

        if $stack11 != 0 goto label4;

        $r5 = (org.apache.maven.ReactorReader) this;

        $stack12 = specialinvoke $r5.<org.apache.maven.ReactorReader: java.io.File determineBuildOutputDirectoryForArtifact(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>(project, artifact);

        return $stack12;

     label4:
        return null;
    }

    private java.io.File determineBuildOutputDirectoryForArtifact(org.apache.maven.project.MavenProject, org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        boolean $stack7, $stack12, projectCompiledDuringThisSession, $stack17, $stack21, $stack25, $stack22, $stack15, $stack18;
        java.lang.String type, $stack11, $stack29;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Build $stack10, $stack28;
        ReactorReader this;
        java.util.Collection $stack20;
        org.apache.maven.execution.MavenSession $stack13;
        java.util.List $stack14;
        java.io.File $u0, $u1;
        org.apache.maven.ReactorReader $r0;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        artifact := @parameter1: org.eclipse.aether.artifact.Artifact;

        $stack7 = staticinvoke <org.apache.maven.ReactorReader: boolean isTestArtifact(org.eclipse.aether.artifact.Artifact)>(artifact);

        if $stack7 == 0 goto label1;

        $stack25 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>("test-compile");

        if $stack25 == 0 goto label7;

        $u0 = new java.io.File;

        $stack28 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack29 = virtualinvoke $stack28.<org.apache.maven.model.Build: java.lang.String getTestOutputDirectory()>();

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack29);

        return $u0;

     label1:
        type = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("type", "");

        $u1 = new java.io.File;

        $stack10 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack11 = virtualinvoke $stack10.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack11);

        $stack12 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>("compile");

        if $stack12 == 0 goto label2;

        $stack20 = <org.apache.maven.ReactorReader: java.util.Collection COMPILE_PHASE_TYPES>;

        $stack21 = interfaceinvoke $stack20.<java.util.Collection: boolean contains(java.lang.Object)>(type);

        if $stack21 == 0 goto label2;

        $stack22 = 1;

        goto label3;

     label2:
        $stack22 = 0;

     label3:
        projectCompiledDuringThisSession = $stack22;

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack13 = $r0.<org.apache.maven.ReactorReader: org.apache.maven.execution.MavenSession session>;

        $stack14 = virtualinvoke $stack13.<org.apache.maven.execution.MavenSession: java.util.List getProjects()>();

        $stack15 = interfaceinvoke $stack14.<java.util.List: boolean contains(java.lang.Object)>(project);

        if $stack15 != 0 goto label4;

        $stack17 = virtualinvoke $u1.<java.io.File: boolean exists()>();

        if $stack17 == 0 goto label4;

        $stack18 = 1;

        goto label5;

     label4:
        $stack18 = 0;

     label5:
        if $stack18 != 0 goto label6;

        if projectCompiledDuringThisSession == 0 goto label7;

     label6:
        return $u1;

     label7:
        return null;
    }

    private java.io.File determinePreviouslyPackagedArtifactFile(org.apache.maven.project.MavenProject, org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        java.lang.Object[] $stack4;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Build $stack7, $stack13;
        java.lang.String $stack8, $stack10, fileName, $stack14;
        java.io.File $stack12;
        ReactorReader this;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        artifact := @parameter1: org.eclipse.aether.artifact.Artifact;

        if artifact != null goto label1;

        return null;

     label1:
        $stack4 = newarray (java.lang.Object)[2];

        $stack7 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.model.Build: java.lang.String getFinalName()>();

        $stack4[0] = $stack8;

        $stack10 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        $stack4[1] = $stack10;

        fileName = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s", $stack4);

        $stack12 = new java.io.File;

        $stack13 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack14 = virtualinvoke $stack13.<org.apache.maven.model.Build: java.lang.String getDirectory()>();

        specialinvoke $stack12.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack14, fileName);

        return $stack12;
    }

    private boolean hasArtifactFileFromPackagePhase(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact projectArtifact;
        java.io.File $stack2, $stack4;
        boolean $stack5, $stack3;
        ReactorReader this;

        this := @this: ReactorReader;

        projectArtifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        if projectArtifact == null goto label1;

        $stack2 = interfaceinvoke projectArtifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        if $stack2 == null goto label1;

        $stack4 = interfaceinvoke projectArtifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        $stack5 = virtualinvoke $stack4.<java.io.File: boolean exists()>();

        if $stack5 == 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    private boolean isPackagedArtifactUpToDate(org.apache.maven.project.MavenProject, java.io.File, org.eclipse.aether.artifact.Artifact)
    {
        org.apache.maven.project.MavenProject project;
        org.apache.maven.model.Build $stack14;
        java.lang.String $stack15, $stack44, $stack52;
        java.lang.String[] $stack16;
        java.nio.file.Path outputDirectory, $stack22, $stack43, $stack50, $stack54, $stack55, outputFile;
        java.io.File $stack18, packagedArtifactFile, alternative;
        boolean $stack19, $stack34, $stack30;
        java.nio.file.FileVisitOption[] $stack20;
        java.nio.file.LinkOption[] $stack23, $stack33, $stack35;
        java.nio.file.attribute.FileTime $stack24, $stack36;
        ReactorReader this;
        org.apache.maven.execution.MavenSession $stack26, $stack58;
        org.apache.maven.project.ProjectBuildingRequest $stack27, $stack59;
        java.util.Date $stack28, $stack60;
        java.lang.Object $stack32;
        byte $stack38, $stack62;
        org.eclipse.aether.artifact.Artifact artifact;
        org.slf4j.Logger $stack41, $stack47, $stack66;
        java.lang.Object[] $stack46;
        java.io.IOException $stack65;
        java.lang.Throwable $stack67, $stack68;
        java.util.stream.Stream outputFiles;
        long artifactLastModified, buildStartTime, outputFileLastModified#13;
        java.util.Iterator buildStartTime#5;
        org.apache.maven.ReactorReader $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        packagedArtifactFile := @parameter1: java.io.File;

        artifact := @parameter2: org.eclipse.aether.artifact.Artifact;

        $stack14 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.model.Build getBuild()>();

        $stack15 = virtualinvoke $stack14.<org.apache.maven.model.Build: java.lang.String getOutputDirectory()>();

        $stack16 = newarray (java.lang.String)[0];

        outputDirectory = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($stack15, $stack16);

        $stack18 = interfaceinvoke outputDirectory.<java.nio.file.Path: java.io.File toFile()>();

        $stack19 = virtualinvoke $stack18.<java.io.File: boolean exists()>();

        if $stack19 != 0 goto label01;

        return 1;

     label01:
        $stack20 = newarray (java.nio.file.FileVisitOption)[0];

        outputFiles = staticinvoke <java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,java.nio.file.FileVisitOption[])>(outputDirectory, $stack20);

     label02:
        $stack22 = virtualinvoke packagedArtifactFile.<java.io.File: java.nio.file.Path toPath()>();

        $stack23 = newarray (java.nio.file.LinkOption)[0];

        $stack24 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption[])>($stack22, $stack23);

        artifactLastModified = virtualinvoke $stack24.<java.nio.file.attribute.FileTime: long toMillis()>();

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack26 = $r0.<org.apache.maven.ReactorReader: org.apache.maven.execution.MavenSession session>;

        $stack27 = virtualinvoke $stack26.<org.apache.maven.execution.MavenSession: org.apache.maven.project.ProjectBuildingRequest getProjectBuildingRequest()>();

        $stack28 = interfaceinvoke $stack27.<org.apache.maven.project.ProjectBuildingRequest: java.util.Date getBuildStartTime()>();

        if $stack28 == null goto label05;

        $r1 = (org.apache.maven.ReactorReader) this;

        $stack58 = $r1.<org.apache.maven.ReactorReader: org.apache.maven.execution.MavenSession session>;

        $stack59 = virtualinvoke $stack58.<org.apache.maven.execution.MavenSession: org.apache.maven.project.ProjectBuildingRequest getProjectBuildingRequest()>();

        $stack60 = interfaceinvoke $stack59.<org.apache.maven.project.ProjectBuildingRequest: java.util.Date getBuildStartTime()>();

        buildStartTime = virtualinvoke $stack60.<java.util.Date: long getTime()>();

        $stack62 = artifactLastModified cmp buildStartTime;

        if $stack62 <= 0 goto label05;

     label03:
        if outputFiles == null goto label04;

        interfaceinvoke outputFiles.<java.util.stream.Stream: void close()>();

     label04:
        return 1;

     label05:
        buildStartTime#5 = interfaceinvoke outputFiles.<java.util.stream.Stream: java.util.Iterator iterator()>();

     label06:
        $stack30 = interfaceinvoke buildStartTime#5.<java.util.Iterator: boolean hasNext()>();

        if $stack30 == 0 goto label12;

        $stack32 = interfaceinvoke buildStartTime#5.<java.util.Iterator: java.lang.Object next()>();

        outputFile = (java.nio.file.Path) $stack32;

        $stack33 = newarray (java.nio.file.LinkOption)[0];

        $stack34 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(outputFile, $stack33);

        if $stack34 == 0 goto label07;

        goto label06;

     label07:
        $stack35 = newarray (java.nio.file.LinkOption)[0];

        $stack36 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption[])>(outputFile, $stack35);

        outputFileLastModified#13 = virtualinvoke $stack36.<java.nio.file.attribute.FileTime: long toMillis()>();

        $stack38 = outputFileLastModified#13 cmp artifactLastModified;

        if $stack38 <= 0 goto label11;

        $r2 = (org.apache.maven.ReactorReader) this;

        alternative = specialinvoke $r2.<org.apache.maven.ReactorReader: java.io.File determineBuildOutputDirectoryForArtifact(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>(project, artifact);

        if alternative == null goto label08;

        $stack47 = <org.apache.maven.ReactorReader: org.slf4j.Logger LOGGER>;

        $stack46 = newarray (java.lang.Object)[3];

        $r3 = (org.apache.maven.ReactorReader) this;

        $stack50 = specialinvoke $r3.<org.apache.maven.ReactorReader: java.nio.file.Path relativizeOutputFile(java.nio.file.Path)>(outputFile);

        $stack46[0] = $stack50;

        $stack52 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack46[1] = $stack52;

        $stack54 = virtualinvoke alternative.<java.io.File: java.nio.file.Path toPath()>();

        $r4 = (org.apache.maven.ReactorReader) this;

        $stack55 = specialinvoke $r4.<org.apache.maven.ReactorReader: java.nio.file.Path relativizeOutputFile(java.nio.file.Path)>($stack54);

        $stack46[2] = $stack55;

        interfaceinvoke $stack47.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("File \'{}\' is more recent than the packaged artifact for \'{}\'; using \'{}\' instead", $stack46);

        goto label09;

     label08:
        $stack41 = <org.apache.maven.ReactorReader: org.slf4j.Logger LOGGER>;

        $r5 = (org.apache.maven.ReactorReader) this;

        $stack43 = specialinvoke $r5.<org.apache.maven.ReactorReader: java.nio.file.Path relativizeOutputFile(java.nio.file.Path)>(outputFile);

        $stack44 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        interfaceinvoke $stack41.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("File \'{}\' is more recent than the packaged artifact for \'{}\'; cannot use the build output directory for this type of artifact", $stack43, $stack44);

     label09:
        if outputFiles == null goto label10;

        interfaceinvoke outputFiles.<java.util.stream.Stream: void close()>();

     label10:
        return 0;

     label11:
        goto label06;

     label12:
        if outputFiles == null goto label13;

        interfaceinvoke outputFiles.<java.util.stream.Stream: void close()>();

     label13:
        return 1;

     label14:
        $stack68 := @caughtexception;

        if outputFiles == null goto label18;

     label15:
        interfaceinvoke outputFiles.<java.util.stream.Stream: void close()>();

     label16:
        goto label18;

     label17:
        $stack67 := @caughtexception;

        virtualinvoke $stack68.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack67);

     label18:
        throw $stack68;

     label19:
        $stack65 := @caughtexception;

        $stack66 = <org.apache.maven.ReactorReader: org.slf4j.Logger LOGGER>;

        interfaceinvoke $stack66.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("An I/O error occurred while checking if the packaged artifact is up-to-date against the build output directory. Continuing with the assumption that it is up-to-date.", $stack65);

        return 1;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label05 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.io.IOException from label01 to label04 with label19;
        catch java.io.IOException from label05 to label10 with label19;
        catch java.io.IOException from label11 to label13 with label19;
        catch java.io.IOException from label14 to label19 with label19;
    }

    private boolean hasBeenPackagedDuringThisSession(org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject project;
        boolean $stack2, $stack3, $stack4, $stack5;
        ReactorReader this;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack2 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>("package");

        if $stack2 != 0 goto label1;

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>("install");

        if $stack3 != 0 goto label1;

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>("deploy");

        if $stack4 == 0 goto label2;

     label1:
        $stack5 = 1;

        goto label3;

     label2:
        $stack5 = 0;

     label3:
        return $stack5;
    }

    private java.nio.file.Path relativizeOutputFile(java.nio.file.Path)
    {
        ReactorReader this;
        org.apache.maven.execution.MavenSession $stack3;
        org.apache.maven.execution.MavenExecutionRequest $stack4;
        java.io.File $stack5;
        java.net.URI $stack6;
        java.nio.file.Path projectBaseDirectory, outputFile, $stack8;
        org.apache.maven.ReactorReader $r0;

        this := @this: ReactorReader;

        outputFile := @parameter0: java.nio.file.Path;

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack3 = $r0.<org.apache.maven.ReactorReader: org.apache.maven.execution.MavenSession session>;

        $stack4 = virtualinvoke $stack3.<org.apache.maven.execution.MavenSession: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack5 = interfaceinvoke $stack4.<org.apache.maven.execution.MavenExecutionRequest: java.io.File getMultiModuleProjectDirectory()>();

        $stack6 = virtualinvoke $stack5.<java.io.File: java.net.URI toURI()>();

        projectBaseDirectory = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>($stack6);

        $stack8 = interfaceinvoke projectBaseDirectory.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(outputFile);

        return $stack8;
    }

    private org.eclipse.aether.artifact.Artifact findMatchingArtifact(org.apache.maven.project.MavenProject, org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact requestedArtifact, mainArtifact, attachedArtifact;
        java.lang.String requestedRepositoryConflictId, $stack10;
        org.apache.maven.project.MavenProject project;
        org.apache.maven.artifact.Artifact $stack8;
        boolean $stack11, $stack15, $stack17;
        java.util.List $stack12;
        java.util.Collection $stack13;
        java.util.Iterator l5;
        java.lang.Object $stack16;
        ReactorReader this;
        org.apache.maven.ReactorReader $r0;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        requestedArtifact := @parameter1: org.eclipse.aether.artifact.Artifact;

        requestedRepositoryConflictId = staticinvoke <org.eclipse.aether.util.artifact.ArtifactIdUtils: java.lang.String toVersionlessId(org.eclipse.aether.artifact.Artifact)>(requestedArtifact);

        $stack8 = virtualinvoke project.<org.apache.maven.project.MavenProject: org.apache.maven.artifact.Artifact getArtifact()>();

        mainArtifact = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>($stack8);

        $stack10 = staticinvoke <org.eclipse.aether.util.artifact.ArtifactIdUtils: java.lang.String toVersionlessId(org.eclipse.aether.artifact.Artifact)>(mainArtifact);

        $stack11 = virtualinvoke requestedRepositoryConflictId.<java.lang.String: boolean equals(java.lang.Object)>($stack10);

        if $stack11 == 0 goto label1;

        return mainArtifact;

     label1:
        $stack12 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.util.List getAttachedArtifacts()>();

        $stack13 = staticinvoke <org.apache.maven.RepositoryUtils: java.util.Collection toArtifacts(java.util.Collection)>($stack12);

        l5 = interfaceinvoke $stack13.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack15 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label4;

        $stack16 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        attachedArtifact = (org.eclipse.aether.artifact.Artifact) $stack16;

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack17 = specialinvoke $r0.<org.apache.maven.ReactorReader: boolean attachedArtifactComparison(org.eclipse.aether.artifact.Artifact,org.eclipse.aether.artifact.Artifact)>(requestedArtifact, attachedArtifact);

        if $stack17 == 0 goto label3;

        return attachedArtifact;

     label3:
        goto label2;

     label4:
        return null;
    }

    private boolean attachedArtifactComparison(org.eclipse.aether.artifact.Artifact, org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact requested, attached;
        java.lang.String $stack3, $stack4, $stack6, $stack7, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17;
        boolean $stack5, $stack8, $stack12, $stack15, $stack18, $stack9;
        ReactorReader this;

        this := @this: ReactorReader;

        requested := @parameter0: org.eclipse.aether.artifact.Artifact;

        attached := @parameter1: org.eclipse.aether.artifact.Artifact;

        $stack3 = interfaceinvoke requested.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack4 = interfaceinvoke attached.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack5 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>($stack4);

        if $stack5 == 0 goto label1;

        $stack6 = interfaceinvoke requested.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack7 = interfaceinvoke attached.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack8 = virtualinvoke $stack6.<java.lang.String: boolean equals(java.lang.Object)>($stack7);

        if $stack8 == 0 goto label1;

        $stack10 = interfaceinvoke requested.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        $stack11 = interfaceinvoke attached.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        $stack12 = virtualinvoke $stack10.<java.lang.String: boolean equals(java.lang.Object)>($stack11);

        if $stack12 == 0 goto label1;

        $stack13 = interfaceinvoke requested.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        $stack14 = interfaceinvoke attached.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        $stack15 = virtualinvoke $stack13.<java.lang.String: boolean equals(java.lang.Object)>($stack14);

        if $stack15 == 0 goto label1;

        $stack16 = interfaceinvoke requested.<org.eclipse.aether.artifact.Artifact: java.lang.String getClassifier()>();

        $stack17 = interfaceinvoke attached.<org.eclipse.aether.artifact.Artifact: java.lang.String getClassifier()>();

        $stack18 = virtualinvoke $stack16.<java.lang.String: boolean equals(java.lang.Object)>($stack17);

        if $stack18 == 0 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        return $stack9;
    }

    private static boolean isTestArtifact(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        java.lang.String $stack1, $stack2, $stack4, $stack5, $stack8, $stack9;
        boolean $stack3, $stack6, $stack10, $stack7;

        artifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        $stack1 = "test-jar";

        $stack2 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("type", "");

        $stack3 = virtualinvoke $stack1.<java.lang.String: boolean equals(java.lang.Object)>($stack2);

        if $stack3 != 0 goto label1;

        $stack4 = "jar";

        $stack5 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        $stack6 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        $stack8 = "tests";

        $stack9 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getClassifier()>();

        $stack10 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>($stack9);

        if $stack10 == 0 goto label2;

     label1:
        $stack7 = 1;

        goto label3;

     label2:
        $stack7 = 0;

     label3:
        return $stack7;
    }

    private static java.util.List lambda$new$1(java.lang.String)
    {
        java.util.ArrayList $stack1;
        java.lang.String k;

        k := @parameter0: java.lang.String;

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>(int)>(1);

        return $stack1;
    }

    private void lambda$new$0(org.apache.maven.project.MavenProject)
    {
        org.apache.maven.project.MavenProject project;
        java.lang.String $stack3, $stack4, $stack5, projectId;
        ReactorReader this;
        java.util.Map $stack7;
        org.apache.maven.ReactorReader $r0;

        this := @this: ReactorReader;

        project := @parameter0: org.apache.maven.project.MavenProject;

        $stack3 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getArtifactId()>();

        $stack5 = virtualinvoke project.<org.apache.maven.project.MavenProject: java.lang.String getVersion()>();

        projectId = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String key(java.lang.String,java.lang.String,java.lang.String)>($stack3, $stack4, $stack5);

        $r0 = (org.apache.maven.ReactorReader) this;

        $stack7 = $r0.<org.apache.maven.ReactorReader: java.util.Map projectsByGAV>;

        interfaceinvoke $stack7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(projectId, project);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $stack0;
        java.util.List $stack1;
        org.slf4j.Logger $stack2;

        <ReactorReader: java.lang.String HINT> = "reactor";

        $stack0 = newarray (java.lang.String)[10];

        $stack0[0] = "jar";

        $stack0[1] = "ejb-client";

        $stack0[2] = "war";

        $stack0[3] = "rar";

        $stack0[4] = "ejb3";

        $stack0[5] = "par";

        $stack0[6] = "sar";

        $stack0[7] = "wsr";

        $stack0[8] = "har";

        $stack0[9] = "app-client";

        $stack1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack0);

        <org.apache.maven.ReactorReader: java.util.Collection COMPILE_PHASE_TYPES> = $stack1;

        $stack2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/maven/ReactorReader;");

        <org.apache.maven.ReactorReader: org.slf4j.Logger LOGGER> = $stack2;

        return;
    }
}
