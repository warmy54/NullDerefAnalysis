public class ReflectanceInitializer extends java.lang.Object
{
    private static java.lang.ThreadLocal mat3x1;
    private static java.lang.ThreadLocal mat3x3;
    private static java.lang.ThreadLocal mat4x4;
    private org.bytedeco.javacv.GNImageAligner$Settings alignerSettings;
    private int smoothingSize;
    private double reflectanceMin;
    private org.bytedeco.javacv.CameraDevice cameraDevice;
    private org.bytedeco.javacv.ProjectorDevice projectorDevice;
    private org.bytedeco.opencv.opencv_core.IplImage[] projectorImages;
    static final boolean $assertionsDisabled;

    public void <init>(org.bytedeco.javacv.CameraDevice, org.bytedeco.javacv.ProjectorDevice, int, org.bytedeco.javacv.GNImageAligner$Settings)
    {
        ReflectanceInitializer this;
        org.bytedeco.javacv.CameraDevice cameraDevice;
        org.bytedeco.javacv.ProjectorDevice projectorDevice;
        int channels;
        org.bytedeco.javacv.GNImageAligner$Settings alignerSettings;
        org.bytedeco.javacv.ReflectanceInitializer $r0;

        this := @this: ReflectanceInitializer;

        cameraDevice := @parameter0: org.bytedeco.javacv.CameraDevice;

        projectorDevice := @parameter1: org.bytedeco.javacv.ProjectorDevice;

        channels := @parameter2: int;

        alignerSettings := @parameter3: org.bytedeco.javacv.GNImageAligner$Settings;

        $r0 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        specialinvoke $r0.<org.bytedeco.javacv.ReflectanceInitializer: void <init>(org.bytedeco.javacv.CameraDevice,org.bytedeco.javacv.ProjectorDevice,int,org.bytedeco.javacv.GNImageAligner$Settings,int,double)>(cameraDevice, projectorDevice, channels, alignerSettings, 51, 0.01);

        return;
    }

    public void <init>(org.bytedeco.javacv.CameraDevice, org.bytedeco.javacv.ProjectorDevice, int, org.bytedeco.javacv.GNImageAligner$Settings, int, double)
    {
        ReflectanceInitializer this;
        org.bytedeco.javacv.GNImageAligner$Settings alignerSettings;
        int smoothingSize, $stack11, channels, $stack22, $stack23, i;
        double reflectanceMin;
        org.bytedeco.javacv.CameraDevice cameraDevice;
        org.bytedeco.javacv.ProjectorDevice projectorDevice;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack9, $stack10, $stack12, $stack14, $stack20, $stack24;
        org.bytedeco.opencv.opencv_core.IplImage $stack13, $stack16, $stack21, $stack25;
        org.bytedeco.opencv.opencv_core.CvScalar $stack15;
        java.lang.ThreadLocal $stack17;
        java.lang.Object $stack18;
        org.bytedeco.opencv.opencv_core.CvMat i#2;
        org.bytedeco.javacv.ReflectanceInitializer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r13;
        org.bytedeco.opencv.opencv_core.CvArr $r9, $r11;
        org.bytedeco.javacv.ProjectiveDevice $r12;

        this := @this: ReflectanceInitializer;

        cameraDevice := @parameter0: org.bytedeco.javacv.CameraDevice;

        projectorDevice := @parameter1: org.bytedeco.javacv.ProjectorDevice;

        channels := @parameter2: int;

        alignerSettings := @parameter3: org.bytedeco.javacv.GNImageAligner$Settings;

        smoothingSize := @parameter4: int;

        reflectanceMin := @parameter5: double;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $r0.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.GNImageAligner$Settings alignerSettings> = alignerSettings;

        $r1 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $r1.<org.bytedeco.javacv.ReflectanceInitializer: int smoothingSize> = smoothingSize;

        $r2 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $r2.<org.bytedeco.javacv.ReflectanceInitializer: double reflectanceMin> = reflectanceMin;

        $r3 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $r3.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.CameraDevice cameraDevice> = cameraDevice;

        $r4 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $r4.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.ProjectorDevice projectorDevice> = projectorDevice;

        $stack9 = newarray (org.bytedeco.opencv.opencv_core.IplImage)[3];

        $r5 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $r5.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages> = $stack9;

        i = 0;

     label1:
        $r6 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack10 = $r6.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        $stack11 = lengthof $stack10;

        if i >= $stack11 goto label2;

        $r7 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack24 = $r7.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        $stack23 = projectorDevice.<org.bytedeco.javacv.ProjectorDevice: int imageWidth>;

        $stack22 = projectorDevice.<org.bytedeco.javacv.ProjectorDevice: int imageHeight>;

        $stack25 = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int)>($stack23, $stack22, 32, channels);

        $stack24[i] = $stack25;

        i = i + 1;

        goto label1;

     label2:
        $r8 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack12 = $r8.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        $stack13 = $stack12[0];

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) $stack13;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetZero(org.bytedeco.opencv.opencv_core.CvArr)>($r9);

        $r10 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack14 = $r10.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        $stack16 = $stack14[1];

        $stack15 = <org.bytedeco.opencv.opencv_core.CvScalar: org.bytedeco.opencv.opencv_core.CvScalar ONE>;

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) $stack16;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSet(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvScalar)>($r11, $stack15);

        $stack17 = <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat3x3>;

        $stack18 = virtualinvoke $stack17.<java.lang.ThreadLocal: java.lang.Object get()>();

        i#2 = (org.bytedeco.opencv.opencv_core.CvMat) $stack18;

        $r12 = (org.bytedeco.javacv.ProjectiveDevice) cameraDevice;

        virtualinvoke projectorDevice.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat getRectifyingHomography(org.bytedeco.javacv.ProjectiveDevice,org.bytedeco.opencv.opencv_core.CvMat)>($r12, i#2);

        $r13 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack20 = $r13.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        $stack21 = $stack20[2];

        staticinvoke <org.bytedeco.javacv.JavaCV: void fractalTriangleWave(org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.opencv.opencv_core.CvMat)>($stack21, i#2);

        return;
    }

    public org.bytedeco.opencv.opencv_core.IplImage[] getProjectorImages()
    {
        ReflectanceInitializer this;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack1;
        org.bytedeco.javacv.ReflectanceInitializer $r0;

        this := @this: ReflectanceInitializer;

        $r0 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack1 = $r0.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        return $stack1;
    }

    public org.bytedeco.opencv.opencv_core.IplImage initializeReflectance(org.bytedeco.opencv.opencv_core.IplImage[], org.bytedeco.opencv.opencv_core.IplImage, double[], double[])
    {
        org.bytedeco.opencv.opencv_core.IplImage[] cameraImages;
        org.bytedeco.opencv.opencv_core.IplImage $stack23, $stack25, $stack27, mask, float1, float2, reflectance;
        int w, h, channels, $stack31, $stack32, $stack36, $stack37, $stack41, $stack42, $stack49, $stack72, $stack73, $stack79, $stack80, $stack81, $stack85, $stack92, $stack94, $stack97, $stack105, $stack106, $stack107, $stack118, $stack119, $stack120, $stack126, $stack127, $stack128, i, j, $stack71, z;
        double[] roiPts, $stack45, $stack52, gainAmbientLight, $stack132;
        long $stack33;
        ReflectanceInitializer this;
        org.bytedeco.javacv.CameraDevice $stack34;
        byte $stack38, $stack96, $stack99, $stack104;
        org.bytedeco.opencv.opencv_core.CvPoint $stack39, $u0;
        org.bytedeco.opencv.opencv_core.CvScalar $stack40, $stack77, $stack78;
        java.lang.ThreadLocal $stack43, $stack50, $stack130;
        java.lang.Object $stack44, $stack51, $stack131;
        org.bytedeco.opencv.opencv_core.CvMat p, $stack48, invp;
        org.bytedeco.javacv.ProjectorDevice $stack47;
        double $stack55, $stack56, $stack59, $stack60, $stack63, $stack64, $stack74, $stack75, $stack76, $stack82, $stack83, $stack102, $stack103, $stack108, $stack109, $stack110, $stack135, $stack136, $stack139, $stack140, $stack143, $stack144, $stack84;
        java.nio.FloatBuffer fb1, fb2;
        java.nio.ByteBuffer mb;
        boolean $stack69, $stack70;
        int[] nPixels;
        float ra, r, $stack111;
        java.lang.AssertionError $u1, $u2;
        org.bytedeco.opencv.opencv_core.CvArr $r0, $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        org.bytedeco.javacv.ReflectanceInitializer $r1, $r5, $r8, $r14, $r20;

        this := @this: ReflectanceInitializer;

        cameraImages := @parameter0: org.bytedeco.opencv.opencv_core.IplImage[];

        reflectance := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        roiPts := @parameter2: double[];

        gainAmbientLight := @parameter3: double[];

        $stack23 = cameraImages[0];

        w = virtualinvoke $stack23.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        $stack25 = cameraImages[0];

        h = virtualinvoke $stack25.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

        $stack27 = cameraImages[0];

        channels = virtualinvoke $stack27.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        mask = staticinvoke <org.bytedeco.opencv.opencv_core.IplImage: org.bytedeco.opencv.opencv_core.IplImage create(int,int,int,int)>(w, h, 8, 1);

        $r0 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSetZero(org.bytedeco.opencv.opencv_core.CvArr)>($r0);

        $u0 = new org.bytedeco.opencv.opencv_core.CvPoint;

        $stack31 = lengthof roiPts;

        $stack32 = $stack31 / 2;

        $stack33 = (long) $stack32;

        specialinvoke $u0.<org.bytedeco.opencv.opencv_core.CvPoint: void <init>(long)>($stack33);

        $r1 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack34 = $r1.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.CameraDevice cameraDevice>;

        $stack36 = virtualinvoke $stack34.<org.bytedeco.javacv.CameraDevice: int getMapsPyramidLevel()>();

        $stack37 = 16 - $stack36;

        $stack38 = (byte) $stack37;

        $stack39 = virtualinvoke $u0.<org.bytedeco.opencv.opencv_core.CvPoint: org.bytedeco.opencv.opencv_core.CvPoint put(byte,double[])>($stack38, roiPts);

        $stack40 = <org.bytedeco.opencv.opencv_core.CvScalar: org.bytedeco.opencv.opencv_core.CvScalar WHITE>;

        $r2 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvFillConvexPoly(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvPoint,int,org.bytedeco.opencv.opencv_core.CvScalar,int,int)>($r2, $stack39, 4, $stack40, 8, 16);

        float1 = cameraImages[0];

        float2 = cameraImages[1];

        $r3 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        $r4 = (org.bytedeco.opencv.opencv_core.CvArr) reflectance;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvCopy(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r3, $r4);

        $r5 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack41 = $r5.<org.bytedeco.javacv.ReflectanceInitializer: int smoothingSize>;

        $r6 = (org.bytedeco.opencv.opencv_core.CvArr) float1;

        $r7 = (org.bytedeco.opencv.opencv_core.CvArr) float1;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvSmooth(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int,int,int,double,double)>($r6, $r7, 2, $stack41, 0, 0.0, 0.0);

        $r8 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack42 = $r8.<org.bytedeco.javacv.ReflectanceInitializer: int smoothingSize>;

        $r9 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        $r10 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvSmooth(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,int,int,int,double,double)>($r9, $r10, 2, $stack42, 0, 0.0, 0.0);

        $r11 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        $r12 = (org.bytedeco.opencv.opencv_core.CvArr) float1;

        $r13 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSub(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r11, $r12, $r13, null);

        $stack43 = <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat3x1>;

        $stack44 = virtualinvoke $stack43.<java.lang.ThreadLocal: java.lang.Object get()>();

        p = (org.bytedeco.opencv.opencv_core.CvMat) $stack44;

        $stack45 = newarray (double)[3];

        $stack45[0] = 1.0;

        $stack45[1] = 1.0;

        $stack45[2] = 1.0;

        virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack45);

        $r14 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack47 = $r14.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.ProjectorDevice projectorDevice>;

        $stack48 = $stack47.<org.bytedeco.javacv.ProjectorDevice: org.bytedeco.opencv.opencv_core.CvMat colorMixingMatrix>;

        $r15 = (org.bytedeco.opencv.opencv_core.CvArr) $stack48;

        $r16 = (org.bytedeco.opencv.opencv_core.CvArr) p;

        $r17 = (org.bytedeco.opencv.opencv_core.CvArr) p;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvMatMul(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r15, $r16, $r17);

        $stack49 = virtualinvoke float2.<org.bytedeco.opencv.opencv_core.IplImage: int nChannels()>();

        if $stack49 != 4 goto label01;

        $stack130 = <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat4x4>;

        $stack131 = virtualinvoke $stack130.<java.lang.ThreadLocal: java.lang.Object get()>();

        invp = (org.bytedeco.opencv.opencv_core.CvMat) $stack131;

        $stack132 = newarray (double)[16];

        $stack135 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack136 = 1.0 / $stack135;

        $stack132[0] = $stack136;

        $stack132[1] = 0.0;

        $stack132[2] = 0.0;

        $stack132[3] = 0.0;

        $stack132[4] = 0.0;

        $stack139 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack140 = 1.0 / $stack139;

        $stack132[5] = $stack140;

        $stack132[6] = 0.0;

        $stack132[7] = 0.0;

        $stack132[8] = 0.0;

        $stack132[9] = 0.0;

        $stack143 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack144 = 1.0 / $stack143;

        $stack132[10] = $stack144;

        $stack132[11] = 0.0;

        $stack132[12] = 0.0;

        $stack132[13] = 0.0;

        $stack132[14] = 0.0;

        $stack132[15] = 1.0;

        virtualinvoke invp.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack132);

        goto label02;

     label01:
        $stack50 = <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat3x3>;

        $stack51 = virtualinvoke $stack50.<java.lang.ThreadLocal: java.lang.Object get()>();

        invp = (org.bytedeco.opencv.opencv_core.CvMat) $stack51;

        $stack52 = newarray (double)[9];

        $stack55 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack56 = 1.0 / $stack55;

        $stack52[0] = $stack56;

        $stack52[1] = 0.0;

        $stack52[2] = 0.0;

        $stack52[3] = 0.0;

        $stack59 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack60 = 1.0 / $stack59;

        $stack52[4] = $stack60;

        $stack52[5] = 0.0;

        $stack52[6] = 0.0;

        $stack52[7] = 0.0;

        $stack63 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack64 = 1.0 / $stack63;

        $stack52[8] = $stack64;

        virtualinvoke invp.<org.bytedeco.opencv.opencv_core.CvMat: org.bytedeco.opencv.opencv_core.CvMat put(double[])>($stack52);

     label02:
        $r18 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        $r19 = (org.bytedeco.opencv.opencv_core.CvArr) float2;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvTransform(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvMat,org.bytedeco.opencv.opencv_core.CvMat)>($r18, $r19, invp, null);

        fb1 = virtualinvoke float1.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.FloatBuffer getFloatBuffer()>();

        fb2 = virtualinvoke float2.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.FloatBuffer getFloatBuffer()>();

        mb = virtualinvoke mask.<org.bytedeco.opencv.opencv_core.IplImage: java.nio.ByteBuffer getByteBuffer()>();

        $stack69 = <org.bytedeco.javacv.ReflectanceInitializer: boolean $assertionsDisabled>;

        if $stack69 != 0 goto label03;

        $stack126 = virtualinvoke fb1.<java.nio.FloatBuffer: int capacity()>();

        $stack127 = virtualinvoke fb2.<java.nio.FloatBuffer: int capacity()>();

        $stack128 = $stack127 / 3;

        if $stack126 == $stack128 goto label03;

        $u1 = new java.lang.AssertionError;

        specialinvoke $u1.<java.lang.AssertionError: void <init>()>();

        throw $u1;

     label03:
        $stack70 = <org.bytedeco.javacv.ReflectanceInitializer: boolean $assertionsDisabled>;

        if $stack70 != 0 goto label04;

        $stack118 = virtualinvoke fb1.<java.nio.FloatBuffer: int capacity()>();

        $stack119 = virtualinvoke mb.<java.nio.ByteBuffer: int capacity()>();

        $stack120 = $stack119 / 3;

        if $stack118 == $stack120 goto label04;

        $u2 = new java.lang.AssertionError;

        specialinvoke $u2.<java.lang.AssertionError: void <init>()>();

        throw $u2;

     label04:
        nPixels = newarray (int)[channels];

        i = 0;

        j = 0;

     label05:
        $stack71 = virtualinvoke fb1.<java.nio.FloatBuffer: int capacity()>();

        if j >= $stack71 goto label11;

        z = 0;

     label06:
        if z >= channels goto label10;

        $stack92 = j + z;

        ra = virtualinvoke fb1.<java.nio.FloatBuffer: float get(int)>($stack92);

        $stack94 = j + z;

        r = virtualinvoke fb2.<java.nio.FloatBuffer: float get(int)>($stack94);

        $stack96 = r cmpl 0.0F;

        if $stack96 != 0 goto label07;

        $stack111 = 0.0F;

        goto label08;

     label07:
        $stack111 = ra / r;

     label08:
        $stack97 = j + z;

        virtualinvoke fb1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>($stack97, $stack111);

        $stack99 = virtualinvoke mb.<java.nio.ByteBuffer: byte get(int)>(i);

        if $stack99 == 0 goto label09;

        $stack103 = (double) r;

        $r20 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack102 = $r20.<org.bytedeco.javacv.ReflectanceInitializer: double reflectanceMin>;

        $stack104 = $stack103 cmpl $stack102;

        if $stack104 <= 0 goto label09;

        $stack105 = nPixels[z];

        $stack106 = $stack105 + 1;

        nPixels[z] = $stack106;

        $stack107 = z + 1;

        $stack109 = gainAmbientLight[$stack107];

        $stack108 = (double) $stack111;

        $stack110 = $stack109 + $stack108;

        gainAmbientLight[$stack107] = $stack110;

     label09:
        z = z + 1;

        goto label06;

     label10:
        i = i + 1;

        j = j + channels;

        goto label05;

     label11:
        gainAmbientLight[0] = 1.0;

        i = 0;

     label12:
        $stack72 = lengthof gainAmbientLight;

        $stack73 = $stack72 - 1;

        if i >= $stack73 goto label15;

        $stack85 = i + 1;

        $stack79 = nPixels[i];

        if $stack79 != 0 goto label13;

        $stack84 = 0.0;

        goto label14;

     label13:
        $stack80 = i + 1;

        $stack83 = gainAmbientLight[$stack80];

        $stack81 = nPixels[i];

        $stack82 = (double) $stack81;

        $stack84 = $stack83 / $stack82;

     label14:
        gainAmbientLight[$stack85] = $stack84;

        i = i + 1;

        goto label12;

     label15:
        $stack74 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(0);

        $stack75 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(1);

        $stack76 = virtualinvoke p.<org.bytedeco.opencv.opencv_core.CvMat: double get(int)>(2);

        $stack77 = staticinvoke <org.bytedeco.opencv.global.opencv_core: org.bytedeco.opencv.opencv_core.CvScalar cvScalar(double,double,double,double)>($stack74, $stack75, $stack76, 0.0);

        $r21 = (org.bytedeco.opencv.opencv_core.CvArr) float1;

        $r22 = (org.bytedeco.opencv.opencv_core.CvArr) float1;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvAddS(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvScalar,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r21, $stack77, $r22, null);

        $r23 = (org.bytedeco.opencv.opencv_core.CvArr) reflectance;

        $r24 = (org.bytedeco.opencv.opencv_core.CvArr) float1;

        $r25 = (org.bytedeco.opencv.opencv_core.CvArr) reflectance;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvDiv(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,double)>($r23, $r24, $r25, 1.0);

        $r26 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        $r27 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvNot(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr)>($r26, $r27);

        $r28 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        $r29 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        staticinvoke <org.bytedeco.opencv.global.opencv_imgproc: void cvErode(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.IplConvKernel,int)>($r28, $r29, null, 15);

        $stack78 = <org.bytedeco.opencv.opencv_core.CvScalar: org.bytedeco.opencv.opencv_core.CvScalar ZERO>;

        $r30 = (org.bytedeco.opencv.opencv_core.CvArr) reflectance;

        $r31 = (org.bytedeco.opencv.opencv_core.CvArr) mask;

        staticinvoke <org.bytedeco.opencv.global.opencv_core: void cvSet(org.bytedeco.opencv.opencv_core.CvArr,org.bytedeco.opencv.opencv_core.CvScalar,org.bytedeco.opencv.opencv_core.CvArr)>($r30, $stack78, $r31);

        return reflectance;
    }

    public org.bytedeco.opencv.opencv_core.CvMat initializePlaneParameters(org.bytedeco.opencv.opencv_core.IplImage, org.bytedeco.opencv.opencv_core.IplImage, double[], double[], double[])
    {
        double[] referencePoints, gainAmbientLight, roiPts, delta;
        ReflectanceInitializer this;
        org.bytedeco.javacv.ProjectorDevice $stack17;
        org.bytedeco.javacv.CameraDevice $stack18;
        org.bytedeco.opencv.opencv_core.IplImage[] $stack19;
        org.bytedeco.javacv.GNImageAligner$Settings $stack20, $stack28;
        int $stack21, $stack24, $stack25, gainAmbientLightStart, gainAmbientLightEnd, $stack29, $stack30, $stack60, i, iterations;
        org.bytedeco.opencv.opencv_core.IplImage $stack22, reflectance, cameraImage;
        long iterationsStartTime, $stack38, $stack39;
        org.bytedeco.javacv.ImageTransformer$Parameters $stack32, $r6;
        java.lang.Class $stack33;
        java.lang.String $stack34, $stack47;
        java.util.logging.Logger $stack35;
        java.lang.StringBuilder $stack37, $stack40, $stack41, $stack42, $stack43, $stack46, $u2;
        double $stack44, $stack61;
        float $stack45;
        org.bytedeco.opencv.opencv_core.CvMat $stack48;
        org.bytedeco.javacv.ProCamTransformer$Parameters parameters;
        boolean converged;
        org.bytedeco.javacv.ProCamTransformer $u0;
        org.bytedeco.javacv.GNImageAligner $u1;
        org.bytedeco.javacv.ReflectanceInitializer $r0, $r1, $r2, $r3, $r4;
        org.bytedeco.javacv.ImageTransformer $r5;
        org.bytedeco.javacv.ImageAligner $r7, $r8, $r9;

        this := @this: ReflectanceInitializer;

        reflectance := @parameter0: org.bytedeco.opencv.opencv_core.IplImage;

        cameraImage := @parameter1: org.bytedeco.opencv.opencv_core.IplImage;

        referencePoints := @parameter2: double[];

        roiPts := @parameter3: double[];

        gainAmbientLight := @parameter4: double[];

        $u0 = new org.bytedeco.javacv.ProCamTransformer;

        $r0 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack18 = $r0.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.CameraDevice cameraDevice>;

        $r1 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack17 = $r1.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.ProjectorDevice projectorDevice>;

        specialinvoke $u0.<org.bytedeco.javacv.ProCamTransformer: void <init>(double[],org.bytedeco.javacv.CameraDevice,org.bytedeco.javacv.ProjectorDevice,org.bytedeco.opencv.opencv_core.CvMat)>(referencePoints, $stack18, $stack17, null);

        $r2 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack19 = $r2.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.opencv.opencv_core.IplImage[] projectorImages>;

        $stack22 = $stack19[2];

        $r3 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack20 = $r3.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.GNImageAligner$Settings alignerSettings>;

        $stack21 = $stack20.<org.bytedeco.javacv.GNImageAligner$Settings: int pyramidLevelMax>;

        virtualinvoke $u0.<org.bytedeco.javacv.ProCamTransformer: void setProjectorImage(org.bytedeco.opencv.opencv_core.IplImage,int,int)>($stack22, 0, $stack21);

        parameters = virtualinvoke $u0.<org.bytedeco.javacv.ProCamTransformer: org.bytedeco.javacv.ProCamTransformer$Parameters createParameters()>();

        $stack24 = virtualinvoke parameters.<org.bytedeco.javacv.ProCamTransformer$Parameters: int size()>();

        $stack25 = lengthof gainAmbientLight;

        gainAmbientLightStart = $stack24 - $stack25;

        gainAmbientLightEnd = virtualinvoke parameters.<org.bytedeco.javacv.ProCamTransformer$Parameters: int size()>();

        i = gainAmbientLightStart;

     label1:
        if i >= gainAmbientLightEnd goto label2;

        $stack60 = i - gainAmbientLightStart;

        $stack61 = gainAmbientLight[$stack60];

        virtualinvoke parameters.<org.bytedeco.javacv.ProCamTransformer$Parameters: void set(int,double)>(i, $stack61);

        i = i + 1;

        goto label1;

     label2:
        $u1 = new org.bytedeco.javacv.GNImageAligner;

        $r4 = (org.bytedeco.javacv.ReflectanceInitializer) this;

        $stack28 = $r4.<org.bytedeco.javacv.ReflectanceInitializer: org.bytedeco.javacv.GNImageAligner$Settings alignerSettings>;

        $r5 = (org.bytedeco.javacv.ImageTransformer) $u0;

        $r6 = (org.bytedeco.javacv.ImageTransformer$Parameters) parameters;

        specialinvoke $u1.<org.bytedeco.javacv.GNImageAligner: void <init>(org.bytedeco.javacv.ImageTransformer,org.bytedeco.javacv.ImageTransformer$Parameters,org.bytedeco.opencv.opencv_core.IplImage,double[],org.bytedeco.opencv.opencv_core.IplImage,org.bytedeco.javacv.GNImageAligner$Settings)>($r5, $r6, reflectance, roiPts, cameraImage, $stack28);

        $stack29 = virtualinvoke parameters.<org.bytedeco.javacv.ProCamTransformer$Parameters: int size()>();

        $stack30 = $stack29 + 1;

        delta = newarray (double)[$stack30];

        converged = 0;

        iterationsStartTime = staticinvoke <java.lang.System: long currentTimeMillis()>();

        iterations = 0;

     label3:
        if converged != 0 goto label4;

        if iterations >= 100 goto label4;

        $r7 = (org.bytedeco.javacv.ImageAligner) $u1;

        converged = interfaceinvoke $r7.<org.bytedeco.javacv.ImageAligner: boolean iterate(double[])>(delta);

        iterations = iterations + 1;

        goto label3;

     label4:
        $r8 = (org.bytedeco.javacv.ImageAligner) $u1;

        $stack32 = interfaceinvoke $r8.<org.bytedeco.javacv.ImageAligner: org.bytedeco.javacv.ImageTransformer$Parameters getParameters()>();

        parameters = (org.bytedeco.javacv.ProCamTransformer$Parameters) $stack32;

        $stack33 = class "Lorg/bytedeco/javacv/ReflectanceInitializer;";

        $stack34 = virtualinvoke $stack33.<java.lang.Class: java.lang.String getName()>();

        $stack35 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($stack34);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iteratingTime = ");

        $stack38 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $stack39 = $stack38 - iterationsStartTime;

        $stack40 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack39);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  iterations = ");

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(iterations);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  objectiveRMSE = ");

        $r9 = (org.bytedeco.javacv.ImageAligner) $u1;

        $stack44 = interfaceinvoke $r9.<org.bytedeco.javacv.ImageAligner: double getRMSE()>();

        $stack45 = (float) $stack44;

        $stack46 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($stack45);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack35.<java.util.logging.Logger: void info(java.lang.String)>($stack47);

        $stack48 = virtualinvoke parameters.<org.bytedeco.javacv.ProCamTransformer$Parameters: org.bytedeco.opencv.opencv_core.CvMat getN0()>();

        return $stack48;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack5;
        java.lang.ThreadLocal $stack2, $stack3, $stack4;

        $stack0 = class "Lorg/bytedeco/javacv/ReflectanceInitializer;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        <org.bytedeco.javacv.ReflectanceInitializer: boolean $assertionsDisabled> = $stack5;

        $stack2 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 1);

        <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat3x1> = $stack2;

        $stack3 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(3, 3);

        <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat3x3> = $stack3;

        $stack4 = staticinvoke <org.bytedeco.opencv.opencv_core.CvMat: java.lang.ThreadLocal createThreadLocal(int,int)>(4, 4);

        <org.bytedeco.javacv.ReflectanceInitializer: java.lang.ThreadLocal mat4x4> = $stack4;

        return;
    }
}
