public class RemoteSnapshotMetadataTest extends java.lang.Object
{
    private java.util.Locale defaultLocale;

    public void <init>()
    {
        RemoteSnapshotMetadataTest this;

        this := @this: RemoteSnapshotMetadataTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setLocaleToUseBuddhistCalendar()
    {
        RemoteSnapshotMetadataTest this;
        java.util.Locale $stack1, $u0;
        org.apache.maven.repository.internal.RemoteSnapshotMetadataTest $r0;

        this := @this: RemoteSnapshotMetadataTest;

        $stack1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r0 = (org.apache.maven.repository.internal.RemoteSnapshotMetadataTest) this;

        $r0.<org.apache.maven.repository.internal.RemoteSnapshotMetadataTest: java.util.Locale defaultLocale> = $stack1;

        $u0 = new java.util.Locale;

        specialinvoke $u0.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("th", "TH");

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($u0);

        return;
    }

    public void restoreLocale()
    {
        RemoteSnapshotMetadataTest this;
        java.util.Locale $stack1;
        org.apache.maven.repository.internal.RemoteSnapshotMetadataTest $r0;

        this := @this: RemoteSnapshotMetadataTest;

        $r0 = (org.apache.maven.repository.internal.RemoteSnapshotMetadataTest) this;

        $stack1 = $r0.<org.apache.maven.repository.internal.RemoteSnapshotMetadataTest: java.util.Locale defaultLocale>;

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack1);

        return;
    }

    static java.lang.String gregorianDate()
    {
        java.text.SimpleDateFormat $stack1;
        java.util.GregorianCalendar $stack2;
        java.util.TimeZone $stack3;
        java.util.Date $stack4;
        java.lang.String $stack5;

        $stack1 = new java.text.SimpleDateFormat;

        specialinvoke $stack1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyyMMdd");

        $stack2 = new java.util.GregorianCalendar;

        specialinvoke $stack2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $stack1.<java.text.SimpleDateFormat: void setCalendar(java.util.Calendar)>($stack2);

        $stack3 = <org.apache.maven.repository.internal.RemoteSnapshotMetadata: java.util.TimeZone DEFAULT_SNAPSHOT_TIME_ZONE>;

        virtualinvoke $stack1.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($stack3);

        $stack4 = new java.util.Date;

        specialinvoke $stack4.<java.util.Date: void <init>()>();

        $stack5 = virtualinvoke $stack1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($stack4);

        return $stack5;
    }

    public void gregorianCalendarIsUsed()
    {
        java.lang.String dateBefore, dateAfter, ts, datePart, $stack28;
        org.apache.maven.artifact.repository.metadata.Metadata $stack14, $u3;
        org.apache.maven.artifact.repository.metadata.Versioning $stack15;
        org.apache.maven.artifact.repository.metadata.Snapshot $stack16;
        java.lang.String[] $stack20;
        java.util.List $stack21;
        boolean $stack22;
        java.lang.StringBuilder $stack24, $stack25, $stack26, $stack27, $u5;
        RemoteSnapshotMetadataTest this;
        org.eclipse.aether.artifact.DefaultArtifact $u0;
        java.util.Date $u1;
        org.apache.maven.repository.internal.RemoteSnapshotMetadata $u2;
        java.util.HashSet $u4;
        org.eclipse.aether.artifact.Artifact $r0;

        this := @this: RemoteSnapshotMetadataTest;

        dateBefore = staticinvoke <org.apache.maven.repository.internal.RemoteSnapshotMetadataTest: java.lang.String gregorianDate()>();

        $u2 = new org.apache.maven.repository.internal.RemoteSnapshotMetadata;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("a:b:1-SNAPSHOT");

        $u1 = new java.util.Date;

        specialinvoke $u1.<java.util.Date: void <init>()>();

        $r0 = (org.eclipse.aether.artifact.Artifact) $u0;

        specialinvoke $u2.<org.apache.maven.repository.internal.RemoteSnapshotMetadata: void <init>(org.eclipse.aether.artifact.Artifact,boolean,java.util.Date)>($r0, 0, $u1);

        $u3 = new org.apache.maven.artifact.repository.metadata.Metadata;

        specialinvoke $u3.<org.apache.maven.artifact.repository.metadata.Metadata: void <init>()>();

        virtualinvoke $u2.<org.apache.maven.repository.internal.RemoteSnapshotMetadata: void merge(org.apache.maven.artifact.repository.metadata.Metadata)>($u3);

        dateAfter = staticinvoke <org.apache.maven.repository.internal.RemoteSnapshotMetadataTest: java.lang.String gregorianDate()>();

        $stack14 = $u2.<org.apache.maven.repository.internal.RemoteSnapshotMetadata: org.apache.maven.artifact.repository.metadata.Metadata metadata>;

        $stack15 = virtualinvoke $stack14.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

        $stack16 = virtualinvoke $stack15.<org.apache.maven.artifact.repository.metadata.Versioning: org.apache.maven.artifact.repository.metadata.Snapshot getSnapshot()>();

        ts = virtualinvoke $stack16.<org.apache.maven.artifact.repository.metadata.Snapshot: java.lang.String getTimestamp()>();

        datePart = virtualinvoke ts.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\..*", "");

        $u4 = new java.util.HashSet;

        $stack20 = newarray (java.lang.String)[2];

        $stack20[0] = dateBefore;

        $stack20[1] = dateAfter;

        $stack21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack20);

        specialinvoke $u4.<java.util.HashSet: void <init>(java.util.Collection)>($stack21);

        $stack22 = interfaceinvoke $u4.<java.util.Set: boolean contains(java.lang.Object)>(datePart);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(datePart);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to be in ");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u4);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack22, $stack28);

        return;
    }
}
