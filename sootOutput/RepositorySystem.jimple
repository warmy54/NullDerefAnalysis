public interface  RepositorySystem extends java.lang.Object
{
    public static final java.lang.String DEFAULT_LOCAL_REPO_ID;
    public static final java.lang.String userHome;
    public static final java.io.File userMavenConfigurationHome;
    public static final java.io.File defaultUserLocalRepository;
    public static final java.lang.String DEFAULT_REMOTE_REPO_ID;
    public static final java.lang.String DEFAULT_REMOTE_REPO_URL;

    public abstract org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

    public abstract org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

    public abstract org.apache.maven.artifact.Artifact createProjectArtifact(java.lang.String, java.lang.String, java.lang.String);

    public abstract org.apache.maven.artifact.Artifact createArtifactWithClassifier(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

    public abstract org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin);

    public abstract org.apache.maven.artifact.Artifact createDependencyArtifact(org.apache.maven.model.Dependency);

    public abstract org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository) throws org.apache.maven.artifact.InvalidRepositoryException;

    public abstract org.apache.maven.artifact.repository.ArtifactRepository createDefaultRemoteRepository() throws org.apache.maven.artifact.InvalidRepositoryException;

    public abstract org.apache.maven.artifact.repository.ArtifactRepository createDefaultLocalRepository() throws org.apache.maven.artifact.InvalidRepositoryException;

    public abstract org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(java.io.File) throws org.apache.maven.artifact.InvalidRepositoryException;

    public abstract org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String, java.lang.String, org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy);

    public abstract java.util.List getEffectiveRepositories(java.util.List);

    public abstract org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository, java.util.List);

    public abstract void injectMirror(java.util.List, java.util.List);

    public abstract void injectProxy(java.util.List, java.util.List);

    public abstract void injectAuthentication(java.util.List, java.util.List);

    public abstract void injectMirror(org.eclipse.aether.RepositorySystemSession, java.util.List);

    public abstract void injectProxy(org.eclipse.aether.RepositorySystemSession, java.util.List);

    public abstract void injectAuthentication(org.eclipse.aether.RepositorySystemSession, java.util.List);

    public abstract org.apache.maven.artifact.resolver.ArtifactResolutionResult resolve(org.apache.maven.artifact.resolver.ArtifactResolutionRequest);

    public abstract void publish(org.apache.maven.artifact.repository.ArtifactRepository, java.io.File, java.lang.String, org.apache.maven.repository.ArtifactTransferListener) throws org.apache.maven.repository.ArtifactTransferFailedException;

    public abstract void retrieve(org.apache.maven.artifact.repository.ArtifactRepository, java.io.File, java.lang.String, org.apache.maven.repository.ArtifactTransferListener) throws org.apache.maven.repository.ArtifactTransferFailedException, org.apache.maven.repository.ArtifactDoesNotExistException;

    static void <clinit>()
    {
        java.lang.String $stack0, $stack2;
        java.io.File $stack1, $stack3, $stack4;

        <RepositorySystem: java.lang.String DEFAULT_REMOTE_REPO_URL> = "https://repo.maven.apache.org/maven2";

        <RepositorySystem: java.lang.String DEFAULT_REMOTE_REPO_ID> = "central";

        <RepositorySystem: java.lang.String DEFAULT_LOCAL_REPO_ID> = "local";

        $stack0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        <org.apache.maven.repository.RepositorySystem: java.lang.String userHome> = $stack0;

        $stack1 = new java.io.File;

        $stack2 = <org.apache.maven.repository.RepositorySystem: java.lang.String userHome>;

        specialinvoke $stack1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack2, ".m2");

        <org.apache.maven.repository.RepositorySystem: java.io.File userMavenConfigurationHome> = $stack1;

        $stack3 = new java.io.File;

        $stack4 = <org.apache.maven.repository.RepositorySystem: java.io.File userMavenConfigurationHome>;

        specialinvoke $stack3.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack4, "repository");

        <org.apache.maven.repository.RepositorySystem: java.io.File defaultUserLocalRepository> = $stack3;

        return;
    }
}
