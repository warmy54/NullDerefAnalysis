public class RepositorySystemTest extends org.apache.maven.repository.internal.AbstractRepositoryTestCase
{

    public void <init>()
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        specialinvoke this.<org.apache.maven.repository.internal.AbstractRepositoryTestCase: void <init>()>();

        return;
    }

    public void testResolveVersionRange() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }

    public void testResolveVersion() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }

    public void testReadArtifactDescriptor() throws java.lang.Exception
    {
        org.eclipse.aether.repository.RemoteRepository $stack8;
        RepositorySystemTest this;
        org.eclipse.aether.RepositorySystemSession $stack10;
        org.eclipse.aether.RepositorySystem $stack11;
        org.eclipse.aether.resolution.ArtifactDescriptorResult result;
        java.util.List deps;
        int $stack15;
        java.lang.Object $stack16, $stack18;
        org.eclipse.aether.graph.Dependency $stack17, $stack19;
        org.eclipse.aether.artifact.DefaultArtifact $u0;
        org.eclipse.aether.resolution.ArtifactDescriptorRequest $u1;
        org.eclipse.aether.artifact.Artifact $r0;
        org.apache.maven.repository.internal.RepositorySystemTest $r1, $r2, $r3;

        this := @this: RepositorySystemTest;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:extension:classifier:1.0");

        $u1 = new org.eclipse.aether.resolution.ArtifactDescriptorRequest;

        specialinvoke $u1.<org.eclipse.aether.resolution.ArtifactDescriptorRequest: void <init>()>();

        $r0 = (org.eclipse.aether.artifact.Artifact) $u0;

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactDescriptorRequest: org.eclipse.aether.resolution.ArtifactDescriptorRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r0);

        $stack8 = staticinvoke <org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactDescriptorRequest: org.eclipse.aether.resolution.ArtifactDescriptorRequest addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack8);

        $r1 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack11 = $r1.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystem system>;

        $r2 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack10 = $r2.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystemSession session>;

        result = interfaceinvoke $stack11.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.resolution.ArtifactDescriptorResult readArtifactDescriptor(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactDescriptorRequest)>($stack10, $u1);

        deps = virtualinvoke result.<org.eclipse.aether.resolution.ArtifactDescriptorResult: java.util.List getDependencies()>();

        $stack15 = interfaceinvoke deps.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack15);

        $stack16 = interfaceinvoke deps.<java.util.List: java.lang.Object get(int)>(0);

        $stack17 = (org.eclipse.aether.graph.Dependency) $stack16;

        $stack18 = interfaceinvoke deps.<java.util.List: java.lang.Object get(int)>(1);

        $stack19 = (org.eclipse.aether.graph.Dependency) $stack18;

        $r3 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r3.<org.apache.maven.repository.internal.RepositorySystemTest: void checkUtSimpleArtifactDependencies(org.eclipse.aether.graph.Dependency,org.eclipse.aether.graph.Dependency)>($stack17, $stack19);

        return;
    }

    private void checkUtSimpleArtifactDependencies(org.eclipse.aether.graph.Dependency, org.eclipse.aether.graph.Dependency)
    {
        org.eclipse.aether.graph.Dependency dep1, dep2;
        java.lang.String $stack5, $stack12, $stack14, $stack16, $stack18, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack37, $stack44, $stack46, $stack48, $stack50, $stack54, $stack56, $stack58, $stack60, $stack62, $stack64;
        boolean $stack6, $stack20, $stack38, $stack52;
        java.util.Collection $stack8, $stack40;
        int $stack9, $stack35, $stack41, $stack67;
        java.io.File $stack19, $stack51;
        java.util.Map $stack34, $stack66;
        RepositorySystemTest this;
        org.eclipse.aether.artifact.Artifact depArtifact;

        this := @this: RepositorySystemTest;

        dep1 := @parameter0: org.eclipse.aether.graph.Dependency;

        dep2 := @parameter1: org.eclipse.aether.graph.Dependency;

        $stack5 = virtualinvoke dep1.<org.eclipse.aether.graph.Dependency: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("compile", $stack5);

        $stack6 = virtualinvoke dep1.<org.eclipse.aether.graph.Dependency: boolean isOptional()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack6);

        $stack8 = virtualinvoke dep1.<org.eclipse.aether.graph.Dependency: java.util.Collection getExclusions()>();

        $stack9 = interfaceinvoke $stack8.<java.util.Collection: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack9);

        depArtifact = virtualinvoke dep1.<org.eclipse.aether.graph.Dependency: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack12 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ut.simple", $stack12);

        $stack14 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("dependency", $stack14);

        $stack16 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack16);

        $stack18 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getBaseVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack18);

        $stack19 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack19);

        $stack20 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: boolean isSnapshot()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack20);

        $stack22 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getClassifier()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack22);

        $stack24 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar", $stack24);

        $stack26 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("language", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("java", $stack26);

        $stack28 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("type", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar", $stack28);

        $stack30 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("constitutesBuildPath", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack30);

        $stack32 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("includesDependencies", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("false", $stack32);

        $stack34 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.util.Map getProperties()>();

        $stack35 = interfaceinvoke $stack34.<java.util.Map: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack35);

        $stack37 = virtualinvoke dep2.<org.eclipse.aether.graph.Dependency: java.lang.String getScope()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("compile", $stack37);

        $stack38 = virtualinvoke dep2.<org.eclipse.aether.graph.Dependency: boolean isOptional()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack38);

        $stack40 = virtualinvoke dep2.<org.eclipse.aether.graph.Dependency: java.util.Collection getExclusions()>();

        $stack41 = interfaceinvoke $stack40.<java.util.Collection: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(0, $stack41);

        depArtifact = virtualinvoke dep2.<org.eclipse.aether.graph.Dependency: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack44 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("ut.simple", $stack44);

        $stack46 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("dependency", $stack46);

        $stack48 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack48);

        $stack50 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getBaseVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("1.0", $stack50);

        $stack51 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack51);

        $stack52 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: boolean isSnapshot()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack52);

        $stack54 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getClassifier()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("sources", $stack54);

        $stack56 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar", $stack56);

        $stack58 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("language", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("java", $stack58);

        $stack60 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("type", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("jar", $stack60);

        $stack62 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("constitutesBuildPath", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack62);

        $stack64 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("includesDependencies", null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("false", $stack64);

        $stack66 = interfaceinvoke depArtifact.<org.eclipse.aether.artifact.Artifact: java.util.Map getProperties()>();

        $stack67 = interfaceinvoke $stack66.<java.util.Map: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(4, $stack67);

        return;
    }

    public void testCollectDependencies() throws java.lang.Exception
    {
        org.eclipse.aether.repository.RemoteRepository $stack9;
        RepositorySystemTest this;
        org.eclipse.aether.RepositorySystemSession $stack11;
        org.eclipse.aether.RepositorySystem $stack12;
        org.eclipse.aether.collection.CollectResult collectResult;
        org.eclipse.aether.graph.DependencyNode $stack14, $stack19, $stack22;
        java.util.List nodes;
        int $stack17;
        java.lang.Object $stack18, $stack21;
        org.eclipse.aether.graph.Dependency $stack20, $stack23, $u2;
        org.eclipse.aether.artifact.DefaultArtifact $u0;
        org.eclipse.aether.collection.CollectRequest $u1;
        org.eclipse.aether.artifact.Artifact $r0;
        org.apache.maven.repository.internal.RepositorySystemTest $r1, $r2, $r3;

        this := @this: RepositorySystemTest;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:extension:classifier:1.0");

        $u1 = new org.eclipse.aether.collection.CollectRequest;

        specialinvoke $u1.<org.eclipse.aether.collection.CollectRequest: void <init>()>();

        $u2 = new org.eclipse.aether.graph.Dependency;

        $r0 = (org.eclipse.aether.artifact.Artifact) $u0;

        specialinvoke $u2.<org.eclipse.aether.graph.Dependency: void <init>(org.eclipse.aether.artifact.Artifact,java.lang.String)>($r0, null);

        virtualinvoke $u1.<org.eclipse.aether.collection.CollectRequest: org.eclipse.aether.collection.CollectRequest setRoot(org.eclipse.aether.graph.Dependency)>($u2);

        $stack9 = staticinvoke <org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        virtualinvoke $u1.<org.eclipse.aether.collection.CollectRequest: org.eclipse.aether.collection.CollectRequest addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack9);

        $r1 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack12 = $r1.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystem system>;

        $r2 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack11 = $r2.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystemSession session>;

        collectResult = interfaceinvoke $stack12.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.collection.CollectResult collectDependencies(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.collection.CollectRequest)>($stack11, $u1);

        $stack14 = virtualinvoke collectResult.<org.eclipse.aether.collection.CollectResult: org.eclipse.aether.graph.DependencyNode getRoot()>();

        nodes = interfaceinvoke $stack14.<org.eclipse.aether.graph.DependencyNode: java.util.List getChildren()>();

        $stack17 = interfaceinvoke nodes.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(2, $stack17);

        $stack18 = interfaceinvoke nodes.<java.util.List: java.lang.Object get(int)>(0);

        $stack19 = (org.eclipse.aether.graph.DependencyNode) $stack18;

        $stack20 = interfaceinvoke $stack19.<org.eclipse.aether.graph.DependencyNode: org.eclipse.aether.graph.Dependency getDependency()>();

        $stack21 = interfaceinvoke nodes.<java.util.List: java.lang.Object get(int)>(1);

        $stack22 = (org.eclipse.aether.graph.DependencyNode) $stack21;

        $stack23 = interfaceinvoke $stack22.<org.eclipse.aether.graph.DependencyNode: org.eclipse.aether.graph.Dependency getDependency()>();

        $r3 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r3.<org.apache.maven.repository.internal.RepositorySystemTest: void checkUtSimpleArtifactDependencies(org.eclipse.aether.graph.Dependency,org.eclipse.aether.graph.Dependency)>($stack20, $stack23);

        return;
    }

    public void testResolveArtifact() throws java.lang.Exception
    {
        org.eclipse.aether.repository.RemoteRepository $stack7;
        RepositorySystemTest this;
        org.eclipse.aether.RepositorySystemSession $stack9, $stack14, $stack19;
        org.eclipse.aether.RepositorySystem $stack10, $stack15, $stack20;
        org.eclipse.aether.resolution.ArtifactResult artifactResult;
        org.eclipse.aether.artifact.DefaultArtifact $u0, $u2, $u3;
        org.eclipse.aether.resolution.ArtifactRequest $u1;
        org.eclipse.aether.artifact.Artifact $r0, $r4, $r8;
        org.apache.maven.repository.internal.RepositorySystemTest $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r11;

        this := @this: RepositorySystemTest;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:1.0");

        $u1 = new org.eclipse.aether.resolution.ArtifactRequest;

        specialinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: void <init>()>();

        $r0 = (org.eclipse.aether.artifact.Artifact) $u0;

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r0);

        $stack7 = staticinvoke <org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack7);

        $r1 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack10 = $r1.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystem system>;

        $r2 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack9 = $r2.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystemSession session>;

        artifactResult = interfaceinvoke $stack10.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.resolution.ArtifactResult resolveArtifact(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactRequest)>($stack9, $u1);

        $r3 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r3.<org.apache.maven.repository.internal.RepositorySystemTest: void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult,java.lang.String)>(artifactResult, "artifact-1.0.jar");

        $u2 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u2.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:zip:1.0");

        $r4 = (org.eclipse.aether.artifact.Artifact) $u2;

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r4);

        $r5 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack15 = $r5.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystem system>;

        $r6 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack14 = $r6.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystemSession session>;

        artifactResult = interfaceinvoke $stack15.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.resolution.ArtifactResult resolveArtifact(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactRequest)>($stack14, $u1);

        $r7 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r7.<org.apache.maven.repository.internal.RepositorySystemTest: void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult,java.lang.String)>(artifactResult, "artifact-1.0.zip");

        $u3 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u3.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:zip:classifier:1.0");

        $r8 = (org.eclipse.aether.artifact.Artifact) $u3;

        virtualinvoke $u1.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r8);

        $r9 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack20 = $r9.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystem system>;

        $r10 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack19 = $r10.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystemSession session>;

        artifactResult = interfaceinvoke $stack20.<org.eclipse.aether.RepositorySystem: org.eclipse.aether.resolution.ArtifactResult resolveArtifact(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactRequest)>($stack19, $u1);

        $r11 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r11.<org.apache.maven.repository.internal.RepositorySystemTest: void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult,java.lang.String)>(artifactResult, "artifact-1.0-classifier.zip");

        return;
    }

    private void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult, java.lang.String)
    {
        org.eclipse.aether.resolution.ArtifactResult result;
        boolean $stack4, $stack5;
        org.eclipse.aether.artifact.Artifact artifact;
        java.io.File $stack7, $stack8;
        java.lang.String filename, $stack9;
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        result := @parameter0: org.eclipse.aether.resolution.ArtifactResult;

        filename := @parameter1: java.lang.String;

        $stack4 = virtualinvoke result.<org.eclipse.aether.resolution.ArtifactResult: boolean isMissing()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack4);

        $stack5 = virtualinvoke result.<org.eclipse.aether.resolution.ArtifactResult: boolean isResolved()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack5);

        artifact = virtualinvoke result.<org.eclipse.aether.resolution.ArtifactResult: org.eclipse.aether.artifact.Artifact getArtifact()>();

        $stack7 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>($stack7);

        $stack8 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        $stack9 = virtualinvoke $stack8.<java.io.File: java.lang.String getName()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(filename, $stack9);

        return;
    }

    public void testResolveArtifacts() throws java.lang.Exception
    {
        org.eclipse.aether.repository.RemoteRepository $stack9, $stack14, $stack19;
        org.eclipse.aether.resolution.ArtifactRequest[] $stack21;
        java.util.List requests, results;
        RepositorySystemTest this;
        org.eclipse.aether.RepositorySystemSession $stack23;
        org.eclipse.aether.RepositorySystem $stack24;
        int $stack27;
        java.lang.Object $stack28, $stack30, $stack32;
        org.eclipse.aether.resolution.ArtifactResult $stack29, $stack31, $stack33;
        org.eclipse.aether.resolution.ArtifactRequest $u0, $u2, $u4;
        org.eclipse.aether.artifact.DefaultArtifact $u1, $u3, $u5;
        org.eclipse.aether.artifact.Artifact $r0, $r1, $r2;
        org.apache.maven.repository.internal.RepositorySystemTest $r3, $r4, $r5, $r6, $r7;

        this := @this: RepositorySystemTest;

        $u0 = new org.eclipse.aether.resolution.ArtifactRequest;

        specialinvoke $u0.<org.eclipse.aether.resolution.ArtifactRequest: void <init>()>();

        $u1 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u1.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:1.0");

        $r0 = (org.eclipse.aether.artifact.Artifact) $u1;

        virtualinvoke $u0.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r0);

        $stack9 = staticinvoke <org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        virtualinvoke $u0.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack9);

        $u2 = new org.eclipse.aether.resolution.ArtifactRequest;

        specialinvoke $u2.<org.eclipse.aether.resolution.ArtifactRequest: void <init>()>();

        $u3 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u3.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:zip:1.0");

        $r1 = (org.eclipse.aether.artifact.Artifact) $u3;

        virtualinvoke $u2.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r1);

        $stack14 = staticinvoke <org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        virtualinvoke $u2.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack14);

        $u4 = new org.eclipse.aether.resolution.ArtifactRequest;

        specialinvoke $u4.<org.eclipse.aether.resolution.ArtifactRequest: void <init>()>();

        $u5 = new org.eclipse.aether.artifact.DefaultArtifact;

        specialinvoke $u5.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String)>("ut.simple:artifact:zip:classifier:1.0");

        $r2 = (org.eclipse.aether.artifact.Artifact) $u5;

        virtualinvoke $u4.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest setArtifact(org.eclipse.aether.artifact.Artifact)>($r2);

        $stack19 = staticinvoke <org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.repository.RemoteRepository newTestRepository()>();

        virtualinvoke $u4.<org.eclipse.aether.resolution.ArtifactRequest: org.eclipse.aether.resolution.ArtifactRequest addRepository(org.eclipse.aether.repository.RemoteRepository)>($stack19);

        $stack21 = newarray (org.eclipse.aether.resolution.ArtifactRequest)[3];

        $stack21[0] = $u0;

        $stack21[1] = $u2;

        $stack21[2] = $u4;

        requests = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack21);

        $r3 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack24 = $r3.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystem system>;

        $r4 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        $stack23 = $r4.<org.apache.maven.repository.internal.RepositorySystemTest: org.eclipse.aether.RepositorySystemSession session>;

        results = interfaceinvoke $stack24.<org.eclipse.aether.RepositorySystem: java.util.List resolveArtifacts(org.eclipse.aether.RepositorySystemSession,java.util.Collection)>($stack23, requests);

        $stack27 = interfaceinvoke results.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(3, $stack27);

        $stack28 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(0);

        $stack29 = (org.eclipse.aether.resolution.ArtifactResult) $stack28;

        $r5 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r5.<org.apache.maven.repository.internal.RepositorySystemTest: void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult,java.lang.String)>($stack29, "artifact-1.0.jar");

        $stack30 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(1);

        $stack31 = (org.eclipse.aether.resolution.ArtifactResult) $stack30;

        $r6 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r6.<org.apache.maven.repository.internal.RepositorySystemTest: void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult,java.lang.String)>($stack31, "artifact-1.0.zip");

        $stack32 = interfaceinvoke results.<java.util.List: java.lang.Object get(int)>(2);

        $stack33 = (org.eclipse.aether.resolution.ArtifactResult) $stack32;

        $r7 = (org.apache.maven.repository.internal.RepositorySystemTest) this;

        specialinvoke $r7.<org.apache.maven.repository.internal.RepositorySystemTest: void checkArtifactResult(org.eclipse.aether.resolution.ArtifactResult,java.lang.String)>($stack33, "artifact-1.0-classifier.zip");

        return;
    }

    public void testResolveMetadata() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }

    public void testInstall() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }

    public void testDeploy() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }

    public void testNewLocalRepositoryManager() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }

    public void testNewSyncContext() throws java.lang.Exception
    {
        RepositorySystemTest this;

        this := @this: RepositorySystemTest;

        return;
    }
}
