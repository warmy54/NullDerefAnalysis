public class RepositoryUtils extends java.lang.Object
{

    public void <init>()
    {
        RepositoryUtils this;

        this := @this: RepositoryUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String nullify(java.lang.String)
    {
        java.lang.String string, $stack2;
        int $stack1;

        string := @parameter0: java.lang.String;

        if string == null goto label1;

        $stack1 = virtualinvoke string.<java.lang.String: int length()>();

        if $stack1 > 0 goto label2;

     label1:
        $stack2 = null;

        goto label3;

     label2:
        $stack2 = string;

     label3:
        return $stack2;
    }

    private static org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.graph.Dependency)
    {
        org.eclipse.aether.graph.Dependency dependency;
        org.eclipse.aether.artifact.Artifact $stack2;
        org.apache.maven.artifact.Artifact result;
        java.lang.String $stack4;
        boolean $stack5;

        dependency := @parameter0: org.eclipse.aether.graph.Dependency;

        if dependency != null goto label1;

        return null;

     label1:
        $stack2 = virtualinvoke dependency.<org.eclipse.aether.graph.Dependency: org.eclipse.aether.artifact.Artifact getArtifact()>();

        result = staticinvoke <org.apache.maven.RepositoryUtils: org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.artifact.Artifact)>($stack2);

        $stack4 = virtualinvoke dependency.<org.eclipse.aether.graph.Dependency: java.lang.String getScope()>();

        interfaceinvoke result.<org.apache.maven.artifact.Artifact: void setScope(java.lang.String)>($stack4);

        $stack5 = virtualinvoke dependency.<org.eclipse.aether.graph.Dependency: boolean isOptional()>();

        interfaceinvoke result.<org.apache.maven.artifact.Artifact: void setOptional(boolean)>($stack5);

        return result;
    }

    public static org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        org.apache.maven.artifact.handler.ArtifactHandler handler;
        java.lang.String $stack6, $stack7, $stack8, $stack11, $stack12, $stack13, $stack14, $stack18;
        java.io.File $stack15, $stack16;
        boolean $stack20;
        org.apache.maven.artifact.DefaultArtifact $u0;
        java.util.ArrayList $u1;
        org.apache.maven.artifact.Artifact $r0, $r1, $r2, $r3, $r4;

        artifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        if artifact != null goto label1;

        return null;

     label1:
        handler = staticinvoke <org.apache.maven.RepositoryUtils: org.apache.maven.artifact.handler.ArtifactHandler newHandler(org.eclipse.aether.artifact.Artifact)>(artifact);

        $u0 = new org.apache.maven.artifact.DefaultArtifact;

        $stack6 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getGroupId()>();

        $stack7 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack8 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getVersion()>();

        $stack11 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        $stack12 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("type", $stack11);

        $stack13 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getClassifier()>();

        $stack14 = staticinvoke <org.apache.maven.RepositoryUtils: java.lang.String nullify(java.lang.String)>($stack13);

        specialinvoke $u0.<org.apache.maven.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler)>($stack6, $stack7, $stack8, null, $stack12, $stack14, handler);

        $stack15 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        $r0 = (org.apache.maven.artifact.Artifact) $u0;

        interfaceinvoke $r0.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($stack15);

        $stack16 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.io.File getFile()>();

        if $stack16 == null goto label2;

        $stack20 = 1;

        goto label3;

     label2:
        $stack20 = 0;

     label3:
        $r1 = (org.apache.maven.artifact.Artifact) $u0;

        interfaceinvoke $r1.<org.apache.maven.artifact.Artifact: void setResolved(boolean)>($stack20);

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>(int)>(1);

        $r2 = (org.apache.maven.artifact.Artifact) $u0;

        $stack18 = interfaceinvoke $r2.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        interfaceinvoke $u1.<java.util.List: boolean add(java.lang.Object)>($stack18);

        $r3 = (org.apache.maven.artifact.Artifact) $u0;

        interfaceinvoke $r3.<org.apache.maven.artifact.Artifact: void setDependencyTrail(java.util.List)>($u1);

        $r4 = (org.apache.maven.artifact.Artifact) $u0;

        return $r4;
    }

    public static void toArtifacts(java.util.Collection, java.util.Collection, java.util.List, org.eclipse.aether.graph.DependencyFilter)
    {
        java.util.Collection nodes, artifacts;
        java.util.Iterator l4;
        boolean $stack9, $stack23;
        java.lang.Object $stack10;
        org.eclipse.aether.graph.DependencyNode node;
        org.eclipse.aether.graph.Dependency $stack11;
        org.apache.maven.artifact.Artifact artifact;
        java.util.ArrayList $stack13;
        java.util.List trail, $stack22, $stack20;
        int $stack14, $stack15;
        java.lang.String $stack17;
        org.eclipse.aether.graph.DependencyFilter filter;

        artifacts := @parameter0: java.util.Collection;

        nodes := @parameter1: java.util.Collection;

        trail := @parameter2: java.util.List;

        filter := @parameter3: org.eclipse.aether.graph.DependencyFilter;

        l4 = interfaceinvoke nodes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        node = (org.eclipse.aether.graph.DependencyNode) $stack10;

        $stack11 = interfaceinvoke node.<org.eclipse.aether.graph.DependencyNode: org.eclipse.aether.graph.Dependency getDependency()>();

        artifact = staticinvoke <org.apache.maven.RepositoryUtils: org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.graph.Dependency)>($stack11);

        $stack13 = new java.util.ArrayList;

        $stack14 = interfaceinvoke trail.<java.util.List: int size()>();

        $stack15 = $stack14 + 1;

        specialinvoke $stack13.<java.util.ArrayList: void <init>(int)>($stack15);

        interfaceinvoke $stack13.<java.util.List: boolean addAll(java.util.Collection)>(trail);

        $stack17 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        interfaceinvoke $stack13.<java.util.List: boolean add(java.lang.Object)>($stack17);

        if filter == null goto label2;

        $stack22 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $stack23 = interfaceinvoke filter.<org.eclipse.aether.graph.DependencyFilter: boolean accept(org.eclipse.aether.graph.DependencyNode,java.util.List)>(node, $stack22);

        if $stack23 == 0 goto label3;

     label2:
        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setDependencyTrail(java.util.List)>($stack13);

        interfaceinvoke artifacts.<java.util.Collection: boolean add(java.lang.Object)>(artifact);

     label3:
        $stack20 = interfaceinvoke node.<org.eclipse.aether.graph.DependencyNode: java.util.List getChildren()>();

        staticinvoke <org.apache.maven.RepositoryUtils: void toArtifacts(java.util.Collection,java.util.Collection,java.util.List,org.eclipse.aether.graph.DependencyFilter)>(artifacts, $stack20, $stack13, filter);

        goto label1;

     label4:
        return;
    }

    public static org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)
    {
        org.apache.maven.artifact.Artifact artifact;
        java.io.File $stack19, $stack32, $stack17;
        org.apache.maven.artifact.versioning.VersionRange $stack36, $stack39;
        java.lang.String version, $stack5, $stack6, $stack33, $stack9, $stack10, $stack11, $stack13, $stack14;
        java.util.Map props;
        boolean $stack7;
        org.apache.maven.artifact.handler.ArtifactHandler $stack12, $stack15;
        org.eclipse.aether.artifact.ArtifactType $stack16;
        org.eclipse.aether.artifact.Artifact localPath#59, $r0;
        org.eclipse.aether.artifact.DefaultArtifact $u0;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        if artifact != null goto label1;

        return null;

     label1:
        version = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        if version != null goto label2;

        $stack36 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.versioning.VersionRange getVersionRange()>();

        if $stack36 == null goto label2;

        $stack39 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.versioning.VersionRange getVersionRange()>();

        version = virtualinvoke $stack39.<org.apache.maven.artifact.versioning.VersionRange: java.lang.String toString()>();

     label2:
        props = null;

        $stack5 = "system";

        $stack6 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack7 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label5;

        $stack19 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        if $stack19 == null goto label3;

        $stack32 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        $stack33 = virtualinvoke $stack32.<java.io.File: java.lang.String getPath()>();

        goto label4;

     label3:
        $stack33 = "";

     label4:
        props = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("localPath", $stack33);

     label5:
        $u0 = new org.eclipse.aether.artifact.DefaultArtifact;

        $stack9 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack10 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack11 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getClassifier()>();

        $stack12 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack13 = interfaceinvoke $stack12.<org.apache.maven.artifact.handler.ArtifactHandler: java.lang.String getExtension()>();

        $stack14 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getType()>();

        $stack15 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler()>();

        $stack16 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.ArtifactType newArtifactType(java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler)>($stack14, $stack15);

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.eclipse.aether.artifact.ArtifactType)>($stack9, $stack10, $stack11, $stack13, version, props, $stack16);

        $stack17 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.io.File getFile()>();

        $r0 = (org.eclipse.aether.artifact.Artifact) $u0;

        localPath#59 = interfaceinvoke $r0.<org.eclipse.aether.artifact.Artifact: org.eclipse.aether.artifact.Artifact setFile(java.io.File)>($stack17);

        return localPath#59;
    }

    public static org.eclipse.aether.graph.Dependency toDependency(org.apache.maven.artifact.Artifact, java.util.Collection)
    {
        org.apache.maven.artifact.Artifact artifact;
        org.eclipse.aether.artifact.Artifact result;
        java.util.Collection exclusions;
        org.eclipse.aether.graph.Dependency $stack7;
        java.lang.String $stack8;
        boolean $stack9, $stack14;
        java.lang.Boolean $stack10;
        java.util.ArrayList $stack11, excl;
        int $stack12;
        java.util.Iterator l4;
        java.lang.Object $stack19;
        org.apache.maven.model.Exclusion exclusion;
        org.eclipse.aether.graph.Exclusion $stack20;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        exclusions := @parameter1: java.util.Collection;

        if artifact != null goto label1;

        return null;

     label1:
        result = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>(artifact);

        excl = null;

        if exclusions == null goto label3;

        $stack11 = new java.util.ArrayList;

        $stack12 = interfaceinvoke exclusions.<java.util.Collection: int size()>();

        specialinvoke $stack11.<java.util.ArrayList: void <init>(int)>($stack12);

        excl = $stack11;

        l4 = interfaceinvoke exclusions.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack14 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label3;

        $stack19 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        exclusion = (org.apache.maven.model.Exclusion) $stack19;

        $stack20 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.graph.Exclusion toExclusion(org.apache.maven.model.Exclusion)>(exclusion);

        interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack20);

        goto label2;

     label3:
        $stack7 = new org.eclipse.aether.graph.Dependency;

        $stack8 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack9 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isOptional()>();

        $stack10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack9);

        specialinvoke $stack7.<org.eclipse.aether.graph.Dependency: void <init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean,java.util.Collection)>(result, $stack8, $stack10, excl);

        return $stack7;
    }

    public static java.util.List toRepos(java.util.List)
    {
        java.util.List repos;
        java.util.ArrayList $stack4;
        int $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8;
        org.apache.maven.artifact.repository.ArtifactRepository repo;
        org.eclipse.aether.repository.RemoteRepository $stack9;

        repos := @parameter0: java.util.List;

        if repos != null goto label1;

        return null;

     label1:
        $stack4 = new java.util.ArrayList;

        $stack5 = interfaceinvoke repos.<java.util.List: int size()>();

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>($stack5);

        l2 = interfaceinvoke repos.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        repo = (org.apache.maven.artifact.repository.ArtifactRepository) $stack8;

        $stack9 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RemoteRepository toRepo(org.apache.maven.artifact.repository.ArtifactRepository)>(repo);

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack9);

        goto label2;

     label3:
        return $stack4;
    }

    public static org.eclipse.aether.repository.RemoteRepository toRepo(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.apache.maven.artifact.repository.ArtifactRepository repo;
        org.eclipse.aether.repository.RemoteRepository$Builder $stack3;
        java.lang.String $stack4, $stack5, $stack6;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $stack7, $stack10;
        org.eclipse.aether.repository.RepositoryPolicy $stack8, $stack11;
        org.apache.maven.artifact.repository.Authentication $stack13;
        org.eclipse.aether.repository.Authentication $stack14;
        org.apache.maven.repository.Proxy $stack16;
        org.eclipse.aether.repository.Proxy $stack17;
        java.util.List $stack19, $stack20;
        boolean $stack22;
        org.eclipse.aether.repository.RemoteRepository result;

        repo := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        result = null;

        if repo == null goto label1;

        $stack3 = new org.eclipse.aether.repository.RemoteRepository$Builder;

        $stack4 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack5 = staticinvoke <org.apache.maven.RepositoryUtils: java.lang.String getLayout(org.apache.maven.artifact.repository.ArtifactRepository)>(repo);

        $stack6 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getUrl()>();

        specialinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: void <init>(java.lang.String,java.lang.String,java.lang.String)>($stack4, $stack5, $stack6);

        $stack7 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getSnapshots()>();

        $stack8 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RepositoryPolicy toPolicy(org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>($stack7);

        virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setSnapshotPolicy(org.eclipse.aether.repository.RepositoryPolicy)>($stack8);

        $stack10 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getReleases()>();

        $stack11 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RepositoryPolicy toPolicy(org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>($stack10);

        virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setReleasePolicy(org.eclipse.aether.repository.RepositoryPolicy)>($stack11);

        $stack13 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.Authentication getAuthentication()>();

        $stack14 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.Authentication toAuthentication(org.apache.maven.artifact.repository.Authentication)>($stack13);

        virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setAuthentication(org.eclipse.aether.repository.Authentication)>($stack14);

        $stack16 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.repository.Proxy getProxy()>();

        $stack17 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.Proxy toProxy(org.apache.maven.repository.Proxy)>($stack16);

        virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setProxy(org.eclipse.aether.repository.Proxy)>($stack17);

        $stack19 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: java.util.List getMirroredRepositories()>();

        $stack20 = staticinvoke <org.apache.maven.RepositoryUtils: java.util.List toRepos(java.util.List)>($stack19);

        virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setMirroredRepositories(java.util.List)>($stack20);

        $stack22 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: boolean isBlocked()>();

        virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository$Builder setBlocked(boolean)>($stack22);

        result = virtualinvoke $stack3.<org.eclipse.aether.repository.RemoteRepository$Builder: org.eclipse.aether.repository.RemoteRepository build()>();

     label1:
        return result;
    }

    public static java.lang.String getLayout(org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.apache.maven.artifact.repository.ArtifactRepository repo;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $stack4, $stack7;
        java.lang.String $stack5, className, $stack13, $stack23, layout;
        java.lang.LinkageError $stack6;
        java.lang.Class $stack8;
        boolean $stack10;
        int $stack12, $stack14, $stack15, $stack17;
        java.lang.StringBuilder $stack19, $stack22, $stack24;
        char $stack20, $stack21;

        repo := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

     label1:
        $stack4 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout()>();

        $stack5 = interfaceinvoke $stack4.<org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout: java.lang.String getId()>();

     label2:
        return $stack5;

     label3:
        $stack6 := @caughtexception;

        $stack7 = interfaceinvoke repo.<org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        className = virtualinvoke $stack8.<java.lang.Class: java.lang.String getSimpleName()>();

        $stack10 = virtualinvoke className.<java.lang.String: boolean endsWith(java.lang.String)>("RepositoryLayout");

        if $stack10 == 0 goto label4;

        $stack12 = virtualinvoke className.<java.lang.String: int length()>();

        $stack13 = "RepositoryLayout";

        $stack14 = virtualinvoke $stack13.<java.lang.String: int length()>();

        $stack15 = $stack12 - $stack14;

        layout = virtualinvoke className.<java.lang.String: java.lang.String substring(int,int)>(0, $stack15);

        $stack17 = virtualinvoke layout.<java.lang.String: int length()>();

        if $stack17 <= 0 goto label4;

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke layout.<java.lang.String: char charAt(int)>(0);

        $stack21 = staticinvoke <java.lang.Character: char toLowerCase(char)>($stack20);

        $stack22 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack21);

        $stack23 = virtualinvoke layout.<java.lang.String: java.lang.String substring(int)>(1);

        $stack24 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23);

        layout = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        return layout;

     label4:
        return "";

        catch java.lang.LinkageError from label1 to label2 with label3;
    }

    private static org.eclipse.aether.repository.RepositoryPolicy toPolicy(org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)
    {
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy policy;
        org.eclipse.aether.repository.RepositoryPolicy $stack2, result;
        boolean $stack3;
        java.lang.String $stack4, $stack5;

        policy := @parameter0: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        result = null;

        if policy == null goto label1;

        $stack2 = new org.eclipse.aether.repository.RepositoryPolicy;

        $stack3 = virtualinvoke policy.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: boolean isEnabled()>();

        $stack4 = virtualinvoke policy.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: java.lang.String getUpdatePolicy()>();

        $stack5 = virtualinvoke policy.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: java.lang.String getChecksumPolicy()>();

        specialinvoke $stack2.<org.eclipse.aether.repository.RepositoryPolicy: void <init>(boolean,java.lang.String,java.lang.String)>($stack3, $stack4, $stack5);

        result = $stack2;

     label1:
        return result;
    }

    private static org.eclipse.aether.repository.Authentication toAuthentication(org.apache.maven.artifact.repository.Authentication)
    {
        org.apache.maven.artifact.repository.Authentication auth;
        org.eclipse.aether.util.repository.AuthenticationBuilder $stack3, $stack5;
        java.lang.String $stack4, $stack6, $stack8, $stack9;
        org.eclipse.aether.repository.Authentication result;

        auth := @parameter0: org.apache.maven.artifact.repository.Authentication;

        result = null;

        if auth == null goto label1;

        $stack3 = new org.eclipse.aether.util.repository.AuthenticationBuilder;

        specialinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: void <init>()>();

        $stack4 = virtualinvoke auth.<org.apache.maven.artifact.repository.Authentication: java.lang.String getUsername()>();

        $stack5 = virtualinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.util.repository.AuthenticationBuilder addUsername(java.lang.String)>($stack4);

        $stack6 = virtualinvoke auth.<org.apache.maven.artifact.repository.Authentication: java.lang.String getPassword()>();

        virtualinvoke $stack5.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.util.repository.AuthenticationBuilder addPassword(java.lang.String)>($stack6);

        $stack8 = virtualinvoke auth.<org.apache.maven.artifact.repository.Authentication: java.lang.String getPrivateKey()>();

        $stack9 = virtualinvoke auth.<org.apache.maven.artifact.repository.Authentication: java.lang.String getPassphrase()>();

        virtualinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.util.repository.AuthenticationBuilder addPrivateKey(java.lang.String,java.lang.String)>($stack8, $stack9);

        result = virtualinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.repository.Authentication build()>();

     label1:
        return result;
    }

    private static org.eclipse.aether.repository.Proxy toProxy(org.apache.maven.repository.Proxy)
    {
        org.apache.maven.repository.Proxy proxy;
        org.eclipse.aether.util.repository.AuthenticationBuilder $stack3, $stack5;
        java.lang.String $stack4, $stack6, $stack9, $stack10;
        org.eclipse.aether.repository.Proxy $stack8, result;
        int $stack11;
        org.eclipse.aether.repository.Authentication $stack12;

        proxy := @parameter0: org.apache.maven.repository.Proxy;

        result = null;

        if proxy == null goto label1;

        $stack3 = new org.eclipse.aether.util.repository.AuthenticationBuilder;

        specialinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: void <init>()>();

        $stack4 = virtualinvoke proxy.<org.apache.maven.repository.Proxy: java.lang.String getUserName()>();

        $stack5 = virtualinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.util.repository.AuthenticationBuilder addUsername(java.lang.String)>($stack4);

        $stack6 = virtualinvoke proxy.<org.apache.maven.repository.Proxy: java.lang.String getPassword()>();

        virtualinvoke $stack5.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.util.repository.AuthenticationBuilder addPassword(java.lang.String)>($stack6);

        $stack8 = new org.eclipse.aether.repository.Proxy;

        $stack9 = virtualinvoke proxy.<org.apache.maven.repository.Proxy: java.lang.String getProtocol()>();

        $stack10 = virtualinvoke proxy.<org.apache.maven.repository.Proxy: java.lang.String getHost()>();

        $stack11 = virtualinvoke proxy.<org.apache.maven.repository.Proxy: int getPort()>();

        $stack12 = virtualinvoke $stack3.<org.eclipse.aether.util.repository.AuthenticationBuilder: org.eclipse.aether.repository.Authentication build()>();

        specialinvoke $stack8.<org.eclipse.aether.repository.Proxy: void <init>(java.lang.String,java.lang.String,int,org.eclipse.aether.repository.Authentication)>($stack9, $stack10, $stack11, $stack12);

        result = $stack8;

     label1:
        return result;
    }

    public static org.apache.maven.artifact.handler.ArtifactHandler newHandler(org.eclipse.aether.artifact.Artifact)
    {
        org.eclipse.aether.artifact.Artifact artifact;
        java.lang.String $stack6, type, $stack9, $stack10, addedToClasspath, includesDependencies;
        boolean $stack12, $stack14;
        org.apache.maven.artifact.handler.DefaultArtifactHandler $u0;
        org.apache.maven.artifact.handler.ArtifactHandler $r0;

        artifact := @parameter0: org.eclipse.aether.artifact.Artifact;

        $stack6 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        type = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("type", $stack6);

        $u0 = new org.apache.maven.artifact.handler.DefaultArtifactHandler;

        specialinvoke $u0.<org.apache.maven.artifact.handler.DefaultArtifactHandler: void <init>(java.lang.String)>(type);

        $stack9 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getExtension()>();

        virtualinvoke $u0.<org.apache.maven.artifact.handler.DefaultArtifactHandler: void setExtension(java.lang.String)>($stack9);

        $stack10 = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("language", null);

        virtualinvoke $u0.<org.apache.maven.artifact.handler.DefaultArtifactHandler: void setLanguage(java.lang.String)>($stack10);

        addedToClasspath = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("constitutesBuildPath", "");

        $stack12 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(addedToClasspath);

        virtualinvoke $u0.<org.apache.maven.artifact.handler.DefaultArtifactHandler: void setAddedToClasspath(boolean)>($stack12);

        includesDependencies = interfaceinvoke artifact.<org.eclipse.aether.artifact.Artifact: java.lang.String getProperty(java.lang.String,java.lang.String)>("includesDependencies", "");

        $stack14 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(includesDependencies);

        virtualinvoke $u0.<org.apache.maven.artifact.handler.DefaultArtifactHandler: void setIncludesDependencies(boolean)>($stack14);

        $r0 = (org.apache.maven.artifact.handler.ArtifactHandler) $u0;

        return $r0;
    }

    public static org.eclipse.aether.artifact.ArtifactType newArtifactType(java.lang.String, org.apache.maven.artifact.handler.ArtifactHandler)
    {
        java.lang.String id, $stack3, $stack4, $stack5;
        org.apache.maven.artifact.handler.ArtifactHandler handler;
        boolean $stack6, $stack7;
        org.eclipse.aether.artifact.DefaultArtifactType $u0;
        org.eclipse.aether.artifact.ArtifactType $r0;

        id := @parameter0: java.lang.String;

        handler := @parameter1: org.apache.maven.artifact.handler.ArtifactHandler;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifactType;

        $stack3 = interfaceinvoke handler.<org.apache.maven.artifact.handler.ArtifactHandler: java.lang.String getExtension()>();

        $stack4 = interfaceinvoke handler.<org.apache.maven.artifact.handler.ArtifactHandler: java.lang.String getClassifier()>();

        $stack5 = interfaceinvoke handler.<org.apache.maven.artifact.handler.ArtifactHandler: java.lang.String getLanguage()>();

        $stack6 = interfaceinvoke handler.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isAddedToClasspath()>();

        $stack7 = interfaceinvoke handler.<org.apache.maven.artifact.handler.ArtifactHandler: boolean isIncludesDependencies()>();

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifactType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(id, $stack3, $stack4, $stack5, $stack6, $stack7);

        $r0 = (org.eclipse.aether.artifact.ArtifactType) $u0;

        return $r0;
    }

    public static org.eclipse.aether.graph.Dependency toDependency(org.apache.maven.model.Dependency, org.eclipse.aether.artifact.ArtifactTypeRegistry)
    {
        org.eclipse.aether.artifact.ArtifactTypeRegistry stereotypes;
        org.apache.maven.model.Dependency dependency;
        java.lang.String $stack9, $stack11, $stack13, $stack14, $stack15, $stack17, $stack25, $stack26, $stack37, $stack47, $stack53;
        java.util.List $stack19, $stack21;
        int $stack20, $stack48;
        boolean $stack27, $stack49, $stack23;
        java.lang.Object $stack32, stereotype;
        org.apache.maven.model.Exclusion exclusion;
        org.eclipse.aether.graph.Exclusion $stack33;
        java.util.Map props;
        java.util.Iterator result;
        java.lang.Boolean $stack28;
        org.eclipse.aether.artifact.DefaultArtifactType $u0;
        org.eclipse.aether.artifact.DefaultArtifact $u1;
        java.util.ArrayList $u2;
        org.eclipse.aether.graph.Dependency $u3;
        org.eclipse.aether.artifact.ArtifactType $r0;
        org.eclipse.aether.artifact.Artifact $r1;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        stereotypes := @parameter1: org.eclipse.aether.artifact.ArtifactTypeRegistry;

        $stack9 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        stereotype = interfaceinvoke stereotypes.<org.eclipse.aether.artifact.ArtifactTypeRegistry: org.eclipse.aether.artifact.ArtifactType get(java.lang.String)>($stack9);

        if stereotype != null goto label1;

        $u0 = new org.eclipse.aether.artifact.DefaultArtifactType;

        $stack53 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        specialinvoke $u0.<org.eclipse.aether.artifact.DefaultArtifactType: void <init>(java.lang.String)>($stack53);

        stereotype = $u0;

     label1:
        $stack11 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        if $stack11 == null goto label2;

        $stack47 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        $stack48 = virtualinvoke $stack47.<java.lang.String: int length()>();

        if $stack48 <= 0 goto label2;

        $stack49 = 1;

        goto label3;

     label2:
        $stack49 = 0;

     label3:
        props = null;

        if $stack49 == 0 goto label4;

        $stack37 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        props = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("localPath", $stack37);

     label4:
        $u1 = new org.eclipse.aether.artifact.DefaultArtifact;

        $stack13 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack14 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack15 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getClassifier()>();

        $stack17 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        $r0 = (org.eclipse.aether.artifact.ArtifactType) stereotype;

        specialinvoke $u1.<org.eclipse.aether.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.eclipse.aether.artifact.ArtifactType)>($stack13, $stack14, $stack15, null, $stack17, props, $r0);

        $u2 = new java.util.ArrayList;

        $stack19 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        $stack20 = interfaceinvoke $stack19.<java.util.List: int size()>();

        specialinvoke $u2.<java.util.ArrayList: void <init>(int)>($stack20);

        $stack21 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.util.List getExclusions()>();

        result = interfaceinvoke $stack21.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack23 = interfaceinvoke result.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label6;

        $stack32 = interfaceinvoke result.<java.util.Iterator: java.lang.Object next()>();

        exclusion = (org.apache.maven.model.Exclusion) $stack32;

        $stack33 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.graph.Exclusion toExclusion(org.apache.maven.model.Exclusion)>(exclusion);

        interfaceinvoke $u2.<java.util.List: boolean add(java.lang.Object)>($stack33);

        goto label5;

     label6:
        $u3 = new org.eclipse.aether.graph.Dependency;

        $stack25 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack26 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getOptional()>();

        if $stack26 == null goto label7;

        $stack27 = virtualinvoke dependency.<org.apache.maven.model.Dependency: boolean isOptional()>();

        $stack28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack27);

        goto label8;

     label7:
        $stack28 = null;

     label8:
        $r1 = (org.eclipse.aether.artifact.Artifact) $u1;

        specialinvoke $u3.<org.eclipse.aether.graph.Dependency: void <init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean,java.util.Collection)>($r1, $stack25, $stack28, $u2);

        return $u3;
    }

    private static org.eclipse.aether.graph.Exclusion toExclusion(org.apache.maven.model.Exclusion)
    {
        org.eclipse.aether.graph.Exclusion $stack1;
        org.apache.maven.model.Exclusion exclusion;
        java.lang.String $stack2, $stack3;

        exclusion := @parameter0: org.apache.maven.model.Exclusion;

        $stack1 = new org.eclipse.aether.graph.Exclusion;

        $stack2 = virtualinvoke exclusion.<org.apache.maven.model.Exclusion: java.lang.String getGroupId()>();

        $stack3 = virtualinvoke exclusion.<org.apache.maven.model.Exclusion: java.lang.String getArtifactId()>();

        specialinvoke $stack1.<org.eclipse.aether.graph.Exclusion: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($stack2, $stack3, "*", "*");

        return $stack1;
    }

    public static org.eclipse.aether.artifact.ArtifactTypeRegistry newArtifactTypeRegistry(org.apache.maven.artifact.handler.manager.ArtifactHandlerManager)
    {
        org.apache.maven.artifact.handler.manager.ArtifactHandlerManager handlerManager;
        org.apache.maven.RepositoryUtils$MavenArtifactTypeRegistry $u0;
        org.eclipse.aether.artifact.ArtifactTypeRegistry $r0;

        handlerManager := @parameter0: org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;

        $u0 = new org.apache.maven.RepositoryUtils$MavenArtifactTypeRegistry;

        specialinvoke $u0.<org.apache.maven.RepositoryUtils$MavenArtifactTypeRegistry: void <init>(org.apache.maven.artifact.handler.manager.ArtifactHandlerManager)>(handlerManager);

        $r0 = (org.eclipse.aether.artifact.ArtifactTypeRegistry) $u0;

        return $r0;
    }

    public static java.util.Collection toArtifacts(java.util.Collection)
    {
        java.util.ArrayList $stack4;
        java.util.Collection artifactsToConvert;
        java.util.Iterator l2;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.artifact.Artifact a;
        org.eclipse.aether.artifact.Artifact $stack8;

        artifactsToConvert := @parameter0: java.util.Collection;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>()>();

        l2 = interfaceinvoke artifactsToConvert.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack7;

        $stack8 = staticinvoke <org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>(a);

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack8);

        goto label1;

     label2:
        return $stack4;
    }

    public static org.eclipse.aether.repository.WorkspaceRepository getWorkspace(org.eclipse.aether.RepositorySystemSession)
    {
        org.eclipse.aether.RepositorySystemSession session;
        org.eclipse.aether.repository.WorkspaceReader reader;
        org.eclipse.aether.repository.WorkspaceRepository $stack3;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        reader = interfaceinvoke session.<org.eclipse.aether.RepositorySystemSession: org.eclipse.aether.repository.WorkspaceReader getWorkspaceReader()>();

        if reader == null goto label1;

        $stack3 = interfaceinvoke reader.<org.eclipse.aether.repository.WorkspaceReader: org.eclipse.aether.repository.WorkspaceRepository getRepository()>();

        goto label2;

     label1:
        $stack3 = null;

     label2:
        return $stack3;
    }

    public static boolean repositoriesEquals(java.util.List, java.util.List)
    {
        java.util.List r1, r2;
        int $stack4, $stack5;
        java.util.Iterator it1, it2;
        boolean $stack8, $stack13;
        java.lang.Object $stack9, $stack11;
        org.eclipse.aether.repository.RemoteRepository $stack10, $stack12;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $stack4 = interfaceinvoke r1.<java.util.List: int size()>();

        $stack5 = interfaceinvoke r2.<java.util.List: int size()>();

        if $stack4 == $stack5 goto label1;

        return 0;

     label1:
        it1 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        it2 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack8 = interfaceinvoke it1.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        $stack9 = interfaceinvoke it1.<java.util.Iterator: java.lang.Object next()>();

        $stack10 = (org.eclipse.aether.repository.RemoteRepository) $stack9;

        $stack11 = interfaceinvoke it2.<java.util.Iterator: java.lang.Object next()>();

        $stack12 = (org.eclipse.aether.repository.RemoteRepository) $stack11;

        $stack13 = staticinvoke <org.apache.maven.RepositoryUtils: boolean repositoryEquals(org.eclipse.aether.repository.RemoteRepository,org.eclipse.aether.repository.RemoteRepository)>($stack10, $stack12);

        if $stack13 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    public static int repositoriesHashCode(java.util.List)
    {
        java.util.List repositories;
        java.util.Iterator l2;
        boolean $stack5;
        java.lang.Object $stack6;
        org.eclipse.aether.repository.RemoteRepository repository;
        int $stack7, $stack8, result;

        repositories := @parameter0: java.util.List;

        result = 17;

        l2 = interfaceinvoke repositories.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack6 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        repository = (org.eclipse.aether.repository.RemoteRepository) $stack6;

        $stack7 = 31 * result;

        $stack8 = staticinvoke <org.apache.maven.RepositoryUtils: int repositoryHashCode(org.eclipse.aether.repository.RemoteRepository)>(repository);

        result = $stack7 + $stack8;

        goto label1;

     label2:
        return result;
    }

    private static int repositoryHashCode(org.eclipse.aether.repository.RemoteRepository)
    {
        org.eclipse.aether.repository.RemoteRepository repository;
        java.lang.String obj;
        int $stack4, $stack5, result#3;

        repository := @parameter0: org.eclipse.aether.repository.RemoteRepository;

        obj = virtualinvoke repository.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getUrl()>();

        $stack4 = 31 * 17;

        if obj == null goto label1;

        $stack5 = virtualinvoke obj.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        result#3 = $stack4 + $stack5;

        return result#3;
    }

    private static boolean policyEquals(org.eclipse.aether.repository.RepositoryPolicy, org.eclipse.aether.repository.RepositoryPolicy)
    {
        org.eclipse.aether.repository.RepositoryPolicy p1, p2;
        boolean $stack2, $stack3, $stack6, $stack7;
        java.lang.String $stack4, $stack5;

        p1 := @parameter0: org.eclipse.aether.repository.RepositoryPolicy;

        p2 := @parameter1: org.eclipse.aether.repository.RepositoryPolicy;

        if p1 != p2 goto label1;

        return 1;

     label1:
        $stack2 = virtualinvoke p1.<org.eclipse.aether.repository.RepositoryPolicy: boolean isEnabled()>();

        $stack3 = virtualinvoke p2.<org.eclipse.aether.repository.RepositoryPolicy: boolean isEnabled()>();

        if $stack2 != $stack3 goto label2;

        $stack4 = virtualinvoke p1.<org.eclipse.aether.repository.RepositoryPolicy: java.lang.String getChecksumPolicy()>();

        $stack5 = virtualinvoke p2.<org.eclipse.aether.repository.RepositoryPolicy: java.lang.String getChecksumPolicy()>();

        $stack6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        if $stack6 == 0 goto label2;

        $stack7 = 1;

        goto label3;

     label2:
        $stack7 = 0;

     label3:
        return $stack7;
    }

    private static boolean repositoryEquals(org.eclipse.aether.repository.RemoteRepository, org.eclipse.aether.repository.RemoteRepository)
    {
        org.eclipse.aether.repository.RemoteRepository r1, r2;
        java.lang.String $stack2, $stack3, $stack5, $stack6;
        boolean $stack4, $stack7, $stack11, $stack14, $stack8;
        org.eclipse.aether.repository.RepositoryPolicy $stack9, $stack10, $stack12, $stack13;

        r1 := @parameter0: org.eclipse.aether.repository.RemoteRepository;

        r2 := @parameter1: org.eclipse.aether.repository.RemoteRepository;

        if r1 != r2 goto label1;

        return 1;

     label1:
        $stack2 = virtualinvoke r1.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getId()>();

        $stack3 = virtualinvoke r2.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getId()>();

        $stack4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack2, $stack3);

        if $stack4 == 0 goto label2;

        $stack5 = virtualinvoke r1.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getUrl()>();

        $stack6 = virtualinvoke r2.<org.eclipse.aether.repository.RemoteRepository: java.lang.String getUrl()>();

        $stack7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        if $stack7 == 0 goto label2;

        $stack9 = virtualinvoke r1.<org.eclipse.aether.repository.RemoteRepository: org.eclipse.aether.repository.RepositoryPolicy getPolicy(boolean)>(0);

        $stack10 = virtualinvoke r2.<org.eclipse.aether.repository.RemoteRepository: org.eclipse.aether.repository.RepositoryPolicy getPolicy(boolean)>(0);

        $stack11 = staticinvoke <org.apache.maven.RepositoryUtils: boolean policyEquals(org.eclipse.aether.repository.RepositoryPolicy,org.eclipse.aether.repository.RepositoryPolicy)>($stack9, $stack10);

        if $stack11 == 0 goto label2;

        $stack12 = virtualinvoke r1.<org.eclipse.aether.repository.RemoteRepository: org.eclipse.aether.repository.RepositoryPolicy getPolicy(boolean)>(1);

        $stack13 = virtualinvoke r2.<org.eclipse.aether.repository.RemoteRepository: org.eclipse.aether.repository.RepositoryPolicy getPolicy(boolean)>(1);

        $stack14 = staticinvoke <org.apache.maven.RepositoryUtils: boolean policyEquals(org.eclipse.aether.repository.RepositoryPolicy,org.eclipse.aether.repository.RepositoryPolicy)>($stack12, $stack13);

        if $stack14 == 0 goto label2;

        $stack8 = 1;

        goto label3;

     label2:
        $stack8 = 0;

     label3:
        return $stack8;
    }
}
