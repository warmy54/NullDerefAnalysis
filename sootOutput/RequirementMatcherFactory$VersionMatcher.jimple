final class RequirementMatcherFactory$VersionMatcher extends java.lang.Object implements org.apache.maven.toolchain.RequirementMatcher
{
    org.apache.maven.artifact.versioning.DefaultArtifactVersion version;

    private void <init>(java.lang.String)
    {
        RequirementMatcherFactory$VersionMatcher this;
        java.lang.String version;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $u0;
        org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher $r0;

        this := @this: RequirementMatcherFactory$VersionMatcher;

        version := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>(version);

        $r0 = (org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher) this;

        $r0.<org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher: org.apache.maven.artifact.versioning.DefaultArtifactVersion version> = $u0;

        return;
    }

    public boolean matches(java.lang.String)
    {
        java.lang.String requirement;
        boolean $stack4, $stack10, $stack8;
        org.apache.maven.artifact.versioning.ArtifactVersion $stack5, $r1;
        RequirementMatcherFactory$VersionMatcher this;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $stack6, $stack9;
        int $stack7;
        java.lang.Throwable $stack11;
        org.apache.maven.artifact.versioning.VersionRange range;
        org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher $r0, $r2;
        org.apache.maven.artifact.versioning.InvalidVersionSpecificationException $r3;

        this := @this: RequirementMatcherFactory$VersionMatcher;

        requirement := @parameter0: java.lang.String;

     label1:
        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(requirement);

        $stack4 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean hasRestrictions()>();

        if $stack4 == 0 goto label3;

        $r0 = (org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher) this;

        $stack9 = $r0.<org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher: org.apache.maven.artifact.versioning.DefaultArtifactVersion version>;

        $r1 = (org.apache.maven.artifact.versioning.ArtifactVersion) $stack9;

        $stack10 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r1);

     label2:
        return $stack10;

     label3:
        $stack5 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $r2 = (org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher) this;

        $stack6 = $r2.<org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher: org.apache.maven.artifact.versioning.DefaultArtifactVersion version>;

        $stack7 = interfaceinvoke $stack5.<org.apache.maven.artifact.versioning.ArtifactVersion: int compareTo(java.lang.Object)>($stack6);

        if $stack7 != 0 goto label4;

        $stack8 = 1;

        goto label5;

     label4:
        $stack8 = 0;

     label5:
        return $stack8;

     label6:
        $stack11 := @caughtexception;

        $r3 = (org.apache.maven.artifact.versioning.InvalidVersionSpecificationException) $stack11;

        virtualinvoke $r3.<org.apache.maven.artifact.versioning.InvalidVersionSpecificationException: void printStackTrace()>();

        return 0;

        catch org.apache.maven.artifact.versioning.InvalidVersionSpecificationException from label1 to label2 with label6;
        catch org.apache.maven.artifact.versioning.InvalidVersionSpecificationException from label3 to label5 with label6;
    }

    public java.lang.String toString()
    {
        RequirementMatcherFactory$VersionMatcher this;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $stack1;
        java.lang.String $stack2;
        org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher $r0;

        this := @this: RequirementMatcherFactory$VersionMatcher;

        $r0 = (org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher) this;

        $stack1 = $r0.<org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher: org.apache.maven.artifact.versioning.DefaultArtifactVersion version>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: java.lang.String toString()>();

        return $stack2;
    }

    void <init>(java.lang.String, org.apache.maven.toolchain.RequirementMatcherFactory$1)
    {
        RequirementMatcherFactory$VersionMatcher this;
        java.lang.String x0;
        org.apache.maven.toolchain.RequirementMatcherFactory$1 x1;
        org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher $r0;

        this := @this: RequirementMatcherFactory$VersionMatcher;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: org.apache.maven.toolchain.RequirementMatcherFactory$1;

        $r0 = (org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher) this;

        specialinvoke $r0.<org.apache.maven.toolchain.RequirementMatcherFactory$VersionMatcher: void <init>(java.lang.String)>(x0);

        return;
    }
}
