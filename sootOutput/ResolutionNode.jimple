public class ResolutionNode extends java.lang.Object
{
    private org.apache.maven.artifact.Artifact artifact;
    private java.util.List children;
    private final java.util.List parents;
    private final int depth;
    private final org.apache.maven.artifact.resolver.ResolutionNode parent;
    private final java.util.List remoteRepositories;
    private boolean active;
    private java.util.List trail;

    public void <init>(org.apache.maven.artifact.Artifact, java.util.List)
    {
        ResolutionNode this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.List remoteRepositories, $stack3;
        org.apache.maven.artifact.resolver.ResolutionNode $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: ResolutionNode;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter1: java.util.List;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r0.<org.apache.maven.artifact.resolver.ResolutionNode: boolean active> = 1;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r1.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact artifact> = artifact;

        $r2 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r2.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List remoteRepositories> = remoteRepositories;

        $r3 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r3.<org.apache.maven.artifact.resolver.ResolutionNode: int depth> = 0;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r4.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List parents> = $stack3;

        $r5 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r5.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.resolver.ResolutionNode parent> = null;

        return;
    }

    public void <init>(org.apache.maven.artifact.Artifact, java.util.List, org.apache.maven.artifact.resolver.ResolutionNode)
    {
        ResolutionNode this;
        org.apache.maven.artifact.Artifact artifact;
        java.util.List remoteRepositories, $stack7, $stack8, $stack10;
        org.apache.maven.artifact.resolver.ResolutionNode parent, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $stack4, $stack5;
        java.lang.Object $stack11;
        java.util.ArrayList $u0;

        this := @this: ResolutionNode;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepositories := @parameter1: java.util.List;

        parent := @parameter2: org.apache.maven.artifact.resolver.ResolutionNode;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r0.<org.apache.maven.artifact.resolver.ResolutionNode: boolean active> = 1;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r1.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact artifact> = artifact;

        $r2 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r2.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List remoteRepositories> = remoteRepositories;

        $stack4 = parent.<org.apache.maven.artifact.resolver.ResolutionNode: int depth>;

        $stack5 = $stack4 + 1;

        $r3 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r3.<org.apache.maven.artifact.resolver.ResolutionNode: int depth> = $stack5;

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r4 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r4.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List parents> = $u0;

        $r5 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack8 = $r5.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List parents>;

        $stack7 = parent.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List parents>;

        interfaceinvoke $stack8.<java.util.List: boolean addAll(java.util.Collection)>($stack7);

        $r6 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack10 = $r6.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List parents>;

        $stack11 = virtualinvoke parent.<org.apache.maven.artifact.resolver.ResolutionNode: java.lang.Object getKey()>();

        interfaceinvoke $stack10.<java.util.List: boolean add(java.lang.Object)>($stack11);

        $r7 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r7.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.resolver.ResolutionNode parent> = parent;

        return;
    }

    public org.apache.maven.artifact.Artifact getArtifact()
    {
        ResolutionNode this;
        org.apache.maven.artifact.Artifact $stack1;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact artifact>;

        return $stack1;
    }

    public java.lang.Object getKey()
    {
        ResolutionNode this;
        org.apache.maven.artifact.Artifact $stack1;
        java.lang.String $stack2;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact artifact>;

        $stack2 = interfaceinvoke $stack1.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        return $stack2;
    }

    public void addDependencies(java.util.Set, java.util.List, org.apache.maven.artifact.resolver.filter.ArtifactFilter) throws org.apache.maven.artifact.resolver.CyclicDependencyException, org.apache.maven.artifact.versioning.OverConstrainedVersionException
    {
        java.util.Set artifacts;
        ResolutionNode this;
        java.util.List $stack6, $stack15, $stack16, $stack18, remoteRepositories, $stack22, $stack25;
        boolean $stack7, $stack14, $stack20;
        int $stack12;
        java.util.Iterator l4;
        java.lang.Object $stack17;
        org.apache.maven.artifact.Artifact a;
        java.lang.String $stack19;
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        java.util.ArrayList $u0;
        org.apache.maven.artifact.resolver.CyclicDependencyException $u1;
        org.apache.maven.artifact.resolver.ResolutionNode $u2, $r0, $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Throwable $r3;

        this := @this: ResolutionNode;

        artifacts := @parameter0: java.util.Set;

        remoteRepositories := @parameter1: java.util.List;

        filter := @parameter2: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        if artifacts == null goto label4;

        $stack7 = interfaceinvoke artifacts.<java.util.Set: boolean isEmpty()>();

        if $stack7 != 0 goto label4;

        $u0 = new java.util.ArrayList;

        $stack12 = interfaceinvoke artifacts.<java.util.Set: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack12);

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children> = $u0;

        l4 = interfaceinvoke artifacts.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack14 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label3;

        $stack17 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        a = (org.apache.maven.artifact.Artifact) $stack17;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack18 = $r1.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List parents>;

        $stack19 = interfaceinvoke a.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        $stack20 = interfaceinvoke $stack18.<java.util.List: boolean contains(java.lang.Object)>($stack19);

        if $stack20 == 0 goto label2;

        $r2 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack25 = virtualinvoke $r2.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List getDependencyTrail()>();

        interfaceinvoke a.<org.apache.maven.artifact.Artifact: void setDependencyTrail(java.util.List)>($stack25);

        $u1 = new org.apache.maven.artifact.resolver.CyclicDependencyException;

        specialinvoke $u1.<org.apache.maven.artifact.resolver.CyclicDependencyException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact)>("A dependency has introduced a cycle", a);

        $r3 = (java.lang.Throwable) $u1;

        throw $r3;

     label2:
        $r4 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack22 = $r4.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        $u2 = new org.apache.maven.artifact.resolver.ResolutionNode;

        $r5 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        specialinvoke $u2.<org.apache.maven.artifact.resolver.ResolutionNode: void <init>(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.resolver.ResolutionNode)>(a, remoteRepositories, $r5);

        interfaceinvoke $stack22.<java.util.List: boolean add(java.lang.Object)>($u2);

        goto label1;

     label3:
        $r6 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack15 = $r6.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        $stack16 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack15);

        $r7 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r7.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children> = $stack16;

        goto label5;

     label4:
        $stack6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r8 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r8.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children> = $stack6;

     label5:
        $r9 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r9.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List trail> = null;

        return;
    }

    public java.util.List getDependencyTrail() throws org.apache.maven.artifact.versioning.OverConstrainedVersionException
    {
        ResolutionNode this;
        java.util.List trial;
        int $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        java.lang.Object $stack10;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack11;
        java.util.ArrayList $u0;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        trial = specialinvoke $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List getTrail()>();

        $u0 = new java.util.ArrayList;

        $stack7 = interfaceinvoke trial.<java.util.List: int size()>();

        specialinvoke $u0.<java.util.ArrayList: void <init>(int)>($stack7);

        l3 = interfaceinvoke trial.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack10;

        $stack11 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getId()>();

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($stack11);

        goto label1;

     label2:
        return $u0;
    }

    private java.util.List getTrail() throws org.apache.maven.artifact.versioning.OverConstrainedVersionException
    {
        ResolutionNode this;
        java.util.List $stack5, $stack6;
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack10, $stack16, $stack18, $stack19;
        org.apache.maven.artifact.versioning.ArtifactVersion selected;
        java.lang.StringBuilder $stack15, $stack17, $u1;
        java.lang.Object node;
        java.util.LinkedList $u0;
        org.apache.maven.artifact.versioning.OverConstrainedVersionException $u2;
        org.apache.maven.artifact.resolver.ResolutionNode $r0, $r1, $r3, $r4, $r5;
        java.lang.Throwable $r2;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack5 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List trail>;

        if $stack5 != null goto label5;

        $u0 = new java.util.LinkedList;

        specialinvoke $u0.<java.util.LinkedList: void <init>()>();

        node = this;

     label1:
        if node == null goto label4;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) node;

        artifact = virtualinvoke $r1.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack10 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        if $stack10 != null goto label3;

        selected = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion()>();

        if selected == null goto label2;

        $stack19 = virtualinvoke selected.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void selectVersion(java.lang.String)>($stack19);

        goto label3;

     label2:
        $u2 = new org.apache.maven.artifact.versioning.OverConstrainedVersionException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get a selected Version for ");

        $stack16 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<org.apache.maven.artifact.versioning.OverConstrainedVersionException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact)>($stack18, artifact);

        $r2 = (java.lang.Throwable) $u2;

        throw $r2;

     label3:
        interfaceinvoke $u0.<java.util.List: void add(int,java.lang.Object)>(0, artifact);

        $r3 = (org.apache.maven.artifact.resolver.ResolutionNode) node;

        node = $r3.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.resolver.ResolutionNode parent>;

        goto label1;

     label4:
        $r4 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r4.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List trail> = $u0;

     label5:
        $r5 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack6 = $r5.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List trail>;

        return $stack6;
    }

    public boolean isResolved()
    {
        ResolutionNode this;
        java.util.List $stack1;
        boolean $stack2;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public boolean isChildOfRootNode()
    {
        ResolutionNode this;
        org.apache.maven.artifact.resolver.ResolutionNode $stack1, $stack2, $stack3, $r0, $r1;
        boolean $stack4;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.resolver.ResolutionNode parent>;

        if $stack1 == null goto label1;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack2 = $r1.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.resolver.ResolutionNode parent>;

        $stack3 = $stack2.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.resolver.ResolutionNode parent>;

        if $stack3 != null goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public java.util.Iterator getChildrenIterator()
    {
        ResolutionNode this;
        java.util.List $stack1;
        java.util.Iterator $stack2;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: java.util.Iterator iterator()>();

        return $stack2;
    }

    public int getDepth()
    {
        ResolutionNode this;
        int $stack1;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: int depth>;

        return $stack1;
    }

    public java.util.List getRemoteRepositories()
    {
        ResolutionNode this;
        java.util.List $stack1;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List remoteRepositories>;

        return $stack1;
    }

    public boolean isActive()
    {
        ResolutionNode this;
        boolean $stack1;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack1 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: boolean active>;

        return $stack1;
    }

    public void enable()
    {
        ResolutionNode this;
        java.util.List $stack3, $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.artifact.resolver.ResolutionNode node, $r0, $r1, $r2;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r0.<org.apache.maven.artifact.resolver.ResolutionNode: boolean active> = 1;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack3 = $r1.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        if $stack3 == null goto label2;

        $r2 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack4 = $r2.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        node = (org.apache.maven.artifact.resolver.ResolutionNode) $stack7;

        virtualinvoke node.<org.apache.maven.artifact.resolver.ResolutionNode: void enable()>();

        goto label1;

     label2:
        return;
    }

    public void disable()
    {
        ResolutionNode this;
        java.util.List $stack3, $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack7;
        org.apache.maven.artifact.resolver.ResolutionNode node, $r0, $r1, $r2;

        this := @this: ResolutionNode;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r0.<org.apache.maven.artifact.resolver.ResolutionNode: boolean active> = 0;

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack3 = $r1.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        if $stack3 == null goto label2;

        $r2 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack4 = $r2.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List children>;

        l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        node = (org.apache.maven.artifact.resolver.ResolutionNode) $stack7;

        virtualinvoke node.<org.apache.maven.artifact.resolver.ResolutionNode: void disable()>();

        goto label1;

     label2:
        return;
    }

    public boolean filterTrail(org.apache.maven.artifact.resolver.filter.ArtifactFilter) throws org.apache.maven.artifact.versioning.OverConstrainedVersionException
    {
        org.apache.maven.artifact.resolver.filter.ArtifactFilter filter;
        ResolutionNode this;
        java.util.List $stack5;
        java.util.Iterator l3;
        boolean $stack7, $stack10, success;
        java.lang.Object $stack9;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        filter := @parameter0: org.apache.maven.artifact.resolver.filter.ArtifactFilter;

        success = 1;

        if filter == null goto label3;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack5 = specialinvoke $r0.<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List getTrail()>();

        l3 = interfaceinvoke $stack5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack9;

        $stack10 = interfaceinvoke filter.<org.apache.maven.artifact.resolver.filter.ArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>(artifact);

        if $stack10 != 0 goto label2;

        success = 0;

     label2:
        goto label1;

     label3:
        return success;
    }

    public java.lang.String toString()
    {
        ResolutionNode this;
        org.apache.maven.artifact.Artifact $stack2;
        java.lang.String $stack3, $stack12, $stack13;
        java.lang.StringBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $u0;
        int $stack6;
        boolean $stack9;
        org.apache.maven.artifact.resolver.ResolutionNode $r0, $r1, $r2;

        this := @this: ResolutionNode;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack2 = $r0.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact artifact>;

        $stack3 = virtualinvoke $stack2.<java.lang.Object: java.lang.String toString()>();

        $stack4 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r1 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack6 = $r1.<org.apache.maven.artifact.resolver.ResolutionNode: int depth>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r2 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $stack9 = $r2.<org.apache.maven.artifact.resolver.ResolutionNode: boolean active>;

        if $stack9 == 0 goto label1;

        $stack13 = "enabled";

        goto label2;

     label1:
        $stack13 = "disabled";

     label2:
        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack12;
    }

    public void setArtifact(org.apache.maven.artifact.Artifact)
    {
        ResolutionNode this;
        org.apache.maven.artifact.Artifact artifact;
        org.apache.maven.artifact.resolver.ResolutionNode $r0;

        this := @this: ResolutionNode;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        $r0 = (org.apache.maven.artifact.resolver.ResolutionNode) this;

        $r0.<org.apache.maven.artifact.resolver.ResolutionNode: org.apache.maven.artifact.Artifact artifact> = artifact;

        return;
    }
}
