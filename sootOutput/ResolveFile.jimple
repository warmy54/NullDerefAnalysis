public class ResolveFile extends java.lang.Object
{

    public void <init>()
    {
        ResolveFile this;

        this := @this: ResolveFile;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File resolveFile(java.io.File, java.lang.String)
    {
        java.io.File file, $stack11, $stack12;
        boolean $stack2, $stack5;
        java.lang.String $stack3, $stack4, baseDirectory, $stack8;
        java.lang.String[] $stack6;
        java.nio.file.Path $stack9, $stack10;

        file := @parameter0: java.io.File;

        baseDirectory := @parameter1: java.lang.String;

        if file != null goto label1;

        return null;

     label1:
        $stack2 = virtualinvoke file.<java.io.File: boolean isAbsolute()>();

        if $stack2 == 0 goto label2;

        return file;

     label2:
        $stack3 = virtualinvoke file.<java.io.File: java.lang.String getPath()>();

        $stack4 = <java.io.File: java.lang.String separator>;

        $stack5 = virtualinvoke $stack3.<java.lang.String: boolean startsWith(java.lang.String)>($stack4);

        if $stack5 == 0 goto label3;

        $stack12 = virtualinvoke file.<java.io.File: java.io.File getAbsoluteFile()>();

        return $stack12;

     label3:
        $stack6 = newarray (java.lang.String)[1];

        $stack8 = virtualinvoke file.<java.io.File: java.lang.String getPath()>();

        $stack6[0] = $stack8;

        $stack9 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(baseDirectory, $stack6);

        $stack10 = interfaceinvoke $stack9.<java.nio.file.Path: java.nio.file.Path normalize()>();

        $stack11 = interfaceinvoke $stack10.<java.nio.file.Path: java.io.File toFile()>();

        return $stack11;
    }
}
