public class Result extends java.lang.Object
{
    private final boolean errors;
    private final java.lang.Object value;
    private final java.lang.Iterable problems;
    static final boolean $assertionsDisabled;

    public static org.apache.maven.model.building.Result success(java.lang.Object)
    {
        java.lang.Object model;
        java.util.List $stack1;
        org.apache.maven.model.building.Result $stack2;

        model := @parameter0: java.lang.Object;

        $stack1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $stack2 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result success(java.lang.Object,java.lang.Iterable)>(model, $stack1);

        return $stack2;
    }

    public static org.apache.maven.model.building.Result success(java.lang.Object, java.lang.Iterable)
    {
        boolean $stack2, $stack4;
        org.apache.maven.model.building.Result $stack3;
        java.lang.Object model;
        java.lang.Iterable problems;
        java.lang.AssertionError $stack8;

        model := @parameter0: java.lang.Object;

        problems := @parameter1: java.lang.Iterable;

        $stack2 = <org.apache.maven.model.building.Result: boolean $assertionsDisabled>;

        if $stack2 != 0 goto label1;

        $stack4 = staticinvoke <org.apache.maven.model.building.Result: boolean hasErrors(java.lang.Iterable)>(problems);

        if $stack4 == 0 goto label1;

        $stack8 = new java.lang.AssertionError;

        specialinvoke $stack8.<java.lang.AssertionError: void <init>()>();

        throw $stack8;

     label1:
        $stack3 = new org.apache.maven.model.building.Result;

        specialinvoke $stack3.<org.apache.maven.model.building.Result: void <init>(boolean,java.lang.Object,java.lang.Iterable)>(0, model, problems);

        return $stack3;
    }

    public static transient org.apache.maven.model.building.Result success(java.lang.Object, org.apache.maven.model.building.Result[])
    {
        java.util.ArrayList $stack9;
        org.apache.maven.model.building.Result[] results;
        int l4, l5;
        java.lang.Object model, $stack16;
        org.apache.maven.model.building.Result $stack10, result1;
        java.lang.Iterable $stack11;
        java.util.Iterator l7;
        boolean $stack13;
        org.apache.maven.model.building.ModelProblem modelProblem;

        model := @parameter0: java.lang.Object;

        results := @parameter1: org.apache.maven.model.building.Result[];

        $stack9 = new java.util.ArrayList;

        specialinvoke $stack9.<java.util.ArrayList: void <init>()>();

        l4 = lengthof results;

        l5 = 0;

     label1:
        if l5 >= l4 goto label4;

        result1 = results[l5];

        $stack11 = virtualinvoke result1.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        l7 = interfaceinvoke $stack11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $stack13 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label3;

        $stack16 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        modelProblem = (org.apache.maven.model.building.ModelProblem) $stack16;

        interfaceinvoke $stack9.<java.util.List: boolean add(java.lang.Object)>(modelProblem);

        goto label2;

     label3:
        l5 = l5 + 1;

        goto label1;

     label4:
        $stack10 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result success(java.lang.Object,java.lang.Iterable)>(model, $stack9);

        return $stack10;
    }

    public static org.apache.maven.model.building.Result error(java.lang.Iterable)
    {
        java.lang.Iterable problems;
        org.apache.maven.model.building.Result $stack1;

        problems := @parameter0: java.lang.Iterable;

        $stack1 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result error(java.lang.Object,java.lang.Iterable)>(null, problems);

        return $stack1;
    }

    public static org.apache.maven.model.building.Result error(java.lang.Object)
    {
        java.lang.Object model;
        java.util.List $stack1;
        org.apache.maven.model.building.Result $stack2;

        model := @parameter0: java.lang.Object;

        $stack1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $stack2 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result error(java.lang.Object,java.lang.Iterable)>(model, $stack1);

        return $stack2;
    }

    public static org.apache.maven.model.building.Result error(org.apache.maven.model.building.Result)
    {
        org.apache.maven.model.building.Result result, $stack2;
        java.lang.Iterable $stack1;

        result := @parameter0: org.apache.maven.model.building.Result;

        $stack1 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        $stack2 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result error(java.lang.Iterable)>($stack1);

        return $stack2;
    }

    public static transient org.apache.maven.model.building.Result error(org.apache.maven.model.building.Result[])
    {
        java.util.ArrayList $stack8;
        org.apache.maven.model.building.Result[] results;
        int l3, l4;
        org.apache.maven.model.building.Result $stack9, result1;
        java.lang.Iterable $stack10;
        java.util.Iterator l6;
        boolean $stack12;
        java.lang.Object $stack15;
        org.apache.maven.model.building.ModelProblem modelProblem;

        results := @parameter0: org.apache.maven.model.building.Result[];

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        l3 = lengthof results;

        l4 = 0;

     label1:
        if l4 >= l3 goto label4;

        result1 = results[l4];

        $stack10 = virtualinvoke result1.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        l6 = interfaceinvoke $stack10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $stack12 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label3;

        $stack15 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        modelProblem = (org.apache.maven.model.building.ModelProblem) $stack15;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(modelProblem);

        goto label2;

     label3:
        l4 = l4 + 1;

        goto label1;

     label4:
        $stack9 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result error(java.lang.Iterable)>($stack8);

        return $stack9;
    }

    public static org.apache.maven.model.building.Result error(java.lang.Object, java.lang.Iterable)
    {
        org.apache.maven.model.building.Result $stack2;
        java.lang.Object model;
        java.lang.Iterable problems;

        model := @parameter0: java.lang.Object;

        problems := @parameter1: java.lang.Iterable;

        $stack2 = new org.apache.maven.model.building.Result;

        specialinvoke $stack2.<org.apache.maven.model.building.Result: void <init>(boolean,java.lang.Object,java.lang.Iterable)>(1, model, problems);

        return $stack2;
    }

    public static org.apache.maven.model.building.Result newResult(java.lang.Object, java.lang.Iterable)
    {
        org.apache.maven.model.building.Result $stack2;
        java.lang.Iterable problems;
        boolean $stack3;
        java.lang.Object model;

        model := @parameter0: java.lang.Object;

        problems := @parameter1: java.lang.Iterable;

        $stack2 = new org.apache.maven.model.building.Result;

        $stack3 = staticinvoke <org.apache.maven.model.building.Result: boolean hasErrors(java.lang.Iterable)>(problems);

        specialinvoke $stack2.<org.apache.maven.model.building.Result: void <init>(boolean,java.lang.Object,java.lang.Iterable)>($stack3, model, problems);

        return $stack2;
    }

    public static org.apache.maven.model.building.Result addProblem(org.apache.maven.model.building.Result, org.apache.maven.model.building.ModelProblem)
    {
        org.apache.maven.model.building.Result result, $stack3;
        org.apache.maven.model.building.ModelProblem problem;
        java.util.Set $stack2;

        result := @parameter0: org.apache.maven.model.building.Result;

        problem := @parameter1: org.apache.maven.model.building.ModelProblem;

        $stack2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(problem);

        $stack3 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result addProblems(org.apache.maven.model.building.Result,java.lang.Iterable)>(result, $stack2);

        return $stack3;
    }

    public static org.apache.maven.model.building.Result addProblems(org.apache.maven.model.building.Result, java.lang.Iterable)
    {
        java.util.ArrayList $stack5;
        java.lang.Iterable problems, $stack8;
        boolean $stack7, $stack10, $stack12, $stack15, $stack13;
        org.apache.maven.model.building.Result result, $stack11;
        java.lang.Object $stack14, $stack19, $stack22;
        java.util.Iterator l3;
        org.apache.maven.model.building.ModelProblem item;

        result := @parameter0: org.apache.maven.model.building.Result;

        problems := @parameter1: java.lang.Iterable;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        l3 = interfaceinvoke problems.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack22 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        item = (org.apache.maven.model.building.ModelProblem) $stack22;

        interfaceinvoke $stack5.<java.util.Collection: boolean add(java.lang.Object)>(item);

        goto label1;

     label2:
        $stack8 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        l3 = interfaceinvoke $stack8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $stack10 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label4;

        $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        item = (org.apache.maven.model.building.ModelProblem) $stack19;

        interfaceinvoke $stack5.<java.util.Collection: boolean add(java.lang.Object)>(item);

        goto label3;

     label4:
        $stack11 = new org.apache.maven.model.building.Result;

        $stack12 = virtualinvoke result.<org.apache.maven.model.building.Result: boolean hasErrors()>();

        if $stack12 != 0 goto label5;

        $stack15 = staticinvoke <org.apache.maven.model.building.Result: boolean hasErrors(java.lang.Iterable)>(problems);

        if $stack15 == 0 goto label6;

     label5:
        $stack13 = 1;

        goto label7;

     label6:
        $stack13 = 0;

     label7:
        $stack14 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Object get()>();

        specialinvoke $stack11.<org.apache.maven.model.building.Result: void <init>(boolean,java.lang.Object,java.lang.Iterable)>($stack13, $stack14, $stack5);

        return $stack11;
    }

    public static transient org.apache.maven.model.building.Result addProblems(org.apache.maven.model.building.Result, org.apache.maven.model.building.Result[])
    {
        java.util.ArrayList $stack9;
        org.apache.maven.model.building.Result[] results;
        int l4, l5;
        org.apache.maven.model.building.Result result, $stack10, result1;
        java.lang.Iterable $stack11;
        java.util.Iterator l7;
        boolean $stack13;
        java.lang.Object $stack16;
        org.apache.maven.model.building.ModelProblem modelProblem;

        result := @parameter0: org.apache.maven.model.building.Result;

        results := @parameter1: org.apache.maven.model.building.Result[];

        $stack9 = new java.util.ArrayList;

        specialinvoke $stack9.<java.util.ArrayList: void <init>()>();

        l4 = lengthof results;

        l5 = 0;

     label1:
        if l5 >= l4 goto label4;

        result1 = results[l5];

        $stack11 = virtualinvoke result1.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        l7 = interfaceinvoke $stack11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $stack13 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label3;

        $stack16 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        modelProblem = (org.apache.maven.model.building.ModelProblem) $stack16;

        interfaceinvoke $stack9.<java.util.List: boolean add(java.lang.Object)>(modelProblem);

        goto label2;

     label3:
        l5 = l5 + 1;

        goto label1;

     label4:
        $stack10 = staticinvoke <org.apache.maven.model.building.Result: org.apache.maven.model.building.Result addProblems(org.apache.maven.model.building.Result,java.lang.Iterable)>(result, $stack9);

        return $stack10;
    }

    public static org.apache.maven.model.building.Result newResultSet(java.lang.Iterable)
    {
        java.util.ArrayList $stack8, $stack9;
        java.lang.Iterable results, $stack16;
        java.util.Iterator l4, l6;
        boolean $stack11, $stack18, $stack19, hasErrors;
        org.apache.maven.model.building.Result $stack12, result;
        java.lang.Object $stack13, $stack14, $stack21;
        org.apache.maven.model.building.ModelProblem modelProblem;

        results := @parameter0: java.lang.Iterable;

        hasErrors = 0;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        $stack9 = new java.util.ArrayList;

        specialinvoke $stack9.<java.util.ArrayList: void <init>()>();

        l4 = interfaceinvoke results.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label5;

        $stack13 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        result = (org.apache.maven.model.building.Result) $stack13;

        $stack14 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Object get()>();

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>($stack14);

        $stack16 = virtualinvoke result.<org.apache.maven.model.building.Result: java.lang.Iterable getProblems()>();

        l6 = interfaceinvoke $stack16.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $stack18 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label3;

        $stack21 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        modelProblem = (org.apache.maven.model.building.ModelProblem) $stack21;

        interfaceinvoke $stack9.<java.util.List: boolean add(java.lang.Object)>(modelProblem);

        goto label2;

     label3:
        $stack19 = virtualinvoke result.<org.apache.maven.model.building.Result: boolean hasErrors()>();

        if $stack19 == 0 goto label4;

        hasErrors = 1;

     label4:
        goto label1;

     label5:
        $stack12 = new org.apache.maven.model.building.Result;

        specialinvoke $stack12.<org.apache.maven.model.building.Result: void <init>(boolean,java.lang.Object,java.lang.Iterable)>(hasErrors, $stack8, $stack9);

        return $stack12;
    }

    private static boolean hasErrors(java.lang.Iterable)
    {
        java.lang.Iterable problems;
        java.util.Iterator l1;
        boolean $stack4, $stack8, $stack11;
        java.lang.Object $stack5;
        org.apache.maven.model.building.ModelProblem input;
        org.apache.maven.model.building.ModelProblem$Severity $stack6, $stack7, $stack9, $stack10;

        problems := @parameter0: java.lang.Iterable;

        l1 = interfaceinvoke problems.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $stack4 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label4;

        $stack5 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        input = (org.apache.maven.model.building.ModelProblem) $stack5;

        $stack6 = interfaceinvoke input.<org.apache.maven.model.building.ModelProblem: org.apache.maven.model.building.ModelProblem$Severity getSeverity()>();

        $stack7 = <org.apache.maven.model.building.ModelProblem$Severity: org.apache.maven.model.building.ModelProblem$Severity ERROR>;

        $stack8 = virtualinvoke $stack6.<org.apache.maven.model.building.ModelProblem$Severity: boolean equals(java.lang.Object)>($stack7);

        if $stack8 != 0 goto label2;

        $stack9 = interfaceinvoke input.<org.apache.maven.model.building.ModelProblem: org.apache.maven.model.building.ModelProblem$Severity getSeverity()>();

        $stack10 = <org.apache.maven.model.building.ModelProblem$Severity: org.apache.maven.model.building.ModelProblem$Severity FATAL>;

        $stack11 = virtualinvoke $stack9.<org.apache.maven.model.building.ModelProblem$Severity: boolean equals(java.lang.Object)>($stack10);

        if $stack11 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label1;

     label4:
        return 0;
    }

    private void <init>(boolean, java.lang.Object, java.lang.Iterable)
    {
        Result this;
        boolean errors;
        java.lang.Object model;
        java.lang.Iterable problems;
        org.apache.maven.model.building.Result $r0, $r1, $r2;

        this := @this: Result;

        errors := @parameter0: boolean;

        model := @parameter1: java.lang.Object;

        problems := @parameter2: java.lang.Iterable;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.model.building.Result) this;

        $r0.<org.apache.maven.model.building.Result: boolean errors> = errors;

        $r1 = (org.apache.maven.model.building.Result) this;

        $r1.<org.apache.maven.model.building.Result: java.lang.Object value> = model;

        $r2 = (org.apache.maven.model.building.Result) this;

        $r2.<org.apache.maven.model.building.Result: java.lang.Iterable problems> = problems;

        return;
    }

    public java.lang.Iterable getProblems()
    {
        Result this;
        java.lang.Iterable $stack1;
        org.apache.maven.model.building.Result $r0;

        this := @this: Result;

        $r0 = (org.apache.maven.model.building.Result) this;

        $stack1 = $r0.<org.apache.maven.model.building.Result: java.lang.Iterable problems>;

        return $stack1;
    }

    public java.lang.Object get()
    {
        Result this;
        java.lang.Object $stack1;
        org.apache.maven.model.building.Result $r0;

        this := @this: Result;

        $r0 = (org.apache.maven.model.building.Result) this;

        $stack1 = $r0.<org.apache.maven.model.building.Result: java.lang.Object value>;

        return $stack1;
    }

    public boolean hasErrors()
    {
        Result this;
        boolean $stack1;
        org.apache.maven.model.building.Result $r0;

        this := @this: Result;

        $r0 = (org.apache.maven.model.building.Result) this;

        $stack1 = $r0.<org.apache.maven.model.building.Result: boolean errors>;

        return $stack1;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/apache/maven/model/building/Result;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.apache.maven.model.building.Result: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
