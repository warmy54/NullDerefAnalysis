public class SessionScope extends java.lang.Object implements com.google.inject.Scope
{
    private static final com.google.inject.Provider SEEDED_KEY_PROVIDER;
    private final java.lang.ThreadLocal values;

    public void <init>()
    {
        SessionScope this;
        java.lang.ThreadLocal $u0;
        org.apache.maven.session.scope.internal.SessionScope $r0;

        this := @this: SessionScope;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.lang.ThreadLocal;

        specialinvoke $u0.<java.lang.ThreadLocal: void <init>()>();

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $r0.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values> = $u0;

        return;
    }

    public void enter()
    {
        SessionScope this;
        java.lang.ThreadLocal $stack2, $stack6;
        java.lang.Object $stack3;
        java.util.LinkedList stack, $u0;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState $u1;
        org.apache.maven.session.scope.internal.SessionScope $r0, $r1;

        this := @this: SessionScope;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack2 = $r0.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        $stack3 = virtualinvoke $stack2.<java.lang.ThreadLocal: java.lang.Object get()>();

        stack = (java.util.LinkedList) $stack3;

        if stack != null goto label1;

        $u0 = new java.util.LinkedList;

        specialinvoke $u0.<java.util.LinkedList: void <init>()>();

        stack = $u0;

        $r1 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack6 = $r1.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>($u0);

     label1:
        $u1 = new org.apache.maven.session.scope.internal.SessionScope$ScopeState;

        specialinvoke $u1.<org.apache.maven.session.scope.internal.SessionScope$ScopeState: void <init>(org.apache.maven.session.scope.internal.SessionScope$1)>(null);

        virtualinvoke stack.<java.util.LinkedList: void addFirst(java.lang.Object)>($u1);

        return;
    }

    public void enter(org.apache.maven.session.scope.internal.SessionScope$Memento)
    {
        SessionScope this;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState $stack2;
        java.util.Map $stack3, $stack4;
        org.apache.maven.session.scope.internal.SessionScope$Memento memento;
        org.apache.maven.session.scope.internal.SessionScope $r0, $r1;

        this := @this: SessionScope;

        memento := @parameter0: org.apache.maven.session.scope.internal.SessionScope$Memento;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        virtualinvoke $r0.<org.apache.maven.session.scope.internal.SessionScope: void enter()>();

        $r1 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack2 = specialinvoke $r1.<org.apache.maven.session.scope.internal.SessionScope: org.apache.maven.session.scope.internal.SessionScope$ScopeState getScopeState()>();

        $stack3 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$100(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>($stack2);

        $stack4 = memento.<org.apache.maven.session.scope.internal.SessionScope$Memento: java.util.Map seeded>;

        interfaceinvoke $stack3.<java.util.Map: void putAll(java.util.Map)>($stack4);

        return;
    }

    private org.apache.maven.session.scope.internal.SessionScope$ScopeState getScopeState()
    {
        SessionScope this;
        java.lang.ThreadLocal $stack2;
        java.lang.Object $stack3, $stack6;
        java.util.LinkedList stack;
        boolean $stack5;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState $stack7;
        java.lang.IllegalStateException $u0;
        org.apache.maven.session.scope.internal.SessionScope $r0;

        this := @this: SessionScope;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack2 = $r0.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        $stack3 = virtualinvoke $stack2.<java.lang.ThreadLocal: java.lang.Object get()>();

        stack = (java.util.LinkedList) $stack3;

        if stack == null goto label1;

        $stack5 = virtualinvoke stack.<java.util.LinkedList: boolean isEmpty()>();

        if $stack5 == 0 goto label2;

     label1:
        $u0 = new java.lang.IllegalStateException;

        specialinvoke $u0.<java.lang.IllegalStateException: void <init>()>();

        throw $u0;

     label2:
        $stack6 = virtualinvoke stack.<java.util.LinkedList: java.lang.Object getFirst()>();

        $stack7 = (org.apache.maven.session.scope.internal.SessionScope$ScopeState) $stack6;

        return $stack7;
    }

    public void exit()
    {
        SessionScope this;
        java.lang.ThreadLocal $stack2, $stack8;
        java.lang.Object $stack3;
        java.util.LinkedList stack;
        boolean $stack5, $stack7;
        java.lang.IllegalStateException $u0;
        org.apache.maven.session.scope.internal.SessionScope $r0, $r1;

        this := @this: SessionScope;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack2 = $r0.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        $stack3 = virtualinvoke $stack2.<java.lang.ThreadLocal: java.lang.Object get()>();

        stack = (java.util.LinkedList) $stack3;

        if stack == null goto label1;

        $stack5 = virtualinvoke stack.<java.util.LinkedList: boolean isEmpty()>();

        if $stack5 == 0 goto label2;

     label1:
        $u0 = new java.lang.IllegalStateException;

        specialinvoke $u0.<java.lang.IllegalStateException: void <init>()>();

        throw $u0;

     label2:
        virtualinvoke stack.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $stack7 = virtualinvoke stack.<java.util.LinkedList: boolean isEmpty()>();

        if $stack7 == 0 goto label3;

        $r1 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack8 = $r1.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        virtualinvoke $stack8.<java.lang.ThreadLocal: void remove()>();

     label3:
        return;
    }

    public org.apache.maven.session.scope.internal.SessionScope$Memento memento()
    {
        SessionScope this;
        java.lang.ThreadLocal $stack2;
        java.lang.Object $stack3, $stack6;
        java.util.LinkedList stack;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState $stack7;
        java.util.Map $stack5;
        org.apache.maven.session.scope.internal.SessionScope$Memento $u0;
        org.apache.maven.session.scope.internal.SessionScope $r0;

        this := @this: SessionScope;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack2 = $r0.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        $stack3 = virtualinvoke $stack2.<java.lang.ThreadLocal: java.lang.Object get()>();

        stack = (java.util.LinkedList) $stack3;

        $u0 = new org.apache.maven.session.scope.internal.SessionScope$Memento;

        if stack == null goto label1;

        $stack6 = virtualinvoke stack.<java.util.LinkedList: java.lang.Object getFirst()>();

        $stack7 = (org.apache.maven.session.scope.internal.SessionScope$ScopeState) $stack6;

        $stack5 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$100(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>($stack7);

        goto label2;

     label1:
        $stack5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

     label2:
        specialinvoke $u0.<org.apache.maven.session.scope.internal.SessionScope$Memento: void <init>(java.util.Map)>($stack5);

        return $u0;
    }

    public void seed(java.lang.Class, com.google.inject.Provider)
    {
        SessionScope this;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState $stack3;
        java.util.Map $stack4;
        java.lang.Class clazz;
        com.google.inject.Key $stack5;
        com.google.inject.Provider value;
        org.apache.maven.session.scope.internal.SessionScope $r0;

        this := @this: SessionScope;

        clazz := @parameter0: java.lang.Class;

        value := @parameter1: com.google.inject.Provider;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.session.scope.internal.SessionScope: org.apache.maven.session.scope.internal.SessionScope$ScopeState getScopeState()>();

        $stack4 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$100(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>($stack3);

        $stack5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(clazz);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, value);

        return;
    }

    public void seed(java.lang.Class, java.lang.Object)
    {
        SessionScope this;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState $stack3;
        java.util.Map $stack4;
        java.lang.Class clazz;
        com.google.inject.Key $stack5;
        java.lang.Object value;
        com.google.inject.Provider $stack6;
        org.apache.maven.session.scope.internal.SessionScope $r0;

        this := @this: SessionScope;

        clazz := @parameter0: java.lang.Class;

        value := @parameter1: java.lang.Object;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack3 = specialinvoke $r0.<org.apache.maven.session.scope.internal.SessionScope: org.apache.maven.session.scope.internal.SessionScope$ScopeState getScopeState()>();

        $stack4 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$100(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>($stack3);

        $stack5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(clazz);

        $stack6 = staticinvoke <com.google.inject.util.Providers: com.google.inject.Provider of(java.lang.Object)>(value);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        return;
    }

    public com.google.inject.Provider scope(com.google.inject.Key, com.google.inject.Provider)
    {
        SessionScope this;
        com.google.inject.Key key;
        com.google.inject.Provider unscoped, $stack3;
        org.apache.maven.session.scope.internal.SessionScope $r0;

        this := @this: SessionScope;

        key := @parameter0: com.google.inject.Key;

        unscoped := @parameter1: com.google.inject.Provider;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack3 = staticinvoke <SessionScope$lambda_scope_1__309: com.google.inject.Provider bootstrap$(org.apache.maven.session.scope.internal.SessionScope,com.google.inject.Key,com.google.inject.Provider)>($r0, key, unscoped);

        return $stack3;
    }

    public static com.google.inject.Provider seededKeyProvider()
    {
        com.google.inject.Provider $stack0;

        $stack0 = <org.apache.maven.session.scope.internal.SessionScope: com.google.inject.Provider SEEDED_KEY_PROVIDER>;

        return $stack0;
    }

    private java.lang.Object lambda$scope$1(com.google.inject.Key, com.google.inject.Provider)
    {
        SessionScope this;
        java.lang.ThreadLocal $stack7;
        java.lang.Object $stack8, $stack16, $stack18, $stack25, provided;
        java.util.LinkedList stack;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $u0;
        com.google.inject.Key key;
        java.lang.String $stack14;
        boolean $stack15;
        org.apache.maven.session.scope.internal.SessionScope$ScopeState state;
        java.util.Map $stack17, $stack19, $stack23;
        com.google.inject.Provider seeded, unscoped;
        com.google.inject.OutOfScopeException $u1;
        org.apache.maven.session.scope.internal.SessionScope $r0;
        java.lang.Throwable $r1;

        this := @this: SessionScope;

        key := @parameter0: com.google.inject.Key;

        unscoped := @parameter1: com.google.inject.Provider;

        $r0 = (org.apache.maven.session.scope.internal.SessionScope) this;

        $stack7 = $r0.<org.apache.maven.session.scope.internal.SessionScope: java.lang.ThreadLocal values>;

        $stack8 = virtualinvoke $stack7.<java.lang.ThreadLocal: java.lang.Object get()>();

        stack = (java.util.LinkedList) $stack8;

        if stack == null goto label1;

        $stack15 = virtualinvoke stack.<java.util.LinkedList: boolean isEmpty()>();

        if $stack15 == 0 goto label2;

     label1:
        $u1 = new com.google.inject.OutOfScopeException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(key);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" outside of a scoping block");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<com.google.inject.OutOfScopeException: void <init>(java.lang.String)>($stack14);

        $r1 = (java.lang.Throwable) $u1;

        throw $r1;

     label2:
        $stack16 = virtualinvoke stack.<java.util.LinkedList: java.lang.Object getFirst()>();

        state = (org.apache.maven.session.scope.internal.SessionScope$ScopeState) $stack16;

        $stack17 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$100(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>(state);

        $stack18 = interfaceinvoke $stack17.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        seeded = (com.google.inject.Provider) $stack18;

        if seeded == null goto label3;

        $stack25 = interfaceinvoke seeded.<com.google.inject.Provider: java.lang.Object get()>();

        return $stack25;

     label3:
        $stack19 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$200(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>(state);

        provided = interfaceinvoke $stack19.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        if provided != null goto label4;

        if unscoped == null goto label4;

        provided = interfaceinvoke unscoped.<com.google.inject.Provider: java.lang.Object get()>();

        $stack23 = staticinvoke <org.apache.maven.session.scope.internal.SessionScope$ScopeState: java.util.Map access$200(org.apache.maven.session.scope.internal.SessionScope$ScopeState)>(state);

        interfaceinvoke $stack23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, provided);

     label4:
        return provided;
    }

    private static java.lang.Object lambda$static$0()
    {
        java.lang.IllegalStateException $stack0;

        $stack0 = new java.lang.IllegalStateException;

        specialinvoke $stack0.<java.lang.IllegalStateException: void <init>()>();

        throw $stack0;
    }

    static void <clinit>()
    {
        com.google.inject.Provider $stack0;

        $stack0 = staticinvoke <SessionScope$lambda_static_0__310: com.google.inject.Provider bootstrap$()>();

        <org.apache.maven.session.scope.internal.SessionScope: com.google.inject.Provider SEEDED_KEY_PROVIDER> = $stack0;

        return;
    }
}
