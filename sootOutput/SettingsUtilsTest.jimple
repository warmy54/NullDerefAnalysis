public class SettingsUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        SettingsUtilsTest this;

        this := @this: SettingsUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testShouldAppendRecessivePluginGroupIds()
    {
        org.apache.maven.settings.Settings $stack4, $stack5;
        java.util.List pluginGroups;
        int $stack8;
        java.lang.Object $stack10, $stack12, $stack14;
        SettingsUtilsTest this;

        this := @this: SettingsUtilsTest;

        $stack4 = new org.apache.maven.settings.Settings;

        specialinvoke $stack4.<org.apache.maven.settings.Settings: void <init>()>();

        virtualinvoke $stack4.<org.apache.maven.settings.Settings: void addPluginGroup(java.lang.String)>("org.apache.maven.plugins");

        virtualinvoke $stack4.<org.apache.maven.settings.Settings: void addPluginGroup(java.lang.String)>("org.codehaus.modello");

        $stack5 = new org.apache.maven.settings.Settings;

        specialinvoke $stack5.<org.apache.maven.settings.Settings: void <init>()>();

        virtualinvoke $stack5.<org.apache.maven.settings.Settings: void addPluginGroup(java.lang.String)>("org.codehaus.plexus");

        staticinvoke <org.apache.maven.settings.SettingsUtils: void merge(org.apache.maven.settings.Settings,org.apache.maven.settings.Settings,java.lang.String)>($stack4, $stack5, "global-level");

        pluginGroups = virtualinvoke $stack4.<org.apache.maven.settings.Settings: java.util.List getPluginGroups()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotNull(java.lang.Object)>(pluginGroups);

        $stack8 = interfaceinvoke pluginGroups.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>(3, $stack8);

        $stack10 = interfaceinvoke pluginGroups.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.maven.plugins", $stack10);

        $stack12 = interfaceinvoke pluginGroups.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.codehaus.modello", $stack12);

        $stack14 = interfaceinvoke pluginGroups.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("org.codehaus.plexus", $stack14);

        return;
    }

    public void testRoundTripProfiles()
    {
        java.util.Random $stack12;
        org.apache.maven.settings.Profile $stack13, i#11;
        java.lang.StringBuilder $stack14, $stack15, $stack18, $stack22, $stack23, $stack26, $stack29, $stack30, $stack33, $stack35, $stack36, $stack39, $stack42, $stack43, $stack46, $stack48, $stack49, $stack52, $stack55, $stack56, $stack59, $stack61, $stack62, $stack65, $stack67, $stack68, $stack71, $stack73, $stack74, $stack77, $stack152, $stack153, $stack156, $stack158, $stack159, $stack162, $stack164, $stack165, $stack168, $stack174, $stack175, $stack178, $stack180, $stack181, $stack184, $stack186, $stack187, $stack190, $stack195, $stack196, $stack199, $stack201, $stack202, $stack205;
        long $stack16, $stack24, $stack31, $stack37, $stack44, $stack50, $stack57, $stack63, $stack69, $stack75, $stack154, $stack160, $stack166, $stack176, $stack182, $stack188, $stack197, $stack203;
        java.lang.String $stack17, $stack19, $stack25, $stack27, $stack32, $stack34, $stack38, $stack40, $stack45, $stack47, $stack51, $stack53, $stack58, $stack60, $stack64, $stack66, $stack70, $stack72, $stack76, $stack78, $stack87, $stack88, $stack90, $stack92, $stack95, $stack98, $stack101, $stack104, $stack107, $stack110, $stack113, $stack116, $stack119, $stack122, $stack125, $stack128, $stack131, $stack134, $stack137, $stack140, $stack155, $stack157, $stack161, $stack163, $stack167, $stack169, $stack177, $stack179, $stack183, $stack185, $stack189, $stack191, $stack198, $stack200, $stack204, $stack206;
        org.apache.maven.settings.Activation $stack20, $stack89, $stack91, $stack93, $stack96, $stack99, $stack102, $stack105, $stack108, $stack111, $stack114, $stack117, $stack120, $stack123, $stack126, $stack129, $stack132, $stack135, $stack138;
        boolean $stack21;
        org.apache.maven.settings.ActivationFile $stack28, $stack94, $stack97, $stack100, $stack103;
        org.apache.maven.settings.ActivationProperty $stack41, $stack106, $stack109, $stack112, $stack115;
        org.apache.maven.settings.ActivationOS $stack54, $stack118, $stack121, $stack124, $stack127, $stack130, $stack133, $stack136, $stack139;
        java.util.Properties $stack79, $stack141, $stack142;
        java.util.ArrayList $stack82, $stack84;
        org.apache.maven.model.Profile $stack85;
        java.util.List $stack143, $stack145, $stack147, $stack149;
        int $stack144, $stack146, $stack148, $stack150, count, i;
        org.apache.maven.settings.Repository $stack151, $stack173;
        SettingsUtilsTest this;

        this := @this: SettingsUtilsTest;

        $stack12 = new java.util.Random;

        specialinvoke $stack12.<java.util.Random: void <init>()>();

        $stack13 = new org.apache.maven.settings.Profile;

        specialinvoke $stack13.<org.apache.maven.settings.Profile: void <init>()>();

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id");

        $stack16 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack17 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack16);

        $stack18 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack13.<org.apache.maven.settings.Profile: void setId(java.lang.String)>($stack19);

        $stack20 = new org.apache.maven.settings.Activation;

        specialinvoke $stack20.<org.apache.maven.settings.Activation: void <init>()>();

        $stack21 = virtualinvoke $stack12.<java.util.Random: boolean nextBoolean()>();

        virtualinvoke $stack20.<org.apache.maven.settings.Activation: void setActiveByDefault(boolean)>($stack21);

        $stack22 = new java.lang.StringBuilder;

        specialinvoke $stack22.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk");

        $stack24 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack25 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack24);

        $stack26 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack20.<org.apache.maven.settings.Activation: void setJdk(java.lang.String)>($stack27);

        $stack28 = new org.apache.maven.settings.ActivationFile;

        specialinvoke $stack28.<org.apache.maven.settings.ActivationFile: void <init>()>();

        $stack29 = new java.lang.StringBuilder;

        specialinvoke $stack29.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exists");

        $stack31 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack32 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack31);

        $stack33 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack32);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack28.<org.apache.maven.settings.ActivationFile: void setExists(java.lang.String)>($stack34);

        $stack35 = new java.lang.StringBuilder;

        specialinvoke $stack35.<java.lang.StringBuilder: void <init>()>();

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing");

        $stack37 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack38 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack37);

        $stack39 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack38);

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack28.<org.apache.maven.settings.ActivationFile: void setMissing(java.lang.String)>($stack40);

        virtualinvoke $stack20.<org.apache.maven.settings.Activation: void setFile(org.apache.maven.settings.ActivationFile)>($stack28);

        $stack41 = new org.apache.maven.settings.ActivationProperty;

        specialinvoke $stack41.<org.apache.maven.settings.ActivationProperty: void <init>()>();

        $stack42 = new java.lang.StringBuilder;

        specialinvoke $stack42.<java.lang.StringBuilder: void <init>()>();

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $stack44 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack45 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack44);

        $stack46 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack45);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack41.<org.apache.maven.settings.ActivationProperty: void setName(java.lang.String)>($stack47);

        $stack48 = new java.lang.StringBuilder;

        specialinvoke $stack48.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value");

        $stack50 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack51 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack50);

        $stack52 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack51);

        $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack41.<org.apache.maven.settings.ActivationProperty: void setValue(java.lang.String)>($stack53);

        virtualinvoke $stack20.<org.apache.maven.settings.Activation: void setProperty(org.apache.maven.settings.ActivationProperty)>($stack41);

        $stack54 = new org.apache.maven.settings.ActivationOS;

        specialinvoke $stack54.<org.apache.maven.settings.ActivationOS: void <init>()>();

        $stack55 = new java.lang.StringBuilder;

        specialinvoke $stack55.<java.lang.StringBuilder: void <init>()>();

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("arch");

        $stack57 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack58 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack57);

        $stack59 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack58);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack54.<org.apache.maven.settings.ActivationOS: void setArch(java.lang.String)>($stack60);

        $stack61 = new java.lang.StringBuilder;

        specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>();

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("family");

        $stack63 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack64 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack63);

        $stack65 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack64);

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack54.<org.apache.maven.settings.ActivationOS: void setFamily(java.lang.String)>($stack66);

        $stack67 = new java.lang.StringBuilder;

        specialinvoke $stack67.<java.lang.StringBuilder: void <init>()>();

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $stack69 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack70 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack69);

        $stack71 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack70);

        $stack72 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack54.<org.apache.maven.settings.ActivationOS: void setName(java.lang.String)>($stack72);

        $stack73 = new java.lang.StringBuilder;

        specialinvoke $stack73.<java.lang.StringBuilder: void <init>()>();

        $stack74 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version");

        $stack75 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack76 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack75);

        $stack77 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack76);

        $stack78 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack54.<org.apache.maven.settings.ActivationOS: void setVersion(java.lang.String)>($stack78);

        virtualinvoke $stack20.<org.apache.maven.settings.Activation: void setOs(org.apache.maven.settings.ActivationOS)>($stack54);

        virtualinvoke $stack13.<org.apache.maven.settings.Profile: void setActivation(org.apache.maven.settings.Activation)>($stack20);

        $stack79 = new java.util.Properties;

        specialinvoke $stack79.<java.util.Properties: void <init>()>();

        count = virtualinvoke $stack12.<java.util.Random: int nextInt(int)>(10);

        i = 0;

     label1:
        if i >= count goto label2;

        $stack195 = new java.lang.StringBuilder;

        specialinvoke $stack195.<java.lang.StringBuilder: void <init>()>();

        $stack196 = virtualinvoke $stack195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $stack197 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack198 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack197);

        $stack199 = virtualinvoke $stack196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack198);

        $stack200 = virtualinvoke $stack199.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack201 = new java.lang.StringBuilder;

        specialinvoke $stack201.<java.lang.StringBuilder: void <init>()>();

        $stack202 = virtualinvoke $stack201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value");

        $stack203 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack204 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack203);

        $stack205 = virtualinvoke $stack202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack204);

        $stack206 = virtualinvoke $stack205.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack79.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($stack200, $stack206);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke $stack13.<org.apache.maven.settings.Profile: void setProperties(java.util.Properties)>($stack79);

        count = virtualinvoke $stack12.<java.util.Random: int nextInt(int)>(3);

        $stack82 = new java.util.ArrayList;

        specialinvoke $stack82.<java.util.ArrayList: void <init>()>();

        i = 0;

     label3:
        if i >= count goto label4;

        $stack173 = new org.apache.maven.settings.Repository;

        specialinvoke $stack173.<org.apache.maven.settings.Repository: void <init>()>();

        $stack174 = new java.lang.StringBuilder;

        specialinvoke $stack174.<java.lang.StringBuilder: void <init>()>();

        $stack175 = virtualinvoke $stack174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id");

        $stack176 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack177 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack176);

        $stack178 = virtualinvoke $stack175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack177);

        $stack179 = virtualinvoke $stack178.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack173.<org.apache.maven.settings.Repository: void setId(java.lang.String)>($stack179);

        $stack180 = new java.lang.StringBuilder;

        specialinvoke $stack180.<java.lang.StringBuilder: void <init>()>();

        $stack181 = virtualinvoke $stack180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $stack182 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack183 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack182);

        $stack184 = virtualinvoke $stack181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack183);

        $stack185 = virtualinvoke $stack184.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack173.<org.apache.maven.settings.Repository: void setName(java.lang.String)>($stack185);

        $stack186 = new java.lang.StringBuilder;

        specialinvoke $stack186.<java.lang.StringBuilder: void <init>()>();

        $stack187 = virtualinvoke $stack186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("url");

        $stack188 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack189 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack188);

        $stack190 = virtualinvoke $stack187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack189);

        $stack191 = virtualinvoke $stack190.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack173.<org.apache.maven.settings.Repository: void setUrl(java.lang.String)>($stack191);

        interfaceinvoke $stack82.<java.util.List: boolean add(java.lang.Object)>($stack173);

        i = i + 1;

        goto label3;

     label4:
        virtualinvoke $stack13.<org.apache.maven.settings.Profile: void setRepositories(java.util.List)>($stack82);

        count = virtualinvoke $stack12.<java.util.Random: int nextInt(int)>(3);

        $stack84 = new java.util.ArrayList;

        specialinvoke $stack84.<java.util.ArrayList: void <init>()>();

        i = 0;

     label5:
        if i >= count goto label6;

        $stack151 = new org.apache.maven.settings.Repository;

        specialinvoke $stack151.<org.apache.maven.settings.Repository: void <init>()>();

        $stack152 = new java.lang.StringBuilder;

        specialinvoke $stack152.<java.lang.StringBuilder: void <init>()>();

        $stack153 = virtualinvoke $stack152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id");

        $stack154 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack155 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack154);

        $stack156 = virtualinvoke $stack153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack155);

        $stack157 = virtualinvoke $stack156.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack151.<org.apache.maven.settings.Repository: void setId(java.lang.String)>($stack157);

        $stack158 = new java.lang.StringBuilder;

        specialinvoke $stack158.<java.lang.StringBuilder: void <init>()>();

        $stack159 = virtualinvoke $stack158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $stack160 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack161 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack160);

        $stack162 = virtualinvoke $stack159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack161);

        $stack163 = virtualinvoke $stack162.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack151.<org.apache.maven.settings.Repository: void setName(java.lang.String)>($stack163);

        $stack164 = new java.lang.StringBuilder;

        specialinvoke $stack164.<java.lang.StringBuilder: void <init>()>();

        $stack165 = virtualinvoke $stack164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("url");

        $stack166 = virtualinvoke $stack12.<java.util.Random: long nextLong()>();

        $stack167 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($stack166);

        $stack168 = virtualinvoke $stack165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack167);

        $stack169 = virtualinvoke $stack168.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack151.<org.apache.maven.settings.Repository: void setUrl(java.lang.String)>($stack169);

        interfaceinvoke $stack84.<java.util.List: boolean add(java.lang.Object)>($stack151);

        i = i + 1;

        goto label5;

     label6:
        virtualinvoke $stack13.<org.apache.maven.settings.Profile: void setPluginRepositories(java.util.List)>($stack84);

        $stack85 = staticinvoke <org.apache.maven.settings.SettingsUtils: org.apache.maven.model.Profile convertFromSettingsProfile(org.apache.maven.settings.Profile)>($stack13);

        i#11 = staticinvoke <org.apache.maven.settings.SettingsUtils: org.apache.maven.settings.Profile convertToSettingsProfile(org.apache.maven.model.Profile)>($stack85);

        $stack87 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: java.lang.String getId()>();

        $stack88 = virtualinvoke i#11.<org.apache.maven.settings.Profile: java.lang.String getId()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack88);

        $stack89 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack90 = virtualinvoke $stack89.<org.apache.maven.settings.Activation: java.lang.String getJdk()>();

        $stack91 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack92 = virtualinvoke $stack91.<org.apache.maven.settings.Activation: java.lang.String getJdk()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack90, $stack92);

        $stack93 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack94 = virtualinvoke $stack93.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationFile getFile()>();

        $stack95 = virtualinvoke $stack94.<org.apache.maven.settings.ActivationFile: java.lang.String getExists()>();

        $stack96 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack97 = virtualinvoke $stack96.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationFile getFile()>();

        $stack98 = virtualinvoke $stack97.<org.apache.maven.settings.ActivationFile: java.lang.String getExists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack98);

        $stack99 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack100 = virtualinvoke $stack99.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationFile getFile()>();

        $stack101 = virtualinvoke $stack100.<org.apache.maven.settings.ActivationFile: java.lang.String getMissing()>();

        $stack102 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack103 = virtualinvoke $stack102.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationFile getFile()>();

        $stack104 = virtualinvoke $stack103.<org.apache.maven.settings.ActivationFile: java.lang.String getMissing()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack101, $stack104);

        $stack105 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack106 = virtualinvoke $stack105.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationProperty getProperty()>();

        $stack107 = virtualinvoke $stack106.<org.apache.maven.settings.ActivationProperty: java.lang.String getName()>();

        $stack108 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack109 = virtualinvoke $stack108.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationProperty getProperty()>();

        $stack110 = virtualinvoke $stack109.<org.apache.maven.settings.ActivationProperty: java.lang.String getName()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack107, $stack110);

        $stack111 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack112 = virtualinvoke $stack111.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationProperty getProperty()>();

        $stack113 = virtualinvoke $stack112.<org.apache.maven.settings.ActivationProperty: java.lang.String getValue()>();

        $stack114 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack115 = virtualinvoke $stack114.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationProperty getProperty()>();

        $stack116 = virtualinvoke $stack115.<org.apache.maven.settings.ActivationProperty: java.lang.String getValue()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack113, $stack116);

        $stack117 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack118 = virtualinvoke $stack117.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack119 = virtualinvoke $stack118.<org.apache.maven.settings.ActivationOS: java.lang.String getArch()>();

        $stack120 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack121 = virtualinvoke $stack120.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack122 = virtualinvoke $stack121.<org.apache.maven.settings.ActivationOS: java.lang.String getArch()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack119, $stack122);

        $stack123 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack124 = virtualinvoke $stack123.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack125 = virtualinvoke $stack124.<org.apache.maven.settings.ActivationOS: java.lang.String getFamily()>();

        $stack126 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack127 = virtualinvoke $stack126.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack128 = virtualinvoke $stack127.<org.apache.maven.settings.ActivationOS: java.lang.String getFamily()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack125, $stack128);

        $stack129 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack130 = virtualinvoke $stack129.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack131 = virtualinvoke $stack130.<org.apache.maven.settings.ActivationOS: java.lang.String getName()>();

        $stack132 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack133 = virtualinvoke $stack132.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack134 = virtualinvoke $stack133.<org.apache.maven.settings.ActivationOS: java.lang.String getName()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack131, $stack134);

        $stack135 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack136 = virtualinvoke $stack135.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack137 = virtualinvoke $stack136.<org.apache.maven.settings.ActivationOS: java.lang.String getVersion()>();

        $stack138 = virtualinvoke i#11.<org.apache.maven.settings.Profile: org.apache.maven.settings.Activation getActivation()>();

        $stack139 = virtualinvoke $stack138.<org.apache.maven.settings.Activation: org.apache.maven.settings.ActivationOS getOs()>();

        $stack140 = virtualinvoke $stack139.<org.apache.maven.settings.ActivationOS: java.lang.String getVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack137, $stack140);

        $stack141 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: java.util.Properties getProperties()>();

        $stack142 = virtualinvoke i#11.<org.apache.maven.settings.Profile: java.util.Properties getProperties()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack141, $stack142);

        $stack143 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: java.util.List getRepositories()>();

        $stack144 = interfaceinvoke $stack143.<java.util.List: int size()>();

        $stack145 = virtualinvoke i#11.<org.apache.maven.settings.Profile: java.util.List getRepositories()>();

        $stack146 = interfaceinvoke $stack145.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack144, $stack146);

        $stack147 = virtualinvoke $stack13.<org.apache.maven.settings.Profile: java.util.List getPluginRepositories()>();

        $stack148 = interfaceinvoke $stack147.<java.util.List: int size()>();

        $stack149 = virtualinvoke i#11.<org.apache.maven.settings.Profile: java.util.List getPluginRepositories()>();

        $stack150 = interfaceinvoke $stack149.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack148, $stack150);

        return;
    }
}
