public class SettingsXmlConfigurationProcessor extends java.lang.Object implements org.apache.maven.cli.configuration.ConfigurationProcessor
{
    public static final java.lang.String HINT;
    public static final java.lang.String USER_HOME;
    public static final java.io.File USER_MAVEN_CONFIGURATION_HOME;
    public static final java.io.File DEFAULT_USER_SETTINGS_FILE;
    public static final java.io.File DEFAULT_GLOBAL_SETTINGS_FILE;
    private static final org.slf4j.Logger LOGGER;
    private org.apache.maven.settings.building.SettingsBuilder settingsBuilder;
    private org.apache.maven.settings.crypto.SettingsDecrypter settingsDecrypter;

    public void <init>()
    {
        SettingsXmlConfigurationProcessor this;

        this := @this: SettingsXmlConfigurationProcessor;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(org.apache.maven.cli.CliRequest) throws java.lang.Exception
    {
        org.apache.maven.cli.CliRequest cliRequest;
        org.apache.commons.cli.CommandLine commandLine;
        java.lang.String workingDirectory, $stack54, $stack55, $stack73, $stack93, $stack95, $stack104;
        org.apache.maven.execution.MavenExecutionRequest request;
        boolean $stack14, $stack15, $stack42, $stack44, $stack49, $stack75, $stack97;
        java.util.Properties $stack21, $stack23;
        org.apache.maven.eventspy.internal.EventSpyDispatcher $stack25, $stack38, $stack57, $stack62;
        SettingsXmlConfigurationProcessor this;
        org.slf4j.Logger $stack26, $stack31, $stack43, $stack45, $stack46, $stack50, $stack52;
        org.apache.maven.settings.building.SettingsSource $stack28, $stack33;
        java.io.File $stack29, $stack34, userSettingsFile, globalSettingsFile, $u0, $u3;
        java.lang.Object $stack30, $stack35, $stack51;
        org.apache.maven.settings.building.SettingsBuilder $stack36;
        org.apache.maven.settings.building.SettingsBuildingResult settingsResult;
        org.apache.maven.settings.Settings $stack39;
        java.util.List $stack41, $stack47;
        java.util.Iterator l9;
        org.apache.maven.settings.building.SettingsProblem problem;
        java.lang.StringBuilder $stack91, $stack92, $stack102, $stack103, $u1, $u4;
        java.io.FileNotFoundException $u2, $u5;
        org.apache.maven.settings.building.DefaultSettingsBuildingRequest $u6;
        org.apache.maven.settings.building.SettingsBuildingRequest $r0, $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r13;
        org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor $r6, $r10, $r12, $r14;
        org.apache.maven.building.Source $r7, $r11;

        this := @this: SettingsXmlConfigurationProcessor;

        cliRequest := @parameter0: org.apache.maven.cli.CliRequest;

        commandLine = virtualinvoke cliRequest.<org.apache.maven.cli.CliRequest: org.apache.commons.cli.CommandLine getCommandLine()>();

        workingDirectory = virtualinvoke cliRequest.<org.apache.maven.cli.CliRequest: java.lang.String getWorkingDirectory()>();

        request = virtualinvoke cliRequest.<org.apache.maven.cli.CliRequest: org.apache.maven.execution.MavenExecutionRequest getRequest()>();

        $stack14 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(115);

        if $stack14 == 0 goto label1;

        $u0 = new java.io.File;

        $stack95 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(115);

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack95);

        userSettingsFile = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u0, workingDirectory);

        $stack97 = virtualinvoke userSettingsFile.<java.io.File: boolean isFile()>();

        if $stack97 != 0 goto label2;

        $u2 = new java.io.FileNotFoundException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack102 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified user settings file does not exist: ");

        $stack103 = virtualinvoke $stack102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(userSettingsFile);

        $stack104 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($stack104);

        throw $u2;

     label1:
        userSettingsFile = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.io.File DEFAULT_USER_SETTINGS_FILE>;

     label2:
        $stack15 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("gs");

        if $stack15 == 0 goto label3;

        $u3 = new java.io.File;

        $stack73 = virtualinvoke commandLine.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("gs");

        specialinvoke $u3.<java.io.File: void <init>(java.lang.String)>($stack73);

        globalSettingsFile = staticinvoke <org.apache.maven.cli.ResolveFile: java.io.File resolveFile(java.io.File,java.lang.String)>($u3, workingDirectory);

        $stack75 = virtualinvoke globalSettingsFile.<java.io.File: boolean isFile()>();

        if $stack75 != 0 goto label4;

        $u5 = new java.io.FileNotFoundException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack91 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified global settings file does not exist: ");

        $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(globalSettingsFile);

        $stack93 = virtualinvoke $stack92.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($stack93);

        throw $u5;

     label3:
        globalSettingsFile = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.io.File DEFAULT_GLOBAL_SETTINGS_FILE>;

     label4:
        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setGlobalSettingsFile(java.io.File)>(globalSettingsFile);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setUserSettingsFile(java.io.File)>(userSettingsFile);

        $u6 = new org.apache.maven.settings.building.DefaultSettingsBuildingRequest;

        specialinvoke $u6.<org.apache.maven.settings.building.DefaultSettingsBuildingRequest: void <init>()>();

        $r0 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        interfaceinvoke $r0.<org.apache.maven.settings.building.SettingsBuildingRequest: org.apache.maven.settings.building.SettingsBuildingRequest setGlobalSettingsFile(java.io.File)>(globalSettingsFile);

        $r1 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        interfaceinvoke $r1.<org.apache.maven.settings.building.SettingsBuildingRequest: org.apache.maven.settings.building.SettingsBuildingRequest setUserSettingsFile(java.io.File)>(userSettingsFile);

        $stack21 = virtualinvoke cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties getSystemProperties()>();

        $r2 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        interfaceinvoke $r2.<org.apache.maven.settings.building.SettingsBuildingRequest: org.apache.maven.settings.building.SettingsBuildingRequest setSystemProperties(java.util.Properties)>($stack21);

        $stack23 = virtualinvoke cliRequest.<org.apache.maven.cli.CliRequest: java.util.Properties getUserProperties()>();

        $r3 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        interfaceinvoke $r3.<org.apache.maven.settings.building.SettingsBuildingRequest: org.apache.maven.settings.building.SettingsBuildingRequest setUserProperties(java.util.Properties)>($stack23);

        $stack25 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.eventspy.internal.EventSpyDispatcher getEventSpyDispatcher()>();

        if $stack25 == null goto label5;

        $stack62 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.eventspy.internal.EventSpyDispatcher getEventSpyDispatcher()>();

        virtualinvoke $stack62.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>($u6);

     label5:
        $stack26 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        $r4 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        $stack28 = interfaceinvoke $r4.<org.apache.maven.settings.building.SettingsBuildingRequest: org.apache.maven.settings.building.SettingsSource getGlobalSettingsSource()>();

        $r5 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        $stack29 = interfaceinvoke $r5.<org.apache.maven.settings.building.SettingsBuildingRequest: java.io.File getGlobalSettingsFile()>();

        $r6 = (org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor) this;

        $r7 = (org.apache.maven.building.Source) $stack28;

        $stack30 = specialinvoke $r6.<org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.lang.Object getLocation(org.apache.maven.building.Source,java.io.File)>($r7, $stack29);

        interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading global settings from \'{}\'", $stack30);

        $stack31 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        $r8 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        $stack33 = interfaceinvoke $r8.<org.apache.maven.settings.building.SettingsBuildingRequest: org.apache.maven.settings.building.SettingsSource getUserSettingsSource()>();

        $r9 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        $stack34 = interfaceinvoke $r9.<org.apache.maven.settings.building.SettingsBuildingRequest: java.io.File getUserSettingsFile()>();

        $r10 = (org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor) this;

        $r11 = (org.apache.maven.building.Source) $stack33;

        $stack35 = specialinvoke $r10.<org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.lang.Object getLocation(org.apache.maven.building.Source,java.io.File)>($r11, $stack34);

        interfaceinvoke $stack31.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading user settings from \'{}\'", $stack35);

        $r12 = (org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor) this;

        $stack36 = $r12.<org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.apache.maven.settings.building.SettingsBuilder settingsBuilder>;

        $r13 = (org.apache.maven.settings.building.SettingsBuildingRequest) $u6;

        settingsResult = interfaceinvoke $stack36.<org.apache.maven.settings.building.SettingsBuilder: org.apache.maven.settings.building.SettingsBuildingResult build(org.apache.maven.settings.building.SettingsBuildingRequest)>($r13);

        $stack38 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.eventspy.internal.EventSpyDispatcher getEventSpyDispatcher()>();

        if $stack38 == null goto label6;

        $stack57 = interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.eventspy.internal.EventSpyDispatcher getEventSpyDispatcher()>();

        virtualinvoke $stack57.<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>(settingsResult);

     label6:
        $stack39 = interfaceinvoke settingsResult.<org.apache.maven.settings.building.SettingsBuildingResult: org.apache.maven.settings.Settings getEffectiveSettings()>();

        $r14 = (org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor) this;

        specialinvoke $r14.<org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.apache.maven.execution.MavenExecutionRequest populateFromSettings(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.settings.Settings)>(request, $stack39);

        $stack41 = interfaceinvoke settingsResult.<org.apache.maven.settings.building.SettingsBuildingResult: java.util.List getProblems()>();

        $stack42 = interfaceinvoke $stack41.<java.util.List: boolean isEmpty()>();

        if $stack42 != 0 goto label9;

        $stack43 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        $stack44 = interfaceinvoke $stack43.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $stack44 == 0 goto label9;

        $stack45 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        interfaceinvoke $stack45.<org.slf4j.Logger: void warn(java.lang.String)>("");

        $stack46 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        interfaceinvoke $stack46.<org.slf4j.Logger: void warn(java.lang.String)>("Some problems were encountered while building the effective settings");

        $stack47 = interfaceinvoke settingsResult.<org.apache.maven.settings.building.SettingsBuildingResult: java.util.List getProblems()>();

        l9 = interfaceinvoke $stack47.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $stack49 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack49 == 0 goto label8;

        $stack51 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        problem = (org.apache.maven.settings.building.SettingsProblem) $stack51;

        $stack52 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        $stack54 = interfaceinvoke problem.<org.apache.maven.settings.building.SettingsProblem: java.lang.String getMessage()>();

        $stack55 = interfaceinvoke problem.<org.apache.maven.settings.building.SettingsProblem: java.lang.String getLocation()>();

        interfaceinvoke $stack52.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("{} @ {}", $stack54, $stack55);

        goto label7;

     label8:
        $stack50 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER>;

        interfaceinvoke $stack50.<org.slf4j.Logger: void warn(java.lang.String)>("");

     label9:
        return;
    }

    private org.apache.maven.execution.MavenExecutionRequest populateFromSettings(org.apache.maven.execution.MavenExecutionRequest, org.apache.maven.settings.Settings) throws org.apache.maven.execution.MavenExecutionRequestPopulationException
    {
        org.apache.maven.settings.Settings settings;
        org.apache.maven.execution.MavenExecutionRequest request;
        boolean $stack10, $stack12, $stack20, $stack26, $stack31, $stack37, $stack41, $stack44, $stack58, $stack23;
        java.util.List $stack14, $stack18, $stack21, $stack24, $stack27, $stack29, $stack35, remoteRepositories, pluginRepositories#19;
        java.lang.String $stack16, $stack36;
        java.lang.Object $stack32, $stack45, $stack49, $stack53, $stack57, $stack62;
        org.apache.maven.model.Profile $stack33;
        org.apache.maven.artifact.repository.ArtifactRepository $stack46, $stack50;
        java.lang.Throwable $stack66, $stack67;
        SettingsXmlConfigurationProcessor this;
        java.util.Iterator l3, pluginRepositories, remoteRepository#20;
        org.apache.maven.settings.Server server;
        org.apache.maven.settings.Proxy server#9;
        org.apache.maven.settings.Mirror server#12;
        org.apache.maven.settings.Profile server#15;
        org.apache.maven.settings.Repository remoteRepository, pluginRepository#21;

        this := @this: SettingsXmlConfigurationProcessor;

        request := @parameter0: org.apache.maven.execution.MavenExecutionRequest;

        settings := @parameter1: org.apache.maven.settings.Settings;

        if settings != null goto label01;

        return request;

     label01:
        $stack10 = virtualinvoke settings.<org.apache.maven.settings.Settings: boolean isOffline()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setOffline(boolean)>($stack10);

        $stack12 = virtualinvoke settings.<org.apache.maven.settings.Settings: boolean isInteractiveMode()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setInteractiveMode(boolean)>($stack12);

        $stack14 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getPluginGroups()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setPluginGroups(java.util.List)>($stack14);

        $stack16 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.lang.String getLocalRepository()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepositoryPath(java.lang.String)>($stack16);

        $stack18 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getServers()>();

        l3 = interfaceinvoke $stack18.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack20 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label03;

        $stack62 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server = (org.apache.maven.settings.Server) $stack62;

        server = virtualinvoke server.<org.apache.maven.settings.Server: org.apache.maven.settings.Server clone()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addServer(org.apache.maven.settings.Server)>(server);

        goto label02;

     label03:
        $stack21 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getProxies()>();

        l3 = interfaceinvoke $stack21.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $stack23 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label06;

        $stack57 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server#9 = (org.apache.maven.settings.Proxy) $stack57;

        $stack58 = virtualinvoke server#9.<org.apache.maven.settings.Proxy: boolean isActive()>();

        if $stack58 != 0 goto label05;

        goto label04;

     label05:
        server#9 = virtualinvoke server#9.<org.apache.maven.settings.Proxy: org.apache.maven.settings.Proxy clone()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addProxy(org.apache.maven.settings.Proxy)>(server#9);

        goto label04;

     label06:
        $stack24 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getMirrors()>();

        l3 = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack26 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label08;

        $stack53 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server#12 = (org.apache.maven.settings.Mirror) $stack53;

        server#12 = virtualinvoke server#12.<org.apache.maven.settings.Mirror: org.apache.maven.settings.Mirror clone()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addMirror(org.apache.maven.settings.Mirror)>(server#12);

        goto label07;

     label08:
        $stack27 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getActiveProfiles()>();

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setActiveProfiles(java.util.List)>($stack27);

        $stack29 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getProfiles()>();

        l3 = interfaceinvoke $stack29.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $stack31 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label22;

        $stack32 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        server#15 = (org.apache.maven.settings.Profile) $stack32;

        $stack33 = staticinvoke <org.apache.maven.settings.SettingsUtils: org.apache.maven.model.Profile convertFromSettingsProfile(org.apache.maven.settings.Profile)>(server#15);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addProfile(org.apache.maven.model.Profile)>($stack33);

        $stack35 = virtualinvoke settings.<org.apache.maven.settings.Settings: java.util.List getActiveProfiles()>();

        $stack36 = virtualinvoke server#15.<org.apache.maven.settings.Profile: java.lang.String getId()>();

        $stack37 = interfaceinvoke $stack35.<java.util.List: boolean contains(java.lang.Object)>($stack36);

        if $stack37 == 0 goto label21;

        remoteRepositories = virtualinvoke server#15.<org.apache.maven.settings.Profile: java.util.List getRepositories()>();

        pluginRepositories = interfaceinvoke remoteRepositories.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $stack41 = interfaceinvoke pluginRepositories.<java.util.Iterator: boolean hasNext()>();

        if $stack41 == 0 goto label15;

        $stack49 = interfaceinvoke pluginRepositories.<java.util.Iterator: java.lang.Object next()>();

        remoteRepository = (org.apache.maven.settings.Repository) $stack49;

     label11:
        $stack50 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.settings.Repository)>(remoteRepository);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addRemoteRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack50);

     label12:
        goto label14;

     label13:
        $stack67 := @caughtexception;

     label14:
        goto label10;

     label15:
        pluginRepositories#19 = virtualinvoke server#15.<org.apache.maven.settings.Profile: java.util.List getPluginRepositories()>();

        remoteRepository#20 = interfaceinvoke pluginRepositories#19.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $stack44 = interfaceinvoke remoteRepository#20.<java.util.Iterator: boolean hasNext()>();

        if $stack44 == 0 goto label21;

        $stack45 = interfaceinvoke remoteRepository#20.<java.util.Iterator: java.lang.Object next()>();

        pluginRepository#21 = (org.apache.maven.settings.Repository) $stack45;

     label17:
        $stack46 = staticinvoke <org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.settings.Repository)>(pluginRepository#21);

        interfaceinvoke request.<org.apache.maven.execution.MavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)>($stack46);

     label18:
        goto label20;

     label19:
        $stack66 := @caughtexception;

     label20:
        goto label16;

     label21:
        goto label09;

     label22:
        return request;

        catch org.apache.maven.artifact.InvalidRepositoryException from label11 to label12 with label13;
        catch org.apache.maven.artifact.InvalidRepositoryException from label17 to label18 with label19;
    }

    private java.lang.Object getLocation(org.apache.maven.building.Source, java.io.File)
    {
        org.apache.maven.building.Source source;
        java.io.File defaultLocation;
        java.lang.String $stack3;
        SettingsXmlConfigurationProcessor this;

        this := @this: SettingsXmlConfigurationProcessor;

        source := @parameter0: org.apache.maven.building.Source;

        defaultLocation := @parameter1: java.io.File;

        if source == null goto label1;

        $stack3 = interfaceinvoke source.<org.apache.maven.building.Source: java.lang.String getLocation()>();

        return $stack3;

     label1:
        return defaultLocation;
    }

    static void <clinit>()
    {
        java.lang.String $stack0, $stack2, $stack6;
        java.io.File $stack1, $stack3, $stack4, $stack5;
        org.slf4j.Logger $stack7;

        <SettingsXmlConfigurationProcessor: java.lang.String HINT> = "settings";

        $stack0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.lang.String USER_HOME> = $stack0;

        $stack1 = new java.io.File;

        $stack2 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.lang.String USER_HOME>;

        specialinvoke $stack1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack2, ".m2");

        <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.io.File USER_MAVEN_CONFIGURATION_HOME> = $stack1;

        $stack3 = new java.io.File;

        $stack4 = <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.io.File USER_MAVEN_CONFIGURATION_HOME>;

        specialinvoke $stack3.<java.io.File: void <init>(java.io.File,java.lang.String)>($stack4, "settings.xml");

        <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.io.File DEFAULT_USER_SETTINGS_FILE> = $stack3;

        $stack5 = new java.io.File;

        $stack6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("maven.conf");

        specialinvoke $stack5.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack6, "settings.xml");

        <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: java.io.File DEFAULT_GLOBAL_SETTINGS_FILE> = $stack5;

        $stack7 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor;");

        <org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.slf4j.Logger LOGGER> = $stack7;

        return;
    }
}
