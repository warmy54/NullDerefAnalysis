public class SimpleLogger extends org.slf4j.helpers.MarkerIgnoringBase
{
    private static final long serialVersionUID;
    private static long START_TIME;
    protected static final int LOG_LEVEL_TRACE;
    protected static final int LOG_LEVEL_DEBUG;
    protected static final int LOG_LEVEL_INFO;
    protected static final int LOG_LEVEL_WARN;
    protected static final int LOG_LEVEL_ERROR;
    protected static final int LOG_LEVEL_OFF;
    private static boolean INITIALIZED;
    private static final org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS;
    protected int currentLogLevel;
    private transient java.lang.String shortLogName;
    public static final java.lang.String SYSTEM_PREFIX;
    public static final java.lang.String LOG_KEY_PREFIX;
    public static final java.lang.String CACHE_OUTPUT_STREAM_STRING_KEY;
    public static final java.lang.String WARN_LEVEL_STRING_KEY;
    public static final java.lang.String LEVEL_IN_BRACKETS_KEY;
    public static final java.lang.String LOG_FILE_KEY;
    public static final java.lang.String SHOW_SHORT_LOG_NAME_KEY;
    public static final java.lang.String SHOW_LOG_NAME_KEY;
    public static final java.lang.String SHOW_THREAD_NAME_KEY;
    public static final java.lang.String DATE_TIME_FORMAT_KEY;
    public static final java.lang.String SHOW_DATE_TIME_KEY;
    public static final java.lang.String DEFAULT_LOG_LEVEL_KEY;

    static void lazyInit()
    {
        boolean $stack0;

        $stack0 = <org.slf4j.impl.SimpleLogger: boolean INITIALIZED>;

        if $stack0 == 0 goto label1;

        return;

     label1:
        <org.slf4j.impl.SimpleLogger: boolean INITIALIZED> = 1;

        staticinvoke <org.slf4j.impl.SimpleLogger: void init()>();

        return;
    }

    static void init()
    {
        org.slf4j.impl.SimpleLoggerConfiguration $stack0;

        $stack0 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        virtualinvoke $stack0.<org.slf4j.impl.SimpleLoggerConfiguration: void init()>();

        return;
    }

    void <init>(java.lang.String)
    {
        SimpleLogger this;
        java.lang.String name, levelString;
        org.slf4j.impl.SimpleLoggerConfiguration $stack4;
        int $stack5, $stack6;
        org.slf4j.impl.SimpleLogger $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: SimpleLogger;

        name := @parameter0: java.lang.String;

        specialinvoke this.<org.slf4j.helpers.MarkerIgnoringBase: void <init>()>();

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $r0.<org.slf4j.impl.SimpleLogger: int currentLogLevel> = 20;

        $r1 = (org.slf4j.impl.SimpleLogger) this;

        $r1.<org.slf4j.impl.SimpleLogger: java.lang.String shortLogName> = null;

        $r2 = (org.slf4j.impl.SimpleLogger) this;

        $r2.<org.slf4j.impl.SimpleLogger: java.lang.String name> = name;

        $r3 = (org.slf4j.impl.SimpleLogger) this;

        levelString = virtualinvoke $r3.<org.slf4j.impl.SimpleLogger: java.lang.String recursivelyComputeLevelString()>();

        if levelString == null goto label1;

        $stack6 = staticinvoke <org.slf4j.impl.SimpleLoggerConfiguration: int stringToLevel(java.lang.String)>(levelString);

        $r4 = (org.slf4j.impl.SimpleLogger) this;

        $r4.<org.slf4j.impl.SimpleLogger: int currentLogLevel> = $stack6;

        goto label2;

     label1:
        $stack4 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack5 = $stack4.<org.slf4j.impl.SimpleLoggerConfiguration: int defaultLogLevel>;

        $r5 = (org.slf4j.impl.SimpleLogger) this;

        $r5.<org.slf4j.impl.SimpleLogger: int currentLogLevel> = $stack5;

     label2:
        return;
    }

    java.lang.String recursivelyComputeLevelString()
    {
        SimpleLogger this;
        org.slf4j.impl.SimpleLoggerConfiguration $stack8;
        java.lang.StringBuilder $stack9, $stack10, $u0;
        java.lang.String $stack11, $stack13, tempName, levelString;
        int indexOfLastDot;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        tempName = $r0.<org.slf4j.impl.SimpleLogger: java.lang.String name>;

        levelString = null;

        indexOfLastDot = virtualinvoke tempName.<java.lang.String: int length()>();

     label1:
        if levelString != null goto label2;

        if indexOfLastDot <= -1 goto label2;

        tempName = virtualinvoke tempName.<java.lang.String: java.lang.String substring(int,int)>(0, indexOfLastDot);

        $stack8 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.slf4j.simpleLogger.log.");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tempName);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        levelString = virtualinvoke $stack8.<org.slf4j.impl.SimpleLoggerConfiguration: java.lang.String getStringProperty(java.lang.String,java.lang.String)>($stack11, null);

        $stack13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(tempName);

        indexOfLastDot = virtualinvoke $stack13.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        goto label1;

     label2:
        return levelString;
    }

    private void log(int, java.lang.String, java.lang.Throwable)
    {
        SimpleLogger this;
        int level;
        boolean $stack6, $stack9, $stack13, $stack17, $stack20, $stack22, $stack11;
        org.slf4j.impl.SimpleLoggerConfiguration $stack8, $stack12, $stack16, $stack19, $stack21, $stack55, $stack10;
        java.lang.String levelStr, message, $stack24, $stack25, $stack33, $stack34, $stack35, $stack38, $stack52, $stack62;
        java.lang.Throwable t;
        java.lang.StringBuilder $stack26, $stack36, $u0;
        java.lang.Thread $stack51;
        java.text.DateFormat $stack56;
        long $stack57, $stack58, $stack59;
        org.slf4j.impl.SimpleLogger $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: SimpleLogger;

        level := @parameter0: int;

        message := @parameter1: java.lang.String;

        t := @parameter2: java.lang.Throwable;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack6 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(level);

        if $stack6 != 0 goto label1;

        return;

     label1:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>(int)>(32);

        $stack8 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack9 = $stack8.<org.slf4j.impl.SimpleLoggerConfiguration: boolean showDateTime>;

        if $stack9 == 0 goto label3;

        $stack55 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack56 = $stack55.<org.slf4j.impl.SimpleLoggerConfiguration: java.text.DateFormat dateFormatter>;

        if $stack56 == null goto label2;

        $r1 = (org.slf4j.impl.SimpleLogger) this;

        $stack62 = specialinvoke $r1.<org.slf4j.impl.SimpleLogger: java.lang.String getFormattedDate()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label3;

     label2:
        $stack57 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $stack58 = <org.slf4j.impl.SimpleLogger: long START_TIME>;

        $stack59 = $stack57 - $stack58;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack59);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label3:
        $stack10 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack11 = $stack10.<org.slf4j.impl.SimpleLoggerConfiguration: boolean showThreadName>;

        if $stack11 == 0 goto label4;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $stack51 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $stack52 = virtualinvoke $stack51.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

     label4:
        $stack12 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack13 = $stack12.<org.slf4j.impl.SimpleLoggerConfiguration: boolean levelInBrackets>;

        if $stack13 == 0 goto label5;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label5:
        $r2 = (org.slf4j.impl.SimpleLogger) this;

        levelStr = virtualinvoke $r2.<org.slf4j.impl.SimpleLogger: java.lang.String renderLevel(int)>(level);

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(levelStr);

        $stack16 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack17 = $stack16.<org.slf4j.impl.SimpleLoggerConfiguration: boolean levelInBrackets>;

        if $stack17 == 0 goto label6;

        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label6:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $stack19 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack20 = $stack19.<org.slf4j.impl.SimpleLoggerConfiguration: boolean showShortLogName>;

        if $stack20 == 0 goto label8;

        $r3 = (org.slf4j.impl.SimpleLogger) this;

        $stack33 = $r3.<org.slf4j.impl.SimpleLogger: java.lang.String shortLogName>;

        if $stack33 != null goto label7;

        $r4 = (org.slf4j.impl.SimpleLogger) this;

        $stack38 = specialinvoke $r4.<org.slf4j.impl.SimpleLogger: java.lang.String computeShortName()>();

        $r5 = (org.slf4j.impl.SimpleLogger) this;

        $r5.<org.slf4j.impl.SimpleLogger: java.lang.String shortLogName> = $stack38;

     label7:
        $r6 = (org.slf4j.impl.SimpleLogger) this;

        $stack34 = $r6.<org.slf4j.impl.SimpleLogger: java.lang.String shortLogName>;

        $stack35 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($stack34);

        $stack36 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

        virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        goto label9;

     label8:
        $stack21 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack22 = $stack21.<org.slf4j.impl.SimpleLoggerConfiguration: boolean showLogName>;

        if $stack22 == 0 goto label9;

        $r7 = (org.slf4j.impl.SimpleLogger) this;

        $stack24 = $r7.<org.slf4j.impl.SimpleLogger: java.lang.String name>;

        $stack25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($stack24);

        $stack26 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

     label9:
        virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $r8 = (org.slf4j.impl.SimpleLogger) this;

        virtualinvoke $r8.<org.slf4j.impl.SimpleLogger: void write(java.lang.StringBuilder,java.lang.Throwable)>($u0, t);

        return;
    }

    protected java.lang.String renderLevel(int)
    {
        int level;
        org.slf4j.impl.SimpleLoggerConfiguration $stack2;
        java.lang.String $stack3, $stack9;
        java.lang.IllegalStateException $stack4;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8;
        SimpleLogger this;

        this := @this: SimpleLogger;

        level := @parameter0: int;

        lookupswitch(level)
        {
            case 0: goto label1;
            case 10: goto label2;
            case 20: goto label3;
            case 30: goto label4;
            case 40: goto label5;
            default: goto label6;
        };

     label1:
        return "TRACE";

     label2:
        return "DEBUG";

     label3:
        return "INFO";

     label4:
        $stack2 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack3 = $stack2.<org.slf4j.impl.SimpleLoggerConfiguration: java.lang.String warnLevelString>;

        return $stack3;

     label5:
        return "ERROR";

     label6:
        $stack4 = new java.lang.IllegalStateException;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized level [");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(level);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack9);

        throw $stack4;
    }

    void write(java.lang.StringBuilder, java.lang.Throwable)
    {
        org.slf4j.impl.SimpleLoggerConfiguration $stack6, $stack9;
        org.slf4j.impl.OutputChoice $stack7;
        java.io.PrintStream targetStream;
        java.lang.StringBuilder buf;
        java.lang.String $stack10;
        SimpleLogger this;
        java.lang.Throwable t, $stack12;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        buf := @parameter0: java.lang.StringBuilder;

        t := @parameter1: java.lang.Throwable;

        $stack6 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack7 = $stack6.<org.slf4j.impl.SimpleLoggerConfiguration: org.slf4j.impl.OutputChoice outputChoice>;

        targetStream = virtualinvoke $stack7.<org.slf4j.impl.OutputChoice: java.io.PrintStream getTargetPrintStream()>();

        $stack9 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        entermonitor $stack9;

     label1:
        $stack10 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke targetStream.<java.io.PrintStream: void println(java.lang.String)>($stack10);

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: void writeThrowable(java.lang.Throwable,java.io.PrintStream)>(t, targetStream);

        virtualinvoke targetStream.<java.io.PrintStream: void flush()>();

        exitmonitor $stack9;

     label2:
        goto label5;

     label3:
        $stack12 := @caughtexception;

        exitmonitor $stack9;

     label4:
        throw $stack12;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void writeThrowable(java.lang.Throwable, java.io.PrintStream)
    {
        java.lang.Throwable t;
        java.io.PrintStream targetStream;
        SimpleLogger this;

        this := @this: SimpleLogger;

        t := @parameter0: java.lang.Throwable;

        targetStream := @parameter1: java.io.PrintStream;

        if t == null goto label1;

        virtualinvoke t.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(targetStream);

     label1:
        return;
    }

    private java.lang.String getFormattedDate()
    {
        java.util.Date $stack5;
        org.slf4j.impl.SimpleLoggerConfiguration $stack6, $stack8;
        java.text.DateFormat $stack7, $stack9;
        java.lang.String dateText;
        java.lang.Throwable $stack12;
        SimpleLogger this;

        this := @this: SimpleLogger;

        $stack5 = new java.util.Date;

        specialinvoke $stack5.<java.util.Date: void <init>()>();

        $stack6 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack7 = $stack6.<org.slf4j.impl.SimpleLoggerConfiguration: java.text.DateFormat dateFormatter>;

        entermonitor $stack7;

     label1:
        $stack8 = <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS>;

        $stack9 = $stack8.<org.slf4j.impl.SimpleLoggerConfiguration: java.text.DateFormat dateFormatter>;

        dateText = virtualinvoke $stack9.<java.text.DateFormat: java.lang.String format(java.util.Date)>($stack5);

        exitmonitor $stack7;

     label2:
        goto label5;

     label3:
        $stack12 := @caughtexception;

        exitmonitor $stack7;

     label4:
        throw $stack12;

     label5:
        return dateText;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String computeShortName()
    {
        SimpleLogger this;
        java.lang.String $stack1, $stack2, $stack5;
        int $stack3, $stack4;
        org.slf4j.impl.SimpleLogger $r0, $r1;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack2 = $r0.<org.slf4j.impl.SimpleLogger: java.lang.String name>;

        $r1 = (org.slf4j.impl.SimpleLogger) this;

        $stack1 = $r1.<org.slf4j.impl.SimpleLogger: java.lang.String name>;

        $stack3 = virtualinvoke $stack1.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $stack4 = $stack3 + 1;

        $stack5 = virtualinvoke $stack2.<java.lang.String: java.lang.String substring(int)>($stack4);

        return $stack5;
    }

    private void formatAndLog(int, java.lang.String, java.lang.Object, java.lang.Object)
    {
        SimpleLogger this;
        int level;
        boolean $stack6;
        java.lang.String format, $stack8;
        java.lang.Object arg1, arg2;
        org.slf4j.helpers.FormattingTuple tp;
        java.lang.Throwable $stack9;
        org.slf4j.impl.SimpleLogger $r0, $r1;

        this := @this: SimpleLogger;

        level := @parameter0: int;

        format := @parameter1: java.lang.String;

        arg1 := @parameter2: java.lang.Object;

        arg2 := @parameter3: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack6 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(level);

        if $stack6 != 0 goto label1;

        return;

     label1:
        tp = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>(format, arg1, arg2);

        $stack8 = virtualinvoke tp.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        $stack9 = virtualinvoke tp.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        $r1 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r1.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(level, $stack8, $stack9);

        return;
    }

    private transient void formatAndLog(int, java.lang.String, java.lang.Object[])
    {
        SimpleLogger this;
        int level;
        boolean $stack5;
        java.lang.String format, $stack7;
        java.lang.Object[] arguments;
        org.slf4j.helpers.FormattingTuple tp;
        java.lang.Throwable $stack8;
        org.slf4j.impl.SimpleLogger $r0, $r1;

        this := @this: SimpleLogger;

        level := @parameter0: int;

        format := @parameter1: java.lang.String;

        arguments := @parameter2: java.lang.Object[];

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack5 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(level);

        if $stack5 != 0 goto label1;

        return;

     label1:
        tp = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(format, arguments);

        $stack7 = virtualinvoke tp.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        $stack8 = virtualinvoke tp.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        $r1 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r1.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(level, $stack7, $stack8);

        return;
    }

    protected boolean isLevelEnabled(int)
    {
        int logLevel, $stack2;
        SimpleLogger this;
        boolean $stack3;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        logLevel := @parameter0: int;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack2 = $r0.<org.slf4j.impl.SimpleLogger: int currentLogLevel>;

        if logLevel < $stack2 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public boolean isTraceEnabled()
    {
        SimpleLogger this;
        boolean $stack1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack1 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(0);

        return $stack1;
    }

    public void trace(java.lang.String)
    {
        SimpleLogger this;
        java.lang.String msg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(0, msg, null);

        return;
    }

    public void trace(java.lang.String, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object param1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        param1 := @parameter1: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(0, format, param1, null);

        return;
    }

    public void trace(java.lang.String, java.lang.Object, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object param1, param2;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        param1 := @parameter1: java.lang.Object;

        param2 := @parameter2: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(0, format, param1, param2);

        return;
    }

    public transient void trace(java.lang.String, java.lang.Object[])
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object[] argArray;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        argArray := @parameter1: java.lang.Object[];

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object[])>(0, format, argArray);

        return;
    }

    public void trace(java.lang.String, java.lang.Throwable)
    {
        SimpleLogger this;
        java.lang.String msg;
        java.lang.Throwable t;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        t := @parameter1: java.lang.Throwable;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(0, msg, t);

        return;
    }

    public boolean isDebugEnabled()
    {
        SimpleLogger this;
        boolean $stack1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack1 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(10);

        return $stack1;
    }

    public void debug(java.lang.String)
    {
        SimpleLogger this;
        java.lang.String msg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(10, msg, null);

        return;
    }

    public void debug(java.lang.String, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object param1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        param1 := @parameter1: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(10, format, param1, null);

        return;
    }

    public void debug(java.lang.String, java.lang.Object, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object param1, param2;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        param1 := @parameter1: java.lang.Object;

        param2 := @parameter2: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(10, format, param1, param2);

        return;
    }

    public transient void debug(java.lang.String, java.lang.Object[])
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object[] argArray;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        argArray := @parameter1: java.lang.Object[];

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object[])>(10, format, argArray);

        return;
    }

    public void debug(java.lang.String, java.lang.Throwable)
    {
        SimpleLogger this;
        java.lang.String msg;
        java.lang.Throwable t;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        t := @parameter1: java.lang.Throwable;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(10, msg, t);

        return;
    }

    public boolean isInfoEnabled()
    {
        SimpleLogger this;
        boolean $stack1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack1 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(20);

        return $stack1;
    }

    public void info(java.lang.String)
    {
        SimpleLogger this;
        java.lang.String msg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(20, msg, null);

        return;
    }

    public void info(java.lang.String, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object arg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        arg := @parameter1: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(20, format, arg, null);

        return;
    }

    public void info(java.lang.String, java.lang.Object, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object arg1, arg2;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        arg1 := @parameter1: java.lang.Object;

        arg2 := @parameter2: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(20, format, arg1, arg2);

        return;
    }

    public transient void info(java.lang.String, java.lang.Object[])
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object[] argArray;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        argArray := @parameter1: java.lang.Object[];

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object[])>(20, format, argArray);

        return;
    }

    public void info(java.lang.String, java.lang.Throwable)
    {
        SimpleLogger this;
        java.lang.String msg;
        java.lang.Throwable t;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        t := @parameter1: java.lang.Throwable;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(20, msg, t);

        return;
    }

    public boolean isWarnEnabled()
    {
        SimpleLogger this;
        boolean $stack1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack1 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(30);

        return $stack1;
    }

    public void warn(java.lang.String)
    {
        SimpleLogger this;
        java.lang.String msg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(30, msg, null);

        return;
    }

    public void warn(java.lang.String, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object arg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        arg := @parameter1: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(30, format, arg, null);

        return;
    }

    public void warn(java.lang.String, java.lang.Object, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object arg1, arg2;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        arg1 := @parameter1: java.lang.Object;

        arg2 := @parameter2: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(30, format, arg1, arg2);

        return;
    }

    public transient void warn(java.lang.String, java.lang.Object[])
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object[] argArray;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        argArray := @parameter1: java.lang.Object[];

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object[])>(30, format, argArray);

        return;
    }

    public void warn(java.lang.String, java.lang.Throwable)
    {
        SimpleLogger this;
        java.lang.String msg;
        java.lang.Throwable t;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        t := @parameter1: java.lang.Throwable;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(30, msg, t);

        return;
    }

    public boolean isErrorEnabled()
    {
        SimpleLogger this;
        boolean $stack1;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack1 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(40);

        return $stack1;
    }

    public void error(java.lang.String)
    {
        SimpleLogger this;
        java.lang.String msg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(40, msg, null);

        return;
    }

    public void error(java.lang.String, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object arg;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        arg := @parameter1: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(40, format, arg, null);

        return;
    }

    public void error(java.lang.String, java.lang.Object, java.lang.Object)
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object arg1, arg2;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        arg1 := @parameter1: java.lang.Object;

        arg2 := @parameter2: java.lang.Object;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>(40, format, arg1, arg2);

        return;
    }

    public transient void error(java.lang.String, java.lang.Object[])
    {
        SimpleLogger this;
        java.lang.String format;
        java.lang.Object[] argArray;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        format := @parameter0: java.lang.String;

        argArray := @parameter1: java.lang.Object[];

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object[])>(40, format, argArray);

        return;
    }

    public void error(java.lang.String, java.lang.Throwable)
    {
        SimpleLogger this;
        java.lang.String msg;
        java.lang.Throwable t;
        org.slf4j.impl.SimpleLogger $r0;

        this := @this: SimpleLogger;

        msg := @parameter0: java.lang.String;

        t := @parameter1: java.lang.Throwable;

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r0.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(40, msg, t);

        return;
    }

    public void log(org.slf4j.event.LoggingEvent)
    {
        org.slf4j.event.LoggingEvent event;
        org.slf4j.event.Level $stack4;
        int levelInt;
        SimpleLogger this;
        boolean $stack6;
        java.lang.String $stack7, $stack11;
        java.lang.Object[] $stack8;
        java.lang.Throwable $stack9, $stack12;
        org.slf4j.helpers.FormattingTuple tp;
        org.slf4j.impl.SimpleLogger $r0, $r1;

        this := @this: SimpleLogger;

        event := @parameter0: org.slf4j.event.LoggingEvent;

        $stack4 = interfaceinvoke event.<org.slf4j.event.LoggingEvent: org.slf4j.event.Level getLevel()>();

        levelInt = virtualinvoke $stack4.<org.slf4j.event.Level: int toInt()>();

        $r0 = (org.slf4j.impl.SimpleLogger) this;

        $stack6 = virtualinvoke $r0.<org.slf4j.impl.SimpleLogger: boolean isLevelEnabled(int)>(levelInt);

        if $stack6 != 0 goto label1;

        return;

     label1:
        $stack7 = interfaceinvoke event.<org.slf4j.event.LoggingEvent: java.lang.String getMessage()>();

        $stack8 = interfaceinvoke event.<org.slf4j.event.LoggingEvent: java.lang.Object[] getArgumentArray()>();

        $stack9 = interfaceinvoke event.<org.slf4j.event.LoggingEvent: java.lang.Throwable getThrowable()>();

        tp = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)>($stack7, $stack8, $stack9);

        $stack11 = virtualinvoke tp.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        $stack12 = interfaceinvoke event.<org.slf4j.event.LoggingEvent: java.lang.Throwable getThrowable()>();

        $r1 = (org.slf4j.impl.SimpleLogger) this;

        specialinvoke $r1.<org.slf4j.impl.SimpleLogger: void log(int,java.lang.String,java.lang.Throwable)>(levelInt, $stack11, $stack12);

        return;
    }

    static void <clinit>()
    {
        long $stack0;
        org.slf4j.impl.SimpleLoggerConfiguration $stack1;

        <SimpleLogger: java.lang.String DEFAULT_LOG_LEVEL_KEY> = "org.slf4j.simpleLogger.defaultLogLevel";

        <SimpleLogger: java.lang.String SHOW_DATE_TIME_KEY> = "org.slf4j.simpleLogger.showDateTime";

        <SimpleLogger: java.lang.String DATE_TIME_FORMAT_KEY> = "org.slf4j.simpleLogger.dateTimeFormat";

        <SimpleLogger: java.lang.String SHOW_THREAD_NAME_KEY> = "org.slf4j.simpleLogger.showThreadName";

        <SimpleLogger: java.lang.String SHOW_LOG_NAME_KEY> = "org.slf4j.simpleLogger.showLogName";

        <SimpleLogger: java.lang.String SHOW_SHORT_LOG_NAME_KEY> = "org.slf4j.simpleLogger.showShortLogName";

        <SimpleLogger: java.lang.String LOG_FILE_KEY> = "org.slf4j.simpleLogger.logFile";

        <SimpleLogger: java.lang.String LEVEL_IN_BRACKETS_KEY> = "org.slf4j.simpleLogger.levelInBrackets";

        <SimpleLogger: java.lang.String WARN_LEVEL_STRING_KEY> = "org.slf4j.simpleLogger.warnLevelString";

        <SimpleLogger: java.lang.String CACHE_OUTPUT_STREAM_STRING_KEY> = "org.slf4j.simpleLogger.cacheOutputStream";

        <SimpleLogger: java.lang.String LOG_KEY_PREFIX> = "org.slf4j.simpleLogger.log.";

        <SimpleLogger: java.lang.String SYSTEM_PREFIX> = "org.slf4j.simpleLogger.";

        <SimpleLogger: int LOG_LEVEL_OFF> = 50;

        <SimpleLogger: int LOG_LEVEL_ERROR> = 40;

        <SimpleLogger: int LOG_LEVEL_WARN> = 30;

        <SimpleLogger: int LOG_LEVEL_INFO> = 20;

        <SimpleLogger: int LOG_LEVEL_DEBUG> = 10;

        <SimpleLogger: int LOG_LEVEL_TRACE> = 0;

        <SimpleLogger: long serialVersionUID> = -632788891211436180L;

        $stack0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        <org.slf4j.impl.SimpleLogger: long START_TIME> = $stack0;

        <org.slf4j.impl.SimpleLogger: boolean INITIALIZED> = 0;

        $stack1 = new org.slf4j.impl.SimpleLoggerConfiguration;

        specialinvoke $stack1.<org.slf4j.impl.SimpleLoggerConfiguration: void <init>()>();

        <org.slf4j.impl.SimpleLogger: org.slf4j.impl.SimpleLoggerConfiguration CONFIG_PARAMS> = $stack1;

        return;
    }
}
