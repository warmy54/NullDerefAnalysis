class SimpleLoggerConfiguration$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final org.slf4j.impl.SimpleLoggerConfiguration this$0;

    void <init>(org.slf4j.impl.SimpleLoggerConfiguration)
    {
        SimpleLoggerConfiguration$1 this;
        org.slf4j.impl.SimpleLoggerConfiguration this$0;
        org.slf4j.impl.SimpleLoggerConfiguration$1 $r0;

        this := @this: SimpleLoggerConfiguration$1;

        this$0 := @parameter0: org.slf4j.impl.SimpleLoggerConfiguration;

        $r0 = (org.slf4j.impl.SimpleLoggerConfiguration$1) this;

        $r0.<org.slf4j.impl.SimpleLoggerConfiguration$1: org.slf4j.impl.SimpleLoggerConfiguration this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public java.io.InputStream run()
    {
        java.lang.Thread $stack2;
        java.lang.ClassLoader threadCL;
        java.io.InputStream $stack4, $stack5;
        SimpleLoggerConfiguration$1 this;

        this := @this: SimpleLoggerConfiguration$1;

        $stack2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        threadCL = virtualinvoke $stack2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if threadCL == null goto label1;

        $stack5 = virtualinvoke threadCL.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("simplelogger.properties");

        return $stack5;

     label1:
        $stack4 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>("simplelogger.properties");

        return $stack4;
    }

    public volatile java.lang.Object run()
    {
        SimpleLoggerConfiguration$1 this;
        java.io.InputStream $stack1;
        org.slf4j.impl.SimpleLoggerConfiguration$1 $r0;

        this := @this: SimpleLoggerConfiguration$1;

        $r0 = (org.slf4j.impl.SimpleLoggerConfiguration$1) this;

        $stack1 = virtualinvoke $r0.<org.slf4j.impl.SimpleLoggerConfiguration$1: java.io.InputStream run()>();

        return $stack1;
    }
}
