class SingleNewlineInTextWrapperTest extends java.lang.Object
{

    void <init>()
    {
        SingleNewlineInTextWrapperTest this;

        this := @this: SingleNewlineInTextWrapperTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void testGetContent()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        SingleNewlineInTextWrapperTest this;

        this := @this: SingleNewlineInTextWrapperTest;

        testMethod = staticinvoke <SingleNewlineInTextWrapperTest$lambda_testGetContent_0__311: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testIsBefore()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        SingleNewlineInTextWrapperTest this;

        this := @this: SingleNewlineInTextWrapperTest;

        testMethod = staticinvoke <SingleNewlineInTextWrapperTest$lambda_testIsBefore_1__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testIsContentElement()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        SingleNewlineInTextWrapperTest this;

        this := @this: SingleNewlineInTextWrapperTest;

        testMethod = staticinvoke <SingleNewlineInTextWrapperTest$lambda_testIsContentElement_2__310: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testIsResortable()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        SingleNewlineInTextWrapperTest this;

        this := @this: SingleNewlineInTextWrapperTest;

        testMethod = staticinvoke <SingleNewlineInTextWrapperTest$lambda_testIsResortable_3__312: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testToString()
    {
        sortpom.wrapper.content.SingleNewlineInTextWrapper $stack1;
        java.lang.String $stack2;
        org.hamcrest.Matcher $stack3;
        SingleNewlineInTextWrapperTest this;

        this := @this: SingleNewlineInTextWrapperTest;

        $stack1 = <sortpom.wrapper.content.SingleNewlineInTextWrapper: sortpom.wrapper.content.SingleNewlineInTextWrapper INSTANCE>;

        $stack2 = virtualinvoke $stack1.<sortpom.wrapper.content.SingleNewlineInTextWrapper: java.lang.String toString(java.lang.String)>("  ");

        $stack3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("  SingleNewlineInTextWrapper");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack2, $stack3);

        return;
    }

    private static void lambda$testIsResortable$3() throws java.lang.Throwable
    {
        sortpom.wrapper.content.SingleNewlineInTextWrapper $stack0;

        $stack0 = <sortpom.wrapper.content.SingleNewlineInTextWrapper: sortpom.wrapper.content.SingleNewlineInTextWrapper INSTANCE>;

        virtualinvoke $stack0.<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isSortable()>();

        return;
    }

    private static void lambda$testIsContentElement$2() throws java.lang.Throwable
    {
        sortpom.wrapper.content.SingleNewlineInTextWrapper $stack0;

        $stack0 = <sortpom.wrapper.content.SingleNewlineInTextWrapper: sortpom.wrapper.content.SingleNewlineInTextWrapper INSTANCE>;

        virtualinvoke $stack0.<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isContentElement()>();

        return;
    }

    private static void lambda$testIsBefore$1() throws java.lang.Throwable
    {
        sortpom.wrapper.content.SingleNewlineInTextWrapper $stack0;

        $stack0 = <sortpom.wrapper.content.SingleNewlineInTextWrapper: sortpom.wrapper.content.SingleNewlineInTextWrapper INSTANCE>;

        virtualinvoke $stack0.<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>(null);

        return;
    }

    private static void lambda$testGetContent$0() throws java.lang.Throwable
    {
        sortpom.wrapper.content.SingleNewlineInTextWrapper $stack0;

        $stack0 = <sortpom.wrapper.content.SingleNewlineInTextWrapper: sortpom.wrapper.content.SingleNewlineInTextWrapper INSTANCE>;

        virtualinvoke $stack0.<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Text getContent()>();

        return;
    }
}
