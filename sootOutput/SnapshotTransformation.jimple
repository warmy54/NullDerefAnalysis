public class SnapshotTransformation extends org.apache.maven.repository.legacy.resolver.transform.AbstractVersionTransformation
{
    private static final java.lang.String DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT;
    private static final java.util.TimeZone DEFAULT_SNAPSHOT_TIME_ZONE;
    private java.lang.String deploymentTimestamp;

    public void <init>()
    {
        SnapshotTransformation this;

        this := @this: SnapshotTransformation;

        specialinvoke this.<org.apache.maven.repository.legacy.resolver.transform.AbstractVersionTransformation: void <init>()>();

        return;
    }

    public void transformForResolve(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.RepositoryRequest) throws org.apache.maven.artifact.resolver.ArtifactResolutionException
    {
        org.apache.maven.artifact.Artifact artifact;
        boolean $stack4, $stack7;
        java.lang.String $stack5, $stack6, $stack12, version;
        SnapshotTransformation this;
        org.apache.maven.artifact.repository.RepositoryRequest request;
        org.apache.maven.artifact.repository.ArtifactRepository $stack9;
        java.lang.Throwable $stack10, $r2;
        org.apache.maven.artifact.resolver.ArtifactResolutionException $u0;
        org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation $r0;
        org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException $r1;

        this := @this: SnapshotTransformation;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        request := @parameter1: org.apache.maven.artifact.repository.RepositoryRequest;

        $stack4 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isSnapshot()>();

        if $stack4 == 0 goto label4;

        $stack5 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getBaseVersion()>();

        $stack6 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        $stack7 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label4;

     label1:
        $r0 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        version = virtualinvoke $r0.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String resolveVersion(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.RepositoryRequest)>(artifact, request);

        $stack9 = interfaceinvoke request.<org.apache.maven.artifact.repository.RepositoryRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void updateVersion(java.lang.String,org.apache.maven.artifact.repository.ArtifactRepository)>(version, $stack9);

     label2:
        goto label4;

     label3:
        $stack10 := @caughtexception;

        $u0 = new org.apache.maven.artifact.resolver.ArtifactResolutionException;

        $r1 = (org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException) $stack10;

        $stack12 = virtualinvoke $r1.<org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException: java.lang.String getMessage()>();

        specialinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionException: void <init>(java.lang.String,org.apache.maven.artifact.Artifact,java.lang.Throwable)>($stack12, artifact, $stack10);

        $r2 = (java.lang.Throwable) $u0;

        throw $r2;

     label4:
        return;

        catch org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException from label1 to label2 with label3;
    }

    public void transformForInstall(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.ArtifactRepository)
    {
        org.apache.maven.artifact.Artifact artifact;
        boolean $stack5;
        SnapshotTransformation this;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository;
        org.apache.maven.artifact.repository.metadata.Snapshot $u0;
        org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata $u1;
        org.apache.maven.artifact.metadata.ArtifactMetadata $r0;

        this := @this: SnapshotTransformation;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        localRepository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        $stack5 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isSnapshot()>();

        if $stack5 == 0 goto label1;

        $u0 = new org.apache.maven.artifact.repository.metadata.Snapshot;

        specialinvoke $u0.<org.apache.maven.artifact.repository.metadata.Snapshot: void <init>()>();

        virtualinvoke $u0.<org.apache.maven.artifact.repository.metadata.Snapshot: void setLocalCopy(boolean)>(1);

        $u1 = new org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;

        specialinvoke $u1.<org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata: void <init>(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.metadata.Snapshot)>(artifact, $u0);

        $r0 = (org.apache.maven.artifact.metadata.ArtifactMetadata) $u1;

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void addMetadata(org.apache.maven.artifact.metadata.ArtifactMetadata)>($r0);

     label1:
        return;
    }

    public void transformForDeployment(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.artifact.repository.ArtifactRepository) throws org.apache.maven.artifact.deployer.ArtifactDeploymentException
    {
        org.apache.maven.artifact.Artifact artifact;
        boolean $stack6;
        SnapshotTransformation this;
        java.lang.String $stack8, $stack14, $stack15, $stack20, $stack23, $stack25;
        org.apache.maven.artifact.repository.ArtifactRepository localRepository, remoteRepository;
        int $stack10, buildNumber;
        org.apache.maven.artifact.repository.metadata.Metadata $stack12;
        org.apache.maven.artifact.repository.metadata.Versioning $stack13;
        java.lang.Throwable $stack16, $r3;
        java.lang.StringBuilder $stack19, $stack21, $stack22, $stack24, $u1;
        org.apache.maven.artifact.repository.metadata.Snapshot $u0;
        org.apache.maven.artifact.deployer.ArtifactDeploymentException $u2;
        org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata $u3;
        org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation $r0, $r1, $r5;
        org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException $r2;
        org.apache.maven.artifact.repository.metadata.RepositoryMetadata $r4;
        org.apache.maven.artifact.metadata.ArtifactMetadata $r6;

        this := @this: SnapshotTransformation;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        remoteRepository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        localRepository := @parameter2: org.apache.maven.artifact.repository.ArtifactRepository;

        $stack6 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: boolean isSnapshot()>();

        if $stack6 == 0 goto label5;

        $u0 = new org.apache.maven.artifact.repository.metadata.Snapshot;

        specialinvoke $u0.<org.apache.maven.artifact.repository.metadata.Snapshot: void <init>()>();

        $r0 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $stack8 = virtualinvoke $r0.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String getDeploymentTimestamp()>();

        virtualinvoke $u0.<org.apache.maven.artifact.repository.metadata.Snapshot: void setTimestamp(java.lang.String)>($stack8);

     label1:
        $r1 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        buildNumber = specialinvoke $r1.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: int resolveLatestSnapshotBuildNumber(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>(artifact, localRepository, remoteRepository);

        $stack10 = buildNumber + 1;

        virtualinvoke $u0.<org.apache.maven.artifact.repository.metadata.Snapshot: void setBuildNumber(int)>($stack10);

     label2:
        goto label4;

     label3:
        $stack16 := @caughtexception;

        $u2 = new org.apache.maven.artifact.deployer.ArtifactDeploymentException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error retrieving previous build number for artifact \'");

        $stack20 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r2 = (org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException) $stack16;

        $stack23 = virtualinvoke $r2.<org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException: java.lang.String getMessage()>();

        $stack24 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<org.apache.maven.artifact.deployer.ArtifactDeploymentException: void <init>(java.lang.String,java.lang.Throwable)>($stack25, $stack16);

        $r3 = (java.lang.Throwable) $u2;

        throw $r3;

     label4:
        $u3 = new org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;

        specialinvoke $u3.<org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata: void <init>(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.metadata.Snapshot)>(artifact, $u0);

        $r4 = (org.apache.maven.artifact.repository.metadata.RepositoryMetadata) $u3;

        $stack12 = interfaceinvoke $r4.<org.apache.maven.artifact.repository.metadata.RepositoryMetadata: org.apache.maven.artifact.repository.metadata.Metadata getMetadata()>();

        $stack13 = virtualinvoke $stack12.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

        $stack14 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getBaseVersion()>();

        $r5 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $stack15 = virtualinvoke $r5.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String constructVersion(org.apache.maven.artifact.repository.metadata.Versioning,java.lang.String)>($stack13, $stack14);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setResolvedVersion(java.lang.String)>($stack15);

        $r6 = (org.apache.maven.artifact.metadata.ArtifactMetadata) $u3;

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void addMetadata(org.apache.maven.artifact.metadata.ArtifactMetadata)>($r6);

     label5:
        return;

        catch org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException from label1 to label2 with label3;
    }

    public java.lang.String getDeploymentTimestamp()
    {
        SnapshotTransformation this;
        java.lang.String $stack1, $stack2, $stack5;
        java.text.DateFormat $stack3;
        java.util.Date $u0;
        org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation $r0, $r1, $r2;

        this := @this: SnapshotTransformation;

        $r0 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $stack1 = $r0.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String deploymentTimestamp>;

        if $stack1 != null goto label1;

        $stack3 = staticinvoke <org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.text.DateFormat getUtcDateFormatter()>();

        $u0 = new java.util.Date;

        specialinvoke $u0.<java.util.Date: void <init>()>();

        $stack5 = virtualinvoke $stack3.<java.text.DateFormat: java.lang.String format(java.util.Date)>($u0);

        $r1 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $r1.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String deploymentTimestamp> = $stack5;

     label1:
        $r2 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $stack2 = $r2.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String deploymentTimestamp>;

        return $stack2;
    }

    protected java.lang.String constructVersion(org.apache.maven.artifact.repository.metadata.Versioning, java.lang.String)
    {
        org.apache.maven.artifact.repository.metadata.Versioning versioning;
        org.apache.maven.artifact.repository.metadata.Snapshot snapshot;
        java.lang.String $stack7, baseVersion, $stack12, newVersion, version;
        int $stack9, $stack15;
        java.lang.StringBuilder $stack11, $stack13, $stack14, $stack16;
        SnapshotTransformation this;

        this := @this: SnapshotTransformation;

        versioning := @parameter0: org.apache.maven.artifact.repository.metadata.Versioning;

        baseVersion := @parameter1: java.lang.String;

        version = null;

        snapshot = virtualinvoke versioning.<org.apache.maven.artifact.repository.metadata.Versioning: org.apache.maven.artifact.repository.metadata.Snapshot getSnapshot()>();

        if snapshot == null goto label2;

        $stack7 = virtualinvoke snapshot.<org.apache.maven.artifact.repository.metadata.Snapshot: java.lang.String getTimestamp()>();

        if $stack7 == null goto label1;

        $stack9 = virtualinvoke snapshot.<org.apache.maven.artifact.repository.metadata.Snapshot: int getBuildNumber()>();

        if $stack9 <= 0 goto label1;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke snapshot.<org.apache.maven.artifact.repository.metadata.Snapshot: java.lang.String getTimestamp()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $stack15 = virtualinvoke snapshot.<org.apache.maven.artifact.repository.metadata.Snapshot: int getBuildNumber()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack15);

        newVersion = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        version = staticinvoke <org.codehaus.plexus.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(baseVersion, "SNAPSHOT", newVersion);

        goto label2;

     label1:
        version = baseVersion;

     label2:
        return version;
    }

    private int resolveLatestSnapshotBuildNumber(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.repository.ArtifactRepository, org.apache.maven.artifact.repository.ArtifactRepository) throws org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException
    {
        org.apache.maven.artifact.Artifact artifact;
        SnapshotTransformation this;
        org.codehaus.plexus.logging.Logger $stack8;
        java.lang.StringBuilder $stack10, $stack12, $u1;
        org.apache.maven.artifact.repository.ArtifactRepository remoteRepository, localRepository;
        java.lang.String $stack11, $stack13;
        org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager $stack14;
        org.apache.maven.artifact.repository.metadata.Metadata repoMetadata;
        org.apache.maven.artifact.repository.metadata.Versioning $stack16, $stack18, $stack20;
        org.apache.maven.artifact.repository.metadata.Snapshot $stack19, $stack21;
        int buildNumber;
        org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata $u0;
        org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation $r0, $r1;
        org.apache.maven.artifact.repository.metadata.RepositoryMetadata $r2, $r3;

        this := @this: SnapshotTransformation;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        localRepository := @parameter1: org.apache.maven.artifact.repository.ArtifactRepository;

        remoteRepository := @parameter2: org.apache.maven.artifact.repository.ArtifactRepository;

        $u0 = new org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;

        specialinvoke $u0.<org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata: void <init>(org.apache.maven.artifact.Artifact)>(artifact);

        $r0 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $stack8 = virtualinvoke $r0.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: org.codehaus.plexus.logging.Logger getLogger()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Retrieving previous build number from ");

        $stack11 = interfaceinvoke remoteRepository.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getId()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack8.<org.codehaus.plexus.logging.Logger: void info(java.lang.String)>($stack13);

        $r1 = (org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation) this;

        $stack14 = $r1.<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager repositoryMetadataManager>;

        $r2 = (org.apache.maven.artifact.repository.metadata.RepositoryMetadata) $u0;

        interfaceinvoke $stack14.<org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager: void resolveAlways(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>($r2, localRepository, remoteRepository);

        buildNumber = 0;

        $r3 = (org.apache.maven.artifact.repository.metadata.RepositoryMetadata) $u0;

        repoMetadata = interfaceinvoke $r3.<org.apache.maven.artifact.repository.metadata.RepositoryMetadata: org.apache.maven.artifact.repository.metadata.Metadata getMetadata()>();

        if repoMetadata == null goto label1;

        $stack16 = virtualinvoke repoMetadata.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

        if $stack16 == null goto label1;

        $stack18 = virtualinvoke repoMetadata.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

        $stack19 = virtualinvoke $stack18.<org.apache.maven.artifact.repository.metadata.Versioning: org.apache.maven.artifact.repository.metadata.Snapshot getSnapshot()>();

        if $stack19 == null goto label1;

        $stack20 = virtualinvoke repoMetadata.<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Versioning getVersioning()>();

        $stack21 = virtualinvoke $stack20.<org.apache.maven.artifact.repository.metadata.Versioning: org.apache.maven.artifact.repository.metadata.Snapshot getSnapshot()>();

        buildNumber = virtualinvoke $stack21.<org.apache.maven.artifact.repository.metadata.Snapshot: int getBuildNumber()>();

     label1:
        return buildNumber;
    }

    public static java.text.DateFormat getUtcDateFormatter()
    {
        java.text.SimpleDateFormat $stack1;
        java.util.GregorianCalendar $stack2;
        java.util.TimeZone $stack3;

        $stack1 = new java.text.SimpleDateFormat;

        specialinvoke $stack1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyyMMdd.HHmmss");

        $stack2 = new java.util.GregorianCalendar;

        specialinvoke $stack2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $stack1.<java.text.DateFormat: void setCalendar(java.util.Calendar)>($stack2);

        $stack3 = <org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.util.TimeZone DEFAULT_SNAPSHOT_TIME_ZONE>;

        virtualinvoke $stack1.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack3);

        return $stack1;
    }

    static void <clinit>()
    {
        java.util.TimeZone $stack0;

        <SnapshotTransformation: java.lang.String DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT> = "yyyyMMdd.HHmmss";

        $stack0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("Etc/UTC");

        <org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.util.TimeZone DEFAULT_SNAPSHOT_TIME_ZONE> = $stack0;

        return;
    }
}
