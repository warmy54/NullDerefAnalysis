class SortAttributesOperation extends java.lang.Object implements sortpom.wrapper.operation.HierarchyWrapperOperation
{
    private static final java.util.Comparator ATTRIBUTE_COMPARATOR;

    void <init>()
    {
        SortAttributesOperation this;

        this := @this: SortAttributesOperation;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void processElement(sortpom.wrapper.content.Wrapper)
    {
        sortpom.wrapper.content.Wrapper elementWrapper;
        org.jdom.Content $stack3;
        org.jdom.Element element;
        SortAttributesOperation this;
        java.util.List $stack4;
        sortpom.wrapper.operation.SortAttributesOperation $r0;

        this := @this: SortAttributesOperation;

        elementWrapper := @parameter0: sortpom.wrapper.content.Wrapper;

        $stack3 = interfaceinvoke elementWrapper.<sortpom.wrapper.content.Wrapper: org.jdom.Content getContent()>();

        element = (org.jdom.Element) $stack3;

        $r0 = (sortpom.wrapper.operation.SortAttributesOperation) this;

        $stack4 = specialinvoke $r0.<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>(element);

        virtualinvoke element.<org.jdom.Element: org.jdom.Element setAttributes(java.util.List)>($stack4);

        return;
    }

    private java.util.List getSortedAttributes(org.jdom.Element)
    {
        SortAttributesOperation this;
        org.jdom.Element element;
        java.util.List attributes;
        java.util.function.Consumer $stack4;
        java.util.Comparator $stack5;
        sortpom.wrapper.operation.SortAttributesOperation $r0;

        this := @this: SortAttributesOperation;

        element := @parameter0: org.jdom.Element;

        $r0 = (sortpom.wrapper.operation.SortAttributesOperation) this;

        attributes = specialinvoke $r0.<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getAttributeList(org.jdom.Element)>(element);

        $stack4 = staticinvoke <SortAttributesOperation$detach__309: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke attributes.<java.util.List: void forEach(java.util.function.Consumer)>($stack4);

        $stack5 = <sortpom.wrapper.operation.SortAttributesOperation: java.util.Comparator ATTRIBUTE_COMPARATOR>;

        interfaceinvoke attributes.<java.util.List: void sort(java.util.Comparator)>($stack5);

        return attributes;
    }

    private java.util.List getAttributeList(org.jdom.Element)
    {
        java.util.ArrayList $stack2;
        org.jdom.Element element;
        java.util.List $stack3;
        SortAttributesOperation this;

        this := @this: SortAttributesOperation;

        element := @parameter0: org.jdom.Element;

        $stack2 = new java.util.ArrayList;

        $stack3 = virtualinvoke element.<org.jdom.Element: java.util.List getAttributes()>();

        specialinvoke $stack2.<java.util.ArrayList: void <init>(java.util.Collection)>($stack3);

        return $stack2;
    }

    static void <clinit>()
    {
        java.util.function.Function $stack0;
        java.util.Comparator $stack1;

        $stack0 = staticinvoke <SortAttributesOperation$getName__310: java.util.function.Function bootstrap$()>();

        $stack1 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($stack0);

        <sortpom.wrapper.operation.SortAttributesOperation: java.util.Comparator ATTRIBUTE_COMPARATOR> = $stack1;

        return;
    }
}
