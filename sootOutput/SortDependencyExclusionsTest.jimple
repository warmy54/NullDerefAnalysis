class SortDependencyExclusionsTest extends java.lang.Object
{

    void <init>()
    {
        SortDependencyExclusionsTest this;

        this := @this: SortDependencyExclusionsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void deprecatedSortPluginsTrueMessageShouldWork() throws java.lang.Exception
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6;
        SortDependencyExclusionsTest this;

        this := @this: SortDependencyExclusionsTest;

        testMethod = staticinvoke <SortDependencyExclusionsTest$lambda_deprecatedSortPluginsTrueMessageShouldWork_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack4;

        $stack5 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The \'true\' value in sortDependencyExclusions is not supported, please use value \'groupId,artifactId\' instead.");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    final void deprecatedSortPluginsFalseMessageShouldWork() throws java.lang.Exception
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6;
        SortDependencyExclusionsTest this;

        this := @this: SortDependencyExclusionsTest;

        testMethod = staticinvoke <SortDependencyExclusionsTest$lambda_deprecatedSortPluginsFalseMessageShouldWork_1__310: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack4;

        $stack5 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The \'false\' value in sortDependencyExclusions is not supported, please use empty value \'\' or omit sortDependencyExclusions instead.");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    final void sortGroupIdForExclusionsShouldWork() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4, $stack5;
        SortDependencyExclusionsTest this;

        this := @this: SortDependencyExclusionsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("custom_1.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencyExclusions(java.lang.String)>("groupId");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack5 = virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(2);

        virtualinvoke $stack5.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortDepExclusions_input.xml", "/SortDepExclusions_group_expected.xml");

        return;
    }

    final void sortArtifactIdForExclusionsShouldWork() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4, $stack5;
        SortDependencyExclusionsTest this;

        this := @this: SortDependencyExclusionsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("custom_1.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencyExclusions(java.lang.String)>("artifactId");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack5 = virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(2);

        virtualinvoke $stack5.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortDepExclusions_input.xml", "/SortDepExclusions_artifact_expected.xml");

        return;
    }

    final void sortGroupIdAndArtifactIdForExclusionsShouldWork() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4, $stack5;
        SortDependencyExclusionsTest this;

        this := @this: SortDependencyExclusionsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("custom_1.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencyExclusions(java.lang.String)>("groupId,artifactId");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack5 = virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(2);

        virtualinvoke $stack5.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortDepExclusions_input.xml", "/SortDepExclusions_group_artifact_expected.xml");

        return;
    }

    private static void lambda$deprecatedSortPluginsFalseMessageShouldWork$1() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2, $stack3, $stack4;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("custom_1.xml");

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencyExclusions(java.lang.String)>("false");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(4);

        virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/PluginDefaultName_input.xml", "/PluginDefaultName_expect.xml");

        return;
    }

    private static void lambda$deprecatedSortPluginsTrueMessageShouldWork$0() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2, $stack3, $stack4;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("custom_1.xml");

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencyExclusions(java.lang.String)>("true");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(4);

        virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/PluginDefaultName_input.xml", "/PluginDefaultName_expect.xml");

        return;
    }
}
