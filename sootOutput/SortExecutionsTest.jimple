class SortExecutionsTest extends java.lang.Object
{

    void <init>()
    {
        SortExecutionsTest this;

        this := @this: SortExecutionsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void sortPhaseAndThenId() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortExecutionsTest this;

        this := @this: SortExecutionsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortExecutions()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\r\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortExec_input_simpleWithPhase.xml", "/SortExec_expect_simpleWithPhase.xml");

        return;
    }

    final void doNotSortIfPhaseAndIdIsSame() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4;
        SortExecutionsTest this;

        this := @this: SortExecutionsTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("sortOrderFiles/extra_dummy_tags.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortExecutions()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\r\n");

        virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortExec_input_complexWithPhase.xml", "/SortExec_expect_complexWithPhase.xml");

        return;
    }
}
