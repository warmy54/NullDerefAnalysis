class SortMojoTest extends java.lang.Object
{
    private final sortpom.SortPomImpl sortPom;
    private final org.apache.maven.plugin.logging.Log log;
    private sortpom.SortMojo sortMojo;

    void <init>()
    {
        SortMojoTest this;
        java.lang.Object $stack1, $stack3;
        sortpom.SortPomImpl $stack2;
        org.apache.maven.plugin.logging.Log $stack4;
        sortpom.SortMojoTest $r0, $r1;

        this := @this: SortMojoTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lsortpom/SortPomImpl;");

        $stack2 = (sortpom.SortPomImpl) $stack1;

        $r0 = (sortpom.SortMojoTest) this;

        $r0.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom> = $stack2;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/plugin/logging/Log;");

        $stack4 = (org.apache.maven.plugin.logging.Log) $stack3;

        $r1 = (sortpom.SortMojoTest) this;

        $r1.<sortpom.SortMojoTest: org.apache.maven.plugin.logging.Log log> = $stack4;

        return;
    }

    void setup()
    {
        SortMojoTest this;
        sortpom.SortMojo $stack4, $u0;
        sortpom.SortPomImpl $stack5;
        refutils.ReflectionHelper $u1;
        sortpom.SortMojoTest $r0, $r1, $r2;

        this := @this: SortMojoTest;

        $u0 = new sortpom.SortMojo;

        specialinvoke $u0.<sortpom.SortMojo: void <init>()>();

        $r0 = (sortpom.SortMojoTest) this;

        $r0.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo> = $u0;

        $u1 = new refutils.ReflectionHelper;

        $r1 = (sortpom.SortMojoTest) this;

        $stack4 = $r1.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        specialinvoke $u1.<refutils.ReflectionHelper: void <init>(java.lang.Object)>($stack4);

        $r2 = (sortpom.SortMojoTest) this;

        $stack5 = $r2.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        virtualinvoke $u1.<refutils.ReflectionHelper: void setField(java.lang.Object)>($stack5);

        virtualinvoke $u1.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("lineSeparator", "\n");

        return;
    }

    void executeShouldStartMojo() throws java.lang.Exception
    {
        SortMojoTest this;
        sortpom.SortMojo $stack1;
        sortpom.SortPomImpl $stack2, $stack4, $stack9, $stack11, $stack13;
        java.lang.Object $stack3, $stack5, $stack7, $stack10;
        sortpom.logger.SortPomLogger $stack6;
        sortpom.parameter.PluginParameters $stack8;
        java.lang.Object[] $stack12;
        sortpom.SortMojoTest $r0, $r1, $r2, $r3;

        this := @this: SortMojoTest;

        $r0 = (sortpom.SortMojoTest) this;

        $stack1 = $r0.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        virtualinvoke $stack1.<sortpom.SortMojo: void execute()>();

        $r1 = (sortpom.SortMojoTest) this;

        $stack2 = $r1.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack2);

        $stack4 = (sortpom.SortPomImpl) $stack3;

        $stack5 = staticinvoke <org.mockito.Mockito: java.lang.Object any(java.lang.Class)>(class "Lsortpom/logger/SortPomLogger;");

        $stack6 = (sortpom.logger.SortPomLogger) $stack5;

        $stack7 = staticinvoke <org.mockito.Mockito: java.lang.Object any(java.lang.Class)>(class "Lsortpom/parameter/PluginParameters;");

        $stack8 = (sortpom.parameter.PluginParameters) $stack7;

        virtualinvoke $stack4.<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>($stack6, $stack8);

        $r2 = (sortpom.SortMojoTest) this;

        $stack9 = $r2.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack9);

        $stack11 = (sortpom.SortPomImpl) $stack10;

        virtualinvoke $stack11.<sortpom.SortPomImpl: void sortPom()>();

        $stack12 = newarray (java.lang.Object)[1];

        $r3 = (sortpom.SortMojoTest) this;

        $stack13 = $r3.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        $stack12[0] = $stack13;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($stack12);

        return;
    }

    void thrownExceptionShouldBeConvertedToMojoException()
    {
        java.lang.Object[] $stack3;
        org.mockito.stubbing.Stubber $stack6;
        SortMojoTest this;
        sortpom.SortPomImpl $stack7, $stack9;
        java.lang.Object $stack8;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack11;
        org.apache.maven.plugin.MojoFailureException thrown;
        java.lang.String $stack13;
        org.hamcrest.Matcher $stack14, $stack15;
        sortpom.exception.FailureException $u0;
        java.lang.Throwable[] $r0;
        sortpom.SortMojoTest $r1, $r2;

        this := @this: SortMojoTest;

        $stack3 = newarray (java.lang.Throwable)[1];

        $u0 = new sortpom.exception.FailureException;

        specialinvoke $u0.<sortpom.exception.FailureException: void <init>(java.lang.String)>("Gurka");

        $stack3[0] = $u0;

        $r0 = (java.lang.Throwable[]) $stack3;

        $stack6 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])>($r0);

        $r1 = (sortpom.SortMojoTest) this;

        $stack7 = $r1.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        $stack8 = interfaceinvoke $stack6.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>($stack7);

        $stack9 = (sortpom.SortPomImpl) $stack8;

        virtualinvoke $stack9.<sortpom.SortPomImpl: void sortPom()>();

        $r2 = (sortpom.SortMojoTest) this;

        testMethod = staticinvoke <SortMojoTest$lambda_thrownExceptionShouldBeConvertedToMojoException_0__309: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.SortMojoTest)>($r2);

        $stack11 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/plugin/MojoFailureException;", testMethod);

        thrown = (org.apache.maven.plugin.MojoFailureException) $stack11;

        $stack13 = virtualinvoke thrown.<org.apache.maven.plugin.MojoFailureException: java.lang.String getMessage()>();

        $stack14 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Gurka");

        $stack15 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack14);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected message", $stack13, $stack15);

        return;
    }

    void thrownExceptionShouldBeConvertedToMojoExceptionInSetup()
    {
        java.lang.Object[] $stack3;
        org.mockito.stubbing.Stubber $stack6;
        SortMojoTest this;
        sortpom.SortPomImpl $stack7, $stack9;
        java.lang.Object $stack8, $stack10, $stack12;
        sortpom.logger.SortPomLogger $stack11;
        sortpom.parameter.PluginParameters $stack13;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack15;
        org.apache.maven.plugin.MojoFailureException thrown;
        java.lang.String $stack17;
        org.hamcrest.Matcher $stack18, $stack19;
        sortpom.exception.FailureException $u0;
        java.lang.Throwable[] $r0;
        sortpom.SortMojoTest $r1, $r2;

        this := @this: SortMojoTest;

        $stack3 = newarray (java.lang.Throwable)[1];

        $u0 = new sortpom.exception.FailureException;

        specialinvoke $u0.<sortpom.exception.FailureException: void <init>(java.lang.String)>("Gurka");

        $stack3[0] = $u0;

        $r0 = (java.lang.Throwable[]) $stack3;

        $stack6 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])>($r0);

        $r1 = (sortpom.SortMojoTest) this;

        $stack7 = $r1.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        $stack8 = interfaceinvoke $stack6.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>($stack7);

        $stack9 = (sortpom.SortPomImpl) $stack8;

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object any(java.lang.Class)>(class "Lsortpom/logger/SortPomLogger;");

        $stack11 = (sortpom.logger.SortPomLogger) $stack10;

        $stack12 = staticinvoke <org.mockito.Mockito: java.lang.Object any(java.lang.Class)>(class "Lsortpom/parameter/PluginParameters;");

        $stack13 = (sortpom.parameter.PluginParameters) $stack12;

        virtualinvoke $stack9.<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>($stack11, $stack13);

        $r2 = (sortpom.SortMojoTest) this;

        testMethod = staticinvoke <SortMojoTest$lambda_thrownExceptionShouldBeConvertedToMojoExceptionInSetup_1__310: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.SortMojoTest)>($r2);

        $stack15 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lorg/apache/maven/plugin/MojoFailureException;", testMethod);

        thrown = (org.apache.maven.plugin.MojoFailureException) $stack15;

        $stack17 = virtualinvoke thrown.<org.apache.maven.plugin.MojoFailureException: java.lang.String getMessage()>();

        $stack18 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Gurka");

        $stack19 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack18);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected message", $stack17, $stack19);

        return;
    }

    void skipParameterShouldSkipExecution() throws java.lang.Exception
    {
        SortMojoTest this;
        sortpom.SortMojo $stack2, $stack6, $stack8;
        java.lang.Boolean $stack4;
        org.apache.maven.plugin.logging.Log $stack7, $stack9, $stack11;
        java.lang.Object $stack10;
        java.lang.Object[] $stack12;
        sortpom.SortPomImpl $stack13;
        refutils.ReflectionHelper $u0, $u1;
        sortpom.SortMojoTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: SortMojoTest;

        $u0 = new refutils.ReflectionHelper;

        $r0 = (sortpom.SortMojoTest) this;

        $stack2 = $r0.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        specialinvoke $u0.<refutils.ReflectionHelper: void <init>(java.lang.Object)>($stack2);

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $u0.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("skip", $stack4);

        $u1 = new refutils.ReflectionHelper;

        $r1 = (sortpom.SortMojoTest) this;

        $stack6 = $r1.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        specialinvoke $u1.<refutils.ReflectionHelper: void <init>(java.lang.Object)>($stack6);

        $r2 = (sortpom.SortMojoTest) this;

        $stack7 = $r2.<sortpom.SortMojoTest: org.apache.maven.plugin.logging.Log log>;

        virtualinvoke $u1.<refutils.ReflectionHelper: void setField(java.lang.Object)>($stack7);

        $r3 = (sortpom.SortMojoTest) this;

        $stack8 = $r3.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        virtualinvoke $stack8.<sortpom.SortMojo: void execute()>();

        $r4 = (sortpom.SortMojoTest) this;

        $stack9 = $r4.<sortpom.SortMojoTest: org.apache.maven.plugin.logging.Log log>;

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack9);

        $stack11 = (org.apache.maven.plugin.logging.Log) $stack10;

        interfaceinvoke $stack11.<org.apache.maven.plugin.logging.Log: void info(java.lang.CharSequence)>("Skipping Sortpom");

        $stack12 = newarray (java.lang.Object)[1];

        $r5 = (sortpom.SortMojoTest) this;

        $stack13 = $r5.<sortpom.SortMojoTest: sortpom.SortPomImpl sortPom>;

        $stack12[0] = $stack13;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($stack12);

        return;
    }

    private void lambda$thrownExceptionShouldBeConvertedToMojoExceptionInSetup$1() throws java.lang.Throwable
    {
        SortMojoTest this;
        sortpom.SortMojo $stack1;
        sortpom.SortMojoTest $r0;

        this := @this: SortMojoTest;

        $r0 = (sortpom.SortMojoTest) this;

        $stack1 = $r0.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        virtualinvoke $stack1.<sortpom.SortMojo: void setup()>();

        return;
    }

    private void lambda$thrownExceptionShouldBeConvertedToMojoException$0() throws java.lang.Throwable
    {
        SortMojoTest this;
        sortpom.SortMojo $stack1;
        sortpom.SortMojoTest $r0;

        this := @this: SortMojoTest;

        $r0 = (sortpom.SortMojoTest) this;

        $stack1 = $r0.<sortpom.SortMojoTest: sortpom.SortMojo sortMojo>;

        virtualinvoke $stack1.<sortpom.SortMojo: void execute()>();

        return;
    }
}
