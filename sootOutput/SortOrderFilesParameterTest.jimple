class SortOrderFilesParameterTest extends java.lang.Object
{

    void <init>()
    {
        SortOrderFilesParameterTest this;

        this := @this: SortOrderFilesParameterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void incorrectCustomSortOrderShouldThrowException()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6;
        SortOrderFilesParameterTest this;

        this := @this: SortOrderFilesParameterTest;

        testMethod = staticinvoke <SortOrderFilesParameterTest$lambda_incorrectCustomSortOrderShouldThrowException_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack4;

        $stack5 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("VERYdifferentOrder.xml in classpath");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    final void incorrectPredefinedSortOrderShouldThrowException()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.IllegalArgumentException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        SortOrderFilesParameterTest this;

        this := @this: SortOrderFilesParameterTest;

        testMethod = staticinvoke <SortOrderFilesParameterTest$lambda_incorrectPredefinedSortOrderShouldThrowException_1__311: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/IllegalArgumentException;", testMethod);

        thrown = (java.lang.IllegalArgumentException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Cannot find abbie_normal_brain.xml among the predefined plugin resources");

        $stack7 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    final void incorrectCustomSortOrderShouldThrowException2()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack5, cause;
        java.lang.reflect.InvocationTargetException thrown;
        org.hamcrest.Matcher $stack7, $stack9;
        java.lang.String $stack8;
        SortOrderFilesParameterTest this;

        this := @this: SortOrderFilesParameterTest;

        testMethod = staticinvoke <SortOrderFilesParameterTest$lambda_incorrectCustomSortOrderShouldThrowException2_2__310: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack5 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/reflect/InvocationTargetException;", testMethod);

        thrown = (java.lang.reflect.InvocationTargetException) $stack5;

        cause = virtualinvoke thrown.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $stack7 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher isA(java.lang.Class)>(class "Lsortpom/exception/FailureException;");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(cause, $stack7);

        $stack8 = virtualinvoke cause.<java.lang.Throwable: java.lang.String getMessage()>();

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("VERYdifferentOrder.xml in classpath");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack9);

        return;
    }

    final void incorrectPredefinedSortOrderShouldThrowException2()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack5, cause;
        java.lang.reflect.InvocationTargetException thrown;
        org.hamcrest.Matcher $stack7, $stack9, $stack10;
        java.lang.String $stack8;
        SortOrderFilesParameterTest this;

        this := @this: SortOrderFilesParameterTest;

        testMethod = staticinvoke <SortOrderFilesParameterTest$lambda_incorrectPredefinedSortOrderShouldThrowException2_3__312: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack5 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/reflect/InvocationTargetException;", testMethod);

        thrown = (java.lang.reflect.InvocationTargetException) $stack5;

        cause = virtualinvoke thrown.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $stack7 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher isA(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(cause, $stack7);

        $stack8 = virtualinvoke cause.<java.lang.Throwable: java.lang.String getMessage()>();

        $stack9 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Cannot find abbie_normal_brain.xml among the predefined plugin resources");

        $stack10 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    private static void lambda$incorrectPredefinedSortOrderShouldThrowException2$3() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("abbie_normal_brain");

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testVerifyXmlIsOrdered(java.lang.String)>("/sortOrderFiles/sorted_default_0_4_0.xml");

        return;
    }

    private static void lambda$incorrectCustomSortOrderShouldThrowException2$2() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/VERYdifferentOrder.xml");

        virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: void testVerifyXmlIsOrdered(java.lang.String)>("/sortOrderFiles/sorted_differentOrder.xml");

        return;
    }

    private static void lambda$incorrectPredefinedSortOrderShouldThrowException$1() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("abbie_normal_brain");

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_default_0_4_0.xml");

        return;
    }

    private static void lambda$incorrectCustomSortOrderShouldThrowException$0() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/VERYdifferentOrder.xml");

        virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_differentOrder.xml");

        return;
    }
}
