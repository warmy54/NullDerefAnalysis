class SortOrderFilesTest extends java.lang.Object
{

    void <init>()
    {
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void correctCustomSortOrderShouldSortThePm() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/differentOrder.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_differentOrder.xml");

        return;
    }

    final void default040ShouldWorkAsPredefinedSortOrder() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_default_0_4_0.xml");

        return;
    }

    final void custom1ShouldWorkAsPredefinedSortOrder() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("custom_1");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_custom_1.xml");

        return;
    }

    final void recommended2008_06ShouldWorkAsPredefinedSortOrder() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("recommended_2008_06");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_recommended_2008_06.xml");

        return;
    }

    final void default100ShouldWorkAsPredefinedSortOrder() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_1_0_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_default_1_0_0.xml");

        return;
    }

    final void nullPredefinedSortOrderShouldReportError()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.IllegalArgumentException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        testMethod = staticinvoke <SortOrderFilesTest$lambda_nullPredefinedSortOrderShouldReportError_0__310: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/IllegalArgumentException;", testMethod);

        thrown = (java.lang.IllegalArgumentException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("Cannot find null.xml among the predefined plugin resources");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    final void illegalPredefinedSortOrderShouldReportError()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.IllegalArgumentException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        testMethod = staticinvoke <SortOrderFilesTest$lambda_illegalPredefinedSortOrderShouldReportError_1__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/IllegalArgumentException;", testMethod);

        thrown = (java.lang.IllegalArgumentException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("Cannot find special.xml.xml among the predefined plugin resources");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack6);

        return;
    }

    void xmlDeviationsShouldNotHarmPlugin() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderFilesTest this;

        this := @this: SortOrderFilesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Xml_deviations_input.xml", "/Xml_deviations_output.xml");

        return;
    }

    private static void lambda$illegalPredefinedSortOrderShouldReportError$1() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("special.xml");

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_default_1_0_0.xml");

        return;
    }

    private static void lambda$nullPredefinedSortOrderShouldReportError$0() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0, $stack1, $stack2;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack1 = virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>(null);

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/sortOrderFiles/sorted_default_1_0_0.xml");

        return;
    }
}
