class SortOrderTest extends java.lang.Object
{

    void <init>()
    {
        SortOrderTest this;

        this := @this: SortOrderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void testSortDifferentClassPath() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/differentOrder.xml");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/full_differentorder_expected.xml");

        return;
    }

    final void testSortDifferentRelativePath() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("src/test/resources/difforder/differentOrder.xml");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/full_differentorder_expected.xml");

        return;
    }

    final void testSortXmlCharacter() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Character_input.xml", "/Character_expected.xml");

        return;
    }

    final void testSortXmlComplex() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Complex_input.xml", "/Complex_expected.xml");

        return;
    }

    final void testSortXmlFullFromAlphabeticalOrder() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_alfa_input.xml", "/full_expected.xml");

        return;
    }

    final void testSortXmlFull() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/full_unsorted_input.xml", "/full_expected.xml");

        return;
    }

    final void testSortXmlReal1() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil noKeepBlankLines()>();

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Real1_input.xml", "/Real1_expected.xml");

        return;
    }

    final void testSortXmlSimple() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Simple_input.xml", "/Simple_expected.xml");

        return;
    }

    final void testSortWithIndent() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil nrOfIndentSpace(int)>(4);

        virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Simple_input.xml", "/Simple_expected_indent.xml");

        return;
    }

    final void testSortWithDependencySortSimple() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Simple_input.xml", "/Simple_expected_sortDep.xml");

        return;
    }

    final void testSortWithDependencySortFull() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortDep_input.xml", "/SortDep_expected.xml");

        return;
    }

    final void sortedFileShouldNotBeSorted() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortOrderTest this;

        this := @this: SortOrderTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testNoSorting(java.lang.String)>("/SortDep_expected.xml");

        return;
    }

    final void corruptFileShouldThrowException()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack6;
        org.hamcrest.Matcher $stack7, $stack8, $stack9;
        SortOrderTest this;

        this := @this: SortOrderTest;

        testMethod = staticinvoke <SortOrderTest$lambda_corruptFileShouldThrowException_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack4;

        $stack6 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("content: <project><artifactId>sortpom</artifactId>");

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("Could not sort ");

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($stack7, $stack8);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected message", $stack6, $stack9);

        return;
    }

    private static void lambda$corruptFileShouldThrowException$0() throws java.lang.Throwable
    {
        sortpom.util.SortPomImplUtil $stack0;

        $stack0 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        virtualinvoke $stack0.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/Corrupt_file.xml", "/Corrupt_file.xml");

        return;
    }
}
