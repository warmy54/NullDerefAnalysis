public class SortPomImplUtil extends java.lang.Object
{
    private sortpom.util.TestHandler testHandler;
    private java.lang.String customSortOrderFile;
    private java.lang.String sortDependencies;
    private java.lang.String sortDependencyExclusions;
    private java.lang.String sortPlugins;
    private boolean sortProperties;
    private boolean sortModules;
    private boolean sortExecutions;
    private java.lang.String predefinedSortOrder;
    private java.lang.String lineSeparator;
    private java.lang.String testPomFileName;
    private java.lang.String testPomBackupExtension;
    private int nrOfIndentSpace;
    private boolean keepBlankLines;
    private boolean ignoreLineSeparators;
    private boolean indentBLankLines;
    private boolean indentSchemaLocation;
    private boolean keepTimestamp;
    private java.lang.String verifyFail;
    private java.lang.String verifyFailOn;
    private java.lang.String encoding;
    private java.io.File testpom;
    private java.lang.String violationFile;
    private boolean createBackupFile;

    private void <init>()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        this := @this: SortPomImplUtil;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String sortDependencies> = "";

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $r1.<sortpom.util.SortPomImplUtil: java.lang.String sortDependencyExclusions> = "";

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: java.lang.String sortPlugins> = "";

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $r3.<sortpom.util.SortPomImplUtil: boolean sortProperties> = 0;

        $r4 = (sortpom.util.SortPomImplUtil) this;

        $r4.<sortpom.util.SortPomImplUtil: boolean sortModules> = 0;

        $r5 = (sortpom.util.SortPomImplUtil) this;

        $r5.<sortpom.util.SortPomImplUtil: boolean sortExecutions> = 0;

        $r6 = (sortpom.util.SortPomImplUtil) this;

        $r6.<sortpom.util.SortPomImplUtil: java.lang.String predefinedSortOrder> = "recommended_2008_06";

        $r7 = (sortpom.util.SortPomImplUtil) this;

        $r7.<sortpom.util.SortPomImplUtil: java.lang.String lineSeparator> = "\r\n";

        $r8 = (sortpom.util.SortPomImplUtil) this;

        $r8.<sortpom.util.SortPomImplUtil: java.lang.String testPomFileName> = "src/test/resources/testpom.xml";

        $r9 = (sortpom.util.SortPomImplUtil) this;

        $r9.<sortpom.util.SortPomImplUtil: java.lang.String testPomBackupExtension> = ".testExtension";

        $r10 = (sortpom.util.SortPomImplUtil) this;

        $r10.<sortpom.util.SortPomImplUtil: int nrOfIndentSpace> = 2;

        $r11 = (sortpom.util.SortPomImplUtil) this;

        $r11.<sortpom.util.SortPomImplUtil: boolean keepBlankLines> = 1;

        $r12 = (sortpom.util.SortPomImplUtil) this;

        $r12.<sortpom.util.SortPomImplUtil: boolean ignoreLineSeparators> = 1;

        $r13 = (sortpom.util.SortPomImplUtil) this;

        $r13.<sortpom.util.SortPomImplUtil: boolean indentBLankLines> = 0;

        $r14 = (sortpom.util.SortPomImplUtil) this;

        $r14.<sortpom.util.SortPomImplUtil: boolean indentSchemaLocation> = 0;

        $r15 = (sortpom.util.SortPomImplUtil) this;

        $r15.<sortpom.util.SortPomImplUtil: boolean keepTimestamp> = 0;

        $r16 = (sortpom.util.SortPomImplUtil) this;

        $r16.<sortpom.util.SortPomImplUtil: java.lang.String verifyFail> = "SORT";

        $r17 = (sortpom.util.SortPomImplUtil) this;

        $r17.<sortpom.util.SortPomImplUtil: java.lang.String verifyFailOn> = "xmlElements";

        $r18 = (sortpom.util.SortPomImplUtil) this;

        $r18.<sortpom.util.SortPomImplUtil: java.lang.String encoding> = "UTF-8";

        $r19 = (sortpom.util.SortPomImplUtil) this;

        $r19.<sortpom.util.SortPomImplUtil: boolean createBackupFile> = 1;

        return;
    }

    public static sortpom.util.SortPomImplUtil create()
    {
        sortpom.util.SortPomImplUtil $stack0;

        $stack0 = new sortpom.util.SortPomImplUtil;

        specialinvoke $stack0.<sortpom.util.SortPomImplUtil: void <init>()>();

        return $stack0;
    }

    public void testFiles(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName, expectedResourceFileName, $stack10, $stack13, $stack18;
        sortpom.parameter.PluginParameters $stack5;
        sortpom.util.TestHandler $stack6, $stack7, $u0;
        java.util.List infoLogger;
        java.lang.Object $stack9, $stack12, $stack17;
        org.hamcrest.Matcher $stack11, $stack14, $stack19;
        int $stack15, $stack16;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        expectedResourceFileName := @parameter1: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack5 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, expectedResourceFileName, $stack5);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack6 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        virtualinvoke $stack6.<sortpom.util.TestHandler: void performSortThatSorted()>();

        $r4 = (sortpom.util.SortPomImplUtil) this;

        $stack7 = $r4.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        infoLogger = virtualinvoke $stack7.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack9 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>(0);

        $stack10 = (java.lang.String) $stack9;

        $stack11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Sorting file ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack10, $stack11);

        $stack12 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>(1);

        $stack13 = (java.lang.String) $stack12;

        $stack14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Saved backup of ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack13, $stack14);

        $stack15 = interfaceinvoke infoLogger.<java.util.List: int size()>();

        $stack16 = $stack15 - 1;

        $stack17 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>($stack16);

        $stack18 = (java.lang.String) $stack17;

        $stack19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Saved sorted pom file to ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack18, $stack19);

        return;
    }

    public void testFilesWithTimestamp(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName, expectedResourceFileName;
        sortpom.parameter.PluginParameters $stack4;
        sortpom.util.TestHandler $stack5, $u0;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        expectedResourceFileName := @parameter1: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack4 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, expectedResourceFileName, $stack4);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack5 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        virtualinvoke $stack5.<sortpom.util.TestHandler: void performSortThatTestsTimestamps()>();

        return;
    }

    public void testNoSorting(java.lang.String) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName;
        sortpom.parameter.PluginParameters $stack3;
        sortpom.util.TestHandler $stack4, $stack5, $u0;
        java.util.List $stack7;
        java.lang.Object $stack8;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack3 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, inputResourceFileName, $stack3);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack4 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        virtualinvoke $stack4.<sortpom.util.TestHandler: void performSortThatDidNotSort()>();

        $r4 = (sortpom.util.SortPomImplUtil) this;

        $stack5 = $r4.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack7 = virtualinvoke $stack5.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("[INFO] Pom file is already sorted, exiting", $stack8);

        return;
    }

    public void testVerifyXmlIsOrdered(java.lang.String) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName;
        sortpom.parameter.PluginParameters $stack4;
        sortpom.util.TestHandler $stack5, $u0;
        sortpom.util.XmlOrderedResult xmlOrderedResult;
        boolean $stack7;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack4 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, $stack4);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack5 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        xmlOrderedResult = virtualinvoke $stack5.<sortpom.util.TestHandler: sortpom.util.XmlOrderedResult performVerify()>();

        $stack7 = virtualinvoke xmlOrderedResult.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack7, "Expected that xml is ordered, ");

        return;
    }

    public void testVerifyXmlIsNotOrdered(java.lang.String, java.lang.CharSequence) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName, $stack9;
        sortpom.parameter.PluginParameters $stack5;
        sortpom.util.TestHandler $stack6, $u0;
        sortpom.util.XmlOrderedResult xmlOrderedResult;
        boolean $stack8;
        java.lang.CharSequence warningMessage;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        warningMessage := @parameter1: java.lang.CharSequence;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack5 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, $stack5);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack6 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        xmlOrderedResult = virtualinvoke $stack6.<sortpom.util.TestHandler: sortpom.util.XmlOrderedResult performVerify()>();

        $stack8 = virtualinvoke xmlOrderedResult.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack8, "Expected that xml is not ordered, ");

        $stack9 = virtualinvoke xmlOrderedResult.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(warningMessage, $stack9);

        return;
    }

    public void testVerifySort(java.lang.String, java.lang.String, java.lang.String, boolean) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName, expectedResourceFileName, warningMessage, $stack14, $stack18, $stack21, $stack26;
        sortpom.parameter.PluginParameters $stack8;
        sortpom.util.TestHandler $stack9, $stack11, $u0;
        boolean outputToViolationFile;
        java.util.List infoLogger;
        java.lang.Object $stack13, $stack17, $stack20, $stack25;
        org.hamcrest.Matcher $stack15, $stack19, $stack22, $stack27;
        int $stack23, $stack24, index, index#2;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        expectedResourceFileName := @parameter1: java.lang.String;

        warningMessage := @parameter2: java.lang.String;

        outputToViolationFile := @parameter3: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack8 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, expectedResourceFileName, $stack8);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack9 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        virtualinvoke $stack9.<sortpom.util.TestHandler: void performVerifyThatSorted()>();

        $r4 = (sortpom.util.SortPomImplUtil) this;

        index = specialinvoke $r4.<sortpom.util.SortPomImplUtil: int assertStartOfMessages(java.lang.String,boolean)>(warningMessage, outputToViolationFile);

        $r5 = (sortpom.util.SortPomImplUtil) this;

        $stack11 = $r5.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        infoLogger = virtualinvoke $stack11.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack13 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>(index);

        $stack14 = (java.lang.String) $stack13;

        $stack15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] The file ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack14, $stack15);

        index#2 = index + 1;

        $stack17 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>(index);

        $stack18 = (java.lang.String) $stack17;

        $stack19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>(" is not sorted");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack18, $stack19);

        $stack20 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>(index#2);

        $stack21 = (java.lang.String) $stack20;

        $stack22 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Sorting file ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack21, $stack22);

        $stack23 = interfaceinvoke infoLogger.<java.util.List: int size()>();

        $stack24 = $stack23 - 1;

        $stack25 = interfaceinvoke infoLogger.<java.util.List: java.lang.Object get(int)>($stack24);

        $stack26 = (java.lang.String) $stack25;

        $stack27 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Saved sorted pom file to ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack26, $stack27);

        return;
    }

    public void testVerifyFail(java.lang.String, java.lang.Class, java.lang.String, boolean)
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName, warningMessage, $stack17, $stack22;
        sortpom.parameter.PluginParameters $stack8;
        sortpom.util.TestHandler $stack9, $stack14, $stack19, $u0;
        java.lang.Exception $stack11;
        java.lang.Class expectedExceptionClass, $stack12;
        boolean outputToViolationFile;
        int index;
        java.util.List $stack15, $stack20;
        java.lang.Object $stack16, $stack21;
        org.hamcrest.Matcher $stack18, $stack23;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        expectedExceptionClass := @parameter1: java.lang.Class;

        warningMessage := @parameter2: java.lang.String;

        outputToViolationFile := @parameter3: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack8 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, $stack8);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

     label1:
        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack9 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        virtualinvoke $stack9.<sortpom.util.TestHandler: void performVerifyThatDidNotSort()>();

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Object fail()>();

     label2:
        goto label4;

     label3:
        $stack11 := @caughtexception;

        $stack12 = virtualinvoke $stack11.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedExceptionClass, $stack12);

        $r4 = (sortpom.util.SortPomImplUtil) this;

        index = specialinvoke $r4.<sortpom.util.SortPomImplUtil: int assertStartOfMessages(java.lang.String,boolean)>(warningMessage, outputToViolationFile);

        $r5 = (sortpom.util.SortPomImplUtil) this;

        $stack14 = $r5.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack15 = virtualinvoke $stack14.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack16 = interfaceinvoke $stack15.<java.util.List: java.lang.Object get(int)>(index);

        $stack17 = (java.lang.String) $stack16;

        $stack18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[ERROR] The file ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack17, $stack18);

        $r6 = (sortpom.util.SortPomImplUtil) this;

        $stack19 = $r6.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack20 = virtualinvoke $stack19.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack21 = interfaceinvoke $stack20.<java.util.List: java.lang.Object get(int)>(index);

        $stack22 = (java.lang.String) $stack21;

        $stack23 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>(" is not sorted");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack22, $stack23);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testVerifyWarn(java.lang.String, java.lang.String, boolean) throws java.lang.Exception
    {
        SortPomImplUtil this;
        java.lang.String inputResourceFileName, warningMessage, $stack12, $stack17;
        sortpom.parameter.PluginParameters $stack6;
        sortpom.util.TestHandler $stack7, $stack9, $stack14, $u0;
        boolean outputToViolationFile;
        int index;
        java.util.List $stack10, $stack15;
        java.lang.Object $stack11, $stack16;
        org.hamcrest.Matcher $stack13, $stack18;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: SortPomImplUtil;

        inputResourceFileName := @parameter0: java.lang.String;

        warningMessage := @parameter1: java.lang.String;

        outputToViolationFile := @parameter2: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        specialinvoke $r0.<sortpom.util.SortPomImplUtil: void setup()>();

        $u0 = new sortpom.util.TestHandler;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack6 = specialinvoke $r1.<sortpom.util.SortPomImplUtil: sortpom.parameter.PluginParameters getPluginParameters()>();

        specialinvoke $u0.<sortpom.util.TestHandler: void <init>(java.lang.String,java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, inputResourceFileName, $stack6);

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler> = $u0;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack7 = $r3.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        virtualinvoke $stack7.<sortpom.util.TestHandler: void performVerifyThatDidNotSort()>();

        $r4 = (sortpom.util.SortPomImplUtil) this;

        index = specialinvoke $r4.<sortpom.util.SortPomImplUtil: int assertStartOfMessages(java.lang.String,boolean)>(warningMessage, outputToViolationFile);

        $r5 = (sortpom.util.SortPomImplUtil) this;

        $stack9 = $r5.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack10 = virtualinvoke $stack9.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack11 = interfaceinvoke $stack10.<java.util.List: java.lang.Object get(int)>(index);

        $stack12 = (java.lang.String) $stack11;

        $stack13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[WARNING] The file ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack12, $stack13);

        $r6 = (sortpom.util.SortPomImplUtil) this;

        $stack14 = $r6.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack15 = virtualinvoke $stack14.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack16 = interfaceinvoke $stack15.<java.util.List: java.lang.Object get(int)>(index);

        $stack17 = (java.lang.String) $stack16;

        $stack18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>(" is not sorted");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack17, $stack18);

        return;
    }

    private int assertStartOfMessages(java.lang.String, boolean)
    {
        SortPomImplUtil this;
        sortpom.util.TestHandler $stack4, $stack10, $stack14;
        java.util.List $stack5, $stack11, $stack15;
        java.lang.Object $stack7, $stack13, $stack17;
        java.lang.String $stack8, warningMessage, $stack18;
        org.hamcrest.Matcher $stack9, $stack19;
        boolean outputToViolationFile;
        int $stack16, index#2, index#3;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2;

        this := @this: SortPomImplUtil;

        warningMessage := @parameter0: java.lang.String;

        outputToViolationFile := @parameter1: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $stack4 = $r0.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack5 = virtualinvoke $stack4.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        index#2 = 0 + 1;

        $stack7 = interfaceinvoke $stack5.<java.util.List: java.lang.Object get(int)>(0);

        $stack8 = (java.lang.String) $stack7;

        $stack9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Verifying file ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack9);

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack10 = $r1.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack11 = virtualinvoke $stack10.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        index#3 = index#2 + 1;

        $stack13 = interfaceinvoke $stack11.<java.util.List: java.lang.Object get(int)>(index#2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(warningMessage, $stack13);

        if outputToViolationFile == 0 goto label1;

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $stack14 = $r2.<sortpom.util.SortPomImplUtil: sortpom.util.TestHandler testHandler>;

        $stack15 = virtualinvoke $stack14.<sortpom.util.TestHandler: java.util.List getInfoLogger()>();

        $stack16 = index#3;

        index#3 = index#3 + 1;

        $stack17 = interfaceinvoke $stack15.<java.util.List: java.lang.Object get(int)>($stack16);

        $stack18 = (java.lang.String) $stack17;

        $stack19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher startsWith(java.lang.String)>("[INFO] Saving violation report to ");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack18, $stack19);

     label1:
        return index#3;
    }

    public sortpom.util.SortPomImplUtil nrOfIndentSpace(int)
    {
        SortPomImplUtil this;
        int indent;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        indent := @parameter0: int;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: int nrOfIndentSpace> = indent;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil noKeepBlankLines()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean keepBlankLines> = 0;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil indentBLankLines()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean indentBLankLines> = 1;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil indentSchemaLocation()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean indentSchemaLocation> = 1;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String sortOrder;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        sortOrder := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String sortDependencies> = sortOrder;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil sortDependencyExclusions(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String sortOrder;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        sortOrder := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String sortDependencyExclusions> = sortOrder;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String sortOrder;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        sortOrder := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String sortPlugins> = sortOrder;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil sortProperties()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean sortProperties> = 1;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil sortModules()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean sortModules> = 1;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil sortExecutions()
    {
        SortPomImplUtil this;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean sortExecutions> = 1;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String customSortOrderFile;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        customSortOrderFile := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String customSortOrderFile> = customSortOrderFile;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String predefinedSortOrder;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2;

        this := @this: SortPomImplUtil;

        predefinedSortOrder := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String predefinedSortOrder> = predefinedSortOrder;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $r1.<sortpom.util.SortPomImplUtil: java.lang.String customSortOrderFile> = null;

        $r2 = (sortpom.util.SortPomImplUtil) this;

        return $r2;
    }

    public sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String lineSeparator;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        lineSeparator := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String lineSeparator> = lineSeparator;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil ignoreLineSeparators(boolean)
    {
        SortPomImplUtil this;
        boolean ignoreLineSeparators;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        ignoreLineSeparators := @parameter0: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean ignoreLineSeparators> = ignoreLineSeparators;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil keepTimestamp(boolean)
    {
        SortPomImplUtil this;
        boolean keepTimestamp;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        keepTimestamp := @parameter0: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean keepTimestamp> = keepTimestamp;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil verifyFail(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String verifyFail;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        verifyFail := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String verifyFail> = verifyFail;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil verifyFailOn(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String verifyFailOn;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        verifyFailOn := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String verifyFailOn> = verifyFailOn;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil backupFileExtension(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String backupFileExtension;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        backupFileExtension := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String testPomBackupExtension> = backupFileExtension;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil encoding(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String encoding;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        encoding := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String encoding> = encoding;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil testPomFileNameUniqueNumber(int)
    {
        SortPomImplUtil this;
        java.lang.StringBuilder $stack3, $stack4, $stack5, $u0;
        int uniqueNumber;
        java.lang.String $stack6;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        uniqueNumber := @parameter0: int;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/testpom");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(uniqueNumber);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String testPomFileName> = $stack6;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil violationFile(java.lang.String)
    {
        SortPomImplUtil this;
        java.lang.String violationFile;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        violationFile := @parameter0: java.lang.String;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: java.lang.String violationFile> = violationFile;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    public sortpom.util.SortPomImplUtil createBackupFile(boolean)
    {
        SortPomImplUtil this;
        boolean createBackupFile;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        createBackupFile := @parameter0: boolean;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $r0.<sortpom.util.SortPomImplUtil: boolean createBackupFile> = createBackupFile;

        $r1 = (sortpom.util.SortPomImplUtil) this;

        return $r1;
    }

    private void setup()
    {
        SortPomImplUtil this;
        java.lang.String $stack2;
        java.io.File $u0;
        sortpom.util.SortPomImplUtil $r0, $r1;

        this := @this: SortPomImplUtil;

        $u0 = new java.io.File;

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $stack2 = $r0.<sortpom.util.SortPomImplUtil: java.lang.String testPomFileName>;

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String)>($stack2);

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $r1.<sortpom.util.SortPomImplUtil: java.io.File testpom> = $u0;

        return;
    }

    private sortpom.parameter.PluginParameters getPluginParameters()
    {
        sortpom.parameter.PluginParameters$Builder $stack1, $stack3, $stack8, $stack10, $stack13, $stack17, $stack24, $stack27, $stack30, $stack32;
        SortPomImplUtil this;
        java.io.File $stack2;
        boolean $stack4, $stack7, $stack11, $stack14, $stack15, $stack18, $stack19, $stack20, $stack31;
        java.lang.String $stack5, $stack6, $stack9, $stack12, $stack21, $stack22, $stack23, $stack25, $stack26, $stack28, $stack29;
        int $stack16;
        sortpom.parameter.PluginParameters $stack33;
        sortpom.util.SortPomImplUtil $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        this := @this: SortPomImplUtil;

        $stack1 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $r0 = (sortpom.util.SortPomImplUtil) this;

        $stack2 = $r0.<sortpom.util.SortPomImplUtil: java.io.File testpom>;

        $stack3 = virtualinvoke $stack1.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setPomFile(java.io.File)>($stack2);

        $r1 = (sortpom.util.SortPomImplUtil) this;

        $stack7 = $r1.<sortpom.util.SortPomImplUtil: boolean createBackupFile>;

        $r2 = (sortpom.util.SortPomImplUtil) this;

        $stack6 = $r2.<sortpom.util.SortPomImplUtil: java.lang.String testPomBackupExtension>;

        $r3 = (sortpom.util.SortPomImplUtil) this;

        $stack5 = $r3.<sortpom.util.SortPomImplUtil: java.lang.String violationFile>;

        $r4 = (sortpom.util.SortPomImplUtil) this;

        $stack4 = $r4.<sortpom.util.SortPomImplUtil: boolean keepTimestamp>;

        $stack8 = virtualinvoke $stack3.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFileOutput(boolean,java.lang.String,java.lang.String,boolean)>($stack7, $stack6, $stack5, $stack4);

        $r5 = (sortpom.util.SortPomImplUtil) this;

        $stack9 = $r5.<sortpom.util.SortPomImplUtil: java.lang.String encoding>;

        $stack10 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>($stack9);

        $r6 = (sortpom.util.SortPomImplUtil) this;

        $stack12 = $r6.<sortpom.util.SortPomImplUtil: java.lang.String lineSeparator>;

        $r7 = (sortpom.util.SortPomImplUtil) this;

        $stack11 = $r7.<sortpom.util.SortPomImplUtil: boolean keepBlankLines>;

        $stack13 = virtualinvoke $stack10.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>($stack12, 1, 0, $stack11);

        $r8 = (sortpom.util.SortPomImplUtil) this;

        $stack16 = $r8.<sortpom.util.SortPomImplUtil: int nrOfIndentSpace>;

        $r9 = (sortpom.util.SortPomImplUtil) this;

        $stack15 = $r9.<sortpom.util.SortPomImplUtil: boolean indentBLankLines>;

        $r10 = (sortpom.util.SortPomImplUtil) this;

        $stack14 = $r10.<sortpom.util.SortPomImplUtil: boolean indentSchemaLocation>;

        $stack17 = virtualinvoke $stack13.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>($stack16, $stack15, $stack14);

        $r11 = (sortpom.util.SortPomImplUtil) this;

        $stack23 = $r11.<sortpom.util.SortPomImplUtil: java.lang.String sortDependencies>;

        $r12 = (sortpom.util.SortPomImplUtil) this;

        $stack22 = $r12.<sortpom.util.SortPomImplUtil: java.lang.String sortDependencyExclusions>;

        $r13 = (sortpom.util.SortPomImplUtil) this;

        $stack21 = $r13.<sortpom.util.SortPomImplUtil: java.lang.String sortPlugins>;

        $r14 = (sortpom.util.SortPomImplUtil) this;

        $stack20 = $r14.<sortpom.util.SortPomImplUtil: boolean sortProperties>;

        $r15 = (sortpom.util.SortPomImplUtil) this;

        $stack19 = $r15.<sortpom.util.SortPomImplUtil: boolean sortModules>;

        $r16 = (sortpom.util.SortPomImplUtil) this;

        $stack18 = $r16.<sortpom.util.SortPomImplUtil: boolean sortExecutions>;

        $stack24 = virtualinvoke $stack17.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($stack23, $stack22, $stack21, $stack20, $stack19, $stack18);

        $r17 = (sortpom.util.SortPomImplUtil) this;

        $stack26 = $r17.<sortpom.util.SortPomImplUtil: java.lang.String customSortOrderFile>;

        $r18 = (sortpom.util.SortPomImplUtil) this;

        $stack25 = $r18.<sortpom.util.SortPomImplUtil: java.lang.String predefinedSortOrder>;

        $stack27 = virtualinvoke $stack24.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortOrder(java.lang.String,java.lang.String)>($stack26, $stack25);

        $r19 = (sortpom.util.SortPomImplUtil) this;

        $stack29 = $r19.<sortpom.util.SortPomImplUtil: java.lang.String verifyFail>;

        $r20 = (sortpom.util.SortPomImplUtil) this;

        $stack28 = $r20.<sortpom.util.SortPomImplUtil: java.lang.String verifyFailOn>;

        $stack30 = virtualinvoke $stack27.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>($stack29, $stack28);

        $r21 = (sortpom.util.SortPomImplUtil) this;

        $stack31 = $r21.<sortpom.util.SortPomImplUtil: boolean ignoreLineSeparators>;

        $stack32 = virtualinvoke $stack30.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setTriggers(boolean)>($stack31);

        $stack33 = virtualinvoke $stack32.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        return $stack33;
    }
}
