class SortPomServiceTest extends java.lang.Object
{
    private final sortpom.SortPomService service;
    private final refutils.ReflectionHelper serviceHelper;

    void <init>()
    {
        SortPomServiceTest this;
        sortpom.SortPomService $stack3, $u0;
        refutils.ReflectionHelper $u1;
        sortpom.SortPomServiceTest $r0, $r1, $r2;

        this := @this: SortPomServiceTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new sortpom.SortPomService;

        specialinvoke $u0.<sortpom.SortPomService: void <init>()>();

        $r0 = (sortpom.SortPomServiceTest) this;

        $r0.<sortpom.SortPomServiceTest: sortpom.SortPomService service> = $u0;

        $u1 = new refutils.ReflectionHelper;

        $r1 = (sortpom.SortPomServiceTest) this;

        $stack3 = $r1.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        specialinvoke $u1.<refutils.ReflectionHelper: void <init>(java.lang.Object)>($stack3);

        $r2 = (sortpom.SortPomServiceTest) this;

        $r2.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper> = $u1;

        return;
    }

    void equalStringShouldBeSame()
    {
        SortPomServiceTest this;
        sortpom.SortPomService $stack2;
        sortpom.util.XmlOrderedResult result;
        boolean $stack4;
        java.lang.Boolean $stack5, $stack6;
        org.hamcrest.Matcher $stack7;
        sortpom.SortPomServiceTest $r0, $r1;

        this := @this: SortPomServiceTest;

        $r0 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r0.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello", "hello");

        $r1 = (sortpom.SortPomServiceTest) this;

        $stack2 = $r1.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        result = virtualinvoke $stack2.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack4 = virtualinvoke result.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack4);

        $stack6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void equalWithNewlineShouldBeSame()
    {
        SortPomServiceTest this;
        refutils.ReflectionHelper $stack2;
        java.lang.Boolean $stack4, $stack8, $stack9;
        sortpom.SortPomService $stack5;
        sortpom.util.XmlOrderedResult result;
        boolean $stack7;
        org.hamcrest.Matcher $stack10;
        sortpom.SortPomServiceTest $r0, $r1, $r2;

        this := @this: SortPomServiceTest;

        $r0 = (sortpom.SortPomServiceTest) this;

        $stack2 = $r0.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $stack2.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("ignoreLineSeparators", $stack4);

        $r1 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r1.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello\nyou", "hello\nyou");

        $r2 = (sortpom.SortPomServiceTest) this;

        $stack5 = $r2.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        result = virtualinvoke $stack5.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack7 = virtualinvoke result.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        return;
    }

    void equalWithDifferentNewlineShouldFail()
    {
        SortPomServiceTest this;
        refutils.ReflectionHelper $stack2;
        java.lang.Boolean $stack4, $stack8, $stack9, $stack16, $stack17;
        sortpom.SortPomService $stack5, $stack13;
        boolean $stack7, $stack15;
        org.hamcrest.Matcher $stack10, $stack12, $stack18, $stack20;
        java.lang.String $stack11, $stack19;
        sortpom.util.XmlOrderedResult originalXmlStringSorted;
        sortpom.SortPomServiceTest $r0, $r1, $r2, $r3, $r4;

        this := @this: SortPomServiceTest;

        $r0 = (sortpom.SortPomServiceTest) this;

        $stack2 = $r0.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $stack2.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("ignoreLineSeparators", $stack4);

        $r1 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r1.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello\nyou", "hello\r\nyou");

        $r2 = (sortpom.SortPomServiceTest) this;

        $stack5 = $r2.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        originalXmlStringSorted = virtualinvoke $stack5.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack7 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        $stack11 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The line separator characters differ from sorted pom");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack11, $stack12);

        $r3 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r3.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello\r\nyou", "hello\nyou");

        $r4 = (sortpom.SortPomServiceTest) this;

        $stack13 = $r4.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        originalXmlStringSorted = virtualinvoke $stack13.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack15 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack15);

        $stack17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack17);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack16, $stack18);

        $stack19 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        $stack20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The line separator characters differ from sorted pom");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack19, $stack20);

        return;
    }

    void equalWithDifferentLengthShouldFail()
    {
        SortPomServiceTest this;
        refutils.ReflectionHelper $stack2;
        java.lang.Boolean $stack4, $stack8, $stack9, $stack16, $stack17;
        sortpom.SortPomService $stack5, $stack13;
        boolean $stack7, $stack15;
        org.hamcrest.Matcher $stack10, $stack12, $stack18, $stack20;
        java.lang.String $stack11, $stack19;
        sortpom.util.XmlOrderedResult originalXmlStringSorted;
        sortpom.SortPomServiceTest $r0, $r1, $r2, $r3, $r4;

        this := @this: SortPomServiceTest;

        $r0 = (sortpom.SortPomServiceTest) this;

        $stack2 = $r0.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $stack2.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("ignoreLineSeparators", $stack4);

        $r1 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r1.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello", "hello\nyou");

        $r2 = (sortpom.SortPomServiceTest) this;

        $stack5 = $r2.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        originalXmlStringSorted = virtualinvoke $stack5.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack7 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        $stack11 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The line 2 is not considered sorted, should be \'you\'");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack11, $stack12);

        $r3 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r3.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello\nyou", "hello");

        $r4 = (sortpom.SortPomServiceTest) this;

        $stack13 = $r4.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        originalXmlStringSorted = virtualinvoke $stack13.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack15 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack15);

        $stack17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack17);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack16, $stack18);

        $stack19 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        $stack20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The line 2 is not considered sorted, should be empty");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack19, $stack20);

        return;
    }

    void equalWithDifferentTextsShouldFail()
    {
        SortPomServiceTest this;
        refutils.ReflectionHelper $stack2;
        java.lang.Boolean $stack4, $stack8, $stack9;
        sortpom.SortPomService $stack5;
        sortpom.util.XmlOrderedResult originalXmlStringSorted;
        boolean $stack7;
        org.hamcrest.Matcher $stack10, $stack12;
        java.lang.String $stack11;
        sortpom.SortPomServiceTest $r0, $r1, $r2;

        this := @this: SortPomServiceTest;

        $r0 = (sortpom.SortPomServiceTest) this;

        $stack2 = $r0.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $stack2.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("ignoreLineSeparators", $stack4);

        $r1 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r1.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello\nme", "hello\nyou");

        $r2 = (sortpom.SortPomServiceTest) this;

        $stack5 = $r2.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        originalXmlStringSorted = virtualinvoke $stack5.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        $stack7 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack7);

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $stack10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack8, $stack10);

        $stack11 = virtualinvoke originalXmlStringSorted.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        $stack12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("The line 2 is not considered sorted, should be \'you\'");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack11, $stack12);

        return;
    }

    void coverageIOExceptionHack()
    {
        SortPomServiceTest this;
        refutils.ReflectionHelper $stack4;
        java.lang.Boolean $stack6;
        org.mockito.MockedStatic$Verification $stack8;
        org.mockito.stubbing.OngoingStubbing $stack9;
        org.mockito.stubbing.Answer $stack10;
        sortpom.SortPomService $stack12;
        java.lang.Exception $stack15;
        java.lang.String $stack16;
        org.hamcrest.Matcher $stack17;
        java.lang.Throwable $stack18, $stack19;
        org.mockito.MockedStatic mock;
        sortpom.SortPomServiceTest $r0, $r1, $r2;

        this := @this: SortPomServiceTest;

        $r0 = (sortpom.SortPomServiceTest) this;

        $stack4 = $r0.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        $stack6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $stack4.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("ignoreLineSeparators", $stack6);

        $r1 = (sortpom.SortPomServiceTest) this;

        specialinvoke $r1.<sortpom.SortPomServiceTest: void setOriginalAndSortedXml(java.lang.String,java.lang.String)>("hello\nme", "hello\nyou");

     label01:
        mock = staticinvoke <org.mockito.Mockito: org.mockito.MockedStatic mockStatic(java.lang.Class)>(class "Lsortpom/util/XmlOrderedResult;");

     label02:
        $stack8 = staticinvoke <SortPomServiceTest$lambda_coverageIOExceptionHack_0__309: org.mockito.MockedStatic$Verification bootstrap$()>();

        $stack9 = interfaceinvoke mock.<org.mockito.MockedStatic: org.mockito.stubbing.OngoingStubbing when(org.mockito.MockedStatic$Verification)>($stack8);

        $stack10 = staticinvoke <SortPomServiceTest$lambda_coverageIOExceptionHack_1__310: org.mockito.stubbing.Answer bootstrap$()>();

        interfaceinvoke $stack9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenAnswer(org.mockito.stubbing.Answer)>($stack10);

        $r2 = (sortpom.SortPomServiceTest) this;

        $stack12 = $r2.<sortpom.SortPomServiceTest: sortpom.SortPomService service>;

        virtualinvoke $stack12.<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>();

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Object fail()>();

     label03:
        if mock == null goto label09;

        interfaceinvoke mock.<org.mockito.MockedStatic: void close()>();

        goto label09;

     label04:
        $stack19 := @caughtexception;

        if mock == null goto label08;

     label05:
        interfaceinvoke mock.<org.mockito.MockedStatic: void close()>();

     label06:
        goto label08;

     label07:
        $stack18 := @caughtexception;

        virtualinvoke $stack19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack18);

     label08:
        throw $stack19;

     label09:
        goto label11;

     label10:
        $stack15 := @caughtexception;

        $stack16 = virtualinvoke $stack15.<java.lang.Exception: java.lang.String getMessage()>();

        $stack17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("Meh!");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack16, $stack17);

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Exception from label01 to label09 with label10;
    }

    private void setOriginalAndSortedXml(java.lang.String, java.lang.String)
    {
        SortPomServiceTest this;
        java.lang.String originalXml, sortedXml;
        refutils.ReflectionHelper $stack3, $stack4;
        sortpom.SortPomServiceTest $r0, $r1;

        this := @this: SortPomServiceTest;

        originalXml := @parameter0: java.lang.String;

        sortedXml := @parameter1: java.lang.String;

        $r0 = (sortpom.SortPomServiceTest) this;

        $stack3 = $r0.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        virtualinvoke $stack3.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("originalXml", originalXml);

        $r1 = (sortpom.SortPomServiceTest) this;

        $stack4 = $r1.<sortpom.SortPomServiceTest: refutils.ReflectionHelper serviceHelper>;

        virtualinvoke $stack4.<refutils.ReflectionHelper: void setField(java.lang.String,java.lang.Object)>("sortedXml", sortedXml);

        return;
    }

    private static java.lang.Object lambda$coverageIOExceptionHack$1(org.mockito.invocation.InvocationOnMock) throws java.lang.Throwable
    {
        java.io.IOException $stack1;
        org.mockito.invocation.InvocationOnMock invocationOnMock;

        invocationOnMock := @parameter0: org.mockito.invocation.InvocationOnMock;

        $stack1 = new java.io.IOException;

        specialinvoke $stack1.<java.io.IOException: void <init>(java.lang.String)>("Meh!");

        throw $stack1;
    }

    private static void lambda$coverageIOExceptionHack$0() throws java.lang.Throwable
    {
        staticinvoke <sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>(2, "\'you\'");

        return;
    }
}
