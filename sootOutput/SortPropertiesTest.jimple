class SortPropertiesTest extends java.lang.Object
{

    void <init>()
    {
        SortPropertiesTest this;

        this := @this: SortPropertiesTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void namedParametersInSortFileShouldSortThemFirst() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3;
        SortPropertiesTest this;

        this := @this: SortPropertiesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/sortedPropertiesOrder.xml");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortedProperties_input.xml", "/SortedProperties_output.xml");

        return;
    }

    final void sortPropertyParameterShouldSortAlphabetically() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4;
        SortPropertiesTest this;

        this := @this: SortPropertiesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortProperties()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("custom_1");

        virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortedProperties_input.xml", "/SortedProperties_output_alfa.xml");

        return;
    }

    final void testBothNamedParametersInSortFileAndSortPropertyParameterTest() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4;
        SortPropertiesTest this;

        this := @this: SortPropertiesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil customSortOrderFile(java.lang.String)>("difforder/sortedPropertiesOrder.xml");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortProperties()>();

        virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortedProperties_input.xml", "/SortedProperties_output_alfa2.xml");

        return;
    }

    final void sortingOfFullPomFileShouldWork() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4, $stack5;
        SortPropertiesTest this;

        this := @this: SortPropertiesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortProperties()>();

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack5 = virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack5.<sortpom.util.SortPomImplUtil: void testFiles(java.lang.String,java.lang.String)>("/SortProp_input.xml", "/SortProp_expected.xml");

        return;
    }

    final void duplicatePropertiesShouldNotTriggerSorting() throws java.lang.Exception
    {
        sortpom.util.SortPomImplUtil $stack1, $stack2, $stack3, $stack4, $stack5, $stack6;
        SortPropertiesTest this;

        this := @this: SortPropertiesTest;

        $stack1 = staticinvoke <sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        $stack3 = virtualinvoke $stack2.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortProperties()>();

        $stack4 = virtualinvoke $stack3.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortPlugins(java.lang.String)>("groupId,artifactId");

        $stack5 = virtualinvoke $stack4.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil sortDependencies(java.lang.String)>("groupId,artifactId");

        $stack6 = virtualinvoke $stack5.<sortpom.util.SortPomImplUtil: sortpom.util.SortPomImplUtil lineSeparator(java.lang.String)>("\n");

        virtualinvoke $stack6.<sortpom.util.SortPomImplUtil: void testNoSorting(java.lang.String)>("/SortProp_input_duplicate.xml");

        return;
    }
}
