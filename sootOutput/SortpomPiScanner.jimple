class SortpomPiScanner extends java.lang.Object
{
    private final sortpom.logger.SortPomLogger logger;
    private sortpom.processinstruction.InstructionType expectedNextInstruction;
    private java.lang.String errorString;
    private boolean containsIgnoredSections;

    public void <init>(sortpom.logger.SortPomLogger)
    {
        SortpomPiScanner this;
        sortpom.processinstruction.InstructionType $stack2;
        sortpom.logger.SortPomLogger logger;
        sortpom.processinstruction.SortpomPiScanner $r0, $r1, $r2;

        this := @this: SortpomPiScanner;

        logger := @parameter0: sortpom.logger.SortPomLogger;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        $r0.<sortpom.processinstruction.SortpomPiScanner: sortpom.processinstruction.InstructionType expectedNextInstruction> = $stack2;

        $r1 = (sortpom.processinstruction.SortpomPiScanner) this;

        $r1.<sortpom.processinstruction.SortpomPiScanner: boolean containsIgnoredSections> = 0;

        $r2 = (sortpom.processinstruction.SortpomPiScanner) this;

        $r2.<sortpom.processinstruction.SortpomPiScanner: sortpom.logger.SortPomLogger logger> = logger;

        return;
    }

    public void scan(java.lang.String)
    {
        java.lang.String originalXml, $stack11, $stack12;
        java.util.regex.Pattern $stack3;
        java.util.regex.Matcher matcher;
        boolean $stack5;
        SortpomPiScanner this;
        sortpom.processinstruction.InstructionType $stack6, $stack7, $stack9, $stack10;
        java.lang.Object[] $stack8;
        sortpom.processinstruction.SortpomPiScanner $r0, $r1, $r2, $r3;

        this := @this: SortpomPiScanner;

        originalXml := @parameter0: java.lang.String;

        $stack3 = <sortpom.processinstruction.InstructionType: java.util.regex.Pattern INSTRUCTION_PATTERN>;

        matcher = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(originalXml);

     label1:
        $stack5 = virtualinvoke matcher.<java.util.regex.Matcher: boolean find()>();

        if $stack5 == 0 goto label2;

        $stack12 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        specialinvoke $r0.<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>($stack12);

        $r1 = (sortpom.processinstruction.SortpomPiScanner) this;

        $r1.<sortpom.processinstruction.SortpomPiScanner: boolean containsIgnoredSections> = 1;

        goto label1;

     label2:
        $r2 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack7 = $r2.<sortpom.processinstruction.SortpomPiScanner: sortpom.processinstruction.InstructionType expectedNextInstruction>;

        $stack6 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        if $stack7 == $stack6 goto label3;

        $stack8 = newarray (java.lang.Object)[2];

        $stack9 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack8[0] = $stack9;

        $stack10 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack8[1] = $stack10;

        $stack11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Xml processing instructions for sortpom was not properly terminated. Every <?sortpom %s?> must be followed with <?sortpom %s?>", $stack8);

        $r3 = (sortpom.processinstruction.SortpomPiScanner) this;

        specialinvoke $r3.<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>($stack11);

     label3:
        return;
    }

    private void scanOneInstruction(java.lang.String)
    {
        java.lang.String instruction, $stack9, $stack13;
        boolean $stack2, $stack4;
        SortpomPiScanner this;
        sortpom.processinstruction.InstructionType $stack3, $stack5, $stack6, $stack8, $stack11, $stack12;
        java.lang.Object[] $stack7, $stack10;
        sortpom.processinstruction.SortpomPiScanner $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: SortpomPiScanner;

        instruction := @parameter0: java.lang.String;

        $stack2 = staticinvoke <sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>(instruction);

        if $stack2 != 0 goto label1;

        $stack10 = newarray (java.lang.Object)[3];

        $stack10[0] = instruction;

        $stack11 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType IGNORE>;

        $stack10[1] = $stack11;

        $stack12 = <sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType RESUME>;

        $stack10[2] = $stack12;

        $stack13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Xml contained unknown sortpom instruction \'%s\'. Please use <?sortpom %s?> or <?sortpom %s?>", $stack10);

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        specialinvoke $r0.<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>($stack13);

        goto label3;

     label1:
        $r1 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack3 = $r1.<sortpom.processinstruction.SortpomPiScanner: sortpom.processinstruction.InstructionType expectedNextInstruction>;

        $stack4 = virtualinvoke $stack3.<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>(instruction);

        if $stack4 != 0 goto label2;

        $stack7 = newarray (java.lang.Object)[2];

        $stack7[0] = instruction;

        $r2 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack8 = $r2.<sortpom.processinstruction.SortpomPiScanner: sortpom.processinstruction.InstructionType expectedNextInstruction>;

        $stack7[1] = $stack8;

        $stack9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Xml contained unexpected sortpom instruction \'%s\'. Please use expected instruction <?sortpom %s?>", $stack7);

        $r3 = (sortpom.processinstruction.SortpomPiScanner) this;

        specialinvoke $r3.<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>($stack9);

        goto label3;

     label2:
        $r4 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack5 = $r4.<sortpom.processinstruction.SortpomPiScanner: sortpom.processinstruction.InstructionType expectedNextInstruction>;

        $stack6 = virtualinvoke $stack5.<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>();

        $r5 = (sortpom.processinstruction.SortpomPiScanner) this;

        $r5.<sortpom.processinstruction.SortpomPiScanner: sortpom.processinstruction.InstructionType expectedNextInstruction> = $stack6;

     label3:
        return;
    }

    private void addError(java.lang.String)
    {
        SortpomPiScanner this;
        java.lang.String $stack2, msg;
        sortpom.logger.SortPomLogger $stack3;
        sortpom.processinstruction.SortpomPiScanner $r0, $r1, $r2;

        this := @this: SortpomPiScanner;

        msg := @parameter0: java.lang.String;

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack2 = $r0.<sortpom.processinstruction.SortpomPiScanner: java.lang.String errorString>;

        if $stack2 != null goto label1;

        $r1 = (sortpom.processinstruction.SortpomPiScanner) this;

        $r1.<sortpom.processinstruction.SortpomPiScanner: java.lang.String errorString> = msg;

     label1:
        $r2 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack3 = $r2.<sortpom.processinstruction.SortpomPiScanner: sortpom.logger.SortPomLogger logger>;

        interfaceinvoke $stack3.<sortpom.logger.SortPomLogger: void error(java.lang.String)>(msg);

        return;
    }

    public boolean isScanError()
    {
        SortpomPiScanner this;
        java.lang.String $stack1;
        boolean $stack2;
        sortpom.processinstruction.SortpomPiScanner $r0;

        this := @this: SortpomPiScanner;

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack1 = $r0.<sortpom.processinstruction.SortpomPiScanner: java.lang.String errorString>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public java.lang.String getFirstError()
    {
        SortpomPiScanner this;
        java.lang.String $stack1;
        sortpom.processinstruction.SortpomPiScanner $r0;

        this := @this: SortpomPiScanner;

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack1 = $r0.<sortpom.processinstruction.SortpomPiScanner: java.lang.String errorString>;

        return $stack1;
    }

    public boolean containsIgnoredSections()
    {
        SortpomPiScanner this;
        boolean $stack1;
        sortpom.processinstruction.SortpomPiScanner $r0;

        this := @this: SortpomPiScanner;

        $r0 = (sortpom.processinstruction.SortpomPiScanner) this;

        $stack1 = $r0.<sortpom.processinstruction.SortpomPiScanner: boolean containsIgnoredSections>;

        return $stack1;
    }
}
