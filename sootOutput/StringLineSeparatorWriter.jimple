public class StringLineSeparatorWriter extends sortpom.util.XmlWriter
{
    private static final char NEWLINE;
    private final java.lang.String lineSeparator;
    private boolean wasNewLine;
    private final java.lang.StringBuilder lineBuffer;
    private final java.io.StringWriter out;

    void <init>(java.io.StringWriter, java.lang.String)
    {
        StringLineSeparatorWriter this;
        java.io.StringWriter out;
        java.lang.String lineSeparator;
        java.lang.StringBuilder $u0;
        sortpom.util.StringLineSeparatorWriter $r0, $r1, $r2, $r3;

        this := @this: StringLineSeparatorWriter;

        out := @parameter0: java.io.StringWriter;

        lineSeparator := @parameter1: java.lang.String;

        specialinvoke this.<sortpom.util.XmlWriter: void <init>()>();

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        $r0.<sortpom.util.StringLineSeparatorWriter: boolean wasNewLine> = 0;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        $r1.<sortpom.util.StringLineSeparatorWriter: java.lang.StringBuilder lineBuffer> = $u0;

        $r2 = (sortpom.util.StringLineSeparatorWriter) this;

        $r2.<sortpom.util.StringLineSeparatorWriter: java.io.StringWriter out> = out;

        $r3 = (sortpom.util.StringLineSeparatorWriter) this;

        $r3.<sortpom.util.StringLineSeparatorWriter: java.lang.String lineSeparator> = lineSeparator;

        return;
    }

    public void write(java.lang.String)
    {
        java.lang.String str;
        char[] chars;
        int l4, l5;
        char ch;
        StringLineSeparatorWriter this;
        sortpom.util.StringLineSeparatorWriter $r0;

        this := @this: StringLineSeparatorWriter;

        str := @parameter0: java.lang.String;

        chars = virtualinvoke str.<java.lang.String: char[] toCharArray()>();

        l4 = lengthof chars;

        l5 = 0;

     label1:
        if l5 >= l4 goto label2;

        ch = chars[l5];

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r0.<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>(ch);

        l5 = l5 + 1;

        goto label1;

     label2:
        return;
    }

    public void write(int)
    {
        StringLineSeparatorWriter this;
        int c;
        char $stack2;
        sortpom.util.StringLineSeparatorWriter $r0;

        this := @this: StringLineSeparatorWriter;

        c := @parameter0: int;

        $stack2 = (char) c;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r0.<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>($stack2);

        return;
    }

    public void close()
    {
        StringLineSeparatorWriter this;
        sortpom.util.StringLineSeparatorWriter $r0;

        this := @this: StringLineSeparatorWriter;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r0.<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>();

        return;
    }

    private void writeOneCharacter(char)
    {
        StringLineSeparatorWriter this;
        char ch;
        java.lang.StringBuilder $stack2;
        sortpom.util.StringLineSeparatorWriter $r0, $r1, $r2, $r3;

        this := @this: StringLineSeparatorWriter;

        ch := @parameter0: char;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r0.<sortpom.util.StringLineSeparatorWriter: void writeDelayedNewline()>();

        if ch != 10 goto label1;

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r1.<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>();

        $r2 = (sortpom.util.StringLineSeparatorWriter) this;

        $r2.<sortpom.util.StringLineSeparatorWriter: boolean wasNewLine> = 1;

        goto label2;

     label1:
        $r3 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack2 = $r3.<sortpom.util.StringLineSeparatorWriter: java.lang.StringBuilder lineBuffer>;

        virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(ch);

     label2:
        return;
    }

    private void writeDelayedNewline()
    {
        StringLineSeparatorWriter this;
        boolean $stack1;
        sortpom.util.StringLineSeparatorWriter $r0, $r1, $r2;

        this := @this: StringLineSeparatorWriter;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack1 = $r0.<sortpom.util.StringLineSeparatorWriter: boolean wasNewLine>;

        if $stack1 == 0 goto label1;

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r1.<sortpom.util.StringLineSeparatorWriter: void writeLineSeparator()>();

        $r2 = (sortpom.util.StringLineSeparatorWriter) this;

        $r2.<sortpom.util.StringLineSeparatorWriter: boolean wasNewLine> = 0;

     label1:
        return;
    }

    private void writeCharacterBuffer()
    {
        StringLineSeparatorWriter this;
        java.lang.StringBuilder $stack1;
        java.io.StringWriter $stack2;
        java.lang.String $stack3;
        sortpom.util.StringLineSeparatorWriter $r0, $r1, $r2;

        this := @this: StringLineSeparatorWriter;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack2 = $r0.<sortpom.util.StringLineSeparatorWriter: java.io.StringWriter out>;

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack1 = $r1.<sortpom.util.StringLineSeparatorWriter: java.lang.StringBuilder lineBuffer>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack2.<java.io.StringWriter: void write(java.lang.String)>($stack3);

        $r2 = (sortpom.util.StringLineSeparatorWriter) this;

        virtualinvoke $r2.<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>();

        return;
    }

    private void writeLineSeparator()
    {
        StringLineSeparatorWriter this;
        java.lang.String $stack1;
        java.io.StringWriter $stack2;
        sortpom.util.StringLineSeparatorWriter $r0, $r1;

        this := @this: StringLineSeparatorWriter;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack2 = $r0.<sortpom.util.StringLineSeparatorWriter: java.io.StringWriter out>;

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack1 = $r1.<sortpom.util.StringLineSeparatorWriter: java.lang.String lineSeparator>;

        virtualinvoke $stack2.<java.io.StringWriter: void write(java.lang.String)>($stack1);

        return;
    }

    public void clearLineBuffer()
    {
        StringLineSeparatorWriter this;
        java.lang.StringBuilder $stack1, $stack2;
        int $stack4;
        sortpom.util.StringLineSeparatorWriter $r0, $r1;

        this := @this: StringLineSeparatorWriter;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack2 = $r0.<sortpom.util.StringLineSeparatorWriter: java.lang.StringBuilder lineBuffer>;

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack1 = $r1.<sortpom.util.StringLineSeparatorWriter: java.lang.StringBuilder lineBuffer>;

        $stack4 = virtualinvoke $stack1.<java.lang.StringBuilder: int length()>();

        virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $stack4);

        return;
    }

    public java.lang.String toString()
    {
        StringLineSeparatorWriter this;
        java.io.StringWriter $stack1;
        java.lang.String $stack2;
        sortpom.util.StringLineSeparatorWriter $r0, $r1;

        this := @this: StringLineSeparatorWriter;

        $r0 = (sortpom.util.StringLineSeparatorWriter) this;

        specialinvoke $r0.<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>();

        $r1 = (sortpom.util.StringLineSeparatorWriter) this;

        $stack1 = $r1.<sortpom.util.StringLineSeparatorWriter: java.io.StringWriter out>;

        $stack2 = virtualinvoke $stack1.<java.io.StringWriter: java.lang.String toString()>();

        return $stack2;
    }

    public void flush()
    {
        StringLineSeparatorWriter this;

        this := @this: StringLineSeparatorWriter;

        return;
    }

    public static void <clinit>()
    {
        <StringLineSeparatorWriter: char NEWLINE> = 10;

        return;
    }
}
