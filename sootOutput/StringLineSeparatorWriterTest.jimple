class StringLineSeparatorWriterTest extends java.lang.Object
{
    private sortpom.util.StringLineSeparatorWriter writer;
    private java.io.StringWriter out;

    void <init>()
    {
        StringLineSeparatorWriterTest this;

        this := @this: StringLineSeparatorWriterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void setUp()
    {
        StringLineSeparatorWriterTest this;
        java.io.StringWriter $stack3, $u0;
        sortpom.util.StringLineSeparatorWriter $u1;
        sortpom.util.StringLineSeparatorWriterTest $r0, $r1, $r2;

        this := @this: StringLineSeparatorWriterTest;

        $u0 = new java.io.StringWriter;

        specialinvoke $u0.<java.io.StringWriter: void <init>()>();

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $r0.<sortpom.util.StringLineSeparatorWriterTest: java.io.StringWriter out> = $u0;

        $u1 = new sortpom.util.StringLineSeparatorWriter;

        $r1 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack3 = $r1.<sortpom.util.StringLineSeparatorWriterTest: java.io.StringWriter out>;

        specialinvoke $u1.<sortpom.util.StringLineSeparatorWriter: void <init>(java.io.StringWriter,java.lang.String)>($stack3, "separator");

        $r2 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $r2.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer> = $u1;

        return;
    }

    void writeNewlineShouldBeConvertedToSeparator1()
    {
        StringLineSeparatorWriterTest this;
        sortpom.util.StringLineSeparatorWriter $stack1, $stack2;
        java.io.StringWriter $stack3;
        java.lang.String $stack4;
        org.hamcrest.Matcher $stack5;
        sortpom.util.StringLineSeparatorWriterTest $r0, $r1, $r2;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack1 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack1.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("Hey\nYou!");

        $r1 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack2 = $r1.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack2.<sortpom.util.StringLineSeparatorWriter: void close()>();

        $r2 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack3 = $r2.<sortpom.util.StringLineSeparatorWriterTest: java.io.StringWriter out>;

        $stack4 = virtualinvoke $stack3.<java.io.StringWriter: java.lang.String toString()>();

        $stack5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("HeyseparatorYou!");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack4, $stack5);

        return;
    }

    void writeNewlineShouldBeConvertedToSeparator2()
    {
        StringLineSeparatorWriterTest this;
        sortpom.util.StringLineSeparatorWriter $stack1, $stack2, $stack3, $stack4, $stack5;
        java.io.StringWriter $stack6;
        java.lang.String $stack7;
        org.hamcrest.Matcher $stack8;
        sortpom.util.StringLineSeparatorWriterTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack1 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack1.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("Hello");

        $r1 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack2 = $r1.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack2.<sortpom.util.StringLineSeparatorWriter: void write(int)>(38);

        $r2 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack3 = $r2.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack3.<sortpom.util.StringLineSeparatorWriter: void write(int)>(10);

        $r3 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack4 = $r3.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack4.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("Goodbye");

        $r4 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack5 = $r4.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack5.<sortpom.util.StringLineSeparatorWriter: void close()>();

        $r5 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack6 = $r5.<sortpom.util.StringLineSeparatorWriterTest: java.io.StringWriter out>;

        $stack7 = virtualinvoke $stack6.<java.io.StringWriter: java.lang.String toString()>();

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("Hello&separatorGoodbye");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack8);

        return;
    }

    void clearExtraNewlinesShouldWork()
    {
        StringLineSeparatorWriterTest this;
        sortpom.util.StringLineSeparatorWriter $stack1, $stack2, $stack3, $stack4, $stack5;
        java.io.StringWriter $stack6;
        java.lang.String $stack7;
        org.hamcrest.Matcher $stack8;
        sortpom.util.StringLineSeparatorWriterTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack1 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack1.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("<xml>\n");

        $r1 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack2 = $r1.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack2.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("  ");

        $r2 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack3 = $r2.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack3.<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>();

        $r3 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack4 = $r3.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack4.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("<moreXml>");

        $r4 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack5 = $r4.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack5.<sortpom.util.StringLineSeparatorWriter: void close()>();

        $r5 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack6 = $r5.<sortpom.util.StringLineSeparatorWriterTest: java.io.StringWriter out>;

        $stack7 = virtualinvoke $stack6.<java.io.StringWriter: java.lang.String toString()>();

        $stack8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("<xml>separator<moreXml>");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack7, $stack8);

        return;
    }

    void toStringShouldFlushBuffer()
    {
        StringLineSeparatorWriterTest this;
        sortpom.util.StringLineSeparatorWriter $stack1, $stack2, $stack3, $stack4, $stack5;
        java.lang.String $stack6;
        org.hamcrest.Matcher $stack7;
        sortpom.util.StringLineSeparatorWriterTest $r0, $r1, $r2, $r3, $r4;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack1 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack1.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("Hello");

        $r1 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack2 = $r1.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack2.<sortpom.util.StringLineSeparatorWriter: void write(int)>(38);

        $r2 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack3 = $r2.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack3.<sortpom.util.StringLineSeparatorWriter: void write(int)>(10);

        $r3 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack4 = $r3.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack4.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>("Goodbye");

        $r4 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack5 = $r4.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        $stack6 = virtualinvoke $stack5.<sortpom.util.StringLineSeparatorWriter: java.lang.String toString()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("Hello&separatorGoodbye");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack7);

        return;
    }

    void testWriteDeprecated1()
    {
        StringLineSeparatorWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.StringLineSeparatorWriterTest $r0;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        testMethod = staticinvoke <StringLineSeparatorWriterTest$lambda_testWriteDeprecated1_0__309: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.StringLineSeparatorWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testWriteDeprecated2()
    {
        StringLineSeparatorWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.StringLineSeparatorWriterTest $r0;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        testMethod = staticinvoke <StringLineSeparatorWriterTest$lambda_testWriteDeprecated2_1__310: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.StringLineSeparatorWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    void testWriteDeprecated3()
    {
        StringLineSeparatorWriterTest this;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        sortpom.util.StringLineSeparatorWriterTest $r0;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        testMethod = staticinvoke <StringLineSeparatorWriterTest$lambda_testWriteDeprecated3_2__311: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.util.StringLineSeparatorWriterTest)>($r0);

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>();

        $stack7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    private void lambda$testWriteDeprecated3$2() throws java.lang.Throwable
    {
        StringLineSeparatorWriterTest this;
        char[] $stack1;
        sortpom.util.StringLineSeparatorWriter $stack2;
        sortpom.util.StringLineSeparatorWriterTest $r0;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack2 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        $stack1 = newarray (char)[0];

        virtualinvoke $stack2.<sortpom.util.StringLineSeparatorWriter: void write(char[],int,int)>($stack1, 0, 0);

        return;
    }

    private void lambda$testWriteDeprecated2$1() throws java.lang.Throwable
    {
        StringLineSeparatorWriterTest this;
        sortpom.util.StringLineSeparatorWriter $stack1;
        sortpom.util.StringLineSeparatorWriterTest $r0;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack1 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        virtualinvoke $stack1.<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String,int,int)>("", 0, 0);

        return;
    }

    private void lambda$testWriteDeprecated1$0() throws java.lang.Throwable
    {
        StringLineSeparatorWriterTest this;
        char[] $stack1;
        sortpom.util.StringLineSeparatorWriter $stack2;
        sortpom.util.StringLineSeparatorWriterTest $r0;

        this := @this: StringLineSeparatorWriterTest;

        $r0 = (sortpom.util.StringLineSeparatorWriterTest) this;

        $stack2 = $r0.<sortpom.util.StringLineSeparatorWriterTest: sortpom.util.StringLineSeparatorWriter writer>;

        $stack1 = newarray (char)[0];

        virtualinvoke $stack2.<sortpom.util.StringLineSeparatorWriter: void write(char[])>($stack1);

        return;
    }
}
