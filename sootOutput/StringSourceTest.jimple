public class StringSourceTest extends java.lang.Object
{

    public void <init>()
    {
        StringSourceTest this;

        this := @this: StringSourceTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetInputStream() throws java.lang.Exception
    {
        org.apache.maven.building.StringSource $stack6;
        java.io.InputStream is;
        java.util.Scanner $stack8;
        java.lang.String $stack10;
        java.lang.Throwable $stack11, $stack12, $stack14, $stack15;
        StringSourceTest this;

        this := @this: StringSourceTest;

        $stack6 = new org.apache.maven.building.StringSource;

        specialinvoke $stack6.<org.apache.maven.building.StringSource: void <init>(java.lang.CharSequence)>("Hello World!");

        is = virtualinvoke $stack6.<org.apache.maven.building.StringSource: java.io.InputStream getInputStream()>();

     label01:
        $stack8 = new java.util.Scanner;

        specialinvoke $stack8.<java.util.Scanner: void <init>(java.io.InputStream)>(is);

     label02:
        $stack10 = virtualinvoke $stack8.<java.util.Scanner: java.lang.String nextLine()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("Hello World!", $stack10);

     label03:
        virtualinvoke $stack8.<java.util.Scanner: void close()>();

        goto label09;

     label04:
        $stack15 := @caughtexception;

     label05:
        virtualinvoke $stack8.<java.util.Scanner: void close()>();

     label06:
        goto label08;

     label07:
        $stack14 := @caughtexception;

        virtualinvoke $stack15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack14);

     label08:
        throw $stack15;

     label09:
        if is == null goto label15;

        virtualinvoke is.<java.io.InputStream: void close()>();

        goto label15;

     label10:
        $stack12 := @caughtexception;

        if is == null goto label14;

     label11:
        virtualinvoke is.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $stack11 := @caughtexception;

        virtualinvoke $stack12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack11);

     label14:
        throw $stack12;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void testGetLocation()
    {
        org.apache.maven.building.StringSource $stack2, $stack5;
        java.lang.String $stack4, $stack7;
        StringSourceTest this;

        this := @this: StringSourceTest;

        $stack2 = new org.apache.maven.building.StringSource;

        specialinvoke $stack2.<org.apache.maven.building.StringSource: void <init>(java.lang.CharSequence)>("Hello World!");

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.StringSource: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("(memory)", $stack4);

        $stack5 = new org.apache.maven.building.StringSource;

        specialinvoke $stack5.<org.apache.maven.building.StringSource: void <init>(java.lang.CharSequence,java.lang.String)>("Hello World!", "LOCATION");

        $stack7 = virtualinvoke $stack5.<org.apache.maven.building.StringSource: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("LOCATION", $stack7);

        return;
    }

    public void testGetContent()
    {
        org.apache.maven.building.StringSource $stack2, $stack5;
        java.lang.String $stack4, $stack7;
        StringSourceTest this;

        this := @this: StringSourceTest;

        $stack2 = new org.apache.maven.building.StringSource;

        specialinvoke $stack2.<org.apache.maven.building.StringSource: void <init>(java.lang.CharSequence)>(null);

        $stack4 = virtualinvoke $stack2.<org.apache.maven.building.StringSource: java.lang.String getContent()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack5 = new org.apache.maven.building.StringSource;

        specialinvoke $stack5.<org.apache.maven.building.StringSource: void <init>(java.lang.CharSequence,java.lang.String)>("Hello World!", "LOCATION");

        $stack7 = virtualinvoke $stack5.<org.apache.maven.building.StringSource: java.lang.String getContent()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("Hello World!", $stack7);

        return;
    }
}
