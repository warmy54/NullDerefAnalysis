public class Ternary extends org.ooc.frontend.model.Expression
{
    private org.ooc.frontend.model.Expression condition;
    private org.ooc.frontend.model.Expression valueIfTrue;
    private org.ooc.frontend.model.Expression valueIfFalse;

    public void <init>(org.ooc.frontend.model.tokens.Token, org.ooc.frontend.model.Expression, org.ooc.frontend.model.Expression, org.ooc.frontend.model.Expression)
    {
        Ternary this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression condition, valueIfTrue, valueIfFalse;
        org.ooc.frontend.model.Ternary $r0, $r1, $r2;

        this := @this: Ternary;

        startToken := @parameter0: org.ooc.frontend.model.tokens.Token;

        condition := @parameter1: org.ooc.frontend.model.Expression;

        valueIfTrue := @parameter2: org.ooc.frontend.model.Expression;

        valueIfFalse := @parameter3: org.ooc.frontend.model.Expression;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression condition> = condition;

        $r1 = (org.ooc.frontend.model.Ternary) this;

        $r1.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue> = valueIfTrue;

        $r2 = (org.ooc.frontend.model.Ternary) this;

        $r2.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfFalse> = valueIfFalse;

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        Ternary this;
        org.ooc.frontend.model.Expression $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        org.ooc.frontend.model.Ternary $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: Ternary;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack3 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression condition>;

        if oldie != $stack3 goto label1;

        $stack8 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.Ternary) this;

        $r1.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression condition> = $stack8;

        return 1;

     label1:
        $r2 = (org.ooc.frontend.model.Ternary) this;

        $stack4 = $r2.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue>;

        if oldie != $stack4 goto label2;

        $stack7 = (org.ooc.frontend.model.Expression) kiddo;

        $r3 = (org.ooc.frontend.model.Ternary) this;

        $r3.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue> = $stack7;

        return 1;

     label2:
        $r4 = (org.ooc.frontend.model.Ternary) this;

        $stack5 = $r4.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfFalse>;

        if oldie != $stack5 goto label3;

        $stack6 = (org.ooc.frontend.model.Expression) kiddo;

        $r5 = (org.ooc.frontend.model.Ternary) this;

        $r5.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfFalse> = $stack6;

        return 1;

     label3:
        return 0;
    }

    public org.ooc.frontend.model.Type getType()
    {
        Ternary this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Type $stack2;
        org.ooc.frontend.model.Ternary $r0;

        this := @this: Ternary;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack1 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        return $stack2;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        Ternary this;
        org.ooc.frontend.model.Ternary $r0;

        this := @this: Ternary;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.Ternary)>($r0);

        return;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        Ternary this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2, $stack3, $stack4;
        org.ooc.frontend.model.Ternary $r0, $r1, $r2;

        this := @this: Ternary;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack2 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression condition>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r1 = (org.ooc.frontend.model.Ternary) this;

        $stack3 = $r1.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue>;

        virtualinvoke $stack3.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        $r2 = (org.ooc.frontend.model.Ternary) this;

        $stack4 = $r2.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfFalse>;

        virtualinvoke $stack4.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        Ternary this;

        this := @this: Ternary;

        return 1;
    }

    public org.ooc.frontend.model.Expression getCondition()
    {
        Ternary this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Ternary $r0;

        this := @this: Ternary;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack1 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression condition>;

        return $stack1;
    }

    public org.ooc.frontend.model.Expression getValueIfTrue()
    {
        Ternary this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Ternary $r0;

        this := @this: Ternary;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack1 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue>;

        return $stack1;
    }

    public org.ooc.frontend.model.Expression getValueIfFalse()
    {
        Ternary this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Ternary $r0;

        this := @this: Ternary;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack1 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfFalse>;

        return $stack1;
    }

    public java.lang.String toString()
    {
        Ternary this;
        org.ooc.frontend.model.Expression $stack1, $stack2, $stack3;
        java.lang.String $stack4;
        org.ooc.frontend.model.Ternary $r0, $r1, $r2;

        this := @this: Ternary;

        $r0 = (org.ooc.frontend.model.Ternary) this;

        $stack3 = $r0.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression condition>;

        $r1 = (org.ooc.frontend.model.Ternary) this;

        $stack2 = $r1.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfTrue>;

        $r2 = (org.ooc.frontend.model.Ternary) this;

        $stack1 = $r2.<org.ooc.frontend.model.Ternary: org.ooc.frontend.model.Expression valueIfFalse>;

        $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression,org.ooc.frontend.model.Expression)>($stack3, $stack2, $stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 ? \u0001 : \u0001");

        return $stack4;
    }
}
