class TestHandler$1 extends java.lang.Object implements sortpom.logger.SortPomLogger
{
    final sortpom.util.TestHandler this$0;

    void <init>(sortpom.util.TestHandler)
    {
        TestHandler$1 this;
        sortpom.util.TestHandler this$0;
        sortpom.util.TestHandler$1 $r0;

        this := @this: TestHandler$1;

        this$0 := @parameter0: sortpom.util.TestHandler;

        $r0 = (sortpom.util.TestHandler$1) this;

        $r0.<sortpom.util.TestHandler$1: sortpom.util.TestHandler this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void info(java.lang.String)
    {
        TestHandler$1 this;
        sortpom.util.TestHandler $stack2;
        java.util.List $stack3;
        java.lang.StringBuilder $stack5, $stack6, $u0;
        java.lang.String content, $stack7;
        sortpom.util.TestHandler$1 $r0;

        this := @this: TestHandler$1;

        content := @parameter0: java.lang.String;

        $r0 = (sortpom.util.TestHandler$1) this;

        $stack2 = $r0.<sortpom.util.TestHandler$1: sortpom.util.TestHandler this$0>;

        $stack3 = staticinvoke <sortpom.util.TestHandler: java.util.List access$000(sortpom.util.TestHandler)>($stack2);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INFO] ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(content);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>($stack7);

        return;
    }

    public void warn(java.lang.String)
    {
        TestHandler$1 this;
        sortpom.util.TestHandler $stack2;
        java.util.List $stack3;
        java.lang.StringBuilder $stack5, $stack6, $u0;
        java.lang.String content, $stack7;
        sortpom.util.TestHandler$1 $r0;

        this := @this: TestHandler$1;

        content := @parameter0: java.lang.String;

        $r0 = (sortpom.util.TestHandler$1) this;

        $stack2 = $r0.<sortpom.util.TestHandler$1: sortpom.util.TestHandler this$0>;

        $stack3 = staticinvoke <sortpom.util.TestHandler: java.util.List access$000(sortpom.util.TestHandler)>($stack2);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[WARNING] ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(content);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>($stack7);

        return;
    }

    public void error(java.lang.String)
    {
        TestHandler$1 this;
        sortpom.util.TestHandler $stack2;
        java.util.List $stack3;
        java.lang.StringBuilder $stack5, $stack6, $u0;
        java.lang.String content, $stack7;
        sortpom.util.TestHandler$1 $r0;

        this := @this: TestHandler$1;

        content := @parameter0: java.lang.String;

        $r0 = (sortpom.util.TestHandler$1) this;

        $stack2 = $r0.<sortpom.util.TestHandler$1: sortpom.util.TestHandler this$0>;

        $stack3 = staticinvoke <sortpom.util.TestHandler: java.util.List access$000(sortpom.util.TestHandler)>($stack2);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ERROR] ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(content);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>($stack7);

        return;
    }
}
