class TestHandler extends java.lang.Object
{
    private final sortpom.SortPomImpl sortPomImpl;
    private final java.util.List infoLogger;
    private final java.lang.String inputResourceFileName;
    private final java.lang.String expectedResourceFileName;
    private final java.io.File testpom;
    private final sortpom.parameter.PluginParameters pluginParameters;
    private java.io.FileInputStream backupFileInputStream;
    private java.io.FileInputStream originalPomInputStream;
    private java.io.FileInputStream actualSortedPomInputStream;
    private java.io.FileInputStream expectedSortedPomInputStream;
    private final java.io.File backupFile;

    void <init>(java.lang.String, sortpom.parameter.PluginParameters)
    {
        TestHandler this;
        java.lang.String inputResourceFileName;
        sortpom.parameter.PluginParameters pluginParameters;
        sortpom.util.TestHandler $r0;

        this := @this: TestHandler;

        inputResourceFileName := @parameter0: java.lang.String;

        pluginParameters := @parameter1: sortpom.parameter.PluginParameters;

        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void <init>(java.lang.String,java.lang.String,sortpom.parameter.PluginParameters)>(inputResourceFileName, null, pluginParameters);

        return;
    }

    void <init>(java.lang.String, java.lang.String, sortpom.parameter.PluginParameters)
    {
        TestHandler this;
        java.lang.String inputResourceFileName, expectedResourceFileName, $stack10, $stack12, $stack14;
        sortpom.parameter.PluginParameters pluginParameters;
        java.io.File $stack6, $stack9, $u3;
        java.lang.StringBuilder $stack11, $stack13, $u2;
        sortpom.SortPomImpl $u0;
        java.util.ArrayList $u1;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: TestHandler;

        inputResourceFileName := @parameter0: java.lang.String;

        expectedResourceFileName := @parameter1: java.lang.String;

        pluginParameters := @parameter2: sortpom.parameter.PluginParameters;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new sortpom.SortPomImpl;

        specialinvoke $u0.<sortpom.SortPomImpl: void <init>()>();

        $r0 = (sortpom.util.TestHandler) this;

        $r0.<sortpom.util.TestHandler: sortpom.SortPomImpl sortPomImpl> = $u0;

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        $r1 = (sortpom.util.TestHandler) this;

        $r1.<sortpom.util.TestHandler: java.util.List infoLogger> = $u1;

        $r2 = (sortpom.util.TestHandler) this;

        $r2.<sortpom.util.TestHandler: java.io.FileInputStream backupFileInputStream> = null;

        $r3 = (sortpom.util.TestHandler) this;

        $r3.<sortpom.util.TestHandler: java.io.FileInputStream originalPomInputStream> = null;

        $r4 = (sortpom.util.TestHandler) this;

        $r4.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream> = null;

        $r5 = (sortpom.util.TestHandler) this;

        $r5.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream> = null;

        $r6 = (sortpom.util.TestHandler) this;

        $r6.<sortpom.util.TestHandler: java.lang.String inputResourceFileName> = inputResourceFileName;

        $r7 = (sortpom.util.TestHandler) this;

        $r7.<sortpom.util.TestHandler: java.lang.String expectedResourceFileName> = expectedResourceFileName;

        $r8 = (sortpom.util.TestHandler) this;

        $r8.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters> = pluginParameters;

        $stack6 = pluginParameters.<sortpom.parameter.PluginParameters: java.io.File pomFile>;

        $r9 = (sortpom.util.TestHandler) this;

        $r9.<sortpom.util.TestHandler: java.io.File testpom> = $stack6;

        $u3 = new java.io.File;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $r10 = (sortpom.util.TestHandler) this;

        $stack9 = $r10.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack10 = virtualinvoke $stack9.<java.io.File: java.lang.String getAbsolutePath()>();

        $stack11 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = pluginParameters.<sortpom.parameter.PluginParameters: java.lang.String backupFileExtension>;

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<java.io.File: void <init>(java.lang.String)>($stack14);

        $r11 = (sortpom.util.TestHandler) this;

        $r11.<sortpom.util.TestHandler: java.io.File backupFile> = $u3;

        return;
    }

    java.util.List getInfoLogger()
    {
        TestHandler this;
        java.util.List $stack1;
        sortpom.util.TestHandler $r0;

        this := @this: TestHandler;

        $r0 = (sortpom.util.TestHandler) this;

        $stack1 = $r0.<sortpom.util.TestHandler: java.util.List infoLogger>;

        return $stack1;
    }

    void performSortThatSorted() throws java.lang.Exception
    {
        TestHandler this;
        java.lang.StringBuilder $stack8, $stack10, $stack25, $stack27, $stack41, $stack43, $u0, $u3, $u6;
        java.lang.String $stack9, $stack11, $stack20, actualBackup, $stack26, $stack28, $stack30, expectedBackup, $stack36, actualSorted, $stack42, $stack44, $stack46, expectedSorted;
        java.io.File $stack12, $stack13, $stack15, $stack18, $stack34, $u1;
        boolean $stack14, $stack16;
        sortpom.parameter.PluginParameters $stack19, $stack29, $stack35, $stack45;
        java.io.FileInputStream $stack21, $stack31, $stack37, $stack47, $u2, $u4, $u5, $u7;
        java.lang.Throwable $stack49;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        this := @this: TestHandler;

     label1:
        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void removeOldTemporaryFiles()>();

        $u1 = new java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r1 = (sortpom.util.TestHandler) this;

        $stack9 = $r1.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack11);

        $r2 = (sortpom.util.TestHandler) this;

        $stack12 = $r2.<sortpom.util.TestHandler: java.io.File testpom>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($u1, $stack12);

        $r3 = (sortpom.util.TestHandler) this;

        specialinvoke $r3.<sortpom.util.TestHandler: void performSorting()>();

        $r4 = (sortpom.util.TestHandler) this;

        $stack13 = $r4.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack14 = virtualinvoke $stack13.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        $r5 = (sortpom.util.TestHandler) this;

        $stack15 = $r5.<sortpom.util.TestHandler: java.io.File backupFile>;

        $stack16 = virtualinvoke $stack15.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack16);

        $u2 = new java.io.FileInputStream;

        $r6 = (sortpom.util.TestHandler) this;

        $stack18 = $r6.<sortpom.util.TestHandler: java.io.File backupFile>;

        specialinvoke $u2.<java.io.FileInputStream: void <init>(java.io.File)>($stack18);

        $r7 = (sortpom.util.TestHandler) this;

        $r7.<sortpom.util.TestHandler: java.io.FileInputStream backupFileInputStream> = $u2;

        $r8 = (sortpom.util.TestHandler) this;

        $stack21 = $r8.<sortpom.util.TestHandler: java.io.FileInputStream backupFileInputStream>;

        $r9 = (sortpom.util.TestHandler) this;

        $stack19 = $r9.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack20 = $stack19.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        actualBackup = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack21, $stack20);

        $u4 = new java.io.FileInputStream;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r10 = (sortpom.util.TestHandler) this;

        $stack26 = $r10.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack27 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.io.FileInputStream: void <init>(java.lang.String)>($stack28);

        $r11 = (sortpom.util.TestHandler) this;

        $r11.<sortpom.util.TestHandler: java.io.FileInputStream originalPomInputStream> = $u4;

        $r12 = (sortpom.util.TestHandler) this;

        $stack31 = $r12.<sortpom.util.TestHandler: java.io.FileInputStream originalPomInputStream>;

        $r13 = (sortpom.util.TestHandler) this;

        $stack29 = $r13.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack30 = $stack29.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        expectedBackup = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack31, $stack30);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedBackup, actualBackup);

        $u5 = new java.io.FileInputStream;

        $r14 = (sortpom.util.TestHandler) this;

        $stack34 = $r14.<sortpom.util.TestHandler: java.io.File testpom>;

        specialinvoke $u5.<java.io.FileInputStream: void <init>(java.io.File)>($stack34);

        $r15 = (sortpom.util.TestHandler) this;

        $r15.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream> = $u5;

        $r16 = (sortpom.util.TestHandler) this;

        $stack37 = $r16.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream>;

        $r17 = (sortpom.util.TestHandler) this;

        $stack35 = $r17.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack36 = $stack35.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        actualSorted = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack37, $stack36);

        $u7 = new java.io.FileInputStream;

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack41 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r18 = (sortpom.util.TestHandler) this;

        $stack42 = $r18.<sortpom.util.TestHandler: java.lang.String expectedResourceFileName>;

        $stack43 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u7.<java.io.FileInputStream: void <init>(java.lang.String)>($stack44);

        $r19 = (sortpom.util.TestHandler) this;

        $r19.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream> = $u7;

        $r20 = (sortpom.util.TestHandler) this;

        $stack47 = $r20.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream>;

        $r21 = (sortpom.util.TestHandler) this;

        $stack45 = $r21.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack46 = $stack45.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        expectedSorted = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack47, $stack46);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedSorted, actualSorted);

     label2:
        $r22 = (sortpom.util.TestHandler) this;

        specialinvoke $r22.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        goto label5;

     label3:
        $stack49 := @caughtexception;

     label4:
        $r23 = (sortpom.util.TestHandler) this;

        specialinvoke $r23.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        throw $stack49;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void performVerifyThatSorted() throws java.lang.Exception
    {
        TestHandler this;
        java.lang.StringBuilder $stack6, $stack8, $stack23, $stack25, $stack41, $stack43, $u0, $u3, $u6;
        java.lang.String $stack7, $stack9, $stack18, $stack24, $stack26, $stack28, $stack36, $stack42, $stack44, $stack46, actualBackup, expectedBackup;
        java.io.File $stack10, $stack11, $stack16, $stack31, $stack34, $u1;
        boolean $stack12, $stack14, $stack32;
        sortpom.parameter.PluginParameters $stack13, $stack17, $stack27, $stack35, $stack45;
        java.io.FileInputStream $stack19, $stack29, $stack37, $stack47, $u2, $u4, $u5, $u7;
        java.lang.Throwable $stack61;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        this := @this: TestHandler;

     label1:
        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void removeOldTemporaryFiles()>();

        $u1 = new java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r1 = (sortpom.util.TestHandler) this;

        $stack7 = $r1.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack9);

        $r2 = (sortpom.util.TestHandler) this;

        $stack10 = $r2.<sortpom.util.TestHandler: java.io.File testpom>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($u1, $stack10);

        $r3 = (sortpom.util.TestHandler) this;

        specialinvoke $r3.<sortpom.util.TestHandler: void performVerifyWithSort()>();

        $r4 = (sortpom.util.TestHandler) this;

        $stack11 = $r4.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack12 = virtualinvoke $stack11.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack12);

        $r5 = (sortpom.util.TestHandler) this;

        $stack13 = $r5.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack14 = $stack13.<sortpom.parameter.PluginParameters: boolean createBackupFile>;

        if $stack14 == 0 goto label2;

        $r6 = (sortpom.util.TestHandler) this;

        $stack31 = $r6.<sortpom.util.TestHandler: java.io.File backupFile>;

        $stack32 = virtualinvoke $stack31.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack32);

        $u2 = new java.io.FileInputStream;

        $r7 = (sortpom.util.TestHandler) this;

        $stack34 = $r7.<sortpom.util.TestHandler: java.io.File backupFile>;

        specialinvoke $u2.<java.io.FileInputStream: void <init>(java.io.File)>($stack34);

        $r8 = (sortpom.util.TestHandler) this;

        $r8.<sortpom.util.TestHandler: java.io.FileInputStream backupFileInputStream> = $u2;

        $r9 = (sortpom.util.TestHandler) this;

        $stack37 = $r9.<sortpom.util.TestHandler: java.io.FileInputStream backupFileInputStream>;

        $r10 = (sortpom.util.TestHandler) this;

        $stack35 = $r10.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack36 = $stack35.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        actualBackup = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack37, $stack36);

        $u4 = new java.io.FileInputStream;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack41 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r11 = (sortpom.util.TestHandler) this;

        $stack42 = $r11.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack43 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.io.FileInputStream: void <init>(java.lang.String)>($stack44);

        $r12 = (sortpom.util.TestHandler) this;

        $r12.<sortpom.util.TestHandler: java.io.FileInputStream originalPomInputStream> = $u4;

        $r13 = (sortpom.util.TestHandler) this;

        $stack47 = $r13.<sortpom.util.TestHandler: java.io.FileInputStream originalPomInputStream>;

        $r14 = (sortpom.util.TestHandler) this;

        $stack45 = $r14.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack46 = $stack45.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        expectedBackup = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack47, $stack46);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedBackup, actualBackup);

     label2:
        $u5 = new java.io.FileInputStream;

        $r15 = (sortpom.util.TestHandler) this;

        $stack16 = $r15.<sortpom.util.TestHandler: java.io.File testpom>;

        specialinvoke $u5.<java.io.FileInputStream: void <init>(java.io.File)>($stack16);

        $r16 = (sortpom.util.TestHandler) this;

        $r16.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream> = $u5;

        $r17 = (sortpom.util.TestHandler) this;

        $stack19 = $r17.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream>;

        $r18 = (sortpom.util.TestHandler) this;

        $stack17 = $r18.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack18 = $stack17.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        actualBackup = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack19, $stack18);

        $u7 = new java.io.FileInputStream;

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r19 = (sortpom.util.TestHandler) this;

        $stack24 = $r19.<sortpom.util.TestHandler: java.lang.String expectedResourceFileName>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u7.<java.io.FileInputStream: void <init>(java.lang.String)>($stack26);

        $r20 = (sortpom.util.TestHandler) this;

        $r20.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream> = $u7;

        $r21 = (sortpom.util.TestHandler) this;

        $stack29 = $r21.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream>;

        $r22 = (sortpom.util.TestHandler) this;

        $stack27 = $r22.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack28 = $stack27.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        expectedBackup = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack29, $stack28);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedBackup, actualBackup);

     label3:
        $r23 = (sortpom.util.TestHandler) this;

        specialinvoke $r23.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        goto label5;

     label4:
        $stack61 := @caughtexception;

        $r24 = (sortpom.util.TestHandler) this;

        specialinvoke $r24.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        throw $stack61;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    void performSortThatDidNotSort() throws java.lang.Exception
    {
        TestHandler this;
        java.lang.StringBuilder $stack6, $stack8, $stack23, $stack25, $u0, $u3;
        java.lang.String $stack7, $stack9, $stack18, actualSorted, $stack24, $stack26, $stack28, expectedSorted;
        java.io.File $stack10, $stack11, $stack13, $stack16, $u1;
        boolean $stack12, $stack14;
        sortpom.parameter.PluginParameters $stack17, $stack27;
        java.io.FileInputStream $stack19, $stack29, $u2, $u4;
        java.lang.Throwable $stack31;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: TestHandler;

     label1:
        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void removeOldTemporaryFiles()>();

        $u1 = new java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r1 = (sortpom.util.TestHandler) this;

        $stack7 = $r1.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack9);

        $r2 = (sortpom.util.TestHandler) this;

        $stack10 = $r2.<sortpom.util.TestHandler: java.io.File testpom>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($u1, $stack10);

        $r3 = (sortpom.util.TestHandler) this;

        specialinvoke $r3.<sortpom.util.TestHandler: void performSorting()>();

        $r4 = (sortpom.util.TestHandler) this;

        $stack11 = $r4.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack12 = virtualinvoke $stack11.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack12);

        $r5 = (sortpom.util.TestHandler) this;

        $stack13 = $r5.<sortpom.util.TestHandler: java.io.File backupFile>;

        $stack14 = virtualinvoke $stack13.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack14, "No sort expected, backup file exists");

        $u2 = new java.io.FileInputStream;

        $r6 = (sortpom.util.TestHandler) this;

        $stack16 = $r6.<sortpom.util.TestHandler: java.io.File testpom>;

        specialinvoke $u2.<java.io.FileInputStream: void <init>(java.io.File)>($stack16);

        $r7 = (sortpom.util.TestHandler) this;

        $r7.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream> = $u2;

        $r8 = (sortpom.util.TestHandler) this;

        $stack19 = $r8.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream>;

        $r9 = (sortpom.util.TestHandler) this;

        $stack17 = $r9.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack18 = $stack17.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        actualSorted = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack19, $stack18);

        $u4 = new java.io.FileInputStream;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r10 = (sortpom.util.TestHandler) this;

        $stack24 = $r10.<sortpom.util.TestHandler: java.lang.String expectedResourceFileName>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.io.FileInputStream: void <init>(java.lang.String)>($stack26);

        $r11 = (sortpom.util.TestHandler) this;

        $r11.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream> = $u4;

        $r12 = (sortpom.util.TestHandler) this;

        $stack29 = $r12.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream>;

        $r13 = (sortpom.util.TestHandler) this;

        $stack27 = $r13.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack28 = $stack27.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        expectedSorted = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack29, $stack28);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedSorted, actualSorted);

     label2:
        $r14 = (sortpom.util.TestHandler) this;

        specialinvoke $r14.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        goto label4;

     label3:
        $stack31 := @caughtexception;

        $r15 = (sortpom.util.TestHandler) this;

        specialinvoke $r15.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        throw $stack31;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void performSorting()
    {
        TestHandler this;
        sortpom.SortPomImpl $stack1, $stack4;
        sortpom.logger.SortPomLogger $stack2;
        sortpom.parameter.PluginParameters $stack3;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3;

        this := @this: TestHandler;

        $r0 = (sortpom.util.TestHandler) this;

        $stack1 = $r0.<sortpom.util.TestHandler: sortpom.SortPomImpl sortPomImpl>;

        $r1 = (sortpom.util.TestHandler) this;

        $stack2 = specialinvoke $r1.<sortpom.util.TestHandler: sortpom.logger.SortPomLogger createDummyLog()>();

        $r2 = (sortpom.util.TestHandler) this;

        $stack3 = $r2.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        virtualinvoke $stack1.<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>($stack2, $stack3);

        $r3 = (sortpom.util.TestHandler) this;

        $stack4 = $r3.<sortpom.util.TestHandler: sortpom.SortPomImpl sortPomImpl>;

        virtualinvoke $stack4.<sortpom.SortPomImpl: void sortPom()>();

        return;
    }

    sortpom.util.XmlOrderedResult performVerify() throws java.lang.Exception
    {
        TestHandler this;
        java.lang.StringBuilder $stack6, $stack8, $u0;
        java.lang.String $stack7, $stack9;
        java.io.File $stack10, $stack12, $u1;
        sortpom.util.XmlOrderedResult verifyOk;
        boolean $stack13;
        java.lang.Throwable $stack14;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: TestHandler;

     label1:
        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void removeOldTemporaryFiles()>();

        $u1 = new java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r1 = (sortpom.util.TestHandler) this;

        $stack7 = $r1.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack9);

        $r2 = (sortpom.util.TestHandler) this;

        $stack10 = $r2.<sortpom.util.TestHandler: java.io.File testpom>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($u1, $stack10);

        $r3 = (sortpom.util.TestHandler) this;

        verifyOk = specialinvoke $r3.<sortpom.util.TestHandler: sortpom.util.XmlOrderedResult isVerifyOk()>();

        $r4 = (sortpom.util.TestHandler) this;

        $stack12 = $r4.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack13 = virtualinvoke $stack12.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack13);

     label2:
        $r5 = (sortpom.util.TestHandler) this;

        specialinvoke $r5.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        return verifyOk;

     label3:
        $stack14 := @caughtexception;

        $r6 = (sortpom.util.TestHandler) this;

        specialinvoke $r6.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        throw $stack14;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void performVerifyThatDidNotSort() throws java.lang.Exception
    {
        TestHandler this;
        java.lang.StringBuilder $stack6, $stack8, $stack23, $stack25, $u0, $u3;
        java.lang.String $stack7, $stack9, $stack18, actualSorted, $stack24, $stack26, $stack28, expectedSorted;
        java.io.File $stack10, $stack11, $stack13, $stack16, $u1;
        boolean $stack12, $stack14;
        sortpom.parameter.PluginParameters $stack17, $stack27;
        java.io.FileInputStream $stack19, $stack29, $u2, $u4;
        java.lang.Throwable $stack31;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: TestHandler;

     label1:
        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void removeOldTemporaryFiles()>();

        $u1 = new java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r1 = (sortpom.util.TestHandler) this;

        $stack7 = $r1.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack9);

        $r2 = (sortpom.util.TestHandler) this;

        $stack10 = $r2.<sortpom.util.TestHandler: java.io.File testpom>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($u1, $stack10);

        $r3 = (sortpom.util.TestHandler) this;

        specialinvoke $r3.<sortpom.util.TestHandler: void performVerifyWithSort()>();

        $r4 = (sortpom.util.TestHandler) this;

        $stack11 = $r4.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack12 = virtualinvoke $stack11.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack12);

        $r5 = (sortpom.util.TestHandler) this;

        $stack13 = $r5.<sortpom.util.TestHandler: java.io.File backupFile>;

        $stack14 = virtualinvoke $stack13.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack14);

        $u2 = new java.io.FileInputStream;

        $r6 = (sortpom.util.TestHandler) this;

        $stack16 = $r6.<sortpom.util.TestHandler: java.io.File testpom>;

        specialinvoke $u2.<java.io.FileInputStream: void <init>(java.io.File)>($stack16);

        $r7 = (sortpom.util.TestHandler) this;

        $r7.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream> = $u2;

        $r8 = (sortpom.util.TestHandler) this;

        $stack19 = $r8.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream>;

        $r9 = (sortpom.util.TestHandler) this;

        $stack17 = $r9.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack18 = $stack17.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        actualSorted = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack19, $stack18);

        $u4 = new java.io.FileInputStream;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r10 = (sortpom.util.TestHandler) this;

        $stack24 = $r10.<sortpom.util.TestHandler: java.lang.String expectedResourceFileName>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u4.<java.io.FileInputStream: void <init>(java.lang.String)>($stack26);

        $r11 = (sortpom.util.TestHandler) this;

        $r11.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream> = $u4;

        $r12 = (sortpom.util.TestHandler) this;

        $stack29 = $r12.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream>;

        $r13 = (sortpom.util.TestHandler) this;

        $stack27 = $r13.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack28 = $stack27.<sortpom.parameter.PluginParameters: java.lang.String encoding>;

        expectedSorted = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($stack29, $stack28);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expectedSorted, actualSorted);

     label2:
        $r14 = (sortpom.util.TestHandler) this;

        specialinvoke $r14.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        goto label4;

     label3:
        $stack31 := @caughtexception;

        $r15 = (sortpom.util.TestHandler) this;

        specialinvoke $r15.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        throw $stack31;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void performSortThatTestsTimestamps() throws java.lang.Exception
    {
        TestHandler this;
        java.lang.StringBuilder $stack6, $stack8, $u0;
        java.lang.String $stack7, $stack9;
        java.io.File $stack10, $stack11, $stack15, $stack20, $u1;
        long pomTimestamp, $stack16, $stack21;
        sortpom.parameter.PluginParameters $stack13;
        boolean $stack14;
        java.lang.Long $stack17, $stack18, $stack22, $stack23;
        org.hamcrest.Matcher $stack19, $stack24;
        java.lang.Throwable $stack26;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: TestHandler;

     label1:
        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $r0.<sortpom.util.TestHandler: void removeOldTemporaryFiles()>();

        $u1 = new java.io.File;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/");

        $r1 = (sortpom.util.TestHandler) this;

        $stack7 = $r1.<sortpom.util.TestHandler: java.lang.String inputResourceFileName>;

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String)>($stack9);

        $r2 = (sortpom.util.TestHandler) this;

        $stack10 = $r2.<sortpom.util.TestHandler: java.io.File testpom>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($u1, $stack10);

        $r3 = (sortpom.util.TestHandler) this;

        $stack11 = $r3.<sortpom.util.TestHandler: java.io.File testpom>;

        pomTimestamp = virtualinvoke $stack11.<java.io.File: long lastModified()>();

        $r4 = (sortpom.util.TestHandler) this;

        specialinvoke $r4.<sortpom.util.TestHandler: void performSorting()>();

        $r5 = (sortpom.util.TestHandler) this;

        $stack13 = $r5.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        $stack14 = $stack13.<sortpom.parameter.PluginParameters: boolean keepTimestamp>;

        if $stack14 == 0 goto label2;

        $r6 = (sortpom.util.TestHandler) this;

        $stack20 = $r6.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack21 = virtualinvoke $stack20.<java.io.File: long lastModified()>();

        $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack21);

        $stack23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(pomTimestamp);

        $stack24 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($stack23);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack22, $stack24);

        goto label3;

     label2:
        $r7 = (sortpom.util.TestHandler) this;

        $stack15 = $r7.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack16 = virtualinvoke $stack15.<java.io.File: long lastModified()>();

        $stack17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack16);

        $stack18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(pomTimestamp);

        $stack19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher greaterThan(java.lang.Comparable)>($stack18);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack17, $stack19);

     label3:
        $r8 = (sortpom.util.TestHandler) this;

        specialinvoke $r8.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        goto label5;

     label4:
        $stack26 := @caughtexception;

        $r9 = (sortpom.util.TestHandler) this;

        specialinvoke $r9.<sortpom.util.TestHandler: void cleanupAfterTest()>();

        throw $stack26;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void performVerifyWithSort()
    {
        TestHandler this;
        sortpom.logger.SortPomLogger $stack3;
        sortpom.parameter.PluginParameters $stack4;
        sortpom.SortPomImpl $u0;
        sortpom.util.TestHandler $r0, $r1;

        this := @this: TestHandler;

        $u0 = new sortpom.SortPomImpl;

        specialinvoke $u0.<sortpom.SortPomImpl: void <init>()>();

        $r0 = (sortpom.util.TestHandler) this;

        $stack3 = specialinvoke $r0.<sortpom.util.TestHandler: sortpom.logger.SortPomLogger createDummyLog()>();

        $r1 = (sortpom.util.TestHandler) this;

        $stack4 = $r1.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        virtualinvoke $u0.<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>($stack3, $stack4);

        virtualinvoke $u0.<sortpom.SortPomImpl: void verifyPom()>();

        return;
    }

    private sortpom.util.XmlOrderedResult isVerifyOk() throws java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        TestHandler this;
        sortpom.SortPomImpl $stack2, $stack9;
        sortpom.logger.SortPomLogger $stack3;
        sortpom.parameter.PluginParameters $stack4;
        java.lang.Class[] $stack5;
        java.lang.Class $stack6;
        java.lang.reflect.Method getVerificationResult;
        java.lang.Object[] $stack8;
        java.lang.Object $stack10;
        sortpom.util.XmlOrderedResult $stack11;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3;

        this := @this: TestHandler;

        $r0 = (sortpom.util.TestHandler) this;

        $stack2 = $r0.<sortpom.util.TestHandler: sortpom.SortPomImpl sortPomImpl>;

        $r1 = (sortpom.util.TestHandler) this;

        $stack3 = specialinvoke $r1.<sortpom.util.TestHandler: sortpom.logger.SortPomLogger createDummyLog()>();

        $r2 = (sortpom.util.TestHandler) this;

        $stack4 = $r2.<sortpom.util.TestHandler: sortpom.parameter.PluginParameters pluginParameters>;

        virtualinvoke $stack2.<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>($stack3, $stack4);

        $stack6 = class "Lsortpom/SortPomImpl;";

        $stack5 = newarray (java.lang.Class)[0];

        getVerificationResult = virtualinvoke $stack6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getVerificationResult", $stack5);

        virtualinvoke getVerificationResult.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r3 = (sortpom.util.TestHandler) this;

        $stack9 = $r3.<sortpom.util.TestHandler: sortpom.SortPomImpl sortPomImpl>;

        $stack8 = newarray (java.lang.Object)[0];

        $stack10 = virtualinvoke getVerificationResult.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($stack9, $stack8);

        $stack11 = (sortpom.util.XmlOrderedResult) $stack10;

        return $stack11;
    }

    private void removeOldTemporaryFiles()
    {
        TestHandler this;
        java.io.File $stack1, $stack3;
        boolean $stack2, $stack4;
        sortpom.util.TestHandler $r0, $r1;

        this := @this: TestHandler;

        $r0 = (sortpom.util.TestHandler) this;

        $stack1 = $r0.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack2 = virtualinvoke $stack1.<java.io.File: boolean exists()>();

        if $stack2 == 0 goto label1;

        $r1 = (sortpom.util.TestHandler) this;

        $stack3 = $r1.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack4 = virtualinvoke $stack3.<java.io.File: boolean delete()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

     label1:
        return;
    }

    private void cleanupAfterTest()
    {
        TestHandler this;
        java.io.FileInputStream $stack1, $stack2, $stack3, $stack4;
        java.io.File $stack5, $stack7, $stack9, $stack11;
        boolean $stack6, $stack8, $stack10, $stack12;
        sortpom.util.TestHandler $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: TestHandler;

        $r0 = (sortpom.util.TestHandler) this;

        $stack1 = $r0.<sortpom.util.TestHandler: java.io.FileInputStream backupFileInputStream>;

        $r1 = (sortpom.util.TestHandler) this;

        specialinvoke $r1.<sortpom.util.TestHandler: void closeQuietly(java.io.Closeable)>($stack1);

        $r2 = (sortpom.util.TestHandler) this;

        $stack2 = $r2.<sortpom.util.TestHandler: java.io.FileInputStream originalPomInputStream>;

        $r3 = (sortpom.util.TestHandler) this;

        specialinvoke $r3.<sortpom.util.TestHandler: void closeQuietly(java.io.Closeable)>($stack2);

        $r4 = (sortpom.util.TestHandler) this;

        $stack3 = $r4.<sortpom.util.TestHandler: java.io.FileInputStream actualSortedPomInputStream>;

        $r5 = (sortpom.util.TestHandler) this;

        specialinvoke $r5.<sortpom.util.TestHandler: void closeQuietly(java.io.Closeable)>($stack3);

        $r6 = (sortpom.util.TestHandler) this;

        $stack4 = $r6.<sortpom.util.TestHandler: java.io.FileInputStream expectedSortedPomInputStream>;

        $r7 = (sortpom.util.TestHandler) this;

        specialinvoke $r7.<sortpom.util.TestHandler: void closeQuietly(java.io.Closeable)>($stack4);

        $r8 = (sortpom.util.TestHandler) this;

        $stack5 = $r8.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack6 = virtualinvoke $stack5.<java.io.File: boolean exists()>();

        if $stack6 == 0 goto label1;

        $r9 = (sortpom.util.TestHandler) this;

        $stack11 = $r9.<sortpom.util.TestHandler: java.io.File testpom>;

        $stack12 = virtualinvoke $stack11.<java.io.File: boolean delete()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack12);

     label1:
        $r10 = (sortpom.util.TestHandler) this;

        $stack7 = $r10.<sortpom.util.TestHandler: java.io.File backupFile>;

        $stack8 = virtualinvoke $stack7.<java.io.File: boolean exists()>();

        if $stack8 == 0 goto label2;

        $r11 = (sortpom.util.TestHandler) this;

        $stack9 = $r11.<sortpom.util.TestHandler: java.io.File backupFile>;

        $stack10 = virtualinvoke $stack9.<java.io.File: boolean delete()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

     label2:
        return;
    }

    private void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable stream;
        java.io.IOException $stack3;
        TestHandler this;

        this := @this: TestHandler;

        stream := @parameter0: java.io.Closeable;

        if stream == null goto label4;

     label1:
        interfaceinvoke stream.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $stack3 := @caughtexception;

        virtualinvoke $stack3.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private sortpom.logger.SortPomLogger createDummyLog()
    {
        TestHandler this;
        sortpom.util.TestHandler$1 $u0;
        sortpom.util.TestHandler $r0;
        sortpom.logger.SortPomLogger $r1;

        this := @this: TestHandler;

        $u0 = new sortpom.util.TestHandler$1;

        $r0 = (sortpom.util.TestHandler) this;

        specialinvoke $u0.<sortpom.util.TestHandler$1: void <init>(sortpom.util.TestHandler)>($r0);

        $r1 = (sortpom.logger.SortPomLogger) $u0;

        return $r1;
    }

    static java.util.List access$000(sortpom.util.TestHandler)
    {
        sortpom.util.TestHandler x0;
        java.util.List $stack1;

        x0 := @parameter0: sortpom.util.TestHandler;

        $stack1 = x0.<sortpom.util.TestHandler: java.util.List infoLogger>;

        return $stack1;
    }
}
