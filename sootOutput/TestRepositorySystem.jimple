public class TestRepositorySystem extends java.lang.Object implements org.apache.maven.repository.RepositorySystem
{
    private final org.apache.maven.model.io.ModelReader modelReader;
    private final org.apache.maven.artifact.factory.ArtifactFactory artifactFactory;

    public void <init>(org.apache.maven.model.io.ModelReader, org.apache.maven.artifact.factory.ArtifactFactory)
    {
        TestRepositorySystem this;
        org.apache.maven.model.io.ModelReader modelReader;
        org.apache.maven.artifact.factory.ArtifactFactory artifactFactory;
        org.apache.maven.repository.TestRepositorySystem $r0, $r1;

        this := @this: TestRepositorySystem;

        modelReader := @parameter0: org.apache.maven.model.io.ModelReader;

        artifactFactory := @parameter1: org.apache.maven.artifact.factory.ArtifactFactory;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.apache.maven.repository.TestRepositorySystem) this;

        $r0.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.model.io.ModelReader modelReader> = modelReader;

        $r1 = (org.apache.maven.repository.TestRepositorySystem) this;

        $r1.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.factory.ArtifactFactory artifactFactory> = artifactFactory;

        return;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository) throws org.apache.maven.artifact.InvalidRepositoryException
    {
        org.apache.maven.model.Repository repository;
        java.lang.String $stack3, $stack4;
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout $u0;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $u1, $u2;
        org.apache.maven.artifact.repository.MavenArtifactRepository $u3;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $r0;
        org.apache.maven.artifact.repository.ArtifactRepository $r1;

        this := @this: TestRepositorySystem;

        repository := @parameter0: org.apache.maven.model.Repository;

        $u3 = new org.apache.maven.artifact.repository.MavenArtifactRepository;

        $stack3 = virtualinvoke repository.<org.apache.maven.model.Repository: java.lang.String getId()>();

        $stack4 = virtualinvoke repository.<org.apache.maven.model.Repository: java.lang.String getUrl()>();

        $u0 = new org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;

        specialinvoke $u0.<org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout: void <init>()>();

        $u1 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u1.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $u2 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u2.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $r0 = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $u0;

        specialinvoke $u3.<org.apache.maven.artifact.repository.MavenArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>($stack3, $stack4, $r0, $u1, $u2);

        $r1 = (org.apache.maven.artifact.repository.ArtifactRepository) $u3;

        return $r1;
    }

    public org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        TestRepositorySystem this;
        java.lang.String groupId, artifactId, version, packaging;
        org.apache.maven.artifact.Artifact $stack5;
        org.apache.maven.repository.TestRepositorySystem $r0;

        this := @this: TestRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        packaging := @parameter3: java.lang.String;

        $r0 = (org.apache.maven.repository.TestRepositorySystem) this;

        $stack5 = virtualinvoke $r0.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, null, packaging);

        return $stack5;
    }

    public org.apache.maven.artifact.Artifact createArtifact(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String groupId, artifactId, version, scope, type;
        TestRepositorySystem this;
        org.apache.maven.repository.TestArtifactHandler $u0;
        org.apache.maven.artifact.DefaultArtifact $u1;
        org.apache.maven.artifact.handler.ArtifactHandler $r0;
        org.apache.maven.artifact.Artifact $r1;

        this := @this: TestRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        scope := @parameter3: java.lang.String;

        type := @parameter4: java.lang.String;

        $u1 = new org.apache.maven.artifact.DefaultArtifact;

        $u0 = new org.apache.maven.repository.TestArtifactHandler;

        specialinvoke $u0.<org.apache.maven.repository.TestArtifactHandler: void <init>(java.lang.String)>(type);

        $r0 = (org.apache.maven.artifact.handler.ArtifactHandler) $u0;

        specialinvoke $u1.<org.apache.maven.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler)>(groupId, artifactId, version, scope, type, null, $r0);

        $r1 = (org.apache.maven.artifact.Artifact) $u1;

        return $r1;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String, java.lang.String, org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy, org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)
    {
        java.lang.String id, url;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout repositoryLayout;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy snapshots, releases;
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.MavenArtifactRepository $u0;
        org.apache.maven.artifact.repository.ArtifactRepository $r0;

        this := @this: TestRepositorySystem;

        id := @parameter0: java.lang.String;

        url := @parameter1: java.lang.String;

        repositoryLayout := @parameter2: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;

        snapshots := @parameter3: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        releases := @parameter4: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        $u0 = new org.apache.maven.artifact.repository.MavenArtifactRepository;

        specialinvoke $u0.<org.apache.maven.artifact.repository.MavenArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>(id, url, repositoryLayout, snapshots, releases);

        $r0 = (org.apache.maven.artifact.repository.ArtifactRepository) $u0;

        return $r0;
    }

    public org.apache.maven.artifact.Artifact createArtifactWithClassifier(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String groupId, artifactId, version, type, classifier;
        TestRepositorySystem this;
        org.apache.maven.repository.TestArtifactHandler $u0;
        org.apache.maven.artifact.DefaultArtifact $u1;
        org.apache.maven.artifact.handler.ArtifactHandler $r0;
        org.apache.maven.artifact.Artifact $r1;

        this := @this: TestRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        type := @parameter3: java.lang.String;

        classifier := @parameter4: java.lang.String;

        $u1 = new org.apache.maven.artifact.DefaultArtifact;

        $u0 = new org.apache.maven.repository.TestArtifactHandler;

        specialinvoke $u0.<org.apache.maven.repository.TestArtifactHandler: void <init>(java.lang.String)>(type);

        $r0 = (org.apache.maven.artifact.handler.ArtifactHandler) $u0;

        specialinvoke $u1.<org.apache.maven.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler)>(groupId, artifactId, version, null, type, classifier, $r0);

        $r1 = (org.apache.maven.artifact.Artifact) $u1;

        return $r1;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createDefaultLocalRepository() throws org.apache.maven.artifact.InvalidRepositoryException
    {
        TestRepositorySystem this;
        java.lang.String $stack2;
        java.io.File $stack3, $u0;
        org.apache.maven.artifact.repository.ArtifactRepository $stack4;
        org.apache.maven.repository.TestRepositorySystem $r0;

        this := @this: TestRepositorySystem;

        $u0 = new java.io.File;

        $stack2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("basedir", ".");

        specialinvoke $u0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack2, "target/local-repo");

        $stack3 = virtualinvoke $u0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r0 = (org.apache.maven.repository.TestRepositorySystem) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(java.io.File)>($stack3);

        return $stack4;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createDefaultRemoteRepository() throws org.apache.maven.artifact.InvalidRepositoryException
    {
        java.lang.StringBuilder $stack4, $stack10, $u0;
        java.lang.String $stack6, $stack9, $stack11;
        java.io.File $stack7, $u1;
        java.net.URI $stack8;
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout $u2;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $u3, $u4;
        org.apache.maven.artifact.repository.MavenArtifactRepository $u5;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $r0;
        org.apache.maven.artifact.repository.ArtifactRepository $r1;

        this := @this: TestRepositorySystem;

        $u5 = new org.apache.maven.artifact.repository.MavenArtifactRepository;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $u1 = new java.io.File;

        $stack6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("basedir", ".");

        specialinvoke $u1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack6, "src/test/remote-repo");

        $stack7 = virtualinvoke $u1.<java.io.File: java.io.File getAbsoluteFile()>();

        $stack8 = virtualinvoke $stack7.<java.io.File: java.net.URI toURI()>();

        $stack9 = virtualinvoke $stack8.<java.net.URI: java.lang.String getPath()>();

        $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $u2 = new org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;

        specialinvoke $u2.<org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout: void <init>()>();

        $u3 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u3.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $u4 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u4.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $r0 = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $u2;

        specialinvoke $u5.<org.apache.maven.artifact.repository.MavenArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("central", $stack11, $r0, $u3, $u4);

        $r1 = (org.apache.maven.artifact.repository.ArtifactRepository) $u5;

        return $r1;
    }

    public org.apache.maven.artifact.Artifact createDependencyArtifact(org.apache.maven.model.Dependency)
    {
        org.apache.maven.model.Dependency dependency;
        java.lang.String $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack12, $stack13, $stack16;
        boolean $stack14;
        TestRepositorySystem this;
        org.apache.maven.repository.TestArtifactHandler $u0;
        org.apache.maven.artifact.DefaultArtifact $u1;
        java.io.File $u2;
        org.apache.maven.artifact.handler.ArtifactHandler $r0;
        org.apache.maven.artifact.Artifact $r1, $r2, $r3;

        this := @this: TestRepositorySystem;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $u1 = new org.apache.maven.artifact.DefaultArtifact;

        $stack4 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack5 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack6 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        $stack7 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack8 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        $stack9 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getClassifier()>();

        $u0 = new org.apache.maven.repository.TestArtifactHandler;

        $stack11 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getType()>();

        specialinvoke $u0.<org.apache.maven.repository.TestArtifactHandler: void <init>(java.lang.String)>($stack11);

        $r0 = (org.apache.maven.artifact.handler.ArtifactHandler) $u0;

        specialinvoke $u1.<org.apache.maven.artifact.DefaultArtifact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler)>($stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $r0);

        $stack12 = "system";

        $stack13 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getScope()>();

        $stack14 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>($stack13);

        if $stack14 == 0 goto label1;

        $u2 = new java.io.File;

        $stack16 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getSystemPath()>();

        specialinvoke $u2.<java.io.File: void <init>(java.lang.String)>($stack16);

        $r1 = (org.apache.maven.artifact.Artifact) $u1;

        interfaceinvoke $r1.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($u2);

        $r2 = (org.apache.maven.artifact.Artifact) $u1;

        interfaceinvoke $r2.<org.apache.maven.artifact.Artifact: void setResolved(boolean)>(1);

     label1:
        $r3 = (org.apache.maven.artifact.Artifact) $u1;

        return $r3;
    }

    public org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(java.io.File) throws org.apache.maven.artifact.InvalidRepositoryException
    {
        java.lang.StringBuilder $stack5, $stack8, $u0;
        java.io.File localRepository;
        java.net.URI $stack6;
        java.lang.String $stack7, $stack9;
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout $u1;
        org.apache.maven.artifact.repository.ArtifactRepositoryPolicy $u2, $u3;
        org.apache.maven.artifact.repository.MavenArtifactRepository $u4;
        org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout $r0;
        org.apache.maven.artifact.repository.ArtifactRepository $r1;

        this := @this: TestRepositorySystem;

        localRepository := @parameter0: java.io.File;

        $u4 = new org.apache.maven.artifact.repository.MavenArtifactRepository;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $stack6 = virtualinvoke localRepository.<java.io.File: java.net.URI toURI()>();

        $stack7 = virtualinvoke $stack6.<java.net.URI: java.lang.String getPath()>();

        $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout;

        specialinvoke $u1.<org.apache.maven.artifact.repository.layout.DefaultRepositoryLayout: void <init>()>();

        $u2 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u2.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $u3 = new org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;

        specialinvoke $u3.<org.apache.maven.artifact.repository.ArtifactRepositoryPolicy: void <init>()>();

        $r0 = (org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout) $u1;

        specialinvoke $u4.<org.apache.maven.artifact.repository.MavenArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>("local", $stack9, $r0, $u2, $u3);

        $r1 = (org.apache.maven.artifact.repository.ArtifactRepository) $u4;

        return $r1;
    }

    public org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin)
    {
        org.apache.maven.model.Plugin plugin;
        boolean $stack5;
        org.apache.maven.artifact.versioning.VersionRange versionRange;
        TestRepositorySystem this;
        org.apache.maven.artifact.factory.ArtifactFactory $stack7;
        java.lang.String $stack8, $stack9, version;
        org.apache.maven.artifact.Artifact $stack10;
        java.lang.Throwable $stack12;
        org.apache.maven.repository.TestRepositorySystem $r0;

        this := @this: TestRepositorySystem;

        plugin := @parameter0: org.apache.maven.model.Plugin;

     label1:
        version = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getVersion()>();

        $stack5 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(version);

        if $stack5 == 0 goto label2;

        version = "RELEASE";

     label2:
        versionRange = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(version);

     label3:
        goto label5;

     label4:
        $stack12 := @caughtexception;

        return null;

     label5:
        $r0 = (org.apache.maven.repository.TestRepositorySystem) this;

        $stack7 = $r0.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.factory.ArtifactFactory artifactFactory>;

        $stack8 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getGroupId()>();

        $stack9 = virtualinvoke plugin.<org.apache.maven.model.Plugin: java.lang.String getArtifactId()>();

        $stack10 = interfaceinvoke $stack7.<org.apache.maven.artifact.factory.ArtifactFactory: org.apache.maven.artifact.Artifact createPluginArtifact(java.lang.String,java.lang.String,org.apache.maven.artifact.versioning.VersionRange)>($stack8, $stack9, versionRange);

        return $stack10;

        catch org.apache.maven.artifact.versioning.InvalidVersionSpecificationException from label1 to label3 with label4;
    }

    public org.apache.maven.artifact.Artifact createProjectArtifact(java.lang.String, java.lang.String, java.lang.String)
    {
        TestRepositorySystem this;
        java.lang.String groupId, artifactId, version;
        org.apache.maven.artifact.Artifact $stack4;
        org.apache.maven.repository.TestRepositorySystem $r0;

        this := @this: TestRepositorySystem;

        groupId := @parameter0: java.lang.String;

        artifactId := @parameter1: java.lang.String;

        version := @parameter2: java.lang.String;

        $r0 = (org.apache.maven.repository.TestRepositorySystem) this;

        $stack4 = virtualinvoke $r0.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.Artifact createArtifact(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(groupId, artifactId, version, "pom");

        return $stack4;
    }

    public java.util.List getEffectiveRepositories(java.util.List)
    {
        java.util.List repositories;
        TestRepositorySystem this;

        this := @this: TestRepositorySystem;

        repositories := @parameter0: java.util.List;

        return repositories;
    }

    public org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository, java.util.List)
    {
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.util.List mirrors;

        this := @this: TestRepositorySystem;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        mirrors := @parameter1: java.util.List;

        return null;
    }

    public void injectAuthentication(java.util.List, java.util.List)
    {
        TestRepositorySystem this;
        java.util.List repositories, servers;

        this := @this: TestRepositorySystem;

        repositories := @parameter0: java.util.List;

        servers := @parameter1: java.util.List;

        return;
    }

    public void injectMirror(java.util.List, java.util.List)
    {
        TestRepositorySystem this;
        java.util.List repositories, mirrors;

        this := @this: TestRepositorySystem;

        repositories := @parameter0: java.util.List;

        mirrors := @parameter1: java.util.List;

        return;
    }

    public void injectProxy(java.util.List, java.util.List)
    {
        TestRepositorySystem this;
        java.util.List repositories, proxies;

        this := @this: TestRepositorySystem;

        repositories := @parameter0: java.util.List;

        proxies := @parameter1: java.util.List;

        return;
    }

    public void publish(org.apache.maven.artifact.repository.ArtifactRepository, java.io.File, java.lang.String, org.apache.maven.repository.ArtifactTransferListener) throws org.apache.maven.repository.ArtifactTransferFailedException
    {
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.io.File source;
        java.lang.String remotePath;
        org.apache.maven.repository.ArtifactTransferListener transferListener;

        this := @this: TestRepositorySystem;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        source := @parameter1: java.io.File;

        remotePath := @parameter2: java.lang.String;

        transferListener := @parameter3: org.apache.maven.repository.ArtifactTransferListener;

        return;
    }

    public org.apache.maven.artifact.resolver.ArtifactResolutionResult resolve(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)
    {
        org.apache.maven.artifact.resolver.ArtifactResolutionRequest request;
        boolean $stack9, $stack15, $stack35, $stack42, $stack52, $stack10, $stack32;
        java.util.Set $stack12, $stack50;
        org.apache.maven.artifact.Artifact $stack14, $stack16, $stack18, $stack20, $stack46, $stack58, $stack59, $stack65, artifact, model#26, pomFile#28;
        TestRepositorySystem this;
        java.lang.String $stack17, $stack19, $stack21, $stack25, $stack27, $stack41, $stack44, $stack55;
        org.apache.maven.artifact.repository.ArtifactRepository $stack24, $stack26;
        org.apache.maven.model.io.ModelReader $stack28;
        java.util.Collection $stack33;
        java.lang.Object $stack37, $stack39, $stack54;
        org.apache.maven.project.artifact.ArtifactWithDependencies $stack47;
        java.io.IOException $stack61, $stack63, $stack64;
        java.util.Iterator dependencies, artifact#18;
        java.util.List dependencies#9;
        org.apache.maven.model.Model model;
        org.apache.maven.model.Dependency pomFile#25;
        org.apache.maven.artifact.resolver.ArtifactResolutionResult $u0;
        java.util.LinkedHashMap $u1;
        java.util.ArrayList $u2;
        java.io.File $u3;
        org.apache.maven.repository.TestRepositorySystem $r0, $r1, $r2, $r3, $r4;

        this := @this: TestRepositorySystem;

        request := @parameter0: org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        $u0 = new org.apache.maven.artifact.resolver.ArtifactResolutionResult;

        specialinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void <init>()>();

        $stack9 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: boolean isResolveRoot()>();

        if $stack9 == 0 goto label04;

     label01:
        $stack58 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        $r0 = (org.apache.maven.repository.TestRepositorySystem) this;

        specialinvoke $r0.<org.apache.maven.repository.TestRepositorySystem: void resolve(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>($stack58, request);

        $stack59 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        virtualinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void addArtifact(org.apache.maven.artifact.Artifact)>($stack59);

     label02:
        goto label04;

     label03:
        $stack64 := @caughtexception;

        $stack65 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        virtualinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addMissingArtifact(org.apache.maven.artifact.Artifact)>($stack65);

     label04:
        $stack10 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: boolean isResolveTransitively()>();

        if $stack10 == 0 goto label20;

        $u1 = new java.util.LinkedHashMap;

        specialinvoke $u1.<java.util.LinkedHashMap: void <init>()>();

        $stack12 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.Set getArtifactDependencies()>();

        if $stack12 == null goto label06;

        $stack50 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.Set getArtifactDependencies()>();

        dependencies = interfaceinvoke $stack50.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $stack52 = interfaceinvoke dependencies.<java.util.Iterator: boolean hasNext()>();

        if $stack52 == 0 goto label06;

        $stack54 = interfaceinvoke dependencies.<java.util.Iterator: java.lang.Object next()>();

        artifact = (org.apache.maven.artifact.Artifact) $stack54;

        $stack55 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        interfaceinvoke $u1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack55, artifact);

        goto label05;

     label06:
        $u2 = new java.util.ArrayList;

        specialinvoke $u2.<java.util.ArrayList: void <init>()>();

        dependencies#9 = $u2;

        $stack14 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack15 = $stack14 instanceof org.apache.maven.project.artifact.ArtifactWithDependencies;

        if $stack15 == 0 goto label07;

        $stack46 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack47 = (org.apache.maven.project.artifact.ArtifactWithDependencies) $stack46;

        dependencies#9 = interfaceinvoke $stack47.<org.apache.maven.project.artifact.ArtifactWithDependencies: java.util.List getDependencies()>();

        goto label11;

     label07:
        $stack16 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack17 = interfaceinvoke $stack16.<org.apache.maven.artifact.Artifact: java.lang.String getGroupId()>();

        $stack18 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack19 = interfaceinvoke $stack18.<org.apache.maven.artifact.Artifact: java.lang.String getArtifactId()>();

        $stack20 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.Artifact getArtifact()>();

        $stack21 = interfaceinvoke $stack20.<org.apache.maven.artifact.Artifact: java.lang.String getVersion()>();

        $r1 = (org.apache.maven.repository.TestRepositorySystem) this;

        artifact = virtualinvoke $r1.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.Artifact createProjectArtifact(java.lang.String,java.lang.String,java.lang.String)>($stack17, $stack19, $stack21);

        $u3 = new java.io.File;

        $stack24 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack25 = interfaceinvoke $stack24.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        $stack26 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack27 = interfaceinvoke $stack26.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        specialinvoke $u3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack25, $stack27);

     label08:
        $r2 = (org.apache.maven.repository.TestRepositorySystem) this;

        $stack28 = $r2.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.model.io.ModelReader modelReader>;

        model = interfaceinvoke $stack28.<org.apache.maven.model.io.ModelReader: org.apache.maven.model.Model read(java.io.File,java.util.Map)>($u3, null);

        dependencies#9 = virtualinvoke model.<org.apache.maven.model.Model: java.util.List getDependencies()>();

     label09:
        goto label11;

     label10:
        $stack63 := @caughtexception;

        virtualinvoke $stack63.<java.io.IOException: void printStackTrace()>();

     label11:
        artifact#18 = interfaceinvoke dependencies#9.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $stack32 = interfaceinvoke artifact#18.<java.util.Iterator: boolean hasNext()>();

        if $stack32 == 0 goto label14;

        $stack39 = interfaceinvoke artifact#18.<java.util.Iterator: java.lang.Object next()>();

        pomFile#25 = (org.apache.maven.model.Dependency) $stack39;

        $r3 = (org.apache.maven.repository.TestRepositorySystem) this;

        model#26 = virtualinvoke $r3.<org.apache.maven.repository.TestRepositorySystem: org.apache.maven.artifact.Artifact createDependencyArtifact(org.apache.maven.model.Dependency)>(pomFile#25);

        $stack41 = interfaceinvoke model#26.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        $stack42 = interfaceinvoke $u1.<java.util.Map: boolean containsKey(java.lang.Object)>($stack41);

        if $stack42 != 0 goto label13;

        $stack44 = interfaceinvoke model#26.<org.apache.maven.artifact.Artifact: java.lang.String getDependencyConflictId()>();

        interfaceinvoke $u1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack44, model#26);

     label13:
        goto label12;

     label14:
        $stack33 = interfaceinvoke $u1.<java.util.Map: java.util.Collection values()>();

        artifact#18 = interfaceinvoke $stack33.<java.util.Collection: java.util.Iterator iterator()>();

     label15:
        $stack35 = interfaceinvoke artifact#18.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label20;

        $stack37 = interfaceinvoke artifact#18.<java.util.Iterator: java.lang.Object next()>();

        pomFile#28 = (org.apache.maven.artifact.Artifact) $stack37;

     label16:
        $r4 = (org.apache.maven.repository.TestRepositorySystem) this;

        specialinvoke $r4.<org.apache.maven.repository.TestRepositorySystem: void resolve(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>(pomFile#28, request);

        virtualinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void addArtifact(org.apache.maven.artifact.Artifact)>(pomFile#28);

     label17:
        goto label19;

     label18:
        $stack61 := @caughtexception;

        virtualinvoke $u0.<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addMissingArtifact(org.apache.maven.artifact.Artifact)>(pomFile#28);

     label19:
        goto label15;

     label20:
        return $u0;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private void resolve(org.apache.maven.artifact.Artifact, org.apache.maven.artifact.resolver.ArtifactResolutionRequest) throws java.io.IOException
    {
        org.apache.maven.artifact.Artifact artifact;
        java.lang.String $stack7, $stack8, $stack12, $stack13, $stack20, $stack21, $stack28;
        boolean $stack9, $stack14, $stack16;
        org.apache.maven.artifact.resolver.ArtifactResolutionRequest request;
        org.apache.maven.artifact.repository.ArtifactRepository localRepo, remoteRepo;
        java.io.File $stack11, $stack19;
        java.util.List $stack15, $stack17;
        java.lang.Object $stack18;
        java.io.IOException $stack24;
        java.lang.StringBuilder $stack25, $stack26, $stack27;
        TestRepositorySystem this;

        this := @this: TestRepositorySystem;

        artifact := @parameter0: org.apache.maven.artifact.Artifact;

        request := @parameter1: org.apache.maven.artifact.resolver.ArtifactResolutionRequest;

        $stack7 = "system";

        $stack8 = interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: java.lang.String getScope()>();

        $stack9 = virtualinvoke $stack7.<java.lang.String: boolean equals(java.lang.Object)>($stack8);

        if $stack9 == 0 goto label1;

        return;

     label1:
        localRepo = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.repository.ArtifactRepository getLocalRepository()>();

        $stack11 = new java.io.File;

        $stack12 = interfaceinvoke localRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        $stack13 = interfaceinvoke localRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        specialinvoke $stack11.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack12, $stack13);

        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setFile(java.io.File)>($stack11);

        $stack14 = virtualinvoke $stack11.<java.io.File: boolean exists()>();

        if $stack14 != 0 goto label3;

        $stack15 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getRemoteRepositories()>();

        $stack16 = interfaceinvoke $stack15.<java.util.List: boolean isEmpty()>();

        if $stack16 == 0 goto label2;

        $stack24 = new java.io.IOException;

        $stack25 = new java.lang.StringBuilder;

        specialinvoke $stack25.<java.lang.StringBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack11);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist and no remote repositories are configured");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack24.<java.io.IOException: void <init>(java.lang.String)>($stack28);

        throw $stack24;

     label2:
        $stack17 = virtualinvoke request.<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: java.util.List getRemoteRepositories()>();

        $stack18 = interfaceinvoke $stack17.<java.util.List: java.lang.Object get(int)>(0);

        remoteRepo = (org.apache.maven.artifact.repository.ArtifactRepository) $stack18;

        $stack19 = new java.io.File;

        $stack20 = interfaceinvoke remoteRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String getBasedir()>();

        $stack21 = interfaceinvoke remoteRepo.<org.apache.maven.artifact.repository.ArtifactRepository: java.lang.String pathOf(org.apache.maven.artifact.Artifact)>(artifact);

        specialinvoke $stack19.<java.io.File: void <init>(java.lang.String,java.lang.String)>($stack20, $stack21);

        staticinvoke <org.codehaus.plexus.util.FileUtils: void copyFile(java.io.File,java.io.File)>($stack19, $stack11);

     label3:
        interfaceinvoke artifact.<org.apache.maven.artifact.Artifact: void setResolved(boolean)>(1);

        return;
    }

    public void retrieve(org.apache.maven.artifact.repository.ArtifactRepository, java.io.File, java.lang.String, org.apache.maven.repository.ArtifactTransferListener) throws org.apache.maven.repository.ArtifactTransferFailedException, org.apache.maven.repository.ArtifactDoesNotExistException
    {
        TestRepositorySystem this;
        org.apache.maven.artifact.repository.ArtifactRepository repository;
        java.io.File destination;
        java.lang.String remotePath;
        org.apache.maven.repository.ArtifactTransferListener transferListener;

        this := @this: TestRepositorySystem;

        repository := @parameter0: org.apache.maven.artifact.repository.ArtifactRepository;

        destination := @parameter1: java.io.File;

        remotePath := @parameter2: java.lang.String;

        transferListener := @parameter3: org.apache.maven.repository.ArtifactTransferListener;

        return;
    }

    public void injectMirror(org.eclipse.aether.RepositorySystemSession, java.util.List)
    {
        TestRepositorySystem this;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.List repositories;

        this := @this: TestRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        return;
    }

    public void injectProxy(org.eclipse.aether.RepositorySystemSession, java.util.List)
    {
        TestRepositorySystem this;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.List repositories;

        this := @this: TestRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        return;
    }

    public void injectAuthentication(org.eclipse.aether.RepositorySystemSession, java.util.List)
    {
        TestRepositorySystem this;
        org.eclipse.aether.RepositorySystemSession session;
        java.util.List repositories;

        this := @this: TestRepositorySystem;

        session := @parameter0: org.eclipse.aether.RepositorySystemSession;

        repositories := @parameter1: java.util.List;

        return;
    }
}
