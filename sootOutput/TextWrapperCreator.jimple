public class TextWrapperCreator extends java.lang.Object
{
    private boolean keepBlankLines;

    public void <init>()
    {
        TextWrapperCreator this;

        this := @this: TextWrapperCreator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup(sortpom.parameter.PluginParameters)
    {
        TextWrapperCreator this;
        sortpom.parameter.PluginParameters pluginParameters;
        boolean $stack2;
        sortpom.wrapper.TextWrapperCreator $r0;

        this := @this: TextWrapperCreator;

        pluginParameters := @parameter0: sortpom.parameter.PluginParameters;

        $stack2 = pluginParameters.<sortpom.parameter.PluginParameters: boolean keepBlankLines>;

        $r0 = (sortpom.wrapper.TextWrapperCreator) this;

        $r0.<sortpom.wrapper.TextWrapperCreator: boolean keepBlankLines> = $stack2;

        return;
    }

    sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)
    {
        TextWrapperCreator this;
        org.jdom.Text text;
        boolean $stack2, $stack3;
        sortpom.wrapper.content.SingleNewlineInTextWrapper $stack7;
        sortpom.jdomcontent.NewlineText $u0;
        sortpom.wrapper.content.UnsortedWrapper $u1, $u2;
        sortpom.wrapper.TextWrapperCreator $r0, $r2;
        sortpom.wrapper.content.Wrapper $r1, $r4, $r6;
        org.jdom.Content $r3, $r5;

        this := @this: TextWrapperCreator;

        text := @parameter0: org.jdom.Text;

        $r0 = (sortpom.wrapper.TextWrapperCreator) this;

        $stack2 = specialinvoke $r0.<sortpom.wrapper.TextWrapperCreator: boolean isSingleNewLine(org.jdom.Text)>(text);

        if $stack2 == 0 goto label1;

        $stack7 = <sortpom.wrapper.content.SingleNewlineInTextWrapper: sortpom.wrapper.content.SingleNewlineInTextWrapper INSTANCE>;

        $r1 = (sortpom.wrapper.content.Wrapper) $stack7;

        return $r1;

     label1:
        $r2 = (sortpom.wrapper.TextWrapperCreator) this;

        $stack3 = virtualinvoke $r2.<sortpom.wrapper.TextWrapperCreator: boolean isBlankLineOrLines(org.jdom.Text)>(text);

        if $stack3 == 0 goto label2;

        $u1 = new sortpom.wrapper.content.UnsortedWrapper;

        $u0 = new sortpom.jdomcontent.NewlineText;

        specialinvoke $u0.<sortpom.jdomcontent.NewlineText: void <init>()>();

        $r3 = (org.jdom.Content) $u0;

        specialinvoke $u1.<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>($r3);

        $r4 = (sortpom.wrapper.content.Wrapper) $u1;

        return $r4;

     label2:
        $u2 = new sortpom.wrapper.content.UnsortedWrapper;

        $r5 = (org.jdom.Content) text;

        specialinvoke $u2.<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>($r5);

        $r6 = (sortpom.wrapper.content.Wrapper) $u2;

        return $r6;
    }

    private boolean isSingleNewLine(org.jdom.Text)
    {
        org.jdom.Text content;
        java.lang.String $stack2;
        boolean $stack3;
        TextWrapperCreator this;

        this := @this: TextWrapperCreator;

        content := @parameter0: org.jdom.Text;

        $stack2 = virtualinvoke content.<org.jdom.Text: java.lang.String getText()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean matches(java.lang.String)>("[\\t ]*[\\r]?[\\n]?[\\t ]*");

        return $stack3;
    }

    boolean isBlankLineOrLines(org.jdom.Text)
    {
        TextWrapperCreator this;
        boolean $stack2, $stack4;
        org.jdom.Text content;
        java.lang.String $stack3;
        sortpom.wrapper.TextWrapperCreator $r0;

        this := @this: TextWrapperCreator;

        content := @parameter0: org.jdom.Text;

        $r0 = (sortpom.wrapper.TextWrapperCreator) this;

        $stack2 = $r0.<sortpom.wrapper.TextWrapperCreator: boolean keepBlankLines>;

        if $stack2 != 0 goto label1;

        return 0;

     label1:
        $stack3 = virtualinvoke content.<org.jdom.Text: java.lang.String getText()>();

        $stack4 = virtualinvoke $stack3.<java.lang.String: boolean matches(java.lang.String)>("^\\s*?([\\r\\n])\\s*$");

        return $stack4;
    }
}
