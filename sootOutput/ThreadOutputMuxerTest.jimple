public class ThreadOutputMuxerTest extends java.lang.Object
{
    final java.lang.String paid;
    final java.lang.String in;
    final java.lang.String full;

    public void <init>()
    {
        ThreadOutputMuxerTest this;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest $r0, $r1, $r2;

        this := @this: ThreadOutputMuxerTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<ThreadOutputMuxerTest: java.lang.String full> = "Full";

        this.<ThreadOutputMuxerTest: java.lang.String in> = "In";

        this.<ThreadOutputMuxerTest: java.lang.String paid> = "Paid";

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest) this;

        $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest: java.lang.String paid> = "Paid";

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest) this;

        $r1.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest: java.lang.String in> = "In";

        $r2 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest) this;

        $r2.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest: java.lang.String full> = "Full";

        return;
    }

    public void testSingleThreaded() throws java.lang.Exception
    {
        ThreadOutputMuxerTest this;
        org.apache.maven.lifecycle.internal.ProjectBuildList src, $u0;
        org.apache.maven.lifecycle.internal.ProjectSegment[] $stack8;
        org.apache.maven.lifecycle.internal.ProjectSegment $stack10, $stack12, $stack14, $stack19, $stack24, $stack29, $stack34, $stack35, $stack36;
        java.util.List $stack15;
        java.io.PrintStream $stack20, $stack25, $stack30, $u2;
        java.lang.String $stack21, $stack26, $stack31, $stack37;
        int $stack22, $stack23, $stack27, $stack28, $stack32, $stack33, $stack38, $stack39;
        java.io.ByteArrayOutputStream $u1;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer $u3;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest $r0;

        this := @this: ThreadOutputMuxerTest;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest) this;

        src = specialinvoke $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest: org.apache.maven.lifecycle.internal.ProjectBuildList getProjectBuildList()>();

        $u0 = new org.apache.maven.lifecycle.internal.ProjectBuildList;

        $stack8 = newarray (org.apache.maven.lifecycle.internal.ProjectSegment)[3];

        $stack10 = virtualinvoke src.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(0);

        $stack8[0] = $stack10;

        $stack12 = virtualinvoke src.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(1);

        $stack8[1] = $stack12;

        $stack14 = virtualinvoke src.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(2);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack8);

        specialinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: void <init>(java.util.List)>($stack15);

        $u1 = new java.io.ByteArrayOutputStream;

        specialinvoke $u1.<java.io.ByteArrayOutputStream: void <init>()>();

        $u2 = new java.io.PrintStream;

        specialinvoke $u2.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u1);

        $u3 = new org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer;

        specialinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void <init>(org.apache.maven.lifecycle.internal.ProjectBuildList,java.io.PrintStream)>($u0, $u2);

        $stack19 = virtualinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(0);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void associateThreadWithProjectSegment(org.apache.maven.lifecycle.internal.ProjectSegment)>($stack19);

        $stack20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack20.<java.io.PrintStream: void print(java.lang.String)>("Paid");

        $stack21 = "Paid";

        $stack22 = virtualinvoke $stack21.<java.lang.String: int length()>();

        $stack23 = virtualinvoke $u1.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack22, $stack23);

        $stack24 = virtualinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(1);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void associateThreadWithProjectSegment(org.apache.maven.lifecycle.internal.ProjectSegment)>($stack24);

        $stack25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack25.<java.io.PrintStream: void print(java.lang.String)>("In");

        $stack26 = "Paid";

        $stack27 = virtualinvoke $stack26.<java.lang.String: int length()>();

        $stack28 = virtualinvoke $u1.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack27, $stack28);

        $stack29 = virtualinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(2);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void associateThreadWithProjectSegment(org.apache.maven.lifecycle.internal.ProjectSegment)>($stack29);

        $stack30 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack30.<java.io.PrintStream: void print(java.lang.String)>("Full");

        $stack31 = "Paid";

        $stack32 = virtualinvoke $stack31.<java.lang.String: int length()>();

        $stack33 = virtualinvoke $u1.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack32, $stack33);

        $stack34 = virtualinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(0);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void setThisModuleComplete(org.apache.maven.lifecycle.internal.ProjectSegment)>($stack34);

        $stack35 = virtualinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(1);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void setThisModuleComplete(org.apache.maven.lifecycle.internal.ProjectSegment)>($stack35);

        $stack36 = virtualinvoke $u0.<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>(2);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void setThisModuleComplete(org.apache.maven.lifecycle.internal.ProjectSegment)>($stack36);

        virtualinvoke $u3.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void close()>();

        $stack37 = "PaidInFull";

        $stack38 = virtualinvoke $stack37.<java.lang.String: int length()>();

        $stack39 = virtualinvoke $u1.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack38, $stack39);

        return;
    }

    public void testMultiThreaded() throws java.lang.Exception
    {
        ThreadOutputMuxerTest this;
        org.apache.maven.lifecycle.internal.ProjectBuildList projectBuildList;
        java.lang.String[] $stack17;
        java.util.List stringList;
        java.util.Iterator lyrics, expectedLength;
        java.util.concurrent.ExecutorService executor;
        boolean $stack24, $stack26;
        int $stack27, $stack30, $stack33, expectedLength#6, projectBuild#7;
        java.lang.Object $stack31, $stack36, $stack39, $stack41;
        java.lang.String $stack32, $stack42, $u6;
        org.apache.maven.lifecycle.internal.ProjectSegment projectBuild;
        java.util.concurrent.Future buildFuture, projectBuild#5;
        byte[] projectBuild#8;
        java.io.ByteArrayOutputStream $u0;
        java.io.PrintStream $u1;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer $u2;
        java.util.concurrent.ExecutorCompletionService $u3;
        java.util.ArrayList $u4;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest$Outputter $u5;
        org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest $r0, $r1;
        java.util.concurrent.Callable $r2;

        this := @this: ThreadOutputMuxerTest;

        $r0 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest) this;

        projectBuildList = specialinvoke $r0.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest: org.apache.maven.lifecycle.internal.ProjectBuildList getProjectBuildList()>();

        $u0 = new java.io.ByteArrayOutputStream;

        specialinvoke $u0.<java.io.ByteArrayOutputStream: void <init>()>();

        $u1 = new java.io.PrintStream;

        specialinvoke $u1.<java.io.PrintStream: void <init>(java.io.OutputStream)>($u0);

        $u2 = new org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer;

        specialinvoke $u2.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void <init>(org.apache.maven.lifecycle.internal.ProjectBuildList,java.io.PrintStream)>(projectBuildList, $u1);

        $stack17 = newarray (java.lang.String)[13];

        $stack17[0] = "Thinkin";

        $stack17[1] = "of";

        $stack17[2] = "a";

        $stack17[3] = "master";

        $stack17[4] = "plan";

        $stack17[5] = "Cuz";

        $stack17[6] = "ain\u2019t";

        $stack17[7] = "nuthin";

        $stack17[8] = "but";

        $stack17[9] = "sweat";

        $stack17[10] = "inside";

        $stack17[11] = "my";

        $stack17[12] = "hand";

        stringList = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack17);

        lyrics = interfaceinvoke stringList.<java.util.List: java.util.Iterator iterator()>();

        executor = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10);

        $u3 = new java.util.concurrent.ExecutorCompletionService;

        specialinvoke $u3.<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>(executor);

        $u4 = new java.util.ArrayList;

        specialinvoke $u4.<java.util.ArrayList: void <init>()>();

        expectedLength = virtualinvoke projectBuildList.<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Iterator iterator()>();

     label1:
        $stack24 = interfaceinvoke expectedLength.<java.util.Iterator: boolean hasNext()>();

        if $stack24 == 0 goto label2;

        $stack39 = interfaceinvoke expectedLength.<java.util.Iterator: java.lang.Object next()>();

        projectBuild = (org.apache.maven.lifecycle.internal.ProjectSegment) $stack39;

        $u5 = new org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest$Outputter;

        $stack41 = interfaceinvoke lyrics.<java.util.Iterator: java.lang.Object next()>();

        $stack42 = (java.lang.String) $stack41;

        $r1 = (org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest) this;

        specialinvoke $u5.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest$Outputter: void <init>(org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxerTest,org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer,org.apache.maven.lifecycle.internal.ProjectSegment,java.lang.String)>($r1, $u2, projectBuild, $stack42);

        $r2 = (java.util.concurrent.Callable) $u5;

        buildFuture = interfaceinvoke $u3.<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r2);

        interfaceinvoke $u4.<java.util.List: boolean add(java.lang.Object)>(buildFuture);

        goto label1;

     label2:
        expectedLength = interfaceinvoke $u4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack26 = interfaceinvoke expectedLength.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label4;

        $stack36 = interfaceinvoke expectedLength.<java.util.Iterator: java.lang.Object next()>();

        projectBuild#5 = (java.util.concurrent.Future) $stack36;

        interfaceinvoke projectBuild#5.<java.util.concurrent.Future: java.lang.Object get()>();

        goto label3;

     label4:
        expectedLength#6 = 0;

        projectBuild#7 = 0;

     label5:
        $stack27 = virtualinvoke projectBuildList.<org.apache.maven.lifecycle.internal.ProjectBuildList: int size()>();

        if projectBuild#7 >= $stack27 goto label6;

        $stack31 = interfaceinvoke stringList.<java.util.List: java.lang.Object get(int)>(projectBuild#7);

        $stack32 = (java.lang.String) $stack31;

        $stack33 = virtualinvoke $stack32.<java.lang.String: int length()>();

        expectedLength#6 = expectedLength#6 + $stack33;

        projectBuild#7 = projectBuild#7 + 1;

        goto label5;

     label6:
        virtualinvoke $u2.<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void close()>();

        projectBuild#8 = virtualinvoke $u0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $u6 = new java.lang.String;

        specialinvoke $u6.<java.lang.String: void <init>(byte[])>(projectBuild#8);

        $stack30 = lengthof projectBuild#8;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(expectedLength#6, $stack30, $u6);

        return;
    }

    private org.apache.maven.lifecycle.internal.ProjectBuildList getProjectBuildList() throws org.apache.maven.plugin.InvalidPluginDescriptorException, org.apache.maven.plugin.version.PluginVersionResolutionException, org.apache.maven.plugin.PluginDescriptorParsingException, org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException, org.apache.maven.plugin.MojoNotFoundException, org.apache.maven.plugin.PluginNotFoundException, org.apache.maven.plugin.PluginResolutionException, org.apache.maven.lifecycle.LifecyclePhaseNotFoundException, org.apache.maven.lifecycle.LifecycleNotFoundException
    {
        org.apache.maven.execution.MavenSession session;
        org.apache.maven.lifecycle.internal.ProjectBuildList $stack3;
        ThreadOutputMuxerTest this;

        this := @this: ThreadOutputMuxerTest;

        session = staticinvoke <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.execution.MavenSession getMavenSession()>();

        $stack3 = staticinvoke <org.apache.maven.lifecycle.internal.stub.ProjectDependencyGraphStub: org.apache.maven.lifecycle.internal.ProjectBuildList getProjectBuildList(org.apache.maven.execution.MavenSession)>(session);

        return $stack3;
    }
}
