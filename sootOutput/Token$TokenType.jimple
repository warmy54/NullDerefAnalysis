public final class Token$TokenType extends java.lang.Object
{
    public static final byte CLASS_KW;
    public static final byte COVER_KW;
    public static final byte FUNC_KW;
    public static final byte ABSTRACT_KW;
    public static final byte EXTENDS_KW;
    public static final byte FROM_KW;
    public static final byte CONST_KW;
    public static final byte FINAL_KW;
    public static final byte STATIC_KW;
    public static final byte INCLUDE_KW;
    public static final byte IMPORT_KW;
    public static final byte USE_KW;
    public static final byte EXTERN_KW;
    public static final byte INLINE_KW;
    public static final byte PROTO_KW;
    public static final byte UNMANGLED_KW;
    public static final byte BREAK_KW;
    public static final byte CONTINUE_KW;
    public static final byte FALLTHR_KW;
    public static final byte OPERATOR_KW;
    public static final byte IF_KW;
    public static final byte ELSE_KW;
    public static final byte FOR_KW;
    public static final byte WHILE_KW;
    public static final byte DO_KW;
    public static final byte MATCH_KW;
    public static final byte CASE_KW;
    public static final byte AS_KW;
    public static final byte IN_KW;
    public static final byte VERSION_KW;
    public static final byte RETURN_KW;
    public static final byte TRUE;
    public static final byte FALSE;
    public static final byte NULL;
    public static final byte OOCDOC;
    public static final byte NAME;
    public static final byte BACKSLASH;
    public static final byte DOUBLE_BACKSLASH;
    public static final byte AT;
    public static final byte HASH;
    public static final byte TILDE;
    public static final byte COMMA;
    public static final byte DOT;
    public static final byte DOUBLE_DOT;
    public static final byte TRIPLE_DOT;
    public static final byte ARROW;
    public static final byte COLON;
    public static final byte LINESEP;
    public static final byte PLUS;
    public static final byte PLUS_ASSIGN;
    public static final byte MINUS;
    public static final byte MINUS_ASSIGN;
    public static final byte STAR;
    public static final byte STAR_ASSIGN;
    public static final byte SLASH;
    public static final byte SLASH_ASSIGN;
    public static final byte PERCENT;
    public static final byte BANG;
    public static final byte NOT_EQUALS;
    public static final byte QUEST;
    public static final byte GREATERTHAN;
    public static final byte LESSTHAN;
    public static final byte GREATERTHAN_EQUALS;
    public static final byte LESSTHAN_EQUALS;
    public static final byte ASSIGN;
    public static final byte DECL_ASSIGN;
    public static final byte EQUALS;
    public static final byte DOUBLE_AMPERSAND;
    public static final byte DOUBLE_PIPE;
    public static final byte AMPERSAND;
    public static final byte PIPE;
    public static final byte CHAR_LIT;
    public static final byte STRING_LIT;
    public static final byte DEC_INT;
    public static final byte HEX_INT;
    public static final byte OCT_INT;
    public static final byte BIN_INT;
    public static final byte DEC_FLOAT;
    public static final byte OPEN_PAREN;
    public static final byte CLOS_PAREN;
    public static final byte OPEN_BRACK;
    public static final byte CLOS_BRACK;
    public static final byte OPEN_SQUAR;
    public static final byte CLOS_SQUAR;
    public static final byte UNSIGNED;
    public static final byte SIGNED;
    public static final byte LONG;
    public static final byte STRUCT;
    public static final byte UNION;
    public static final byte BINARY_AND;
    public static final byte CARET;
    public static final byte DOUBLE_ARROW;
    public static final byte INTO_KW;

    public void <init>()
    {
        Token$TokenType this;

        this := @this: Token$TokenType;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <Token$TokenType: byte INTO_KW> = 96;

        <Token$TokenType: byte DOUBLE_ARROW> = 95;

        <Token$TokenType: byte CARET> = 94;

        <Token$TokenType: byte BINARY_AND> = 93;

        <Token$TokenType: byte UNION> = 92;

        <Token$TokenType: byte STRUCT> = 91;

        <Token$TokenType: byte LONG> = 90;

        <Token$TokenType: byte SIGNED> = 89;

        <Token$TokenType: byte UNSIGNED> = 88;

        <Token$TokenType: byte CLOS_SQUAR> = 87;

        <Token$TokenType: byte OPEN_SQUAR> = 86;

        <Token$TokenType: byte CLOS_BRACK> = 85;

        <Token$TokenType: byte OPEN_BRACK> = 84;

        <Token$TokenType: byte CLOS_PAREN> = 83;

        <Token$TokenType: byte OPEN_PAREN> = 82;

        <Token$TokenType: byte DEC_FLOAT> = 81;

        <Token$TokenType: byte BIN_INT> = 80;

        <Token$TokenType: byte OCT_INT> = 79;

        <Token$TokenType: byte HEX_INT> = 78;

        <Token$TokenType: byte DEC_INT> = 77;

        <Token$TokenType: byte STRING_LIT> = 76;

        <Token$TokenType: byte CHAR_LIT> = 75;

        <Token$TokenType: byte PIPE> = 74;

        <Token$TokenType: byte AMPERSAND> = 73;

        <Token$TokenType: byte DOUBLE_PIPE> = 72;

        <Token$TokenType: byte DOUBLE_AMPERSAND> = 71;

        <Token$TokenType: byte EQUALS> = 70;

        <Token$TokenType: byte DECL_ASSIGN> = 69;

        <Token$TokenType: byte ASSIGN> = 68;

        <Token$TokenType: byte LESSTHAN_EQUALS> = 67;

        <Token$TokenType: byte GREATERTHAN_EQUALS> = 66;

        <Token$TokenType: byte LESSTHAN> = 65;

        <Token$TokenType: byte GREATERTHAN> = 64;

        <Token$TokenType: byte QUEST> = 63;

        <Token$TokenType: byte NOT_EQUALS> = 62;

        <Token$TokenType: byte BANG> = 61;

        <Token$TokenType: byte PERCENT> = 60;

        <Token$TokenType: byte SLASH_ASSIGN> = 59;

        <Token$TokenType: byte SLASH> = 58;

        <Token$TokenType: byte STAR_ASSIGN> = 57;

        <Token$TokenType: byte STAR> = 56;

        <Token$TokenType: byte MINUS_ASSIGN> = 55;

        <Token$TokenType: byte MINUS> = 54;

        <Token$TokenType: byte PLUS_ASSIGN> = 53;

        <Token$TokenType: byte PLUS> = 52;

        <Token$TokenType: byte LINESEP> = 51;

        <Token$TokenType: byte COLON> = 50;

        <Token$TokenType: byte ARROW> = 49;

        <Token$TokenType: byte TRIPLE_DOT> = 48;

        <Token$TokenType: byte DOUBLE_DOT> = 47;

        <Token$TokenType: byte DOT> = 46;

        <Token$TokenType: byte COMMA> = 45;

        <Token$TokenType: byte TILDE> = 44;

        <Token$TokenType: byte HASH> = 43;

        <Token$TokenType: byte AT> = 42;

        <Token$TokenType: byte DOUBLE_BACKSLASH> = 41;

        <Token$TokenType: byte BACKSLASH> = 40;

        <Token$TokenType: byte NAME> = 39;

        <Token$TokenType: byte OOCDOC> = 38;

        <Token$TokenType: byte NULL> = 37;

        <Token$TokenType: byte FALSE> = 36;

        <Token$TokenType: byte TRUE> = 35;

        <Token$TokenType: byte RETURN_KW> = 34;

        <Token$TokenType: byte VERSION_KW> = 33;

        <Token$TokenType: byte IN_KW> = 32;

        <Token$TokenType: byte AS_KW> = 31;

        <Token$TokenType: byte CASE_KW> = 30;

        <Token$TokenType: byte MATCH_KW> = 29;

        <Token$TokenType: byte DO_KW> = 28;

        <Token$TokenType: byte WHILE_KW> = 27;

        <Token$TokenType: byte FOR_KW> = 26;

        <Token$TokenType: byte ELSE_KW> = 25;

        <Token$TokenType: byte IF_KW> = 24;

        <Token$TokenType: byte OPERATOR_KW> = 23;

        <Token$TokenType: byte FALLTHR_KW> = 22;

        <Token$TokenType: byte CONTINUE_KW> = 21;

        <Token$TokenType: byte BREAK_KW> = 20;

        <Token$TokenType: byte UNMANGLED_KW> = 19;

        <Token$TokenType: byte PROTO_KW> = 18;

        <Token$TokenType: byte INLINE_KW> = 17;

        <Token$TokenType: byte EXTERN_KW> = 16;

        <Token$TokenType: byte USE_KW> = 15;

        <Token$TokenType: byte IMPORT_KW> = 14;

        <Token$TokenType: byte INCLUDE_KW> = 13;

        <Token$TokenType: byte STATIC_KW> = 12;

        <Token$TokenType: byte FINAL_KW> = 11;

        <Token$TokenType: byte CONST_KW> = 10;

        <Token$TokenType: byte FROM_KW> = 6;

        <Token$TokenType: byte EXTENDS_KW> = 5;

        <Token$TokenType: byte ABSTRACT_KW> = 4;

        <Token$TokenType: byte FUNC_KW> = 3;

        <Token$TokenType: byte COVER_KW> = 2;

        <Token$TokenType: byte CLASS_KW> = 1;

        return;
    }
}
