public class Tokenizer$CharTuple extends java.lang.Object
{
    char first;
    byte firstType;
    char second;
    byte secondType;
    char third;
    byte thirdType;

    public void <init>(char, byte)
    {
        Tokenizer$CharTuple this;
        char first;
        byte firstType;
        org.ooc.frontend.model.Tokenizer$CharTuple $r0;

        this := @this: Tokenizer$CharTuple;

        first := @parameter0: char;

        firstType := @parameter1: byte;

        $r0 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        specialinvoke $r0.<org.ooc.frontend.model.Tokenizer$CharTuple: void <init>(char,byte,char,byte)>(first, firstType, 0, 0);

        return;
    }

    public void <init>(char, byte, char, byte)
    {
        Tokenizer$CharTuple this;
        char first, second;
        byte firstType, secondType;
        org.ooc.frontend.model.Tokenizer$CharTuple $r0;

        this := @this: Tokenizer$CharTuple;

        first := @parameter0: char;

        firstType := @parameter1: byte;

        second := @parameter2: char;

        secondType := @parameter3: byte;

        $r0 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        specialinvoke $r0.<org.ooc.frontend.model.Tokenizer$CharTuple: void <init>(char,byte,char,byte,char,byte)>(first, firstType, second, secondType, 0, 0);

        return;
    }

    public void <init>(char, byte, char, byte, char, byte)
    {
        Tokenizer$CharTuple this;
        char first, second, third;
        byte firstType, secondType, thirdType;
        org.ooc.frontend.model.Tokenizer$CharTuple $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: Tokenizer$CharTuple;

        first := @parameter0: char;

        firstType := @parameter1: byte;

        second := @parameter2: char;

        secondType := @parameter3: byte;

        third := @parameter4: char;

        thirdType := @parameter5: byte;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $r0.<org.ooc.frontend.model.Tokenizer$CharTuple: char first> = first;

        $r1 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $r1.<org.ooc.frontend.model.Tokenizer$CharTuple: byte firstType> = firstType;

        $r2 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $r2.<org.ooc.frontend.model.Tokenizer$CharTuple: char second> = second;

        $r3 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $r3.<org.ooc.frontend.model.Tokenizer$CharTuple: byte secondType> = secondType;

        $r4 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $r4.<org.ooc.frontend.model.Tokenizer$CharTuple: char third> = third;

        $r5 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $r5.<org.ooc.frontend.model.Tokenizer$CharTuple: byte thirdType> = thirdType;

        return;
    }

    public org.ooc.frontend.model.tokens.Token handle(int, char, org.ubi.SourceReader) throws java.io.EOFException
    {
        char c, $stack4, $stack6, $stack13, $stack14, $stack16, $stack23, $stack24;
        Tokenizer$CharTuple this;
        org.ubi.SourceReader reader;
        int index;
        boolean $stack9, $stack19;
        byte $stack27, $stack8, $stack18;
        org.ooc.frontend.model.tokens.Token $u0, $u1, $u2;
        org.ooc.frontend.model.Tokenizer$CharTuple $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: Tokenizer$CharTuple;

        index := @parameter0: int;

        c := @parameter1: char;

        reader := @parameter2: org.ubi.SourceReader;

        $r0 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack4 = $r0.<org.ooc.frontend.model.Tokenizer$CharTuple: char first>;

        if c == $stack4 goto label1;

        return null;

     label1:
        virtualinvoke reader.<org.ubi.SourceReader: char read()>();

        $r1 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack6 = $r1.<org.ooc.frontend.model.Tokenizer$CharTuple: char second>;

        if $stack6 == 0 goto label2;

        $stack9 = virtualinvoke reader.<org.ubi.SourceReader: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $r2 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack13 = $r2.<org.ooc.frontend.model.Tokenizer$CharTuple: char second>;

        $stack14 = virtualinvoke reader.<org.ubi.SourceReader: char peek()>();

        if $stack13 == $stack14 goto label3;

     label2:
        $u0 = new org.ooc.frontend.model.tokens.Token;

        $r3 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack8 = $r3.<org.ooc.frontend.model.Tokenizer$CharTuple: byte firstType>;

        specialinvoke $u0.<org.ooc.frontend.model.tokens.Token: void <init>(int,int,byte)>(index, 1, $stack8);

        return $u0;

     label3:
        virtualinvoke reader.<org.ubi.SourceReader: char read()>();

        $r4 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack16 = $r4.<org.ooc.frontend.model.Tokenizer$CharTuple: char third>;

        if $stack16 == 0 goto label4;

        $stack19 = virtualinvoke reader.<org.ubi.SourceReader: boolean hasNext()>();

        if $stack19 == 0 goto label4;

        $r5 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack23 = $r5.<org.ooc.frontend.model.Tokenizer$CharTuple: char third>;

        $stack24 = virtualinvoke reader.<org.ubi.SourceReader: char peek()>();

        if $stack23 == $stack24 goto label5;

     label4:
        $u1 = new org.ooc.frontend.model.tokens.Token;

        $r6 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack18 = $r6.<org.ooc.frontend.model.Tokenizer$CharTuple: byte secondType>;

        specialinvoke $u1.<org.ooc.frontend.model.tokens.Token: void <init>(int,int,byte)>(index, 2, $stack18);

        return $u1;

     label5:
        virtualinvoke reader.<org.ubi.SourceReader: char read()>();

        $u2 = new org.ooc.frontend.model.tokens.Token;

        $r7 = (org.ooc.frontend.model.Tokenizer$CharTuple) this;

        $stack27 = $r7.<org.ooc.frontend.model.Tokenizer$CharTuple: byte thirdType>;

        specialinvoke $u2.<org.ooc.frontend.model.tokens.Token: void <init>(int,int,byte)>(index, 3, $stack27);

        return $u2;
    }
}
