public class ToolchainsBuildingExceptionTest extends java.lang.Object
{
    private static final java.lang.String LS;

    public void <init>()
    {
        ToolchainsBuildingExceptionTest this;

        this := @this: ToolchainsBuildingExceptionTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testNoProblems()
    {
        org.apache.maven.toolchain.building.ToolchainsBuildingException $stack2;
        java.util.List $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack7;
        java.lang.String $stack6, $stack8, $stack9;
        ToolchainsBuildingExceptionTest this;

        this := @this: ToolchainsBuildingExceptionTest;

        $stack2 = new org.apache.maven.toolchain.building.ToolchainsBuildingException;

        $stack3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $stack2.<org.apache.maven.toolchain.building.ToolchainsBuildingException: void <init>(java.util.List)>($stack3);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 problems were encountered while building the effective toolchains");

        $stack6 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = virtualinvoke $stack2.<org.apache.maven.toolchain.building.ToolchainsBuildingException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        return;
    }

    public void testOneProblem()
    {
        org.apache.maven.building.ProblemCollector problemCollector;
        java.lang.Exception $stack4;
        org.apache.maven.building.Problem$Severity $stack5;
        org.apache.maven.toolchain.building.ToolchainsBuildingException $stack9;
        java.util.List $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack14, $stack15, $stack17;
        java.lang.String $stack13, $stack16, $stack18, $stack19;
        ToolchainsBuildingExceptionTest this;

        this := @this: ToolchainsBuildingExceptionTest;

        problemCollector = staticinvoke <org.apache.maven.building.ProblemCollectorFactory: org.apache.maven.building.ProblemCollector newInstance(java.util.List)>(null);

        $stack5 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        $stack4 = new java.lang.Exception;

        specialinvoke $stack4.<java.lang.Exception: void <init>()>();

        interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>($stack5, "MESSAGE", 3, 5, $stack4);

        $stack9 = new org.apache.maven.toolchain.building.ToolchainsBuildingException;

        $stack10 = interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: java.util.List getProblems()>();

        specialinvoke $stack9.<org.apache.maven.toolchain.building.ToolchainsBuildingException: void <init>(java.util.List)>($stack10);

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1 problem was encountered while building the effective toolchains");

        $stack13 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ERROR] MESSAGE @ line 3, column 5");

        $stack16 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = virtualinvoke $stack9.<org.apache.maven.toolchain.building.ToolchainsBuildingException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        return;
    }

    public void testUnknownPositionAndSource()
    {
        org.apache.maven.building.ProblemCollector problemCollector;
        java.lang.Exception $stack4;
        org.apache.maven.building.Problem$Severity $stack5;
        org.apache.maven.toolchain.building.ToolchainsBuildingException $stack9;
        java.util.List $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack14, $stack15, $stack17;
        java.lang.String $stack13, $stack16, $stack18, $stack19;
        ToolchainsBuildingExceptionTest this;

        this := @this: ToolchainsBuildingExceptionTest;

        problemCollector = staticinvoke <org.apache.maven.building.ProblemCollectorFactory: org.apache.maven.building.ProblemCollector newInstance(java.util.List)>(null);

        $stack5 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        $stack4 = new java.lang.Exception;

        specialinvoke $stack4.<java.lang.Exception: void <init>()>();

        interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>($stack5, "MESSAGE", -1, -1, $stack4);

        $stack9 = new org.apache.maven.toolchain.building.ToolchainsBuildingException;

        $stack10 = interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: java.util.List getProblems()>();

        specialinvoke $stack9.<org.apache.maven.toolchain.building.ToolchainsBuildingException: void <init>(java.util.List)>($stack10);

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1 problem was encountered while building the effective toolchains");

        $stack13 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ERROR] MESSAGE");

        $stack16 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = virtualinvoke $stack9.<org.apache.maven.toolchain.building.ToolchainsBuildingException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        return;
    }

    public void testUnknownPosition()
    {
        org.apache.maven.building.ProblemCollector problemCollector;
        java.lang.Exception $stack4;
        org.apache.maven.building.Problem$Severity $stack5;
        org.apache.maven.toolchain.building.ToolchainsBuildingException $stack9;
        java.util.List $stack10;
        java.lang.StringBuilder $stack11, $stack12, $stack14, $stack15, $stack17;
        java.lang.String $stack13, $stack16, $stack18, $stack19;
        ToolchainsBuildingExceptionTest this;

        this := @this: ToolchainsBuildingExceptionTest;

        problemCollector = staticinvoke <org.apache.maven.building.ProblemCollectorFactory: org.apache.maven.building.ProblemCollector newInstance(java.util.List)>(null);

        interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: void setSource(java.lang.String)>("SOURCE");

        $stack5 = <org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity ERROR>;

        $stack4 = new java.lang.Exception;

        specialinvoke $stack4.<java.lang.Exception: void <init>()>();

        interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>($stack5, "MESSAGE", -1, -1, $stack4);

        $stack9 = new org.apache.maven.toolchain.building.ToolchainsBuildingException;

        $stack10 = interfaceinvoke problemCollector.<org.apache.maven.building.ProblemCollector: java.util.List getProblems()>();

        specialinvoke $stack9.<org.apache.maven.toolchain.building.ToolchainsBuildingException: void <init>(java.util.List)>($stack10);

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1 problem was encountered while building the effective toolchains");

        $stack13 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ERROR] MESSAGE @ SOURCE");

        $stack16 = <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS>;

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = virtualinvoke $stack9.<org.apache.maven.toolchain.building.ToolchainsBuildingException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        return;
    }

    static void <clinit>()
    {
        java.lang.String $stack0;

        $stack0 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        <org.apache.maven.toolchain.building.ToolchainsBuildingExceptionTest: java.lang.String LS> = $stack0;

        return;
    }
}
