public abstract class UnaryOperation extends org.ooc.frontend.model.Expression
{
    org.ooc.frontend.model.Expression inner;

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        UnaryOperation this;
        org.ooc.frontend.model.tokens.Token startToken;
        org.ooc.frontend.model.Expression inner;
        org.ooc.frontend.model.UnaryOperation $r0;

        this := @this: UnaryOperation;

        inner := @parameter0: org.ooc.frontend.model.Expression;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Expression: void <init>(org.ooc.frontend.model.tokens.Token)>(startToken);

        $r0 = (org.ooc.frontend.model.UnaryOperation) this;

        $r0.<org.ooc.frontend.model.UnaryOperation: org.ooc.frontend.model.Expression inner> = inner;

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        UnaryOperation this;
        org.ooc.frontend.model.Expression $stack3, $stack4;
        org.ooc.frontend.model.UnaryOperation $r0, $r1;

        this := @this: UnaryOperation;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.UnaryOperation) this;

        $stack3 = $r0.<org.ooc.frontend.model.UnaryOperation: org.ooc.frontend.model.Expression inner>;

        if oldie != $stack3 goto label1;

        $stack4 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.UnaryOperation) this;

        $r1.<org.ooc.frontend.model.UnaryOperation: org.ooc.frontend.model.Expression inner> = $stack4;

        return 1;

     label1:
        return 0;
    }

    public org.ooc.frontend.model.Type getType()
    {
        UnaryOperation this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.Type $stack2;
        org.ooc.frontend.model.UnaryOperation $r0;

        this := @this: UnaryOperation;

        $r0 = (org.ooc.frontend.model.UnaryOperation) this;

        $stack1 = $r0.<org.ooc.frontend.model.UnaryOperation: org.ooc.frontend.model.Expression inner>;

        $stack2 = virtualinvoke $stack1.<org.ooc.frontend.model.Expression: org.ooc.frontend.model.Type getType()>();

        return $stack2;
    }

    public org.ooc.frontend.model.Expression getInner()
    {
        UnaryOperation this;
        org.ooc.frontend.model.Expression $stack1;
        org.ooc.frontend.model.UnaryOperation $r0;

        this := @this: UnaryOperation;

        $r0 = (org.ooc.frontend.model.UnaryOperation) this;

        $stack1 = $r0.<org.ooc.frontend.model.UnaryOperation: org.ooc.frontend.model.Expression inner>;

        return $stack1;
    }

    public void acceptChildren(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        UnaryOperation this;
        org.ooc.frontend.Visitor visitor;
        org.ooc.frontend.model.Expression $stack2;
        org.ooc.frontend.model.UnaryOperation $r0;

        this := @this: UnaryOperation;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.UnaryOperation) this;

        $stack2 = $r0.<org.ooc.frontend.model.UnaryOperation: org.ooc.frontend.model.Expression inner>;

        virtualinvoke $stack2.<org.ooc.frontend.model.Expression: void accept(org.ooc.frontend.Visitor)>(visitor);

        return;
    }

    public boolean hasChildren()
    {
        UnaryOperation this;

        this := @this: UnaryOperation;

        return 1;
    }

    public abstract org.ooc.frontend.model.OpDecl$OpType getOpType();
}
