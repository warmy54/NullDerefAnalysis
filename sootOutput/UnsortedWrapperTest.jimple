class UnsortedWrapperTest extends java.lang.Object
{

    void <init>()
    {
        UnsortedWrapperTest this;

        this := @this: UnsortedWrapperTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void testIsBefore()
    {
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack4;
        java.lang.UnsupportedOperationException thrown;
        java.lang.String $stack5;
        org.hamcrest.Matcher $stack6, $stack7;
        UnsortedWrapperTest this;

        this := @this: UnsortedWrapperTest;

        testMethod = staticinvoke <UnsortedWrapperTest$lambda_testIsBefore_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Ljava/lang/UnsupportedOperationException;", testMethod);

        thrown = (java.lang.UnsupportedOperationException) $stack4;

        $stack5 = virtualinvoke thrown.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $stack6 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Cannot be sorted");

        $stack7 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack5, $stack7);

        return;
    }

    private static void lambda$testIsBefore$0() throws java.lang.Throwable
    {
        sortpom.wrapper.content.UnsortedWrapper $stack0;

        $stack0 = new sortpom.wrapper.content.UnsortedWrapper;

        specialinvoke $stack0.<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>(null);

        virtualinvoke $stack0.<sortpom.wrapper.content.UnsortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>(null);

        return;
    }
}
