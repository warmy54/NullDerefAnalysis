public class UrlSourceTest extends java.lang.Object
{

    public void <init>()
    {
        UrlSourceTest this;

        this := @this: UrlSourceTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testUrlSource()
    {
        org.junit.jupiter.api.function.Executable $stack3;
        java.lang.Throwable $stack4;
        java.lang.NullPointerException e;
        java.lang.String $stack6;
        UrlSourceTest this;

        this := @this: UrlSourceTest;

        $stack3 = staticinvoke <UrlSourceTest$lambda_testUrlSource_0__309: org.junit.jupiter.api.function.Executable bootstrap$()>();

        $stack4 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/NullPointerException;", $stack3, "Should fail, since you must specify a url");

        e = (java.lang.NullPointerException) $stack4;

        $stack6 = virtualinvoke e.<java.lang.NullPointerException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("url cannot be null", $stack6);

        return;
    }

    public void testGetInputStream() throws java.lang.Exception
    {
        java.io.File $stack7;
        java.net.URI $stack8;
        java.net.URL txtFile;
        org.apache.maven.building.UrlSource $stack10;
        java.io.InputStream is;
        java.util.Scanner $stack12;
        java.lang.String $stack14;
        java.lang.Throwable $stack15, $stack16, $stack18, $stack19;
        UrlSourceTest this;

        this := @this: UrlSourceTest;

        $stack7 = new java.io.File;

        specialinvoke $stack7.<java.io.File: void <init>(java.lang.String)>("target/test-classes/source.txt");

        $stack8 = virtualinvoke $stack7.<java.io.File: java.net.URI toURI()>();

        txtFile = virtualinvoke $stack8.<java.net.URI: java.net.URL toURL()>();

        $stack10 = new org.apache.maven.building.UrlSource;

        specialinvoke $stack10.<org.apache.maven.building.UrlSource: void <init>(java.net.URL)>(txtFile);

        is = virtualinvoke $stack10.<org.apache.maven.building.UrlSource: java.io.InputStream getInputStream()>();

     label01:
        $stack12 = new java.util.Scanner;

        specialinvoke $stack12.<java.util.Scanner: void <init>(java.io.InputStream)>(is);

     label02:
        $stack14 = virtualinvoke $stack12.<java.util.Scanner: java.lang.String nextLine()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("Hello World!", $stack14);

     label03:
        virtualinvoke $stack12.<java.util.Scanner: void close()>();

        goto label09;

     label04:
        $stack19 := @caughtexception;

     label05:
        virtualinvoke $stack12.<java.util.Scanner: void close()>();

     label06:
        goto label08;

     label07:
        $stack18 := @caughtexception;

        virtualinvoke $stack19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack18);

     label08:
        throw $stack19;

     label09:
        if is == null goto label15;

        virtualinvoke is.<java.io.InputStream: void close()>();

        goto label15;

     label10:
        $stack16 := @caughtexception;

        if is == null goto label14;

     label11:
        virtualinvoke is.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $stack15 := @caughtexception;

        virtualinvoke $stack16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack15);

     label14:
        throw $stack16;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void testGetLocation() throws java.lang.Exception
    {
        java.io.File $stack3;
        java.net.URI $stack4;
        java.net.URL txtFile;
        org.apache.maven.building.UrlSource $stack6;
        java.lang.String $stack7, $stack8;
        UrlSourceTest this;

        this := @this: UrlSourceTest;

        $stack3 = new java.io.File;

        specialinvoke $stack3.<java.io.File: void <init>(java.lang.String)>("target/test-classes/source.txt");

        $stack4 = virtualinvoke $stack3.<java.io.File: java.net.URI toURI()>();

        txtFile = virtualinvoke $stack4.<java.net.URI: java.net.URL toURL()>();

        $stack6 = new org.apache.maven.building.UrlSource;

        specialinvoke $stack6.<org.apache.maven.building.UrlSource: void <init>(java.net.URL)>(txtFile);

        $stack7 = virtualinvoke txtFile.<java.net.URL: java.lang.String toExternalForm()>();

        $stack8 = virtualinvoke $stack6.<org.apache.maven.building.UrlSource: java.lang.String getLocation()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        return;
    }

    private static void lambda$testUrlSource$0() throws java.lang.Throwable
    {
        org.apache.maven.building.UrlSource $stack0;

        $stack0 = new org.apache.maven.building.UrlSource;

        specialinvoke $stack0.<org.apache.maven.building.UrlSource: void <init>(java.net.URL)>(null);

        return;
    }
}
