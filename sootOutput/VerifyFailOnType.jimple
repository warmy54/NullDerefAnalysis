public final enum class VerifyFailOnType extends java.lang.Enum
{
    public static final enum sortpom.parameter.VerifyFailOnType XMLELEMENTS;
    public static final enum sortpom.parameter.VerifyFailOnType STRICT;
    private static final sortpom.parameter.VerifyFailOnType[] $VALUES;

    public static sortpom.parameter.VerifyFailOnType[] values()
    {
        sortpom.parameter.VerifyFailOnType[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (sortpom.parameter.VerifyFailOnType[]) $stack1;

        return $stack2;
    }

    public static sortpom.parameter.VerifyFailOnType valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        sortpom.parameter.VerifyFailOnType $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lsortpom/parameter/VerifyFailOnType;", name);

        $stack2 = (sortpom.parameter.VerifyFailOnType) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        VerifyFailOnType this;
        java.lang.String l1;
        int l2;

        this := @this: VerifyFailOnType;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    static sortpom.parameter.VerifyFailOnType fromString(java.lang.String)
    {
        java.lang.String verifyFailOn;
        sortpom.parameter.VerifyFailOnType[] $stack1;
        java.util.stream.Stream $stack2, $stack4;
        java.util.function.Predicate $stack3;
        java.util.Optional $stack5;
        java.util.function.Supplier $stack6;
        java.lang.Object $stack7;
        sortpom.parameter.VerifyFailOnType $stack8;
        sortpom.exception.FailureException $u0;
        java.lang.Throwable $r0;

        verifyFailOn := @parameter0: java.lang.String;

        if verifyFailOn != null goto label1;

        $u0 = new sortpom.exception.FailureException;

        specialinvoke $u0.<sortpom.exception.FailureException: void <init>(java.lang.String)>("verifyFailOn must be either xmlElements or strict. Was: null");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        $stack1 = staticinvoke <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>();

        $stack2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($stack1);

        $stack3 = staticinvoke <VerifyFailOnType$lambda_fromString_0__309: java.util.function.Predicate bootstrap$(java.lang.String)>(verifyFailOn);

        $stack4 = interfaceinvoke $stack2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack3);

        $stack5 = interfaceinvoke $stack4.<java.util.stream.Stream: java.util.Optional findAny()>();

        $stack6 = staticinvoke <VerifyFailOnType$lambda_fromString_1__310: java.util.function.Supplier bootstrap$(java.lang.String)>(verifyFailOn);

        $stack7 = virtualinvoke $stack5.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>($stack6);

        $stack8 = (sortpom.parameter.VerifyFailOnType) $stack7;

        return $stack8;
    }

    private static sortpom.exception.FailureException lambda$fromString$1(java.lang.String)
    {
        sortpom.exception.FailureException $stack1;
        java.lang.StringBuilder $stack2, $stack3, $stack4;
        java.lang.String verifyFailOn, $stack5;

        verifyFailOn := @parameter0: java.lang.String;

        $stack1 = new sortpom.exception.FailureException;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("verifyFailOn must be either xmlElements or strict. Was: ");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(verifyFailOn);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack1.<sortpom.exception.FailureException: void <init>(java.lang.String)>($stack5);

        return $stack1;
    }

    private static boolean lambda$fromString$0(java.lang.String, sortpom.parameter.VerifyFailOnType)
    {
        sortpom.parameter.VerifyFailOnType e;
        java.lang.String $stack2, verifyFailOn;
        boolean $stack3;

        verifyFailOn := @parameter0: java.lang.String;

        e := @parameter1: sortpom.parameter.VerifyFailOnType;

        $stack2 = virtualinvoke e.<sortpom.parameter.VerifyFailOnType: java.lang.String toString()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(verifyFailOn);

        return $stack3;
    }

    static void <clinit>()
    {
        sortpom.parameter.VerifyFailOnType $stack0, $stack1, $stack3, $stack4;
        sortpom.parameter.VerifyFailOnType[] $stack2;

        $stack0 = new sortpom.parameter.VerifyFailOnType;

        specialinvoke $stack0.<sortpom.parameter.VerifyFailOnType: void <init>(java.lang.String,int)>("XMLELEMENTS", 0);

        <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType XMLELEMENTS> = $stack0;

        $stack1 = new sortpom.parameter.VerifyFailOnType;

        specialinvoke $stack1.<sortpom.parameter.VerifyFailOnType: void <init>(java.lang.String,int)>("STRICT", 1);

        <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType STRICT> = $stack1;

        $stack2 = newarray (sortpom.parameter.VerifyFailOnType)[2];

        $stack3 = <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType XMLELEMENTS>;

        $stack2[0] = $stack3;

        $stack4 = <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType STRICT>;

        $stack2[1] = $stack4;

        <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] $VALUES> = $stack2;

        return;
    }
}
