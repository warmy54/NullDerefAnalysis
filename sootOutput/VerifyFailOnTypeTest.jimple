class VerifyFailOnTypeTest extends java.lang.Object
{

    void <init>()
    {
        VerifyFailOnTypeTest this;

        this := @this: VerifyFailOnTypeTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void xmlElementsIgnoreCaseValueIsOk()
    {
        sortpom.parameter.PluginParameters$Builder $stack2, $stack3;
        sortpom.parameter.PluginParameters pluginParameters;
        sortpom.parameter.VerifyFailOnType $stack5, $stack6;
        VerifyFailOnTypeTest this;

        this := @this: VerifyFailOnTypeTest;

        $stack2 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack3 = virtualinvoke $stack2.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>("STOP", "XMLElements");

        pluginParameters = virtualinvoke $stack3.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $stack6 = <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType XMLELEMENTS>;

        $stack5 = pluginParameters.<sortpom.parameter.PluginParameters: sortpom.parameter.VerifyFailOnType verifyFailOn>;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack5);

        return;
    }

    void strictIgnoreCaseValueIsOk()
    {
        sortpom.parameter.PluginParameters$Builder $stack2, $stack3;
        sortpom.parameter.PluginParameters pluginParameters;
        sortpom.parameter.VerifyFailOnType $stack5, $stack6;
        VerifyFailOnTypeTest this;

        this := @this: VerifyFailOnTypeTest;

        $stack2 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack3 = virtualinvoke $stack2.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>("STOP", "stRIct");

        pluginParameters = virtualinvoke $stack3.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $stack6 = <sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType STRICT>;

        $stack5 = pluginParameters.<sortpom.parameter.PluginParameters: sortpom.parameter.VerifyFailOnType verifyFailOn>;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack5);

        return;
    }

    void verifyFailFaultyValues(java.lang.String)
    {
        java.lang.String value, $stack6, $stack10;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack5;
        sortpom.exception.FailureException thrown;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        org.hamcrest.Matcher $stack11, $stack12;
        VerifyFailOnTypeTest this;

        this := @this: VerifyFailOnTypeTest;

        value := @parameter0: java.lang.String;

        testMethod = staticinvoke <VerifyFailOnTypeTest$lambda_verifyFailFaultyValues_0__309: org.junit.jupiter.api.function.Executable bootstrap$(java.lang.String)>(value);

        $stack5 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack5;

        $stack6 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("verifyFailOn must be either xmlElements or strict. Was: ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>($stack10);

        $stack12 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack11);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($stack6, $stack12);

        return;
    }

    private static void lambda$verifyFailFaultyValues$0(java.lang.String) throws java.lang.Throwable
    {
        sortpom.parameter.PluginParameters$Builder $stack1, $stack2;
        java.lang.String value;

        value := @parameter0: java.lang.String;

        $stack1 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack2 = virtualinvoke $stack1.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>("STOP", value);

        virtualinvoke $stack2.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        return;
    }
}
