public final enum class VerifyFailType extends java.lang.Enum
{
    public static final enum sortpom.parameter.VerifyFailType SORT;
    public static final enum sortpom.parameter.VerifyFailType WARN;
    public static final enum sortpom.parameter.VerifyFailType STOP;
    private static final sortpom.parameter.VerifyFailType[] $VALUES;

    public static sortpom.parameter.VerifyFailType[] values()
    {
        sortpom.parameter.VerifyFailType[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (sortpom.parameter.VerifyFailType[]) $stack1;

        return $stack2;
    }

    public static sortpom.parameter.VerifyFailType valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        sortpom.parameter.VerifyFailType $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lsortpom/parameter/VerifyFailType;", name);

        $stack2 = (sortpom.parameter.VerifyFailType) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        VerifyFailType this;
        java.lang.String l1;
        int l2;

        this := @this: VerifyFailType;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    static sortpom.parameter.VerifyFailType fromString(java.lang.String)
    {
        java.lang.String verifyFail, $stack1, $stack3, $stack5, $stack11;
        boolean $stack2, $stack4, $stack6;
        java.lang.StringBuilder $stack9, $stack10, $u1;
        sortpom.parameter.VerifyFailType $stack12, $stack13, $stack14;
        sortpom.exception.FailureException $u0, $u2;
        java.lang.Throwable $r0, $r1;

        verifyFail := @parameter0: java.lang.String;

        if verifyFail != null goto label1;

        $u0 = new sortpom.exception.FailureException;

        specialinvoke $u0.<sortpom.exception.FailureException: void <init>(java.lang.String)>("verifyFail must be either SORT, WARN or STOP. Was: null");

        $r0 = (java.lang.Throwable) $u0;

        throw $r0;

     label1:
        $stack1 = "SORT";

        $stack2 = virtualinvoke $stack1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(verifyFail);

        if $stack2 == 0 goto label2;

        $stack14 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType SORT>;

        return $stack14;

     label2:
        $stack3 = "WARN";

        $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(verifyFail);

        if $stack4 == 0 goto label3;

        $stack13 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType WARN>;

        return $stack13;

     label3:
        $stack5 = "STOP";

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(verifyFail);

        if $stack6 == 0 goto label4;

        $stack12 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType STOP>;

        return $stack12;

     label4:
        $u2 = new sortpom.exception.FailureException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("verifyFail must be either SORT, WARN or STOP. Was: ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(verifyFail);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<sortpom.exception.FailureException: void <init>(java.lang.String)>($stack11);

        $r1 = (java.lang.Throwable) $u2;

        throw $r1;
    }

    static void <clinit>()
    {
        sortpom.parameter.VerifyFailType $stack0, $stack1, $stack2, $stack4, $stack5, $stack6;
        sortpom.parameter.VerifyFailType[] $stack3;

        $stack0 = new sortpom.parameter.VerifyFailType;

        specialinvoke $stack0.<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>("SORT", 0);

        <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType SORT> = $stack0;

        $stack1 = new sortpom.parameter.VerifyFailType;

        specialinvoke $stack1.<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>("WARN", 1);

        <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType WARN> = $stack1;

        $stack2 = new sortpom.parameter.VerifyFailType;

        specialinvoke $stack2.<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>("STOP", 2);

        <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType STOP> = $stack2;

        $stack3 = newarray (sortpom.parameter.VerifyFailType)[3];

        $stack4 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType SORT>;

        $stack3[0] = $stack4;

        $stack5 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType WARN>;

        $stack3[1] = $stack5;

        $stack6 = <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType STOP>;

        $stack3[2] = $stack6;

        <sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] $VALUES> = $stack3;

        return;
    }
}
