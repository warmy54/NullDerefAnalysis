public class VersionNodes$VersionAnd extends org.ooc.frontend.model.VersionNodes$VersionCouple
{

    public void <init>(org.ooc.frontend.model.VersionNodes$VersionNode, org.ooc.frontend.model.VersionNodes$VersionNode)
    {
        VersionNodes$VersionAnd this;
        org.ooc.frontend.model.VersionNodes$VersionNode left, right;

        this := @this: VersionNodes$VersionAnd;

        left := @parameter0: org.ooc.frontend.model.VersionNodes$VersionNode;

        right := @parameter1: org.ooc.frontend.model.VersionNodes$VersionNode;

        specialinvoke this.<org.ooc.frontend.model.VersionNodes$VersionCouple: void <init>(org.ooc.frontend.model.VersionNodes$VersionNode,org.ooc.frontend.model.VersionNodes$VersionNode)>(left, right);

        return;
    }

    public void accept(org.ooc.frontend.model.VersionNodes$VersionNodeVisitor) throws java.io.IOException
    {
        org.ooc.frontend.model.VersionNodes$VersionNodeVisitor visitor;
        VersionNodes$VersionAnd this;
        org.ooc.frontend.model.VersionNodes$VersionAnd $r0;

        this := @this: VersionNodes$VersionAnd;

        visitor := @parameter0: org.ooc.frontend.model.VersionNodes$VersionNodeVisitor;

        $r0 = (org.ooc.frontend.model.VersionNodes$VersionAnd) this;

        interfaceinvoke visitor.<org.ooc.frontend.model.VersionNodes$VersionNodeVisitor: void visit(org.ooc.frontend.model.VersionNodes$VersionAnd)>($r0);

        return;
    }

    public java.lang.String toString()
    {
        VersionNodes$VersionAnd this;
        org.ooc.frontend.model.VersionNodes$VersionNode $stack1, $stack2;
        java.lang.String $stack3;
        org.ooc.frontend.model.VersionNodes$VersionAnd $r0, $r1;

        this := @this: VersionNodes$VersionAnd;

        $r0 = (org.ooc.frontend.model.VersionNodes$VersionAnd) this;

        $stack2 = $r0.<org.ooc.frontend.model.VersionNodes$VersionAnd: org.ooc.frontend.model.VersionNodes$VersionNode left>;

        $r1 = (org.ooc.frontend.model.VersionNodes$VersionAnd) this;

        $stack1 = $r1.<org.ooc.frontend.model.VersionNodes$VersionAnd: org.ooc.frontend.model.VersionNodes$VersionNode right>;

        $stack3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.ooc.frontend.model.VersionNodes$VersionNode,org.ooc.frontend.model.VersionNodes$VersionNode)>($stack2, $stack1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 && \u0001");

        return $stack3;
    }

    public boolean isSatisfied(org.ooc.frontend.Target)
    {
        VersionNodes$VersionAnd this;
        org.ooc.frontend.Target target;
        org.ooc.frontend.model.VersionNodes$VersionNode $stack2, $stack4;
        boolean $stack3, $stack5, $stack6;
        org.ooc.frontend.model.VersionNodes$VersionAnd $r0, $r1;

        this := @this: VersionNodes$VersionAnd;

        target := @parameter0: org.ooc.frontend.Target;

        $r0 = (org.ooc.frontend.model.VersionNodes$VersionAnd) this;

        $stack2 = $r0.<org.ooc.frontend.model.VersionNodes$VersionAnd: org.ooc.frontend.model.VersionNodes$VersionNode left>;

        $stack3 = virtualinvoke $stack2.<org.ooc.frontend.model.VersionNodes$VersionNode: boolean isSatisfied(org.ooc.frontend.Target)>(target);

        if $stack3 == 0 goto label1;

        $r1 = (org.ooc.frontend.model.VersionNodes$VersionAnd) this;

        $stack4 = $r1.<org.ooc.frontend.model.VersionNodes$VersionAnd: org.ooc.frontend.model.VersionNodes$VersionNode right>;

        $stack5 = virtualinvoke $stack4.<org.ooc.frontend.model.VersionNodes$VersionNode: boolean isSatisfied(org.ooc.frontend.Target)>(target);

        if $stack5 == 0 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        return $stack6;
    }
}
