public class VersionNotFoundException extends java.lang.Exception
{
    private org.apache.maven.model.Dependency dependency;
    private java.lang.String projectId;
    private java.io.File pomFile;
    private org.apache.maven.artifact.versioning.InvalidVersionSpecificationException cause;

    public void <init>(java.lang.String, org.apache.maven.model.Dependency, java.io.File, org.apache.maven.artifact.versioning.InvalidVersionSpecificationException)
    {
        VersionNotFoundException this;
        java.lang.String projectId, $stack8, $stack11, $stack15;
        java.lang.StringBuilder $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack14, $u0;
        org.apache.maven.model.Dependency dependency;
        java.io.File pomFile;
        org.apache.maven.artifact.versioning.InvalidVersionSpecificationException cause;
        java.lang.Throwable $r0;
        org.apache.maven.repository.VersionNotFoundException $r1, $r2, $r3, $r4;

        this := @this: VersionNotFoundException;

        projectId := @parameter0: java.lang.String;

        dependency := @parameter1: org.apache.maven.model.Dependency;

        pomFile := @parameter2: java.io.File;

        cause := @parameter3: org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(projectId);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack8 = staticinvoke <org.apache.maven.repository.VersionNotFoundException: java.lang.String formatLocationInPom(org.apache.maven.model.Dependency)>(dependency);

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack11 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getVersion()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pom file ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(pomFile);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = (java.lang.Throwable) cause;

        specialinvoke this.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($stack15, $r0);

        $r1 = (org.apache.maven.repository.VersionNotFoundException) this;

        $r1.<org.apache.maven.repository.VersionNotFoundException: java.lang.String projectId> = projectId;

        $r2 = (org.apache.maven.repository.VersionNotFoundException) this;

        $r2.<org.apache.maven.repository.VersionNotFoundException: java.io.File pomFile> = pomFile;

        $r3 = (org.apache.maven.repository.VersionNotFoundException) this;

        $r3.<org.apache.maven.repository.VersionNotFoundException: org.apache.maven.artifact.versioning.InvalidVersionSpecificationException cause> = cause;

        $r4 = (org.apache.maven.repository.VersionNotFoundException) this;

        $r4.<org.apache.maven.repository.VersionNotFoundException: org.apache.maven.model.Dependency dependency> = dependency;

        return;
    }

    private static java.lang.String formatLocationInPom(org.apache.maven.model.Dependency)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack6;
        org.apache.maven.model.Dependency dependency;
        java.lang.String $stack3, $stack4, $stack5, $stack7;

        dependency := @parameter0: org.apache.maven.model.Dependency;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dependency: ");

        $stack3 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getGroupId()>();

        $stack4 = virtualinvoke dependency.<org.apache.maven.model.Dependency: java.lang.String getArtifactId()>();

        $stack5 = staticinvoke <org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>($stack3, $stack4);

        $stack6 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    public org.apache.maven.model.Dependency getDependency()
    {
        VersionNotFoundException this;
        org.apache.maven.model.Dependency $stack1;
        org.apache.maven.repository.VersionNotFoundException $r0;

        this := @this: VersionNotFoundException;

        $r0 = (org.apache.maven.repository.VersionNotFoundException) this;

        $stack1 = $r0.<org.apache.maven.repository.VersionNotFoundException: org.apache.maven.model.Dependency dependency>;

        return $stack1;
    }

    public java.lang.String getProjectId()
    {
        VersionNotFoundException this;
        java.lang.String $stack1;
        org.apache.maven.repository.VersionNotFoundException $r0;

        this := @this: VersionNotFoundException;

        $r0 = (org.apache.maven.repository.VersionNotFoundException) this;

        $stack1 = $r0.<org.apache.maven.repository.VersionNotFoundException: java.lang.String projectId>;

        return $stack1;
    }

    public java.io.File getPomFile()
    {
        VersionNotFoundException this;
        java.io.File $stack1;
        org.apache.maven.repository.VersionNotFoundException $r0;

        this := @this: VersionNotFoundException;

        $r0 = (org.apache.maven.repository.VersionNotFoundException) this;

        $stack1 = $r0.<org.apache.maven.repository.VersionNotFoundException: java.io.File pomFile>;

        return $stack1;
    }

    public org.apache.maven.artifact.versioning.InvalidVersionSpecificationException getCauseException()
    {
        VersionNotFoundException this;
        org.apache.maven.artifact.versioning.InvalidVersionSpecificationException $stack1;
        org.apache.maven.repository.VersionNotFoundException $r0;

        this := @this: VersionNotFoundException;

        $r0 = (org.apache.maven.repository.VersionNotFoundException) this;

        $stack1 = $r0.<org.apache.maven.repository.VersionNotFoundException: org.apache.maven.artifact.versioning.InvalidVersionSpecificationException cause>;

        return $stack1;
    }
}
