public class VersionRangeTest extends java.lang.Object
{
    private static final java.lang.String CHECK_NUM_RESTRICTIONS;
    private static final java.lang.String CHECK_UPPER_BOUND;
    private static final java.lang.String CHECK_UPPER_BOUND_INCLUSIVE;
    private static final java.lang.String CHECK_LOWER_BOUND;
    private static final java.lang.String CHECK_LOWER_BOUND_INCLUSIVE;
    private static final java.lang.String CHECK_VERSION_RECOMMENDATION;
    private static final java.lang.String CHECK_SELECTED_VERSION_KNOWN;
    private static final java.lang.String CHECK_SELECTED_VERSION;

    public void <init>()
    {
        VersionRangeTest this;

        this := @this: VersionRangeTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testRange() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException, org.apache.maven.artifact.versioning.OverConstrainedVersionException
    {
        int $stack8, $stack25, $stack38, $stack54, $stack70, $stack86, $stack100;
        java.lang.Object $stack9, $stack26, $stack39, $stack55, $stack71, $stack87, $stack101, $stack109;
        org.apache.maven.artifact.versioning.ArtifactVersion $stack10, $stack13, $stack16, $stack18, $stack21, $stack27, $stack29, $stack33, $stack41, $stack45, $stack48, $stack50, $stack57, $stack61, $stack64, $stack66, $stack73, $stack77, $stack80, $stack82, $stack89, $stack92, $stack94, $stack96, $stack102, $stack105, $stack108, $stack111, $stack114, $stack116, $stack118, $r0, $r1, $r2;
        boolean $stack11, $stack15, $stack17, $stack28, $stack30, $stack31, $stack43, $stack47, $stack49, $stack59, $stack63, $stack65, $stack75, $stack79, $stack81, $stack91, $stack93, $stack95, $stack103, $stack107, $stack113, $stack115, $stack117, $stack121, $stack124, $stack127;
        java.lang.String $stack14, $stack22, $stack34, $stack42, $stack46, $stack58, $stack62, $stack74, $stack78, $stack90, $stack106, $stack112;
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.VersionRange range;
        java.util.List restrictions;
        org.apache.maven.artifact.versioning.Restriction restriction;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $u0, $u1, $u2;

        this := @this: VersionRangeTest;

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.0]");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack8 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack8, "check number of restrictions");

        $stack9 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack9;

        $stack10 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack10, "check lower bound");

        $stack11 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack11, "check lower bound is inclusive");

        $stack13 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack14 = virtualinvoke $stack13.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack14, "check upper bound");

        $stack15 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack15, "check upper bound is inclusive");

        $stack16 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack16, "check version recommended");

        $stack17 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack17, "check selected version known");

        $stack18 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack18, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.0");

        $stack21 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack22 = virtualinvoke $stack21.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack22, "check version recommended");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack25 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack25, "check number of restrictions");

        $stack26 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack26;

        $stack27 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack27, "check lower bound");

        $stack28 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack28, "check lower bound is inclusive");

        $stack29 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack29, "check upper bound");

        $stack30 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack30, "check upper bound is inclusive");

        $stack31 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack31, "check selected version known");

        $stack33 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        $stack34 = virtualinvoke $stack33.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack34, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0]");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack38 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack38, "check number of restrictions");

        $stack39 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack39;

        $stack41 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack42 = virtualinvoke $stack41.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack42, "check lower bound");

        $stack43 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack43, "check lower bound is inclusive");

        $stack45 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack46 = virtualinvoke $stack45.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack46, "check upper bound");

        $stack47 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack47, "check upper bound is inclusive");

        $stack48 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack48, "check version recommended");

        $stack49 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack49, "check selected version known");

        $stack50 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack50, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.3]");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack54 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack54, "check number of restrictions");

        $stack55 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack55;

        $stack57 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack58 = virtualinvoke $stack57.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack58, "check lower bound");

        $stack59 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack59, "check lower bound is inclusive");

        $stack61 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack62 = virtualinvoke $stack61.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack62, "check upper bound");

        $stack63 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack63, "check upper bound is inclusive");

        $stack64 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack64, "check version recommended");

        $stack65 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack65, "check selected version known");

        $stack66 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack66, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,2.0)");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack70 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack70, "check number of restrictions");

        $stack71 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack71;

        $stack73 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack74 = virtualinvoke $stack73.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack74, "check lower bound");

        $stack75 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack75, "check lower bound is inclusive");

        $stack77 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack78 = virtualinvoke $stack77.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("2.0", $stack78, "check upper bound");

        $stack79 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack79, "check upper bound is inclusive");

        $stack80 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack80, "check version recommended");

        $stack81 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack81, "check selected version known");

        $stack82 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack82, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.5,)");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack86 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack86, "check number of restrictions");

        $stack87 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack87;

        $stack89 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack90 = virtualinvoke $stack89.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.5", $stack90, "check lower bound");

        $stack91 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack91, "check lower bound is inclusive");

        $stack92 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack92, "check upper bound");

        $stack93 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack93, "check upper bound is inclusive");

        $stack94 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack94, "check version recommended");

        $stack95 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack95, "check selected version known");

        $stack96 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack96, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.0],[1.2,)");

        restrictions = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack100 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack100, "check number of restrictions");

        $stack101 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack101;

        $stack102 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack102, "check lower bound");

        $stack103 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack103, "check lower bound is inclusive");

        $stack105 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack106 = virtualinvoke $stack105.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack106, "check upper bound");

        $stack107 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack107, "check upper bound is inclusive");

        $stack108 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack108, "check version recommended");

        $stack109 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack109;

        $stack111 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack112 = virtualinvoke $stack111.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack112, "check lower bound");

        $stack113 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack113, "check lower bound is inclusive");

        $stack114 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack114, "check upper bound");

        $stack115 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack115, "check upper bound is inclusive");

        $stack116 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack116, "check version recommended");

        $stack117 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack117, "check selected version known");

        $stack118 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>(null);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack118, "check selected version");

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,)");

        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.0-SNAPSHOT");

        $r0 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack121 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack121);

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.1-SNAPSHOT]");

        $u1 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.1-SNAPSHOT");

        $r1 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u1;

        $stack124 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack124);

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[5.0.9.0,5.0.10.0)");

        $u2 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u2.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("5.0.9.0");

        $r2 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u2;

        $stack127 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack127);

        return;
    }

    public void testInvalidRanges()
    {
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.VersionRangeTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: VersionRangeTest;

        $r0 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r0.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("(1.0)");

        $r1 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r1.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("[1.0)");

        $r2 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r2.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("(1.0]");

        $r3 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r3.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("(1.0,1.0]");

        $r4 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r4.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("[1.0,1.0)");

        $r5 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r5.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("(1.0,1.0)");

        $r6 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r6.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("[1.1,1.0]");

        $r7 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r7.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("[1.0,1.2),1.3");

        $r8 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r8.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("[1.0,1.2),(1.1,1.3]");

        $r9 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r9.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("[1.1,1.3),(1.0,1.2]");

        $r10 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        specialinvoke $r10.<org.apache.maven.artifact.versioning.VersionRangeTest: void checkInvalidRange(java.lang.String)>("(1.1,1.2],[1.0,1.1)");

        return;
    }

    public void testIntersections() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        org.apache.maven.artifact.versioning.ArtifactVersion $stack10, $stack16, $stack18, $stack22, $stack28, $stack30, $stack36, $stack43, $stack46, $stack52, $stack59, $stack62, $stack68, $stack75, $stack79, $stack85, $stack91, $stack94, $stack99, $stack105, $stack108, $stack114, $stack120, $stack123, $stack130, $stack136, $stack139, $stack145, $stack150, $stack153, $stack159, $stack164, $stack167, $stack174, $stack180, $stack183, $stack188, $stack191, $stack196, $stack201, $stack204, $stack209, $stack212, $stack217, $stack222, $stack225, $stack230, $stack233, $stack238, $stack244, $stack248, $stack254, $stack260, $stack264, $stack270, $stack276, $stack280, $stack286, $stack292, $stack296, $stack302, $stack308, $stack312, $stack318, $stack324, $stack328, $stack334, $stack340, $stack344, $stack350, $stack356, $stack360, $stack366, $stack373, $stack379, $stack383, $stack389, $stack395, $stack399, $stack405, $stack411, $stack415, $stack420, $stack424, $stack430, $stack436, $stack440, $stack445, $stack449, $stack455, $stack461, $stack465, $stack470, $stack474, $stack480, $stack486, $stack490, $stack495, $stack499, $stack505, $stack512, $stack519, $stack526, $stack532, $stack536, $stack541, $stack545, $stack551, $stack557, $stack561, $stack566, $stack570, $stack575, $stack579, $stack585, $stack591, $stack595, $stack600, $stack604, $stack609, $stack613, $stack620, $stack628;
        java.lang.String $stack11, $stack23, $stack37, $stack44, $stack53, $stack60, $stack69, $stack76, $stack80, $stack92, $stack106, $stack115, $stack124, $stack131, $stack140, $stack154, $stack168, $stack175, $stack184, $stack189, $stack205, $stack210, $stack226, $stack231, $stack245, $stack249, $stack261, $stack265, $stack277, $stack281, $stack293, $stack297, $stack309, $stack313, $stack325, $stack329, $stack341, $stack345, $stack357, $stack361, $stack380, $stack384, $stack396, $stack400, $stack412, $stack416, $stack421, $stack425, $stack437, $stack441, $stack446, $stack450, $stack462, $stack466, $stack471, $stack475, $stack487, $stack491, $stack496, $stack500, $stack533, $stack537, $stack542, $stack546, $stack558, $stack562, $stack567, $stack571, $stack576, $stack580, $stack592, $stack596, $stack601, $stack605, $stack610, $stack614;
        int $stack14, $stack26, $stack40, $stack56, $stack72, $stack88, $stack102, $stack118, $stack134, $stack148, $stack162, $stack178, $stack199, $stack220, $stack241, $stack257, $stack273, $stack289, $stack305, $stack321, $stack337, $stack353, $stack369, $stack376, $stack392, $stack408, $stack433, $stack458, $stack483, $stack508, $stack515, $stack522, $stack529, $stack554, $stack588, $stack623, $stack631;
        java.lang.Object $stack15, $stack27, $stack41, $stack57, $stack73, $stack89, $stack103, $stack119, $stack135, $stack149, $stack163, $stack179, $stack186, $stack200, $stack207, $stack221, $stack228, $stack242, $stack258, $stack274, $stack290, $stack306, $stack322, $stack338, $stack354, $stack377, $stack393, $stack409, $stack418, $stack434, $stack443, $stack459, $stack468, $stack484, $stack493, $stack530, $stack539, $stack555, $stack564, $stack573, $stack589, $stack598, $stack607;
        boolean $stack17, $stack19, $stack29, $stack31, $stack45, $stack47, $stack61, $stack63, $stack77, $stack81, $stack93, $stack95, $stack107, $stack109, $stack121, $stack125, $stack137, $stack141, $stack151, $stack155, $stack165, $stack169, $stack181, $stack185, $stack190, $stack192, $stack202, $stack206, $stack211, $stack213, $stack223, $stack227, $stack232, $stack234, $stack246, $stack250, $stack262, $stack266, $stack278, $stack282, $stack294, $stack298, $stack310, $stack314, $stack326, $stack330, $stack342, $stack346, $stack358, $stack362, $stack381, $stack385, $stack397, $stack401, $stack413, $stack417, $stack422, $stack426, $stack438, $stack442, $stack447, $stack451, $stack463, $stack467, $stack472, $stack476, $stack488, $stack492, $stack497, $stack501, $stack534, $stack538, $stack543, $stack547, $stack559, $stack563, $stack568, $stack572, $stack577, $stack581, $stack593, $stack597, $stack602, $stack606, $stack611, $stack615;
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.VersionRange range1, range2, mergedRange;
        java.util.List restrictions;
        org.apache.maven.artifact.versioning.Restriction restriction;

        this := @this: VersionRangeTest;

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.0");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack10 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack11 = virtualinvoke $stack10.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack11, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack14 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack14, "check number of restrictions");

        $stack15 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack15;

        $stack16 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack16, "check lower bound");

        $stack17 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack17, "check lower bound is inclusive");

        $stack18 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack18, "check upper bound");

        $stack19 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack19, "check upper bound is inclusive");

        mergedRange = virtualinvoke range2.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range1);

        $stack22 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack23 = virtualinvoke $stack22.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack23, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack26 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack26, "check number of restrictions");

        $stack27 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack27;

        $stack28 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack28, "check lower bound");

        $stack29 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack29, "check lower bound is inclusive");

        $stack30 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack30, "check upper bound");

        $stack31 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack31, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack36 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack37 = virtualinvoke $stack36.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack37, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack40 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack40, "check number of restrictions");

        $stack41 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack41;

        $stack43 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack44 = virtualinvoke $stack43.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack44, "check lower bound");

        $stack45 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack45, "check lower bound is inclusive");

        $stack46 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack46, "check upper bound");

        $stack47 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack47, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack52 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack53 = virtualinvoke $stack52.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack53, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack56 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack56, "check number of restrictions");

        $stack57 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack57;

        $stack59 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack60 = virtualinvoke $stack59.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack60, "check lower bound");

        $stack61 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack61, "check lower bound is inclusive");

        $stack62 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack62, "check upper bound");

        $stack63 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack63, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack68 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack69 = virtualinvoke $stack68.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack69, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack72 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack72, "check number of restrictions");

        $stack73 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack73;

        $stack75 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack76 = virtualinvoke $stack75.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack76, "check lower bound");

        $stack77 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack77, "check lower bound is inclusive");

        $stack79 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack80 = virtualinvoke $stack79.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack80, "check upper bound");

        $stack81 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack81, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.1,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack85 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack85, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack88 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack88, "check number of restrictions");

        $stack89 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack89;

        $stack91 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack92 = virtualinvoke $stack91.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack92, "check lower bound");

        $stack93 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack93, "check lower bound is inclusive");

        $stack94 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack94, "check upper bound");

        $stack95 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack95, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack99 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack99, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack102 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack102, "check number of restrictions");

        $stack103 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack103;

        $stack105 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack106 = virtualinvoke $stack105.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack106, "check lower bound");

        $stack107 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack107, "check lower bound is inclusive");

        $stack108 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack108, "check upper bound");

        $stack109 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack109, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.2]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack114 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack115 = virtualinvoke $stack114.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack115, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack118 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack118, "check number of restrictions");

        $stack119 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack119;

        $stack120 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack120, "check lower bound");

        $stack121 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack121, "check lower bound is inclusive");

        $stack123 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack124 = virtualinvoke $stack123.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack124, "check upper bound");

        $stack125 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack125, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.1]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack130 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack131 = virtualinvoke $stack130.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack131, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack134 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack134, "check number of restrictions");

        $stack135 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack135;

        $stack136 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack136, "check lower bound");

        $stack137 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack137, "check lower bound is inclusive");

        $stack139 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack140 = virtualinvoke $stack139.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack140, "check upper bound");

        $stack141 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack141, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.1)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack145 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack145, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack148 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack148, "check number of restrictions");

        $stack149 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack149;

        $stack150 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack150, "check lower bound");

        $stack151 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack151, "check lower bound is inclusive");

        $stack153 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack154 = virtualinvoke $stack153.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack154, "check upper bound");

        $stack155 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack155, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.0]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack159 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack159, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack162 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack162, "check number of restrictions");

        $stack163 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack163;

        $stack164 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack164, "check lower bound");

        $stack165 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack165, "check lower bound is inclusive");

        $stack167 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack168 = virtualinvoke $stack167.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack168, "check upper bound");

        $stack169 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack169, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.0], [1.1,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.2");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack174 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        $stack175 = virtualinvoke $stack174.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack175, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack178 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack178, "check number of restrictions");

        $stack179 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack179;

        $stack180 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack180, "check lower bound");

        $stack181 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack181, "check lower bound is inclusive");

        $stack183 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack184 = virtualinvoke $stack183.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack184, "check upper bound");

        $stack185 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack185, "check upper bound is inclusive");

        $stack186 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack186;

        $stack188 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack189 = virtualinvoke $stack188.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack189, "check lower bound");

        $stack190 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack190, "check lower bound is inclusive");

        $stack191 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack191, "check upper bound");

        $stack192 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack192, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.0], [1.1,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.0.5");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack196 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack196, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack199 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack199, "check number of restrictions");

        $stack200 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack200;

        $stack201 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack201, "check lower bound");

        $stack202 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack202, "check lower bound is inclusive");

        $stack204 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack205 = virtualinvoke $stack204.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.0", $stack205, "check upper bound");

        $stack206 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack206, "check upper bound is inclusive");

        $stack207 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack207;

        $stack209 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack210 = virtualinvoke $stack209.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack210, "check lower bound");

        $stack211 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack211, "check lower bound is inclusive");

        $stack212 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack212, "check upper bound");

        $stack213 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack213, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.1), (1.1,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.1");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack217 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack217, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack220 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack220, "check number of restrictions");

        $stack221 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack221;

        $stack222 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack222, "check lower bound");

        $stack223 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack223, "check lower bound is inclusive");

        $stack225 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack226 = virtualinvoke $stack225.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack226, "check upper bound");

        $stack227 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack227, "check upper bound is inclusive");

        $stack228 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack228;

        $stack230 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack231 = virtualinvoke $stack230.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack231, "check lower bound");

        $stack232 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack232, "check lower bound is inclusive");

        $stack233 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack233, "check upper bound");

        $stack234 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack234, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.3]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.1,)");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack238 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack238, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack241 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack241, "check number of restrictions");

        $stack242 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack242;

        $stack244 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack245 = virtualinvoke $stack244.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack245, "check lower bound");

        $stack246 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack246, "check lower bound is inclusive");

        $stack248 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack249 = virtualinvoke $stack248.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack249, "check upper bound");

        $stack250 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack250, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.3)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.3]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack254 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack254, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack257 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack257, "check number of restrictions");

        $stack258 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack258;

        $stack260 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack261 = virtualinvoke $stack260.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack261, "check lower bound");

        $stack262 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack262, "check lower bound is inclusive");

        $stack264 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack265 = virtualinvoke $stack264.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack265, "check upper bound");

        $stack266 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack266, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.3]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,)");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack270 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack270, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack273 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack273, "check number of restrictions");

        $stack274 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack274;

        $stack276 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack277 = virtualinvoke $stack276.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack277, "check lower bound");

        $stack278 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack278, "check lower bound is inclusive");

        $stack280 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack281 = virtualinvoke $stack280.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack281, "check upper bound");

        $stack282 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack282, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.3]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack286 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack286, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack289 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack289, "check number of restrictions");

        $stack290 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack290;

        $stack292 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack293 = virtualinvoke $stack292.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack293, "check lower bound");

        $stack294 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack294, "check lower bound is inclusive");

        $stack296 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack297 = virtualinvoke $stack296.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack297, "check upper bound");

        $stack298 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack298, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.2,1.3]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack302 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack302, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack305 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack305, "check number of restrictions");

        $stack306 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack306;

        $stack308 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack309 = virtualinvoke $stack308.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack309, "check lower bound");

        $stack310 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack310, "check lower bound is inclusive");

        $stack312 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack313 = virtualinvoke $stack312.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack313, "check upper bound");

        $stack314 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack314, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.2,1.3)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack318 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack318, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack321 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack321, "check number of restrictions");

        $stack322 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack322;

        $stack324 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack325 = virtualinvoke $stack324.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack325, "check lower bound");

        $stack326 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack326, "check lower bound is inclusive");

        $stack328 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack329 = virtualinvoke $stack328.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack329, "check upper bound");

        $stack330 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack330, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.3)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack334 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack334, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack337 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack337, "check number of restrictions");

        $stack338 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack338;

        $stack340 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack341 = virtualinvoke $stack340.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack341, "check lower bound");

        $stack342 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack342, "check lower bound is inclusive");

        $stack344 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack345 = virtualinvoke $stack344.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack345, "check upper bound");

        $stack346 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack346, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.1]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack350 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack350, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack353 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack353, "check number of restrictions");

        $stack354 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack354;

        $stack356 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack357 = virtualinvoke $stack356.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack357, "check lower bound");

        $stack358 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack358, "check lower bound is inclusive");

        $stack360 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack361 = virtualinvoke $stack360.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack361, "check upper bound");

        $stack362 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack362, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.1)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack366 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack366, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack369 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack369, "check number of restrictions");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack373 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack373, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack376 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack376, "check number of restrictions");

        $stack377 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack377;

        $stack379 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack380 = virtualinvoke $stack379.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack380, "check lower bound");

        $stack381 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack381, "check lower bound is inclusive");

        $stack383 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack384 = virtualinvoke $stack383.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack384, "check upper bound");

        $stack385 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack385, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack389 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack389, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack392 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack392, "check number of restrictions");

        $stack393 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack393;

        $stack395 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack396 = virtualinvoke $stack395.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack396, "check lower bound");

        $stack397 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack397, "check lower bound is inclusive");

        $stack399 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack400 = virtualinvoke $stack399.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack400, "check upper bound");

        $stack401 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack401, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack405 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack405, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack408 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack408, "check number of restrictions");

        $stack409 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack409;

        $stack411 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack412 = virtualinvoke $stack411.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack412, "check lower bound");

        $stack413 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack413, "check lower bound is inclusive");

        $stack415 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack416 = virtualinvoke $stack415.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack416, "check upper bound");

        $stack417 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack417, "check upper bound is inclusive");

        $stack418 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack418;

        $stack420 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack421 = virtualinvoke $stack420.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack421, "check lower bound");

        $stack422 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack422, "check lower bound is inclusive");

        $stack424 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack425 = virtualinvoke $stack424.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack425, "check upper bound");

        $stack426 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack426, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2),(1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack430 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack430, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack433 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack433, "check number of restrictions");

        $stack434 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack434;

        $stack436 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack437 = virtualinvoke $stack436.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack437, "check lower bound");

        $stack438 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack438, "check lower bound is inclusive");

        $stack440 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack441 = virtualinvoke $stack440.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack441, "check upper bound");

        $stack442 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack442, "check upper bound is inclusive");

        $stack443 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack443;

        $stack445 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack446 = virtualinvoke $stack445.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack446, "check lower bound");

        $stack447 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack447, "check lower bound is inclusive");

        $stack449 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack450 = virtualinvoke $stack449.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack450, "check upper bound");

        $stack451 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack451, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.1,1.4)");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack455 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack455, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack458 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack458, "check number of restrictions");

        $stack459 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack459;

        $stack461 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack462 = virtualinvoke $stack461.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack462, "check lower bound");

        $stack463 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack463, "check lower bound is inclusive");

        $stack465 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack466 = virtualinvoke $stack465.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack466, "check upper bound");

        $stack467 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack467, "check upper bound is inclusive");

        $stack468 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack468;

        $stack470 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack471 = virtualinvoke $stack470.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack471, "check lower bound");

        $stack472 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack472, "check lower bound is inclusive");

        $stack474 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack475 = virtualinvoke $stack474.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack475, "check upper bound");

        $stack476 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack476, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2),(1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.1,1.4)");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack480 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack480, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack483 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack483, "check number of restrictions");

        $stack484 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack484;

        $stack486 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack487 = virtualinvoke $stack486.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack487, "check lower bound");

        $stack488 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack488, "check lower bound is inclusive");

        $stack490 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack491 = virtualinvoke $stack490.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack491, "check upper bound");

        $stack492 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack492, "check upper bound is inclusive");

        $stack493 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack493;

        $stack495 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack496 = virtualinvoke $stack495.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack496, "check lower bound");

        $stack497 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack497, "check lower bound is inclusive");

        $stack499 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack500 = virtualinvoke $stack499.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack500, "check upper bound");

        $stack501 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack501, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.1),(1.4,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack505 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack505, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack508 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack508, "check number of restrictions");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(,1.1],[1.4,)");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("(1.1,1.4)");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack512 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack512, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack515 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack515, "check number of restrictions");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[,1.1],[1.4,]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.3]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack519 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack519, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack522 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack522, "check number of restrictions");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4],[1.6,]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack526 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack526, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack529 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(2, $stack529, "check number of restrictions");

        $stack530 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack530;

        $stack532 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack533 = virtualinvoke $stack532.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack533, "check lower bound");

        $stack534 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack534, "check lower bound is inclusive");

        $stack536 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack537 = virtualinvoke $stack536.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack537, "check upper bound");

        $stack538 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack538, "check upper bound is inclusive");

        $stack539 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack539;

        $stack541 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack542 = virtualinvoke $stack541.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack542, "check lower bound");

        $stack543 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack543, "check lower bound is inclusive");

        $stack545 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack546 = virtualinvoke $stack545.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack546, "check upper bound");

        $stack547 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack547, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.5]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4],[1.5,]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack551 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack551, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack554 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(3, $stack554, "check number of restrictions");

        $stack555 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack555;

        $stack557 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack558 = virtualinvoke $stack557.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack558, "check lower bound");

        $stack559 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack559, "check lower bound is inclusive");

        $stack561 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack562 = virtualinvoke $stack561.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack562, "check upper bound");

        $stack563 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack563, "check upper bound is inclusive");

        $stack564 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack564;

        $stack566 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack567 = virtualinvoke $stack566.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack567, "check lower bound");

        $stack568 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack568, "check lower bound is inclusive");

        $stack570 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack571 = virtualinvoke $stack570.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack571, "check upper bound");

        $stack572 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack572, "check upper bound is inclusive");

        $stack573 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(2);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack573;

        $stack575 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack576 = virtualinvoke $stack575.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.5", $stack576, "check lower bound");

        $stack577 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack577, "check lower bound is inclusive");

        $stack579 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack580 = virtualinvoke $stack579.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.5", $stack580, "check upper bound");

        $stack581 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack581, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2],[1.3,1.7]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.1,1.4],[1.5,1.6]");

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack585 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack585, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack588 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(3, $stack588, "check number of restrictions");

        $stack589 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(0);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack589;

        $stack591 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack592 = virtualinvoke $stack591.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.1", $stack592, "check lower bound");

        $stack593 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack593, "check lower bound is inclusive");

        $stack595 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack596 = virtualinvoke $stack595.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.2", $stack596, "check upper bound");

        $stack597 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack597, "check upper bound is inclusive");

        $stack598 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(1);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack598;

        $stack600 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack601 = virtualinvoke $stack600.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.3", $stack601, "check lower bound");

        $stack602 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack602, "check lower bound is inclusive");

        $stack604 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack605 = virtualinvoke $stack604.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.4", $stack605, "check upper bound");

        $stack606 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack606, "check upper bound is inclusive");

        $stack607 = interfaceinvoke restrictions.<java.util.List: java.lang.Object get(int)>(2);

        restriction = (org.apache.maven.artifact.versioning.Restriction) $stack607;

        $stack609 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getLowerBound()>();

        $stack610 = virtualinvoke $stack609.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.5", $stack610, "check lower bound");

        $stack611 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isLowerBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack611, "check lower bound is inclusive");

        $stack613 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: org.apache.maven.artifact.versioning.ArtifactVersion getUpperBound()>();

        $stack614 = virtualinvoke $stack613.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>("1.6", $stack614, "check upper bound");

        $stack615 = virtualinvoke restriction.<org.apache.maven.artifact.versioning.Restriction: boolean isUpperBoundInclusive()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean,java.lang.String)>($stack615, "check upper bound is inclusive");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[,1.1],[1.4,]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.3]");

        range1 = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack620 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack620, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack623 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack623, "check number of restrictions");

        range1 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[,1.1],[1.4,]");

        range2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.2,1.3]");

        range2 = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        mergedRange = virtualinvoke range1.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>(range2);

        $stack628 = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getRecommendedVersion()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object,java.lang.String)>($stack628, "check version recommended");

        restrictions = virtualinvoke mergedRange.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack631 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack631, "check number of restrictions");

        return;
    }

    public void testReleaseRangeBoundsContainsSnapshots() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        org.apache.maven.artifact.versioning.VersionRange range;
        boolean $stack4, $stack6, $stack8;
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $u0, $u1, $u2;
        org.apache.maven.artifact.versioning.ArtifactVersion $r0, $r1, $r2;

        this := @this: VersionRangeTest;

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2]");

        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.1-SNAPSHOT");

        $r0 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack4 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

        $u1 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.2-SNAPSHOT");

        $r1 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u1;

        $stack6 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        $u2 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u2.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.0-SNAPSHOT");

        $r2 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u2;

        $stack8 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testSnapshotRangeBoundsCanContainSnapshots() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        boolean $stack4, $stack6, $stack9, $stack11;
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.VersionRange range;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $u0, $u1, $u2, $u3;
        org.apache.maven.artifact.versioning.ArtifactVersion $r0, $r1, $r2, $r3;

        this := @this: VersionRangeTest;

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2-SNAPSHOT]");

        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.1-SNAPSHOT");

        $r0 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack4 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

        $u1 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u1.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.2-SNAPSHOT");

        $r1 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u1;

        $stack6 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack6);

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0-SNAPSHOT,1.2]");

        $u2 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u2.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.0-SNAPSHOT");

        $r2 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u2;

        $stack9 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r2);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack9);

        $u3 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u3.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.1-SNAPSHOT");

        $r3 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u3;

        $stack11 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testSnapshotSoftVersionCanContainSnapshot() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        org.apache.maven.artifact.versioning.VersionRange range;
        boolean $stack4;
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $u0;
        org.apache.maven.artifact.versioning.ArtifactVersion $r0;

        this := @this: VersionRangeTest;

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.0-SNAPSHOT");

        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("1.0-SNAPSHOT");

        $r0 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack4 = virtualinvoke range.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>($r0);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

        return;
    }

    private void checkInvalidRange(java.lang.String)
    {
        java.lang.String version, $stack8;
        org.junit.jupiter.api.function.Executable $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7;
        VersionRangeTest this;

        this := @this: VersionRangeTest;

        version := @parameter0: java.lang.String;

        $stack3 = staticinvoke <VersionRangeTest$lambda_checkInvalidRange_0__309: org.junit.jupiter.api.function.Executable bootstrap$(java.lang.String)>(version);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(version);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should have failed to construct");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Lorg/apache/maven/artifact/versioning/InvalidVersionSpecificationException;", $stack3, $stack8);

        return;
    }

    public void testContains() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        VersionRangeTest this;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;
        org.apache.maven.artifact.versioning.DefaultArtifactVersion $u0;
        org.apache.maven.artifact.versioning.VersionRangeTest $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        org.apache.maven.artifact.versioning.ArtifactVersion $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;

        this := @this: VersionRangeTest;

        $u0 = new org.apache.maven.artifact.versioning.DefaultArtifactVersion;

        specialinvoke $u0.<org.apache.maven.artifact.versioning.DefaultArtifactVersion: void <init>(java.lang.String)>("2.0.5");

        $r0 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r1 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack3 = virtualinvoke $r0.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("2.0.5", $r1);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack3);

        $r2 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r3 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack4 = virtualinvoke $r2.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("2.0.4", $r3);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack4);

        $r4 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r5 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack5 = virtualinvoke $r4.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0.5]", $r5);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack5);

        $r6 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r7 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack6 = virtualinvoke $r6.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0.6,)", $r7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack6);

        $r8 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r9 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack7 = virtualinvoke $r8.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0.6]", $r9);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack7);

        $r10 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r11 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack8 = virtualinvoke $r10.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0,2.1]", $r11);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack8);

        $r12 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r13 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack9 = virtualinvoke $r12.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0,2.0.3]", $r13);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack9);

        $r14 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r15 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack10 = virtualinvoke $r14.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0,2.0.5]", $r15);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack10);

        $r16 = (org.apache.maven.artifact.versioning.VersionRangeTest) this;

        $r17 = (org.apache.maven.artifact.versioning.ArtifactVersion) $u0;

        $stack11 = virtualinvoke $r16.<org.apache.maven.artifact.versioning.VersionRangeTest: boolean enforceVersion(java.lang.String,org.apache.maven.artifact.versioning.ArtifactVersion)>("[2.0,2.0.5)", $r17);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack11);

        return;
    }

    public boolean enforceVersion(java.lang.String, org.apache.maven.artifact.versioning.ArtifactVersion) throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        java.lang.String requiredVersionRange;
        org.apache.maven.artifact.versioning.ArtifactVersion actualVersion;
        boolean $stack5;
        VersionRangeTest this;
        org.apache.maven.artifact.versioning.VersionRange vr#2;

        this := @this: VersionRangeTest;

        requiredVersionRange := @parameter0: java.lang.String;

        actualVersion := @parameter1: org.apache.maven.artifact.versioning.ArtifactVersion;

        vr#2 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(requiredVersionRange);

        $stack5 = virtualinvoke vr#2.<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>(actualVersion);

        return $stack5;
    }

    public void testOrder0()
    {
        VersionRangeTest this;

        this := @this: VersionRangeTest;

        return;
    }

    public void testCache() throws org.apache.maven.artifact.versioning.InvalidVersionSpecificationException
    {
        org.apache.maven.artifact.versioning.VersionRange range, $stack6, spec, $stack8, version, $stack13;
        int $stack11, $stack16;
        boolean $stack17;
        VersionRangeTest this;
        java.util.List restrictions;

        this := @this: VersionRangeTest;

        range = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2]");

        $stack6 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("[1.0,1.2]");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertSame(java.lang.Object,java.lang.Object)>(range, $stack6);

        spec = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.0");

        $stack8 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>("1.0");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertSame(java.lang.Object,java.lang.Object)>(spec, $stack8);

        restrictions = virtualinvoke spec.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack11 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(1, $stack11, "check number of restrictions");

        version = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersion(java.lang.String)>("1.0");

        $stack13 = staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersion(java.lang.String)>("1.0");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertSame(java.lang.Object,java.lang.Object)>(version, $stack13);

        restrictions = virtualinvoke version.<org.apache.maven.artifact.versioning.VersionRange: java.util.List getRestrictions()>();

        $stack16 = interfaceinvoke restrictions.<java.util.List: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int,java.lang.String)>(0, $stack16, "check number of restrictions");

        $stack17 = virtualinvoke spec.<org.apache.maven.artifact.versioning.VersionRange: boolean equals(java.lang.Object)>(version);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean,java.lang.String)>($stack17, "check !VersionRange.createFromVersionSpec(x).equals(VersionRange.createFromVersion(x))");

        return;
    }

    private static void lambda$checkInvalidRange$0(java.lang.String) throws java.lang.Throwable
    {
        java.lang.String version;

        version := @parameter0: java.lang.String;

        staticinvoke <org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange createFromVersionSpec(java.lang.String)>(version);

        return;
    }

    public static void <clinit>()
    {
        <VersionRangeTest: java.lang.String CHECK_SELECTED_VERSION> = "check selected version";

        <VersionRangeTest: java.lang.String CHECK_SELECTED_VERSION_KNOWN> = "check selected version known";

        <VersionRangeTest: java.lang.String CHECK_VERSION_RECOMMENDATION> = "check version recommended";

        <VersionRangeTest: java.lang.String CHECK_LOWER_BOUND_INCLUSIVE> = "check lower bound is inclusive";

        <VersionRangeTest: java.lang.String CHECK_LOWER_BOUND> = "check lower bound";

        <VersionRangeTest: java.lang.String CHECK_UPPER_BOUND_INCLUSIVE> = "check upper bound is inclusive";

        <VersionRangeTest: java.lang.String CHECK_UPPER_BOUND> = "check upper bound";

        <VersionRangeTest: java.lang.String CHECK_NUM_RESTRICTIONS> = "check number of restrictions";

        return;
    }
}
