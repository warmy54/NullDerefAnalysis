public class While extends org.ooc.frontend.model.Conditional
{

    public void <init>(org.ooc.frontend.model.Expression, org.ooc.frontend.model.tokens.Token)
    {
        While this;
        org.ooc.frontend.model.Expression condition;
        org.ooc.frontend.model.tokens.Token startToken;

        this := @this: While;

        condition := @parameter0: org.ooc.frontend.model.Expression;

        startToken := @parameter1: org.ooc.frontend.model.tokens.Token;

        specialinvoke this.<org.ooc.frontend.model.Conditional: void <init>(org.ooc.frontend.model.Expression,org.ooc.frontend.model.tokens.Token)>(condition, startToken);

        return;
    }

    public void accept(org.ooc.frontend.Visitor) throws java.io.IOException
    {
        org.ooc.frontend.Visitor visitor;
        While this;
        org.ooc.frontend.model.While $r0;

        this := @this: While;

        visitor := @parameter0: org.ooc.frontend.Visitor;

        $r0 = (org.ooc.frontend.model.While) this;

        interfaceinvoke visitor.<org.ooc.frontend.Visitor: void visit(org.ooc.frontend.model.While)>($r0);

        return;
    }

    public boolean replace(org.ooc.frontend.model.Node, org.ooc.frontend.model.Node)
    {
        org.ooc.frontend.model.Node oldie, kiddo;
        While this;
        org.ooc.frontend.model.Expression $stack3, $stack4;
        org.ooc.frontend.model.While $r0, $r1;

        this := @this: While;

        oldie := @parameter0: org.ooc.frontend.model.Node;

        kiddo := @parameter1: org.ooc.frontend.model.Node;

        $r0 = (org.ooc.frontend.model.While) this;

        $stack3 = $r0.<org.ooc.frontend.model.While: org.ooc.frontend.model.Expression condition>;

        if oldie != $stack3 goto label1;

        $stack4 = (org.ooc.frontend.model.Expression) kiddo;

        $r1 = (org.ooc.frontend.model.While) this;

        $r1.<org.ooc.frontend.model.While: org.ooc.frontend.model.Expression condition> = $stack4;

        return 1;

     label1:
        return 0;
    }
}
