public class WrapperExecutor extends java.lang.Object
{
    public static final java.lang.String DISTRIBUTION_URL_PROPERTY;
    public static final java.lang.String DISTRIBUTION_BASE_PROPERTY;
    public static final java.lang.String ZIP_STORE_BASE_PROPERTY;
    public static final java.lang.String DISTRIBUTION_PATH_PROPERTY;
    public static final java.lang.String ZIP_STORE_PATH_PROPERTY;
    private final java.util.Properties properties;
    private final java.nio.file.Path propertiesFile;
    private final org.apache.maven.wrapper.WrapperConfiguration config;

    public static org.apache.maven.wrapper.WrapperExecutor forProjectDirectory(java.nio.file.Path)
    {
        org.apache.maven.wrapper.WrapperExecutor $stack1;
        java.nio.file.Path projectDir, $stack2;
        java.util.Properties $stack3;

        projectDir := @parameter0: java.nio.file.Path;

        $stack1 = new org.apache.maven.wrapper.WrapperExecutor;

        $stack2 = interfaceinvoke projectDir.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("maven/wrapper/maven-wrapper.properties");

        $stack3 = new java.util.Properties;

        specialinvoke $stack3.<java.util.Properties: void <init>()>();

        specialinvoke $stack1.<org.apache.maven.wrapper.WrapperExecutor: void <init>(java.nio.file.Path,java.util.Properties)>($stack2, $stack3);

        return $stack1;
    }

    public static org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)
    {
        java.nio.file.Path propertiesFile;
        java.nio.file.LinkOption[] $stack1;
        boolean $stack2;
        org.apache.maven.wrapper.WrapperExecutor $stack3;
        java.util.Properties $stack4;
        java.lang.RuntimeException $stack5;
        java.lang.Object[] $stack6;
        java.lang.String $stack7;

        propertiesFile := @parameter0: java.nio.file.Path;

        $stack1 = newarray (java.nio.file.LinkOption)[0];

        $stack2 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(propertiesFile, $stack1);

        if $stack2 != 0 goto label1;

        $stack5 = new java.lang.RuntimeException;

        $stack6 = newarray (java.lang.Object)[1];

        $stack6[0] = propertiesFile;

        $stack7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Wrapper properties file \'%s\' does not exist.", $stack6);

        specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack7);

        throw $stack5;

     label1:
        $stack3 = new org.apache.maven.wrapper.WrapperExecutor;

        $stack4 = new java.util.Properties;

        specialinvoke $stack4.<java.util.Properties: void <init>()>();

        specialinvoke $stack3.<org.apache.maven.wrapper.WrapperExecutor: void <init>(java.nio.file.Path,java.util.Properties)>(propertiesFile, $stack4);

        return $stack3;
    }

    void <init>(java.nio.file.Path, java.util.Properties)
    {
        WrapperExecutor this;
        java.util.Properties properties;
        java.nio.file.Path propertiesFile;
        java.nio.file.LinkOption[] $stack5;
        boolean $stack6;
        org.apache.maven.wrapper.WrapperConfiguration $stack7, $stack9, $stack10, $stack14, $stack15, $stack19, $stack20, $stack24, $stack25, $u0;
        java.net.URI $stack8;
        java.lang.String $stack12, $stack13, $stack17, $stack18, $stack22, $stack23, $stack27, $stack28, $stack32;
        java.lang.Exception $stack29;
        java.lang.Object[] $stack31;
        java.lang.RuntimeException $u1;
        org.apache.maven.wrapper.WrapperExecutor $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        this := @this: WrapperExecutor;

        propertiesFile := @parameter0: java.nio.file.Path;

        properties := @parameter1: java.util.Properties;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new org.apache.maven.wrapper.WrapperConfiguration;

        specialinvoke $u0.<org.apache.maven.wrapper.WrapperConfiguration: void <init>()>();

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $r0.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config> = $u0;

        $r1 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $r1.<org.apache.maven.wrapper.WrapperExecutor: java.util.Properties properties> = properties;

        $r2 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $r2.<org.apache.maven.wrapper.WrapperExecutor: java.nio.file.Path propertiesFile> = propertiesFile;

        $stack5 = newarray (java.nio.file.LinkOption)[0];

        $stack6 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(propertiesFile, $stack5);

        if $stack6 == 0 goto label4;

     label1:
        staticinvoke <org.apache.maven.wrapper.WrapperExecutor: void loadProperties(java.nio.file.Path,java.util.Properties)>(propertiesFile, properties);

        $r3 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack7 = $r3.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $r4 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack8 = specialinvoke $r4.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI prepareDistributionUri()>();

        virtualinvoke $stack7.<org.apache.maven.wrapper.WrapperConfiguration: void setDistribution(java.net.URI)>($stack8);

        $r5 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack10 = $r5.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $r6 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack9 = $r6.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $stack12 = virtualinvoke $stack9.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionBase()>();

        $r7 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack13 = specialinvoke $r7.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String)>("distributionBase", $stack12);

        virtualinvoke $stack10.<org.apache.maven.wrapper.WrapperConfiguration: void setDistributionBase(java.lang.String)>($stack13);

        $r8 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack15 = $r8.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $r9 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack14 = $r9.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $stack17 = virtualinvoke $stack14.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionPath()>();

        $r10 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack18 = specialinvoke $r10.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String)>("distributionPath", $stack17);

        virtualinvoke $stack15.<org.apache.maven.wrapper.WrapperConfiguration: void setDistributionPath(java.lang.String)>($stack18);

        $r11 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack20 = $r11.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $r12 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack19 = $r12.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $stack22 = virtualinvoke $stack19.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipBase()>();

        $r13 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack23 = specialinvoke $r13.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String)>("zipStoreBase", $stack22);

        virtualinvoke $stack20.<org.apache.maven.wrapper.WrapperConfiguration: void setZipBase(java.lang.String)>($stack23);

        $r14 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack25 = $r14.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $r15 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack24 = $r15.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $stack27 = virtualinvoke $stack24.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipPath()>();

        $r16 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack28 = specialinvoke $r16.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String)>("zipStorePath", $stack27);

        virtualinvoke $stack25.<org.apache.maven.wrapper.WrapperConfiguration: void setZipPath(java.lang.String)>($stack28);

     label2:
        goto label4;

     label3:
        $stack29 := @caughtexception;

        $u1 = new java.lang.RuntimeException;

        $stack31 = newarray (java.lang.Object)[1];

        $stack31[0] = propertiesFile;

        $stack32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load wrapper properties from \'%s\'.", $stack31);

        specialinvoke $u1.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack32, $stack29);

        throw $u1;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    private java.net.URI prepareDistributionUri() throws java.net.URISyntaxException
    {
        WrapperExecutor this;
        java.net.URI source, $stack8;
        java.lang.String $stack3, $stack6;
        java.nio.file.Path $stack4, $stack5, $stack7;
        org.apache.maven.wrapper.WrapperExecutor $r0, $r1;

        this := @this: WrapperExecutor;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        source = specialinvoke $r0.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI readDistroUrl()>();

        $stack3 = virtualinvoke source.<java.net.URI: java.lang.String getScheme()>();

        if $stack3 != null goto label1;

        $r1 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack4 = $r1.<org.apache.maven.wrapper.WrapperExecutor: java.nio.file.Path propertiesFile>;

        $stack5 = interfaceinvoke $stack4.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $stack6 = virtualinvoke source.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        $stack7 = interfaceinvoke $stack5.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>($stack6);

        $stack8 = interfaceinvoke $stack7.<java.nio.file.Path: java.net.URI toUri()>();

        return $stack8;

     label1:
        return source;
    }

    private java.net.URI readDistroUrl() throws java.net.URISyntaxException
    {
        WrapperExecutor this;
        java.util.Properties $stack1;
        java.lang.String $stack2, $stack5;
        java.net.URI $u0;
        org.apache.maven.wrapper.WrapperExecutor $r0, $r1, $r2;

        this := @this: WrapperExecutor;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack1 = $r0.<org.apache.maven.wrapper.WrapperExecutor: java.util.Properties properties>;

        $stack2 = virtualinvoke $stack1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("distributionUrl");

        if $stack2 == null goto label1;

        $u0 = new java.net.URI;

        $r1 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack5 = specialinvoke $r1.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String)>("distributionUrl");

        specialinvoke $u0.<java.net.URI: void <init>(java.lang.String)>($stack5);

        return $u0;

     label1:
        $r2 = (org.apache.maven.wrapper.WrapperExecutor) this;

        specialinvoke $r2.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String reportMissingProperty(java.lang.String)>("distributionUrl");

        return null;
    }

    private static void loadProperties(java.nio.file.Path, java.util.Properties) throws java.io.IOException
    {
        java.nio.file.Path propertiesFile;
        java.nio.file.OpenOption[] $stack5;
        java.io.InputStream inStream;
        java.util.Properties properties;
        java.lang.Throwable $stack7, $stack8;

        propertiesFile := @parameter0: java.nio.file.Path;

        properties := @parameter1: java.util.Properties;

        $stack5 = newarray (java.nio.file.OpenOption)[0];

        inStream = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(propertiesFile, $stack5);

     label1:
        virtualinvoke properties.<java.util.Properties: void load(java.io.InputStream)>(inStream);

     label2:
        if inStream == null goto label8;

        virtualinvoke inStream.<java.io.InputStream: void close()>();

        goto label8;

     label3:
        $stack8 := @caughtexception;

        if inStream == null goto label7;

     label4:
        virtualinvoke inStream.<java.io.InputStream: void close()>();

     label5:
        goto label7;

     label6:
        $stack7 := @caughtexception;

        virtualinvoke $stack8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack7);

     label7:
        throw $stack8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.net.URI getDistribution()
    {
        WrapperExecutor this;
        org.apache.maven.wrapper.WrapperConfiguration $stack1;
        java.net.URI $stack2;
        org.apache.maven.wrapper.WrapperExecutor $r0;

        this := @this: WrapperExecutor;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack1 = $r0.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        $stack2 = virtualinvoke $stack1.<org.apache.maven.wrapper.WrapperConfiguration: java.net.URI getDistribution()>();

        return $stack2;
    }

    public org.apache.maven.wrapper.WrapperConfiguration getConfiguration()
    {
        WrapperExecutor this;
        org.apache.maven.wrapper.WrapperConfiguration $stack1;
        org.apache.maven.wrapper.WrapperExecutor $r0;

        this := @this: WrapperExecutor;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack1 = $r0.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        return $stack1;
    }

    public void execute(java.lang.String[], org.apache.maven.wrapper.Installer, org.apache.maven.wrapper.BootstrapMainStarter) throws java.lang.Exception
    {
        org.apache.maven.wrapper.Installer install;
        WrapperExecutor this;
        org.apache.maven.wrapper.WrapperConfiguration $stack5;
        java.nio.file.Path mavenHome;
        org.apache.maven.wrapper.BootstrapMainStarter bootstrapMainStarter;
        java.lang.String[] args;
        org.apache.maven.wrapper.WrapperExecutor $r0;

        this := @this: WrapperExecutor;

        args := @parameter0: java.lang.String[];

        install := @parameter1: org.apache.maven.wrapper.Installer;

        bootstrapMainStarter := @parameter2: org.apache.maven.wrapper.BootstrapMainStarter;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack5 = $r0.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration config>;

        mavenHome = virtualinvoke install.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack5);

        virtualinvoke bootstrapMainStarter.<org.apache.maven.wrapper.BootstrapMainStarter: void start(java.lang.String[],java.nio.file.Path)>(args, mavenHome);

        return;
    }

    private java.lang.String getProperty(java.lang.String)
    {
        WrapperExecutor this;
        java.lang.String propertyName, $stack2;
        org.apache.maven.wrapper.WrapperExecutor $r0;

        this := @this: WrapperExecutor;

        propertyName := @parameter0: java.lang.String;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack2 = specialinvoke $r0.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String getProperty(java.lang.String,java.lang.String)>(propertyName, null);

        return $stack2;
    }

    private java.lang.String getProperty(java.lang.String, java.lang.String)
    {
        WrapperExecutor this;
        java.lang.String propertyName, value, defaultValue, $stack6;
        java.util.Properties $stack4;
        org.apache.maven.wrapper.WrapperExecutor $r0, $r1;

        this := @this: WrapperExecutor;

        propertyName := @parameter0: java.lang.String;

        defaultValue := @parameter1: java.lang.String;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack4 = $r0.<org.apache.maven.wrapper.WrapperExecutor: java.util.Properties properties>;

        value = virtualinvoke $stack4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(propertyName);

        if value == null goto label1;

        return value;

     label1:
        if defaultValue == null goto label2;

        return defaultValue;

     label2:
        $r1 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack6 = specialinvoke $r1.<org.apache.maven.wrapper.WrapperExecutor: java.lang.String reportMissingProperty(java.lang.String)>(propertyName);

        return $stack6;
    }

    private java.lang.String reportMissingProperty(java.lang.String)
    {
        java.lang.Object[] $stack3;
        java.lang.String propertyName, $stack5;
        WrapperExecutor this;
        java.nio.file.Path $stack4;
        java.lang.RuntimeException $u0;
        org.apache.maven.wrapper.WrapperExecutor $r0;

        this := @this: WrapperExecutor;

        propertyName := @parameter0: java.lang.String;

        $u0 = new java.lang.RuntimeException;

        $stack3 = newarray (java.lang.Object)[2];

        $stack3[0] = propertyName;

        $r0 = (org.apache.maven.wrapper.WrapperExecutor) this;

        $stack4 = $r0.<org.apache.maven.wrapper.WrapperExecutor: java.nio.file.Path propertiesFile>;

        $stack3[1] = $stack4;

        $stack5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No value with key \'%s\' specified in wrapper properties file \'%s\'.", $stack3);

        specialinvoke $u0.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack5);

        throw $u0;
    }

    public static void <clinit>()
    {
        <WrapperExecutor: java.lang.String ZIP_STORE_PATH_PROPERTY> = "zipStorePath";

        <WrapperExecutor: java.lang.String DISTRIBUTION_PATH_PROPERTY> = "distributionPath";

        <WrapperExecutor: java.lang.String ZIP_STORE_BASE_PROPERTY> = "zipStoreBase";

        <WrapperExecutor: java.lang.String DISTRIBUTION_BASE_PROPERTY> = "distributionBase";

        <WrapperExecutor: java.lang.String DISTRIBUTION_URL_PROPERTY> = "distributionUrl";

        return;
    }
}
