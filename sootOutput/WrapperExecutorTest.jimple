public class WrapperExecutorTest extends java.lang.Object
{
    public java.nio.file.Path testDir;
    private org.apache.maven.wrapper.Installer install;
    private org.apache.maven.wrapper.BootstrapMainStarter start;
    private java.nio.file.Path propertiesFile;
    private java.util.Properties properties;
    private java.nio.file.Path mockInstallDir;

    public void <init>()
    {
        WrapperExecutorTest this;
        java.util.Properties $u0;
        org.apache.maven.wrapper.WrapperExecutorTest $r0;

        this := @this: WrapperExecutorTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties> = $u0;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack1, $stack2, $stack8, $stack10, $stack14, $stack15, $stack16, $stack17, $stack28;
        java.lang.Object $stack3, $stack6, $stack12;
        org.apache.maven.wrapper.Installer $stack4, $stack5;
        org.apache.maven.wrapper.WrapperConfiguration $stack7;
        org.mockito.stubbing.OngoingStubbing $stack9;
        org.apache.maven.wrapper.BootstrapMainStarter $stack13;
        java.util.Properties $stack18, $stack20, $stack22, $stack24, $stack26, $stack29;
        org.apache.maven.wrapper.WrapperExecutorTest $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack1 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path testDir>;

        $stack2 = interfaceinvoke $stack1.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("mock-dir");

        $r1 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r1.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path mockInstallDir> = $stack2;

        $stack3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/wrapper/Installer;");

        $stack4 = (org.apache.maven.wrapper.Installer) $stack3;

        $r2 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r2.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.Installer install> = $stack4;

        $r3 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack5 = $r3.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.Installer install>;

        $stack6 = staticinvoke <org.mockito.Mockito: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/maven/wrapper/WrapperConfiguration;");

        $stack7 = (org.apache.maven.wrapper.WrapperConfiguration) $stack6;

        $stack8 = virtualinvoke $stack5.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack7);

        $stack9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack8);

        $r4 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack10 = $r4.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path mockInstallDir>;

        interfaceinvoke $stack9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($stack10);

        $stack12 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/maven/wrapper/BootstrapMainStarter;");

        $stack13 = (org.apache.maven.wrapper.BootstrapMainStarter) $stack12;

        $r5 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r5.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.BootstrapMainStarter start> = $stack13;

        $r6 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack14 = $r6.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path testDir>;

        $stack15 = interfaceinvoke $stack14.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("maven");

        $stack16 = interfaceinvoke $stack15.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("wrapper");

        $stack17 = interfaceinvoke $stack16.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("maven-wrapper.properties");

        $r7 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r7.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile> = $stack17;

        $r8 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack18 = $r8.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack18.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("distributionUrl", "http://server/test/maven.zip");

        $r9 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack20 = $r9.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack20.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("distributionBase", "testDistBase");

        $r10 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack22 = $r10.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack22.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("distributionPath", "testDistPath");

        $r11 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack24 = $r11.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack24.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("zipStoreBase", "testZipBase");

        $r12 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack26 = $r12.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack26.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("zipStorePath", "testZipPath");

        $r13 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack29 = $r13.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        $r14 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack28 = $r14.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        $r15 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        specialinvoke $r15.<org.apache.maven.wrapper.WrapperExecutorTest: void writePropertiesFile(java.util.Properties,java.nio.file.Path,java.lang.String)>($stack29, $stack28, "header");

        return;
    }

    public void loadWrapperMetadataFromFile() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack2;
        org.apache.maven.wrapper.WrapperExecutor wrapper;
        java.net.URI $stack5, $stack8, $u0, $u1;
        org.apache.maven.wrapper.WrapperConfiguration $stack7, $stack10, $stack13, $stack16, $stack19;
        java.lang.String $stack11, $stack14, $stack17, $stack20;
        org.apache.maven.wrapper.WrapperExecutorTest $r0;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack2 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        wrapper = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)>($stack2);

        $u0 = new java.net.URI;

        specialinvoke $u0.<java.net.URI: void <init>(java.lang.String)>("http://server/test/maven.zip");

        $stack5 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u0, $stack5);

        $u1 = new java.net.URI;

        specialinvoke $u1.<java.net.URI: void <init>(java.lang.String)>("http://server/test/maven.zip");

        $stack7 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.wrapper.WrapperConfiguration: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u1, $stack8);

        $stack10 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack11 = virtualinvoke $stack10.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testDistBase", $stack11);

        $stack13 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack14 = virtualinvoke $stack13.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testDistPath", $stack14);

        $stack16 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack17 = virtualinvoke $stack16.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testZipBase", $stack17);

        $stack19 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack20 = virtualinvoke $stack19.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testZipPath", $stack20);

        return;
    }

    public void loadWrapperMetadataFromDirectory() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack2;
        org.apache.maven.wrapper.WrapperExecutor wrapper;
        java.net.URI $stack5, $stack8, $u0, $u1;
        org.apache.maven.wrapper.WrapperConfiguration $stack7, $stack10, $stack13, $stack16, $stack19;
        java.lang.String $stack11, $stack14, $stack17, $stack20;
        org.apache.maven.wrapper.WrapperExecutorTest $r0;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack2 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path testDir>;

        wrapper = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forProjectDirectory(java.nio.file.Path)>($stack2);

        $u0 = new java.net.URI;

        specialinvoke $u0.<java.net.URI: void <init>(java.lang.String)>("http://server/test/maven.zip");

        $stack5 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u0, $stack5);

        $u1 = new java.net.URI;

        specialinvoke $u1.<java.net.URI: void <init>(java.lang.String)>("http://server/test/maven.zip");

        $stack7 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack8 = virtualinvoke $stack7.<org.apache.maven.wrapper.WrapperConfiguration: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u1, $stack8);

        $stack10 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack11 = virtualinvoke $stack10.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testDistBase", $stack11);

        $stack13 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack14 = virtualinvoke $stack13.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testDistPath", $stack14);

        $stack16 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack17 = virtualinvoke $stack16.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testZipBase", $stack17);

        $stack19 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack20 = virtualinvoke $stack19.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("testZipPath", $stack20);

        return;
    }

    public void useDefaultMetadataNoProeprtiesFile() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack2, $stack3;
        org.apache.maven.wrapper.WrapperExecutor wrapper;
        java.net.URI $stack5, $stack7;
        org.apache.maven.wrapper.WrapperConfiguration $stack6, $stack9, $stack12, $stack15, $stack18;
        java.lang.String $stack10, $stack13, $stack16, $stack19;
        org.apache.maven.wrapper.WrapperExecutorTest $r0;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack2 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path testDir>;

        $stack3 = interfaceinvoke $stack2.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("unknown");

        wrapper = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forProjectDirectory(java.nio.file.Path)>($stack3);

        $stack5 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack5);

        $stack6 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack7 = virtualinvoke $stack6.<org.apache.maven.wrapper.WrapperConfiguration: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNull(java.lang.Object)>($stack7);

        $stack9 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack10 = virtualinvoke $stack9.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MAVEN_USER_HOME", $stack10);

        $stack12 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack13 = virtualinvoke $stack12.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("wrapper/dists", $stack13);

        $stack15 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack16 = virtualinvoke $stack15.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MAVEN_USER_HOME", $stack16);

        $stack18 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack19 = virtualinvoke $stack18.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("wrapper/dists", $stack19);

        return;
    }

    public void propertiesFileOnlyContainsDistURL() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.util.Properties $stack3, $stack6, $u0;
        java.nio.file.Path $stack5, $stack7;
        org.apache.maven.wrapper.WrapperExecutor wrapper;
        java.net.URI $stack10, $stack13, $u1, $u2;
        org.apache.maven.wrapper.WrapperConfiguration $stack12, $stack15, $stack18, $stack21, $stack24;
        java.lang.String $stack16, $stack19, $stack22, $stack25;
        org.apache.maven.wrapper.WrapperExecutorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: WrapperExecutorTest;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties> = $u0;

        $r1 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack3 = $r1.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("distributionUrl", "http://server/test/maven.zip");

        $r2 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack6 = $r2.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        $r3 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack5 = $r3.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        $r4 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        specialinvoke $r4.<org.apache.maven.wrapper.WrapperExecutorTest: void writePropertiesFile(java.util.Properties,java.nio.file.Path,java.lang.String)>($stack6, $stack5, "header");

        $r5 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack7 = $r5.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        wrapper = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)>($stack7);

        $u1 = new java.net.URI;

        specialinvoke $u1.<java.net.URI: void <init>(java.lang.String)>("http://server/test/maven.zip");

        $stack10 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u1, $stack10);

        $u2 = new java.net.URI;

        specialinvoke $u2.<java.net.URI: void <init>(java.lang.String)>("http://server/test/maven.zip");

        $stack12 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack13 = virtualinvoke $stack12.<org.apache.maven.wrapper.WrapperConfiguration: java.net.URI getDistribution()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($u2, $stack13);

        $stack15 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack16 = virtualinvoke $stack15.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MAVEN_USER_HOME", $stack16);

        $stack18 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack19 = virtualinvoke $stack18.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getDistributionPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("wrapper/dists", $stack19);

        $stack21 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack22 = virtualinvoke $stack21.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipBase()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("MAVEN_USER_HOME", $stack22);

        $stack24 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperConfiguration getConfiguration()>();

        $stack25 = virtualinvoke $stack24.<org.apache.maven.wrapper.WrapperConfiguration: java.lang.String getZipPath()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>("wrapper/dists", $stack25);

        return;
    }

    public void executeInstallAndLaunch() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack2, $stack16;
        org.apache.maven.wrapper.WrapperExecutor wrapper;
        java.lang.String[] $stack4, $stack15;
        org.apache.maven.wrapper.BootstrapMainStarter $stack5, $stack13, $stack17;
        org.apache.maven.wrapper.Installer $stack6, $stack7, $stack9;
        java.lang.Object $stack8, $stack10, $stack14;
        org.apache.maven.wrapper.WrapperConfiguration $stack11;
        org.apache.maven.wrapper.WrapperExecutorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack2 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        wrapper = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forProjectDirectory(java.nio.file.Path)>($stack2);

        $stack4 = newarray (java.lang.String)[1];

        $stack4[0] = "arg";

        $r1 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack6 = $r1.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.Installer install>;

        $r2 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack5 = $r2.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.BootstrapMainStarter start>;

        virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: void execute(java.lang.String[],org.apache.maven.wrapper.Installer,org.apache.maven.wrapper.BootstrapMainStarter)>($stack4, $stack6, $stack5);

        $r3 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack7 = $r3.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.Installer install>;

        $stack8 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack7);

        $stack9 = (org.apache.maven.wrapper.Installer) $stack8;

        $stack10 = staticinvoke <org.mockito.Mockito: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/maven/wrapper/WrapperConfiguration;");

        $stack11 = (org.apache.maven.wrapper.WrapperConfiguration) $stack10;

        virtualinvoke $stack9.<org.apache.maven.wrapper.Installer: java.nio.file.Path createDist(org.apache.maven.wrapper.WrapperConfiguration)>($stack11);

        $r4 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack13 = $r4.<org.apache.maven.wrapper.WrapperExecutorTest: org.apache.maven.wrapper.BootstrapMainStarter start>;

        $stack14 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>($stack13);

        $stack17 = (org.apache.maven.wrapper.BootstrapMainStarter) $stack14;

        $stack15 = newarray (java.lang.String)[1];

        $stack15[0] = "arg";

        $r5 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack16 = $r5.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path mockInstallDir>;

        virtualinvoke $stack17.<org.apache.maven.wrapper.BootstrapMainStarter: void start(java.lang.String[],java.nio.file.Path)>($stack15, $stack16);

        return;
    }

    public void failWhenDistNotSetInProperties() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack3, $stack10;
        java.util.Properties $stack4, $u0;
        org.junit.jupiter.api.function.Executable $stack6;
        java.lang.Throwable $stack7;
        java.lang.RuntimeException e;
        java.lang.StringBuilder $stack9, $stack11, $stack12, $u1;
        java.lang.String $stack13, $stack14;
        org.apache.maven.wrapper.WrapperExecutorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: WrapperExecutorTest;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties> = $u0;

        $r1 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack4 = $r1.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        $r2 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack3 = $r2.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        $r3 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        specialinvoke $r3.<org.apache.maven.wrapper.WrapperExecutorTest: void writePropertiesFile(java.util.Properties,java.nio.file.Path,java.lang.String)>($stack4, $stack3, "header");

        $r4 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack6 = staticinvoke <WrapperExecutorTest$lambda_failWhenDistNotSetInProperties_0__309: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.wrapper.WrapperExecutorTest)>($r4);

        $stack7 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/RuntimeException;", $stack6, "Expected RuntimeException");

        e = (java.lang.RuntimeException) $stack7;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value with key \'distributionUrl\' specified in wrapper properties file \'");

        $r5 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack10 = $r5.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = virtualinvoke e.<java.lang.RuntimeException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        return;
    }

    public void failWhenPropertiesFileDoesNotExist()
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack2, $stack3, $stack9;
        org.junit.jupiter.api.function.Executable $stack5;
        java.lang.Throwable $stack6;
        java.lang.RuntimeException e;
        java.lang.StringBuilder $stack8, $stack10, $stack11, $u0;
        java.lang.String $stack12, $stack13;
        org.apache.maven.wrapper.WrapperExecutorTest $r0, $r1, $r2, $r3;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack2 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path testDir>;

        $stack3 = interfaceinvoke $stack2.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("unknown.properties");

        $r1 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r1.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile> = $stack3;

        $r2 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack5 = staticinvoke <WrapperExecutorTest$lambda_failWhenPropertiesFileDoesNotExist_1__310: org.junit.jupiter.api.function.Executable bootstrap$(org.apache.maven.wrapper.WrapperExecutorTest)>($r2);

        $stack6 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable,java.lang.String)>(class "Ljava/lang/RuntimeException;", $stack5, "Expected RuntimeException");

        e = (java.lang.RuntimeException) $stack6;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrapper properties file \'");

        $r3 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack9 = $r3.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist.");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack13 = virtualinvoke e.<java.lang.RuntimeException: java.lang.String getMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        return;
    }

    public void testRelativeDistUrl() throws java.lang.Exception
    {
        WrapperExecutorTest this;
        java.util.Properties $stack3, $stack6, $u0;
        java.nio.file.Path $stack5, $stack7;
        org.apache.maven.wrapper.WrapperExecutor wrapper;
        java.net.URI $stack10, $stack12;
        java.lang.String $stack11, $stack13;
        boolean $stack14;
        org.apache.maven.wrapper.WrapperExecutorTest $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: WrapperExecutorTest;

        $u0 = new java.util.Properties;

        specialinvoke $u0.<java.util.Properties: void <init>()>();

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties> = $u0;

        $r1 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack3 = $r1.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        virtualinvoke $stack3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("distributionUrl", "some/relative/url/to/bin.zip");

        $r2 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack6 = $r2.<org.apache.maven.wrapper.WrapperExecutorTest: java.util.Properties properties>;

        $r3 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack5 = $r3.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        $r4 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        specialinvoke $r4.<org.apache.maven.wrapper.WrapperExecutorTest: void writePropertiesFile(java.util.Properties,java.nio.file.Path,java.lang.String)>($stack6, $stack5, "header");

        $r5 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack7 = $r5.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        wrapper = staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)>($stack7);

        $stack10 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI getDistribution()>();

        $stack11 = virtualinvoke $stack10.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertNotEquals(java.lang.Object,java.lang.Object)>("some/relative/url/to/bin.zip", $stack11);

        $stack12 = virtualinvoke wrapper.<org.apache.maven.wrapper.WrapperExecutor: java.net.URI getDistribution()>();

        $stack13 = virtualinvoke $stack12.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean endsWith(java.lang.String)>("some/relative/url/to/bin.zip");

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack14);

        return;
    }

    private void writePropertiesFile(java.util.Properties, java.nio.file.Path, java.lang.String) throws java.io.IOException
    {
        java.nio.file.Path propertiesFile, $stack7;
        java.nio.file.attribute.FileAttribute[] $stack8;
        java.nio.file.OpenOption[] $stack10;
        java.io.OutputStream outStream;
        java.util.Properties properties;
        java.lang.String message;
        java.lang.Throwable $stack12, $stack13;
        WrapperExecutorTest this;

        this := @this: WrapperExecutorTest;

        properties := @parameter0: java.util.Properties;

        propertiesFile := @parameter1: java.nio.file.Path;

        message := @parameter2: java.lang.String;

        $stack7 = interfaceinvoke propertiesFile.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $stack8 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($stack7, $stack8);

        $stack10 = newarray (java.nio.file.OpenOption)[0];

        outStream = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(propertiesFile, $stack10);

     label1:
        virtualinvoke properties.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>(outStream, message);

     label2:
        if outStream == null goto label8;

        virtualinvoke outStream.<java.io.OutputStream: void close()>();

        goto label8;

     label3:
        $stack13 := @caughtexception;

        if outStream == null goto label7;

     label4:
        virtualinvoke outStream.<java.io.OutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $stack12 := @caughtexception;

        virtualinvoke $stack13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack12);

     label7:
        throw $stack13;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void lambda$failWhenPropertiesFileDoesNotExist$1() throws java.lang.Throwable
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack1;
        org.apache.maven.wrapper.WrapperExecutorTest $r0;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack1 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)>($stack1);

        return;
    }

    private void lambda$failWhenDistNotSetInProperties$0() throws java.lang.Throwable
    {
        WrapperExecutorTest this;
        java.nio.file.Path $stack1;
        org.apache.maven.wrapper.WrapperExecutorTest $r0;

        this := @this: WrapperExecutorTest;

        $r0 = (org.apache.maven.wrapper.WrapperExecutorTest) this;

        $stack1 = $r0.<org.apache.maven.wrapper.WrapperExecutorTest: java.nio.file.Path propertiesFile>;

        staticinvoke <org.apache.maven.wrapper.WrapperExecutor: org.apache.maven.wrapper.WrapperExecutor forWrapperPropertiesFile(java.nio.file.Path)>($stack1);

        return;
    }
}
