public final class XmlOrderedResult extends java.lang.Object
{
    private final boolean ordered;
    private final java.lang.String errorMessage;

    private void <init>(boolean, java.lang.String)
    {
        XmlOrderedResult this;
        boolean ordered;
        java.lang.String errorMessage;
        sortpom.util.XmlOrderedResult $r0, $r1;

        this := @this: XmlOrderedResult;

        ordered := @parameter0: boolean;

        errorMessage := @parameter1: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (sortpom.util.XmlOrderedResult) this;

        $r0.<sortpom.util.XmlOrderedResult: boolean ordered> = ordered;

        $r1 = (sortpom.util.XmlOrderedResult) this;

        $r1.<sortpom.util.XmlOrderedResult: java.lang.String errorMessage> = errorMessage;

        return;
    }

    public static sortpom.util.XmlOrderedResult ordered()
    {
        sortpom.util.XmlOrderedResult $stack0;

        $stack0 = new sortpom.util.XmlOrderedResult;

        specialinvoke $stack0.<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>(1, "");

        return $stack0;
    }

    public static sortpom.util.XmlOrderedResult nameDiffers(java.lang.String, java.lang.String)
    {
        sortpom.util.XmlOrderedResult $stack2;
        java.lang.Object[] $stack3;
        java.lang.String newElementName, originalElementName, $stack5;

        originalElementName := @parameter0: java.lang.String;

        newElementName := @parameter1: java.lang.String;

        $stack2 = new sortpom.util.XmlOrderedResult;

        $stack3 = newarray (java.lang.Object)[2];

        $stack3[0] = newElementName;

        $stack3[1] = originalElementName;

        $stack5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The xml element <%s> should be placed before <%s>", $stack3);

        specialinvoke $stack2.<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>(0, $stack5);

        return $stack2;
    }

    public static sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String, int, int)
    {
        sortpom.util.XmlOrderedResult $stack3;
        java.lang.Object[] $stack4;
        java.lang.String name, $stack11;
        int newSize, originalSize;
        java.lang.Integer $stack8, $stack10;

        name := @parameter0: java.lang.String;

        originalSize := @parameter1: int;

        newSize := @parameter2: int;

        $stack3 = new sortpom.util.XmlOrderedResult;

        $stack4 = newarray (java.lang.Object)[4];

        $stack4[0] = name;

        $stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newSize);

        $stack4[1] = $stack8;

        $stack4[2] = name;

        $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(originalSize);

        $stack4[3] = $stack10;

        $stack11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The xml element <%s> with %s child elements should be placed before element <%s> with %s child elements", $stack4);

        specialinvoke $stack3.<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>(0, $stack11);

        return $stack3;
    }

    public static sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String, java.lang.String, java.lang.String)
    {
        sortpom.util.XmlOrderedResult $stack3;
        java.lang.Object[] $stack4;
        java.lang.String name, newElementText, originalElementText, $stack6;

        name := @parameter0: java.lang.String;

        originalElementText := @parameter1: java.lang.String;

        newElementText := @parameter2: java.lang.String;

        $stack3 = new sortpom.util.XmlOrderedResult;

        $stack4 = newarray (java.lang.Object)[6];

        $stack4[0] = name;

        $stack4[1] = newElementText;

        $stack4[2] = name;

        $stack4[3] = name;

        $stack4[4] = originalElementText;

        $stack4[5] = name;

        $stack6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The xml element <%s>%s</%s> should be placed before <%s>%s</%s>", $stack4);

        specialinvoke $stack3.<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>(0, $stack6);

        return $stack3;
    }

    public static sortpom.util.XmlOrderedResult lineDiffers(int, java.lang.String)
    {
        sortpom.util.XmlOrderedResult $stack2;
        java.lang.Object[] $stack3;
        int lineNumber;
        java.lang.Integer $stack7;
        java.lang.String sortedXmlLine, $stack8;

        lineNumber := @parameter0: int;

        sortedXmlLine := @parameter1: java.lang.String;

        $stack2 = new sortpom.util.XmlOrderedResult;

        $stack3 = newarray (java.lang.Object)[2];

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(lineNumber);

        $stack3[0] = $stack7;

        $stack3[1] = sortedXmlLine;

        $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The line %d is not considered sorted, should be %s", $stack3);

        specialinvoke $stack2.<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>(0, $stack8);

        return $stack2;
    }

    public static sortpom.util.XmlOrderedResult lineSeparatorCharactersDiffer()
    {
        sortpom.util.XmlOrderedResult $stack0;

        $stack0 = new sortpom.util.XmlOrderedResult;

        specialinvoke $stack0.<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>(0, "The line separator characters differ from sorted pom");

        return $stack0;
    }

    public boolean isOrdered()
    {
        XmlOrderedResult this;
        boolean $stack1;
        sortpom.util.XmlOrderedResult $r0;

        this := @this: XmlOrderedResult;

        $r0 = (sortpom.util.XmlOrderedResult) this;

        $stack1 = $r0.<sortpom.util.XmlOrderedResult: boolean ordered>;

        return $stack1;
    }

    public java.lang.String getErrorMessage()
    {
        XmlOrderedResult this;
        java.lang.String $stack1;
        sortpom.util.XmlOrderedResult $r0;

        this := @this: XmlOrderedResult;

        $r0 = (sortpom.util.XmlOrderedResult) this;

        $stack1 = $r0.<sortpom.util.XmlOrderedResult: java.lang.String errorMessage>;

        return $stack1;
    }
}
