class XmlOutputGeneratorTest extends java.lang.Object
{

    void <init>()
    {
        XmlOutputGeneratorTest this;

        this := @this: XmlOutputGeneratorTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    void simulateIOExceptionToTriggerExceptionMessage()
    {
        org.jdom.Document $stack5, document;
        java.lang.Object $stack6;
        java.util.List $stack7;
        org.mockito.stubbing.OngoingStubbing $stack8;
        org.mockito.stubbing.Answer $stack9;
        sortpom.XmlOutputGenerator $stack11;
        sortpom.parameter.PluginParameters$Builder $stack12, $stack13;
        sortpom.parameter.PluginParameters $stack14;
        org.junit.jupiter.api.function.Executable testMethod;
        java.lang.Throwable $stack16;
        sortpom.exception.FailureException thrown;
        java.lang.String $stack18;
        org.hamcrest.Matcher $stack19, $stack20;
        XmlOutputGeneratorTest this;

        this := @this: XmlOutputGeneratorTest;

        $stack5 = staticinvoke <sortpom.sort.XmlFragment: org.jdom.Document createXmlFragment()>();

        $stack6 = staticinvoke <org.mockito.Mockito: java.lang.Object spy(java.lang.Object)>($stack5);

        document = (org.jdom.Document) $stack6;

        $stack7 = virtualinvoke document.<org.jdom.Document: java.util.List getContent()>();

        $stack8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($stack7);

        $stack9 = staticinvoke <XmlOutputGeneratorTest$lambda_simulateIOExceptionToTriggerExceptionMessage_0__309: org.mockito.stubbing.Answer bootstrap$()>();

        interfaceinvoke $stack8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenAnswer(org.mockito.stubbing.Answer)>($stack9);

        $stack11 = new sortpom.XmlOutputGenerator;

        specialinvoke $stack11.<sortpom.XmlOutputGenerator: void <init>()>();

        $stack12 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack13 = virtualinvoke $stack12.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>("\n", 1, 1, 0);

        $stack14 = virtualinvoke $stack13.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        virtualinvoke $stack11.<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>($stack14);

        testMethod = staticinvoke <XmlOutputGeneratorTest$lambda_simulateIOExceptionToTriggerExceptionMessage_1__310: org.junit.jupiter.api.function.Executable bootstrap$(sortpom.XmlOutputGenerator,org.jdom.Document)>($stack11, document);

        $stack16 = staticinvoke <org.junit.jupiter.api.Assertions: java.lang.Throwable assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)>(class "Lsortpom/exception/FailureException;", testMethod);

        thrown = (sortpom.exception.FailureException) $stack16;

        $stack18 = virtualinvoke thrown.<sortpom.exception.FailureException: java.lang.String getMessage()>();

        $stack19 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>("Could not format pom files content");

        $stack20 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($stack19);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Unexpected message", $stack18, $stack20);

        return;
    }

    private static void lambda$simulateIOExceptionToTriggerExceptionMessage$1(sortpom.XmlOutputGenerator, org.jdom.Document) throws java.lang.Throwable
    {
        sortpom.XmlOutputGenerator xmlOutputGenerator;
        org.jdom.Document document;

        xmlOutputGenerator := @parameter0: sortpom.XmlOutputGenerator;

        document := @parameter1: org.jdom.Document;

        virtualinvoke xmlOutputGenerator.<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>(document);

        return;
    }

    private static java.lang.Object lambda$simulateIOExceptionToTriggerExceptionMessage$0(org.mockito.invocation.InvocationOnMock) throws java.lang.Throwable
    {
        java.io.IOException $stack1;
        org.mockito.invocation.InvocationOnMock invocation;

        invocation := @parameter0: org.mockito.invocation.InvocationOnMock;

        $stack1 = new java.io.IOException;

        specialinvoke $stack1.<java.io.IOException: void <init>()>();

        throw $stack1;
    }
}
