class XmlProcessorTest extends java.lang.Object
{

    void <init>()
    {
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    final void testSortXmlAttributes() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Attribute_input.xml", "src/test/resources/Attribute_expected.xml");

        return;
    }

    final void testSortXmlCharacter() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Character_input.xml", "src/test/resources/Character_expected.xml");

        return;
    }

    final void testSortXmlComplex() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Complex_input.xml", "src/test/resources/Complex_expected.xml");

        return;
    }

    final void testSortXmlFullFromAlphabeticalOrder() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)>("default_0_4_0");

        virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/full_alfa_input.xml", "src/test/resources/full_expected.xml");

        return;
    }

    final void testSortXmlFullToAlphabetical() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1, $stack2;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        $stack2 = virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil sortAlphabeticalOnly()>();

        virtualinvoke $stack2.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/full_unsorted_input.xml", "src/test/resources/full_alfa_input.xml");

        return;
    }

    final void testSortXmlMultilineComment() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/MultilineComment_input.xml", "src/test/resources/MultilineComment_expected.xml");

        return;
    }

    final void testSortXmlReal1() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Real1_input.xml", "src/test/resources/Real1_expected.xml");

        return;
    }

    final void testSortXmlSimple() throws java.lang.Exception
    {
        sortpom.util.XmlProcessorTestUtil $stack1;
        XmlProcessorTest this;

        this := @this: XmlProcessorTest;

        $stack1 = staticinvoke <sortpom.util.XmlProcessorTestUtil: sortpom.util.XmlProcessorTestUtil create()>();

        virtualinvoke $stack1.<sortpom.util.XmlProcessorTestUtil: void testInputAndExpected(java.lang.String,java.lang.String)>("src/test/resources/Simple_input.xml", "src/test/resources/Simple_expected.xml");

        return;
    }
}
