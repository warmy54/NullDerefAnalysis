public class XmlProcessorTestUtil extends java.lang.Object
{
    private boolean sortAlphabeticalOnly;
    private boolean keepBlankLines;
    private boolean indentBlankLines;
    private java.lang.String predefinedSortOrder;
    private boolean expandEmptyElements;
    private java.lang.String lineSeparator;
    private sortpom.XmlProcessor xmlProcessor;
    private sortpom.XmlOutputGenerator xmlOutputGenerator;
    private boolean spaceBeforeCloseEmptyElement;
    private boolean sortModules;
    private java.lang.String sortDependencies;
    private java.lang.String sortPlugins;
    private boolean sortProperties;

    public static sortpom.util.XmlProcessorTestUtil create()
    {
        sortpom.util.XmlProcessorTestUtil $stack0;

        $stack0 = new sortpom.util.XmlProcessorTestUtil;

        specialinvoke $stack0.<sortpom.util.XmlProcessorTestUtil: void <init>()>();

        return $stack0;
    }

    private void <init>()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: XmlProcessorTestUtil;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean sortAlphabeticalOnly> = 0;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        $r1.<sortpom.util.XmlProcessorTestUtil: boolean keepBlankLines> = 0;

        $r2 = (sortpom.util.XmlProcessorTestUtil) this;

        $r2.<sortpom.util.XmlProcessorTestUtil: boolean indentBlankLines> = 0;

        $r3 = (sortpom.util.XmlProcessorTestUtil) this;

        $r3.<sortpom.util.XmlProcessorTestUtil: java.lang.String predefinedSortOrder> = "recommended_2008_06";

        $r4 = (sortpom.util.XmlProcessorTestUtil) this;

        $r4.<sortpom.util.XmlProcessorTestUtil: boolean expandEmptyElements> = 1;

        $r5 = (sortpom.util.XmlProcessorTestUtil) this;

        $r5.<sortpom.util.XmlProcessorTestUtil: java.lang.String lineSeparator> = "\r\n";

        $r6 = (sortpom.util.XmlProcessorTestUtil) this;

        $r6.<sortpom.util.XmlProcessorTestUtil: boolean spaceBeforeCloseEmptyElement> = 1;

        $r7 = (sortpom.util.XmlProcessorTestUtil) this;

        $r7.<sortpom.util.XmlProcessorTestUtil: boolean sortModules> = 0;

        $r8 = (sortpom.util.XmlProcessorTestUtil) this;

        $r8.<sortpom.util.XmlProcessorTestUtil: boolean sortProperties> = 0;

        return;
    }

    public void testInputAndExpected(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        XmlProcessorTestUtil this;
        java.lang.String inputFileName, actual, expectedFileName, expected;
        java.nio.charset.Charset $stack7;
        java.io.FileInputStream $u0;
        sortpom.util.XmlProcessorTestUtil $r0;

        this := @this: XmlProcessorTestUtil;

        inputFileName := @parameter0: java.lang.String;

        expectedFileName := @parameter1: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        actual = virtualinvoke $r0.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortXmlAndReturnResult(java.lang.String)>(inputFileName);

        $u0 = new java.io.FileInputStream;

        specialinvoke $u0.<java.io.FileInputStream: void <init>(java.lang.String)>(expectedFileName);

        $stack7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        expected = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>($u0, $stack7);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(expected, actual);

        return;
    }

    public java.lang.String sortXmlAndReturnResult(java.lang.String) throws java.lang.Exception
    {
        XmlProcessorTestUtil this;
        java.lang.String inputFileName, $stack6;
        sortpom.XmlProcessor $stack2, $stack3;
        sortpom.XmlOutputGenerator $stack4;
        org.jdom.Document $stack5;
        sortpom.util.XmlProcessorTestUtil $r0, $r1, $r2, $r3;

        this := @this: XmlProcessorTestUtil;

        inputFileName := @parameter0: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        specialinvoke $r0.<sortpom.util.XmlProcessorTestUtil: void setup(java.lang.String)>(inputFileName);

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack2 = $r1.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        virtualinvoke $stack2.<sortpom.XmlProcessor: void sortXml()>();

        $r2 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack4 = $r2.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlOutputGenerator xmlOutputGenerator>;

        $r3 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack3 = $r3.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        $stack5 = virtualinvoke $stack3.<sortpom.XmlProcessor: org.jdom.Document getNewDocument()>();

        $stack6 = virtualinvoke $stack4.<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>($stack5);

        return $stack6;
    }

    public void testVerifyXmlIsOrdered(java.lang.String) throws java.lang.Exception
    {
        XmlProcessorTestUtil this;
        java.lang.String inputFileName;
        sortpom.XmlProcessor $stack2, $stack3;
        sortpom.util.XmlOrderedResult $stack4;
        boolean $stack5;
        sortpom.util.XmlProcessorTestUtil $r0, $r1, $r2;

        this := @this: XmlProcessorTestUtil;

        inputFileName := @parameter0: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        specialinvoke $r0.<sortpom.util.XmlProcessorTestUtil: void setup(java.lang.String)>(inputFileName);

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack2 = $r1.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        virtualinvoke $stack2.<sortpom.XmlProcessor: void sortXml()>();

        $r2 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack3 = $r2.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        $stack4 = virtualinvoke $stack3.<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>();

        $stack5 = virtualinvoke $stack4.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack5);

        return;
    }

    public void testVerifyXmlIsNotOrdered(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        XmlProcessorTestUtil this;
        java.lang.String inputFileName, infoMessage, $stack8;
        sortpom.XmlProcessor $stack4, $stack5;
        sortpom.util.XmlOrderedResult xmlOrdered;
        boolean $stack7;
        sortpom.util.XmlProcessorTestUtil $r0, $r1, $r2;

        this := @this: XmlProcessorTestUtil;

        inputFileName := @parameter0: java.lang.String;

        infoMessage := @parameter1: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        specialinvoke $r0.<sortpom.util.XmlProcessorTestUtil: void setup(java.lang.String)>(inputFileName);

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack4 = $r1.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        virtualinvoke $stack4.<sortpom.XmlProcessor: void sortXml()>();

        $r2 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack5 = $r2.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        xmlOrdered = virtualinvoke $stack5.<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>();

        $stack7 = virtualinvoke xmlOrdered.<sortpom.util.XmlOrderedResult: boolean isOrdered()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertFalse(boolean)>($stack7);

        $stack8 = virtualinvoke xmlOrdered.<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(java.lang.Object,java.lang.Object)>(infoMessage, $stack8);

        return;
    }

    private void setup(java.lang.String) throws java.lang.Exception
    {
        sortpom.parameter.PluginParameters$Builder $stack6, $stack7, $stack8, $stack9, $stack14, $stack16, $stack22, $stack27;
        XmlProcessorTestUtil this;
        boolean $stack10, $stack11, $stack12, $stack15, $stack23, $stack24, $stack38;
        java.lang.String $stack13, $stack18, $stack21, $stack25, $stack26, inputFileName, xml;
        java.lang.StringBuilder $stack19, $stack20, $u0;
        sortpom.parameter.PluginParameters pluginParameters;
        java.nio.charset.Charset $stack30, $stack43;
        sortpom.wrapper.WrapperFactoryImpl $stack34, $u3;
        sortpom.XmlOutputGenerator $stack37, $u5;
        sortpom.XmlProcessor $stack41, $stack44, $u4;
        byte[] $stack45;
        java.lang.Object wrapperFactory;
        java.io.FileInputStream $u1;
        sortpom.util.FileUtil $u2;
        sortpom.util.XmlProcessorTestUtil$1 $u6;
        refutils.ReflectionHelper $u7, $u8;
        java.io.ByteArrayInputStream $u9;
        sortpom.util.XmlProcessorTestUtil $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        sortpom.wrapper.operation.WrapperFactory $r10;

        this := @this: XmlProcessorTestUtil;

        inputFileName := @parameter0: java.lang.String;

        $stack6 = staticinvoke <sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>();

        $stack7 = virtualinvoke $stack6.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setPomFile(java.io.File)>(null);

        $stack8 = virtualinvoke $stack7.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFileOutput(boolean,java.lang.String,java.lang.String,boolean)>(0, ".bak", null, 0);

        $stack9 = virtualinvoke $stack8.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setEncoding(java.lang.String)>("UTF-8");

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack13 = $r0.<sortpom.util.XmlProcessorTestUtil: java.lang.String lineSeparator>;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack12 = $r1.<sortpom.util.XmlProcessorTestUtil: boolean expandEmptyElements>;

        $r2 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack11 = $r2.<sortpom.util.XmlProcessorTestUtil: boolean spaceBeforeCloseEmptyElement>;

        $r3 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack10 = $r3.<sortpom.util.XmlProcessorTestUtil: boolean keepBlankLines>;

        $stack14 = virtualinvoke $stack9.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>($stack13, $stack12, $stack11, $stack10);

        $r4 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack15 = $r4.<sortpom.util.XmlProcessorTestUtil: boolean indentBlankLines>;

        $stack16 = virtualinvoke $stack14.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>(2, $stack15, 0);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $r5 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack18 = $r5.<sortpom.util.XmlProcessorTestUtil: java.lang.String predefinedSortOrder>;

        $stack19 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = virtualinvoke $stack16.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortOrder(java.lang.String,java.lang.String)>($stack21, null);

        $r6 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack26 = $r6.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortDependencies>;

        $r7 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack25 = $r7.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortPlugins>;

        $r8 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack24 = $r8.<sortpom.util.XmlProcessorTestUtil: boolean sortProperties>;

        $r9 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack23 = $r9.<sortpom.util.XmlProcessorTestUtil: boolean sortModules>;

        $stack27 = virtualinvoke $stack22.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($stack26, "", $stack25, $stack24, $stack23, 0);

        pluginParameters = virtualinvoke $stack27.<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>();

        $u1 = new java.io.FileInputStream;

        specialinvoke $u1.<java.io.FileInputStream: void <init>(java.lang.String)>(inputFileName);

        $stack30 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        xml = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>($u1, $stack30);

        $u2 = new sortpom.util.FileUtil;

        specialinvoke $u2.<sortpom.util.FileUtil: void <init>()>();

        virtualinvoke $u2.<sortpom.util.FileUtil: void setup(sortpom.parameter.PluginParameters)>(pluginParameters);

        $u3 = new sortpom.wrapper.WrapperFactoryImpl;

        specialinvoke $u3.<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>($u2);

        wrapperFactory = $u3;

        $stack34 = (sortpom.wrapper.WrapperFactoryImpl) $u3;

        virtualinvoke $stack34.<sortpom.wrapper.WrapperFactoryImpl: void setup(sortpom.parameter.PluginParameters)>(pluginParameters);

        $u4 = new sortpom.XmlProcessor;

        $r10 = (sortpom.wrapper.operation.WrapperFactory) $u3;

        specialinvoke $u4.<sortpom.XmlProcessor: void <init>(sortpom.wrapper.operation.WrapperFactory)>($r10);

        $r11 = (sortpom.util.XmlProcessorTestUtil) this;

        $r11.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor> = $u4;

        $u5 = new sortpom.XmlOutputGenerator;

        specialinvoke $u5.<sortpom.XmlOutputGenerator: void <init>()>();

        $r12 = (sortpom.util.XmlProcessorTestUtil) this;

        $r12.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlOutputGenerator xmlOutputGenerator> = $u5;

        $r13 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack37 = $r13.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlOutputGenerator xmlOutputGenerator>;

        virtualinvoke $stack37.<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>(pluginParameters);

        $r14 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack38 = $r14.<sortpom.util.XmlProcessorTestUtil: boolean sortAlphabeticalOnly>;

        if $stack38 == 0 goto label1;

        $u6 = new sortpom.util.XmlProcessorTestUtil$1;

        $r15 = (sortpom.util.XmlProcessorTestUtil) this;

        specialinvoke $u6.<sortpom.util.XmlProcessorTestUtil$1: void <init>(sortpom.util.XmlProcessorTestUtil)>($r15);

        wrapperFactory = $u6;

        goto label2;

     label1:
        $u7 = new refutils.ReflectionHelper;

        specialinvoke $u7.<refutils.ReflectionHelper: void <init>(java.lang.Object)>($u3);

        virtualinvoke $u7.<refutils.ReflectionHelper: void setField(java.lang.Object)>($u2);

     label2:
        $u8 = new refutils.ReflectionHelper;

        $r16 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack41 = $r16.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        specialinvoke $u8.<refutils.ReflectionHelper: void <init>(java.lang.Object)>($stack41);

        virtualinvoke $u8.<refutils.ReflectionHelper: void setField(java.lang.Object)>(wrapperFactory);

        $r17 = (sortpom.util.XmlProcessorTestUtil) this;

        $stack44 = $r17.<sortpom.util.XmlProcessorTestUtil: sortpom.XmlProcessor xmlProcessor>;

        $u9 = new java.io.ByteArrayInputStream;

        $stack43 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $stack45 = virtualinvoke xml.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack43);

        specialinvoke $u9.<java.io.ByteArrayInputStream: void <init>(byte[])>($stack45);

        virtualinvoke $stack44.<sortpom.XmlProcessor: void setOriginalXml(java.io.InputStream)>($u9);

        return;
    }

    public sortpom.util.XmlProcessorTestUtil sortAlphabeticalOnly()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean sortAlphabeticalOnly> = 1;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil keepBlankLines()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean keepBlankLines> = 1;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil lineSeparator(java.lang.String)
    {
        XmlProcessorTestUtil this;
        java.lang.String lineSeparator;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        lineSeparator := @parameter0: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: java.lang.String lineSeparator> = lineSeparator;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil indentBlankLines()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean indentBlankLines> = 1;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil predefinedSortOrder(java.lang.String)
    {
        XmlProcessorTestUtil this;
        java.lang.String predefinedSortOrder;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        predefinedSortOrder := @parameter0: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: java.lang.String predefinedSortOrder> = predefinedSortOrder;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil sortModules()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean sortModules> = 1;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil sortDependencies(java.lang.String)
    {
        XmlProcessorTestUtil this;
        java.lang.String sortDependencies;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        sortDependencies := @parameter0: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortDependencies> = sortDependencies;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil sortPlugins(java.lang.String)
    {
        XmlProcessorTestUtil this;
        java.lang.String sortPlugins;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        sortPlugins := @parameter0: java.lang.String;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: java.lang.String sortPlugins> = sortPlugins;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil noSpaceBeforeCloseEmptyElement()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean spaceBeforeCloseEmptyElement> = 0;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil sortProperties()
    {
        XmlProcessorTestUtil this;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean sortProperties> = 1;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }

    public sortpom.util.XmlProcessorTestUtil expandEmptyElements(boolean)
    {
        XmlProcessorTestUtil this;
        boolean expand;
        sortpom.util.XmlProcessorTestUtil $r0, $r1;

        this := @this: XmlProcessorTestUtil;

        expand := @parameter0: boolean;

        $r0 = (sortpom.util.XmlProcessorTestUtil) this;

        $r0.<sortpom.util.XmlProcessorTestUtil: boolean expandEmptyElements> = expand;

        $r1 = (sortpom.util.XmlProcessorTestUtil) this;

        return $r1;
    }
}
