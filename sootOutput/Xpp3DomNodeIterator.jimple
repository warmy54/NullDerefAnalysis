class Xpp3DomNodeIterator extends java.lang.Object implements org.apache.commons.jxpath.ri.model.NodeIterator
{
    private org.apache.commons.jxpath.ri.model.NodePointer parent;
    private org.apache.commons.jxpath.ri.compiler.NodeTest test;
    private org.codehaus.plexus.util.xml.Xpp3Dom node;
    private org.codehaus.plexus.util.xml.Xpp3Dom[] children;
    private java.util.List filteredChildren;
    private int filteredIndex;
    private org.codehaus.plexus.util.xml.Xpp3Dom child;
    private int position;

    public void <init>(org.apache.commons.jxpath.ri.model.NodePointer, org.apache.commons.jxpath.ri.compiler.NodeTest, boolean, org.apache.commons.jxpath.ri.model.NodePointer)
    {
        Xpp3DomNodeIterator this;
        org.apache.commons.jxpath.ri.model.NodePointer parent, startWith;
        java.lang.Object $stack7, $stack12;
        org.codehaus.plexus.util.xml.Xpp3Dom $stack8, $stack9, startWithNode, $stack21;
        org.codehaus.plexus.util.xml.Xpp3Dom[] $stack10, $stack13, $stack20;
        org.apache.commons.jxpath.ri.compiler.NodeTest test;
        boolean reverse, $stack22;
        int $stack14, $stack15, $stack19, $stack23, $stack24, $stack27, $stack28;
        java.util.ArrayList $u0;
        java.lang.UnsupportedOperationException $u1;
        org.apache.maven.project.harness.Xpp3DomNodeIterator $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        this := @this: Xpp3DomNodeIterator;

        parent := @parameter0: org.apache.commons.jxpath.ri.model.NodePointer;

        test := @parameter1: org.apache.commons.jxpath.ri.compiler.NodeTest;

        reverse := @parameter2: boolean;

        startWith := @parameter3: org.apache.commons.jxpath.ri.model.NodePointer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.ArrayList;

        specialinvoke $u0.<java.util.ArrayList: void <init>()>();

        $r0 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r0.<org.apache.maven.project.harness.Xpp3DomNodeIterator: java.util.List filteredChildren> = $u0;

        $r1 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r1.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.model.NodePointer parent> = parent;

        $stack7 = virtualinvoke parent.<org.apache.commons.jxpath.ri.model.NodePointer: java.lang.Object getNode()>();

        $stack8 = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack7;

        $r2 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r2.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom node> = $stack8;

        $r3 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack9 = $r3.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom node>;

        $stack10 = virtualinvoke $stack9.<org.codehaus.plexus.util.xml.Xpp3Dom: org.codehaus.plexus.util.xml.Xpp3Dom[] getChildren()>();

        $r4 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r4.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom[] children> = $stack10;

        if startWith == null goto label3;

        $stack12 = virtualinvoke startWith.<org.apache.commons.jxpath.ri.model.NodePointer: java.lang.Object getNode()>();

        startWithNode = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack12;

     label1:
        $r5 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack15 = $r5.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        $r6 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack13 = $r6.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom[] children>;

        $stack14 = lengthof $stack13;

        if $stack15 >= $stack14 goto label3;

        $r7 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack20 = $r7.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom[] children>;

        $r8 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack19 = $r8.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        $stack21 = $stack20[$stack19];

        $stack22 = virtualinvoke startWithNode.<org.codehaus.plexus.util.xml.Xpp3Dom: boolean equals(java.lang.Object)>($stack21);

        if $stack22 == 0 goto label2;

        $r9 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack27 = $r9.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        $stack28 = $stack27 + 1;

        $r10 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r10.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex> = $stack28;

        goto label3;

     label2:
        $r11 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack23 = $r11.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        $stack24 = $stack23 + 1;

        $r12 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r12.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex> = $stack24;

        goto label1;

     label3:
        $r13 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r13.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.compiler.NodeTest test> = test;

        if reverse == 0 goto label4;

        $u1 = new java.lang.UnsupportedOperationException;

        specialinvoke $u1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $u1;

     label4:
        return;
    }

    public org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()
    {
        Xpp3DomNodeIterator this;
        int $stack1;
        org.codehaus.plexus.util.xml.Xpp3Dom $stack2, $stack4;
        org.apache.commons.jxpath.ri.model.NodePointer $stack5, $r5;
        org.apache.maven.project.harness.Xpp3DomNodePointer $stack3, $u0;
        org.apache.maven.project.harness.Xpp3DomNodeIterator $r0, $r1, $r2, $r3, $r4;

        this := @this: Xpp3DomNodeIterator;

        $r0 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack1 = $r0.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int position>;

        if $stack1 != 0 goto label1;

        $r1 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        virtualinvoke $r1.<org.apache.maven.project.harness.Xpp3DomNodeIterator: boolean setPosition(int)>(1);

     label1:
        $r2 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack2 = $r2.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom child>;

        if $stack2 != null goto label2;

        $stack3 = null;

        goto label3;

     label2:
        $u0 = new org.apache.maven.project.harness.Xpp3DomNodePointer;

        $stack3 = $u0;

        $r3 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack5 = $r3.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.model.NodePointer parent>;

        $r4 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack4 = $r4.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom child>;

        specialinvoke $u0.<org.apache.maven.project.harness.Xpp3DomNodePointer: void <init>(org.apache.commons.jxpath.ri.model.NodePointer,org.codehaus.plexus.util.xml.Xpp3Dom)>($stack5, $stack4);

     label3:
        $r5 = (org.apache.commons.jxpath.ri.model.NodePointer) $stack3;

        return $r5;
    }

    public int getPosition()
    {
        Xpp3DomNodeIterator this;
        int $stack1;
        org.apache.maven.project.harness.Xpp3DomNodeIterator $r0;

        this := @this: Xpp3DomNodeIterator;

        $r0 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack1 = $r0.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int position>;

        return $stack1;
    }

    public boolean setPosition(int)
    {
        Xpp3DomNodeIterator this;
        int position, $stack5, $stack9;
        java.util.List $stack4, $stack10;
        java.lang.Object $stack11;
        org.codehaus.plexus.util.xml.Xpp3Dom $stack6, $stack2;
        boolean $stack3;
        org.apache.maven.project.harness.Xpp3DomNodeIterator $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: Xpp3DomNodeIterator;

        position := @parameter0: int;

        $r0 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r0.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int position> = position;

        $r1 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        specialinvoke $r1.<org.apache.maven.project.harness.Xpp3DomNodeIterator: void filterChildren(int)>(position);

        if position <= 0 goto label1;

        $r2 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack4 = $r2.<org.apache.maven.project.harness.Xpp3DomNodeIterator: java.util.List filteredChildren>;

        $stack5 = interfaceinvoke $stack4.<java.util.List: int size()>();

        if position > $stack5 goto label1;

        $r3 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack10 = $r3.<org.apache.maven.project.harness.Xpp3DomNodeIterator: java.util.List filteredChildren>;

        $stack9 = position - 1;

        $stack11 = interfaceinvoke $stack10.<java.util.List: java.lang.Object get(int)>($stack9);

        $stack6 = (org.codehaus.plexus.util.xml.Xpp3Dom) $stack11;

        goto label2;

     label1:
        $stack6 = null;

     label2:
        $r4 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r4.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom child> = $stack6;

        $r5 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack2 = $r5.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom child>;

        if $stack2 == null goto label3;

        $stack3 = 1;

        goto label4;

     label3:
        $stack3 = 0;

     label4:
        return $stack3;
    }

    private void filterChildren(int)
    {
        int position, $stack4, $stack6, $stack7, $stack8, $stack11, $stack12;
        Xpp3DomNodeIterator this;
        java.util.List $stack3, $stack15;
        org.codehaus.plexus.util.xml.Xpp3Dom[] $stack5, $stack9;
        org.codehaus.plexus.util.xml.Xpp3Dom child;
        boolean $stack10;
        org.apache.maven.project.harness.Xpp3DomNodeIterator $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        this := @this: Xpp3DomNodeIterator;

        position := @parameter0: int;

     label1:
        $r0 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack3 = $r0.<org.apache.maven.project.harness.Xpp3DomNodeIterator: java.util.List filteredChildren>;

        $stack4 = interfaceinvoke $stack3.<java.util.List: int size()>();

        if position <= $stack4 goto label3;

        $r1 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack7 = $r1.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        $r2 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack5 = $r2.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom[] children>;

        $stack6 = lengthof $stack5;

        if $stack7 >= $stack6 goto label3;

        $r3 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack9 = $r3.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.codehaus.plexus.util.xml.Xpp3Dom[] children>;

        $r4 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack8 = $r4.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        child = $stack9[$stack8];

        $r5 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack10 = specialinvoke $r5.<org.apache.maven.project.harness.Xpp3DomNodeIterator: boolean testNode(org.codehaus.plexus.util.xml.Xpp3Dom)>(child);

        if $stack10 == 0 goto label2;

        $r6 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack15 = $r6.<org.apache.maven.project.harness.Xpp3DomNodeIterator: java.util.List filteredChildren>;

        interfaceinvoke $stack15.<java.util.List: boolean add(java.lang.Object)>(child);

     label2:
        $r7 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack11 = $r7.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex>;

        $stack12 = $stack11 + 1;

        $r8 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $r8.<org.apache.maven.project.harness.Xpp3DomNodeIterator: int filteredIndex> = $stack12;

        goto label1;

     label3:
        return;
    }

    private boolean testNode(org.codehaus.plexus.util.xml.Xpp3Dom)
    {
        Xpp3DomNodeIterator this;
        org.apache.commons.jxpath.ri.compiler.NodeTest $stack8, $stack9, $stack11, $stack13, $stack20;
        boolean $stack10, $stack12, $stack19, wildcard, $stack27, $stack28, $stack30, $stack29, $stack17;
        org.apache.commons.jxpath.ri.compiler.NodeTypeTest $stack14;
        int $stack15;
        org.codehaus.plexus.util.xml.Xpp3Dom node;
        java.lang.String $stack16, nodeName, namespaceURI, testName, testPrefix;
        org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest;
        org.apache.commons.jxpath.ri.QName $stack23, $stack25;
        org.apache.maven.project.harness.Xpp3DomNodeIterator $r0, $r1, $r2, $r3, $r4;

        this := @this: Xpp3DomNodeIterator;

        node := @parameter0: org.codehaus.plexus.util.xml.Xpp3Dom;

        $r0 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack8 = $r0.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.compiler.NodeTest test>;

        if $stack8 != null goto label01;

        return 1;

     label01:
        $r1 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack9 = $r1.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.compiler.NodeTest test>;

        $stack10 = $stack9 instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest;

        if $stack10 == 0 goto label09;

        nodeName = virtualinvoke node.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getName()>();

        $stack19 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(nodeName);

        if $stack19 == 0 goto label02;

        return 0;

     label02:
        $r2 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack20 = $r2.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.compiler.NodeTest test>;

        nodeNameTest = (org.apache.commons.jxpath.ri.compiler.NodeNameTest) $stack20;

        namespaceURI = virtualinvoke nodeNameTest.<org.apache.commons.jxpath.ri.compiler.NodeNameTest: java.lang.String getNamespaceURI()>();

        wildcard = virtualinvoke nodeNameTest.<org.apache.commons.jxpath.ri.compiler.NodeNameTest: boolean isWildcard()>();

        $stack23 = virtualinvoke nodeNameTest.<org.apache.commons.jxpath.ri.compiler.NodeNameTest: org.apache.commons.jxpath.ri.QName getNodeName()>();

        testName = virtualinvoke $stack23.<org.apache.commons.jxpath.ri.QName: java.lang.String getName()>();

        $stack25 = virtualinvoke nodeNameTest.<org.apache.commons.jxpath.ri.compiler.NodeNameTest: org.apache.commons.jxpath.ri.QName getNodeName()>();

        testPrefix = virtualinvoke $stack25.<org.apache.commons.jxpath.ri.QName: java.lang.String getPrefix()>();

        if wildcard == 0 goto label03;

        if testPrefix != null goto label03;

        return 1;

     label03:
        if wildcard != 0 goto label04;

        $stack30 = virtualinvoke testName.<java.lang.String: boolean equals(java.lang.Object)>(nodeName);

        if $stack30 == 0 goto label08;

     label04:
        $stack27 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(namespaceURI);

        if $stack27 != 0 goto label05;

        $stack28 = staticinvoke <org.codehaus.plexus.util.StringUtils: boolean isEmpty(java.lang.String)>(testPrefix);

        if $stack28 == 0 goto label06;

     label05:
        $stack29 = 1;

        goto label07;

     label06:
        $stack29 = 0;

     label07:
        return $stack29;

     label08:
        return 0;

     label09:
        $r3 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack11 = $r3.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.compiler.NodeTest test>;

        $stack12 = $stack11 instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest;

        if $stack12 == 0 goto label15;

        $r4 = (org.apache.maven.project.harness.Xpp3DomNodeIterator) this;

        $stack13 = $r4.<org.apache.maven.project.harness.Xpp3DomNodeIterator: org.apache.commons.jxpath.ri.compiler.NodeTest test>;

        $stack14 = (org.apache.commons.jxpath.ri.compiler.NodeTypeTest) $stack13;

        $stack15 = virtualinvoke $stack14.<org.apache.commons.jxpath.ri.compiler.NodeTypeTest: int getNodeType()>();

        lookupswitch($stack15)
        {
            case 1: goto label10;
            case 2: goto label11;
            default: goto label14;
        };

     label10:
        return 1;

     label11:
        $stack16 = virtualinvoke node.<org.codehaus.plexus.util.xml.Xpp3Dom: java.lang.String getValue()>();

        if $stack16 == null goto label12;

        $stack17 = 1;

        goto label13;

     label12:
        $stack17 = 0;

     label13:
        return $stack17;

     label14:
        return 0;

     label15:
        return 0;
    }
}
