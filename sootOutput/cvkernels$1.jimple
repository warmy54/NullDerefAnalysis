class cvkernels$1 extends java.lang.ThreadLocal
{

    void <init>()
    {
        cvkernels$1 this;

        this := @this: cvkernels$1;

        specialinvoke this.<java.lang.ThreadLocal: void <init>()>();

        return;
    }

    protected org.bytedeco.javacv.cvkernels$ParallelData[] initialValue()
    {
        int $stack3, $stack4, i;
        org.bytedeco.javacv.cvkernels$ParallelData[] pd;
        org.bytedeco.javacv.cvkernels$ParallelData $stack5;
        cvkernels$1 this;

        this := @this: cvkernels$1;

        $stack3 = staticinvoke <org.bytedeco.javacv.Parallel: int getNumThreads()>();

        pd = newarray (org.bytedeco.javacv.cvkernels$ParallelData)[$stack3];

        i = 0;

     label1:
        $stack4 = lengthof pd;

        if i >= $stack4 goto label2;

        $stack5 = new org.bytedeco.javacv.cvkernels$ParallelData;

        specialinvoke $stack5.<org.bytedeco.javacv.cvkernels$ParallelData: void <init>(org.bytedeco.javacv.cvkernels$1)>(null);

        pd[i] = $stack5;

        i = i + 1;

        goto label1;

     label2:
        return pd;
    }

    protected volatile java.lang.Object initialValue()
    {
        cvkernels$1 this;
        org.bytedeco.javacv.cvkernels$ParallelData[] $stack1;
        org.bytedeco.javacv.cvkernels$1 $r0;

        this := @this: cvkernels$1;

        $r0 = (org.bytedeco.javacv.cvkernels$1) this;

        $stack1 = virtualinvoke $r0.<org.bytedeco.javacv.cvkernels$1: org.bytedeco.javacv.cvkernels$ParallelData[] initialValue()>();

        return $stack1;
    }
}
