class cvkernels$2 extends java.lang.Object implements org.bytedeco.javacv.Parallel$Looper
{
    static final boolean $assertionsDisabled;
    final org.bytedeco.javacv.cvkernels$ParallelData[] val$pd;
    final int val$x;
    final int val$w;
    final int val$depth;
    final int val$size;
    final org.bytedeco.opencv.opencv_core.CvScalar val$fillColor;

    void <init>(org.bytedeco.javacv.cvkernels$ParallelData[], int, int, int, int, org.bytedeco.opencv.opencv_core.CvScalar)
    {
        cvkernels$2 this;
        org.bytedeco.javacv.cvkernels$ParallelData[] l1;
        int l2, l3, l4, l5;
        org.bytedeco.opencv.opencv_core.CvScalar l6;
        org.bytedeco.javacv.cvkernels$2 $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: cvkernels$2;

        l1 := @parameter0: org.bytedeco.javacv.cvkernels$ParallelData[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        l4 := @parameter3: int;

        l5 := @parameter4: int;

        l6 := @parameter5: org.bytedeco.opencv.opencv_core.CvScalar;

        $r0 = (org.bytedeco.javacv.cvkernels$2) this;

        $r0.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.javacv.cvkernels$ParallelData[] val$pd> = l1;

        $r1 = (org.bytedeco.javacv.cvkernels$2) this;

        $r1.<org.bytedeco.javacv.cvkernels$2: int val$x> = l2;

        $r2 = (org.bytedeco.javacv.cvkernels$2) this;

        $r2.<org.bytedeco.javacv.cvkernels$2: int val$w> = l3;

        $r3 = (org.bytedeco.javacv.cvkernels$2) this;

        $r3.<org.bytedeco.javacv.cvkernels$2: int val$depth> = l4;

        $r4 = (org.bytedeco.javacv.cvkernels$2) this;

        $r4.<org.bytedeco.javacv.cvkernels$2: int val$size> = l5;

        $r5 = (org.bytedeco.javacv.cvkernels$2) this;

        $r5.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.opencv.opencv_core.CvScalar val$fillColor> = l6;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void loop(int, int, int)
    {
        cvkernels$2 this;
        int looperID, $stack7, 'from', $stack11, 'to', $stack13, $stack15, $stack16, $stack24, $stack30;
        org.bytedeco.javacv.cvkernels$ParallelData[] $stack5, $stack19, $stack25;
        org.bytedeco.javacv.cvkernels$ParallelData $stack6, $stack20, $stack26;
        org.bytedeco.opencv.opencv_core.CvRect $stack8, $stack9, $stack10, $stack12, r;
        boolean $stack17;
        org.bytedeco.opencv.cvkernels$KernelData $stack21, $stack22, $stack27, $stack28;
        org.bytedeco.opencv.opencv_core.CvScalar $stack23, $stack29;
        java.lang.AssertionError $u0;
        org.bytedeco.javacv.cvkernels$2 $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: cvkernels$2;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        looperID := @parameter2: int;

        $r0 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack5 = $r0.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.javacv.cvkernels$ParallelData[] val$pd>;

        $stack6 = $stack5[looperID];

        $stack8 = $stack6.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.opencv_core.CvRect roi>;

        $r1 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack7 = $r1.<org.bytedeco.javacv.cvkernels$2: int val$x>;

        $stack9 = virtualinvoke $stack8.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect x(int)>($stack7);

        $stack10 = virtualinvoke $stack9.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect y(int)>('from');

        $r2 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack11 = $r2.<org.bytedeco.javacv.cvkernels$2: int val$w>;

        $stack12 = virtualinvoke $stack10.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect width(int)>($stack11);

        $stack13 = 'to' - 'from';

        r = virtualinvoke $stack12.<org.bytedeco.opencv.opencv_core.CvRect: org.bytedeco.opencv.opencv_core.CvRect height(int)>($stack13);

        $r3 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack15 = $r3.<org.bytedeco.javacv.cvkernels$2: int val$depth>;

        if $stack15 != 32 goto label1;

        $r4 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack25 = $r4.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.javacv.cvkernels$ParallelData[] val$pd>;

        $stack26 = $stack25[looperID];

        $stack27 = $stack26.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        $stack28 = virtualinvoke $stack27.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>(0L);

        $r5 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack30 = $r5.<org.bytedeco.javacv.cvkernels$2: int val$size>;

        $r6 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack29 = $r6.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.opencv.opencv_core.CvScalar val$fillColor>;

        staticinvoke <org.bytedeco.opencv.cvkernels: void multiWarpColorTransform32F(org.bytedeco.opencv.cvkernels$KernelData,int,org.bytedeco.opencv.opencv_core.CvRect,org.bytedeco.opencv.opencv_core.CvScalar)>($stack28, $stack30, r, $stack29);

        goto label3;

     label1:
        $r7 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack16 = $r7.<org.bytedeco.javacv.cvkernels$2: int val$depth>;

        if $stack16 != 8 goto label2;

        $r8 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack19 = $r8.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.javacv.cvkernels$ParallelData[] val$pd>;

        $stack20 = $stack19[looperID];

        $stack21 = $stack20.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        $stack22 = virtualinvoke $stack21.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>(0L);

        $r9 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack24 = $r9.<org.bytedeco.javacv.cvkernels$2: int val$size>;

        $r10 = (org.bytedeco.javacv.cvkernels$2) this;

        $stack23 = $r10.<org.bytedeco.javacv.cvkernels$2: org.bytedeco.opencv.opencv_core.CvScalar val$fillColor>;

        staticinvoke <org.bytedeco.opencv.cvkernels: void multiWarpColorTransform8U(org.bytedeco.opencv.cvkernels$KernelData,int,org.bytedeco.opencv.opencv_core.CvRect,org.bytedeco.opencv.opencv_core.CvScalar)>($stack22, $stack24, r, $stack23);

        goto label3;

     label2:
        $stack17 = <org.bytedeco.javacv.cvkernels$2: boolean $assertionsDisabled>;

        if $stack17 != 0 goto label3;

        $u0 = new java.lang.AssertionError;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $u0;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/bytedeco/javacv/cvkernels;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.bytedeco.javacv.cvkernels$2: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
