public class cvkernels extends org.bytedeco.opencv.cvkernels
{
    private static java.lang.ThreadLocal parallelData;

    public void <init>()
    {
        cvkernels this;

        this := @this: cvkernels;

        specialinvoke this.<org.bytedeco.opencv.cvkernels: void <init>()>();

        return;
    }

    public static void multiWarpColorTransform(org.bytedeco.opencv.cvkernels$KernelData, org.bytedeco.opencv.opencv_core.CvRect, org.bytedeco.opencv.opencv_core.CvScalar)
    {
        org.bytedeco.opencv.cvkernels$KernelData data, $stack25, $stack50, d, $stack85, $stack93, $stack96, $stack104, $stack120, $u0;
        long $stack21, $stack35, $stack49, $stack87, $stack92, $stack95, $stack103, $stack106, $stack121, $stack122;
        int size, $stack24, $stack31, $stack32, $stack52, $stack53, $stack54, $stack59, $stack67, $stack112, $stack113, i, j, d, y, w, h, dstCount, dstCountZero, dstCountOutlier, $stack34, k;
        java.lang.ThreadLocal $stack22;
        java.lang.Object $stack23;
        org.bytedeco.javacv.cvkernels$ParallelData[] pd;
        org.bytedeco.opencv.opencv_core.CvRect roi;
        org.bytedeco.opencv.opencv_core.CvScalar fillColor;
        java.nio.DoubleBuffer $stack33, $stack43, $stack44, $stack46, $stack58, $stack61, $stack66, $stack98, $stack108, $stack111, $stack117;
        org.bytedeco.javacv.cvkernels$ParallelData $stack48, $stack84, $stack88, $stack91, $stack102, $stack119;
        double $stack55, $stack60, $stack62, $stack63, srcDstDot;
        java.nio.ByteBuffer $stack114, $stack116;
        java.nio.ByteOrder $stack115;
        byte $stack123;
        org.bytedeco.opencv.opencv_core.IplImage i#14;
        double[] dstDstDot;
        org.bytedeco.javacv.cvkernels$2 $u1;
        org.bytedeco.javacpp.Pointer $r0;
        org.bytedeco.javacv.Parallel$Looper $r1;

        data := @parameter0: org.bytedeco.opencv.cvkernels$KernelData;

        roi := @parameter1: org.bytedeco.opencv.opencv_core.CvRect;

        fillColor := @parameter2: org.bytedeco.opencv.opencv_core.CvScalar;

        $stack21 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: long capacity()>();

        size = (int) $stack21;

        $stack22 = <org.bytedeco.javacv.cvkernels: java.lang.ThreadLocal parallelData>;

        $stack23 = virtualinvoke $stack22.<java.lang.ThreadLocal: java.lang.Object get()>();

        pd = (org.bytedeco.javacv.cvkernels$ParallelData[]) $stack23;

        i = 0;

     label01:
        $stack24 = lengthof pd;

        if i >= $stack24 goto label08;

        $stack84 = pd[i];

        $stack85 = $stack84.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        if $stack85 == null goto label02;

        $stack119 = pd[i];

        $stack120 = $stack119.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        $stack121 = virtualinvoke $stack120.<org.bytedeco.opencv.cvkernels$KernelData: long capacity()>();

        $stack122 = (long) size;

        $stack123 = $stack121 cmp $stack122;

        if $stack123 >= 0 goto label05;

     label02:
        $stack88 = pd[i];

        $u0 = new org.bytedeco.opencv.cvkernels$KernelData;

        $stack87 = (long) size;

        specialinvoke $u0.<org.bytedeco.opencv.cvkernels$KernelData: void <init>(long)>($stack87);

        $stack88.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data> = $u0;

        j = 0;

     label03:
        if j >= size goto label05;

        $stack102 = pd[i];

        $stack104 = $stack102.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        $stack103 = (long) j;

        d = virtualinvoke $stack104.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack103);

        $stack106 = (long) j;

        virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack106);

        $stack108 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        if $stack108 == null goto label04;

        $stack111 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        $stack112 = virtualinvoke $stack111.<java.nio.DoubleBuffer: int capacity()>();

        $stack113 = $stack112 * 8;

        $stack114 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($stack113);

        $stack115 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $stack116 = virtualinvoke $stack114.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($stack115);

        $stack117 = virtualinvoke $stack116.<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>();

        virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstDstDot(java.nio.DoubleBuffer)>($stack117);

     label04:
        j = j + 1;

        goto label03;

     label05:
        j = 0;

     label06:
        if j >= size goto label07;

        $stack91 = pd[i];

        $stack93 = $stack91.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        $stack92 = (long) j;

        d = virtualinvoke $stack93.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack92);

        $stack95 = (long) j;

        $stack96 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack95);

        $r0 = (org.bytedeco.javacpp.Pointer) $stack96;

        virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.javacpp.Pointer put(org.bytedeco.javacpp.Pointer)>($r0);

        $stack98 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstDstDot(java.nio.DoubleBuffer)>($stack98);

        j = j + 1;

        goto label06;

     label07:
        i = i + 1;

        goto label01;

     label08:
        $stack25 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>(0L);

        i#14 = virtualinvoke $stack25.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.opencv_core.IplImage srcImg()>();

        j = virtualinvoke i#14.<org.bytedeco.opencv.opencv_core.IplImage: int depth()>();

        if roi == null goto label09;

        d = virtualinvoke roi.<org.bytedeco.opencv.opencv_core.CvRect: int x()>();

        y = virtualinvoke roi.<org.bytedeco.opencv.opencv_core.CvRect: int y()>();

        w = virtualinvoke roi.<org.bytedeco.opencv.opencv_core.CvRect: int width()>();

        h = virtualinvoke roi.<org.bytedeco.opencv.opencv_core.CvRect: int height()>();

        goto label10;

     label09:
        d = 0;

        y = 0;

        w = virtualinvoke i#14.<org.bytedeco.opencv.opencv_core.IplImage: int width()>();

        h = virtualinvoke i#14.<org.bytedeco.opencv.opencv_core.IplImage: int height()>();

     label10:
        $stack31 = y + h;

        $stack32 = lengthof pd;

        $u1 = new org.bytedeco.javacv.cvkernels$2;

        specialinvoke $u1.<org.bytedeco.javacv.cvkernels$2: void <init>(org.bytedeco.javacv.cvkernels$ParallelData[],int,int,int,int,org.bytedeco.opencv.opencv_core.CvScalar)>(pd, d, w, j, size, fillColor);

        $r1 = (org.bytedeco.javacv.Parallel$Looper) $u1;

        staticinvoke <org.bytedeco.javacv.Parallel: void loop(int,int,int,org.bytedeco.javacv.Parallel$Looper)>(y, $stack31, $stack32, $r1);

        i = 0;

     label11:
        if i >= size goto label18;

        dstCount = 0;

        dstCountZero = 0;

        dstCountOutlier = 0;

        srcDstDot = 0.0;

        dstDstDot = null;

        $stack33 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        if $stack33 == null goto label12;

        $stack66 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        $stack67 = virtualinvoke $stack66.<java.nio.DoubleBuffer: int capacity()>();

        dstDstDot = newarray (double)[$stack67];

     label12:
        j = 0;

     label13:
        $stack34 = lengthof pd;

        if j >= $stack34 goto label16;

        $stack48 = pd[j];

        $stack50 = $stack48.<org.bytedeco.javacv.cvkernels$ParallelData: org.bytedeco.opencv.cvkernels$KernelData data>;

        $stack49 = (long) i;

        d = virtualinvoke $stack50.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack49);

        $stack52 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: int dstCount()>();

        dstCount = dstCount + $stack52;

        $stack53 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: int dstCountZero()>();

        dstCountZero = dstCountZero + $stack53;

        $stack54 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: int dstCountOutlier()>();

        dstCountOutlier = dstCountOutlier + $stack54;

        $stack55 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: double srcDstDot()>();

        srcDstDot = srcDstDot + $stack55;

        if dstDstDot == null goto label15;

        $stack58 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        if $stack58 == null goto label15;

        k = 0;

     label14:
        $stack59 = lengthof dstDstDot;

        if k >= $stack59 goto label15;

        $stack60 = dstDstDot[k];

        $stack61 = virtualinvoke d.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        $stack62 = virtualinvoke $stack61.<java.nio.DoubleBuffer: double get(int)>(k);

        $stack63 = $stack60 + $stack62;

        dstDstDot[k] = $stack63;

        k = k + 1;

        goto label14;

     label15:
        j = j + 1;

        goto label13;

     label16:
        $stack35 = (long) i;

        virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData position(long)>($stack35);

        virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstCount(int)>(dstCount);

        virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstCountZero(int)>(dstCountZero);

        virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData dstCountOutlier(int)>(dstCountOutlier);

        virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: org.bytedeco.opencv.cvkernels$KernelData srcDstDot(double)>(srcDstDot);

        if dstDstDot == null goto label17;

        $stack43 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        if $stack43 == null goto label17;

        $stack44 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        virtualinvoke $stack44.<java.nio.DoubleBuffer: java.nio.DoubleBuffer position(int)>(0);

        $stack46 = virtualinvoke data.<org.bytedeco.opencv.cvkernels$KernelData: java.nio.DoubleBuffer dstDstDot()>();

        virtualinvoke $stack46.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>(dstDstDot);

     label17:
        i = i + 1;

        goto label11;

     label18:
        return;
    }

    static void <clinit>()
    {
        org.bytedeco.javacv.cvkernels$1 $u0;
        java.lang.ThreadLocal $r0;

        $u0 = new org.bytedeco.javacv.cvkernels$1;

        specialinvoke $u0.<org.bytedeco.javacv.cvkernels$1: void <init>()>();

        $r0 = (java.lang.ThreadLocal) $u0;

        <org.bytedeco.javacv.cvkernels: java.lang.ThreadLocal parallelData> = $r0;

        return;
    }
}
